/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import PatchOperation from '../model/PatchOperation';
import TimeEntryModel from '../model/TimeEntryModel';
import WorkHourInputModel from '../model/WorkHourInputModel';
import WorkHourOutputModel from '../model/WorkHourOutputModel';

/**
* HoursWrite service.
* @module api/HoursWriteApi
* @version 1.0
*/
export default class HoursWriteApi {

    /**
    * Constructs a new HoursWriteApi. 
    * @alias module:api/HoursWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the timeEntriesPatchTimeEntry operation.
     * @callback module:api/HoursWriteApi~timeEntriesPatchTimeEntryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a time entry or a part of it.
     * @param {String} guid ID of the time entry.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of TimeEntryModel.
     * @param {module:api/HoursWriteApi~timeEntriesPatchTimeEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeEntryModel>}
     */
    timeEntriesPatchTimeEntry(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling timeEntriesPatchTimeEntry");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TimeEntryModel];
      return this.apiClient.callApi(
        '/v1/timeentries/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntriesPostTimeEntry operation.
     * @callback module:api/HoursWriteApi~timeEntriesPostTimeEntryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a time entry.
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeEntryModel} [timeEntryModel] TimeEntryModel.
     * @param {module:api/HoursWriteApi~timeEntriesPostTimeEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeEntryModel>}
     */
    timeEntriesPostTimeEntry(opts, callback) {
      opts = opts || {};
      let postBody = opts['timeEntryModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TimeEntryModel];
      return this.apiClient.callApi(
        '/v1/timeentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursPatchWorkHour operation.
     * @callback module:api/HoursWriteApi~workHoursPatchWorkHourCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a work hour or a part of it
     * @param {String} guid ID of the work hour. Can also be comma separate list of IDs to patch multiple work hours with one call. When multiple IDs are given, returns model which has list of succeeded work hours and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of WorkHourInputModel
     * @param {module:api/HoursWriteApi~workHoursPatchWorkHourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursPatchWorkHour(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workHoursPatchWorkHour");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/workhours/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursPostWorkHour operation.
     * @callback module:api/HoursWriteApi~workHoursPostWorkHourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkHourOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a work hour
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkHourInputModel} [workHourInputModel] WorkHourInputModel
     * @param {module:api/HoursWriteApi~workHoursPostWorkHourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkHourOutputModel}
     */
    workHoursPostWorkHour(opts, callback) {
      opts = opts || {};
      let postBody = opts['workHourInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkHourOutputModel;
      return this.apiClient.callApi(
        '/v1/workhours', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
