/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletedProjectTravelExpenseModel from '../model/DeletedProjectTravelExpenseModel';
import ExceptionModel from '../model/ExceptionModel';
import ExpensesClass from '../model/ExpensesClass';
import ProjectTravelExpenseOutputModel from '../model/ProjectTravelExpenseOutputModel';
import TravelReimbursementOutputModel from '../model/TravelReimbursementOutputModel';

/**
* TravelsRead service.
* @module api/TravelsReadApi
* @version 1.0
*/
export default class TravelsReadApi {

    /**
    * Constructs a new TravelsReadApi. 
    * @alias module:api/TravelsReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectTravelExpensesGetDeletedProjectTravelExpenses operation.
     * @callback module:api/TravelsReadApi~projectTravelExpensesGetDeletedProjectTravelExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeletedProjectTravelExpenseModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deleted project travel expenses.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Array.<String>} [projectGuid] Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all.
     * @param {Array.<String>} [userGuid] Optional: ID of the user. If not provided, returns for all users. Default all.
     * @param {Date} [deletedSince] Optional: Get project travel expenses that have been deleted after this date time (greater or equal).
     * @param {module:api/TravelsReadApi~projectTravelExpensesGetDeletedProjectTravelExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeletedProjectTravelExpenseModel>}
     */
    projectTravelExpensesGetDeletedProjectTravelExpenses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'projectGuid': this.apiClient.buildCollectionParam(opts['projectGuid'], 'multi'),
        'userGuid': this.apiClient.buildCollectionParam(opts['userGuid'], 'multi'),
        'deletedSince': opts['deletedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeletedProjectTravelExpenseModel];
      return this.apiClient.callApi(
        '/v1/deletedprojecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetProjectTravelExpense operation.
     * @callback module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectTravelExpenseOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project travel expense by ID.
     * @param {String} guid Id used to get the project travel expense.
     * @param {module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectTravelExpenseOutputModel}
     */
    projectTravelExpensesGetProjectTravelExpense(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectTravelExpensesGetProjectTravelExpense");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectTravelExpenseOutputModel;
      return this.apiClient.callApi(
        '/v1/projecttravelexpenses/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetProjectTravelExpenses operation.
     * @callback module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project travel expenses.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get project travel expenses that have been added or changed after this date time (greater or equal).
     * @param {module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetProjectTravelExpenses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/projecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetProjectTravelExpensesForProject operation.
     * @callback module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses for a project
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isBillable] Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {Boolean} [isBilled] Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.
     * @param {Date} [invoiceableDate] Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isBillablePeriodInFuture] Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense
     * @param {module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetProjectTravelExpensesForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectTravelExpensesGetProjectTravelExpensesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'isBillable': opts['isBillable'],
        'isBilled': opts['isBilled'],
        'invoiceableDate': opts['invoiceableDate'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isBillablePeriodInFuture': opts['isBillablePeriodInFuture'],
        'expenseClass': opts['expenseClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement operation.
     * @callback module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses for a travel reimbursement
     * @param {String} travelReimbursementGuid Optional: ID of the travel reimbursement
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense
     * @param {module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement(travelReimbursementGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'travelReimbursementGuid' is set
      if (travelReimbursementGuid === undefined || travelReimbursementGuid === null) {
        throw new Error("Missing the required parameter 'travelReimbursementGuid' when calling projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement");
      }

      let pathParams = {
        'travelReimbursementGuid': travelReimbursementGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'expenseClass': opts['expenseClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/travelreimbursements/{travelReimbursementGuid}/projecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetProjectTravelExpensesForUser operation.
     * @callback module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses for a user
     * @param {String} userGuid ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Optional: starting date from which to get the travel expenses. Default all.
     * @param {Date} [endDate] Optional: starting date to which to get the travel expenses. Default all.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense
     * @param {Boolean} [isReimbursed] Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null.
     * @param {Boolean} [isTravelReimbursementRequired] Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all.
     * @param {String} [travelReimbursementGuid] Optional: ID of the travel reimbursement
     * @param {String} [costCurrencyGuid] Optional: ID of the cost currency.
     * @param {module:api/TravelsReadApi~projectTravelExpensesGetProjectTravelExpensesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetProjectTravelExpensesForUser(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling projectTravelExpensesGetProjectTravelExpensesForUser");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'expenseClass': opts['expenseClass'],
        'isReimbursed': opts['isReimbursed'],
        'isTravelReimbursementRequired': opts['isTravelReimbursementRequired'],
        'travelReimbursementGuid': opts['travelReimbursementGuid'],
        'costCurrencyGuid': opts['costCurrencyGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/projecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementsGetTravelReimbursement operation.
     * @callback module:api/TravelsReadApi~travelReimbursementsGetTravelReimbursementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelReimbursementOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get travel reimbursement by ID
     * @param {String} guid ID of travel reimbursement
     * @param {module:api/TravelsReadApi~travelReimbursementsGetTravelReimbursementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelReimbursementOutputModel}
     */
    travelReimbursementsGetTravelReimbursement(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelReimbursementsGetTravelReimbursement");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TravelReimbursementOutputModel;
      return this.apiClient.callApi(
        '/v1/travelreimbursements/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementsGetTravelReimbursements operation.
     * @callback module:api/TravelsReadApi~travelReimbursementsGetTravelReimbursementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelReimbursementOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get travel reimbursements.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Date} [changedSince] Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal).
     * @param {Array.<String>} [travelReimbursementStatusGuids] Optional: List of travel reimbursement status ids.
     * @param {module:api/TravelsReadApi~travelReimbursementsGetTravelReimbursementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelReimbursementOutputModel>}
     */
    travelReimbursementsGetTravelReimbursements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince'],
        'travelReimbursementStatusGuids': this.apiClient.buildCollectionParam(opts['travelReimbursementStatusGuids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelReimbursementOutputModel];
      return this.apiClient.callApi(
        '/v1/travelreimbursements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
