/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityCategory from '../model/ActivityCategory';
import ActivityTypeModel from '../model/ActivityTypeModel';
import BankAccountOutputModel from '../model/BankAccountOutputModel';
import BusinessUnitModel from '../model/BusinessUnitModel';
import CommunicationTypeModel from '../model/CommunicationTypeModel';
import ContactRoleModel from '../model/ContactRoleModel';
import CostAccountModel from '../model/CostAccountModel';
import CostCenterModel from '../model/CostCenterModel';
import CountryModel from '../model/CountryModel';
import CountryRegionModel from '../model/CountryRegionModel';
import CurrencyOutputModel from '../model/CurrencyOutputModel';
import CustomPropertyModel from '../model/CustomPropertyModel';
import CustomerCustomPropertySelectionItemOutputModel from '../model/CustomerCustomPropertySelectionItemOutputModel';
import ExceptionModel from '../model/ExceptionModel';
import ExpensesClass from '../model/ExpensesClass';
import FormattingCultureModel from '../model/FormattingCultureModel';
import HolidayModel from '../model/HolidayModel';
import IndustryModel from '../model/IndustryModel';
import InvoiceStatusModel from '../model/InvoiceStatusModel';
import InvoiceTemplateModel from '../model/InvoiceTemplateModel';
import KeyValuePairOfStringAndSortDirection from '../model/KeyValuePairOfStringAndSortDirection';
import KeywordCategory from '../model/KeywordCategory';
import KeywordModel from '../model/KeywordModel';
import KpiFormulaCategory from '../model/KpiFormulaCategory';
import KpiFormulaModelBase from '../model/KpiFormulaModelBase';
import LanguageModel from '../model/LanguageModel';
import LeadSourceModel from '../model/LeadSourceModel';
import MarketSegmentModel from '../model/MarketSegmentModel';
import OvertimeModel from '../model/OvertimeModel';
import OvertimePriceModel from '../model/OvertimePriceModel';
import PermissionProfileModel from '../model/PermissionProfileModel';
import PhaseStatusTypeModel from '../model/PhaseStatusTypeModel';
import PriceListModel from '../model/PriceListModel';
import PriceListOutputModel from '../model/PriceListOutputModel';
import PricelistVersionOutputModel from '../model/PricelistVersionOutputModel';
import ProductCategoryModel from '../model/ProductCategoryModel';
import ProductCountrySettingsModel from '../model/ProductCountrySettingsModel';
import ProductOutputModel from '../model/ProductOutputModel';
import ProductPriceOutputModel from '../model/ProductPriceOutputModel';
import ProductType from '../model/ProductType';
import ProjectBillingCustomerModel2 from '../model/ProjectBillingCustomerModel2';
import ProjectCustomPropertySelectionItemOutputModel from '../model/ProjectCustomPropertySelectionItemOutputModel';
import ProjectMemberCostExceptionOutputModel from '../model/ProjectMemberCostExceptionOutputModel';
import ProjectStatusTypeModel from '../model/ProjectStatusTypeModel';
import ProjectTaskStatusModel from '../model/ProjectTaskStatusModel';
import ProposalStatusOutputModel from '../model/ProposalStatusOutputModel';
import RoleOutputModel from '../model/RoleOutputModel';
import SalesAccountModel from '../model/SalesAccountModel';
import SalesStatusType from '../model/SalesStatusType';
import SalesStatusTypeOutputModel from '../model/SalesStatusTypeOutputModel';
import TimeEntryTypeModel from '../model/TimeEntryTypeModel';
import TimezoneModel from '../model/TimezoneModel';
import TravelExpenseTypeCountrySettingsModel from '../model/TravelExpenseTypeCountrySettingsModel';
import TravelExpenseTypeOutputModel from '../model/TravelExpenseTypeOutputModel';
import TravelPriceOutputModel from '../model/TravelPriceOutputModel';
import TravelReimbursementStatusModel from '../model/TravelReimbursementStatusModel';
import UsageModel2 from '../model/UsageModel2';
import UserCustomPropertyOutputModel from '../model/UserCustomPropertyOutputModel';
import UserCustomPropertySelectionItemOutputModel from '../model/UserCustomPropertySelectionItemOutputModel';
import VatRateOutputModel from '../model/VatRateOutputModel';
import WorkContractOutputModel from '../model/WorkContractOutputModel';
import WorkHourPriceOutputModel from '../model/WorkHourPriceOutputModel';
import WorkTypeOutputModel from '../model/WorkTypeOutputModel';

/**
* SettingsRead service.
* @module api/SettingsReadApi
* @version 1.0
*/
export default class SettingsReadApi {

    /**
    * Constructs a new SettingsReadApi. 
    * @alias module:api/SettingsReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activityTypesGetActivityType operation.
     * @callback module:api/SettingsReadApi~activityTypesGetActivityTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Activity Type by ID
     * @param {String} guid GUID used to get the Activity Type.
     * @param {module:api/SettingsReadApi~activityTypesGetActivityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityTypeModel}
     */
    activityTypesGetActivityType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activityTypesGetActivityType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityTypeModel;
      return this.apiClient.callApi(
        '/v1/activitytypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityTypesGetActivityTypes operation.
     * @callback module:api/SettingsReadApi~activityTypesGetActivityTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Activity Types
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get activity types that have been added or changed after this date time (greater or equal).
     * @param {Array.<module:model/ActivityCategory>} [category] Optional: Category or multiple categories of activity types to search for. Default all.
     * @param {module:api/SettingsReadApi~activityTypesGetActivityTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityTypeModel>}
     */
    activityTypesGetActivityTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince'],
        'category': this.apiClient.buildCollectionParam(opts['category'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityTypeModel];
      return this.apiClient.callApi(
        '/v1/activitytypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankAccountsGetBankAccount operation.
     * @callback module:api/SettingsReadApi~bankAccountsGetBankAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bank account by ID.
     * @param {String} guid GUID used to get the bank account.
     * @param {module:api/SettingsReadApi~bankAccountsGetBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountOutputModel}
     */
    bankAccountsGetBankAccount(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling bankAccountsGetBankAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankAccountOutputModel;
      return this.apiClient.callApi(
        '/v1/bankaccounts/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankAccountsGetBankAccounts operation.
     * @callback module:api/SettingsReadApi~bankAccountsGetBankAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BankAccountOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bank accounts for current organization.
     * @param {Object} opts Optional parameters
     * @param {String} [companyGuid] Optional: ID of the company.
     * @param {String} [businessUnitGuid] Optional: ID of the business unit.
     * @param {Boolean} [active] If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from bank account name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=BankName&sortings[0].value=Desc &sortings[1].key=BusinessUnitName&sortings[1].value=Asc\".
     * @param {module:api/SettingsReadApi~bankAccountsGetBankAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BankAccountOutputModel>}
     */
    bankAccountsGetBankAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'companyGuid': opts['companyGuid'],
        'businessUnitGuid': opts['businessUnitGuid'],
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BankAccountOutputModel];
      return this.apiClient.callApi(
        '/v1/bankaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the businessUnitsGetBusinessUnit operation.
     * @callback module:api/SettingsReadApi~businessUnitsGetBusinessUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessUnitModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get businessUnit by ID.
     * @param {String} guid GUID used to get the businessUnit.
     * @param {module:api/SettingsReadApi~businessUnitsGetBusinessUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessUnitModel}
     */
    businessUnitsGetBusinessUnit(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling businessUnitsGetBusinessUnit");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BusinessUnitModel;
      return this.apiClient.callApi(
        '/v1/businessunits/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the businessUnitsGetBusinessUnits operation.
     * @callback module:api/SettingsReadApi~businessUnitsGetBusinessUnitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessUnitModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the BusinessUnits
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits
     * @param {String} [companyGuid] Optional: ID of the company to which the business units belong.
     * @param {String} [companyCountryGuid] Optional: ID of the country in which the company of business units is located.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from business unit name.
     * @param {Date} [changedSince] Optional: Get business units that have been added or changed after this date time (greater or equal).
     * @param {String} [code = '')] Optional: Code of the business unit.
     * @param {String} [name = '')] Optional: Name of the business unit.
     * @param {module:api/SettingsReadApi~businessUnitsGetBusinessUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessUnitModel>}
     */
    businessUnitsGetBusinessUnits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'companyGuid': opts['companyGuid'],
        'companyCountryGuid': opts['companyCountryGuid'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'changedSince': opts['changedSince'],
        'code': opts['code'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BusinessUnitModel];
      return this.apiClient.callApi(
        '/v1/businessunits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationTypesGetCommunicationType operation.
     * @callback module:api/SettingsReadApi~communicationTypesGetCommunicationTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunicationTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get communication type by ID.
     * @param {String} guid ID used to get the communication type.
     * @param {module:api/SettingsReadApi~communicationTypesGetCommunicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunicationTypeModel}
     */
    communicationTypesGetCommunicationType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling communicationTypesGetCommunicationType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommunicationTypeModel;
      return this.apiClient.callApi(
        '/v1/communicationtypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationTypesGetCommunicationTypes operation.
     * @callback module:api/SettingsReadApi~communicationTypesGetCommunicationTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommunicationTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all communication types.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from communication type name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\".
     * @param {module:api/SettingsReadApi~communicationTypesGetCommunicationTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommunicationTypeModel>}
     */
    communicationTypesGetCommunicationTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CommunicationTypeModel];
      return this.apiClient.callApi(
        '/v1/communicationtypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactRolesGetContactRole operation.
     * @callback module:api/SettingsReadApi~contactRolesGetContactRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRoleModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact role by ID.
     * @param {String} guid Id used to get the contact role.
     * @param {module:api/SettingsReadApi~contactRolesGetContactRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRoleModel}
     */
    contactRolesGetContactRole(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactRolesGetContactRole");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactRoleModel;
      return this.apiClient.callApi(
        '/v1/contactroles/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactRolesGetContactRoles operation.
     * @callback module:api/SettingsReadApi~contactRolesGetContactRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactRoleModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact roles.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from contact role name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {module:api/SettingsReadApi~contactRolesGetContactRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactRoleModel>}
     */
    contactRolesGetContactRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactRoleModel];
      return this.apiClient.callApi(
        '/v1/contactroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costAccountsGetCostAccount operation.
     * @callback module:api/SettingsReadApi~costAccountsGetCostAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostAccountModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cost account by Guid.
     * @param {String} guid Cost account's guid.
     * @param {module:api/SettingsReadApi~costAccountsGetCostAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostAccountModel}
     */
    costAccountsGetCostAccount(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling costAccountsGetCostAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CostAccountModel;
      return this.apiClient.callApi(
        '/v1/costaccounts/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costAccountsGetCostAccounts operation.
     * @callback module:api/SettingsReadApi~costAccountsGetCostAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CostAccountModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cost accounts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from cost account name or identifier.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc\".
     * @param {module:api/SettingsReadApi~costAccountsGetCostAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CostAccountModel>}
     */
    costAccountsGetCostAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CostAccountModel];
      return this.apiClient.callApi(
        '/v1/costaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costCentersGetCostCenter operation.
     * @callback module:api/SettingsReadApi~costCentersGetCostCenterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostCenterModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cost center by ID.
     * @param {String} guid Id used to get the cost center.
     * @param {module:api/SettingsReadApi~costCentersGetCostCenterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostCenterModel}
     */
    costCentersGetCostCenter(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling costCentersGetCostCenter");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CostCenterModel;
      return this.apiClient.callApi(
        '/v1/costcenters/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costCentersGetCostCenters operation.
     * @callback module:api/SettingsReadApi~costCentersGetCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CostCenterModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cost centers.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from cost center name or identifier.
     * @param {Date} [changedSince] Optional: Get cost centers that have been added or changed after this date time (greater or equal).
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\".
     * @param {String} [identifier = '')] Optional: Identifier of the cost center.
     * @param {String} [name = '')] Optional: Name of the cost center.
     * @param {module:api/SettingsReadApi~costCentersGetCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CostCenterModel>}
     */
    costCentersGetCostCenters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'changedSince': opts['changedSince'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi'),
        'identifier': opts['identifier'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CostCenterModel];
      return this.apiClient.callApi(
        '/v1/costcenters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountries operation.
     * @callback module:api/SettingsReadApi~countriesGetCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the Countries.
     * @param {module:api/SettingsReadApi~countriesGetCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountryModel>}
     */
    countriesGetCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CountryModel];
      return this.apiClient.callApi(
        '/v1/localization/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountry operation.
     * @callback module:api/SettingsReadApi~countriesGetCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get country by ID.
     * @param {String} guid GUID used to get the country.
     * @param {module:api/SettingsReadApi~countriesGetCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountryModel}
     */
    countriesGetCountry(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling countriesGetCountry");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountryModel;
      return this.apiClient.callApi(
        '/v1/localization/countries/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountryByCode2 operation.
     * @callback module:api/SettingsReadApi~countriesGetCountryByCode2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a country by ISO Alpha-2 code
     * @param {String} code2 Optional: ISO Alpha-2 code used to get a country.
     * @param {module:api/SettingsReadApi~countriesGetCountryByCode2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountryModel>}
     */
    countriesGetCountryByCode2(code2, callback) {
      let postBody = null;
      // verify the required parameter 'code2' is set
      if (code2 === undefined || code2 === null) {
        throw new Error("Missing the required parameter 'code2' when calling countriesGetCountryByCode2");
      }

      let pathParams = {
        'code2': code2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CountryModel];
      return this.apiClient.callApi(
        '/v1/localization/countries/{code2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountryByCode3 operation.
     * @callback module:api/SettingsReadApi~countriesGetCountryByCode3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a country by ISO Alpha-3 code
     * @param {String} code3 Optional: ISO Alpha-3 code used to get a country.
     * @param {module:api/SettingsReadApi~countriesGetCountryByCode3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountryModel>}
     */
    countriesGetCountryByCode3(code3, callback) {
      let postBody = null;
      // verify the required parameter 'code3' is set
      if (code3 === undefined || code3 === null) {
        throw new Error("Missing the required parameter 'code3' when calling countriesGetCountryByCode3");
      }

      let pathParams = {
        'code3': code3
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CountryModel];
      return this.apiClient.callApi(
        '/v1/localization/countries/{code3}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountryByName operation.
     * @callback module:api/SettingsReadApi~countriesGetCountryByNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a country by name
     * @param {String} countryName Optional: English country name.
     * @param {module:api/SettingsReadApi~countriesGetCountryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountryModel>}
     */
    countriesGetCountryByName(countryName, callback) {
      let postBody = null;
      // verify the required parameter 'countryName' is set
      if (countryName === undefined || countryName === null) {
        throw new Error("Missing the required parameter 'countryName' when calling countriesGetCountryByName");
      }

      let pathParams = {
        'countryName': countryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CountryModel];
      return this.apiClient.callApi(
        '/v1/localization/countries/{countryName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountryRegion operation.
     * @callback module:api/SettingsReadApi~countriesGetCountryRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountryRegionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get country region by ID.
     * @param {String} guid GUID used to get the country region.
     * @param {module:api/SettingsReadApi~countriesGetCountryRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountryRegionModel}
     */
    countriesGetCountryRegion(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling countriesGetCountryRegion");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountryRegionModel;
      return this.apiClient.callApi(
        '/v1/localization/countryregions/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetCountryRegions operation.
     * @callback module:api/SettingsReadApi~countriesGetCountryRegionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountryRegionModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the Country regions for a country.
     * @param {String} countryGuid GUID of the country.
     * @param {module:api/SettingsReadApi~countriesGetCountryRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountryRegionModel>}
     */
    countriesGetCountryRegions(countryGuid, callback) {
      let postBody = null;
      // verify the required parameter 'countryGuid' is set
      if (countryGuid === undefined || countryGuid === null) {
        throw new Error("Missing the required parameter 'countryGuid' when calling countriesGetCountryRegions");
      }

      let pathParams = {
        'countryGuid': countryGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CountryRegionModel];
      return this.apiClient.callApi(
        '/v1/localization/countries/{countryGuid}/countryregions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesGetCurrencies operation.
     * @callback module:api/SettingsReadApi~currenciesGetCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurrencyOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the Currencies
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text based search applied to the result. Matches currency name and code.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\". Using additional sorting fields \"CreatedDate\" and / or \"LastUpdatedDate\" as keys sort currencies without a timestamp provided when sorting with other date fields.
     * @param {module:api/SettingsReadApi~currenciesGetCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurrencyOutputModel>}
     */
    currenciesGetCurrencies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CurrencyOutputModel];
      return this.apiClient.callApi(
        '/v1/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesGetCurrency operation.
     * @callback module:api/SettingsReadApi~currenciesGetCurrencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get currency by ID.
     * @param {String} guid GUID used to get the currency.
     * @param {module:api/SettingsReadApi~currenciesGetCurrencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyOutputModel}
     */
    currenciesGetCurrency(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling currenciesGetCurrency");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrencyOutputModel;
      return this.apiClient.callApi(
        '/v1/currencies/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertiesGetCustomerCustomProperties operation.
     * @callback module:api/SettingsReadApi~customerCustomPropertiesGetCustomerCustomPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPropertyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the customer custom properties.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [active] Optional: Get only active or inactive customer properties.
     * @param {String} [textToSearch = '')] Optional: Text to search from custom property name.
     * @param {Boolean} [isInUse] Optional: Is the customer property used in any custom property usage.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/SettingsReadApi~customerCustomPropertiesGetCustomerCustomPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPropertyModel>}
     */
    customerCustomPropertiesGetCustomerCustomProperties(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'active': opts['active'],
        'textToSearch': opts['textToSearch'],
        'isInUse': opts['isInUse'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomPropertyModel];
      return this.apiClient.callApi(
        '/v1/customers/customproperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertiesGetCustomerCustomProperty operation.
     * @callback module:api/SettingsReadApi~customerCustomPropertiesGetCustomerCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomPropertyModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer custom property by ID.
     * @param {String} guid Id used to get the customer custom property.
     * @param {module:api/SettingsReadApi~customerCustomPropertiesGetCustomerCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomPropertyModel}
     */
    customerCustomPropertiesGetCustomerCustomProperty(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomPropertiesGetCustomerCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomPropertyModel;
      return this.apiClient.callApi(
        '/v1/customers/customproperties/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem operation.
     * @callback module:api/SettingsReadApi~customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerCustomPropertySelectionItemOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer custom property selection item by ID.
     * @param {String} guid Id used to get the customer custom property selection item.
     * @param {module:api/SettingsReadApi~customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerCustomPropertySelectionItemOutputModel}
     */
    customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerCustomPropertySelectionItemOutputModel;
      return this.apiClient.callApi(
        '/v1/customers/customproperties/customercustompropertyselectionitems/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems operation.
     * @callback module:api/SettingsReadApi~customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCustomPropertySelectionItemOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the customer custom properties.
     * @param {String} customPropertyGuid Custom property id used to get the customer custom property selection items.
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isActive] Optional: Get only active or inactive selection items.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Date} [changedSince] Optional: Get custom property selection items that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCustomPropertySelectionItemOutputModel>}
     */
    customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems(customPropertyGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customPropertyGuid' is set
      if (customPropertyGuid === undefined || customPropertyGuid === null) {
        throw new Error("Missing the required parameter 'customPropertyGuid' when calling customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems");
      }

      let pathParams = {
        'customPropertyGuid': customPropertyGuid
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'pageToken': opts['pageToken'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerCustomPropertySelectionItemOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/customproperties/{customPropertyGuid}/customercustompropertyselectionitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formattingCulturesGetFormattingCulture operation.
     * @callback module:api/SettingsReadApi~formattingCulturesGetFormattingCultureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormattingCultureModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get formatting culture by ID.
     * @param {String} guid GUID used to get the formatting culture.
     * @param {module:api/SettingsReadApi~formattingCulturesGetFormattingCultureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormattingCultureModel}
     */
    formattingCulturesGetFormattingCulture(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling formattingCulturesGetFormattingCulture");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormattingCultureModel;
      return this.apiClient.callApi(
        '/v1/localization/formattingcultures/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formattingCulturesGetFormattings operation.
     * @callback module:api/SettingsReadApi~formattingCulturesGetFormattingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FormattingCultureModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the Formatting Cultures
     * @param {module:api/SettingsReadApi~formattingCulturesGetFormattingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FormattingCultureModel>}
     */
    formattingCulturesGetFormattings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FormattingCultureModel];
      return this.apiClient.callApi(
        '/v1/localization/formattingcultures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaysGetHolidays operation.
     * @callback module:api/SettingsReadApi~holidaysGetHolidaysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HolidayModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holidays.
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Optional: Holidays for this year only. Default: all years.
     * @param {String} [countryGuid] Optional: Holidays for this country only. Default local.
     * @param {module:api/SettingsReadApi~holidaysGetHolidaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HolidayModel>}
     */
    holidaysGetHolidays(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'countryGuid': opts['countryGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HolidayModel];
      return this.apiClient.callApi(
        '/v1/holidays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaysGetHolidaysByTimePeriod operation.
     * @callback module:api/SettingsReadApi~holidaysGetHolidaysByTimePeriodCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HolidayModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holidays with start and end date.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Start date for holidays.
     * @param {Date} [endDate] End date for holidays.
     * @param {String} [countryGuid] Optional: Holidays for this country only. Default local.
     * @param {module:api/SettingsReadApi~holidaysGetHolidaysByTimePeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HolidayModel>}
     */
    holidaysGetHolidaysByTimePeriod(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'countryGuid': opts['countryGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HolidayModel];
      return this.apiClient.callApi(
        '/v1/holidaysbytimeperiod', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the industriesGetIndustries operation.
     * @callback module:api/SettingsReadApi~industriesGetIndustriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IndustryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the industries.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from industry name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {module:api/SettingsReadApi~industriesGetIndustriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IndustryModel>}
     */
    industriesGetIndustries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IndustryModel];
      return this.apiClient.callApi(
        '/v1/industries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the industriesGetIndustry operation.
     * @callback module:api/SettingsReadApi~industriesGetIndustryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndustryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get industry by ID.
     * @param {String} guid GUID used to get the industry.
     * @param {module:api/SettingsReadApi~industriesGetIndustryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndustryModel}
     */
    industriesGetIndustry(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling industriesGetIndustry");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IndustryModel;
      return this.apiClient.callApi(
        '/v1/industries/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceStatusesGetInvoiceStatus operation.
     * @callback module:api/SettingsReadApi~invoiceStatusesGetInvoiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceStatusModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Invoice status by ID.
     * @param {String} guid GUID used to get the Invoice status.
     * @param {module:api/SettingsReadApi~invoiceStatusesGetInvoiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceStatusModel}
     */
    invoiceStatusesGetInvoiceStatus(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceStatusesGetInvoiceStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceStatusModel;
      return this.apiClient.callApi(
        '/v1/invoicestatuses/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceStatusesGetInvoiceStatuses operation.
     * @callback module:api/SettingsReadApi~invoiceStatusesGetInvoiceStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice statuses.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from invoice status name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc\".
     * @param {module:api/SettingsReadApi~invoiceStatusesGetInvoiceStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceStatusModel>}
     */
    invoiceStatusesGetInvoiceStatuses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceStatusModel];
      return this.apiClient.callApi(
        '/v1/invoicestatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceTemplatesGetInvoiceTemplate operation.
     * @callback module:api/SettingsReadApi~invoiceTemplatesGetInvoiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceTemplateModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice template by ID.
     * @param {String} guid ID of the invoice template.
     * @param {module:api/SettingsReadApi~invoiceTemplatesGetInvoiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceTemplateModel}
     */
    invoiceTemplatesGetInvoiceTemplate(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceTemplatesGetInvoiceTemplate");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceTemplateModel;
      return this.apiClient.callApi(
        '/v1/invoicetemplates/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceTemplatesGetInvoiceTemplates operation.
     * @callback module:api/SettingsReadApi~invoiceTemplatesGetInvoiceTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceTemplateModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice templates.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] 
     * @param {Number} [firstRow] 
     * @param {Number} [rowCount] 
     * @param {String} [textToSearch = '')] 
     * @param {Boolean} [calculateRowCount = false)] 
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] 
     * @param {module:api/SettingsReadApi~invoiceTemplatesGetInvoiceTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceTemplateModel>}
     */
    invoiceTemplatesGetInvoiceTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceTemplateModel];
      return this.apiClient.callApi(
        '/v1/invoicetemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsGetKeyword operation.
     * @callback module:api/SettingsReadApi~keywordsGetKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeywordModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get keyword by ID.
     * @param {String} guid GUID used to get the keyword.
     * @param {module:api/SettingsReadApi~keywordsGetKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeywordModel}
     */
    keywordsGetKeyword(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsGetKeyword");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeywordModel;
      return this.apiClient.callApi(
        '/v1/keywords/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsGetKeywords operation.
     * @callback module:api/SettingsReadApi~keywordsGetKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KeywordModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the keywords.
     * @param {Object} opts Optional parameters
     * @param {module:model/KeywordCategory} [category] Optional: category of the keyword.
     * @param {Boolean} [active] If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from keyword.
     * @param {Date} [changedSince] Optional: Get keywords that have been added or changed after this date time (greater or equal).
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\".
     * @param {String} [keyword = '')] Optional: Keyword name.
     * @param {module:api/SettingsReadApi~keywordsGetKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KeywordModel>}
     */
    keywordsGetKeywords(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'changedSince': opts['changedSince'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi'),
        'keyword': opts['keyword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeywordModel];
      return this.apiClient.callApi(
        '/v1/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kpiFormulasGetKpiFormulas operation.
     * @callback module:api/SettingsReadApi~kpiFormulasGetKpiFormulasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KpiFormulaModelBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get saved KPI formulas.
     * @param {Object} opts Optional parameters
     * @param {module:model/KpiFormulaCategory} [category] Optional: Category of KPI formula (Project, Invoice, User).
     * @param {Boolean} [isActive] Optional: return with given active status. Default is to return all.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc\".
     * @param {Boolean} [includeDefinition = false)] Optional: Include definition to response. Default false.
     * @param {Date} [changedSince] Optional: Get KPI formulas that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~kpiFormulasGetKpiFormulasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KpiFormulaModelBase>}
     */
    kpiFormulasGetKpiFormulas(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'isActive': opts['isActive'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi'),
        'includeDefinition': opts['includeDefinition'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KpiFormulaModelBase];
      return this.apiClient.callApi(
        '/v1/kpiformulas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesGetLanguage operation.
     * @callback module:api/SettingsReadApi~languagesGetLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LanguageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get language by ID
     * @param {String} guid GUID used to get the language.
     * @param {module:api/SettingsReadApi~languagesGetLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LanguageModel}
     */
    languagesGetLanguage(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling languagesGetLanguage");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LanguageModel;
      return this.apiClient.callApi(
        '/v1/localization/languages/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesGetLanguages operation.
     * @callback module:api/SettingsReadApi~languagesGetLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LanguageModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the languages
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isInvoiceLanguage] Optional: which languages to fetch. only invoice languages or non invoice languages?, default all.
     * @param {module:api/SettingsReadApi~languagesGetLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LanguageModel>}
     */
    languagesGetLanguages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isInvoiceLanguage': opts['isInvoiceLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LanguageModel];
      return this.apiClient.callApi(
        '/v1/localization/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leadSourcesGetLeadSource operation.
     * @callback module:api/SettingsReadApi~leadSourcesGetLeadSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeadSourceModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lead source by ID.
     * @param {String} guid GUID used to get the lead source.
     * @param {module:api/SettingsReadApi~leadSourcesGetLeadSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeadSourceModel}
     */
    leadSourcesGetLeadSource(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling leadSourcesGetLeadSource");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadSourceModel;
      return this.apiClient.callApi(
        '/v1/leadsources/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leadSourcesGetLeadSources operation.
     * @callback module:api/SettingsReadApi~leadSourcesGetLeadSourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LeadSourceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the lead sources.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from lead source name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {module:api/SettingsReadApi~leadSourcesGetLeadSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LeadSourceModel>}
     */
    leadSourcesGetLeadSources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LeadSourceModel];
      return this.apiClient.callApi(
        '/v1/leadsources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketSegmentsGetMarketSegment operation.
     * @callback module:api/SettingsReadApi~marketSegmentsGetMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketSegmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Market Segment by ID.
     * @param {String} guid GUID used to get the Market Segment.
     * @param {module:api/SettingsReadApi~marketSegmentsGetMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketSegmentModel}
     */
    marketSegmentsGetMarketSegment(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling marketSegmentsGetMarketSegment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketSegmentModel;
      return this.apiClient.callApi(
        '/v1/marketsegments/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketSegmentsGetMarketSegments operation.
     * @callback module:api/SettingsReadApi~marketSegmentsGetMarketSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MarketSegmentModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Market Segments.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from market segment name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Boolean} [includeChildSegments = true)] Optional: Include also child market segments. If false returns only parent segments. Default true.
     * @param {module:api/SettingsReadApi~marketSegmentsGetMarketSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MarketSegmentModel>}
     */
    marketSegmentsGetMarketSegments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'includeChildSegments': opts['includeChildSegments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MarketSegmentModel];
      return this.apiClient.callApi(
        '/v1/marketsegments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimePricesGetOvertimePrice operation.
     * @callback module:api/SettingsReadApi~overtimePricesGetOvertimePriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OvertimePriceModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get overtime price by ID.
     * @param {String} guid Id used to get the overtime price.
     * @param {module:api/SettingsReadApi~overtimePricesGetOvertimePriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OvertimePriceModel}
     */
    overtimePricesGetOvertimePrice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling overtimePricesGetOvertimePrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OvertimePriceModel;
      return this.apiClient.callApi(
        '/v1/overtimeprices/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimePricesGetOvertimePrices operation.
     * @callback module:api/SettingsReadApi~overtimePricesGetOvertimePricesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OvertimePriceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the overtime prices for a price list version.
     * @param {String} pricelistVersionGuid 
     * @param {module:api/SettingsReadApi~overtimePricesGetOvertimePricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OvertimePriceModel>}
     */
    overtimePricesGetOvertimePrices(pricelistVersionGuid, callback) {
      let postBody = null;
      // verify the required parameter 'pricelistVersionGuid' is set
      if (pricelistVersionGuid === undefined || pricelistVersionGuid === null) {
        throw new Error("Missing the required parameter 'pricelistVersionGuid' when calling overtimePricesGetOvertimePrices");
      }

      let pathParams = {
        'pricelistVersionGuid': pricelistVersionGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OvertimePriceModel];
      return this.apiClient.callApi(
        '/v1/pricelistversions/{pricelistVersionGuid}/overtimeprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimesGetOvertime operation.
     * @callback module:api/SettingsReadApi~overtimesGetOvertimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OvertimeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get overtime definition by ID.
     * @param {String} guid Id used to get the overtime definition.
     * @param {module:api/SettingsReadApi~overtimesGetOvertimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OvertimeModel}
     */
    overtimesGetOvertime(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling overtimesGetOvertime");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OvertimeModel;
      return this.apiClient.callApi(
        '/v1/overtimes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimesGetOvertimes operation.
     * @callback module:api/SettingsReadApi~overtimesGetOvertimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OvertimeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get overtime definitions.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [textToSearch = '')] Optional: Text to search from overtime name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"\".
     * @param {module:api/SettingsReadApi~overtimesGetOvertimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OvertimeModel>}
     */
    overtimesGetOvertimes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OvertimeModel];
      return this.apiClient.callApi(
        '/v1/overtimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionProfilesGetPermissionProfile operation.
     * @callback module:api/SettingsReadApi~permissionProfilesGetPermissionProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionProfileModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Permission Profile by ID.
     * @param {String} guid GUID used to get the Permission Profile.
     * @param {module:api/SettingsReadApi~permissionProfilesGetPermissionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionProfileModel}
     */
    permissionProfilesGetPermissionProfile(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling permissionProfilesGetPermissionProfile");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionProfileModel;
      return this.apiClient.callApi(
        '/v1/permissionprofiles/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionProfilesGetPermissionProfiles operation.
     * @callback module:api/SettingsReadApi~permissionProfilesGetPermissionProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionProfileModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Permission Profiles.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from permission profile name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc\".
     * @param {module:api/SettingsReadApi~permissionProfilesGetPermissionProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionProfileModel>}
     */
    permissionProfilesGetPermissionProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PermissionProfileModel];
      return this.apiClient.callApi(
        '/v1/permissionprofiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseStatusTypesGetPhaseStatusType operation.
     * @callback module:api/SettingsReadApi~phaseStatusTypesGetPhaseStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhaseStatusTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get phase status type by GUID
     * @param {String} guid Id used to get the phase status type.
     * @param {module:api/SettingsReadApi~phaseStatusTypesGetPhaseStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhaseStatusTypeModel}
     */
    phaseStatusTypesGetPhaseStatusType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phaseStatusTypesGetPhaseStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhaseStatusTypeModel;
      return this.apiClient.callApi(
        '/v1/phasestatustypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseStatusTypesGetPhaseStatusTypes operation.
     * @callback module:api/SettingsReadApi~phaseStatusTypesGetPhaseStatusTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseStatusTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get phase status types
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [textToSearch = '')] 
     * @param {Boolean} [calculateRowCount = false)] 
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] 
     * @param {module:api/SettingsReadApi~phaseStatusTypesGetPhaseStatusTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseStatusTypeModel>}
     */
    phaseStatusTypesGetPhaseStatusTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhaseStatusTypeModel];
      return this.apiClient.callApi(
        '/v1/phasestatustypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceListVersionsGetPricelistVersion operation.
     * @callback module:api/SettingsReadApi~priceListVersionsGetPricelistVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricelistVersionOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a price list version by guid.
     * @param {String} guid 
     * @param {module:api/SettingsReadApi~priceListVersionsGetPricelistVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricelistVersionOutputModel}
     */
    priceListVersionsGetPricelistVersion(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling priceListVersionsGetPricelistVersion");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricelistVersionOutputModel;
      return this.apiClient.callApi(
        '/v1/pricelistversions/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceListVersionsGetPricelistVersionsByPricelist operation.
     * @callback module:api/SettingsReadApi~priceListVersionsGetPricelistVersionsByPricelistCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PricelistVersionOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all price list versions of a price list.
     * @param {String} pricelistGuid 
     * @param {module:api/SettingsReadApi~priceListVersionsGetPricelistVersionsByPricelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PricelistVersionOutputModel>}
     */
    priceListVersionsGetPricelistVersionsByPricelist(pricelistGuid, callback) {
      let postBody = null;
      // verify the required parameter 'pricelistGuid' is set
      if (pricelistGuid === undefined || pricelistGuid === null) {
        throw new Error("Missing the required parameter 'pricelistGuid' when calling priceListVersionsGetPricelistVersionsByPricelist");
      }

      let pathParams = {
        'pricelistGuid': pricelistGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PricelistVersionOutputModel];
      return this.apiClient.callApi(
        '/v1/pricelists/{pricelistGuid}/pricelistversions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceListsGetPriceList operation.
     * @callback module:api/SettingsReadApi~priceListsGetPriceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PriceListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get price list by GUID.
     * @param {String} guid ID used to get the price list.
     * @param {module:api/SettingsReadApi~priceListsGetPriceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PriceListModel}
     */
    priceListsGetPriceList(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling priceListsGetPriceList");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PriceListModel;
      return this.apiClient.callApi(
        '/v1/pricelists/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceListsGetPricelists operation.
     * @callback module:api/SettingsReadApi~priceListsGetPricelistsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PriceListOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all price lists.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from price list name.
     * @param {String} [currencyGuid] Optional: ID of the price list currency.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\".
     * @param {String} [name = '')] Optional: Name of the price list.
     * @param {module:api/SettingsReadApi~priceListsGetPricelistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PriceListOutputModel>}
     */
    priceListsGetPricelists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'currencyGuid': opts['currencyGuid'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi'),
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PriceListOutputModel];
      return this.apiClient.callApi(
        '/v1/pricelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCategoriesGetProductCategories operation.
     * @callback module:api/SettingsReadApi~productCategoriesGetProductCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductCategoryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product categories.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [textToSearch = '')] Optional: Text to search from product category name or code.
     * @param {Date} [changedSince] Optional: Get product categories that have been added or changed after this date time (greater or equal).
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: ?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc.
     * @param {module:api/SettingsReadApi~productCategoriesGetProductCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductCategoryModel>}
     */
    productCategoriesGetProductCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'changedSince': opts['changedSince'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductCategoryModel];
      return this.apiClient.callApi(
        '/v1/productcategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCategoriesGetProductCategory operation.
     * @callback module:api/SettingsReadApi~productCategoriesGetProductCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCategoryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product category by ID.
     * @param {String} guid Id used to get the product category.
     * @param {module:api/SettingsReadApi~productCategoriesGetProductCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCategoryModel}
     */
    productCategoriesGetProductCategory(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productCategoriesGetProductCategory");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCategoryModel;
      return this.apiClient.callApi(
        '/v1/productcategories/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCountrySettingsGetProductCountrySettings operation.
     * @callback module:api/SettingsReadApi~productCountrySettingsGetProductCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductCountrySettingsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the country settings for a product
     * @param {String} productGuid GUID of the product.
     * @param {module:api/SettingsReadApi~productCountrySettingsGetProductCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductCountrySettingsModel>}
     */
    productCountrySettingsGetProductCountrySettings(productGuid, callback) {
      let postBody = null;
      // verify the required parameter 'productGuid' is set
      if (productGuid === undefined || productGuid === null) {
        throw new Error("Missing the required parameter 'productGuid' when calling productCountrySettingsGetProductCountrySettings");
      }

      let pathParams = {
        'productGuid': productGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductCountrySettingsModel];
      return this.apiClient.callApi(
        '/v1/products/{productGuid}/productcountrysettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPricesGetProductPrice operation.
     * @callback module:api/SettingsReadApi~productPricesGetProductPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductPriceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product price by ID.
     * @param {String} guid Id used to get the product price.
     * @param {module:api/SettingsReadApi~productPricesGetProductPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductPriceOutputModel}
     */
    productPricesGetProductPrice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productPricesGetProductPrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductPriceOutputModel;
      return this.apiClient.callApi(
        '/v1/productprices/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPricesGetProductPrices operation.
     * @callback module:api/SettingsReadApi~productPricesGetProductPricesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductPriceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the product prices for a price list version.
     * @param {String} pricelistVersionGuid ID of the price list version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fromPricelistOnly = false)] If true return only prices from the price list, if false also returns prices from the products. Default is false.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from Product name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate the number of total rows. Default false = total row count is returned as zero.
     * @param {String} [productCode = '')] Optional: Absolute search for products with specified product code.
     * @param {Array.<String>} [productGuids] Optional: Search all product price(s) by products guid(s).
     * @param {Boolean} [isVolumePriced] Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products.
     * @param {Array.<String>} [productCategoryGuids] Optional: Search product prices according to product category / categories by product category guid(s).
     * @param {Array.<module:model/ProductType>} [productTypes] Optional: Search product prices according to product type / types.
     * @param {module:api/SettingsReadApi~productPricesGetProductPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductPriceOutputModel>}
     */
    productPricesGetProductPrices(pricelistVersionGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pricelistVersionGuid' is set
      if (pricelistVersionGuid === undefined || pricelistVersionGuid === null) {
        throw new Error("Missing the required parameter 'pricelistVersionGuid' when calling productPricesGetProductPrices");
      }

      let pathParams = {
        'pricelistVersionGuid': pricelistVersionGuid
      };
      let queryParams = {
        'fromPricelistOnly': opts['fromPricelistOnly'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'productCode': opts['productCode'],
        'productGuids': this.apiClient.buildCollectionParam(opts['productGuids'], 'multi'),
        'isVolumePriced': opts['isVolumePriced'],
        'productCategoryGuids': this.apiClient.buildCollectionParam(opts['productCategoryGuids'], 'multi'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductPriceOutputModel];
      return this.apiClient.callApi(
        '/v1/pricelistversions/{pricelistVersionGuid}/productprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGetProduct operation.
     * @callback module:api/SettingsReadApi~productsGetProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product by ID.
     * @param {String} guid GUID used to get the product.
     * @param {module:api/SettingsReadApi~productsGetProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOutputModel}
     */
    productsGetProduct(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productsGetProduct");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOutputModel;
      return this.apiClient.callApi(
        '/v1/products/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGetProducts operation.
     * @callback module:api/SettingsReadApi~productsGetProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the Products
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:model/ProductType} [type] Product type. if given, it filters the products by the given type.
     * @param {Boolean} [isActive] If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products
     * @param {String} [code] Optional: Code of the product.
     * @param {Date} [changedSince] Optional: Get products that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~productsGetProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductOutputModel>}
     */
    productsGetProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken'],
        'type': opts['type'],
        'isActive': opts['isActive'],
        'code': opts['code'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductOutputModel];
      return this.apiClient.callApi(
        '/v1/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectBillingCustomersGetProjectBillingCustomer operation.
     * @callback module:api/SettingsReadApi~projectBillingCustomersGetProjectBillingCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectBillingCustomerModel2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project billing customer.
     * @param {String} guid ID of the project billing customer.
     * @param {module:api/SettingsReadApi~projectBillingCustomersGetProjectBillingCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectBillingCustomerModel2}
     */
    projectBillingCustomersGetProjectBillingCustomer(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectBillingCustomersGetProjectBillingCustomer");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectBillingCustomerModel2;
      return this.apiClient.callApi(
        '/v1/projectbillingcustomers/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertiesGetProjectCustomProperties operation.
     * @callback module:api/SettingsReadApi~projectCustomPropertiesGetProjectCustomPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPropertyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project custom properties.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [active] Optional: Get only active or inactive project properties.
     * @param {String} [textToSearch = '')] Optional: Text to search from custom property name.
     * @param {Boolean} [isInUse] Optional: Is the customer property used in any custom property usage.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/SettingsReadApi~projectCustomPropertiesGetProjectCustomPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPropertyModel>}
     */
    projectCustomPropertiesGetProjectCustomProperties(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'active': opts['active'],
        'textToSearch': opts['textToSearch'],
        'isInUse': opts['isInUse'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomPropertyModel];
      return this.apiClient.callApi(
        '/v1/projects/customproperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertiesGetProjectCustomProperty operation.
     * @callback module:api/SettingsReadApi~projectCustomPropertiesGetProjectCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomPropertyModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project custom property by ID.
     * @param {String} guid Id used to get the project custom property.
     * @param {module:api/SettingsReadApi~projectCustomPropertiesGetProjectCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomPropertyModel}
     */
    projectCustomPropertiesGetProjectCustomProperty(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomPropertiesGetProjectCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomPropertyModel;
      return this.apiClient.callApi(
        '/v1/projects/customproperties/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem operation.
     * @callback module:api/SettingsReadApi~projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCustomPropertySelectionItemOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project custom property selection item by ID.
     * @param {String} guid Id used to get the project custom property selection item.
     * @param {module:api/SettingsReadApi~projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCustomPropertySelectionItemOutputModel}
     */
    projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCustomPropertySelectionItemOutputModel;
      return this.apiClient.callApi(
        '/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems operation.
     * @callback module:api/SettingsReadApi~projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCustomPropertySelectionItemOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project custom properties.
     * @param {String} customPropertyGuid Custom property id used to get the project custom property selection items.
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isActive] Optional: Get only active or inactive selection items.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Date} [changedSince] Optional: Get custom property selection items that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCustomPropertySelectionItemOutputModel>}
     */
    projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems(customPropertyGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customPropertyGuid' is set
      if (customPropertyGuid === undefined || customPropertyGuid === null) {
        throw new Error("Missing the required parameter 'customPropertyGuid' when calling projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems");
      }

      let pathParams = {
        'customPropertyGuid': customPropertyGuid
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'pageToken': opts['pageToken'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectCustomPropertySelectionItemOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/customproperties/{customPropertyGuid}/projectcustompropertyselectionitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectMemberCostExceptionsGetProjectMemberCostException operation.
     * @callback module:api/SettingsReadApi~projectMemberCostExceptionsGetProjectMemberCostExceptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMemberCostExceptionOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project member cost exception by ID.
     * @param {String} guid GUID used to get the cost exception.
     * @param {module:api/SettingsReadApi~projectMemberCostExceptionsGetProjectMemberCostExceptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectMemberCostExceptionOutputModel}
     */
    projectMemberCostExceptionsGetProjectMemberCostException(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectMemberCostExceptionsGetProjectMemberCostException");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectMemberCostExceptionOutputModel;
      return this.apiClient.callApi(
        '/v1/projectmembercostexceptions/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectStatusTypesGetProjectStatusType operation.
     * @callback module:api/SettingsReadApi~projectStatusTypesGetProjectStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectStatusTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projectStatusType by ID
     * @param {String} guid GUID used to get the projectStatusType.
     * @param {module:api/SettingsReadApi~projectStatusTypesGetProjectStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectStatusTypeModel}
     */
    projectStatusTypesGetProjectStatusType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectStatusTypesGetProjectStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectStatusTypeModel;
      return this.apiClient.callApi(
        '/v1/projectstatustypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectStatusTypesGetProjectStatusTypes operation.
     * @callback module:api/SettingsReadApi~projectStatusTypesGetProjectStatusTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectStatusTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the ProjectStatusTypes
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from ProjectStatusType name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc\"
     * @param {module:api/SettingsReadApi~projectStatusTypesGetProjectStatusTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectStatusTypeModel>}
     */
    projectStatusTypesGetProjectStatusTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectStatusTypeModel];
      return this.apiClient.callApi(
        '/v1/projectstatustypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTaskStatusesGetProjectTaskStatus operation.
     * @callback module:api/SettingsReadApi~projectTaskStatusesGetProjectTaskStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectTaskStatusModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project task status by ID.
     * @param {String} guid GUID used to get the Project task status.
     * @param {module:api/SettingsReadApi~projectTaskStatusesGetProjectTaskStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectTaskStatusModel}
     */
    projectTaskStatusesGetProjectTaskStatus(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectTaskStatusesGetProjectTaskStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectTaskStatusModel;
      return this.apiClient.callApi(
        '/v1/projecttaskstatuses/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTaskStatusesGetProjectTaskStatuses operation.
     * @callback module:api/SettingsReadApi~projectTaskStatusesGetProjectTaskStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTaskStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project task statuses.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from activity type name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\".
     * @param {module:api/SettingsReadApi~projectTaskStatusesGetProjectTaskStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTaskStatusModel>}
     */
    projectTaskStatusesGetProjectTaskStatuses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTaskStatusModel];
      return this.apiClient.callApi(
        '/v1/projecttaskstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalStatusesGetProposalStatus operation.
     * @callback module:api/SettingsReadApi~proposalStatusesGetProposalStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalStatusOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Proposal status by ID
     * @param {String} guid GUID used to get the Proposal status.
     * @param {module:api/SettingsReadApi~proposalStatusesGetProposalStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalStatusOutputModel}
     */
    proposalStatusesGetProposalStatus(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalStatusesGetProposalStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProposalStatusOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalstatuses/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalStatusesGetProposalStatuses operation.
     * @callback module:api/SettingsReadApi~proposalStatusesGetProposalStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalStatusOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the proposal statuses
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isActive] Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [proposalStatusName = '')] Optional: Search by proposal status name.
     * @param {module:api/SettingsReadApi~proposalStatusesGetProposalStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalStatusOutputModel>}
     */
    proposalStatusesGetProposalStatuses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isActive': opts['isActive'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'proposalStatusName': opts['proposalStatusName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalStatusOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalStatusesGetUsage operation.
     * @callback module:api/SettingsReadApi~proposalStatusesGetUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsageModel2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usage for an proposal status.
     * @param {String} guid GUID used to get the proposal status.
     * @param {module:api/SettingsReadApi~proposalStatusesGetUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsageModel2>}
     */
    proposalStatusesGetUsage(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalStatusesGetUsage");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsageModel2];
      return this.apiClient.callApi(
        '/v1/proposalstatuses/{guid}/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesGetRole operation.
     * @callback module:api/SettingsReadApi~rolesGetRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role by GUID.
     * @param {String} guid Id used to get the role.
     * @param {module:api/SettingsReadApi~rolesGetRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleOutputModel}
     */
    rolesGetRole(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling rolesGetRole");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleOutputModel;
      return this.apiClient.callApi(
        '/v1/roles/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesGetRoles operation.
     * @callback module:api/SettingsReadApi~rolesGetRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get roles.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isActive] If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles.
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {Date} [changedSince] Optional: Get roles that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~rolesGetRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleOutputModel>}
     */
    rolesGetRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isActive': opts['isActive'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleOutputModel];
      return this.apiClient.callApi(
        '/v1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesAccountsGetSalesAccount operation.
     * @callback module:api/SettingsReadApi~salesAccountsGetSalesAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesAccountModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales account by ID.
     * @param {String} guid Id used to get the sales account.
     * @param {module:api/SettingsReadApi~salesAccountsGetSalesAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesAccountModel}
     */
    salesAccountsGetSalesAccount(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesAccountsGetSalesAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SalesAccountModel;
      return this.apiClient.callApi(
        '/v1/salesaccounts/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesAccountsGetSalesAccounts operation.
     * @callback module:api/SettingsReadApi~salesAccountsGetSalesAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesAccountModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales accounts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from cost account name or identifier.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc\".
     * @param {module:api/SettingsReadApi~salesAccountsGetSalesAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesAccountModel>}
     */
    salesAccountsGetSalesAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SalesAccountModel];
      return this.apiClient.callApi(
        '/v1/salesaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesStatusTypesGetSalesStatusType operation.
     * @callback module:api/SettingsReadApi~salesStatusTypesGetSalesStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesStatusTypeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales status type by ID
     * @param {String} guid GUID used to get the sales status type.
     * @param {module:api/SettingsReadApi~salesStatusTypesGetSalesStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesStatusTypeOutputModel}
     */
    salesStatusTypesGetSalesStatusType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesStatusTypesGetSalesStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SalesStatusTypeOutputModel;
      return this.apiClient.callApi(
        '/v1/salesstatustypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesStatusTypesGetSalesStatusTypes operation.
     * @callback module:api/SettingsReadApi~salesStatusTypesGetSalesStatusTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesStatusTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the sales status types
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types
     * @param {module:model/SalesStatusType} [salesState] Optional: Get sales status types of the sales state.
     * @param {Number} [firstRow = 0)] Optional: First row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from sales status type name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc\"
     * @param {module:api/SettingsReadApi~salesStatusTypesGetSalesStatusTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesStatusTypeOutputModel>}
     */
    salesStatusTypesGetSalesStatusTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'salesState': opts['salesState'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SalesStatusTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/salesstatustypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntryTypesGetTimeEntryType operation.
     * @callback module:api/SettingsReadApi~timeEntryTypesGetTimeEntryTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeEntryTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time entry type by ID.
     * @param {String} guid ID used to get the time entry type.
     * @param {module:api/SettingsReadApi~timeEntryTypesGetTimeEntryTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeEntryTypeModel}
     */
    timeEntryTypesGetTimeEntryType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling timeEntryTypesGetTimeEntryType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeEntryTypeModel;
      return this.apiClient.callApi(
        '/v1/timeentrytypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntryTypesGetTimeEntryTypes operation.
     * @callback module:api/SettingsReadApi~timeEntryTypesGetTimeEntryTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeEntryTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all time entry types.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from time entry type name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculates the total row count.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\".
     * @param {module:api/SettingsReadApi~timeEntryTypesGetTimeEntryTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeEntryTypeModel>}
     */
    timeEntryTypesGetTimeEntryTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimeEntryTypeModel];
      return this.apiClient.callApi(
        '/v1/timeentrytypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezonesGetTimezone operation.
     * @callback module:api/SettingsReadApi~timezonesGetTimezoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimezoneModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get timezone by ID.
     * @param {String} guid GUID used to get the timezone.
     * @param {module:api/SettingsReadApi~timezonesGetTimezoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimezoneModel}
     */
    timezonesGetTimezone(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling timezonesGetTimezone");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimezoneModel;
      return this.apiClient.callApi(
        '/v1/localization/timezones/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezonesGetTimezones operation.
     * @callback module:api/SettingsReadApi~timezonesGetTimezonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimezoneModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the timezones.
     * @param {module:api/SettingsReadApi~timezonesGetTimezonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimezoneModel>}
     */
    timezonesGetTimezones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimezoneModel];
      return this.apiClient.callApi(
        '/v1/localization/timezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings operation.
     * @callback module:api/SettingsReadApi~travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelExpenseTypeCountrySettingsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all country settings for a travel expense type
     * @param {String} travelExpenseTypeGuid Guid of the travel expense type.
     * @param {module:api/SettingsReadApi~travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelExpenseTypeCountrySettingsModel>}
     */
    travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings(travelExpenseTypeGuid, callback) {
      let postBody = null;
      // verify the required parameter 'travelExpenseTypeGuid' is set
      if (travelExpenseTypeGuid === undefined || travelExpenseTypeGuid === null) {
        throw new Error("Missing the required parameter 'travelExpenseTypeGuid' when calling travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings");
      }

      let pathParams = {
        'travelExpenseTypeGuid': travelExpenseTypeGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelExpenseTypeCountrySettingsModel];
      return this.apiClient.callApi(
        '/v1/travelexpensetypes/{travelExpenseTypeGuid}/travelexpensetypecountrysettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypesGetTravelExpenseType operation.
     * @callback module:api/SettingsReadApi~travelExpenseTypesGetTravelExpenseTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelExpenseTypeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get travel expense type by guid.
     * @param {String} guid GUID used to get the travel expense type.
     * @param {module:api/SettingsReadApi~travelExpenseTypesGetTravelExpenseTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelExpenseTypeOutputModel}
     */
    travelExpenseTypesGetTravelExpenseType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelExpenseTypesGetTravelExpenseType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TravelExpenseTypeOutputModel;
      return this.apiClient.callApi(
        '/v1/travelexpensetypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypesGetTravelExpenseTypes operation.
     * @callback module:api/SettingsReadApi~travelExpenseTypesGetTravelExpenseTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelExpenseTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the travel expense types.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [textToSearch] Searched string: part of name or code.
     * @param {String} [code = '')] Optional: Code of the travel expense type.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=IsActive&sortings[0].value=Asc&sortings[1].key=Name&sortings[1].value=Desc.
     * @param {module:api/SettingsReadApi~travelExpenseTypesGetTravelExpenseTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelExpenseTypeOutputModel>}
     */
    travelExpenseTypesGetTravelExpenseTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'code': opts['code'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelExpenseTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/travelexpensetypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelPricesGetTravelPrice operation.
     * @callback module:api/SettingsReadApi~travelPricesGetTravelPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelPriceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get travel price by ID.
     * @param {String} guid Id used to get the travel price.
     * @param {module:api/SettingsReadApi~travelPricesGetTravelPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelPriceOutputModel}
     */
    travelPricesGetTravelPrice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelPricesGetTravelPrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TravelPriceOutputModel;
      return this.apiClient.callApi(
        '/v1/travelprices/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelPricesGetTravelPrices operation.
     * @callback module:api/SettingsReadApi~travelPricesGetTravelPricesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelPriceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the travel prices for a price list version.
     * @param {String} pricelistVersionGuid ID of the price list version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fromPricelistOnly = false)] If true return only prices from the price list, if false also returns prices from the products. Default is false.
     * @param {Array.<module:model/ExpensesClass>} [expenseClasses] Optional: List of expense classes to search by, defaults to all travel categories.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from Product name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate the number of total rows. Default false = total row count is returned as zero.
     * @param {module:api/SettingsReadApi~travelPricesGetTravelPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelPriceOutputModel>}
     */
    travelPricesGetTravelPrices(pricelistVersionGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pricelistVersionGuid' is set
      if (pricelistVersionGuid === undefined || pricelistVersionGuid === null) {
        throw new Error("Missing the required parameter 'pricelistVersionGuid' when calling travelPricesGetTravelPrices");
      }

      let pathParams = {
        'pricelistVersionGuid': pricelistVersionGuid
      };
      let queryParams = {
        'fromPricelistOnly': opts['fromPricelistOnly'],
        'expenseClasses': this.apiClient.buildCollectionParam(opts['expenseClasses'], 'multi'),
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelPriceOutputModel];
      return this.apiClient.callApi(
        '/v1/pricelistversions/{pricelistVersionGuid}/travelprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementStatusGetTravelReimbursementStatus operation.
     * @callback module:api/SettingsReadApi~travelReimbursementStatusGetTravelReimbursementStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelReimbursementStatusModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the travel reimbursement statuses by guid.
     * @param {String} guid reimbursement status id to get.
     * @param {module:api/SettingsReadApi~travelReimbursementStatusGetTravelReimbursementStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelReimbursementStatusModel}
     */
    travelReimbursementStatusGetTravelReimbursementStatus(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelReimbursementStatusGetTravelReimbursementStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TravelReimbursementStatusModel;
      return this.apiClient.callApi(
        '/v1/travelreimbursementstatuses/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementStatusGetTravelReimbursementStatuses operation.
     * @callback module:api/SettingsReadApi~travelReimbursementStatusGetTravelReimbursementStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelReimbursementStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the travel reimbursement statuses.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from travel reimbursement name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\".
     * @param {module:api/SettingsReadApi~travelReimbursementStatusGetTravelReimbursementStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelReimbursementStatusModel>}
     */
    travelReimbursementStatusGetTravelReimbursementStatuses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelReimbursementStatusModel];
      return this.apiClient.callApi(
        '/v1/travelreimbursementstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertiesGetUserCustomProperties operation.
     * @callback module:api/SettingsReadApi~userCustomPropertiesGetUserCustomPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomPropertyOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user custom properties.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isActive] Optional: Get only active or inactive user custom properties.
     * @param {Boolean} [isInUse] Optional: Is the customer property used in any custom property usage.
     * @param {Date} [changedSince] Optional: Get custom properties that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~userCustomPropertiesGetUserCustomPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomPropertyOutputModel>}
     */
    userCustomPropertiesGetUserCustomProperties(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'isInUse': opts['isInUse'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserCustomPropertyOutputModel];
      return this.apiClient.callApi(
        '/v1/users/customproperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertiesGetUserCustomProperty operation.
     * @callback module:api/SettingsReadApi~userCustomPropertiesGetUserCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCustomPropertyOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user custom property by ID.
     * @param {String} guid Id used to get the user custom property.
     * @param {module:api/SettingsReadApi~userCustomPropertiesGetUserCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCustomPropertyOutputModel}
     */
    userCustomPropertiesGetUserCustomProperty(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomPropertiesGetUserCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserCustomPropertyOutputModel;
      return this.apiClient.callApi(
        '/v1/users/customproperties/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem operation.
     * @callback module:api/SettingsReadApi~userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCustomPropertySelectionItemOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user custom property selection item by ID.
     * @param {String} guid Id used to get the user custom property selection item.
     * @param {module:api/SettingsReadApi~userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCustomPropertySelectionItemOutputModel}
     */
    userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserCustomPropertySelectionItemOutputModel;
      return this.apiClient.callApi(
        '/v1/users/customproperties/usercustompropertyselectionitems/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems operation.
     * @callback module:api/SettingsReadApi~userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomPropertySelectionItemOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user custom properties.
     * @param {String} customPropertyGuid Custom property id used to get the user custom property selection items.
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isActive] Optional: Get only active or inactive selection items.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Date} [changedSince] Optional: Get custom property selection items that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomPropertySelectionItemOutputModel>}
     */
    userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems(customPropertyGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customPropertyGuid' is set
      if (customPropertyGuid === undefined || customPropertyGuid === null) {
        throw new Error("Missing the required parameter 'customPropertyGuid' when calling userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems");
      }

      let pathParams = {
        'customPropertyGuid': customPropertyGuid
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'pageToken': opts['pageToken'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserCustomPropertySelectionItemOutputModel];
      return this.apiClient.callApi(
        '/v1/users/customproperties/{customPropertyGuid}/usercustompropertyselectionitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatRatesGetVatRate operation.
     * @callback module:api/SettingsReadApi~vatRatesGetVatRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VatRateOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a vat rate by GUID
     * @param {String} guid GUID used to get the vat rate.
     * @param {module:api/SettingsReadApi~vatRatesGetVatRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VatRateOutputModel}
     */
    vatRatesGetVatRate(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling vatRatesGetVatRate");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VatRateOutputModel;
      return this.apiClient.callApi(
        '/v1/vatrates/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatRatesGetVatRates operation.
     * @callback module:api/SettingsReadApi~vatRatesGetVatRatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VatRateOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all organization vat rates
     * @param {Object} opts Optional parameters
     * @param {String} [countryGuid] If not given, return all vat rates in organizations country. If given return only for that country.
     * @param {Boolean} [active] If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones.
     * @param {module:api/SettingsReadApi~vatRatesGetVatRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VatRateOutputModel>}
     */
    vatRatesGetVatRates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'countryGuid': opts['countryGuid'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VatRateOutputModel];
      return this.apiClient.callApi(
        '/v1/vatrates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsGetWorkContract operation.
     * @callback module:api/SettingsReadApi~workContractsGetWorkContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkContractOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get work contract by ID.
     * @param {String} guid Id used to get the work contract.
     * @param {module:api/SettingsReadApi~workContractsGetWorkContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkContractOutputModel}
     */
    workContractsGetWorkContract(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workContractsGetWorkContract");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkContractOutputModel;
      return this.apiClient.callApi(
        '/v1/workcontracts/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHourPricesGetWorkHourPrice operation.
     * @callback module:api/SettingsReadApi~workHourPricesGetWorkHourPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkHourPriceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get work hour price by ID.
     * @param {String} guid Id used to get the work hour price.
     * @param {module:api/SettingsReadApi~workHourPricesGetWorkHourPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkHourPriceOutputModel}
     */
    workHourPricesGetWorkHourPrice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workHourPricesGetWorkHourPrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkHourPriceOutputModel;
      return this.apiClient.callApi(
        '/v1/workhourprices/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHourPricesGetWorkHourPrices operation.
     * @callback module:api/SettingsReadApi~workHourPricesGetWorkHourPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkHourPriceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the workHourPrices for a price list version.
     * @param {String} pricelistVersionGuid Price list version identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page..
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get prices that have been added or changed after this date time (greater or equal).
     * @param {module:api/SettingsReadApi~workHourPricesGetWorkHourPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkHourPriceOutputModel}
     */
    workHourPricesGetWorkHourPrices(pricelistVersionGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pricelistVersionGuid' is set
      if (pricelistVersionGuid === undefined || pricelistVersionGuid === null) {
        throw new Error("Missing the required parameter 'pricelistVersionGuid' when calling workHourPricesGetWorkHourPrices");
      }

      let pathParams = {
        'pricelistVersionGuid': pricelistVersionGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkHourPriceOutputModel;
      return this.apiClient.callApi(
        '/v1/pricelistversions/{pricelistVersionGuid}/workhourprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesGetWorkType operation.
     * @callback module:api/SettingsReadApi~workTypesGetWorkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkTypeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get work type by ID.
     * @param {String} guid Id used to get the work type.
     * @param {module:api/SettingsReadApi~workTypesGetWorkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkTypeOutputModel}
     */
    workTypesGetWorkType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workTypesGetWorkType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkTypeOutputModel;
      return this.apiClient.callApi(
        '/v1/worktypes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesGetWorkTypes operation.
     * @callback module:api/SettingsReadApi~workTypesGetWorkTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all work types.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned.
     * @param {Boolean} [productive] Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from work type name or code.
     * @param {String} [code = '')] Optional: Code of the work type.
     * @param {Date} [changedSince] Optional: Get work types that have been added or changed after this date time (greater or equal).
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\".
     * @param {module:api/SettingsReadApi~workTypesGetWorkTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkTypeOutputModel>}
     */
    workTypesGetWorkTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'productive': opts['productive'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'code': opts['code'],
        'changedSince': opts['changedSince'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/worktypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
