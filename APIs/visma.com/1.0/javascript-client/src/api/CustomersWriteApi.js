/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressModel from '../model/AddressModel';
import ContactCommunicationModel from '../model/ContactCommunicationModel';
import ContactKeywordModel from '../model/ContactKeywordModel';
import ContactModel from '../model/ContactModel';
import CustomerCountrySettingsInputModel from '../model/CustomerCountrySettingsInputModel';
import CustomerCountrySettingsOutputModel from '../model/CustomerCountrySettingsOutputModel';
import CustomerCustomValueModel from '../model/CustomerCustomValueModel';
import CustomerMarketSegmentModel from '../model/CustomerMarketSegmentModel';
import CustomerModel from '../model/CustomerModel';
import CustomerSalesNoteInputModel from '../model/CustomerSalesNoteInputModel';
import CustomerSalesNoteOutputModel from '../model/CustomerSalesNoteOutputModel';
import ExceptionModel from '../model/ExceptionModel';
import PatchOperation from '../model/PatchOperation';

/**
* CustomersWrite service.
* @module api/CustomersWriteApi
* @version 1.0
*/
export default class CustomersWriteApi {

    /**
    * Constructs a new CustomersWriteApi. 
    * @alias module:api/CustomersWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressesPatchAddress operation.
     * @callback module:api/CustomersWriteApi~addressesPatchAddressCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddressModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an address or a part of it.
     * @param {String} guid ID of the address.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of AddressModel.
     * @param {module:api/CustomersWriteApi~addressesPatchAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddressModel>}
     */
    addressesPatchAddress(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling addressesPatchAddress");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AddressModel];
      return this.apiClient.callApi(
        '/v1/addresses/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addressesPostCustomerAddress operation.
     * @callback module:api/CustomersWriteApi~addressesPostCustomerAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert an address.
     * @param {String} customerGuid ID of the customer to add the address for.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddressModel} [addressModel] AddressModel.
     * @param {module:api/CustomersWriteApi~addressesPostCustomerAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressModel}
     */
    addressesPostCustomerAddress(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['addressModel'];
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling addressesPostCustomerAddress");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressModel;
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactCommunicationsPatchContactCommunication operation.
     * @callback module:api/CustomersWriteApi~contactCommunicationsPatchContactCommunicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactCommunicationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a contact's communication or a part of it.
     * @param {String} guid ID of the contact's communication.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ContactCommunicationModel.
     * @param {module:api/CustomersWriteApi~contactCommunicationsPatchContactCommunicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactCommunicationModel}
     */
    contactCommunicationsPatchContactCommunication(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactCommunicationsPatchContactCommunication");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactCommunicationModel;
      return this.apiClient.callApi(
        '/v1/contactcommunications/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactCommunicationsPostContactCommunication operation.
     * @callback module:api/CustomersWriteApi~contactCommunicationsPostContactCommunicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactCommunicationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a communication for a contact.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactCommunicationModel} [contactCommunicationModel] ContactCommunicationModel.
     * @param {module:api/CustomersWriteApi~contactCommunicationsPostContactCommunicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactCommunicationModel}
     */
    contactCommunicationsPostContactCommunication(opts, callback) {
      opts = opts || {};
      let postBody = opts['contactCommunicationModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactCommunicationModel;
      return this.apiClient.callApi(
        '/v1/contactcommunications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactsPatchContact operation.
     * @callback module:api/CustomersWriteApi~contactsPatchContactCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an contact or a part of it.
     * @param {String} guid ID of the contact.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ContactModel.
     * @param {module:api/CustomersWriteApi~contactsPatchContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactModel>}
     */
    contactsPatchContact(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactsPatchContact");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ContactModel];
      return this.apiClient.callApi(
        '/v1/contactpersons/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactsPostContact operation.
     * @callback module:api/CustomersWriteApi~contactsPostContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a contact.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactModel} [contactModel] ContactModel.
     * @param {module:api/CustomersWriteApi~contactsPostContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactModel}
     */
    contactsPostContact(opts, callback) {
      opts = opts || {};
      let postBody = opts['contactModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactModel;
      return this.apiClient.callApi(
        '/v1/contactpersons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCountrySettingsPatchCustomerCountrySettings operation.
     * @callback module:api/CustomersWriteApi~customerCountrySettingsPatchCustomerCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCountrySettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a customer country setting.
     * @param {String} guid ID of the customer country setting.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of CustomerCountrySettingsModel.
     * @param {module:api/CustomersWriteApi~customerCountrySettingsPatchCustomerCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCountrySettingsOutputModel>}
     */
    customerCountrySettingsPatchCustomerCountrySettings(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCountrySettingsPatchCustomerCountrySettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomerCountrySettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/customercountrysettings/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCountrySettingsPostCustomerCountrySettings operation.
     * @callback module:api/CustomersWriteApi~customerCountrySettingsPostCustomerCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerCountrySettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a customer country setting.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerCountrySettingsInputModel} [customerCountrySettingsInputModel] CustomerCountrySettingsModel.
     * @param {module:api/CustomersWriteApi~customerCountrySettingsPostCustomerCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerCountrySettingsOutputModel}
     */
    customerCountrySettingsPostCustomerCountrySettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['customerCountrySettingsInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerCountrySettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/customercountrysettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomValuesPatchCustomerCustomValue operation.
     * @callback module:api/CustomersWriteApi~customerCustomValuesPatchCustomerCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCustomValueModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a customer custom value or a part of it.
     * @param {String} guid ID of the customer custom value Can also be comma separate list of IDs to patch multiple customer custom values with one call. When multiple IDs are given, returns model which has list of succeeded customer custom values and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of CustomerCustomValueModel.
     * @param {module:api/CustomersWriteApi~customerCustomValuesPatchCustomerCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCustomValueModel>}
     */
    customerCustomValuesPatchCustomerCustomValue(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomValuesPatchCustomerCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomerCustomValueModel];
      return this.apiClient.callApi(
        '/v1/customers/customvalues/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomValuesPostCustomerCustomValue operation.
     * @callback module:api/CustomersWriteApi~customerCustomValuesPostCustomerCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCustomValueModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a customer custom value.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerCustomValueModel} [customerCustomValueModel] CustomerCustomValueModel.
     * @param {module:api/CustomersWriteApi~customerCustomValuesPostCustomerCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCustomValueModel>}
     */
    customerCustomValuesPostCustomerCustomValue(opts, callback) {
      opts = opts || {};
      let postBody = opts['customerCustomValueModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomerCustomValueModel];
      return this.apiClient.callApi(
        '/v1/customers/customvalues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerMarketSegmentsPostCustomerMarketSegment operation.
     * @callback module:api/CustomersWriteApi~customerMarketSegmentsPostCustomerMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerMarketSegmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a market segment for customer.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerMarketSegmentModel} [customerMarketSegmentModel] CustomerMarketSegmentModel.
     * @param {module:api/CustomersWriteApi~customerMarketSegmentsPostCustomerMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerMarketSegmentModel}
     */
    customerMarketSegmentsPostCustomerMarketSegment(opts, callback) {
      opts = opts || {};
      let postBody = opts['customerMarketSegmentModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerMarketSegmentModel;
      return this.apiClient.callApi(
        '/v1/customermarketsegments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersPatchCustomer operation.
     * @callback module:api/CustomersWriteApi~customersPatchCustomerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an customer or a part of it.
     * @param {String} guid ID of the customer.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of CustomerModel.
     * @param {module:api/CustomersWriteApi~customersPatchCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerModel>}
     */
    customersPatchCustomer(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customersPatchCustomer");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomerModel];
      return this.apiClient.callApi(
        '/v1/customers/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersPostCustomer operation.
     * @callback module:api/CustomersWriteApi~customersPostCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a customer.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerModel} [customerModel] CustomerModel.
     * @param {module:api/CustomersWriteApi~customersPostCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerModel}
     */
    customersPostCustomer(opts, callback) {
      opts = opts || {};
      let postBody = opts['customerModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerModel;
      return this.apiClient.callApi(
        '/v1/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsLinkKeywordToContact operation.
     * @callback module:api/CustomersWriteApi~keywordsLinkKeywordToContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactKeywordModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link existing keyword to contact
     * @param {String} contactGuid 
     * @param {String} guid 
     * @param {module:api/CustomersWriteApi~keywordsLinkKeywordToContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactKeywordModel}
     */
    keywordsLinkKeywordToContact(contactGuid, guid, callback) {
      let postBody = null;
      // verify the required parameter 'contactGuid' is set
      if (contactGuid === undefined || contactGuid === null) {
        throw new Error("Missing the required parameter 'contactGuid' when calling keywordsLinkKeywordToContact");
      }
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsLinkKeywordToContact");
      }

      let pathParams = {
        'contactGuid': contactGuid,
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactKeywordModel;
      return this.apiClient.callApi(
        '/v1/contacts/{contactGuid}/keywords/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesPatchCustomerSalesNote operation.
     * @callback module:api/CustomersWriteApi~salesNotesPatchCustomerSalesNoteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerSalesNoteOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a customer sales note or a part of it.
     * @param {String} guid ID of the customer sales note.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of customer sales note model.
     * @param {module:api/CustomersWriteApi~salesNotesPatchCustomerSalesNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerSalesNoteOutputModel>}
     */
    salesNotesPatchCustomerSalesNote(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesNotesPatchCustomerSalesNote");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomerSalesNoteOutputModel];
      return this.apiClient.callApi(
        '/v1/customersalesnotes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesPostCustomerSalesNotes operation.
     * @callback module:api/CustomersWriteApi~salesNotesPostCustomerSalesNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerSalesNoteOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a customer sales note.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerSalesNoteInputModel} [customerSalesNoteInputModel] SalesNoteOutputModel
     * @param {module:api/CustomersWriteApi~salesNotesPostCustomerSalesNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerSalesNoteOutputModel}
     */
    salesNotesPostCustomerSalesNotes(opts, callback) {
      opts = opts || {};
      let postBody = opts['customerSalesNoteInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerSalesNoteOutputModel;
      return this.apiClient.callApi(
        '/v1/customersalesnotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
