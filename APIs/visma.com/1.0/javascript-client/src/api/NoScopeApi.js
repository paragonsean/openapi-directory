/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessTokenCredentials from '../model/AccessTokenCredentials';
import ClientCredentials from '../model/ClientCredentials';
import ExceptionModel from '../model/ExceptionModel';
import PublicAuthenticationOutputModel from '../model/PublicAuthenticationOutputModel';

/**
* NoScope service.
* @module api/NoScopeApi
* @version 1.0
*/
export default class NoScopeApi {

    /**
    * Constructs a new NoScopeApi. 
    * @alias module:api/NoScopeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the heartBeatGetAuthorization operation.
     * @callback module:api/NoScopeApi~heartBeatGetAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns http status code 204 for successful authentication.
     * This route requires authentication, returns 204 http status when successful.
     * @param {module:api/NoScopeApi~heartBeatGetAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    heartBeatGetAuthorization(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/heartbeat/authorized', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heartBeatGetDatabaseStatus operation.
     * @callback module:api/NoScopeApi~heartBeatGetDatabaseStatusCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Can be used to check the status of the database.
     * This does not require authentication.
     * @param {module:api/NoScopeApi~heartBeatGetDatabaseStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    heartBeatGetDatabaseStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/heartbeat/database', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heartBeatGetServerStatus operation.
     * @callback module:api/NoScopeApi~heartBeatGetServerStatusCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Can be used to check the status of the REST Api.
     * This does not require authentication.
     * @param {module:api/NoScopeApi~heartBeatGetServerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    heartBeatGetServerStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/heartbeat/server', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicBearerAuthenticationGetAccessTokenJson operation.
     * @callback module:api/NoScopeApi~publicBearerAuthenticationGetAccessTokenJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicAuthenticationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get oAuth2 access token.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessTokenCredentials} [accessTokenCredentials] AccessTokenCredentials model
     * @param {module:api/NoScopeApi~publicBearerAuthenticationGetAccessTokenJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicAuthenticationOutputModel}
     */
    publicBearerAuthenticationGetAccessTokenJson(opts, callback) {
      opts = opts || {};
      let postBody = opts['accessTokenCredentials'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicAuthenticationOutputModel;
      return this.apiClient.callApi(
        '/v1/login/oauth/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicBearerAuthenticationGetAccessTokenTokenFromRefreshToken operation.
     * @callback module:api/NoScopeApi~publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicAuthenticationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get new access token using a refresh token.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Refresh token.
     * @param {module:api/NoScopeApi~publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicAuthenticationOutputModel}
     */
    publicBearerAuthenticationGetAccessTokenTokenFromRefreshToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicAuthenticationOutputModel;
      return this.apiClient.callApi(
        '/v1/refreshtoken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicBearerAuthenticationGetAuthorizationCode operation.
     * @callback module:api/NoScopeApi~publicBearerAuthenticationGetAuthorizationCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExceptionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the oAuth2 authorization code flow code.
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] code
     * @param {String} [state] Unguessable random string.
     * @param {String} [clientId] Client id.
     * @param {String} [redirectUri] Url where to redirect after code has been retrieved.
     * @param {String} [scope = '')] Scopes that client requests. If scopes that are not allowed for the client are requested, returns unauthorized.
     * @param {module:api/NoScopeApi~publicBearerAuthenticationGetAuthorizationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExceptionModel}
     */
    publicBearerAuthenticationGetAuthorizationCode(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'response_type': opts['responseType'],
        'state': opts['state'],
        'client_id': opts['clientId'],
        'redirect_uri': opts['redirectUri'],
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExceptionModel;
      return this.apiClient.callApi(
        '/v1/login/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicBearerAuthenticationGetLoginToken operation.
     * @callback module:api/NoScopeApi~publicBearerAuthenticationGetLoginTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicAuthenticationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Can be used to get the login information and access token for the api client.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientCredentials} [clientCredentials] ClientCredentials of the client.
     * @param {module:api/NoScopeApi~publicBearerAuthenticationGetLoginTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicAuthenticationOutputModel}
     */
    publicBearerAuthenticationGetLoginToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['clientCredentials'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicAuthenticationOutputModel;
      return this.apiClient.callApi(
        '/v1/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicBearerAuthenticationLogout operation.
     * @callback module:api/NoScopeApi~publicBearerAuthenticationLogoutCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout. Invalidates refresh token. Access token will be invalid when it expires.
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/NoScopeApi~publicBearerAuthenticationLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    publicBearerAuthenticationLogout(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/signout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
