/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import OrganizationDetailsOutputModel from '../model/OrganizationDetailsOutputModel';
import OrganizationSettingsModel from '../model/OrganizationSettingsModel';
import VismaFinancialsCompanyModel from '../model/VismaFinancialsCompanyModel';

/**
* OrganizationRead service.
* @module api/OrganizationReadApi
* @version 1.0
*/
export default class OrganizationReadApi {

    /**
    * Constructs a new OrganizationReadApi. 
    * @alias module:api/OrganizationReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organizationDetailsGetOrganizationDetails operation.
     * @callback module:api/OrganizationReadApi~organizationDetailsGetOrganizationDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationDetailsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of organization.
     * @param {module:api/OrganizationReadApi~organizationDetailsGetOrganizationDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationDetailsOutputModel}
     */
    organizationDetailsGetOrganizationDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationDetailsOutputModel;
      return this.apiClient.callApi(
        '/v1/organizationdetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationSettingsGetOrganizationSettings operation.
     * @callback module:api/OrganizationReadApi~organizationSettingsGetOrganizationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationSettingsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the settings of organization.
     * @param {module:api/OrganizationReadApi~organizationSettingsGetOrganizationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationSettingsModel}
     */
    organizationSettingsGetOrganizationSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationSettingsModel;
      return this.apiClient.callApi(
        '/v1/organizationsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsGetVismaFinancialsCompanyInfo operation.
     * @callback module:api/OrganizationReadApi~organizationsGetVismaFinancialsCompanyInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VismaFinancialsCompanyModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Visma.net Financials integration company information.
     * @param {module:api/OrganizationReadApi~organizationsGetVismaFinancialsCompanyInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VismaFinancialsCompanyModel}
     */
    organizationsGetVismaFinancialsCompanyInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VismaFinancialsCompanyModel;
      return this.apiClient.callApi(
        '/v1/integrations/vismafinancials/companyinformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
