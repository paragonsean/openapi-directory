/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomPriceListOutputModel from '../model/CustomPriceListOutputModel';
import ExceptionModel from '../model/ExceptionModel';
import PatchOperation from '../model/PatchOperation';
import PhaseInputModel from '../model/PhaseInputModel';
import PhaseMemberModel from '../model/PhaseMemberModel';
import PhaseMembersFromBusinessUnitUsersModel from '../model/PhaseMembersFromBusinessUnitUsersModel';
import PhaseOutputModel from '../model/PhaseOutputModel';
import ProjectCustomValueModel from '../model/ProjectCustomValueModel';
import ProjectFileModel from '../model/ProjectFileModel';
import ProjectForecastInputModel from '../model/ProjectForecastInputModel';
import ProjectForecastOutputModel from '../model/ProjectForecastOutputModel';
import ProjectInputModelBase from '../model/ProjectInputModelBase';
import ProjectInvoiceSettingsInputModel from '../model/ProjectInvoiceSettingsInputModel';
import ProjectInvoiceSettingsOutputModel from '../model/ProjectInvoiceSettingsOutputModel';
import ProjectKeywordModel from '../model/ProjectKeywordModel';
import ProjectOutputModel from '../model/ProjectOutputModel';
import ProjectProductInputModel from '../model/ProjectProductInputModel';
import ProjectProductOutputModel from '../model/ProjectProductOutputModel';
import ProjectSalesNoteInputModel from '../model/ProjectSalesNoteInputModel';
import ProjectSalesNoteOutputModel from '../model/ProjectSalesNoteOutputModel';
import ProjectWorkHourPriceInputModel from '../model/ProjectWorkHourPriceInputModel';
import ProjectWorkHourPriceOutputModel from '../model/ProjectWorkHourPriceOutputModel';
import ProjectWorkTypeModel from '../model/ProjectWorkTypeModel';
import ProposalFeeRowInputModel from '../model/ProposalFeeRowInputModel';
import ProposalFeeRowOutputModel from '../model/ProposalFeeRowOutputModel';
import ProposalInputModel from '../model/ProposalInputModel';
import ProposalOutputModel from '../model/ProposalOutputModel';
import ProposalSettingsOutputModel from '../model/ProposalSettingsOutputModel';
import ProposalSubtotalInputModel from '../model/ProposalSubtotalInputModel';
import ProposalSubtotalOutputModel from '../model/ProposalSubtotalOutputModel';
import ProposalWorkhourRowInputModel from '../model/ProposalWorkhourRowInputModel';
import ProposalWorkhourRowOutputModel from '../model/ProposalWorkhourRowOutputModel';

/**
* ProjectsWrite service.
* @module api/ProjectsWriteApi
* @version 1.0
*/
export default class ProjectsWriteApi {

    /**
    * Constructs a new ProjectsWriteApi. 
    * @alias module:api/ProjectsWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filesPostProjectLink operation.
     * @callback module:api/ProjectsWriteApi~filesPostProjectLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFileModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a link to a project.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectFileModel} [projectFileModel] ProjectFileModel.
     * @param {module:api/ProjectsWriteApi~filesPostProjectLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFileModel}
     */
    filesPostProjectLink(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectFileModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectFileModel;
      return this.apiClient.callApi(
        '/v1/projectlinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsLinkKeywordToProject operation.
     * @callback module:api/ProjectsWriteApi~keywordsLinkKeywordToProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectKeywordModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link existing keyword to project
     * @param {String} projectGuid 
     * @param {String} guid 
     * @param {module:api/ProjectsWriteApi~keywordsLinkKeywordToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectKeywordModel}
     */
    keywordsLinkKeywordToProject(projectGuid, guid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling keywordsLinkKeywordToProject");
      }
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsLinkKeywordToProject");
      }

      let pathParams = {
        'projectGuid': projectGuid,
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectKeywordModel;
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/keywords/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseMembersPostPhaseMember operation.
     * @callback module:api/ProjectsWriteApi~phaseMembersPostPhaseMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhaseMemberModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a phase member.
     * User is always added as a root phase (project) member also.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [addToAllSubPhases = true)] Optional: Add member to all sub phases. Default true.
     * @param {module:model/PhaseMemberModel} [phaseMemberModel] PhaseMemberModel.
     * @param {module:api/ProjectsWriteApi~phaseMembersPostPhaseMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhaseMemberModel}
     */
    phaseMembersPostPhaseMember(opts, callback) {
      opts = opts || {};
      let postBody = opts['phaseMemberModel'];

      let pathParams = {
      };
      let queryParams = {
        'addToAllSubPhases': opts['addToAllSubPhases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PhaseMemberModel;
      return this.apiClient.callApi(
        '/v1/phasemembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseMembersPostPhaseMembersFromBusinessUnitUsers operation.
     * @callback module:api/ProjectsWriteApi~phaseMembersPostPhaseMembersFromBusinessUnitUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseMemberModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds business unit users to phase members.
     * Users are always added as a root phase (project) member also.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [addToAllSubPhases = true)] Optional: Add member to all sub phases. Default true.
     * @param {module:model/PhaseMembersFromBusinessUnitUsersModel} [phaseMembersFromBusinessUnitUsersModel] PhaseMemberModel.
     * @param {module:api/ProjectsWriteApi~phaseMembersPostPhaseMembersFromBusinessUnitUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseMemberModel>}
     */
    phaseMembersPostPhaseMembersFromBusinessUnitUsers(opts, callback) {
      opts = opts || {};
      let postBody = opts['phaseMembersFromBusinessUnitUsersModel'];

      let pathParams = {
      };
      let queryParams = {
        'addToAllSubPhases': opts['addToAllSubPhases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PhaseMemberModel];
      return this.apiClient.callApi(
        '/v1/phasemembersfrombusinessunitusers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesPatchPhase operation.
     * @callback module:api/ProjectsWriteApi~phasesPatchPhaseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a phase or a part of it
     * @param {String} guid ID of the phase
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of PhaseInputModel
     * @param {module:api/ProjectsWriteApi~phasesPatchPhaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseOutputModel>}
     */
    phasesPatchPhase(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phasesPatchPhase");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PhaseOutputModel];
      return this.apiClient.callApi(
        '/v1/phases/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesPostPhase operation.
     * @callback module:api/ProjectsWriteApi~phasesPostPhaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhaseOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a phase
     * @param {Object} opts Optional parameters
     * @param {module:model/PhaseInputModel} [phaseInputModel] PhaseOutputModel
     * @param {module:api/ProjectsWriteApi~phasesPostPhaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhaseOutputModel}
     */
    phasesPostPhase(opts, callback) {
      opts = opts || {};
      let postBody = opts['phaseInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PhaseOutputModel;
      return this.apiClient.callApi(
        '/v1/phases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceListsPostCustomPricelist operation.
     * @callback module:api/ProjectsWriteApi~priceListsPostCustomPricelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomPriceListOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create custom price list for a project. If project already has a custom price list returns existing price list. Creates a new price list if project doesn't have a custom price list. Project can only have one custom price list. Note that project's price list will be changed to the custom price list created here and also existing prices are copied to the new price list.
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isVolumePricing = false)] Get the custom volume pricing price list or regular custom price list. Default is false.
     * @param {module:api/ProjectsWriteApi~priceListsPostCustomPricelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomPriceListOutputModel}
     */
    priceListsPostCustomPricelist(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling priceListsPostCustomPricelist");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'isVolumePricing': opts['isVolumePricing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomPriceListOutputModel;
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/pricelists/custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomValuesPatchProjectCustomValue operation.
     * @callback module:api/ProjectsWriteApi~projectCustomValuesPatchProjectCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCustomValueModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project custom value or a part of it.
     * @param {String} guid ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectCustomValueModel.
     * @param {module:api/ProjectsWriteApi~projectCustomValuesPatchProjectCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCustomValueModel>}
     */
    projectCustomValuesPatchProjectCustomValue(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomValuesPatchProjectCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectCustomValueModel];
      return this.apiClient.callApi(
        '/v1/projects/customvalues/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomValuesPostProjectCustomValue operation.
     * @callback module:api/ProjectsWriteApi~projectCustomValuesPostProjectCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCustomValueModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project custom value.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectCustomValueModel} [projectCustomValueModel] ProjectCustomValueModel.
     * @param {module:api/ProjectsWriteApi~projectCustomValuesPostProjectCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCustomValueModel>}
     */
    projectCustomValuesPostProjectCustomValue(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectCustomValueModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectCustomValueModel];
      return this.apiClient.callApi(
        '/v1/projects/customvalues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectForecastsPatchForecast operation.
     * @callback module:api/ProjectsWriteApi~projectForecastsPatchForecastCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectForecastOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an project forecast or a part of it
     * @param {String} guid ID of the project forecast
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectForecastInputModel
     * @param {module:api/ProjectsWriteApi~projectForecastsPatchForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectForecastOutputModel>}
     */
    projectForecastsPatchForecast(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectForecastsPatchForecast");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectForecastOutputModel];
      return this.apiClient.callApi(
        '/v1/projectforecasts/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectForecastsPostForecast operation.
     * @callback module:api/ProjectsWriteApi~projectForecastsPostForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectForecastOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project forecast
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectForecastInputModel} [projectForecastInputModel] ProjectForecastOutputInputModel
     * @param {module:api/ProjectsWriteApi~projectForecastsPostForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectForecastOutputModel}
     */
    projectForecastsPostForecast(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectForecastInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectForecastOutputModel;
      return this.apiClient.callApi(
        '/v1/projectforecasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsPatchProjectInvoiceSettings_0 operation.
     * @callback module:api/ProjectsWriteApi~projectInvoiceSettingsPatchProjectInvoiceSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInvoiceSettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) project invoice settings.
     * @param {String} guid ID of the project invoice settings.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectInvoiceSettingsInputModel.
     * @param {module:api/ProjectsWriteApi~projectInvoiceSettingsPatchProjectInvoiceSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectInvoiceSettingsOutputModel>}
     */
    projectInvoiceSettingsPatchProjectInvoiceSettings_0(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectInvoiceSettingsPatchProjectInvoiceSettings_0");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectInvoiceSettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsPostProjectInvoiceSettings_0 operation.
     * @callback module:api/ProjectsWriteApi~projectInvoiceSettingsPostProjectInvoiceSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInvoiceSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project invoice settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectInvoiceSettingsInputModel} [projectInvoiceSettingsInputModel] Project invoice settings.
     * @param {module:api/ProjectsWriteApi~projectInvoiceSettingsPostProjectInvoiceSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectInvoiceSettingsOutputModel}
     */
    projectInvoiceSettingsPostProjectInvoiceSettings_0(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectInvoiceSettingsInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectInvoiceSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProductsPostProjectProduct operation.
     * @callback module:api/ProjectsWriteApi~projectProductsPostProjectProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectProductOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a product to a project.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectProductInputModel} [projectProductInputModel] projectProductModel
     * @param {module:api/ProjectsWriteApi~projectProductsPostProjectProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectProductOutputModel}
     */
    projectProductsPostProjectProduct(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectProductInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectProductOutputModel;
      return this.apiClient.callApi(
        '/v1/projectproducts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkHourPricesPatchProjectWorkHourPrice operation.
     * @callback module:api/ProjectsWriteApi~projectWorkHourPricesPatchProjectWorkHourPriceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectWorkHourPriceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a work hour price or a part of it
     * @param {String} guid ID of the work hour price
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectWorkHourPriceInputModel
     * @param {module:api/ProjectsWriteApi~projectWorkHourPricesPatchProjectWorkHourPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectWorkHourPriceOutputModel>}
     */
    projectWorkHourPricesPatchProjectWorkHourPrice(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectWorkHourPricesPatchProjectWorkHourPrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectWorkHourPriceOutputModel];
      return this.apiClient.callApi(
        '/v1/projectworkhourprices/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkHourPricesPostProjectWorkHourPrice operation.
     * @callback module:api/ProjectsWriteApi~projectWorkHourPricesPostProjectWorkHourPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectWorkHourPriceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a work hour price
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectWorkHourPriceInputModel} [projectWorkHourPriceInputModel] ProjectWorkHourPriceInputModel
     * @param {module:api/ProjectsWriteApi~projectWorkHourPricesPostProjectWorkHourPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectWorkHourPriceOutputModel}
     */
    projectWorkHourPricesPostProjectWorkHourPrice(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectWorkHourPriceInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectWorkHourPriceOutputModel;
      return this.apiClient.callApi(
        '/v1/projectworkhourprices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkTypesPatchProjectWorktype operation.
     * @callback module:api/ProjectsWriteApi~projectWorkTypesPatchProjectWorktypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectWorkTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (patch) a project work type.
     * This currently can be used only to change the default work type in a project. The \"UseWorktypesFromSetting\" flag for the Project should be false (the project should not use the organization list of work types).
     * @param {String} guid ID of the project work type.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectWorkTypeModel.
     * @param {module:api/ProjectsWriteApi~projectWorkTypesPatchProjectWorktypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectWorkTypeModel>}
     */
    projectWorkTypesPatchProjectWorktype(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectWorkTypesPatchProjectWorktype");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectWorkTypeModel];
      return this.apiClient.callApi(
        '/v1/projectworktypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkTypesPostProjectWorktype operation.
     * @callback module:api/ProjectsWriteApi~projectWorkTypesPostProjectWorktypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectWorkTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a work type to a project.
     * The \"UseWorktypesFromSetting\" flag for the Project should be false (the project should not use the organization list of work types).
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectWorkTypeModel} [projectWorkTypeModel] ProjectWorkTypeModel.
     * @param {module:api/ProjectsWriteApi~projectWorkTypesPostProjectWorktypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectWorkTypeModel}
     */
    projectWorkTypesPostProjectWorktype(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectWorkTypeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectWorkTypeModel;
      return this.apiClient.callApi(
        '/v1/projectworktypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsPatchProject operation.
     * @callback module:api/ProjectsWriteApi~projectsPatchProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project or a part of it
     * To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
     * @param {String} guid ID of the project
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectInputModel
     * @param {module:api/ProjectsWriteApi~projectsPatchProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectOutputModel>}
     */
    projectsPatchProject(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectsPatchProject");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsPostProject operation.
     * @callback module:api/ProjectsWriteApi~projectsPostProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project
     * When creating a new project, the price list property will be ignored, as it is chosen by default.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectInputModelBase} [projectInputModelBase] ProjectInputModelBase
     * @param {module:api/ProjectsWriteApi~projectsPostProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectOutputModel}
     */
    projectsPostProject(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectInputModelBase'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectOutputModel;
      return this.apiClient.callApi(
        '/v1/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalFeesPatchProposalFee operation.
     * @callback module:api/ProjectsWriteApi~proposalFeesPatchProposalFeeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalFeeRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a proposal fee row or a part of it
     * @param {String} guid ID of the proposal fee row
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProposalFeeModel
     * @param {module:api/ProjectsWriteApi~proposalFeesPatchProposalFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalFeeRowOutputModel>}
     */
    proposalFeesPatchProposalFee(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalFeesPatchProposalFee");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProposalFeeRowOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalfeerows/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalFeesPostProposalFee operation.
     * @callback module:api/ProjectsWriteApi~proposalFeesPostProposalFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalFeeRowOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a proposal fee row.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProposalFeeRowInputModel} [proposalFeeRowInputModel] ProposalFeeModel
     * @param {module:api/ProjectsWriteApi~proposalFeesPostProposalFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalFeeRowOutputModel}
     */
    proposalFeesPostProposalFee(opts, callback) {
      opts = opts || {};
      let postBody = opts['proposalFeeRowInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProposalFeeRowOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalfeerows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSettingsPatchProposalSettings operation.
     * @callback module:api/ProjectsWriteApi~proposalSettingsPatchProposalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalSettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) proposal settings
     * @param {String} guid Guid of the Proposal
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProposalSettingsInputModel
     * @param {module:api/ProjectsWriteApi~proposalSettingsPatchProposalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalSettingsOutputModel>}
     */
    proposalSettingsPatchProposalSettings(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalSettingsPatchProposalSettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProposalSettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/proposals/{guid}/proposalsettings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSubtotalsPatchProposalSubtotal operation.
     * @callback module:api/ProjectsWriteApi~proposalSubtotalsPatchProposalSubtotalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalSubtotalOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a Proposal subtotal or a part of it
     * It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
     * @param {String} guid ID of the Proposal subtotal
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProposalSubtotalModel
     * @param {module:api/ProjectsWriteApi~proposalSubtotalsPatchProposalSubtotalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalSubtotalOutputModel>}
     */
    proposalSubtotalsPatchProposalSubtotal(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalSubtotalsPatchProposalSubtotal");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProposalSubtotalOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalsubtotals/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSubtotalsPostProposalSubtotal operation.
     * @callback module:api/ProjectsWriteApi~proposalSubtotalsPostProposalSubtotalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalSubtotalOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a proposal subtotal
     * @param {Object} opts Optional parameters
     * @param {module:model/ProposalSubtotalInputModel} [proposalSubtotalInputModel] ProposalSubtotalModel
     * @param {module:api/ProjectsWriteApi~proposalSubtotalsPostProposalSubtotalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalSubtotalOutputModel}
     */
    proposalSubtotalsPostProposalSubtotal(opts, callback) {
      opts = opts || {};
      let postBody = opts['proposalSubtotalInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProposalSubtotalOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalsubtotals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalWorkhoursPatchProposalWorkhour operation.
     * @callback module:api/ProjectsWriteApi~proposalWorkhoursPatchProposalWorkhourCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalWorkhourRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a proposal work row or a part of it.
     * @param {String} guid ID of the proposal work row.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProposalWorkhourModel.
     * @param {module:api/ProjectsWriteApi~proposalWorkhoursPatchProposalWorkhourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalWorkhourRowOutputModel>}
     */
    proposalWorkhoursPatchProposalWorkhour(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalWorkhoursPatchProposalWorkhour");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProposalWorkhourRowOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalworkrows/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalWorkhoursPostProposalWorkhour operation.
     * @callback module:api/ProjectsWriteApi~proposalWorkhoursPostProposalWorkhourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalWorkhourRowOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a proposal work row.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProposalWorkhourRowInputModel} [proposalWorkhourRowInputModel] ProposalWorkhourModel
     * @param {module:api/ProjectsWriteApi~proposalWorkhoursPostProposalWorkhourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalWorkhourRowOutputModel}
     */
    proposalWorkhoursPostProposalWorkhour(opts, callback) {
      opts = opts || {};
      let postBody = opts['proposalWorkhourRowInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProposalWorkhourRowOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalworkrows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalsPatchProposal operation.
     * @callback module:api/ProjectsWriteApi~proposalsPatchProposalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a Proposal or a part of it
     * @param {String} guid Guid of the Proposal
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProposalInputModel
     * @param {module:api/ProjectsWriteApi~proposalsPatchProposalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalOutputModel>}
     */
    proposalsPatchProposal(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalsPatchProposal");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProposalOutputModel];
      return this.apiClient.callApi(
        '/v1/proposals/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalsPostProposal operation.
     * @callback module:api/ProjectsWriteApi~proposalsPostProposalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a proposal.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProposalInputModel} [proposalInputModel] ProposalInputModel
     * @param {module:api/ProjectsWriteApi~proposalsPostProposalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalOutputModel}
     */
    proposalsPostProposal(opts, callback) {
      opts = opts || {};
      let postBody = opts['proposalInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProposalOutputModel;
      return this.apiClient.callApi(
        '/v1/proposals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesPatchProjectSalesNote operation.
     * @callback module:api/ProjectsWriteApi~salesNotesPatchProjectSalesNoteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectSalesNoteOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project sales note or a part of it.
     * @param {String} guid ID of the project sales note.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of project sales note model.
     * @param {module:api/ProjectsWriteApi~salesNotesPatchProjectSalesNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectSalesNoteOutputModel>}
     */
    salesNotesPatchProjectSalesNote(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesNotesPatchProjectSalesNote");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectSalesNoteOutputModel];
      return this.apiClient.callApi(
        '/v1/projectsalesnotes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesPostProjectSalesNotes operation.
     * @callback module:api/ProjectsWriteApi~salesNotesPostProjectSalesNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSalesNoteOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project sales note.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectSalesNoteInputModel} [projectSalesNoteInputModel] SalesNoteOutputModel
     * @param {module:api/ProjectsWriteApi~salesNotesPostProjectSalesNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSalesNoteOutputModel}
     */
    salesNotesPostProjectSalesNotes(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectSalesNoteInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectSalesNoteOutputModel;
      return this.apiClient.callApi(
        '/v1/projectsalesnotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
