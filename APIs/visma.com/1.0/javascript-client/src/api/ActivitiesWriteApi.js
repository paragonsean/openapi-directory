/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityModel from '../model/ActivityModel';
import ActivityParticipantModel from '../model/ActivityParticipantModel';
import ExceptionModel from '../model/ExceptionModel';
import PatchOperation from '../model/PatchOperation';

/**
* ActivitiesWrite service.
* @module api/ActivitiesWriteApi
* @version 1.0
*/
export default class ActivitiesWriteApi {

    /**
    * Constructs a new ActivitiesWriteApi. 
    * @alias module:api/ActivitiesWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activitiesPatchActivity operation.
     * @callback module:api/ActivitiesWriteApi~activitiesPatchActivityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a activity or a part of it
     * @param {String} guid ID of the activity. Can also be comma separate list of IDs to patch multiple activities with one call. When multiple IDs are given, returns model which has list of succeeded activities and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ActivityModel
     * @param {module:api/ActivitiesWriteApi~activitiesPatchActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityModel>}
     */
    activitiesPatchActivity(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activitiesPatchActivity");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ActivityModel];
      return this.apiClient.callApi(
        '/v1/activities/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesPostActivity operation.
     * @callback module:api/ActivitiesWriteApi~activitiesPostActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityModel} [activityModel] ActivityModel
     * @param {module:api/ActivitiesWriteApi~activitiesPostActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityModel}
     */
    activitiesPostActivity(opts, callback) {
      opts = opts || {};
      let postBody = opts['activityModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityModel;
      return this.apiClient.callApi(
        '/v1/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityParticipantsPatchActivityParticipants operation.
     * @callback module:api/ActivitiesWriteApi~activityParticipantsPatchActivityParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityParticipantModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a activity participant or a part of it
     * Only IsConfirmed property can be updated.
     * @param {String} guid ID of the activity participant
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ActivityParticipantModel
     * @param {module:api/ActivitiesWriteApi~activityParticipantsPatchActivityParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityParticipantModel>}
     */
    activityParticipantsPatchActivityParticipants(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activityParticipantsPatchActivityParticipants");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ActivityParticipantModel];
      return this.apiClient.callApi(
        '/v1/activityparticipants/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityParticipantsPostActivityParticipant operation.
     * @callback module:api/ActivitiesWriteApi~activityParticipantsPostActivityParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityParticipantModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an activity participant
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityParticipantModel} [activityParticipantModel] ActivityParticipantModel
     * @param {module:api/ActivitiesWriteApi~activityParticipantsPostActivityParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityParticipantModel}
     */
    activityParticipantsPostActivityParticipant(opts, callback) {
      opts = opts || {};
      let postBody = opts['activityParticipantModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityParticipantModel;
      return this.apiClient.callApi(
        '/v1/activityparticipants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
