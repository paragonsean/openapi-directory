/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import FlextimeAdjustmentInputModel from '../model/FlextimeAdjustmentInputModel';
import FlextimeAdjustmentOutputModel from '../model/FlextimeAdjustmentOutputModel';
import PatchOperation from '../model/PatchOperation';
import UserCustomValueInputModel from '../model/UserCustomValueInputModel';
import UserCustomValueOutputModel from '../model/UserCustomValueOutputModel';
import UserInputModel from '../model/UserInputModel';
import UserKeywordModel from '../model/UserKeywordModel';
import UserOutputModel from '../model/UserOutputModel';
import WorkContractInputModel from '../model/WorkContractInputModel';
import WorkContractOutputModel from '../model/WorkContractOutputModel';
import WorkdayModel from '../model/WorkdayModel';

/**
* UsersWrite service.
* @module api/UsersWriteApi
* @version 1.0
*/
export default class UsersWriteApi {

    /**
    * Constructs a new UsersWriteApi. 
    * @alias module:api/UsersWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the flextimeAdjustmentsDeleteFlextimeAdjustment operation.
     * @callback module:api/UsersWriteApi~flextimeAdjustmentsDeleteFlextimeAdjustmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an flextime adjustment.
     * Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can't be found.
     * @param {String} guid ID for the flextime adjustment to delete.
     * @param {module:api/UsersWriteApi~flextimeAdjustmentsDeleteFlextimeAdjustmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flextimeAdjustmentsDeleteFlextimeAdjustment(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling flextimeAdjustmentsDeleteFlextimeAdjustment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/flextimeadjustments/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flextimeAdjustmentsPatchFlextimeAdjustment operation.
     * @callback module:api/UsersWriteApi~flextimeAdjustmentsPatchFlextimeAdjustmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlextimeAdjustmentOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an Flextime Adjustment or a part of it.
     * @param {String} guid ID of the Flextime Adjustment.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of FlextimeAdjustmentInputModel.
     * @param {module:api/UsersWriteApi~flextimeAdjustmentsPatchFlextimeAdjustmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlextimeAdjustmentOutputModel>}
     */
    flextimeAdjustmentsPatchFlextimeAdjustment(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling flextimeAdjustmentsPatchFlextimeAdjustment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [FlextimeAdjustmentOutputModel];
      return this.apiClient.callApi(
        '/v1/flextimeadjustments/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flextimeAdjustmentsPostFlextimeAdjustment operation.
     * @callback module:api/UsersWriteApi~flextimeAdjustmentsPostFlextimeAdjustmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlextimeAdjustmentOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a flextime adjustment.
     * @param {Object} opts Optional parameters
     * @param {module:model/FlextimeAdjustmentInputModel} [flextimeAdjustmentInputModel] FlextimeAdjustmentInputModel.
     * @param {module:api/UsersWriteApi~flextimeAdjustmentsPostFlextimeAdjustmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlextimeAdjustmentOutputModel}
     */
    flextimeAdjustmentsPostFlextimeAdjustment(opts, callback) {
      opts = opts || {};
      let postBody = opts['flextimeAdjustmentInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlextimeAdjustmentOutputModel;
      return this.apiClient.callApi(
        '/v1/flextimeadjustments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsLinkKeywordToUser operation.
     * @callback module:api/UsersWriteApi~keywordsLinkKeywordToUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserKeywordModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link existing keyword to user
     * @param {String} userGuid 
     * @param {String} guid 
     * @param {module:api/UsersWriteApi~keywordsLinkKeywordToUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserKeywordModel}
     */
    keywordsLinkKeywordToUser(userGuid, guid, callback) {
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling keywordsLinkKeywordToUser");
      }
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsLinkKeywordToUser");
      }

      let pathParams = {
        'userGuid': userGuid,
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserKeywordModel;
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/keywords/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomValuesPatchUserCustomValue operation.
     * @callback module:api/UsersWriteApi~userCustomValuesPatchUserCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomValueOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a user custom value or a part of it.
     * @param {String} guid ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of UserCustomValueModel.
     * @param {module:api/UsersWriteApi~userCustomValuesPatchUserCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomValueOutputModel>}
     */
    userCustomValuesPatchUserCustomValue(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomValuesPatchUserCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UserCustomValueOutputModel];
      return this.apiClient.callApi(
        '/v1/users/customvalues/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomValuesPostUserCustomValue operation.
     * @callback module:api/UsersWriteApi~userCustomValuesPostUserCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomValueOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a user custom value.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCustomValueInputModel} [userCustomValueInputModel] UserCustomValueModel.
     * @param {module:api/UsersWriteApi~userCustomValuesPostUserCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomValueOutputModel>}
     */
    userCustomValuesPostUserCustomValue(opts, callback) {
      opts = opts || {};
      let postBody = opts['userCustomValueInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UserCustomValueOutputModel];
      return this.apiClient.callApi(
        '/v1/users/customvalues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPatchUser operation.
     * @callback module:api/UsersWriteApi~usersPatchUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an user or a part of it.
     * @param {String} guid ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of UserModel.
     * @param {module:api/UsersWriteApi~usersPatchUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserOutputModel>}
     */
    usersPatchUser(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling usersPatchUser");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UserOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPostUser operation.
     * @callback module:api/UsersWriteApi~usersPostUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert an user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInputModel} [userInputModel] UserModel.
     * @param {module:api/UsersWriteApi~usersPostUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOutputModel}
     */
    usersPostUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['userInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserOutputModel;
      return this.apiClient.callApi(
        '/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsPatchWorkContract_0 operation.
     * @callback module:api/UsersWriteApi~workContractsPatchWorkContract_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkContractOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a work contract or a part of it.
     * @param {String} guid ID of the work contract.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of WorkContractOutputModel.
     * @param {module:api/UsersWriteApi~workContractsPatchWorkContract_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkContractOutputModel>}
     */
    workContractsPatchWorkContract_0(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workContractsPatchWorkContract_0");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkContractOutputModel];
      return this.apiClient.callApi(
        '/v1/workcontracts/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsPostWorkContract_0 operation.
     * @callback module:api/UsersWriteApi~workContractsPostWorkContract_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkContractOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a work contract.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [resetFlextime = true)] Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true = reset flextime.
     * @param {module:model/WorkContractInputModel} [workContractInputModel] WorkContractOutputModel.
     * @param {module:api/UsersWriteApi~workContractsPostWorkContract_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkContractOutputModel}
     */
    workContractsPostWorkContract_0(opts, callback) {
      opts = opts || {};
      let postBody = opts['workContractInputModel'];

      let pathParams = {
      };
      let queryParams = {
        'resetFlextime': opts['resetFlextime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkContractOutputModel;
      return this.apiClient.callApi(
        '/v1/workcontracts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workdaysPatchWorkDay operation.
     * @callback module:api/UsersWriteApi~workdaysPatchWorkDayCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkdayModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a workday or a part of it
     * @param {String} userGuid ID of the user.
     * @param {Date} date Date of the workday..
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of WorkdayModel
     * @param {module:api/UsersWriteApi~workdaysPatchWorkDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkdayModel>}
     */
    workdaysPatchWorkDay(userGuid, date, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling workdaysPatchWorkDay");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling workdaysPatchWorkDay");
      }

      let pathParams = {
        'userGuid': userGuid,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkdayModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/workdays/{date}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
