/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityTypeModel from '../model/ActivityTypeModel';
import BusinessUnitModel from '../model/BusinessUnitModel';
import CommunicationTypeModel from '../model/CommunicationTypeModel';
import ContactRoleModel from '../model/ContactRoleModel';
import CostAccountModel from '../model/CostAccountModel';
import CostCenterModel from '../model/CostCenterModel';
import CurrencyOutputModel from '../model/CurrencyOutputModel';
import CustomPropertyModel from '../model/CustomPropertyModel';
import CustomerCustomPropertySelectionItemInputModel from '../model/CustomerCustomPropertySelectionItemInputModel';
import CustomerCustomPropertySelectionItemOutputModel from '../model/CustomerCustomPropertySelectionItemOutputModel';
import ExceptionModel from '../model/ExceptionModel';
import IndustryModel from '../model/IndustryModel';
import InvoiceStatusModel from '../model/InvoiceStatusModel';
import KeywordModel from '../model/KeywordModel';
import LeadSourceModel from '../model/LeadSourceModel';
import MarketSegmentModel from '../model/MarketSegmentModel';
import OvertimeModel from '../model/OvertimeModel';
import PatchOperation from '../model/PatchOperation';
import PhaseStatusTypeModel from '../model/PhaseStatusTypeModel';
import ProductCategoryModel from '../model/ProductCategoryModel';
import ProductCountrySettingsModel from '../model/ProductCountrySettingsModel';
import ProductInputModel from '../model/ProductInputModel';
import ProductOutputModel from '../model/ProductOutputModel';
import ProjectBillingCustomerModel2 from '../model/ProjectBillingCustomerModel2';
import ProjectCustomPropertySelectionItemInputModel from '../model/ProjectCustomPropertySelectionItemInputModel';
import ProjectCustomPropertySelectionItemOutputModel from '../model/ProjectCustomPropertySelectionItemOutputModel';
import ProjectMemberCostExceptionInputModel from '../model/ProjectMemberCostExceptionInputModel';
import ProjectMemberCostExceptionOutputModel from '../model/ProjectMemberCostExceptionOutputModel';
import ProjectStatusTypeModel from '../model/ProjectStatusTypeModel';
import ProjectTaskStatusModel from '../model/ProjectTaskStatusModel';
import ProposalStatusInputModel from '../model/ProposalStatusInputModel';
import ProposalStatusOutputModel from '../model/ProposalStatusOutputModel';
import RoleInputModel from '../model/RoleInputModel';
import RoleOutputModel from '../model/RoleOutputModel';
import SalesAccountModel from '../model/SalesAccountModel';
import SalesStatusTypeInputModel from '../model/SalesStatusTypeInputModel';
import SalesStatusTypeOutputModel from '../model/SalesStatusTypeOutputModel';
import TimeEntryTypeModel from '../model/TimeEntryTypeModel';
import TravelExpenseTypeCountrySettingsModel from '../model/TravelExpenseTypeCountrySettingsModel';
import TravelExpenseTypeInputModel from '../model/TravelExpenseTypeInputModel';
import TravelExpenseTypeOutputModel from '../model/TravelExpenseTypeOutputModel';
import TravelReimbursementStatusModel from '../model/TravelReimbursementStatusModel';
import UserCustomPropertyInputModel from '../model/UserCustomPropertyInputModel';
import UserCustomPropertyOutputModel from '../model/UserCustomPropertyOutputModel';
import UserCustomPropertySelectionItemInputModel from '../model/UserCustomPropertySelectionItemInputModel';
import UserCustomPropertySelectionItemOutputModel from '../model/UserCustomPropertySelectionItemOutputModel';
import VatRateInputModel from '../model/VatRateInputModel';
import VatRateOutputModel from '../model/VatRateOutputModel';
import WorkContractInputModel from '../model/WorkContractInputModel';
import WorkContractOutputModel from '../model/WorkContractOutputModel';
import WorkTypeInputModel from '../model/WorkTypeInputModel';
import WorkTypeOutputModel from '../model/WorkTypeOutputModel';

/**
* SettingsWrite service.
* @module api/SettingsWriteApi
* @version 1.0
*/
export default class SettingsWriteApi {

    /**
    * Constructs a new SettingsWriteApi. 
    * @alias module:api/SettingsWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activityTypesPatchActivityType operation.
     * @callback module:api/SettingsWriteApi~activityTypesPatchActivityTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an Activity Type or a part of it
     * @param {String} guid ID of the Activity Type
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ActivityTypeModel
     * @param {module:api/SettingsWriteApi~activityTypesPatchActivityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityTypeModel>}
     */
    activityTypesPatchActivityType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activityTypesPatchActivityType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ActivityTypeModel];
      return this.apiClient.callApi(
        '/v1/activitytypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityTypesPostActivityType operation.
     * @callback module:api/SettingsWriteApi~activityTypesPostActivityTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert an Activity type.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityTypeModel} [activityTypeModel] Activity type
     * @param {module:api/SettingsWriteApi~activityTypesPostActivityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityTypeModel}
     */
    activityTypesPostActivityType(opts, callback) {
      opts = opts || {};
      let postBody = opts['activityTypeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityTypeModel;
      return this.apiClient.callApi(
        '/v1/activitytypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the businessUnitsPatchBusinessUnit operation.
     * @callback module:api/SettingsWriteApi~businessUnitsPatchBusinessUnitCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessUnitModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an businessUnit or a part of it.
     * @param {String} guid ID of the businessUnit.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of BusinessUnitModel.
     * @param {module:api/SettingsWriteApi~businessUnitsPatchBusinessUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessUnitModel>}
     */
    businessUnitsPatchBusinessUnit(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling businessUnitsPatchBusinessUnit");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BusinessUnitModel];
      return this.apiClient.callApi(
        '/v1/businessunits/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationTypesPatchCommunicationType operation.
     * @callback module:api/SettingsWriteApi~communicationTypesPatchCommunicationTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommunicationTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a communication type or a part of it.
     * @param {String} guid ID of the communication type.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of CommunicationTypeModel.
     * @param {module:api/SettingsWriteApi~communicationTypesPatchCommunicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommunicationTypeModel>}
     */
    communicationTypesPatchCommunicationType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling communicationTypesPatchCommunicationType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CommunicationTypeModel];
      return this.apiClient.callApi(
        '/v1/communicationtypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationTypesPostCommunicationType operation.
     * @callback module:api/SettingsWriteApi~communicationTypesPostCommunicationTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunicationTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a communication type.
     * @param {Object} opts Optional parameters
     * @param {module:model/CommunicationTypeModel} [communicationTypeModel] CommunicationTypeModel.
     * @param {module:api/SettingsWriteApi~communicationTypesPostCommunicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunicationTypeModel}
     */
    communicationTypesPostCommunicationType(opts, callback) {
      opts = opts || {};
      let postBody = opts['communicationTypeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommunicationTypeModel;
      return this.apiClient.callApi(
        '/v1/communicationtypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactRolesPatchContactRole operation.
     * @callback module:api/SettingsWriteApi~contactRolesPatchContactRoleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactRoleModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a contact role or a part of it.
     * @param {String} guid ID of the contact role.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ContactRoleModel.
     * @param {module:api/SettingsWriteApi~contactRolesPatchContactRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactRoleModel>}
     */
    contactRolesPatchContactRole(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactRolesPatchContactRole");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ContactRoleModel];
      return this.apiClient.callApi(
        '/v1/contactroles/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactRolesPostContactRole operation.
     * @callback module:api/SettingsWriteApi~contactRolesPostContactRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRoleModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a contact role.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactRoleModel} [contactRoleModel] ContactRoleModel.
     * @param {module:api/SettingsWriteApi~contactRolesPostContactRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRoleModel}
     */
    contactRolesPostContactRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['contactRoleModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactRoleModel;
      return this.apiClient.callApi(
        '/v1/contactroles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costAccountsPatchCostAccount operation.
     * @callback module:api/SettingsWriteApi~costAccountsPatchCostAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CostAccountModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a cost account or a part of it.
     * @param {String} guid ID of the cost account.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of CostAccountModel.
     * @param {module:api/SettingsWriteApi~costAccountsPatchCostAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CostAccountModel>}
     */
    costAccountsPatchCostAccount(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling costAccountsPatchCostAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CostAccountModel];
      return this.apiClient.callApi(
        '/v1/costaccounts/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costAccountsPostCostAccount operation.
     * @callback module:api/SettingsWriteApi~costAccountsPostCostAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostAccountModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a cost account.
     * @param {Object} opts Optional parameters
     * @param {module:model/CostAccountModel} [costAccountModel] CostAccountModel.
     * @param {module:api/SettingsWriteApi~costAccountsPostCostAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostAccountModel}
     */
    costAccountsPostCostAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['costAccountModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CostAccountModel;
      return this.apiClient.callApi(
        '/v1/costaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costCentersPatchCostCenter operation.
     * @callback module:api/SettingsWriteApi~costCentersPatchCostCenterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CostCenterModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a cost center or a part of it.
     * @param {String} guid ID of the cost center.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of CostCenterModel.
     * @param {module:api/SettingsWriteApi~costCentersPatchCostCenterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CostCenterModel>}
     */
    costCentersPatchCostCenter(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling costCentersPatchCostCenter");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CostCenterModel];
      return this.apiClient.callApi(
        '/v1/costcenters/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costCentersPostCostCenter operation.
     * @callback module:api/SettingsWriteApi~costCentersPostCostCenterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostCenterModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a cost center.
     * @param {Object} opts Optional parameters
     * @param {module:model/CostCenterModel} [costCenterModel] CostCenterModel.
     * @param {module:api/SettingsWriteApi~costCentersPostCostCenterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostCenterModel}
     */
    costCentersPostCostCenter(opts, callback) {
      opts = opts || {};
      let postBody = opts['costCenterModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CostCenterModel;
      return this.apiClient.callApi(
        '/v1/costcenters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesPatchCurrency operation.
     * @callback module:api/SettingsWriteApi~currenciesPatchCurrencyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurrencyOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an currency or a part of it.
     * @param {String} guid ID of the currency.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of CurrencyModel.
     * @param {module:api/SettingsWriteApi~currenciesPatchCurrencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurrencyOutputModel>}
     */
    currenciesPatchCurrency(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling currenciesPatchCurrency");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CurrencyOutputModel];
      return this.apiClient.callApi(
        '/v1/currencies/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertiesPatchCustomerCustomProperty operation.
     * @callback module:api/SettingsWriteApi~customerCustomPropertiesPatchCustomerCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPropertyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a customer custom property or a part of it.
     * @param {String} guid ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of CustomerCustomPropertyModel.
     * @param {module:api/SettingsWriteApi~customerCustomPropertiesPatchCustomerCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPropertyModel>}
     */
    customerCustomPropertiesPatchCustomerCustomProperty(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomPropertiesPatchCustomerCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomPropertyModel];
      return this.apiClient.callApi(
        '/v1/customers/customproperties/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertiesPostCustomerCustomProperty operation.
     * @callback module:api/SettingsWriteApi~customerCustomPropertiesPostCustomerCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPropertyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a customer custom property.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomPropertyModel} [customPropertyModel] CustomerCustomPropertyModel.
     * @param {module:api/SettingsWriteApi~customerCustomPropertiesPostCustomerCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPropertyModel>}
     */
    customerCustomPropertiesPostCustomerCustomProperty(opts, callback) {
      opts = opts || {};
      let postBody = opts['customPropertyModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomPropertyModel];
      return this.apiClient.callApi(
        '/v1/customers/customproperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem operation.
     * @callback module:api/SettingsWriteApi~customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCustomPropertySelectionItemOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a customer custom property selection item or a part of it.
     * @param {String} guid ID of the customer custom property selection item.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of CustomerCustomPropertySelectionItemInputModel.
     * @param {module:api/SettingsWriteApi~customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCustomPropertySelectionItemOutputModel>}
     */
    customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomerCustomPropertySelectionItemOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/customproperties/customercustompropertyselectionitems/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem operation.
     * @callback module:api/SettingsWriteApi~customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerCustomPropertySelectionItemOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a customer custom property selection item.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerCustomPropertySelectionItemInputModel} [customerCustomPropertySelectionItemInputModel] CustomPropertySelectionItemInputModel.
     * @param {module:api/SettingsWriteApi~customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerCustomPropertySelectionItemOutputModel}
     */
    customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['customerCustomPropertySelectionItemInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerCustomPropertySelectionItemOutputModel;
      return this.apiClient.callApi(
        '/v1/customers/customproperties/customercustompropertyselectionitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the industriesPatchIndustry operation.
     * @callback module:api/SettingsWriteApi~industriesPatchIndustryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IndustryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an industry or a part of it.
     * @param {String} guid ID of the industry.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of IndustryModel.
     * @param {module:api/SettingsWriteApi~industriesPatchIndustryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IndustryModel>}
     */
    industriesPatchIndustry(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling industriesPatchIndustry");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IndustryModel];
      return this.apiClient.callApi(
        '/v1/industries/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the industriesPostIndustry operation.
     * @callback module:api/SettingsWriteApi~industriesPostIndustryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndustryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert an industry.
     * @param {Object} opts Optional parameters
     * @param {module:model/IndustryModel} [industryModel] IndustryModel.
     * @param {module:api/SettingsWriteApi~industriesPostIndustryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndustryModel}
     */
    industriesPostIndustry(opts, callback) {
      opts = opts || {};
      let postBody = opts['industryModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IndustryModel;
      return this.apiClient.callApi(
        '/v1/industries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceStatusesPatchInvoiceStatus operation.
     * @callback module:api/SettingsWriteApi~invoiceStatusesPatchInvoiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an Invoice status or a part of it.
     * @param {String} guid ID of the Invoice status.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of InvoiceStatusModel.
     * @param {module:api/SettingsWriteApi~invoiceStatusesPatchInvoiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceStatusModel>}
     */
    invoiceStatusesPatchInvoiceStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceStatusesPatchInvoiceStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InvoiceStatusModel];
      return this.apiClient.callApi(
        '/v1/invoicestatuses/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceStatusesPostInvoiceStatus operation.
     * @callback module:api/SettingsWriteApi~invoiceStatusesPostInvoiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceStatusModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a invoice status.
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceStatusModel} [invoiceStatusModel] InvoiceStatusModel.
     * @param {module:api/SettingsWriteApi~invoiceStatusesPostInvoiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceStatusModel}
     */
    invoiceStatusesPostInvoiceStatus(opts, callback) {
      opts = opts || {};
      let postBody = opts['invoiceStatusModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceStatusModel;
      return this.apiClient.callApi(
        '/v1/invoicestatuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsPatchKeyword operation.
     * @callback module:api/SettingsWriteApi~keywordsPatchKeywordCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KeywordModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a keyword or a part of it.
     * @param {String} guid ID of the keyword.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document.
     * @param {module:api/SettingsWriteApi~keywordsPatchKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KeywordModel>}
     */
    keywordsPatchKeyword(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsPatchKeyword");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [KeywordModel];
      return this.apiClient.callApi(
        '/v1/keywords/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsPostKeyword operation.
     * @callback module:api/SettingsWriteApi~keywordsPostKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeywordModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a keyword.
     * @param {Object} opts Optional parameters
     * @param {module:model/KeywordModel} [keywordModel] KeywordModel.
     * @param {module:api/SettingsWriteApi~keywordsPostKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeywordModel}
     */
    keywordsPostKeyword(opts, callback) {
      opts = opts || {};
      let postBody = opts['keywordModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeywordModel;
      return this.apiClient.callApi(
        '/v1/keywords', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leadSourcesPatchLeadSource operation.
     * @callback module:api/SettingsWriteApi~leadSourcesPatchLeadSourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LeadSourceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an lead source or a part of it.
     * @param {String} guid ID of the lead source.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of LeadSourceModel.
     * @param {module:api/SettingsWriteApi~leadSourcesPatchLeadSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LeadSourceModel>}
     */
    leadSourcesPatchLeadSource(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling leadSourcesPatchLeadSource");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [LeadSourceModel];
      return this.apiClient.callApi(
        '/v1/leadsources/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leadSourcesPostLeadSource operation.
     * @callback module:api/SettingsWriteApi~leadSourcesPostLeadSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeadSourceModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a lead source.
     * @param {Object} opts Optional parameters
     * @param {module:model/LeadSourceModel} [leadSourceModel] LeadSourceModel.
     * @param {module:api/SettingsWriteApi~leadSourcesPostLeadSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeadSourceModel}
     */
    leadSourcesPostLeadSource(opts, callback) {
      opts = opts || {};
      let postBody = opts['leadSourceModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSourceModel;
      return this.apiClient.callApi(
        '/v1/leadsources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketSegmentsPatchMarketSegment operation.
     * @callback module:api/SettingsWriteApi~marketSegmentsPatchMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MarketSegmentModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an Market Segment or a part of it.
     * @param {String} guid ID of the Market Segment.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of MarketSegmentModel.
     * @param {module:api/SettingsWriteApi~marketSegmentsPatchMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MarketSegmentModel>}
     */
    marketSegmentsPatchMarketSegment(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling marketSegmentsPatchMarketSegment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [MarketSegmentModel];
      return this.apiClient.callApi(
        '/v1/marketsegments/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketSegmentsPostMarketSegment operation.
     * @callback module:api/SettingsWriteApi~marketSegmentsPostMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketSegmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a market segment.
     * @param {Object} opts Optional parameters
     * @param {module:model/MarketSegmentModel} [marketSegmentModel] MarketSegmentModel.
     * @param {module:api/SettingsWriteApi~marketSegmentsPostMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketSegmentModel}
     */
    marketSegmentsPostMarketSegment(opts, callback) {
      opts = opts || {};
      let postBody = opts['marketSegmentModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MarketSegmentModel;
      return this.apiClient.callApi(
        '/v1/marketsegments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimesPatchOvertime operation.
     * @callback module:api/SettingsWriteApi~overtimesPatchOvertimeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OvertimeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an overtime or a part of it.
     * @param {String} guid ID of the overtime.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of OvertimeModel.
     * @param {module:api/SettingsWriteApi~overtimesPatchOvertimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OvertimeModel>}
     */
    overtimesPatchOvertime(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling overtimesPatchOvertime");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OvertimeModel];
      return this.apiClient.callApi(
        '/v1/overtimes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimesPostOvertime operation.
     * @callback module:api/SettingsWriteApi~overtimesPostOvertimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OvertimeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert an overtime.
     * @param {Object} opts Optional parameters
     * @param {module:model/OvertimeModel} [overtimeModel] OvertimeModel.
     * @param {module:api/SettingsWriteApi~overtimesPostOvertimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OvertimeModel}
     */
    overtimesPostOvertime(opts, callback) {
      opts = opts || {};
      let postBody = opts['overtimeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OvertimeModel;
      return this.apiClient.callApi(
        '/v1/overtimes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseStatusTypesPatchPhaseStatusType operation.
     * @callback module:api/SettingsWriteApi~phaseStatusTypesPatchPhaseStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseStatusTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a phase status type or a part of it
     * @param {String} guid ID of the phase status type
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of TaskStatusTypeModel
     * @param {module:api/SettingsWriteApi~phaseStatusTypesPatchPhaseStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseStatusTypeModel>}
     */
    phaseStatusTypesPatchPhaseStatusType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phaseStatusTypesPatchPhaseStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PhaseStatusTypeModel];
      return this.apiClient.callApi(
        '/v1/phasestatustypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseStatusTypesPostPhaseStatusType operation.
     * @callback module:api/SettingsWriteApi~phaseStatusTypesPostPhaseStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhaseStatusTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a phase status type
     * @param {Object} opts Optional parameters
     * @param {module:model/PhaseStatusTypeModel} [phaseStatusTypeModel] PhaseStatusTypeModel
     * @param {module:api/SettingsWriteApi~phaseStatusTypesPostPhaseStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhaseStatusTypeModel}
     */
    phaseStatusTypesPostPhaseStatusType(opts, callback) {
      opts = opts || {};
      let postBody = opts['phaseStatusTypeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PhaseStatusTypeModel;
      return this.apiClient.callApi(
        '/v1/phasestatustypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCategoriesPatchProductCategory operation.
     * @callback module:api/SettingsWriteApi~productCategoriesPatchProductCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductCategoryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a product category or a part of it.
     * @param {String} guid ID of the product category.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProductCategoryModel.
     * @param {module:api/SettingsWriteApi~productCategoriesPatchProductCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductCategoryModel>}
     */
    productCategoriesPatchProductCategory(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productCategoriesPatchProductCategory");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProductCategoryModel];
      return this.apiClient.callApi(
        '/v1/productcategories/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCategoriesPostProductCategory operation.
     * @callback module:api/SettingsWriteApi~productCategoriesPostProductCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCategoryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a product category.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductCategoryModel} [productCategoryModel] ProductCategoryModel.
     * @param {module:api/SettingsWriteApi~productCategoriesPostProductCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCategoryModel}
     */
    productCategoriesPostProductCategory(opts, callback) {
      opts = opts || {};
      let postBody = opts['productCategoryModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCategoryModel;
      return this.apiClient.callApi(
        '/v1/productcategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCountrySettingsPatchProductCountrySettings operation.
     * @callback module:api/SettingsWriteApi~productCountrySettingsPatchProductCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductCountrySettingsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a product country setting
     * @param {String} guid ID of the product country setting
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProductCountrySettingsModel
     * @param {module:api/SettingsWriteApi~productCountrySettingsPatchProductCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductCountrySettingsModel>}
     */
    productCountrySettingsPatchProductCountrySettings(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productCountrySettingsPatchProductCountrySettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProductCountrySettingsModel];
      return this.apiClient.callApi(
        '/v1/productcountrysettings/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCountrySettingsPostProductCountrySettings operation.
     * @callback module:api/SettingsWriteApi~productCountrySettingsPostProductCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCountrySettingsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a product country setting
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductCountrySettingsModel} [productCountrySettingsModel] ProductCountrySettingsModel
     * @param {module:api/SettingsWriteApi~productCountrySettingsPostProductCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCountrySettingsModel}
     */
    productCountrySettingsPostProductCountrySettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['productCountrySettingsModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCountrySettingsModel;
      return this.apiClient.callApi(
        '/v1/productcountrysettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsPatchProduct operation.
     * @callback module:api/SettingsWriteApi~productsPatchProductCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an product or a part of it.
     * @param {String} guid ID of the product.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProductModel.
     * @param {module:api/SettingsWriteApi~productsPatchProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductOutputModel>}
     */
    productsPatchProduct(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productsPatchProduct");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProductOutputModel];
      return this.apiClient.callApi(
        '/v1/products/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsPostProduct operation.
     * @callback module:api/SettingsWriteApi~productsPostProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a product.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductInputModel} [productInputModel] ProductModel.
     * @param {module:api/SettingsWriteApi~productsPostProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOutputModel}
     */
    productsPostProduct(opts, callback) {
      opts = opts || {};
      let postBody = opts['productInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductOutputModel;
      return this.apiClient.callApi(
        '/v1/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectBillingCustomersPatchProjectBillingCustomer operation.
     * @callback module:api/SettingsWriteApi~projectBillingCustomersPatchProjectBillingCustomerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectBillingCustomerModel2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project billing customer.
     * @param {String} guid ID of the project billing customer.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectBillingCustomerModel.
     * @param {module:api/SettingsWriteApi~projectBillingCustomersPatchProjectBillingCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectBillingCustomerModel2>}
     */
    projectBillingCustomersPatchProjectBillingCustomer(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectBillingCustomersPatchProjectBillingCustomer");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectBillingCustomerModel2];
      return this.apiClient.callApi(
        '/v1/projectbillingcustomers/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectBillingCustomersPostProjectBillingCustomer operation.
     * @callback module:api/SettingsWriteApi~projectBillingCustomersPostProjectBillingCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectBillingCustomerModel2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a billing customer for a project.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectBillingCustomerModel2} [projectBillingCustomerModel2] ProjectBillingCustomerModel.
     * @param {module:api/SettingsWriteApi~projectBillingCustomersPostProjectBillingCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectBillingCustomerModel2}
     */
    projectBillingCustomersPostProjectBillingCustomer(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectBillingCustomerModel2'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectBillingCustomerModel2;
      return this.apiClient.callApi(
        '/v1/projectbillingcustomers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertiesPatchProjectCustomProperty operation.
     * @callback module:api/SettingsWriteApi~projectCustomPropertiesPatchProjectCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPropertyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project custom property or a part of it.
     * @param {String} guid ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectCustomPropertyModel.
     * @param {module:api/SettingsWriteApi~projectCustomPropertiesPatchProjectCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPropertyModel>}
     */
    projectCustomPropertiesPatchProjectCustomProperty(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomPropertiesPatchProjectCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomPropertyModel];
      return this.apiClient.callApi(
        '/v1/projects/customproperties/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertiesPostProjectCustomProperty operation.
     * @callback module:api/SettingsWriteApi~projectCustomPropertiesPostProjectCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPropertyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project custom property.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomPropertyModel} [customPropertyModel] ProjectCustomPropertyModel.
     * @param {module:api/SettingsWriteApi~projectCustomPropertiesPostProjectCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPropertyModel>}
     */
    projectCustomPropertiesPostProjectCustomProperty(opts, callback) {
      opts = opts || {};
      let postBody = opts['customPropertyModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CustomPropertyModel];
      return this.apiClient.callApi(
        '/v1/projects/customproperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem operation.
     * @callback module:api/SettingsWriteApi~projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCustomPropertySelectionItemOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project custom property selection item or a part of it.
     * @param {String} guid ID of the project custom property selection item.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectCustomPropertySelectionItemInputModel.
     * @param {module:api/SettingsWriteApi~projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCustomPropertySelectionItemOutputModel>}
     */
    projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectCustomPropertySelectionItemOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem operation.
     * @callback module:api/SettingsWriteApi~projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCustomPropertySelectionItemOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project custom property selection item.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectCustomPropertySelectionItemInputModel} [projectCustomPropertySelectionItemInputModel] CustomPropertySelectionItemInputModel.
     * @param {module:api/SettingsWriteApi~projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCustomPropertySelectionItemOutputModel}
     */
    projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectCustomPropertySelectionItemInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectCustomPropertySelectionItemOutputModel;
      return this.apiClient.callApi(
        '/v1/projects/customproperties/projectcustompropertyselectionitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectMemberCostExceptionsPatch operation.
     * @callback module:api/SettingsWriteApi~projectMemberCostExceptionsPatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectMemberCostExceptionOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) project member cost exception.
     * @param {String} guid ID of the project member cost exception.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectMemberCostExceptionModel.
     * @param {module:api/SettingsWriteApi~projectMemberCostExceptionsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectMemberCostExceptionOutputModel>}
     */
    projectMemberCostExceptionsPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectMemberCostExceptionsPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectMemberCostExceptionOutputModel];
      return this.apiClient.callApi(
        '/v1/projectmembercostexceptions/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectMemberCostExceptionsPost operation.
     * @callback module:api/SettingsWriteApi~projectMemberCostExceptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMemberCostExceptionOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a cost exception to a project member.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectMemberCostExceptionInputModel} [projectMemberCostExceptionInputModel] ProjectMemberCostExceptionModel.
     * @param {module:api/SettingsWriteApi~projectMemberCostExceptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectMemberCostExceptionOutputModel}
     */
    projectMemberCostExceptionsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectMemberCostExceptionInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectMemberCostExceptionOutputModel;
      return this.apiClient.callApi(
        '/v1/projectmembercostexceptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectStatusTypesPatchProjectStatusType operation.
     * @callback module:api/SettingsWriteApi~projectStatusTypesPatchProjectStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectStatusTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a projectStatusType or a part of it
     * @param {String} guid ID of the projectStatusType
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectStatusTypeModel
     * @param {module:api/SettingsWriteApi~projectStatusTypesPatchProjectStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectStatusTypeModel>}
     */
    projectStatusTypesPatchProjectStatusType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectStatusTypesPatchProjectStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectStatusTypeModel];
      return this.apiClient.callApi(
        '/v1/projectstatustypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectStatusTypesPostProjectStatusType operation.
     * @callback module:api/SettingsWriteApi~projectStatusTypesPostProjectStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectStatusTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project status type
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectStatusTypeModel} [projectStatusTypeModel] ProjectStatusTypeModel
     * @param {module:api/SettingsWriteApi~projectStatusTypesPostProjectStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectStatusTypeModel}
     */
    projectStatusTypesPostProjectStatusType(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectStatusTypeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectStatusTypeModel;
      return this.apiClient.callApi(
        '/v1/projectstatustypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTaskStatusesPatchProjectTaskStatus operation.
     * @callback module:api/SettingsWriteApi~projectTaskStatusesPatchProjectTaskStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTaskStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an Project task status or a part of it.
     * @param {String} guid ID of the Project task status.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectTaskStatusModel.
     * @param {module:api/SettingsWriteApi~projectTaskStatusesPatchProjectTaskStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTaskStatusModel>}
     */
    projectTaskStatusesPatchProjectTaskStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectTaskStatusesPatchProjectTaskStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectTaskStatusModel];
      return this.apiClient.callApi(
        '/v1/projecttaskstatuses/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTaskStatusesPostProjectTaskStatus operation.
     * @callback module:api/SettingsWriteApi~projectTaskStatusesPostProjectTaskStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectTaskStatusModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project task status.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectTaskStatusModel} [projectTaskStatusModel] ProjectTaskStatusModel.
     * @param {module:api/SettingsWriteApi~projectTaskStatusesPostProjectTaskStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectTaskStatusModel}
     */
    projectTaskStatusesPostProjectTaskStatus(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectTaskStatusModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectTaskStatusModel;
      return this.apiClient.callApi(
        '/v1/projecttaskstatuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalStatusesPatchProposalStatus operation.
     * @callback module:api/SettingsWriteApi~proposalStatusesPatchProposalStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalStatusOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an Proposal status or a part of it
     * @param {String} guid ID of the Proposal status
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProposalStatusModel
     * @param {module:api/SettingsWriteApi~proposalStatusesPatchProposalStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalStatusOutputModel>}
     */
    proposalStatusesPatchProposalStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalStatusesPatchProposalStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProposalStatusOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalstatuses/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalStatusesPostProposalStatus operation.
     * @callback module:api/SettingsWriteApi~proposalStatusesPostProposalStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalStatusOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a proposal status
     * @param {Object} opts Optional parameters
     * @param {module:model/ProposalStatusInputModel} [proposalStatusInputModel] ProposalStatusModel
     * @param {module:api/SettingsWriteApi~proposalStatusesPostProposalStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalStatusOutputModel}
     */
    proposalStatusesPostProposalStatus(opts, callback) {
      opts = opts || {};
      let postBody = opts['proposalStatusInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProposalStatusOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalstatuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesPatchRole operation.
     * @callback module:api/SettingsWriteApi~rolesPatchRoleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a role or a part of it.
     * @param {String} guid ID of the role.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of RoleInputModel.
     * @param {module:api/SettingsWriteApi~rolesPatchRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleOutputModel>}
     */
    rolesPatchRole(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling rolesPatchRole");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RoleOutputModel];
      return this.apiClient.callApi(
        '/v1/roles/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesPostRole operation.
     * @callback module:api/SettingsWriteApi~rolesPostRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a role.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleInputModel} [roleInputModel] RoleInputModel.
     * @param {module:api/SettingsWriteApi~rolesPostRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleOutputModel}
     */
    rolesPostRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['roleInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleOutputModel;
      return this.apiClient.callApi(
        '/v1/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesAccountsPatchSalesAccount operation.
     * @callback module:api/SettingsWriteApi~salesAccountsPatchSalesAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesAccountModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a sales account or a part of it.
     * @param {String} guid ID of the sales account.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of SalesAccountModel.
     * @param {module:api/SettingsWriteApi~salesAccountsPatchSalesAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesAccountModel>}
     */
    salesAccountsPatchSalesAccount(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesAccountsPatchSalesAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SalesAccountModel];
      return this.apiClient.callApi(
        '/v1/salesaccounts/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesAccountsPostSalesAccount operation.
     * @callback module:api/SettingsWriteApi~salesAccountsPostSalesAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesAccountModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a sales account.
     * @param {Object} opts Optional parameters
     * @param {module:model/SalesAccountModel} [salesAccountModel] SalesAccountModel.
     * @param {module:api/SettingsWriteApi~salesAccountsPostSalesAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesAccountModel}
     */
    salesAccountsPostSalesAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['salesAccountModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SalesAccountModel;
      return this.apiClient.callApi(
        '/v1/salesaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesStatusTypesPatchSalesStatusType operation.
     * @callback module:api/SettingsWriteApi~salesStatusTypesPatchSalesStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesStatusTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an sales status type or a part of it
     * @param {String} guid ID of the sales status type
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of salesStatusType
     * @param {module:api/SettingsWriteApi~salesStatusTypesPatchSalesStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesStatusTypeOutputModel>}
     */
    salesStatusTypesPatchSalesStatusType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesStatusTypesPatchSalesStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SalesStatusTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/salesstatustypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesStatusTypesPostSalesStatusType operation.
     * @callback module:api/SettingsWriteApi~salesStatusTypesPostSalesStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesStatusTypeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a sales status type
     * @param {Object} opts Optional parameters
     * @param {module:model/SalesStatusTypeInputModel} [salesStatusTypeInputModel] salesStatusType
     * @param {module:api/SettingsWriteApi~salesStatusTypesPostSalesStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesStatusTypeOutputModel}
     */
    salesStatusTypesPostSalesStatusType(opts, callback) {
      opts = opts || {};
      let postBody = opts['salesStatusTypeInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SalesStatusTypeOutputModel;
      return this.apiClient.callApi(
        '/v1/salesstatustypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntryTypesPatchTimeEntryType operation.
     * @callback module:api/SettingsWriteApi~timeEntryTypesPatchTimeEntryTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeEntryTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a time entry type or a part of it.
     * @param {String} guid ID of the time entry type.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of TimeEntryTypeModel.
     * @param {module:api/SettingsWriteApi~timeEntryTypesPatchTimeEntryTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeEntryTypeModel>}
     */
    timeEntryTypesPatchTimeEntryType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling timeEntryTypesPatchTimeEntryType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TimeEntryTypeModel];
      return this.apiClient.callApi(
        '/v1/timeentrytypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntryTypesPostTimeEntryType operation.
     * @callback module:api/SettingsWriteApi~timeEntryTypesPostTimeEntryTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeEntryTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a time entry type.
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeEntryTypeModel} [timeEntryTypeModel] TimeEntryTypeModel.
     * @param {module:api/SettingsWriteApi~timeEntryTypesPostTimeEntryTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeEntryTypeModel}
     */
    timeEntryTypesPostTimeEntryType(opts, callback) {
      opts = opts || {};
      let postBody = opts['timeEntryTypeModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TimeEntryTypeModel;
      return this.apiClient.callApi(
        '/v1/timeentrytypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings operation.
     * @callback module:api/SettingsWriteApi~travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelExpenseTypeCountrySettingsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a travel expense type country setting
     * @param {String} guid ID of the travel expense type country setting
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of TravelExpenseTypeCountrySettingsModel
     * @param {module:api/SettingsWriteApi~travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelExpenseTypeCountrySettingsModel>}
     */
    travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TravelExpenseTypeCountrySettingsModel];
      return this.apiClient.callApi(
        '/v1/travelexpensetypecountrysettings/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings operation.
     * @callback module:api/SettingsWriteApi~travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelExpenseTypeCountrySettingsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a travel expense type country setting
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelExpenseTypeCountrySettingsModel} [travelExpenseTypeCountrySettingsModel] Travel expense type country setting model
     * @param {module:api/SettingsWriteApi~travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelExpenseTypeCountrySettingsModel}
     */
    travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['travelExpenseTypeCountrySettingsModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TravelExpenseTypeCountrySettingsModel;
      return this.apiClient.callApi(
        '/v1/travelexpensetypecountrysettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypesPatchTravelExpenseType operation.
     * @callback module:api/SettingsWriteApi~travelExpenseTypesPatchTravelExpenseTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelExpenseTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an travel expense type or a part of it.
     * @param {String} guid Guid of the travel expense type.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of TravelExpenseTypeInputModel.
     * @param {module:api/SettingsWriteApi~travelExpenseTypesPatchTravelExpenseTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelExpenseTypeOutputModel>}
     */
    travelExpenseTypesPatchTravelExpenseType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelExpenseTypesPatchTravelExpenseType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TravelExpenseTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/travelexpensetypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypesPostTravelExpenseType operation.
     * @callback module:api/SettingsWriteApi~travelExpenseTypesPostTravelExpenseTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelExpenseTypeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new travel expense type.
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelExpenseTypeInputModel} [travelExpenseTypeInputModel] TravelExpenseTypeInputModel.
     * @param {module:api/SettingsWriteApi~travelExpenseTypesPostTravelExpenseTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelExpenseTypeOutputModel}
     */
    travelExpenseTypesPostTravelExpenseType(opts, callback) {
      opts = opts || {};
      let postBody = opts['travelExpenseTypeInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TravelExpenseTypeOutputModel;
      return this.apiClient.callApi(
        '/v1/travelexpensetypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementStatusPatchTravelReimbursementStatus operation.
     * @callback module:api/SettingsWriteApi~travelReimbursementStatusPatchTravelReimbursementStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelReimbursementStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a travel reimbursement status or a part of it.
     * @param {String} guid ID of the travel reimbursement status.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of TravelReimbursementStatusModel.
     * @param {module:api/SettingsWriteApi~travelReimbursementStatusPatchTravelReimbursementStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelReimbursementStatusModel>}
     */
    travelReimbursementStatusPatchTravelReimbursementStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelReimbursementStatusPatchTravelReimbursementStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TravelReimbursementStatusModel];
      return this.apiClient.callApi(
        '/v1/travelreimbursementstatuses/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementStatusPostTravelReimbursementStatus operation.
     * @callback module:api/SettingsWriteApi~travelReimbursementStatusPostTravelReimbursementStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelReimbursementStatusModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a travel reimbursement status.
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelReimbursementStatusModel} [travelReimbursementStatusModel] TravelReimbursementStatusModel.
     * @param {module:api/SettingsWriteApi~travelReimbursementStatusPostTravelReimbursementStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelReimbursementStatusModel}
     */
    travelReimbursementStatusPostTravelReimbursementStatus(opts, callback) {
      opts = opts || {};
      let postBody = opts['travelReimbursementStatusModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TravelReimbursementStatusModel;
      return this.apiClient.callApi(
        '/v1/travelreimbursementstatuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertiesPatchUserCustomProperty operation.
     * @callback module:api/SettingsWriteApi~userCustomPropertiesPatchUserCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomPropertyOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a user custom property or a part of it.
     * @param {String} guid ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of UserCustomPropertyModel.
     * @param {module:api/SettingsWriteApi~userCustomPropertiesPatchUserCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomPropertyOutputModel>}
     */
    userCustomPropertiesPatchUserCustomProperty(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomPropertiesPatchUserCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UserCustomPropertyOutputModel];
      return this.apiClient.callApi(
        '/v1/users/customproperties/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertiesPostUserCustomProperty operation.
     * @callback module:api/SettingsWriteApi~userCustomPropertiesPostUserCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCustomPropertyOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a user custom property.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCustomPropertyInputModel} [userCustomPropertyInputModel] UserCustomPropertyModel.
     * @param {module:api/SettingsWriteApi~userCustomPropertiesPostUserCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCustomPropertyOutputModel}
     */
    userCustomPropertiesPostUserCustomProperty(opts, callback) {
      opts = opts || {};
      let postBody = opts['userCustomPropertyInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserCustomPropertyOutputModel;
      return this.apiClient.callApi(
        '/v1/users/customproperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem operation.
     * @callback module:api/SettingsWriteApi~userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomPropertySelectionItemOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a user custom property selection item or a part of it.
     * @param {String} guid ID of the user custom property selection item.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of UserCustomPropertySelectionItemInputModel.
     * @param {module:api/SettingsWriteApi~userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomPropertySelectionItemOutputModel>}
     */
    userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UserCustomPropertySelectionItemOutputModel];
      return this.apiClient.callApi(
        '/v1/users/customproperties/usercustompropertyselectionitems/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem operation.
     * @callback module:api/SettingsWriteApi~userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCustomPropertySelectionItemOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a user custom property selection item.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCustomPropertySelectionItemInputModel} [userCustomPropertySelectionItemInputModel] UserPropertySelectionItemInputModel.
     * @param {module:api/SettingsWriteApi~userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCustomPropertySelectionItemOutputModel}
     */
    userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['userCustomPropertySelectionItemInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserCustomPropertySelectionItemOutputModel;
      return this.apiClient.callApi(
        '/v1/users/customproperties/usercustompropertyselectionitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatRatesPatchVatRate operation.
     * @callback module:api/SettingsWriteApi~vatRatesPatchVatRateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VatRateOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a vat rate or a part of it
     * @param {String} guid GUID of the vat rate
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ValueAddedTaxModel
     * @param {module:api/SettingsWriteApi~vatRatesPatchVatRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VatRateOutputModel>}
     */
    vatRatesPatchVatRate(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling vatRatesPatchVatRate");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [VatRateOutputModel];
      return this.apiClient.callApi(
        '/v1/vatrates/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatRatesPostVatRate operation.
     * @callback module:api/SettingsWriteApi~vatRatesPostVatRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VatRateOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a vat rate
     * @param {Object} opts Optional parameters
     * @param {module:model/VatRateInputModel} [vatRateInputModel] VatRateInputModel
     * @param {module:api/SettingsWriteApi~vatRatesPostVatRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VatRateOutputModel}
     */
    vatRatesPostVatRate(opts, callback) {
      opts = opts || {};
      let postBody = opts['vatRateInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VatRateOutputModel;
      return this.apiClient.callApi(
        '/v1/vatrates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsPatchWorkContract operation.
     * @callback module:api/SettingsWriteApi~workContractsPatchWorkContractCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkContractOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a work contract or a part of it.
     * @param {String} guid ID of the work contract.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of WorkContractOutputModel.
     * @param {module:api/SettingsWriteApi~workContractsPatchWorkContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkContractOutputModel>}
     */
    workContractsPatchWorkContract(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workContractsPatchWorkContract");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkContractOutputModel];
      return this.apiClient.callApi(
        '/v1/workcontracts/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsPostWorkContract operation.
     * @callback module:api/SettingsWriteApi~workContractsPostWorkContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkContractOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a work contract.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [resetFlextime = true)] Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true = reset flextime.
     * @param {module:model/WorkContractInputModel} [workContractInputModel] WorkContractOutputModel.
     * @param {module:api/SettingsWriteApi~workContractsPostWorkContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkContractOutputModel}
     */
    workContractsPostWorkContract(opts, callback) {
      opts = opts || {};
      let postBody = opts['workContractInputModel'];

      let pathParams = {
      };
      let queryParams = {
        'resetFlextime': opts['resetFlextime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkContractOutputModel;
      return this.apiClient.callApi(
        '/v1/workcontracts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesPatchWorkType operation.
     * @callback module:api/SettingsWriteApi~workTypesPatchWorkTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a work type or a part of it.
     * @param {String} guid ID of the work type.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of WorkTypeModel.
     * @param {module:api/SettingsWriteApi~workTypesPatchWorkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkTypeOutputModel>}
     */
    workTypesPatchWorkType(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workTypesPatchWorkType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/worktypes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesPostWorkType operation.
     * @callback module:api/SettingsWriteApi~workTypesPostWorkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkTypeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a work type.
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkTypeInputModel} [workTypeInputModel] WorkTypeModel.
     * @param {module:api/SettingsWriteApi~workTypesPostWorkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkTypeOutputModel}
     */
    workTypesPostWorkType(opts, callback) {
      opts = opts || {};
      let postBody = opts['workTypeInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkTypeOutputModel;
      return this.apiClient.callApi(
        '/v1/worktypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
