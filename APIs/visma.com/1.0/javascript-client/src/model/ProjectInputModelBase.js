/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoiceTemplateSubModel from './InvoiceTemplateSubModel';
import MoneyInputModelWithNullableAmount from './MoneyInputModelWithNullableAmount';
import SimpleInputModel from './SimpleInputModel';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';
import SimpleProjectStatusInputModel from './SimpleProjectStatusInputModel';
import SimpleSalesStatusInputModel from './SimpleSalesStatusInputModel';

/**
 * The ProjectInputModelBase model module.
 * @module model/ProjectInputModelBase
 * @version 1.0
 */
class ProjectInputModelBase {
    /**
     * Constructs a new <code>ProjectInputModelBase</code>.
     * @alias module:model/ProjectInputModelBase
     * @param customer {module:model/SimpleInputRequiredModel} 
     * @param name {String} 
     * @param projectOwner {module:model/SimpleInputModel} 
     */
    constructor(customer, name, projectOwner) { 
        
        ProjectInputModelBase.initialize(this, customer, name, projectOwner);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customer, name, projectOwner) { 
        obj['customer'] = customer;
        obj['isJoiningAllowed'] = true;
        obj['name'] = name;
        obj['projectOwner'] = projectOwner;
        obj['useOvertimeMultipliers'] = true;
        obj['useProductsFromSetting'] = true;
        obj['useWorktypesFromSetting'] = true;
    }

    /**
     * Constructs a <code>ProjectInputModelBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectInputModelBase} obj Optional instance to populate.
     * @return {module:model/ProjectInputModelBase} The populated <code>ProjectInputModelBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectInputModelBase();

            if (data.hasOwnProperty('billingContact')) {
                obj['billingContact'] = SimpleInputModel.constructFromObject(data['billingContact']);
            }
            if (data.hasOwnProperty('businessUnit')) {
                obj['businessUnit'] = SimpleInputRequiredModel.constructFromObject(data['businessUnit']);
            }
            if (data.hasOwnProperty('completionEstimatePercentage')) {
                obj['completionEstimatePercentage'] = ApiClient.convertToType(data['completionEstimatePercentage'], 'Number');
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = SimpleInputModel.constructFromObject(data['costCenter']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = SimpleInputRequiredModel.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = SimpleInputRequiredModel.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('customerContact')) {
                obj['customerContact'] = SimpleInputModel.constructFromObject(data['customerContact']);
            }
            if (data.hasOwnProperty('deadline')) {
                obj['deadline'] = ApiClient.convertToType(data['deadline'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expectedOrderDate')) {
                obj['expectedOrderDate'] = ApiClient.convertToType(data['expectedOrderDate'], 'Date');
            }
            if (data.hasOwnProperty('expectedValue')) {
                obj['expectedValue'] = MoneyInputModelWithNullableAmount.constructFromObject(data['expectedValue']);
            }
            if (data.hasOwnProperty('internalName')) {
                obj['internalName'] = ApiClient.convertToType(data['internalName'], 'String');
            }
            if (data.hasOwnProperty('invoiceNotes')) {
                obj['invoiceNotes'] = ApiClient.convertToType(data['invoiceNotes'], 'String');
            }
            if (data.hasOwnProperty('invoiceTemplate')) {
                obj['invoiceTemplate'] = InvoiceTemplateSubModel.constructFromObject(data['invoiceTemplate']);
            }
            if (data.hasOwnProperty('isClosed')) {
                obj['isClosed'] = ApiClient.convertToType(data['isClosed'], 'Boolean');
            }
            if (data.hasOwnProperty('isInternal')) {
                obj['isInternal'] = ApiClient.convertToType(data['isInternal'], 'Boolean');
            }
            if (data.hasOwnProperty('isJoiningAllowed')) {
                obj['isJoiningAllowed'] = ApiClient.convertToType(data['isJoiningAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('leadSource')) {
                obj['leadSource'] = SimpleInputModel.constructFromObject(data['leadSource']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('orderNumber')) {
                obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'String');
            }
            if (data.hasOwnProperty('ourReference')) {
                obj['ourReference'] = ApiClient.convertToType(data['ourReference'], 'String');
            }
            if (data.hasOwnProperty('paymentTerm')) {
                obj['paymentTerm'] = ApiClient.convertToType(data['paymentTerm'], 'Number');
            }
            if (data.hasOwnProperty('probability')) {
                obj['probability'] = ApiClient.convertToType(data['probability'], 'Number');
            }
            if (data.hasOwnProperty('projectOwner')) {
                obj['projectOwner'] = SimpleInputModel.constructFromObject(data['projectOwner']);
            }
            if (data.hasOwnProperty('projectStatus')) {
                obj['projectStatus'] = SimpleProjectStatusInputModel.constructFromObject(data['projectStatus']);
            }
            if (data.hasOwnProperty('salesPerson')) {
                obj['salesPerson'] = SimpleInputModel.constructFromObject(data['salesPerson']);
            }
            if (data.hasOwnProperty('salesStatus')) {
                obj['salesStatus'] = SimpleSalesStatusInputModel.constructFromObject(data['salesStatus']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('useOvertimeMultipliers')) {
                obj['useOvertimeMultipliers'] = ApiClient.convertToType(data['useOvertimeMultipliers'], 'Boolean');
            }
            if (data.hasOwnProperty('useProductsFromSetting')) {
                obj['useProductsFromSetting'] = ApiClient.convertToType(data['useProductsFromSetting'], 'Boolean');
            }
            if (data.hasOwnProperty('useWorktypesFromSetting')) {
                obj['useWorktypesFromSetting'] = ApiClient.convertToType(data['useWorktypesFromSetting'], 'Boolean');
            }
            if (data.hasOwnProperty('yourReference')) {
                obj['yourReference'] = ApiClient.convertToType(data['yourReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectInputModelBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectInputModelBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectInputModelBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billingContact`
        if (data['billingContact']) { // data not null
          SimpleInputModel.validateJSON(data['billingContact']);
        }
        // validate the optional field `businessUnit`
        if (data['businessUnit']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['businessUnit']);
        }
        // validate the optional field `costCenter`
        if (data['costCenter']) { // data not null
          SimpleInputModel.validateJSON(data['costCenter']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['currency']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['customer']);
        }
        // validate the optional field `customerContact`
        if (data['customerContact']) { // data not null
          SimpleInputModel.validateJSON(data['customerContact']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `expectedValue`
        if (data['expectedValue']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['expectedValue']);
        }
        // ensure the json data is a string
        if (data['internalName'] && !(typeof data['internalName'] === 'string' || data['internalName'] instanceof String)) {
            throw new Error("Expected the field `internalName` to be a primitive type in the JSON string but got " + data['internalName']);
        }
        // ensure the json data is a string
        if (data['invoiceNotes'] && !(typeof data['invoiceNotes'] === 'string' || data['invoiceNotes'] instanceof String)) {
            throw new Error("Expected the field `invoiceNotes` to be a primitive type in the JSON string but got " + data['invoiceNotes']);
        }
        // validate the optional field `invoiceTemplate`
        if (data['invoiceTemplate']) { // data not null
          InvoiceTemplateSubModel.validateJSON(data['invoiceTemplate']);
        }
        // validate the optional field `leadSource`
        if (data['leadSource']) { // data not null
          SimpleInputModel.validateJSON(data['leadSource']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orderNumber'] && !(typeof data['orderNumber'] === 'string' || data['orderNumber'] instanceof String)) {
            throw new Error("Expected the field `orderNumber` to be a primitive type in the JSON string but got " + data['orderNumber']);
        }
        // ensure the json data is a string
        if (data['ourReference'] && !(typeof data['ourReference'] === 'string' || data['ourReference'] instanceof String)) {
            throw new Error("Expected the field `ourReference` to be a primitive type in the JSON string but got " + data['ourReference']);
        }
        // validate the optional field `projectOwner`
        if (data['projectOwner']) { // data not null
          SimpleInputModel.validateJSON(data['projectOwner']);
        }
        // validate the optional field `projectStatus`
        if (data['projectStatus']) { // data not null
          SimpleProjectStatusInputModel.validateJSON(data['projectStatus']);
        }
        // validate the optional field `salesPerson`
        if (data['salesPerson']) { // data not null
          SimpleInputModel.validateJSON(data['salesPerson']);
        }
        // validate the optional field `salesStatus`
        if (data['salesStatus']) { // data not null
          SimpleSalesStatusInputModel.validateJSON(data['salesStatus']);
        }
        // ensure the json data is a string
        if (data['yourReference'] && !(typeof data['yourReference'] === 'string' || data['yourReference'] instanceof String)) {
            throw new Error("Expected the field `yourReference` to be a primitive type in the JSON string but got " + data['yourReference']);
        }

        return true;
    }


}

ProjectInputModelBase.RequiredProperties = ["customer", "name", "projectOwner"];

/**
 * @member {module:model/SimpleInputModel} billingContact
 */
ProjectInputModelBase.prototype['billingContact'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} businessUnit
 */
ProjectInputModelBase.prototype['businessUnit'] = undefined;

/**
 * @member {Number} completionEstimatePercentage
 */
ProjectInputModelBase.prototype['completionEstimatePercentage'] = undefined;

/**
 * @member {module:model/SimpleInputModel} costCenter
 */
ProjectInputModelBase.prototype['costCenter'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} currency
 */
ProjectInputModelBase.prototype['currency'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} customer
 */
ProjectInputModelBase.prototype['customer'] = undefined;

/**
 * @member {module:model/SimpleInputModel} customerContact
 */
ProjectInputModelBase.prototype['customerContact'] = undefined;

/**
 * @member {Date} deadline
 */
ProjectInputModelBase.prototype['deadline'] = undefined;

/**
 * @member {String} description
 */
ProjectInputModelBase.prototype['description'] = undefined;

/**
 * @member {Date} expectedOrderDate
 */
ProjectInputModelBase.prototype['expectedOrderDate'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} expectedValue
 */
ProjectInputModelBase.prototype['expectedValue'] = undefined;

/**
 * @member {String} internalName
 */
ProjectInputModelBase.prototype['internalName'] = undefined;

/**
 * @member {String} invoiceNotes
 */
ProjectInputModelBase.prototype['invoiceNotes'] = undefined;

/**
 * @member {module:model/InvoiceTemplateSubModel} invoiceTemplate
 */
ProjectInputModelBase.prototype['invoiceTemplate'] = undefined;

/**
 * @member {Boolean} isClosed
 */
ProjectInputModelBase.prototype['isClosed'] = undefined;

/**
 * @member {Boolean} isInternal
 */
ProjectInputModelBase.prototype['isInternal'] = undefined;

/**
 * @member {Boolean} isJoiningAllowed
 * @default true
 */
ProjectInputModelBase.prototype['isJoiningAllowed'] = true;

/**
 * @member {module:model/SimpleInputModel} leadSource
 */
ProjectInputModelBase.prototype['leadSource'] = undefined;

/**
 * @member {String} name
 */
ProjectInputModelBase.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
ProjectInputModelBase.prototype['number'] = undefined;

/**
 * @member {String} orderNumber
 */
ProjectInputModelBase.prototype['orderNumber'] = undefined;

/**
 * @member {String} ourReference
 */
ProjectInputModelBase.prototype['ourReference'] = undefined;

/**
 * @member {Number} paymentTerm
 */
ProjectInputModelBase.prototype['paymentTerm'] = undefined;

/**
 * @member {Number} probability
 */
ProjectInputModelBase.prototype['probability'] = undefined;

/**
 * @member {module:model/SimpleInputModel} projectOwner
 */
ProjectInputModelBase.prototype['projectOwner'] = undefined;

/**
 * @member {module:model/SimpleProjectStatusInputModel} projectStatus
 */
ProjectInputModelBase.prototype['projectStatus'] = undefined;

/**
 * @member {module:model/SimpleInputModel} salesPerson
 */
ProjectInputModelBase.prototype['salesPerson'] = undefined;

/**
 * @member {module:model/SimpleSalesStatusInputModel} salesStatus
 */
ProjectInputModelBase.prototype['salesStatus'] = undefined;

/**
 * @member {Date} startDate
 */
ProjectInputModelBase.prototype['startDate'] = undefined;

/**
 * @member {Boolean} useOvertimeMultipliers
 * @default true
 */
ProjectInputModelBase.prototype['useOvertimeMultipliers'] = true;

/**
 * @member {Boolean} useProductsFromSetting
 * @default true
 */
ProjectInputModelBase.prototype['useProductsFromSetting'] = true;

/**
 * @member {Boolean} useWorktypesFromSetting
 * @default true
 */
ProjectInputModelBase.prototype['useWorktypesFromSetting'] = true;

/**
 * @member {String} yourReference
 */
ProjectInputModelBase.prototype['yourReference'] = undefined;






export default ProjectInputModelBase;

