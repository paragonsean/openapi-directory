/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactCustomer from './ContactCustomer';
import ModelWithName from './ModelWithName';
import SalutationType from './SalutationType';
import SatisfactionLevelType from './SatisfactionLevelType';
import UserWithFirstNameLastNameAndPhotoFileModel from './UserWithFirstNameLastNameAndPhotoFileModel';

/**
 * The ContactModel model module.
 * @module model/ContactModel
 * @version 1.0
 */
class ContactModel {
    /**
     * Constructs a new <code>ContactModel</code>.
     * @alias module:model/ContactModel
     * @param customer {module:model/ContactCustomer} 
     * @param firstName {String} 
     * @param lastName {String} 
     */
    constructor(customer, firstName, lastName) { 
        
        ContactModel.initialize(this, customer, firstName, lastName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customer, firstName, lastName) { 
        obj['customer'] = customer;
        obj['firstName'] = firstName;
        obj['isActive'] = true;
        obj['isEmailAllowed'] = false;
        obj['lastName'] = lastName;
    }

    /**
     * Constructs a <code>ContactModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactModel} obj Optional instance to populate.
     * @return {module:model/ContactModel} The populated <code>ContactModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactModel();

            if (data.hasOwnProperty('addressGuid')) {
                obj['addressGuid'] = ApiClient.convertToType(data['addressGuid'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ContactCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isDeleted')) {
                obj['isDeleted'] = ApiClient.convertToType(data['isDeleted'], 'Boolean');
            }
            if (data.hasOwnProperty('isEmailAllowed')) {
                obj['isEmailAllowed'] = ApiClient.convertToType(data['isEmailAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ModelWithName.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedBy')) {
                obj['lastUpdatedBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['lastUpdatedBy']);
            }
            if (data.hasOwnProperty('lastUpdatedDateTime')) {
                obj['lastUpdatedDateTime'] = ApiClient.convertToType(data['lastUpdatedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], ['String']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ModelWithName.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('salutation')) {
                obj['salutation'] = SalutationType.constructFromObject(data['salutation']);
            }
            if (data.hasOwnProperty('satisfactionLevel')) {
                obj['satisfactionLevel'] = SatisfactionLevelType.constructFromObject(data['satisfactionLevel']);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ModelWithName.constructFromObject(data['timeZone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressGuid'] && !(typeof data['addressGuid'] === 'string' || data['addressGuid'] instanceof String)) {
            throw new Error("Expected the field `addressGuid` to be a primitive type in the JSON string but got " + data['addressGuid']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['createdBy']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          ContactCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // validate the optional field `language`
        if (data['language']) { // data not null
          ModelWithName.validateJSON(data['language']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // validate the optional field `lastUpdatedBy`
        if (data['lastUpdatedBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['lastUpdatedBy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phoneNumbers'])) {
            throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
        }
        // validate the optional field `role`
        if (data['role']) { // data not null
          ModelWithName.validateJSON(data['role']);
        }
        // validate the optional field `timeZone`
        if (data['timeZone']) { // data not null
          ModelWithName.validateJSON(data['timeZone']);
        }

        return true;
    }


}

ContactModel.RequiredProperties = ["customer", "firstName", "lastName"];

/**
 * @member {String} addressGuid
 */
ContactModel.prototype['addressGuid'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} createdBy
 */
ContactModel.prototype['createdBy'] = undefined;

/**
 * @member {Date} createdDateTime
 */
ContactModel.prototype['createdDateTime'] = undefined;

/**
 * @member {module:model/ContactCustomer} customer
 */
ContactModel.prototype['customer'] = undefined;

/**
 * @member {Date} dateOfBirth
 */
ContactModel.prototype['dateOfBirth'] = undefined;

/**
 * @member {String} description
 */
ContactModel.prototype['description'] = undefined;

/**
 * @member {Array.<String>} emails
 */
ContactModel.prototype['emails'] = undefined;

/**
 * @member {String} firstName
 */
ContactModel.prototype['firstName'] = undefined;

/**
 * @member {String} guid
 */
ContactModel.prototype['guid'] = undefined;

/**
 * @member {Boolean} isActive
 * @default true
 */
ContactModel.prototype['isActive'] = true;

/**
 * @member {Boolean} isDeleted
 */
ContactModel.prototype['isDeleted'] = undefined;

/**
 * @member {Boolean} isEmailAllowed
 * @default false
 */
ContactModel.prototype['isEmailAllowed'] = false;

/**
 * @member {String} jobTitle
 */
ContactModel.prototype['jobTitle'] = undefined;

/**
 * @member {module:model/ModelWithName} language
 */
ContactModel.prototype['language'] = undefined;

/**
 * @member {String} lastName
 */
ContactModel.prototype['lastName'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} lastUpdatedBy
 */
ContactModel.prototype['lastUpdatedBy'] = undefined;

/**
 * @member {Date} lastUpdatedDateTime
 */
ContactModel.prototype['lastUpdatedDateTime'] = undefined;

/**
 * @member {String} name
 */
ContactModel.prototype['name'] = undefined;

/**
 * @member {Array.<String>} phoneNumbers
 */
ContactModel.prototype['phoneNumbers'] = undefined;

/**
 * @member {module:model/ModelWithName} role
 */
ContactModel.prototype['role'] = undefined;

/**
 * @member {module:model/SalutationType} salutation
 */
ContactModel.prototype['salutation'] = undefined;

/**
 * @member {module:model/SatisfactionLevelType} satisfactionLevel
 */
ContactModel.prototype['satisfactionLevel'] = undefined;

/**
 * @member {module:model/ModelWithName} timeZone
 */
ContactModel.prototype['timeZone'] = undefined;






export default ContactModel;

