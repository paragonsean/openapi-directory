/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupByType from './GroupByType';
import ModelBaseWithRequiredGuid from './ModelBaseWithRequiredGuid';
import MoneyInputModelWithNullableAmount from './MoneyInputModelWithNullableAmount';
import SimpleInputModel from './SimpleInputModel';

/**
 * The TravelReimbursementInputModel model module.
 * @module model/TravelReimbursementInputModel
 * @version 1.0
 */
class TravelReimbursementInputModel {
    /**
     * Constructs a new <code>TravelReimbursementInputModel</code>.
     * @alias module:model/TravelReimbursementInputModel
     * @param user {module:model/ModelBaseWithRequiredGuid} 
     */
    constructor(user) { 
        
        TravelReimbursementInputModel.initialize(this, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, user) { 
        obj['user'] = user;
    }

    /**
     * Constructs a <code>TravelReimbursementInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TravelReimbursementInputModel} obj Optional instance to populate.
     * @return {module:model/TravelReimbursementInputModel} The populated <code>TravelReimbursementInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TravelReimbursementInputModel();

            if (data.hasOwnProperty('advancePayment')) {
                obj['advancePayment'] = MoneyInputModelWithNullableAmount.constructFromObject(data['advancePayment']);
            }
            if (data.hasOwnProperty('groupBy')) {
                obj['groupBy'] = GroupByType.constructFromObject(data['groupBy']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('travelReimbursementStatus')) {
                obj['travelReimbursementStatus'] = SimpleInputModel.constructFromObject(data['travelReimbursementStatus']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ModelBaseWithRequiredGuid.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TravelReimbursementInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TravelReimbursementInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TravelReimbursementInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `advancePayment`
        if (data['advancePayment']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['advancePayment']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `travelReimbursementStatus`
        if (data['travelReimbursementStatus']) { // data not null
          SimpleInputModel.validateJSON(data['travelReimbursementStatus']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          ModelBaseWithRequiredGuid.validateJSON(data['user']);
        }

        return true;
    }


}

TravelReimbursementInputModel.RequiredProperties = ["user"];

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} advancePayment
 */
TravelReimbursementInputModel.prototype['advancePayment'] = undefined;

/**
 * @member {module:model/GroupByType} groupBy
 */
TravelReimbursementInputModel.prototype['groupBy'] = undefined;

/**
 * @member {String} title
 */
TravelReimbursementInputModel.prototype['title'] = undefined;

/**
 * @member {module:model/SimpleInputModel} travelReimbursementStatus
 */
TravelReimbursementInputModel.prototype['travelReimbursementStatus'] = undefined;

/**
 * @member {module:model/ModelBaseWithRequiredGuid} user
 */
TravelReimbursementInputModel.prototype['user'] = undefined;






export default TravelReimbursementInputModel;

