/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoneyInputModelWithNullableAmount from './MoneyInputModelWithNullableAmount';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';
import UserWithFirstNameLastNameAndPhotoFileModel from './UserWithFirstNameLastNameAndPhotoFileModel';

/**
 * The ProjectForecastInputModel model module.
 * @module model/ProjectForecastInputModel
 * @version 1.0
 */
class ProjectForecastInputModel {
    /**
     * Constructs a new <code>ProjectForecastInputModel</code>.
     * @alias module:model/ProjectForecastInputModel
     * @param month {Number} 
     * @param project {module:model/SimpleInputRequiredModel} 
     * @param year {Number} 
     */
    constructor(month, project, year) { 
        
        ProjectForecastInputModel.initialize(this, month, project, year);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, month, project, year) { 
        obj['month'] = month;
        obj['project'] = project;
        obj['year'] = year;
    }

    /**
     * Constructs a <code>ProjectForecastInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectForecastInputModel} obj Optional instance to populate.
     * @return {module:model/ProjectForecastInputModel} The populated <code>ProjectForecastInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectForecastInputModel();

            if (data.hasOwnProperty('billingForecast')) {
                obj['billingForecast'] = MoneyInputModelWithNullableAmount.constructFromObject(data['billingForecast']);
            }
            if (data.hasOwnProperty('billingForecastNotes')) {
                obj['billingForecastNotes'] = ApiClient.convertToType(data['billingForecastNotes'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('expenseForecast')) {
                obj['expenseForecast'] = MoneyInputModelWithNullableAmount.constructFromObject(data['expenseForecast']);
            }
            if (data.hasOwnProperty('expenseForecastNotes')) {
                obj['expenseForecastNotes'] = ApiClient.convertToType(data['expenseForecastNotes'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('laborExpenseForecast')) {
                obj['laborExpenseForecast'] = MoneyInputModelWithNullableAmount.constructFromObject(data['laborExpenseForecast']);
            }
            if (data.hasOwnProperty('laborExpenseForecastNotes')) {
                obj['laborExpenseForecastNotes'] = ApiClient.convertToType(data['laborExpenseForecastNotes'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedBy')) {
                obj['lastUpdatedBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['lastUpdatedBy']);
            }
            if (data.hasOwnProperty('lastUpdatedDateTime')) {
                obj['lastUpdatedDateTime'] = ApiClient.convertToType(data['lastUpdatedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Number');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = SimpleInputRequiredModel.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('revenueForecast')) {
                obj['revenueForecast'] = MoneyInputModelWithNullableAmount.constructFromObject(data['revenueForecast']);
            }
            if (data.hasOwnProperty('revenueForecastNotes')) {
                obj['revenueForecastNotes'] = ApiClient.convertToType(data['revenueForecastNotes'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectForecastInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectForecastInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectForecastInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billingForecast`
        if (data['billingForecast']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['billingForecast']);
        }
        // ensure the json data is a string
        if (data['billingForecastNotes'] && !(typeof data['billingForecastNotes'] === 'string' || data['billingForecastNotes'] instanceof String)) {
            throw new Error("Expected the field `billingForecastNotes` to be a primitive type in the JSON string but got " + data['billingForecastNotes']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['createdBy']);
        }
        // validate the optional field `expenseForecast`
        if (data['expenseForecast']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['expenseForecast']);
        }
        // ensure the json data is a string
        if (data['expenseForecastNotes'] && !(typeof data['expenseForecastNotes'] === 'string' || data['expenseForecastNotes'] instanceof String)) {
            throw new Error("Expected the field `expenseForecastNotes` to be a primitive type in the JSON string but got " + data['expenseForecastNotes']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // validate the optional field `laborExpenseForecast`
        if (data['laborExpenseForecast']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['laborExpenseForecast']);
        }
        // ensure the json data is a string
        if (data['laborExpenseForecastNotes'] && !(typeof data['laborExpenseForecastNotes'] === 'string' || data['laborExpenseForecastNotes'] instanceof String)) {
            throw new Error("Expected the field `laborExpenseForecastNotes` to be a primitive type in the JSON string but got " + data['laborExpenseForecastNotes']);
        }
        // validate the optional field `lastUpdatedBy`
        if (data['lastUpdatedBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['lastUpdatedBy']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['project']);
        }
        // validate the optional field `revenueForecast`
        if (data['revenueForecast']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['revenueForecast']);
        }
        // ensure the json data is a string
        if (data['revenueForecastNotes'] && !(typeof data['revenueForecastNotes'] === 'string' || data['revenueForecastNotes'] instanceof String)) {
            throw new Error("Expected the field `revenueForecastNotes` to be a primitive type in the JSON string but got " + data['revenueForecastNotes']);
        }

        return true;
    }


}

ProjectForecastInputModel.RequiredProperties = ["month", "project", "year"];

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} billingForecast
 */
ProjectForecastInputModel.prototype['billingForecast'] = undefined;

/**
 * @member {String} billingForecastNotes
 */
ProjectForecastInputModel.prototype['billingForecastNotes'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} createdBy
 */
ProjectForecastInputModel.prototype['createdBy'] = undefined;

/**
 * @member {Date} createdDateTime
 */
ProjectForecastInputModel.prototype['createdDateTime'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} expenseForecast
 */
ProjectForecastInputModel.prototype['expenseForecast'] = undefined;

/**
 * @member {String} expenseForecastNotes
 */
ProjectForecastInputModel.prototype['expenseForecastNotes'] = undefined;

/**
 * @member {String} guid
 */
ProjectForecastInputModel.prototype['guid'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} laborExpenseForecast
 */
ProjectForecastInputModel.prototype['laborExpenseForecast'] = undefined;

/**
 * @member {String} laborExpenseForecastNotes
 */
ProjectForecastInputModel.prototype['laborExpenseForecastNotes'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} lastUpdatedBy
 */
ProjectForecastInputModel.prototype['lastUpdatedBy'] = undefined;

/**
 * @member {Date} lastUpdatedDateTime
 */
ProjectForecastInputModel.prototype['lastUpdatedDateTime'] = undefined;

/**
 * @member {Number} month
 */
ProjectForecastInputModel.prototype['month'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} project
 */
ProjectForecastInputModel.prototype['project'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} revenueForecast
 */
ProjectForecastInputModel.prototype['revenueForecast'] = undefined;

/**
 * @member {String} revenueForecastNotes
 */
ProjectForecastInputModel.prototype['revenueForecastNotes'] = undefined;

/**
 * @member {Number} year
 */
ProjectForecastInputModel.prototype['year'] = undefined;






export default ProjectForecastInputModel;

