/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemberStatus from './MemberStatus';
import ParticipantType from './ParticipantType';

/**
 * The ActivityParticipantModel model module.
 * @module model/ActivityParticipantModel
 * @version 1.0
 */
class ActivityParticipantModel {
    /**
     * Constructs a new <code>ActivityParticipantModel</code>.
     * @alias module:model/ActivityParticipantModel
     * @param activityGuid {String} 
     * @param participantGuid {String} 
     */
    constructor(activityGuid, participantGuid) { 
        
        ActivityParticipantModel.initialize(this, activityGuid, participantGuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activityGuid, participantGuid) { 
        obj['activityGuid'] = activityGuid;
        obj['participantGuid'] = participantGuid;
    }

    /**
     * Constructs a <code>ActivityParticipantModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityParticipantModel} obj Optional instance to populate.
     * @return {module:model/ActivityParticipantModel} The populated <code>ActivityParticipantModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityParticipantModel();

            if (data.hasOwnProperty('activityGuid')) {
                obj['activityGuid'] = ApiClient.convertToType(data['activityGuid'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('mobilePhone')) {
                obj['mobilePhone'] = ApiClient.convertToType(data['mobilePhone'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('participantGuid')) {
                obj['participantGuid'] = ApiClient.convertToType(data['participantGuid'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = MemberStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ParticipantType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityParticipantModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityParticipantModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActivityParticipantModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activityGuid'] && !(typeof data['activityGuid'] === 'string' || data['activityGuid'] instanceof String)) {
            throw new Error("Expected the field `activityGuid` to be a primitive type in the JSON string but got " + data['activityGuid']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['mobilePhone'] && !(typeof data['mobilePhone'] === 'string' || data['mobilePhone'] instanceof String)) {
            throw new Error("Expected the field `mobilePhone` to be a primitive type in the JSON string but got " + data['mobilePhone']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['participantGuid'] && !(typeof data['participantGuid'] === 'string' || data['participantGuid'] instanceof String)) {
            throw new Error("Expected the field `participantGuid` to be a primitive type in the JSON string but got " + data['participantGuid']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}

ActivityParticipantModel.RequiredProperties = ["activityGuid", "participantGuid"];

/**
 * @member {String} activityGuid
 */
ActivityParticipantModel.prototype['activityGuid'] = undefined;

/**
 * @member {String} email
 */
ActivityParticipantModel.prototype['email'] = undefined;

/**
 * @member {String} guid
 */
ActivityParticipantModel.prototype['guid'] = undefined;

/**
 * @member {Boolean} isActive
 */
ActivityParticipantModel.prototype['isActive'] = undefined;

/**
 * @member {String} mobilePhone
 */
ActivityParticipantModel.prototype['mobilePhone'] = undefined;

/**
 * @member {String} name
 */
ActivityParticipantModel.prototype['name'] = undefined;

/**
 * @member {String} participantGuid
 */
ActivityParticipantModel.prototype['participantGuid'] = undefined;

/**
 * @member {String} phone
 */
ActivityParticipantModel.prototype['phone'] = undefined;

/**
 * @member {module:model/MemberStatus} status
 */
ActivityParticipantModel.prototype['status'] = undefined;

/**
 * @member {module:model/ParticipantType} type
 */
ActivityParticipantModel.prototype['type'] = undefined;






export default ActivityParticipantModel;

