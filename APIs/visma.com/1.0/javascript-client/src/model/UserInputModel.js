/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LicenseUserType from './LicenseUserType';
import SalutationType from './SalutationType';
import SatisfactionLevelType from './SatisfactionLevelType';
import SimpleInputModel from './SimpleInputModel';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';
import TimezoneModel from './TimezoneModel';

/**
 * The UserInputModel model module.
 * @module model/UserInputModel
 * @version 1.0
 */
class UserInputModel {
    /**
     * Constructs a new <code>UserInputModel</code>.
     * @alias module:model/UserInputModel
     * @param firstName {String} 
     * @param lastName {String} 
     */
    constructor(firstName, lastName) { 
        
        UserInputModel.initialize(this, firstName, lastName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, lastName) { 
        obj['createDefaultWorkContract'] = true;
        obj['firstName'] = firstName;
        obj['isActive'] = true;
        obj['lastName'] = lastName;
    }

    /**
     * Constructs a <code>UserInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserInputModel} obj Optional instance to populate.
     * @return {module:model/UserInputModel} The populated <code>UserInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserInputModel();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('bankAccountNumber')) {
                obj['bankAccountNumber'] = ApiClient.convertToType(data['bankAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('birthDate')) {
                obj['birthDate'] = ApiClient.convertToType(data['birthDate'], 'Date');
            }
            if (data.hasOwnProperty('businessUnit')) {
                obj['businessUnit'] = SimpleInputRequiredModel.constructFromObject(data['businessUnit']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = SimpleInputModel.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('countryRegion')) {
                obj['countryRegion'] = SimpleInputModel.constructFromObject(data['countryRegion']);
            }
            if (data.hasOwnProperty('createDefaultWorkContract')) {
                obj['createDefaultWorkContract'] = ApiClient.convertToType(data['createDefaultWorkContract'], 'Boolean');
            }
            if (data.hasOwnProperty('culture')) {
                obj['culture'] = SimpleInputModel.constructFromObject(data['culture']);
            }
            if (data.hasOwnProperty('defaultActivityType')) {
                obj['defaultActivityType'] = SimpleInputModel.constructFromObject(data['defaultActivityType']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = SimpleInputModel.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('permissionProfile')) {
                obj['permissionProfile'] = SimpleInputModel.constructFromObject(data['permissionProfile']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('salutation')) {
                obj['salutation'] = SalutationType.constructFromObject(data['salutation']);
            }
            if (data.hasOwnProperty('satisfaction')) {
                obj['satisfaction'] = SatisfactionLevelType.constructFromObject(data['satisfaction']);
            }
            if (data.hasOwnProperty('socialSecurityNumber')) {
                obj['socialSecurityNumber'] = ApiClient.convertToType(data['socialSecurityNumber'], 'String');
            }
            if (data.hasOwnProperty('superiorUser')) {
                obj['superiorUser'] = SimpleInputRequiredModel.constructFromObject(data['superiorUser']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = TimezoneModel.constructFromObject(data['timezone']);
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = LicenseUserType.constructFromObject(data['userType']);
            }
            if (data.hasOwnProperty('workType')) {
                obj['workType'] = SimpleInputRequiredModel.constructFromObject(data['workType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['bankAccountNumber'] && !(typeof data['bankAccountNumber'] === 'string' || data['bankAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got " + data['bankAccountNumber']);
        }
        // validate the optional field `businessUnit`
        if (data['businessUnit']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['businessUnit']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          SimpleInputModel.validateJSON(data['country']);
        }
        // validate the optional field `countryRegion`
        if (data['countryRegion']) { // data not null
          SimpleInputModel.validateJSON(data['countryRegion']);
        }
        // validate the optional field `culture`
        if (data['culture']) { // data not null
          SimpleInputModel.validateJSON(data['culture']);
        }
        // validate the optional field `defaultActivityType`
        if (data['defaultActivityType']) { // data not null
          SimpleInputModel.validateJSON(data['defaultActivityType']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // validate the optional field `language`
        if (data['language']) { // data not null
          SimpleInputModel.validateJSON(data['language']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // validate the optional field `permissionProfile`
        if (data['permissionProfile']) { // data not null
          SimpleInputModel.validateJSON(data['permissionProfile']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['socialSecurityNumber'] && !(typeof data['socialSecurityNumber'] === 'string' || data['socialSecurityNumber'] instanceof String)) {
            throw new Error("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got " + data['socialSecurityNumber']);
        }
        // validate the optional field `superiorUser`
        if (data['superiorUser']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['superiorUser']);
        }
        // validate the optional field `timezone`
        if (data['timezone']) { // data not null
          TimezoneModel.validateJSON(data['timezone']);
        }
        // validate the optional field `workType`
        if (data['workType']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['workType']);
        }

        return true;
    }


}

UserInputModel.RequiredProperties = ["firstName", "lastName"];

/**
 * @member {String} address
 */
UserInputModel.prototype['address'] = undefined;

/**
 * @member {String} bankAccountNumber
 */
UserInputModel.prototype['bankAccountNumber'] = undefined;

/**
 * @member {Date} birthDate
 */
UserInputModel.prototype['birthDate'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} businessUnit
 */
UserInputModel.prototype['businessUnit'] = undefined;

/**
 * @member {String} city
 */
UserInputModel.prototype['city'] = undefined;

/**
 * @member {String} code
 */
UserInputModel.prototype['code'] = undefined;

/**
 * @member {module:model/SimpleInputModel} country
 */
UserInputModel.prototype['country'] = undefined;

/**
 * @member {module:model/SimpleInputModel} countryRegion
 */
UserInputModel.prototype['countryRegion'] = undefined;

/**
 * @member {Boolean} createDefaultWorkContract
 * @default true
 */
UserInputModel.prototype['createDefaultWorkContract'] = true;

/**
 * @member {module:model/SimpleInputModel} culture
 */
UserInputModel.prototype['culture'] = undefined;

/**
 * @member {module:model/SimpleInputModel} defaultActivityType
 */
UserInputModel.prototype['defaultActivityType'] = undefined;

/**
 * @member {String} email
 */
UserInputModel.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
UserInputModel.prototype['firstName'] = undefined;

/**
 * @member {Boolean} isActive
 * @default true
 */
UserInputModel.prototype['isActive'] = true;

/**
 * @member {module:model/SimpleInputModel} language
 */
UserInputModel.prototype['language'] = undefined;

/**
 * @member {String} lastName
 */
UserInputModel.prototype['lastName'] = undefined;

/**
 * @member {String} notes
 */
UserInputModel.prototype['notes'] = undefined;

/**
 * @member {module:model/SimpleInputModel} permissionProfile
 */
UserInputModel.prototype['permissionProfile'] = undefined;

/**
 * @member {String} phone
 */
UserInputModel.prototype['phone'] = undefined;

/**
 * @member {String} postalCode
 */
UserInputModel.prototype['postalCode'] = undefined;

/**
 * @member {module:model/SalutationType} salutation
 */
UserInputModel.prototype['salutation'] = undefined;

/**
 * @member {module:model/SatisfactionLevelType} satisfaction
 */
UserInputModel.prototype['satisfaction'] = undefined;

/**
 * @member {String} socialSecurityNumber
 */
UserInputModel.prototype['socialSecurityNumber'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} superiorUser
 */
UserInputModel.prototype['superiorUser'] = undefined;

/**
 * @member {module:model/TimezoneModel} timezone
 */
UserInputModel.prototype['timezone'] = undefined;

/**
 * @member {module:model/LicenseUserType} userType
 */
UserInputModel.prototype['userType'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} workType
 */
UserInputModel.prototype['workType'] = undefined;






export default UserInputModel;

