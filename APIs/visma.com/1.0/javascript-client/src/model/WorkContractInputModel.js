/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoneyInputModelWithNotNegativeAmount from './MoneyInputModelWithNotNegativeAmount';
import SimpleInputModel from './SimpleInputModel';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';
import Workweek from './Workweek';

/**
 * The WorkContractInputModel model module.
 * @module model/WorkContractInputModel
 * @version 1.0
 */
class WorkContractInputModel {
    /**
     * Constructs a new <code>WorkContractInputModel</code>.
     * @alias module:model/WorkContractInputModel
     * @param hourCost {module:model/MoneyInputModelWithNotNegativeAmount} 
     * @param startDate {Date} 
     * @param title {String} 
     * @param user {module:model/SimpleInputRequiredModel} 
     */
    constructor(hourCost, startDate, title, user) { 
        
        WorkContractInputModel.initialize(this, hourCost, startDate, title, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hourCost, startDate, title, user) { 
        obj['hourCost'] = hourCost;
        obj['isFlextimeActive'] = true;
        obj['startDate'] = startDate;
        obj['title'] = title;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>WorkContractInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkContractInputModel} obj Optional instance to populate.
     * @return {module:model/WorkContractInputModel} The populated <code>WorkContractInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkContractInputModel();

            if (data.hasOwnProperty('dailyHours')) {
                obj['dailyHours'] = ApiClient.convertToType(data['dailyHours'], 'Number');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('flextimeLimitPerDay')) {
                obj['flextimeLimitPerDay'] = ApiClient.convertToType(data['flextimeLimitPerDay'], 'Number');
            }
            if (data.hasOwnProperty('hourCost')) {
                obj['hourCost'] = MoneyInputModelWithNotNegativeAmount.constructFromObject(data['hourCost']);
            }
            if (data.hasOwnProperty('isFlextimeActive')) {
                obj['isFlextimeActive'] = ApiClient.convertToType(data['isFlextimeActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isOvertimeAllowed')) {
                obj['isOvertimeAllowed'] = ApiClient.convertToType(data['isOvertimeAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = SimpleInputModel.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SimpleInputRequiredModel.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('workWeek')) {
                obj['workWeek'] = ApiClient.convertToType(data['workWeek'], [Workweek]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkContractInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkContractInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkContractInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `hourCost`
        if (data['hourCost']) { // data not null
          MoneyInputModelWithNotNegativeAmount.validateJSON(data['hourCost']);
        }
        // validate the optional field `role`
        if (data['role']) { // data not null
          SimpleInputModel.validateJSON(data['role']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['user']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workWeek'])) {
            throw new Error("Expected the field `workWeek` to be an array in the JSON data but got " + data['workWeek']);
        }

        return true;
    }


}

WorkContractInputModel.RequiredProperties = ["hourCost", "startDate", "title", "user"];

/**
 * @member {Number} dailyHours
 */
WorkContractInputModel.prototype['dailyHours'] = undefined;

/**
 * @member {Date} endDate
 */
WorkContractInputModel.prototype['endDate'] = undefined;

/**
 * @member {Number} flextimeLimitPerDay
 */
WorkContractInputModel.prototype['flextimeLimitPerDay'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNotNegativeAmount} hourCost
 */
WorkContractInputModel.prototype['hourCost'] = undefined;

/**
 * @member {Boolean} isFlextimeActive
 * @default true
 */
WorkContractInputModel.prototype['isFlextimeActive'] = true;

/**
 * @member {Boolean} isOvertimeAllowed
 */
WorkContractInputModel.prototype['isOvertimeAllowed'] = undefined;

/**
 * @member {module:model/SimpleInputModel} role
 */
WorkContractInputModel.prototype['role'] = undefined;

/**
 * @member {Date} startDate
 */
WorkContractInputModel.prototype['startDate'] = undefined;

/**
 * @member {String} title
 */
WorkContractInputModel.prototype['title'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} user
 */
WorkContractInputModel.prototype['user'] = undefined;

/**
 * @member {Array.<module:model/Workweek>} workWeek
 */
WorkContractInputModel.prototype['workWeek'] = undefined;






export default WorkContractInputModel;

