/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
/**
* Enum class ExceptionTypeEnum.
* @enum {}
* @readonly
*/
export default class ExceptionTypeEnum {
    
        /**
         * value: "InternalSystemError"
         * @const
         */
        "InternalSystemError" = "InternalSystemError";

    
        /**
         * value: "AuthenticationRequired"
         * @const
         */
        "AuthenticationRequired" = "AuthenticationRequired";

    
        /**
         * value: "AddonMissing"
         * @const
         */
        "AddonMissing" = "AddonMissing";

    
        /**
         * value: "FeatureIsNotEnabled"
         * @const
         */
        "FeatureIsNotEnabled" = "FeatureIsNotEnabled";

    
        /**
         * value: "InvalidParameter"
         * @const
         */
        "InvalidParameter" = "InvalidParameter";

    
        /**
         * value: "InvalidOperation"
         * @const
         */
        "InvalidOperation" = "InvalidOperation";

    
        /**
         * value: "InvalidRequest"
         * @const
         */
        "InvalidRequest" = "InvalidRequest";

    
        /**
         * value: "InsufficientApiScope"
         * @const
         */
        "InsufficientApiScope" = "InsufficientApiScope";

    
        /**
         * value: "InvalidApiVersion"
         * @const
         */
        "InvalidApiVersion" = "InvalidApiVersion";

    
        /**
         * value: "ConfigurationError"
         * @const
         */
        "ConfigurationError" = "ConfigurationError";

    
        /**
         * value: "UserLicenseType"
         * @const
         */
        "UserLicenseType" = "UserLicenseType";

    
        /**
         * value: "TermsOfServiceNotApproved"
         * @const
         */
        "TermsOfServiceNotApproved" = "TermsOfServiceNotApproved";

    
        /**
         * value: "HttpsRequired"
         * @const
         */
        "HttpsRequired" = "HttpsRequired";

    
        /**
         * value: "OrganizationNotActive"
         * @const
         */
        "OrganizationNotActive" = "OrganizationNotActive";

    
        /**
         * value: "PermissionDenied"
         * @const
         */
        "PermissionDenied" = "PermissionDenied";

    
        /**
         * value: "TrialExpired"
         * @const
         */
        "TrialExpired" = "TrialExpired";

    
        /**
         * value: "NotAvailableInTrial"
         * @const
         */
        "NotAvailableInTrial" = "NotAvailableInTrial";

    
        /**
         * value: "InvalidRecaptcha"
         * @const
         */
        "InvalidRecaptcha" = "InvalidRecaptcha";

    
        /**
         * value: "AddonMissingTermsOfServiceApproval"
         * @const
         */
        "AddonMissingTermsOfServiceApproval" = "AddonMissingTermsOfServiceApproval";

    

    /**
    * Returns a <code>ExceptionTypeEnum</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/ExceptionTypeEnum} The enum <code>ExceptionTypeEnum</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

