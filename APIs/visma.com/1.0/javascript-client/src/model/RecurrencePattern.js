/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DailyModel from './DailyModel';
import MonthlyModel from './MonthlyModel';
import WeeklyModel from './WeeklyModel';
import YearlyModel from './YearlyModel';

/**
 * The RecurrencePattern model module.
 * @module model/RecurrencePattern
 * @version 1.0
 */
class RecurrencePattern {
    /**
     * Constructs a new <code>RecurrencePattern</code>.
     * @alias module:model/RecurrencePattern
     */
    constructor() { 
        
        RecurrencePattern.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecurrencePattern</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurrencePattern} obj Optional instance to populate.
     * @return {module:model/RecurrencePattern} The populated <code>RecurrencePattern</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurrencePattern();

            if (data.hasOwnProperty('daily')) {
                obj['daily'] = DailyModel.constructFromObject(data['daily']);
            }
            if (data.hasOwnProperty('monthly')) {
                obj['monthly'] = MonthlyModel.constructFromObject(data['monthly']);
            }
            if (data.hasOwnProperty('weekly')) {
                obj['weekly'] = WeeklyModel.constructFromObject(data['weekly']);
            }
            if (data.hasOwnProperty('yearly')) {
                obj['yearly'] = YearlyModel.constructFromObject(data['yearly']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurrencePattern</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurrencePattern</code>.
     */
    static validateJSON(data) {
        // validate the optional field `daily`
        if (data['daily']) { // data not null
          DailyModel.validateJSON(data['daily']);
        }
        // validate the optional field `monthly`
        if (data['monthly']) { // data not null
          MonthlyModel.validateJSON(data['monthly']);
        }
        // validate the optional field `weekly`
        if (data['weekly']) { // data not null
          WeeklyModel.validateJSON(data['weekly']);
        }
        // validate the optional field `yearly`
        if (data['yearly']) { // data not null
          YearlyModel.validateJSON(data['yearly']);
        }

        return true;
    }


}



/**
 * @member {module:model/DailyModel} daily
 */
RecurrencePattern.prototype['daily'] = undefined;

/**
 * @member {module:model/MonthlyModel} monthly
 */
RecurrencePattern.prototype['monthly'] = undefined;

/**
 * @member {module:model/WeeklyModel} weekly
 */
RecurrencePattern.prototype['weekly'] = undefined;

/**
 * @member {module:model/YearlyModel} yearly
 */
RecurrencePattern.prototype['yearly'] = undefined;






export default RecurrencePattern;

