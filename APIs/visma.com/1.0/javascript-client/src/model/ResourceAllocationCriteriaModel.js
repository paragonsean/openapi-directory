/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LicenseUserType from './LicenseUserType';
import SalesProgress from './SalesProgress';

/**
 * The ResourceAllocationCriteriaModel model module.
 * @module model/ResourceAllocationCriteriaModel
 * @version 1.0
 */
class ResourceAllocationCriteriaModel {
    /**
     * Constructs a new <code>ResourceAllocationCriteriaModel</code>.
     * @alias module:model/ResourceAllocationCriteriaModel
     */
    constructor() { 
        
        ResourceAllocationCriteriaModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['useSalesProbability'] = true;
    }

    /**
     * Constructs a <code>ResourceAllocationCriteriaModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceAllocationCriteriaModel} obj Optional instance to populate.
     * @return {module:model/ResourceAllocationCriteriaModel} The populated <code>ResourceAllocationCriteriaModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceAllocationCriteriaModel();

            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('includeAbsences')) {
                obj['includeAbsences'] = ApiClient.convertToType(data['includeAbsences'], 'Boolean');
            }
            if (data.hasOwnProperty('phaseGuids')) {
                obj['phaseGuids'] = ApiClient.convertToType(data['phaseGuids'], ['String']);
            }
            if (data.hasOwnProperty('projectBusinessUnitGuids')) {
                obj['projectBusinessUnitGuids'] = ApiClient.convertToType(data['projectBusinessUnitGuids'], ['String']);
            }
            if (data.hasOwnProperty('projectGuids')) {
                obj['projectGuids'] = ApiClient.convertToType(data['projectGuids'], ['String']);
            }
            if (data.hasOwnProperty('projectManagerUserGuids')) {
                obj['projectManagerUserGuids'] = ApiClient.convertToType(data['projectManagerUserGuids'], ['String']);
            }
            if (data.hasOwnProperty('projectStatusTypeGuids')) {
                obj['projectStatusTypeGuids'] = ApiClient.convertToType(data['projectStatusTypeGuids'], ['String']);
            }
            if (data.hasOwnProperty('projectTagGuids')) {
                obj['projectTagGuids'] = ApiClient.convertToType(data['projectTagGuids'], ['String']);
            }
            if (data.hasOwnProperty('resourceAllocationGuids')) {
                obj['resourceAllocationGuids'] = ApiClient.convertToType(data['resourceAllocationGuids'], ['String']);
            }
            if (data.hasOwnProperty('salesProgresses')) {
                obj['salesProgresses'] = ApiClient.convertToType(data['salesProgresses'], [SalesProgress]);
            }
            if (data.hasOwnProperty('salesStatusTypeGuids')) {
                obj['salesStatusTypeGuids'] = ApiClient.convertToType(data['salesStatusTypeGuids'], ['String']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('superiorUserGuids')) {
                obj['superiorUserGuids'] = ApiClient.convertToType(data['superiorUserGuids'], ['String']);
            }
            if (data.hasOwnProperty('useSalesProbability')) {
                obj['useSalesProbability'] = ApiClient.convertToType(data['useSalesProbability'], 'Boolean');
            }
            if (data.hasOwnProperty('userBusinessUnitGuids')) {
                obj['userBusinessUnitGuids'] = ApiClient.convertToType(data['userBusinessUnitGuids'], ['String']);
            }
            if (data.hasOwnProperty('userGuids')) {
                obj['userGuids'] = ApiClient.convertToType(data['userGuids'], ['String']);
            }
            if (data.hasOwnProperty('userLicenseTypes')) {
                obj['userLicenseTypes'] = ApiClient.convertToType(data['userLicenseTypes'], [LicenseUserType]);
            }
            if (data.hasOwnProperty('userTagGuids')) {
                obj['userTagGuids'] = ApiClient.convertToType(data['userTagGuids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceAllocationCriteriaModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceAllocationCriteriaModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['phaseGuids'])) {
            throw new Error("Expected the field `phaseGuids` to be an array in the JSON data but got " + data['phaseGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectBusinessUnitGuids'])) {
            throw new Error("Expected the field `projectBusinessUnitGuids` to be an array in the JSON data but got " + data['projectBusinessUnitGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectGuids'])) {
            throw new Error("Expected the field `projectGuids` to be an array in the JSON data but got " + data['projectGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectManagerUserGuids'])) {
            throw new Error("Expected the field `projectManagerUserGuids` to be an array in the JSON data but got " + data['projectManagerUserGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectStatusTypeGuids'])) {
            throw new Error("Expected the field `projectStatusTypeGuids` to be an array in the JSON data but got " + data['projectStatusTypeGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectTagGuids'])) {
            throw new Error("Expected the field `projectTagGuids` to be an array in the JSON data but got " + data['projectTagGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceAllocationGuids'])) {
            throw new Error("Expected the field `resourceAllocationGuids` to be an array in the JSON data but got " + data['resourceAllocationGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['salesProgresses'])) {
            throw new Error("Expected the field `salesProgresses` to be an array in the JSON data but got " + data['salesProgresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['salesStatusTypeGuids'])) {
            throw new Error("Expected the field `salesStatusTypeGuids` to be an array in the JSON data but got " + data['salesStatusTypeGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['superiorUserGuids'])) {
            throw new Error("Expected the field `superiorUserGuids` to be an array in the JSON data but got " + data['superiorUserGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userBusinessUnitGuids'])) {
            throw new Error("Expected the field `userBusinessUnitGuids` to be an array in the JSON data but got " + data['userBusinessUnitGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userGuids'])) {
            throw new Error("Expected the field `userGuids` to be an array in the JSON data but got " + data['userGuids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userLicenseTypes'])) {
            throw new Error("Expected the field `userLicenseTypes` to be an array in the JSON data but got " + data['userLicenseTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userTagGuids'])) {
            throw new Error("Expected the field `userTagGuids` to be an array in the JSON data but got " + data['userTagGuids']);
        }

        return true;
    }


}



/**
 * @member {Date} endDate
 */
ResourceAllocationCriteriaModel.prototype['endDate'] = undefined;

/**
 * @member {Boolean} includeAbsences
 */
ResourceAllocationCriteriaModel.prototype['includeAbsences'] = undefined;

/**
 * @member {Array.<String>} phaseGuids
 */
ResourceAllocationCriteriaModel.prototype['phaseGuids'] = undefined;

/**
 * @member {Array.<String>} projectBusinessUnitGuids
 */
ResourceAllocationCriteriaModel.prototype['projectBusinessUnitGuids'] = undefined;

/**
 * @member {Array.<String>} projectGuids
 */
ResourceAllocationCriteriaModel.prototype['projectGuids'] = undefined;

/**
 * @member {Array.<String>} projectManagerUserGuids
 */
ResourceAllocationCriteriaModel.prototype['projectManagerUserGuids'] = undefined;

/**
 * @member {Array.<String>} projectStatusTypeGuids
 */
ResourceAllocationCriteriaModel.prototype['projectStatusTypeGuids'] = undefined;

/**
 * @member {Array.<String>} projectTagGuids
 */
ResourceAllocationCriteriaModel.prototype['projectTagGuids'] = undefined;

/**
 * @member {Array.<String>} resourceAllocationGuids
 */
ResourceAllocationCriteriaModel.prototype['resourceAllocationGuids'] = undefined;

/**
 * @member {Array.<module:model/SalesProgress>} salesProgresses
 */
ResourceAllocationCriteriaModel.prototype['salesProgresses'] = undefined;

/**
 * @member {Array.<String>} salesStatusTypeGuids
 */
ResourceAllocationCriteriaModel.prototype['salesStatusTypeGuids'] = undefined;

/**
 * @member {Date} startDate
 */
ResourceAllocationCriteriaModel.prototype['startDate'] = undefined;

/**
 * @member {Array.<String>} superiorUserGuids
 */
ResourceAllocationCriteriaModel.prototype['superiorUserGuids'] = undefined;

/**
 * @member {Boolean} useSalesProbability
 * @default true
 */
ResourceAllocationCriteriaModel.prototype['useSalesProbability'] = true;

/**
 * @member {Array.<String>} userBusinessUnitGuids
 */
ResourceAllocationCriteriaModel.prototype['userBusinessUnitGuids'] = undefined;

/**
 * @member {Array.<String>} userGuids
 */
ResourceAllocationCriteriaModel.prototype['userGuids'] = undefined;

/**
 * @member {Array.<module:model/LicenseUserType>} userLicenseTypes
 */
ResourceAllocationCriteriaModel.prototype['userLicenseTypes'] = undefined;

/**
 * @member {Array.<String>} userTagGuids
 */
ResourceAllocationCriteriaModel.prototype['userTagGuids'] = undefined;






export default ResourceAllocationCriteriaModel;

