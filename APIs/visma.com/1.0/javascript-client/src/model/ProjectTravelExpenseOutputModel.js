/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoiceSubModel from './InvoiceSubModel';
import ModelBaseWithRequiredGuid from './ModelBaseWithRequiredGuid';
import ModelWithName from './ModelWithName';
import MoneyOutputModel from './MoneyOutputModel';
import ProjectTravelExpenseBillingScheduleType from './ProjectTravelExpenseBillingScheduleType';
import ProjectTravelExpenseProjectSubModel from './ProjectTravelExpenseProjectSubModel';
import TravelExpenseSubModel from './TravelExpenseSubModel';
import TravelReimbursementSubModel from './TravelReimbursementSubModel';
import UserRequiredSubModel from './UserRequiredSubModel';
import UserWithFirstNameLastNameAndPhotoFileModel from './UserWithFirstNameLastNameAndPhotoFileModel';

/**
 * The ProjectTravelExpenseOutputModel model module.
 * @module model/ProjectTravelExpenseOutputModel
 * @version 1.0
 */
class ProjectTravelExpenseOutputModel {
    /**
     * Constructs a new <code>ProjectTravelExpenseOutputModel</code>.
     * @alias module:model/ProjectTravelExpenseOutputModel
     */
    constructor() { 
        
        ProjectTravelExpenseOutputModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['travelReimbursementRequired'] = true;
    }

    /**
     * Constructs a <code>ProjectTravelExpenseOutputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectTravelExpenseOutputModel} obj Optional instance to populate.
     * @return {module:model/ProjectTravelExpenseOutputModel} The populated <code>ProjectTravelExpenseOutputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectTravelExpenseOutputModel();

            if (data.hasOwnProperty('attachmentCount')) {
                obj['attachmentCount'] = ApiClient.convertToType(data['attachmentCount'], 'Number');
            }
            if (data.hasOwnProperty('billingDependencyPhase')) {
                obj['billingDependencyPhase'] = ModelWithName.constructFromObject(data['billingDependencyPhase']);
            }
            if (data.hasOwnProperty('billingSchedule')) {
                obj['billingSchedule'] = ProjectTravelExpenseBillingScheduleType.constructFromObject(data['billingSchedule']);
            }
            if (data.hasOwnProperty('costAccount')) {
                obj['costAccount'] = ModelWithName.constructFromObject(data['costAccount']);
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ModelWithName.constructFromObject(data['costCenter']);
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ModelWithName.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'Date');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = InvoiceSubModel.constructFromObject(data['invoice']);
            }
            if (data.hasOwnProperty('invoiceQuantity')) {
                obj['invoiceQuantity'] = ApiClient.convertToType(data['invoiceQuantity'], 'Number');
            }
            if (data.hasOwnProperty('invoiceRowComment')) {
                obj['invoiceRowComment'] = ApiClient.convertToType(data['invoiceRowComment'], 'String');
            }
            if (data.hasOwnProperty('invoiceRowDescription')) {
                obj['invoiceRowDescription'] = ApiClient.convertToType(data['invoiceRowDescription'], 'String');
            }
            if (data.hasOwnProperty('invoiceRowGuid')) {
                obj['invoiceRowGuid'] = ApiClient.convertToType(data['invoiceRowGuid'], 'String');
            }
            if (data.hasOwnProperty('isBillable')) {
                obj['isBillable'] = ApiClient.convertToType(data['isBillable'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdatedBy')) {
                obj['lastUpdatedBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['lastUpdatedBy']);
            }
            if (data.hasOwnProperty('lastUpdatedDateTime')) {
                obj['lastUpdatedDateTime'] = ApiClient.convertToType(data['lastUpdatedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('measurementUnit')) {
                obj['measurementUnit'] = ApiClient.convertToType(data['measurementUnit'], 'String');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ModelBaseWithRequiredGuid.constructFromObject(data['phase']);
            }
            if (data.hasOwnProperty('plannedBillingDate')) {
                obj['plannedBillingDate'] = ApiClient.convertToType(data['plannedBillingDate'], 'Date');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ProjectTravelExpenseProjectSubModel.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('purchaseVatRate')) {
                obj['purchaseVatRate'] = ApiClient.convertToType(data['purchaseVatRate'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('salesAccount')) {
                obj['salesAccount'] = ModelWithName.constructFromObject(data['salesAccount']);
            }
            if (data.hasOwnProperty('travelEndTime')) {
                obj['travelEndTime'] = ApiClient.convertToType(data['travelEndTime'], 'Date');
            }
            if (data.hasOwnProperty('travelExpense')) {
                obj['travelExpense'] = TravelExpenseSubModel.constructFromObject(data['travelExpense']);
            }
            if (data.hasOwnProperty('travelReimbursement')) {
                obj['travelReimbursement'] = TravelReimbursementSubModel.constructFromObject(data['travelReimbursement']);
            }
            if (data.hasOwnProperty('travelReimbursementRequired')) {
                obj['travelReimbursementRequired'] = ApiClient.convertToType(data['travelReimbursementRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('travelStartTime')) {
                obj['travelStartTime'] = ApiClient.convertToType(data['travelStartTime'], 'Date');
            }
            if (data.hasOwnProperty('unitCost')) {
                obj['unitCost'] = MoneyOutputModel.constructFromObject(data['unitCost']);
            }
            if (data.hasOwnProperty('unitCostExcludingPurchaseVat')) {
                obj['unitCostExcludingPurchaseVat'] = MoneyOutputModel.constructFromObject(data['unitCostExcludingPurchaseVat']);
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = MoneyOutputModel.constructFromObject(data['unitPrice']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserRequiredSubModel.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('vatRate')) {
                obj['vatRate'] = ApiClient.convertToType(data['vatRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectTravelExpenseOutputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectTravelExpenseOutputModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billingDependencyPhase`
        if (data['billingDependencyPhase']) { // data not null
          ModelWithName.validateJSON(data['billingDependencyPhase']);
        }
        // validate the optional field `costAccount`
        if (data['costAccount']) { // data not null
          ModelWithName.validateJSON(data['costAccount']);
        }
        // validate the optional field `costCenter`
        if (data['costCenter']) { // data not null
          ModelWithName.validateJSON(data['costCenter']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['createdBy']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          ModelWithName.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          InvoiceSubModel.validateJSON(data['invoice']);
        }
        // ensure the json data is a string
        if (data['invoiceRowComment'] && !(typeof data['invoiceRowComment'] === 'string' || data['invoiceRowComment'] instanceof String)) {
            throw new Error("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got " + data['invoiceRowComment']);
        }
        // ensure the json data is a string
        if (data['invoiceRowDescription'] && !(typeof data['invoiceRowDescription'] === 'string' || data['invoiceRowDescription'] instanceof String)) {
            throw new Error("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got " + data['invoiceRowDescription']);
        }
        // ensure the json data is a string
        if (data['invoiceRowGuid'] && !(typeof data['invoiceRowGuid'] === 'string' || data['invoiceRowGuid'] instanceof String)) {
            throw new Error("Expected the field `invoiceRowGuid` to be a primitive type in the JSON string but got " + data['invoiceRowGuid']);
        }
        // validate the optional field `lastUpdatedBy`
        if (data['lastUpdatedBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['lastUpdatedBy']);
        }
        // ensure the json data is a string
        if (data['measurementUnit'] && !(typeof data['measurementUnit'] === 'string' || data['measurementUnit'] instanceof String)) {
            throw new Error("Expected the field `measurementUnit` to be a primitive type in the JSON string but got " + data['measurementUnit']);
        }
        // validate the optional field `phase`
        if (data['phase']) { // data not null
          ModelBaseWithRequiredGuid.validateJSON(data['phase']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          ProjectTravelExpenseProjectSubModel.validateJSON(data['project']);
        }
        // validate the optional field `salesAccount`
        if (data['salesAccount']) { // data not null
          ModelWithName.validateJSON(data['salesAccount']);
        }
        // validate the optional field `travelExpense`
        if (data['travelExpense']) { // data not null
          TravelExpenseSubModel.validateJSON(data['travelExpense']);
        }
        // validate the optional field `travelReimbursement`
        if (data['travelReimbursement']) { // data not null
          TravelReimbursementSubModel.validateJSON(data['travelReimbursement']);
        }
        // validate the optional field `unitCost`
        if (data['unitCost']) { // data not null
          MoneyOutputModel.validateJSON(data['unitCost']);
        }
        // validate the optional field `unitCostExcludingPurchaseVat`
        if (data['unitCostExcludingPurchaseVat']) { // data not null
          MoneyOutputModel.validateJSON(data['unitCostExcludingPurchaseVat']);
        }
        // validate the optional field `unitPrice`
        if (data['unitPrice']) { // data not null
          MoneyOutputModel.validateJSON(data['unitPrice']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserRequiredSubModel.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {Number} attachmentCount
 */
ProjectTravelExpenseOutputModel.prototype['attachmentCount'] = undefined;

/**
 * @member {module:model/ModelWithName} billingDependencyPhase
 */
ProjectTravelExpenseOutputModel.prototype['billingDependencyPhase'] = undefined;

/**
 * @member {module:model/ProjectTravelExpenseBillingScheduleType} billingSchedule
 */
ProjectTravelExpenseOutputModel.prototype['billingSchedule'] = undefined;

/**
 * @member {module:model/ModelWithName} costAccount
 */
ProjectTravelExpenseOutputModel.prototype['costAccount'] = undefined;

/**
 * @member {module:model/ModelWithName} costCenter
 */
ProjectTravelExpenseOutputModel.prototype['costCenter'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} createdBy
 */
ProjectTravelExpenseOutputModel.prototype['createdBy'] = undefined;

/**
 * @member {Date} createdDateTime
 */
ProjectTravelExpenseOutputModel.prototype['createdDateTime'] = undefined;

/**
 * @member {module:model/ModelWithName} customer
 */
ProjectTravelExpenseOutputModel.prototype['customer'] = undefined;

/**
 * @member {String} description
 */
ProjectTravelExpenseOutputModel.prototype['description'] = undefined;

/**
 * @member {Date} eventDate
 */
ProjectTravelExpenseOutputModel.prototype['eventDate'] = undefined;

/**
 * @member {String} guid
 */
ProjectTravelExpenseOutputModel.prototype['guid'] = undefined;

/**
 * @member {module:model/InvoiceSubModel} invoice
 */
ProjectTravelExpenseOutputModel.prototype['invoice'] = undefined;

/**
 * @member {Number} invoiceQuantity
 */
ProjectTravelExpenseOutputModel.prototype['invoiceQuantity'] = undefined;

/**
 * @member {String} invoiceRowComment
 */
ProjectTravelExpenseOutputModel.prototype['invoiceRowComment'] = undefined;

/**
 * @member {String} invoiceRowDescription
 */
ProjectTravelExpenseOutputModel.prototype['invoiceRowDescription'] = undefined;

/**
 * @member {String} invoiceRowGuid
 */
ProjectTravelExpenseOutputModel.prototype['invoiceRowGuid'] = undefined;

/**
 * @member {Boolean} isBillable
 */
ProjectTravelExpenseOutputModel.prototype['isBillable'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} lastUpdatedBy
 */
ProjectTravelExpenseOutputModel.prototype['lastUpdatedBy'] = undefined;

/**
 * @member {Date} lastUpdatedDateTime
 */
ProjectTravelExpenseOutputModel.prototype['lastUpdatedDateTime'] = undefined;

/**
 * @member {String} measurementUnit
 */
ProjectTravelExpenseOutputModel.prototype['measurementUnit'] = undefined;

/**
 * @member {module:model/ModelBaseWithRequiredGuid} phase
 */
ProjectTravelExpenseOutputModel.prototype['phase'] = undefined;

/**
 * @member {Date} plannedBillingDate
 */
ProjectTravelExpenseOutputModel.prototype['plannedBillingDate'] = undefined;

/**
 * @member {module:model/ProjectTravelExpenseProjectSubModel} project
 */
ProjectTravelExpenseOutputModel.prototype['project'] = undefined;

/**
 * @member {Number} purchaseVatRate
 */
ProjectTravelExpenseOutputModel.prototype['purchaseVatRate'] = undefined;

/**
 * @member {Number} quantity
 */
ProjectTravelExpenseOutputModel.prototype['quantity'] = undefined;

/**
 * @member {module:model/ModelWithName} salesAccount
 */
ProjectTravelExpenseOutputModel.prototype['salesAccount'] = undefined;

/**
 * @member {Date} travelEndTime
 */
ProjectTravelExpenseOutputModel.prototype['travelEndTime'] = undefined;

/**
 * @member {module:model/TravelExpenseSubModel} travelExpense
 */
ProjectTravelExpenseOutputModel.prototype['travelExpense'] = undefined;

/**
 * @member {module:model/TravelReimbursementSubModel} travelReimbursement
 */
ProjectTravelExpenseOutputModel.prototype['travelReimbursement'] = undefined;

/**
 * @member {Boolean} travelReimbursementRequired
 * @default true
 */
ProjectTravelExpenseOutputModel.prototype['travelReimbursementRequired'] = true;

/**
 * @member {Date} travelStartTime
 */
ProjectTravelExpenseOutputModel.prototype['travelStartTime'] = undefined;

/**
 * @member {module:model/MoneyOutputModel} unitCost
 */
ProjectTravelExpenseOutputModel.prototype['unitCost'] = undefined;

/**
 * @member {module:model/MoneyOutputModel} unitCostExcludingPurchaseVat
 */
ProjectTravelExpenseOutputModel.prototype['unitCostExcludingPurchaseVat'] = undefined;

/**
 * @member {module:model/MoneyOutputModel} unitPrice
 */
ProjectTravelExpenseOutputModel.prototype['unitPrice'] = undefined;

/**
 * @member {module:model/UserRequiredSubModel} user
 */
ProjectTravelExpenseOutputModel.prototype['user'] = undefined;

/**
 * @member {Number} vatRate
 */
ProjectTravelExpenseOutputModel.prototype['vatRate'] = undefined;






export default ProjectTravelExpenseOutputModel;

