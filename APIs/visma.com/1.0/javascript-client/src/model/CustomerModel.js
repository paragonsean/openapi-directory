/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerCurrency from './CustomerCurrency';
import CustomerHeadquarterAddress from './CustomerHeadquarterAddress';
import CustomerInvoicingVat from './CustomerInvoicingVat';
import CustomerLanguage from './CustomerLanguage';
import ModelWithName from './ModelWithName';
import UserWithFirstNameLastNameAndPhotoFileModel from './UserWithFirstNameLastNameAndPhotoFileModel';

/**
 * The CustomerModel model module.
 * @module model/CustomerModel
 * @version 1.0
 */
class CustomerModel {
    /**
     * Constructs a new <code>CustomerModel</code>.
     * @alias module:model/CustomerModel
     * @param name {String} 
     */
    constructor(name) { 
        
        CustomerModel.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['isActive'] = true;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CustomerModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerModel} obj Optional instance to populate.
     * @return {module:model/CustomerModel} The populated <code>CustomerModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerModel();

            if (data.hasOwnProperty('annualRevenue')) {
                obj['annualRevenue'] = ApiClient.convertToType(data['annualRevenue'], 'Number');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CustomerCurrency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('eInvoiceAddress')) {
                obj['eInvoiceAddress'] = ApiClient.convertToType(data['eInvoiceAddress'], 'String');
            }
            if (data.hasOwnProperty('eInvoiceOperator')) {
                obj['eInvoiceOperator'] = ApiClient.convertToType(data['eInvoiceOperator'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('headquarterAddress')) {
                obj['headquarterAddress'] = CustomerHeadquarterAddress.constructFromObject(data['headquarterAddress']);
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ModelWithName.constructFromObject(data['industry']);
            }
            if (data.hasOwnProperty('invoiceTemplate')) {
                obj['invoiceTemplate'] = ModelWithName.constructFromObject(data['invoiceTemplate']);
            }
            if (data.hasOwnProperty('invoicingVat')) {
                obj['invoicingVat'] = CustomerInvoicingVat.constructFromObject(data['invoicingVat']);
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isInternal')) {
                obj['isInternal'] = ApiClient.convertToType(data['isInternal'], 'Boolean');
            }
            if (data.hasOwnProperty('kvkNumber')) {
                obj['kvkNumber'] = ApiClient.convertToType(data['kvkNumber'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = CustomerLanguage.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('lastUpdatedBy')) {
                obj['lastUpdatedBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['lastUpdatedBy']);
            }
            if (data.hasOwnProperty('lastUpdatedDateTime')) {
                obj['lastUpdatedDateTime'] = ApiClient.convertToType(data['lastUpdatedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('numberOfEmployees')) {
                obj['numberOfEmployees'] = ApiClient.convertToType(data['numberOfEmployees'], 'Number');
            }
            if (data.hasOwnProperty('overdueInterest')) {
                obj['overdueInterest'] = ApiClient.convertToType(data['overdueInterest'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('paymentTerm')) {
                obj['paymentTerm'] = ApiClient.convertToType(data['paymentTerm'], 'Number');
            }
            if (data.hasOwnProperty('pricelist')) {
                obj['pricelist'] = ModelWithName.constructFromObject(data['pricelist']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ModelWithName.constructFromObject(data['timezone']);
            }
            if (data.hasOwnProperty('vatNumber')) {
                obj['vatNumber'] = ApiClient.convertToType(data['vatNumber'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['createdBy']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          CustomerCurrency.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['eInvoiceAddress'] && !(typeof data['eInvoiceAddress'] === 'string' || data['eInvoiceAddress'] instanceof String)) {
            throw new Error("Expected the field `eInvoiceAddress` to be a primitive type in the JSON string but got " + data['eInvoiceAddress']);
        }
        // ensure the json data is a string
        if (data['eInvoiceOperator'] && !(typeof data['eInvoiceOperator'] === 'string' || data['eInvoiceOperator'] instanceof String)) {
            throw new Error("Expected the field `eInvoiceOperator` to be a primitive type in the JSON string but got " + data['eInvoiceOperator']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // validate the optional field `headquarterAddress`
        if (data['headquarterAddress']) { // data not null
          CustomerHeadquarterAddress.validateJSON(data['headquarterAddress']);
        }
        // validate the optional field `industry`
        if (data['industry']) { // data not null
          ModelWithName.validateJSON(data['industry']);
        }
        // validate the optional field `invoiceTemplate`
        if (data['invoiceTemplate']) { // data not null
          ModelWithName.validateJSON(data['invoiceTemplate']);
        }
        // validate the optional field `invoicingVat`
        if (data['invoicingVat']) { // data not null
          CustomerInvoicingVat.validateJSON(data['invoicingVat']);
        }
        // ensure the json data is a string
        if (data['kvkNumber'] && !(typeof data['kvkNumber'] === 'string' || data['kvkNumber'] instanceof String)) {
            throw new Error("Expected the field `kvkNumber` to be a primitive type in the JSON string but got " + data['kvkNumber']);
        }
        // validate the optional field `language`
        if (data['language']) { // data not null
          CustomerLanguage.validateJSON(data['language']);
        }
        // validate the optional field `lastUpdatedBy`
        if (data['lastUpdatedBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['lastUpdatedBy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['owner']);
        }
        // validate the optional field `pricelist`
        if (data['pricelist']) { // data not null
          ModelWithName.validateJSON(data['pricelist']);
        }
        // validate the optional field `timezone`
        if (data['timezone']) { // data not null
          ModelWithName.validateJSON(data['timezone']);
        }
        // ensure the json data is a string
        if (data['vatNumber'] && !(typeof data['vatNumber'] === 'string' || data['vatNumber'] instanceof String)) {
            throw new Error("Expected the field `vatNumber` to be a primitive type in the JSON string but got " + data['vatNumber']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

CustomerModel.RequiredProperties = ["name"];

/**
 * @member {Number} annualRevenue
 */
CustomerModel.prototype['annualRevenue'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} createdBy
 */
CustomerModel.prototype['createdBy'] = undefined;

/**
 * @member {Date} createdDateTime
 */
CustomerModel.prototype['createdDateTime'] = undefined;

/**
 * @member {module:model/CustomerCurrency} currency
 */
CustomerModel.prototype['currency'] = undefined;

/**
 * @member {String} eInvoiceAddress
 */
CustomerModel.prototype['eInvoiceAddress'] = undefined;

/**
 * @member {String} eInvoiceOperator
 */
CustomerModel.prototype['eInvoiceOperator'] = undefined;

/**
 * @member {String} email
 */
CustomerModel.prototype['email'] = undefined;

/**
 * @member {String} guid
 */
CustomerModel.prototype['guid'] = undefined;

/**
 * @member {module:model/CustomerHeadquarterAddress} headquarterAddress
 */
CustomerModel.prototype['headquarterAddress'] = undefined;

/**
 * @member {module:model/ModelWithName} industry
 */
CustomerModel.prototype['industry'] = undefined;

/**
 * @member {module:model/ModelWithName} invoiceTemplate
 */
CustomerModel.prototype['invoiceTemplate'] = undefined;

/**
 * @member {module:model/CustomerInvoicingVat} invoicingVat
 */
CustomerModel.prototype['invoicingVat'] = undefined;

/**
 * @member {Boolean} isActive
 * @default true
 */
CustomerModel.prototype['isActive'] = true;

/**
 * @member {Boolean} isInternal
 */
CustomerModel.prototype['isInternal'] = undefined;

/**
 * @member {String} kvkNumber
 */
CustomerModel.prototype['kvkNumber'] = undefined;

/**
 * @member {module:model/CustomerLanguage} language
 */
CustomerModel.prototype['language'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} lastUpdatedBy
 */
CustomerModel.prototype['lastUpdatedBy'] = undefined;

/**
 * @member {Date} lastUpdatedDateTime
 */
CustomerModel.prototype['lastUpdatedDateTime'] = undefined;

/**
 * @member {String} name
 */
CustomerModel.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
CustomerModel.prototype['notes'] = undefined;

/**
 * @member {Number} number
 */
CustomerModel.prototype['number'] = undefined;

/**
 * @member {Number} numberOfEmployees
 */
CustomerModel.prototype['numberOfEmployees'] = undefined;

/**
 * @member {Number} overdueInterest
 */
CustomerModel.prototype['overdueInterest'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} owner
 */
CustomerModel.prototype['owner'] = undefined;

/**
 * @member {Number} paymentTerm
 */
CustomerModel.prototype['paymentTerm'] = undefined;

/**
 * @member {module:model/ModelWithName} pricelist
 */
CustomerModel.prototype['pricelist'] = undefined;

/**
 * @member {module:model/ModelWithName} timezone
 */
CustomerModel.prototype['timezone'] = undefined;

/**
 * @member {String} vatNumber
 */
CustomerModel.prototype['vatNumber'] = undefined;

/**
 * @member {String} website
 */
CustomerModel.prototype['website'] = undefined;






export default CustomerModel;

