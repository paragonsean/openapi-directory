/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityActivityType from './ActivityActivityType';
import ActivityCustomer from './ActivityCustomer';
import ActivityOwnerModel from './ActivityOwnerModel';
import ActivityPhase from './ActivityPhase';
import ActivityRecurrenceModel from './ActivityRecurrenceModel';
import ModelWithName from './ModelWithName';
import RecurrenceType from './RecurrenceType';
import UserWithFirstNameLastNameAndPhotoFileModel from './UserWithFirstNameLastNameAndPhotoFileModel';

/**
 * The ActivityModel model module.
 * @module model/ActivityModel
 * @version 1.0
 */
class ActivityModel {
    /**
     * Constructs a new <code>ActivityModel</code>.
     * @alias module:model/ActivityModel
     * @param activityType {module:model/ActivityActivityType} 
     * @param name {String} 
     * @param ownerUser {module:model/ActivityOwnerModel} 
     * @param startDateTime {Date} 
     */
    constructor(activityType, name, ownerUser, startDateTime) { 
        
        ActivityModel.initialize(this, activityType, name, ownerUser, startDateTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activityType, name, ownerUser, startDateTime) { 
        obj['activityType'] = activityType;
        obj['name'] = name;
        obj['ownerUser'] = ownerUser;
        obj['startDateTime'] = startDateTime;
    }

    /**
     * Constructs a <code>ActivityModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityModel} obj Optional instance to populate.
     * @return {module:model/ActivityModel} The populated <code>ActivityModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityModel();

            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ActivityActivityType.constructFromObject(data['activityType']);
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ActivityCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'Date');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('hasDuration')) {
                obj['hasDuration'] = ApiClient.convertToType(data['hasDuration'], 'Boolean');
            }
            if (data.hasOwnProperty('hasHours')) {
                obj['hasHours'] = ApiClient.convertToType(data['hasHours'], 'Boolean');
            }
            if (data.hasOwnProperty('isAllDay')) {
                obj['isAllDay'] = ApiClient.convertToType(data['isAllDay'], 'Boolean');
            }
            if (data.hasOwnProperty('isClosed')) {
                obj['isClosed'] = ApiClient.convertToType(data['isClosed'], 'Boolean');
            }
            if (data.hasOwnProperty('isUnassigned')) {
                obj['isUnassigned'] = ApiClient.convertToType(data['isUnassigned'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdatedBy')) {
                obj['lastUpdatedBy'] = UserWithFirstNameLastNameAndPhotoFileModel.constructFromObject(data['lastUpdatedBy']);
            }
            if (data.hasOwnProperty('lastUpdatedDateTime')) {
                obj['lastUpdatedDateTime'] = ApiClient.convertToType(data['lastUpdatedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('ownerUser')) {
                obj['ownerUser'] = ActivityOwnerModel.constructFromObject(data['ownerUser']);
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ActivityPhase.constructFromObject(data['phase']);
            }
            if (data.hasOwnProperty('projectTaskStatus')) {
                obj['projectTaskStatus'] = ModelWithName.constructFromObject(data['projectTaskStatus']);
            }
            if (data.hasOwnProperty('recurrence')) {
                obj['recurrence'] = ActivityRecurrenceModel.constructFromObject(data['recurrence']);
            }
            if (data.hasOwnProperty('recurrenceParentActivityGuid')) {
                obj['recurrenceParentActivityGuid'] = ApiClient.convertToType(data['recurrenceParentActivityGuid'], 'String');
            }
            if (data.hasOwnProperty('recurrenceRule')) {
                obj['recurrenceRule'] = ApiClient.convertToType(data['recurrenceRule'], 'String');
            }
            if (data.hasOwnProperty('recurrenceType')) {
                obj['recurrenceType'] = RecurrenceType.constructFromObject(data['recurrenceType']);
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActivityModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `activityType`
        if (data['activityType']) { // data not null
          ActivityActivityType.validateJSON(data['activityType']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['createdBy']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          ActivityCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // validate the optional field `lastUpdatedBy`
        if (data['lastUpdatedBy']) { // data not null
          UserWithFirstNameLastNameAndPhotoFileModel.validateJSON(data['lastUpdatedBy']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // validate the optional field `ownerUser`
        if (data['ownerUser']) { // data not null
          ActivityOwnerModel.validateJSON(data['ownerUser']);
        }
        // validate the optional field `phase`
        if (data['phase']) { // data not null
          ActivityPhase.validateJSON(data['phase']);
        }
        // validate the optional field `projectTaskStatus`
        if (data['projectTaskStatus']) { // data not null
          ModelWithName.validateJSON(data['projectTaskStatus']);
        }
        // validate the optional field `recurrence`
        if (data['recurrence']) { // data not null
          ActivityRecurrenceModel.validateJSON(data['recurrence']);
        }
        // ensure the json data is a string
        if (data['recurrenceParentActivityGuid'] && !(typeof data['recurrenceParentActivityGuid'] === 'string' || data['recurrenceParentActivityGuid'] instanceof String)) {
            throw new Error("Expected the field `recurrenceParentActivityGuid` to be a primitive type in the JSON string but got " + data['recurrenceParentActivityGuid']);
        }
        // ensure the json data is a string
        if (data['recurrenceRule'] && !(typeof data['recurrenceRule'] === 'string' || data['recurrenceRule'] instanceof String)) {
            throw new Error("Expected the field `recurrenceRule` to be a primitive type in the JSON string but got " + data['recurrenceRule']);
        }

        return true;
    }


}

ActivityModel.RequiredProperties = ["activityType", "name", "ownerUser", "startDateTime"];

/**
 * @member {module:model/ActivityActivityType} activityType
 */
ActivityModel.prototype['activityType'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} createdBy
 */
ActivityModel.prototype['createdBy'] = undefined;

/**
 * @member {Date} createdDateTime
 */
ActivityModel.prototype['createdDateTime'] = undefined;

/**
 * @member {module:model/ActivityCustomer} customer
 */
ActivityModel.prototype['customer'] = undefined;

/**
 * @member {Date} endDateTime
 */
ActivityModel.prototype['endDateTime'] = undefined;

/**
 * @member {String} guid
 */
ActivityModel.prototype['guid'] = undefined;

/**
 * @member {Boolean} hasDuration
 */
ActivityModel.prototype['hasDuration'] = undefined;

/**
 * @member {Boolean} hasHours
 */
ActivityModel.prototype['hasHours'] = undefined;

/**
 * @member {Boolean} isAllDay
 */
ActivityModel.prototype['isAllDay'] = undefined;

/**
 * @member {Boolean} isClosed
 */
ActivityModel.prototype['isClosed'] = undefined;

/**
 * @member {Boolean} isUnassigned
 */
ActivityModel.prototype['isUnassigned'] = undefined;

/**
 * @member {module:model/UserWithFirstNameLastNameAndPhotoFileModel} lastUpdatedBy
 */
ActivityModel.prototype['lastUpdatedBy'] = undefined;

/**
 * @member {Date} lastUpdatedDateTime
 */
ActivityModel.prototype['lastUpdatedDateTime'] = undefined;

/**
 * @member {String} location
 */
ActivityModel.prototype['location'] = undefined;

/**
 * @member {String} name
 */
ActivityModel.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
ActivityModel.prototype['notes'] = undefined;

/**
 * @member {module:model/ActivityOwnerModel} ownerUser
 */
ActivityModel.prototype['ownerUser'] = undefined;

/**
 * @member {module:model/ActivityPhase} phase
 */
ActivityModel.prototype['phase'] = undefined;

/**
 * @member {module:model/ModelWithName} projectTaskStatus
 */
ActivityModel.prototype['projectTaskStatus'] = undefined;

/**
 * @member {module:model/ActivityRecurrenceModel} recurrence
 */
ActivityModel.prototype['recurrence'] = undefined;

/**
 * @member {String} recurrenceParentActivityGuid
 */
ActivityModel.prototype['recurrenceParentActivityGuid'] = undefined;

/**
 * @member {String} recurrenceRule
 */
ActivityModel.prototype['recurrenceRule'] = undefined;

/**
 * @member {module:model/RecurrenceType} recurrenceType
 */
ActivityModel.prototype['recurrenceType'] = undefined;

/**
 * @member {Date} startDateTime
 */
ActivityModel.prototype['startDateTime'] = undefined;






export default ActivityModel;

