/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleInputModel from './SimpleInputModel';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';

/**
 * The RoleAllocationInputModel model module.
 * @module model/RoleAllocationInputModel
 * @version 1.0
 */
class RoleAllocationInputModel {
    /**
     * Constructs a new <code>RoleAllocationInputModel</code>.
     * @alias module:model/RoleAllocationInputModel
     * @param allocationHours {Number} 
     * @param project {module:model/SimpleInputRequiredModel} 
     * @param role {module:model/SimpleInputRequiredModel} 
     */
    constructor(allocationHours, project, role) { 
        
        RoleAllocationInputModel.initialize(this, allocationHours, project, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allocationHours, project, role) { 
        obj['allocationHours'] = allocationHours;
        obj['project'] = project;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>RoleAllocationInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleAllocationInputModel} obj Optional instance to populate.
     * @return {module:model/RoleAllocationInputModel} The populated <code>RoleAllocationInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleAllocationInputModel();

            if (data.hasOwnProperty('allocationHours')) {
                obj['allocationHours'] = ApiClient.convertToType(data['allocationHours'], 'Number');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = SimpleInputModel.constructFromObject(data['phase']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = SimpleInputRequiredModel.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = SimpleInputRequiredModel.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleAllocationInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleAllocationInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoleAllocationInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `phase`
        if (data['phase']) { // data not null
          SimpleInputModel.validateJSON(data['phase']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['project']);
        }
        // validate the optional field `role`
        if (data['role']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['role']);
        }

        return true;
    }


}

RoleAllocationInputModel.RequiredProperties = ["allocationHours", "project", "role"];

/**
 * @member {Number} allocationHours
 */
RoleAllocationInputModel.prototype['allocationHours'] = undefined;

/**
 * @member {Date} endDate
 */
RoleAllocationInputModel.prototype['endDate'] = undefined;

/**
 * @member {module:model/SimpleInputModel} phase
 */
RoleAllocationInputModel.prototype['phase'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} project
 */
RoleAllocationInputModel.prototype['project'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} role
 */
RoleAllocationInputModel.prototype['role'] = undefined;

/**
 * @member {Date} startDate
 */
RoleAllocationInputModel.prototype['startDate'] = undefined;






export default RoleAllocationInputModel;

