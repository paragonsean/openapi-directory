/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountryLanguage from './CountryLanguage';
import CountryRegionsStatus from './CountryRegionsStatus';
import CountryTimezone from './CountryTimezone';
import CurrencyBaseModel from './CurrencyBaseModel';

/**
 * The CountryModel model module.
 * @module model/CountryModel
 * @version 1.0
 */
class CountryModel {
    /**
     * Constructs a new <code>CountryModel</code>.
     * @alias module:model/CountryModel
     */
    constructor() { 
        
        CountryModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CountryModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountryModel} obj Optional instance to populate.
     * @return {module:model/CountryModel} The populated <code>CountryModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountryModel();

            if (data.hasOwnProperty('code2')) {
                obj['code2'] = ApiClient.convertToType(data['code2'], 'String');
            }
            if (data.hasOwnProperty('code3')) {
                obj['code3'] = ApiClient.convertToType(data['code3'], 'String');
            }
            if (data.hasOwnProperty('companyRegisterUrl')) {
                obj['companyRegisterUrl'] = ApiClient.convertToType(data['companyRegisterUrl'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyBaseModel.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('defaultCulture')) {
                obj['defaultCulture'] = ApiClient.convertToType(data['defaultCulture'], 'String');
            }
            if (data.hasOwnProperty('defaultLanguage')) {
                obj['defaultLanguage'] = CountryLanguage.constructFromObject(data['defaultLanguage']);
            }
            if (data.hasOwnProperty('englishName')) {
                obj['englishName'] = ApiClient.convertToType(data['englishName'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('hasRegions')) {
                obj['hasRegions'] = CountryRegionsStatus.constructFromObject(data['hasRegions']);
            }
            if (data.hasOwnProperty('isInEU')) {
                obj['isInEU'] = ApiClient.convertToType(data['isInEU'], 'Boolean');
            }
            if (data.hasOwnProperty('isRegistrationCountry')) {
                obj['isRegistrationCountry'] = ApiClient.convertToType(data['isRegistrationCountry'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = CountryTimezone.constructFromObject(data['timezone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountryModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountryModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code2'] && !(typeof data['code2'] === 'string' || data['code2'] instanceof String)) {
            throw new Error("Expected the field `code2` to be a primitive type in the JSON string but got " + data['code2']);
        }
        // ensure the json data is a string
        if (data['code3'] && !(typeof data['code3'] === 'string' || data['code3'] instanceof String)) {
            throw new Error("Expected the field `code3` to be a primitive type in the JSON string but got " + data['code3']);
        }
        // ensure the json data is a string
        if (data['companyRegisterUrl'] && !(typeof data['companyRegisterUrl'] === 'string' || data['companyRegisterUrl'] instanceof String)) {
            throw new Error("Expected the field `companyRegisterUrl` to be a primitive type in the JSON string but got " + data['companyRegisterUrl']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          CurrencyBaseModel.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['defaultCulture'] && !(typeof data['defaultCulture'] === 'string' || data['defaultCulture'] instanceof String)) {
            throw new Error("Expected the field `defaultCulture` to be a primitive type in the JSON string but got " + data['defaultCulture']);
        }
        // validate the optional field `defaultLanguage`
        if (data['defaultLanguage']) { // data not null
          CountryLanguage.validateJSON(data['defaultLanguage']);
        }
        // ensure the json data is a string
        if (data['englishName'] && !(typeof data['englishName'] === 'string' || data['englishName'] instanceof String)) {
            throw new Error("Expected the field `englishName` to be a primitive type in the JSON string but got " + data['englishName']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `timezone`
        if (data['timezone']) { // data not null
          CountryTimezone.validateJSON(data['timezone']);
        }

        return true;
    }


}



/**
 * @member {String} code2
 */
CountryModel.prototype['code2'] = undefined;

/**
 * @member {String} code3
 */
CountryModel.prototype['code3'] = undefined;

/**
 * @member {String} companyRegisterUrl
 */
CountryModel.prototype['companyRegisterUrl'] = undefined;

/**
 * @member {module:model/CurrencyBaseModel} currency
 */
CountryModel.prototype['currency'] = undefined;

/**
 * @member {String} defaultCulture
 */
CountryModel.prototype['defaultCulture'] = undefined;

/**
 * @member {module:model/CountryLanguage} defaultLanguage
 */
CountryModel.prototype['defaultLanguage'] = undefined;

/**
 * @member {String} englishName
 */
CountryModel.prototype['englishName'] = undefined;

/**
 * @member {String} guid
 */
CountryModel.prototype['guid'] = undefined;

/**
 * @member {module:model/CountryRegionsStatus} hasRegions
 */
CountryModel.prototype['hasRegions'] = undefined;

/**
 * @member {Boolean} isInEU
 */
CountryModel.prototype['isInEU'] = undefined;

/**
 * @member {Boolean} isRegistrationCountry
 */
CountryModel.prototype['isRegistrationCountry'] = undefined;

/**
 * @member {String} name
 */
CountryModel.prototype['name'] = undefined;

/**
 * @member {module:model/CountryTimezone} timezone
 */
CountryModel.prototype['timezone'] = undefined;






export default CountryModel;

