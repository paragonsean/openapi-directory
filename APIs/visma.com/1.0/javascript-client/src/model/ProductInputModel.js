/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoneyInputModelWithNullableAmount from './MoneyInputModelWithNullableAmount';
import ProductType from './ProductType';
import SimpleInputModel from './SimpleInputModel';

/**
 * The ProductInputModel model module.
 * @module model/ProductInputModel
 * @version 1.0
 */
class ProductInputModel {
    /**
     * Constructs a new <code>ProductInputModel</code>.
     * @alias module:model/ProductInputModel
     * @param name {String} 
     */
    constructor(name) { 
        
        ProductInputModel.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['isActive'] = true;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ProductInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductInputModel} obj Optional instance to populate.
     * @return {module:model/ProductInputModel} The populated <code>ProductInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductInputModel();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('measurementUnit')) {
                obj['measurementUnit'] = ApiClient.convertToType(data['measurementUnit'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('productCategory')) {
                obj['productCategory'] = SimpleInputModel.constructFromObject(data['productCategory']);
            }
            if (data.hasOwnProperty('proposalDescription')) {
                obj['proposalDescription'] = ApiClient.convertToType(data['proposalDescription'], 'String');
            }
            if (data.hasOwnProperty('salesAccount')) {
                obj['salesAccount'] = SimpleInputModel.constructFromObject(data['salesAccount']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ProductType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('unitCost')) {
                obj['unitCost'] = MoneyInputModelWithNullableAmount.constructFromObject(data['unitCost']);
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = MoneyInputModelWithNullableAmount.constructFromObject(data['unitPrice']);
            }
            if (data.hasOwnProperty('vatRate')) {
                obj['vatRate'] = ApiClient.convertToType(data['vatRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['measurementUnit'] && !(typeof data['measurementUnit'] === 'string' || data['measurementUnit'] instanceof String)) {
            throw new Error("Expected the field `measurementUnit` to be a primitive type in the JSON string but got " + data['measurementUnit']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `productCategory`
        if (data['productCategory']) { // data not null
          SimpleInputModel.validateJSON(data['productCategory']);
        }
        // ensure the json data is a string
        if (data['proposalDescription'] && !(typeof data['proposalDescription'] === 'string' || data['proposalDescription'] instanceof String)) {
            throw new Error("Expected the field `proposalDescription` to be a primitive type in the JSON string but got " + data['proposalDescription']);
        }
        // validate the optional field `salesAccount`
        if (data['salesAccount']) { // data not null
          SimpleInputModel.validateJSON(data['salesAccount']);
        }
        // validate the optional field `unitCost`
        if (data['unitCost']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['unitCost']);
        }
        // validate the optional field `unitPrice`
        if (data['unitPrice']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['unitPrice']);
        }

        return true;
    }


}

ProductInputModel.RequiredProperties = ["name"];

/**
 * @member {String} code
 */
ProductInputModel.prototype['code'] = undefined;

/**
 * @member {Boolean} isActive
 * @default true
 */
ProductInputModel.prototype['isActive'] = true;

/**
 * @member {String} measurementUnit
 */
ProductInputModel.prototype['measurementUnit'] = undefined;

/**
 * @member {String} name
 */
ProductInputModel.prototype['name'] = undefined;

/**
 * @member {module:model/SimpleInputModel} productCategory
 */
ProductInputModel.prototype['productCategory'] = undefined;

/**
 * @member {String} proposalDescription
 */
ProductInputModel.prototype['proposalDescription'] = undefined;

/**
 * @member {module:model/SimpleInputModel} salesAccount
 */
ProductInputModel.prototype['salesAccount'] = undefined;

/**
 * @member {module:model/ProductType} type
 */
ProductInputModel.prototype['type'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} unitCost
 */
ProductInputModel.prototype['unitCost'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} unitPrice
 */
ProductInputModel.prototype['unitPrice'] = undefined;

/**
 * @member {Number} vatRate
 */
ProductInputModel.prototype['vatRate'] = undefined;






export default ProductInputModel;

