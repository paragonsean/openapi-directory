/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FreeTextInputModel from './FreeTextInputModel';
import SimpleInputModel from './SimpleInputModel';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';

/**
 * The ProposalInputModel model module.
 * @module model/ProposalInputModel
 * @version 1.0
 */
class ProposalInputModel {
    /**
     * Constructs a new <code>ProposalInputModel</code>.
     * @alias module:model/ProposalInputModel
     * @param name {String} 
     * @param project {module:model/SimpleInputRequiredModel} 
     */
    constructor(name, project) { 
        
        ProposalInputModel.initialize(this, name, project);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, project) { 
        obj['name'] = name;
        obj['project'] = project;
    }

    /**
     * Constructs a <code>ProposalInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProposalInputModel} obj Optional instance to populate.
     * @return {module:model/ProposalInputModel} The populated <code>ProposalInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProposalInputModel();

            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = SimpleInputModel.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('culture')) {
                obj['culture'] = SimpleInputModel.constructFromObject(data['culture']);
            }
            if (data.hasOwnProperty('customerContactPerson')) {
                obj['customerContactPerson'] = SimpleInputModel.constructFromObject(data['customerContactPerson']);
            }
            if (data.hasOwnProperty('freeText1')) {
                obj['freeText1'] = FreeTextInputModel.constructFromObject(data['freeText1']);
            }
            if (data.hasOwnProperty('freeText2')) {
                obj['freeText2'] = FreeTextInputModel.constructFromObject(data['freeText2']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = SimpleInputModel.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = SimpleInputRequiredModel.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('proposalDate')) {
                obj['proposalDate'] = ApiClient.convertToType(data['proposalDate'], 'Date');
            }
            if (data.hasOwnProperty('proposalStatus')) {
                obj['proposalStatus'] = SimpleInputModel.constructFromObject(data['proposalStatus']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProposalInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProposalInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProposalInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          SimpleInputModel.validateJSON(data['billingAddress']);
        }
        // validate the optional field `culture`
        if (data['culture']) { // data not null
          SimpleInputModel.validateJSON(data['culture']);
        }
        // validate the optional field `customerContactPerson`
        if (data['customerContactPerson']) { // data not null
          SimpleInputModel.validateJSON(data['customerContactPerson']);
        }
        // validate the optional field `freeText1`
        if (data['freeText1']) { // data not null
          FreeTextInputModel.validateJSON(data['freeText1']);
        }
        // validate the optional field `freeText2`
        if (data['freeText2']) { // data not null
          FreeTextInputModel.validateJSON(data['freeText2']);
        }
        // validate the optional field `language`
        if (data['language']) { // data not null
          SimpleInputModel.validateJSON(data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['project']);
        }
        // validate the optional field `proposalStatus`
        if (data['proposalStatus']) { // data not null
          SimpleInputModel.validateJSON(data['proposalStatus']);
        }

        return true;
    }


}

ProposalInputModel.RequiredProperties = ["name", "project"];

/**
 * @member {module:model/SimpleInputModel} billingAddress
 */
ProposalInputModel.prototype['billingAddress'] = undefined;

/**
 * @member {module:model/SimpleInputModel} culture
 */
ProposalInputModel.prototype['culture'] = undefined;

/**
 * @member {module:model/SimpleInputModel} customerContactPerson
 */
ProposalInputModel.prototype['customerContactPerson'] = undefined;

/**
 * @member {module:model/FreeTextInputModel} freeText1
 */
ProposalInputModel.prototype['freeText1'] = undefined;

/**
 * @member {module:model/FreeTextInputModel} freeText2
 */
ProposalInputModel.prototype['freeText2'] = undefined;

/**
 * @member {module:model/SimpleInputModel} language
 */
ProposalInputModel.prototype['language'] = undefined;

/**
 * @member {String} name
 */
ProposalInputModel.prototype['name'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} project
 */
ProposalInputModel.prototype['project'] = undefined;

/**
 * @member {Date} proposalDate
 */
ProposalInputModel.prototype['proposalDate'] = undefined;

/**
 * @member {module:model/SimpleInputModel} proposalStatus
 */
ProposalInputModel.prototype['proposalStatus'] = undefined;






export default ProposalInputModel;

