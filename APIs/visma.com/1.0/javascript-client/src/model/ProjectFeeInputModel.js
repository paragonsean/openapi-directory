/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoneyInputModelWithNullableAmount from './MoneyInputModelWithNullableAmount';
import ProductType from './ProductType';
import ProjectFeeBillingScheduleType from './ProjectFeeBillingScheduleType';
import SimpleInputModel from './SimpleInputModel';
import SimpleInputRequiredModel from './SimpleInputRequiredModel';

/**
 * The ProjectFeeInputModel model module.
 * @module model/ProjectFeeInputModel
 * @version 1.0
 */
class ProjectFeeInputModel {
    /**
     * Constructs a new <code>ProjectFeeInputModel</code>.
     * @alias module:model/ProjectFeeInputModel
     * @param project {module:model/SimpleInputRequiredModel} 
     */
    constructor(project) { 
        
        ProjectFeeInputModel.initialize(this, project);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, project) { 
        obj['project'] = project;
    }

    /**
     * Constructs a <code>ProjectFeeInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectFeeInputModel} obj Optional instance to populate.
     * @return {module:model/ProjectFeeInputModel} The populated <code>ProjectFeeInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectFeeInputModel();

            if (data.hasOwnProperty('billingDependencyPhase')) {
                obj['billingDependencyPhase'] = SimpleInputModel.constructFromObject(data['billingDependencyPhase']);
            }
            if (data.hasOwnProperty('billingSchedule')) {
                obj['billingSchedule'] = ProjectFeeBillingScheduleType.constructFromObject(data['billingSchedule']);
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = SimpleInputModel.constructFromObject(data['costCenter']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayPeriodStartDate')) {
                obj['displayPeriodStartDate'] = ApiClient.convertToType(data['displayPeriodStartDate'], 'Date');
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'Date');
            }
            if (data.hasOwnProperty('hasVolumePricing')) {
                obj['hasVolumePricing'] = ApiClient.convertToType(data['hasVolumePricing'], 'Boolean');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = SimpleInputModel.constructFromObject(data['invoice']);
            }
            if (data.hasOwnProperty('invoiceQuantity')) {
                obj['invoiceQuantity'] = ApiClient.convertToType(data['invoiceQuantity'], 'Number');
            }
            if (data.hasOwnProperty('invoiceRowComment')) {
                obj['invoiceRowComment'] = ApiClient.convertToType(data['invoiceRowComment'], 'String');
            }
            if (data.hasOwnProperty('invoiceRowDescription')) {
                obj['invoiceRowDescription'] = ApiClient.convertToType(data['invoiceRowDescription'], 'String');
            }
            if (data.hasOwnProperty('isBillable')) {
                obj['isBillable'] = ApiClient.convertToType(data['isBillable'], 'Boolean');
            }
            if (data.hasOwnProperty('measurementUnit')) {
                obj['measurementUnit'] = ApiClient.convertToType(data['measurementUnit'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = SimpleInputModel.constructFromObject(data['phase']);
            }
            if (data.hasOwnProperty('plannedBillingDate')) {
                obj['plannedBillingDate'] = ApiClient.convertToType(data['plannedBillingDate'], 'Date');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = SimpleInputModel.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ProductType.constructFromObject(data['productType']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = SimpleInputRequiredModel.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('salesAccount')) {
                obj['salesAccount'] = SimpleInputModel.constructFromObject(data['salesAccount']);
            }
            if (data.hasOwnProperty('unitCost')) {
                obj['unitCost'] = MoneyInputModelWithNullableAmount.constructFromObject(data['unitCost']);
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = MoneyInputModelWithNullableAmount.constructFromObject(data['unitPrice']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SimpleInputModel.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('vatRate')) {
                obj['vatRate'] = ApiClient.convertToType(data['vatRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectFeeInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectFeeInputModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectFeeInputModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billingDependencyPhase`
        if (data['billingDependencyPhase']) { // data not null
          SimpleInputModel.validateJSON(data['billingDependencyPhase']);
        }
        // validate the optional field `costCenter`
        if (data['costCenter']) { // data not null
          SimpleInputModel.validateJSON(data['costCenter']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          SimpleInputModel.validateJSON(data['invoice']);
        }
        // ensure the json data is a string
        if (data['invoiceRowComment'] && !(typeof data['invoiceRowComment'] === 'string' || data['invoiceRowComment'] instanceof String)) {
            throw new Error("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got " + data['invoiceRowComment']);
        }
        // ensure the json data is a string
        if (data['invoiceRowDescription'] && !(typeof data['invoiceRowDescription'] === 'string' || data['invoiceRowDescription'] instanceof String)) {
            throw new Error("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got " + data['invoiceRowDescription']);
        }
        // ensure the json data is a string
        if (data['measurementUnit'] && !(typeof data['measurementUnit'] === 'string' || data['measurementUnit'] instanceof String)) {
            throw new Error("Expected the field `measurementUnit` to be a primitive type in the JSON string but got " + data['measurementUnit']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `phase`
        if (data['phase']) { // data not null
          SimpleInputModel.validateJSON(data['phase']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          SimpleInputModel.validateJSON(data['product']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          SimpleInputRequiredModel.validateJSON(data['project']);
        }
        // validate the optional field `salesAccount`
        if (data['salesAccount']) { // data not null
          SimpleInputModel.validateJSON(data['salesAccount']);
        }
        // validate the optional field `unitCost`
        if (data['unitCost']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['unitCost']);
        }
        // validate the optional field `unitPrice`
        if (data['unitPrice']) { // data not null
          MoneyInputModelWithNullableAmount.validateJSON(data['unitPrice']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SimpleInputModel.validateJSON(data['user']);
        }

        return true;
    }


}

ProjectFeeInputModel.RequiredProperties = ["project"];

/**
 * @member {module:model/SimpleInputModel} billingDependencyPhase
 */
ProjectFeeInputModel.prototype['billingDependencyPhase'] = undefined;

/**
 * @member {module:model/ProjectFeeBillingScheduleType} billingSchedule
 */
ProjectFeeInputModel.prototype['billingSchedule'] = undefined;

/**
 * @member {module:model/SimpleInputModel} costCenter
 */
ProjectFeeInputModel.prototype['costCenter'] = undefined;

/**
 * @member {String} description
 */
ProjectFeeInputModel.prototype['description'] = undefined;

/**
 * @member {Date} displayPeriodStartDate
 */
ProjectFeeInputModel.prototype['displayPeriodStartDate'] = undefined;

/**
 * @member {Date} eventDate
 */
ProjectFeeInputModel.prototype['eventDate'] = undefined;

/**
 * @member {Boolean} hasVolumePricing
 */
ProjectFeeInputModel.prototype['hasVolumePricing'] = undefined;

/**
 * @member {module:model/SimpleInputModel} invoice
 */
ProjectFeeInputModel.prototype['invoice'] = undefined;

/**
 * @member {Number} invoiceQuantity
 */
ProjectFeeInputModel.prototype['invoiceQuantity'] = undefined;

/**
 * @member {String} invoiceRowComment
 */
ProjectFeeInputModel.prototype['invoiceRowComment'] = undefined;

/**
 * @member {String} invoiceRowDescription
 */
ProjectFeeInputModel.prototype['invoiceRowDescription'] = undefined;

/**
 * @member {Boolean} isBillable
 */
ProjectFeeInputModel.prototype['isBillable'] = undefined;

/**
 * @member {String} measurementUnit
 */
ProjectFeeInputModel.prototype['measurementUnit'] = undefined;

/**
 * @member {String} name
 */
ProjectFeeInputModel.prototype['name'] = undefined;

/**
 * @member {module:model/SimpleInputModel} phase
 */
ProjectFeeInputModel.prototype['phase'] = undefined;

/**
 * @member {Date} plannedBillingDate
 */
ProjectFeeInputModel.prototype['plannedBillingDate'] = undefined;

/**
 * @member {module:model/SimpleInputModel} product
 */
ProjectFeeInputModel.prototype['product'] = undefined;

/**
 * @member {module:model/ProductType} productType
 */
ProjectFeeInputModel.prototype['productType'] = undefined;

/**
 * @member {module:model/SimpleInputRequiredModel} project
 */
ProjectFeeInputModel.prototype['project'] = undefined;

/**
 * @member {Number} quantity
 */
ProjectFeeInputModel.prototype['quantity'] = undefined;

/**
 * @member {module:model/SimpleInputModel} salesAccount
 */
ProjectFeeInputModel.prototype['salesAccount'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} unitCost
 */
ProjectFeeInputModel.prototype['unitCost'] = undefined;

/**
 * @member {module:model/MoneyInputModelWithNullableAmount} unitPrice
 */
ProjectFeeInputModel.prototype['unitPrice'] = undefined;

/**
 * @member {module:model/SimpleInputModel} user
 */
ProjectFeeInputModel.prototype['user'] = undefined;

/**
 * @member {Number} vatRate
 */
ProjectFeeInputModel.prototype['vatRate'] = undefined;






export default ProjectFeeInputModel;

