/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExceptionLocationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExceptionLocationModel::OAIExceptionLocationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExceptionLocationModel::OAIExceptionLocationModel() {
    this->initializeModel();
}

OAIExceptionLocationModel::~OAIExceptionLocationModel() {}

void OAIExceptionLocationModel::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExceptionLocationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExceptionLocationModel::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExceptionLocationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExceptionLocationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExceptionLocationModel::getIdentifier() const {
    return m_identifier;
}
void OAIExceptionLocationModel::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIExceptionLocationModel::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIExceptionLocationModel::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIExceptionLocationModel::getName() const {
    return m_name;
}
void OAIExceptionLocationModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExceptionLocationModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExceptionLocationModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIExceptionLocationTypeEnum OAIExceptionLocationModel::getType() const {
    return m_type;
}
void OAIExceptionLocationModel::setType(const OAIExceptionLocationTypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExceptionLocationModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExceptionLocationModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExceptionLocationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExceptionLocationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
