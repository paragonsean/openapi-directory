/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkContractOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkContractOutputModel::OAIWorkContractOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkContractOutputModel::OAIWorkContractOutputModel() {
    this->initializeModel();
}

OAIWorkContractOutputModel::~OAIWorkContractOutputModel() {}

void OAIWorkContractOutputModel::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_daily_hours_isSet = false;
    m_daily_hours_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_flextime_limit_per_day_isSet = false;
    m_flextime_limit_per_day_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_hour_cost_isSet = false;
    m_hour_cost_isValid = false;

    m_is_flextime_active_isSet = false;
    m_is_flextime_active_isValid = false;

    m_is_overtime_allowed_isSet = false;
    m_is_overtime_allowed_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_work_week_isSet = false;
    m_work_week_isValid = false;
}

void OAIWorkContractOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkContractOutputModel::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_daily_hours_isValid = ::OpenAPI::fromJsonValue(m_daily_hours, json[QString("dailyHours")]);
    m_daily_hours_isSet = !json[QString("dailyHours")].isNull() && m_daily_hours_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_flextime_limit_per_day_isValid = ::OpenAPI::fromJsonValue(m_flextime_limit_per_day, json[QString("flextimeLimitPerDay")]);
    m_flextime_limit_per_day_isSet = !json[QString("flextimeLimitPerDay")].isNull() && m_flextime_limit_per_day_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_hour_cost_isValid = ::OpenAPI::fromJsonValue(m_hour_cost, json[QString("hourCost")]);
    m_hour_cost_isSet = !json[QString("hourCost")].isNull() && m_hour_cost_isValid;

    m_is_flextime_active_isValid = ::OpenAPI::fromJsonValue(m_is_flextime_active, json[QString("isFlextimeActive")]);
    m_is_flextime_active_isSet = !json[QString("isFlextimeActive")].isNull() && m_is_flextime_active_isValid;

    m_is_overtime_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_overtime_allowed, json[QString("isOvertimeAllowed")]);
    m_is_overtime_allowed_isSet = !json[QString("isOvertimeAllowed")].isNull() && m_is_overtime_allowed_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_work_week_isValid = ::OpenAPI::fromJsonValue(m_work_week, json[QString("workWeek")]);
    m_work_week_isSet = !json[QString("workWeek")].isNull() && m_work_week_isValid;
}

QString OAIWorkContractOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkContractOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_daily_hours_isSet) {
        obj.insert(QString("dailyHours"), ::OpenAPI::toJsonValue(m_daily_hours));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_flextime_limit_per_day_isSet) {
        obj.insert(QString("flextimeLimitPerDay"), ::OpenAPI::toJsonValue(m_flextime_limit_per_day));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_hour_cost.isSet()) {
        obj.insert(QString("hourCost"), ::OpenAPI::toJsonValue(m_hour_cost));
    }
    if (m_is_flextime_active_isSet) {
        obj.insert(QString("isFlextimeActive"), ::OpenAPI::toJsonValue(m_is_flextime_active));
    }
    if (m_is_overtime_allowed_isSet) {
        obj.insert(QString("isOvertimeAllowed"), ::OpenAPI::toJsonValue(m_is_overtime_allowed));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_work_week.size() > 0) {
        obj.insert(QString("workWeek"), ::OpenAPI::toJsonValue(m_work_week));
    }
    return obj;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIWorkContractOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIWorkContractOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIWorkContractOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIWorkContractOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIWorkContractOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIWorkContractOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIWorkContractOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIWorkContractOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

double OAIWorkContractOutputModel::getDailyHours() const {
    return m_daily_hours;
}
void OAIWorkContractOutputModel::setDailyHours(const double &daily_hours) {
    m_daily_hours = daily_hours;
    m_daily_hours_isSet = true;
}

bool OAIWorkContractOutputModel::is_daily_hours_Set() const{
    return m_daily_hours_isSet;
}

bool OAIWorkContractOutputModel::is_daily_hours_Valid() const{
    return m_daily_hours_isValid;
}

QDate OAIWorkContractOutputModel::getEndDate() const {
    return m_end_date;
}
void OAIWorkContractOutputModel::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIWorkContractOutputModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIWorkContractOutputModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIWorkContractOutputModel::getFlextimeLimitPerDay() const {
    return m_flextime_limit_per_day;
}
void OAIWorkContractOutputModel::setFlextimeLimitPerDay(const double &flextime_limit_per_day) {
    m_flextime_limit_per_day = flextime_limit_per_day;
    m_flextime_limit_per_day_isSet = true;
}

bool OAIWorkContractOutputModel::is_flextime_limit_per_day_Set() const{
    return m_flextime_limit_per_day_isSet;
}

bool OAIWorkContractOutputModel::is_flextime_limit_per_day_Valid() const{
    return m_flextime_limit_per_day_isValid;
}

QString OAIWorkContractOutputModel::getGuid() const {
    return m_guid;
}
void OAIWorkContractOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIWorkContractOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIWorkContractOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIMoneyOutputModel OAIWorkContractOutputModel::getHourCost() const {
    return m_hour_cost;
}
void OAIWorkContractOutputModel::setHourCost(const OAIMoneyOutputModel &hour_cost) {
    m_hour_cost = hour_cost;
    m_hour_cost_isSet = true;
}

bool OAIWorkContractOutputModel::is_hour_cost_Set() const{
    return m_hour_cost_isSet;
}

bool OAIWorkContractOutputModel::is_hour_cost_Valid() const{
    return m_hour_cost_isValid;
}

bool OAIWorkContractOutputModel::isIsFlextimeActive() const {
    return m_is_flextime_active;
}
void OAIWorkContractOutputModel::setIsFlextimeActive(const bool &is_flextime_active) {
    m_is_flextime_active = is_flextime_active;
    m_is_flextime_active_isSet = true;
}

bool OAIWorkContractOutputModel::is_is_flextime_active_Set() const{
    return m_is_flextime_active_isSet;
}

bool OAIWorkContractOutputModel::is_is_flextime_active_Valid() const{
    return m_is_flextime_active_isValid;
}

bool OAIWorkContractOutputModel::isIsOvertimeAllowed() const {
    return m_is_overtime_allowed;
}
void OAIWorkContractOutputModel::setIsOvertimeAllowed(const bool &is_overtime_allowed) {
    m_is_overtime_allowed = is_overtime_allowed;
    m_is_overtime_allowed_isSet = true;
}

bool OAIWorkContractOutputModel::is_is_overtime_allowed_Set() const{
    return m_is_overtime_allowed_isSet;
}

bool OAIWorkContractOutputModel::is_is_overtime_allowed_Valid() const{
    return m_is_overtime_allowed_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIWorkContractOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIWorkContractOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIWorkContractOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIWorkContractOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIWorkContractOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIWorkContractOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIWorkContractOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIWorkContractOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIModelWithName OAIWorkContractOutputModel::getRole() const {
    return m_role;
}
void OAIWorkContractOutputModel::setRole(const OAIModelWithName &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIWorkContractOutputModel::is_role_Set() const{
    return m_role_isSet;
}

bool OAIWorkContractOutputModel::is_role_Valid() const{
    return m_role_isValid;
}

QDate OAIWorkContractOutputModel::getStartDate() const {
    return m_start_date;
}
void OAIWorkContractOutputModel::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIWorkContractOutputModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIWorkContractOutputModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIWorkContractOutputModel::getTitle() const {
    return m_title;
}
void OAIWorkContractOutputModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWorkContractOutputModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWorkContractOutputModel::is_title_Valid() const{
    return m_title_isValid;
}

OAIUserWithPhotoFileModelAndRequiredGuid OAIWorkContractOutputModel::getUser() const {
    return m_user;
}
void OAIWorkContractOutputModel::setUser(const OAIUserWithPhotoFileModelAndRequiredGuid &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIWorkContractOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIWorkContractOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

QList<OAIWorkweek> OAIWorkContractOutputModel::getWorkWeek() const {
    return m_work_week;
}
void OAIWorkContractOutputModel::setWorkWeek(const QList<OAIWorkweek> &work_week) {
    m_work_week = work_week;
    m_work_week_isSet = true;
}

bool OAIWorkContractOutputModel::is_work_week_Set() const{
    return m_work_week_isSet;
}

bool OAIWorkContractOutputModel::is_work_week_Valid() const{
    return m_work_week_isValid;
}

bool OAIWorkContractOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flextime_limit_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_flextime_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overtime_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_week.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkContractOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_date_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
