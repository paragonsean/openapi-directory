/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressModel::OAIAddressModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressModel::OAIAddressModel() {
    this->initializeModel();
}

OAIAddressModel::~OAIAddressModel() {}

void OAIAddressModel::initializeModel() {

    m_addressline_isSet = false;
    m_addressline_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_region_isSet = false;
    m_country_region_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_billing_address_isSet = false;
    m_is_billing_address_isValid = false;

    m_is_postal_address_isSet = false;
    m_is_postal_address_isValid = false;

    m_is_visit_address_isSet = false;
    m_is_visit_address_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIAddressModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressModel::fromJsonObject(QJsonObject json) {

    m_addressline_isValid = ::OpenAPI::fromJsonValue(m_addressline, json[QString("addressline")]);
    m_addressline_isSet = !json[QString("addressline")].isNull() && m_addressline_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_region_isValid = ::OpenAPI::fromJsonValue(m_country_region, json[QString("countryRegion")]);
    m_country_region_isSet = !json[QString("countryRegion")].isNull() && m_country_region_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_billing_address_isValid = ::OpenAPI::fromJsonValue(m_is_billing_address, json[QString("isBillingAddress")]);
    m_is_billing_address_isSet = !json[QString("isBillingAddress")].isNull() && m_is_billing_address_isValid;

    m_is_postal_address_isValid = ::OpenAPI::fromJsonValue(m_is_postal_address, json[QString("isPostalAddress")]);
    m_is_postal_address_isSet = !json[QString("isPostalAddress")].isNull() && m_is_postal_address_isValid;

    m_is_visit_address_isValid = ::OpenAPI::fromJsonValue(m_is_visit_address, json[QString("isVisitAddress")]);
    m_is_visit_address_isSet = !json[QString("isVisitAddress")].isNull() && m_is_visit_address_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;
}

QString OAIAddressModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressModel::asJsonObject() const {
    QJsonObject obj;
    if (m_addressline_isSet) {
        obj.insert(QString("addressline"), ::OpenAPI::toJsonValue(m_addressline));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_region.isSet()) {
        obj.insert(QString("countryRegion"), ::OpenAPI::toJsonValue(m_country_region));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_billing_address_isSet) {
        obj.insert(QString("isBillingAddress"), ::OpenAPI::toJsonValue(m_is_billing_address));
    }
    if (m_is_postal_address_isSet) {
        obj.insert(QString("isPostalAddress"), ::OpenAPI::toJsonValue(m_is_postal_address));
    }
    if (m_is_visit_address_isSet) {
        obj.insert(QString("isVisitAddress"), ::OpenAPI::toJsonValue(m_is_visit_address));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIAddressModel::getAddressline() const {
    return m_addressline;
}
void OAIAddressModel::setAddressline(const QString &addressline) {
    m_addressline = addressline;
    m_addressline_isSet = true;
}

bool OAIAddressModel::is_addressline_Set() const{
    return m_addressline_isSet;
}

bool OAIAddressModel::is_addressline_Valid() const{
    return m_addressline_isValid;
}

QString OAIAddressModel::getCity() const {
    return m_city;
}
void OAIAddressModel::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddressModel::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddressModel::is_city_Valid() const{
    return m_city_isValid;
}

QList<OAIModelWithName> OAIAddressModel::getContacts() const {
    return m_contacts;
}
void OAIAddressModel::setContacts(const QList<OAIModelWithName> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIAddressModel::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIAddressModel::is_contacts_Valid() const{
    return m_contacts_isValid;
}

OAIAddressCountry OAIAddressModel::getCountry() const {
    return m_country;
}
void OAIAddressModel::setCountry(const OAIAddressCountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddressModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddressModel::is_country_Valid() const{
    return m_country_isValid;
}

OAIModelWithName OAIAddressModel::getCountryRegion() const {
    return m_country_region;
}
void OAIAddressModel::setCountryRegion(const OAIModelWithName &country_region) {
    m_country_region = country_region;
    m_country_region_isSet = true;
}

bool OAIAddressModel::is_country_region_Set() const{
    return m_country_region_isSet;
}

bool OAIAddressModel::is_country_region_Valid() const{
    return m_country_region_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIAddressModel::getCreatedBy() const {
    return m_created_by;
}
void OAIAddressModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIAddressModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIAddressModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIAddressModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIAddressModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIAddressModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIAddressModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIAddressCustomer OAIAddressModel::getCustomer() const {
    return m_customer;
}
void OAIAddressModel::setCustomer(const OAIAddressCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIAddressModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIAddressModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIAddressModel::getFax() const {
    return m_fax;
}
void OAIAddressModel::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIAddressModel::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIAddressModel::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAIAddressModel::getGuid() const {
    return m_guid;
}
void OAIAddressModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIAddressModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIAddressModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIAddressModel::isIsBillingAddress() const {
    return m_is_billing_address;
}
void OAIAddressModel::setIsBillingAddress(const bool &is_billing_address) {
    m_is_billing_address = is_billing_address;
    m_is_billing_address_isSet = true;
}

bool OAIAddressModel::is_is_billing_address_Set() const{
    return m_is_billing_address_isSet;
}

bool OAIAddressModel::is_is_billing_address_Valid() const{
    return m_is_billing_address_isValid;
}

bool OAIAddressModel::isIsPostalAddress() const {
    return m_is_postal_address;
}
void OAIAddressModel::setIsPostalAddress(const bool &is_postal_address) {
    m_is_postal_address = is_postal_address;
    m_is_postal_address_isSet = true;
}

bool OAIAddressModel::is_is_postal_address_Set() const{
    return m_is_postal_address_isSet;
}

bool OAIAddressModel::is_is_postal_address_Valid() const{
    return m_is_postal_address_isValid;
}

bool OAIAddressModel::isIsVisitAddress() const {
    return m_is_visit_address;
}
void OAIAddressModel::setIsVisitAddress(const bool &is_visit_address) {
    m_is_visit_address = is_visit_address;
    m_is_visit_address_isSet = true;
}

bool OAIAddressModel::is_is_visit_address_Set() const{
    return m_is_visit_address_isSet;
}

bool OAIAddressModel::is_is_visit_address_Valid() const{
    return m_is_visit_address_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIAddressModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIAddressModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIAddressModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIAddressModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIAddressModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIAddressModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIAddressModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIAddressModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIAddressModel::getPhone() const {
    return m_phone;
}
void OAIAddressModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAddressModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAddressModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIAddressModel::getPostalCode() const {
    return m_postal_code;
}
void OAIAddressModel::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddressModel::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddressModel::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIAddressModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addressline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_postal_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visit_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
