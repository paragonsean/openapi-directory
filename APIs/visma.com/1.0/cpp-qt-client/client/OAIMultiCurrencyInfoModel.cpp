/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiCurrencyInfoModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiCurrencyInfoModel::OAIMultiCurrencyInfoModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiCurrencyInfoModel::OAIMultiCurrencyInfoModel() {
    this->initializeModel();
}

OAIMultiCurrencyInfoModel::~OAIMultiCurrencyInfoModel() {}

void OAIMultiCurrencyInfoModel::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;
}

void OAIMultiCurrencyInfoModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiCurrencyInfoModel::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;
}

QString OAIMultiCurrencyInfoModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiCurrencyInfoModel::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_purpose.size() > 0) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    return obj;
}

double OAIMultiCurrencyInfoModel::getAmount() const {
    return m_amount;
}
void OAIMultiCurrencyInfoModel::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIMultiCurrencyInfoModel::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIMultiCurrencyInfoModel::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIMultiCurrencyInfoModel::getCurrencyCode() const {
    return m_currency_code;
}
void OAIMultiCurrencyInfoModel::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIMultiCurrencyInfoModel::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIMultiCurrencyInfoModel::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QList<OAICurrencyPurpose> OAIMultiCurrencyInfoModel::getPurpose() const {
    return m_purpose;
}
void OAIMultiCurrencyInfoModel::setPurpose(const QList<OAICurrencyPurpose> &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIMultiCurrencyInfoModel::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIMultiCurrencyInfoModel::is_purpose_Valid() const{
    return m_purpose_isValid;
}

bool OAIMultiCurrencyInfoModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiCurrencyInfoModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
