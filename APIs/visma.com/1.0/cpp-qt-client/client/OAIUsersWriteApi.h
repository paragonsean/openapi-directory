/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersWriteApi_H
#define OAI_OAIUsersWriteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAIFlextimeAdjustmentInputModel.h"
#include "OAIFlextimeAdjustmentOutputModel.h"
#include "OAIPatchOperation.h"
#include "OAIUserCustomValueInputModel.h"
#include "OAIUserCustomValueOutputModel.h"
#include "OAIUserInputModel.h"
#include "OAIUserKeywordModel.h"
#include "OAIUserOutputModel.h"
#include "OAIWorkContractInputModel.h"
#include "OAIWorkContractOutputModel.h"
#include "OAIWorkdayModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersWriteApi : public QObject {
    Q_OBJECT

public:
    OAIUsersWriteApi(const int timeOut = 0);
    ~OAIUsersWriteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void flextimeAdjustmentsDeleteFlextimeAdjustment(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void flextimeAdjustmentsPatchFlextimeAdjustment(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_flextime_adjustment_input_model OAIFlextimeAdjustmentInputModel [optional]
    */
    virtual void flextimeAdjustmentsPostFlextimeAdjustment(const ::OpenAPI::OptionalParam<OAIFlextimeAdjustmentInputModel> &oai_flextime_adjustment_input_model = ::OpenAPI::OptionalParam<OAIFlextimeAdjustmentInputModel>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  guid QString [required]
    */
    virtual void keywordsLinkKeywordToUser(const QString &user_guid, const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void userCustomValuesPatchUserCustomValue(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_user_custom_value_input_model OAIUserCustomValueInputModel [optional]
    */
    virtual void userCustomValuesPostUserCustomValue(const ::OpenAPI::OptionalParam<OAIUserCustomValueInputModel> &oai_user_custom_value_input_model = ::OpenAPI::OptionalParam<OAIUserCustomValueInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void usersPatchUser(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_user_input_model OAIUserInputModel [optional]
    */
    virtual void usersPostUser(const ::OpenAPI::OptionalParam<OAIUserInputModel> &oai_user_input_model = ::OpenAPI::OptionalParam<OAIUserInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void workContractsPatchWorkContract(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  reset_flextime bool [optional]
    * @param[in]  oai_work_contract_input_model OAIWorkContractInputModel [optional]
    */
    virtual void workContractsPostWorkContract(const ::OpenAPI::OptionalParam<bool> &reset_flextime = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIWorkContractInputModel> &oai_work_contract_input_model = ::OpenAPI::OptionalParam<OAIWorkContractInputModel>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  date QDateTime [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void workdaysPatchWorkDay(const QString &user_guid, const QDateTime &date, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void flextimeAdjustmentsDeleteFlextimeAdjustmentCallback(OAIHttpRequestWorker *worker);
    void flextimeAdjustmentsPatchFlextimeAdjustmentCallback(OAIHttpRequestWorker *worker);
    void flextimeAdjustmentsPostFlextimeAdjustmentCallback(OAIHttpRequestWorker *worker);
    void keywordsLinkKeywordToUserCallback(OAIHttpRequestWorker *worker);
    void userCustomValuesPatchUserCustomValueCallback(OAIHttpRequestWorker *worker);
    void userCustomValuesPostUserCustomValueCallback(OAIHttpRequestWorker *worker);
    void usersPatchUserCallback(OAIHttpRequestWorker *worker);
    void usersPostUserCallback(OAIHttpRequestWorker *worker);
    void workContractsPatchWorkContractCallback(OAIHttpRequestWorker *worker);
    void workContractsPostWorkContractCallback(OAIHttpRequestWorker *worker);
    void workdaysPatchWorkDayCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void flextimeAdjustmentsDeleteFlextimeAdjustmentSignal();
    void flextimeAdjustmentsPatchFlextimeAdjustmentSignal(QList<OAIFlextimeAdjustmentOutputModel> summary);
    void flextimeAdjustmentsPostFlextimeAdjustmentSignal(OAIFlextimeAdjustmentOutputModel summary);
    void keywordsLinkKeywordToUserSignal(OAIUserKeywordModel summary);
    void userCustomValuesPatchUserCustomValueSignal(QList<OAIUserCustomValueOutputModel> summary);
    void userCustomValuesPostUserCustomValueSignal(QList<OAIUserCustomValueOutputModel> summary);
    void usersPatchUserSignal(QList<OAIUserOutputModel> summary);
    void usersPostUserSignal(OAIUserOutputModel summary);
    void workContractsPatchWorkContractSignal(QList<OAIWorkContractOutputModel> summary);
    void workContractsPostWorkContractSignal(OAIWorkContractOutputModel summary);
    void workdaysPatchWorkDaySignal(QList<OAIWorkdayModel> summary);


    void flextimeAdjustmentsDeleteFlextimeAdjustmentSignalFull(OAIHttpRequestWorker *worker);
    void flextimeAdjustmentsPatchFlextimeAdjustmentSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlextimeAdjustmentOutputModel> summary);
    void flextimeAdjustmentsPostFlextimeAdjustmentSignalFull(OAIHttpRequestWorker *worker, OAIFlextimeAdjustmentOutputModel summary);
    void keywordsLinkKeywordToUserSignalFull(OAIHttpRequestWorker *worker, OAIUserKeywordModel summary);
    void userCustomValuesPatchUserCustomValueSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomValueOutputModel> summary);
    void userCustomValuesPostUserCustomValueSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomValueOutputModel> summary);
    void usersPatchUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserOutputModel> summary);
    void usersPostUserSignalFull(OAIHttpRequestWorker *worker, OAIUserOutputModel summary);
    void workContractsPatchWorkContractSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkContractOutputModel> summary);
    void workContractsPostWorkContractSignalFull(OAIHttpRequestWorker *worker, OAIWorkContractOutputModel summary);
    void workdaysPatchWorkDaySignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkdayModel> summary);

    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsDeleteFlextimeAdjustmentSignalError() instead")
    void flextimeAdjustmentsDeleteFlextimeAdjustmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsDeleteFlextimeAdjustmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsPatchFlextimeAdjustmentSignalError() instead")
    void flextimeAdjustmentsPatchFlextimeAdjustmentSignalE(QList<OAIFlextimeAdjustmentOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsPatchFlextimeAdjustmentSignalError(QList<OAIFlextimeAdjustmentOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsPostFlextimeAdjustmentSignalError() instead")
    void flextimeAdjustmentsPostFlextimeAdjustmentSignalE(OAIFlextimeAdjustmentOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsPostFlextimeAdjustmentSignalError(OAIFlextimeAdjustmentOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsLinkKeywordToUserSignalError() instead")
    void keywordsLinkKeywordToUserSignalE(OAIUserKeywordModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsLinkKeywordToUserSignalError(OAIUserKeywordModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesPatchUserCustomValueSignalError() instead")
    void userCustomValuesPatchUserCustomValueSignalE(QList<OAIUserCustomValueOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesPatchUserCustomValueSignalError(QList<OAIUserCustomValueOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesPostUserCustomValueSignalError() instead")
    void userCustomValuesPostUserCustomValueSignalE(QList<OAIUserCustomValueOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesPostUserCustomValueSignalError(QList<OAIUserCustomValueOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPatchUserSignalError() instead")
    void usersPatchUserSignalE(QList<OAIUserOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPatchUserSignalError(QList<OAIUserOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostUserSignalError() instead")
    void usersPostUserSignalE(OAIUserOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostUserSignalError(OAIUserOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPatchWorkContractSignalError() instead")
    void workContractsPatchWorkContractSignalE(QList<OAIWorkContractOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPatchWorkContractSignalError(QList<OAIWorkContractOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPostWorkContractSignalError() instead")
    void workContractsPostWorkContractSignalE(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPostWorkContractSignalError(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workdaysPatchWorkDaySignalError() instead")
    void workdaysPatchWorkDaySignalE(QList<OAIWorkdayModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workdaysPatchWorkDaySignalError(QList<OAIWorkdayModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsDeleteFlextimeAdjustmentSignalErrorFull() instead")
    void flextimeAdjustmentsDeleteFlextimeAdjustmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsDeleteFlextimeAdjustmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsPatchFlextimeAdjustmentSignalErrorFull() instead")
    void flextimeAdjustmentsPatchFlextimeAdjustmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsPatchFlextimeAdjustmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsPostFlextimeAdjustmentSignalErrorFull() instead")
    void flextimeAdjustmentsPostFlextimeAdjustmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsPostFlextimeAdjustmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsLinkKeywordToUserSignalErrorFull() instead")
    void keywordsLinkKeywordToUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsLinkKeywordToUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesPatchUserCustomValueSignalErrorFull() instead")
    void userCustomValuesPatchUserCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesPatchUserCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesPostUserCustomValueSignalErrorFull() instead")
    void userCustomValuesPostUserCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesPostUserCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPatchUserSignalErrorFull() instead")
    void usersPatchUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPatchUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostUserSignalErrorFull() instead")
    void usersPostUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPatchWorkContractSignalErrorFull() instead")
    void workContractsPatchWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPatchWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPostWorkContractSignalErrorFull() instead")
    void workContractsPostWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPostWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workdaysPatchWorkDaySignalErrorFull() instead")
    void workdaysPatchWorkDaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workdaysPatchWorkDaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
