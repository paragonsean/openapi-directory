/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceSource::OAIPriceSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceSource::OAIPriceSource() {
    this->initializeModel();
}

OAIPriceSource::~OAIPriceSource() {}

void OAIPriceSource::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPriceSource::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPriceSource::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ProductRegistry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPriceSource::PRODUCTREGISTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pricelist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPriceSource::PRICELIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Project", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPriceSource::PROJECT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPriceSource::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPriceSource::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPriceSource::PRODUCTREGISTRY:
            val = "ProductRegistry";
            break;
        case eOAIPriceSource::PRICELIST:
            val = "Pricelist";
            break;
        case eOAIPriceSource::PROJECT:
            val = "Project";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPriceSource::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPriceSource::eOAIPriceSource OAIPriceSource::getValue() const {
    return m_value;
}

void OAIPriceSource::setValue(const OAIPriceSource::eOAIPriceSource& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPriceSource::isSet() const {
    
    return m_value_isSet;
}

bool OAIPriceSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
