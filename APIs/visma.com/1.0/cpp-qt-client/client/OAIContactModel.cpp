/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactModel::OAIContactModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactModel::OAIContactModel() {
    this->initializeModel();
}

OAIContactModel::~OAIContactModel() {}

void OAIContactModel::initializeModel() {

    m_address_guid_isSet = false;
    m_address_guid_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_is_email_allowed_isSet = false;
    m_is_email_allowed_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_salutation_isSet = false;
    m_salutation_isValid = false;

    m_satisfaction_level_isSet = false;
    m_satisfaction_level_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIContactModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactModel::fromJsonObject(QJsonObject json) {

    m_address_guid_isValid = ::OpenAPI::fromJsonValue(m_address_guid, json[QString("addressGuid")]);
    m_address_guid_isSet = !json[QString("addressGuid")].isNull() && m_address_guid_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_is_email_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_email_allowed, json[QString("isEmailAllowed")]);
    m_is_email_allowed_isSet = !json[QString("isEmailAllowed")].isNull() && m_is_email_allowed_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_salutation_isValid = ::OpenAPI::fromJsonValue(m_salutation, json[QString("salutation")]);
    m_salutation_isSet = !json[QString("salutation")].isNull() && m_salutation_isValid;

    m_satisfaction_level_isValid = ::OpenAPI::fromJsonValue(m_satisfaction_level, json[QString("satisfactionLevel")]);
    m_satisfaction_level_isSet = !json[QString("satisfactionLevel")].isNull() && m_satisfaction_level_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIContactModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address_guid_isSet) {
        obj.insert(QString("addressGuid"), ::OpenAPI::toJsonValue(m_address_guid));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_is_email_allowed_isSet) {
        obj.insert(QString("isEmailAllowed"), ::OpenAPI::toJsonValue(m_is_email_allowed));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_salutation.isSet()) {
        obj.insert(QString("salutation"), ::OpenAPI::toJsonValue(m_salutation));
    }
    if (m_satisfaction_level.isSet()) {
        obj.insert(QString("satisfactionLevel"), ::OpenAPI::toJsonValue(m_satisfaction_level));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIContactModel::getAddressGuid() const {
    return m_address_guid;
}
void OAIContactModel::setAddressGuid(const QString &address_guid) {
    m_address_guid = address_guid;
    m_address_guid_isSet = true;
}

bool OAIContactModel::is_address_guid_Set() const{
    return m_address_guid_isSet;
}

bool OAIContactModel::is_address_guid_Valid() const{
    return m_address_guid_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIContactModel::getCreatedBy() const {
    return m_created_by;
}
void OAIContactModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIContactModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIContactModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIContactModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIContactModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIContactModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIContactModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIContactCustomer OAIContactModel::getCustomer() const {
    return m_customer;
}
void OAIContactModel::setCustomer(const OAIContactCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIContactModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIContactModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QDate OAIContactModel::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIContactModel::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIContactModel::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIContactModel::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIContactModel::getDescription() const {
    return m_description;
}
void OAIContactModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContactModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContactModel::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIContactModel::getEmails() const {
    return m_emails;
}
void OAIContactModel::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIContactModel::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIContactModel::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIContactModel::getFirstName() const {
    return m_first_name;
}
void OAIContactModel::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIContactModel::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIContactModel::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIContactModel::getGuid() const {
    return m_guid;
}
void OAIContactModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIContactModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIContactModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIContactModel::isIsActive() const {
    return m_is_active;
}
void OAIContactModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIContactModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIContactModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIContactModel::isIsDeleted() const {
    return m_is_deleted;
}
void OAIContactModel::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIContactModel::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIContactModel::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

bool OAIContactModel::isIsEmailAllowed() const {
    return m_is_email_allowed;
}
void OAIContactModel::setIsEmailAllowed(const bool &is_email_allowed) {
    m_is_email_allowed = is_email_allowed;
    m_is_email_allowed_isSet = true;
}

bool OAIContactModel::is_is_email_allowed_Set() const{
    return m_is_email_allowed_isSet;
}

bool OAIContactModel::is_is_email_allowed_Valid() const{
    return m_is_email_allowed_isValid;
}

QString OAIContactModel::getJobTitle() const {
    return m_job_title;
}
void OAIContactModel::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIContactModel::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIContactModel::is_job_title_Valid() const{
    return m_job_title_isValid;
}

OAIModelWithName OAIContactModel::getLanguage() const {
    return m_language;
}
void OAIContactModel::setLanguage(const OAIModelWithName &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIContactModel::is_language_Set() const{
    return m_language_isSet;
}

bool OAIContactModel::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIContactModel::getLastName() const {
    return m_last_name;
}
void OAIContactModel::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIContactModel::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIContactModel::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIContactModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIContactModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIContactModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIContactModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIContactModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIContactModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIContactModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIContactModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIContactModel::getName() const {
    return m_name;
}
void OAIContactModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContactModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContactModel::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIContactModel::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIContactModel::setPhoneNumbers(const QList<QString> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIContactModel::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIContactModel::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

OAIModelWithName OAIContactModel::getRole() const {
    return m_role;
}
void OAIContactModel::setRole(const OAIModelWithName &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIContactModel::is_role_Set() const{
    return m_role_isSet;
}

bool OAIContactModel::is_role_Valid() const{
    return m_role_isValid;
}

OAISalutationType OAIContactModel::getSalutation() const {
    return m_salutation;
}
void OAIContactModel::setSalutation(const OAISalutationType &salutation) {
    m_salutation = salutation;
    m_salutation_isSet = true;
}

bool OAIContactModel::is_salutation_Set() const{
    return m_salutation_isSet;
}

bool OAIContactModel::is_salutation_Valid() const{
    return m_salutation_isValid;
}

OAISatisfactionLevelType OAIContactModel::getSatisfactionLevel() const {
    return m_satisfaction_level;
}
void OAIContactModel::setSatisfactionLevel(const OAISatisfactionLevelType &satisfaction_level) {
    m_satisfaction_level = satisfaction_level;
    m_satisfaction_level_isSet = true;
}

bool OAIContactModel::is_satisfaction_level_Set() const{
    return m_satisfaction_level_isSet;
}

bool OAIContactModel::is_satisfaction_level_Valid() const{
    return m_satisfaction_level_isValid;
}

OAIModelWithName OAIContactModel::getTimeZone() const {
    return m_time_zone;
}
void OAIContactModel::setTimeZone(const OAIModelWithName &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIContactModel::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIContactModel::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIContactModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_email_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfaction_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_isValid && m_first_name_isValid && m_last_name_isValid && true;
}

} // namespace OpenAPI
