/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatRateInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatRateInputModel::OAIVatRateInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatRateInputModel::OAIVatRateInputModel() {
    this->initializeModel();
}

OAIVatRateInputModel::~OAIVatRateInputModel() {}

void OAIVatRateInputModel::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_country_guid_isSet = false;
    m_country_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;
}

void OAIVatRateInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatRateInputModel::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_country_guid_isValid = ::OpenAPI::fromJsonValue(m_country_guid, json[QString("countryGuid")]);
    m_country_guid_isSet = !json[QString("countryGuid")].isNull() && m_country_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;
}

QString OAIVatRateInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatRateInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_country_guid_isSet) {
        obj.insert(QString("countryGuid"), ::OpenAPI::toJsonValue(m_country_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    return obj;
}

QString OAIVatRateInputModel::getCode() const {
    return m_code;
}
void OAIVatRateInputModel::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIVatRateInputModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIVatRateInputModel::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIVatRateInputModel::getCountryGuid() const {
    return m_country_guid;
}
void OAIVatRateInputModel::setCountryGuid(const QString &country_guid) {
    m_country_guid = country_guid;
    m_country_guid_isSet = true;
}

bool OAIVatRateInputModel::is_country_guid_Set() const{
    return m_country_guid_isSet;
}

bool OAIVatRateInputModel::is_country_guid_Valid() const{
    return m_country_guid_isValid;
}

bool OAIVatRateInputModel::isIsActive() const {
    return m_is_active;
}
void OAIVatRateInputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIVatRateInputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIVatRateInputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIVatRateInputModel::isIsDefault() const {
    return m_is_default;
}
void OAIVatRateInputModel::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIVatRateInputModel::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIVatRateInputModel::is_is_default_Valid() const{
    return m_is_default_isValid;
}

double OAIVatRateInputModel::getPercentage() const {
    return m_percentage;
}
void OAIVatRateInputModel::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIVatRateInputModel::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIVatRateInputModel::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAIVatRateInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatRateInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_percentage_isValid && true;
}

} // namespace OpenAPI
