/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsDeleteApi_H
#define OAI_OAIProjectsDeleteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAIPhaseMemberModel.h"
#include "OAIResourceAllocationAction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsDeleteApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsDeleteApi(const int timeOut = 0);
    ~OAIProjectsDeleteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  guid QString [required]
    */
    virtual void keywordsDeleteProjectKeyword(const QString &project_guid, const QString &guid);

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  resource_allocation_action OAIResourceAllocationAction [optional]
    * @param[in]  transfer_to_user_guid QString [optional]
    * @param[in]  oai_phase_member_model OAIPhaseMemberModel [optional]
    */
    virtual void phaseMembersDeletePhaseMember(const QString &user_guid, const ::OpenAPI::OptionalParam<OAIResourceAllocationAction> &resource_allocation_action = ::OpenAPI::OptionalParam<OAIResourceAllocationAction>(), const ::OpenAPI::OptionalParam<QString> &transfer_to_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPhaseMemberModel> &oai_phase_member_model = ::OpenAPI::OptionalParam<OAIPhaseMemberModel>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void phasesDeletePhase(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectCustomValuesDeleteProjectCustomValue(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectForecastsDeleteForecast(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  year qint32 [optional]
    * @param[in]  month qint32 [optional]
    */
    virtual void projectForecastsDeleteForecasts(const QString &project_guid, const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &month = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectInvoiceSettingsDeleteProjectInvoiceSettings(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void projectProductsDeleteAllProjectProducts(const QString &project_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectProductsDeleteProjectProduct(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectWorkHourPricesDeleteProjectWorkHourPrice(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectWorkTypesDeleteProjectWorktype(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectsDeleteProject(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalFeesDeleteProposalFee(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalSubtotalsDeleteProposalSubtotal(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalWorkhoursDeleteProposalWorkhour(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalsDeleteProposal(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesNotesDeleteProjectSalesNote(const QString &guid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void keywordsDeleteProjectKeywordCallback(OAIHttpRequestWorker *worker);
    void phaseMembersDeletePhaseMemberCallback(OAIHttpRequestWorker *worker);
    void phasesDeletePhaseCallback(OAIHttpRequestWorker *worker);
    void projectCustomValuesDeleteProjectCustomValueCallback(OAIHttpRequestWorker *worker);
    void projectForecastsDeleteForecastCallback(OAIHttpRequestWorker *worker);
    void projectForecastsDeleteForecastsCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsCallback(OAIHttpRequestWorker *worker);
    void projectProductsDeleteAllProjectProductsCallback(OAIHttpRequestWorker *worker);
    void projectProductsDeleteProjectProductCallback(OAIHttpRequestWorker *worker);
    void projectWorkHourPricesDeleteProjectWorkHourPriceCallback(OAIHttpRequestWorker *worker);
    void projectWorkTypesDeleteProjectWorktypeCallback(OAIHttpRequestWorker *worker);
    void projectsDeleteProjectCallback(OAIHttpRequestWorker *worker);
    void proposalFeesDeleteProposalFeeCallback(OAIHttpRequestWorker *worker);
    void proposalSubtotalsDeleteProposalSubtotalCallback(OAIHttpRequestWorker *worker);
    void proposalWorkhoursDeleteProposalWorkhourCallback(OAIHttpRequestWorker *worker);
    void proposalsDeleteProposalCallback(OAIHttpRequestWorker *worker);
    void salesNotesDeleteProjectSalesNoteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void keywordsDeleteProjectKeywordSignal();
    void phaseMembersDeletePhaseMemberSignal();
    void phasesDeletePhaseSignal();
    void projectCustomValuesDeleteProjectCustomValueSignal();
    void projectForecastsDeleteForecastSignal();
    void projectForecastsDeleteForecastsSignal();
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignal();
    void projectProductsDeleteAllProjectProductsSignal();
    void projectProductsDeleteProjectProductSignal();
    void projectWorkHourPricesDeleteProjectWorkHourPriceSignal();
    void projectWorkTypesDeleteProjectWorktypeSignal();
    void projectsDeleteProjectSignal();
    void proposalFeesDeleteProposalFeeSignal();
    void proposalSubtotalsDeleteProposalSubtotalSignal();
    void proposalWorkhoursDeleteProposalWorkhourSignal();
    void proposalsDeleteProposalSignal();
    void salesNotesDeleteProjectSalesNoteSignal();


    void keywordsDeleteProjectKeywordSignalFull(OAIHttpRequestWorker *worker);
    void phaseMembersDeletePhaseMemberSignalFull(OAIHttpRequestWorker *worker);
    void phasesDeletePhaseSignalFull(OAIHttpRequestWorker *worker);
    void projectCustomValuesDeleteProjectCustomValueSignalFull(OAIHttpRequestWorker *worker);
    void projectForecastsDeleteForecastSignalFull(OAIHttpRequestWorker *worker);
    void projectForecastsDeleteForecastsSignalFull(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker);
    void projectProductsDeleteAllProjectProductsSignalFull(OAIHttpRequestWorker *worker);
    void projectProductsDeleteProjectProductSignalFull(OAIHttpRequestWorker *worker);
    void projectWorkHourPricesDeleteProjectWorkHourPriceSignalFull(OAIHttpRequestWorker *worker);
    void projectWorkTypesDeleteProjectWorktypeSignalFull(OAIHttpRequestWorker *worker);
    void projectsDeleteProjectSignalFull(OAIHttpRequestWorker *worker);
    void proposalFeesDeleteProposalFeeSignalFull(OAIHttpRequestWorker *worker);
    void proposalSubtotalsDeleteProposalSubtotalSignalFull(OAIHttpRequestWorker *worker);
    void proposalWorkhoursDeleteProposalWorkhourSignalFull(OAIHttpRequestWorker *worker);
    void proposalsDeleteProposalSignalFull(OAIHttpRequestWorker *worker);
    void salesNotesDeleteProjectSalesNoteSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use keywordsDeleteProjectKeywordSignalError() instead")
    void keywordsDeleteProjectKeywordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsDeleteProjectKeywordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersDeletePhaseMemberSignalError() instead")
    void phaseMembersDeletePhaseMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersDeletePhaseMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesDeletePhaseSignalError() instead")
    void phasesDeletePhaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void phasesDeletePhaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesDeleteProjectCustomValueSignalError() instead")
    void projectCustomValuesDeleteProjectCustomValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesDeleteProjectCustomValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsDeleteForecastSignalError() instead")
    void projectForecastsDeleteForecastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsDeleteForecastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsDeleteForecastsSignalError() instead")
    void projectForecastsDeleteForecastsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsDeleteForecastsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalError() instead")
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsDeleteAllProjectProductsSignalError() instead")
    void projectProductsDeleteAllProjectProductsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsDeleteAllProjectProductsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsDeleteProjectProductSignalError() instead")
    void projectProductsDeleteProjectProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsDeleteProjectProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesDeleteProjectWorkHourPriceSignalError() instead")
    void projectWorkHourPricesDeleteProjectWorkHourPriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesDeleteProjectWorkHourPriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesDeleteProjectWorktypeSignalError() instead")
    void projectWorkTypesDeleteProjectWorktypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesDeleteProjectWorktypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteProjectSignalError() instead")
    void projectsDeleteProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesDeleteProposalFeeSignalError() instead")
    void proposalFeesDeleteProposalFeeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesDeleteProposalFeeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsDeleteProposalSubtotalSignalError() instead")
    void proposalSubtotalsDeleteProposalSubtotalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsDeleteProposalSubtotalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursDeleteProposalWorkhourSignalError() instead")
    void proposalWorkhoursDeleteProposalWorkhourSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursDeleteProposalWorkhourSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsDeleteProposalSignalError() instead")
    void proposalsDeleteProposalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsDeleteProposalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesDeleteProjectSalesNoteSignalError() instead")
    void salesNotesDeleteProjectSalesNoteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesDeleteProjectSalesNoteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use keywordsDeleteProjectKeywordSignalErrorFull() instead")
    void keywordsDeleteProjectKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsDeleteProjectKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersDeletePhaseMemberSignalErrorFull() instead")
    void phaseMembersDeletePhaseMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersDeletePhaseMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesDeletePhaseSignalErrorFull() instead")
    void phasesDeletePhaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesDeletePhaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesDeleteProjectCustomValueSignalErrorFull() instead")
    void projectCustomValuesDeleteProjectCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesDeleteProjectCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsDeleteForecastSignalErrorFull() instead")
    void projectForecastsDeleteForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsDeleteForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsDeleteForecastsSignalErrorFull() instead")
    void projectForecastsDeleteForecastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsDeleteForecastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalErrorFull() instead")
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsDeleteAllProjectProductsSignalErrorFull() instead")
    void projectProductsDeleteAllProjectProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsDeleteAllProjectProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsDeleteProjectProductSignalErrorFull() instead")
    void projectProductsDeleteProjectProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsDeleteProjectProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesDeleteProjectWorkHourPriceSignalErrorFull() instead")
    void projectWorkHourPricesDeleteProjectWorkHourPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesDeleteProjectWorkHourPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesDeleteProjectWorktypeSignalErrorFull() instead")
    void projectWorkTypesDeleteProjectWorktypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesDeleteProjectWorktypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteProjectSignalErrorFull() instead")
    void projectsDeleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesDeleteProposalFeeSignalErrorFull() instead")
    void proposalFeesDeleteProposalFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesDeleteProposalFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsDeleteProposalSubtotalSignalErrorFull() instead")
    void proposalSubtotalsDeleteProposalSubtotalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsDeleteProposalSubtotalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursDeleteProposalWorkhourSignalErrorFull() instead")
    void proposalWorkhoursDeleteProposalWorkhourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursDeleteProposalWorkhourSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsDeleteProposalSignalErrorFull() instead")
    void proposalsDeleteProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsDeleteProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesDeleteProjectSalesNoteSignalErrorFull() instead")
    void salesNotesDeleteProjectSalesNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesDeleteProjectSalesNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
