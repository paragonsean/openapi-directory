/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITravelReimbursementOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITravelReimbursementOutputModel::OAITravelReimbursementOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITravelReimbursementOutputModel::OAITravelReimbursementOutputModel() {
    this->initializeModel();
}

OAITravelReimbursementOutputModel::~OAITravelReimbursementOutputModel() {}

void OAITravelReimbursementOutputModel::initializeModel() {

    m_advance_payment_isSet = false;
    m_advance_payment_isValid = false;

    m_approval_date_isSet = false;
    m_approval_date_isValid = false;

    m_approved_by_user_isSet = false;
    m_approved_by_user_isValid = false;

    m_can_change_approval_isSet = false;
    m_can_change_approval_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_expenses_isSet = false;
    m_total_expenses_isValid = false;

    m_travel_reimbursement_status_isSet = false;
    m_travel_reimbursement_status_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAITravelReimbursementOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITravelReimbursementOutputModel::fromJsonObject(QJsonObject json) {

    m_advance_payment_isValid = ::OpenAPI::fromJsonValue(m_advance_payment, json[QString("advancePayment")]);
    m_advance_payment_isSet = !json[QString("advancePayment")].isNull() && m_advance_payment_isValid;

    m_approval_date_isValid = ::OpenAPI::fromJsonValue(m_approval_date, json[QString("approvalDate")]);
    m_approval_date_isSet = !json[QString("approvalDate")].isNull() && m_approval_date_isValid;

    m_approved_by_user_isValid = ::OpenAPI::fromJsonValue(m_approved_by_user, json[QString("approvedByUser")]);
    m_approved_by_user_isSet = !json[QString("approvedByUser")].isNull() && m_approved_by_user_isValid;

    m_can_change_approval_isValid = ::OpenAPI::fromJsonValue(m_can_change_approval, json[QString("canChangeApproval")]);
    m_can_change_approval_isSet = !json[QString("canChangeApproval")].isNull() && m_can_change_approval_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("groupBy")]);
    m_group_by_isSet = !json[QString("groupBy")].isNull() && m_group_by_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_expenses_isValid = ::OpenAPI::fromJsonValue(m_total_expenses, json[QString("totalExpenses")]);
    m_total_expenses_isSet = !json[QString("totalExpenses")].isNull() && m_total_expenses_isValid;

    m_travel_reimbursement_status_isValid = ::OpenAPI::fromJsonValue(m_travel_reimbursement_status, json[QString("travelReimbursementStatus")]);
    m_travel_reimbursement_status_isSet = !json[QString("travelReimbursementStatus")].isNull() && m_travel_reimbursement_status_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAITravelReimbursementOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITravelReimbursementOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_advance_payment.isSet()) {
        obj.insert(QString("advancePayment"), ::OpenAPI::toJsonValue(m_advance_payment));
    }
    if (m_approval_date_isSet) {
        obj.insert(QString("approvalDate"), ::OpenAPI::toJsonValue(m_approval_date));
    }
    if (m_approved_by_user.isSet()) {
        obj.insert(QString("approvedByUser"), ::OpenAPI::toJsonValue(m_approved_by_user));
    }
    if (m_can_change_approval_isSet) {
        obj.insert(QString("canChangeApproval"), ::OpenAPI::toJsonValue(m_can_change_approval));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("groupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_expenses.isSet()) {
        obj.insert(QString("totalExpenses"), ::OpenAPI::toJsonValue(m_total_expenses));
    }
    if (m_travel_reimbursement_status.isSet()) {
        obj.insert(QString("travelReimbursementStatus"), ::OpenAPI::toJsonValue(m_travel_reimbursement_status));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIMoneyOutputModel OAITravelReimbursementOutputModel::getAdvancePayment() const {
    return m_advance_payment;
}
void OAITravelReimbursementOutputModel::setAdvancePayment(const OAIMoneyOutputModel &advance_payment) {
    m_advance_payment = advance_payment;
    m_advance_payment_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_advance_payment_Set() const{
    return m_advance_payment_isSet;
}

bool OAITravelReimbursementOutputModel::is_advance_payment_Valid() const{
    return m_advance_payment_isValid;
}

QDateTime OAITravelReimbursementOutputModel::getApprovalDate() const {
    return m_approval_date;
}
void OAITravelReimbursementOutputModel::setApprovalDate(const QDateTime &approval_date) {
    m_approval_date = approval_date;
    m_approval_date_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_approval_date_Set() const{
    return m_approval_date_isSet;
}

bool OAITravelReimbursementOutputModel::is_approval_date_Valid() const{
    return m_approval_date_isValid;
}

OAIModelWithName OAITravelReimbursementOutputModel::getApprovedByUser() const {
    return m_approved_by_user;
}
void OAITravelReimbursementOutputModel::setApprovedByUser(const OAIModelWithName &approved_by_user) {
    m_approved_by_user = approved_by_user;
    m_approved_by_user_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_approved_by_user_Set() const{
    return m_approved_by_user_isSet;
}

bool OAITravelReimbursementOutputModel::is_approved_by_user_Valid() const{
    return m_approved_by_user_isValid;
}

bool OAITravelReimbursementOutputModel::isCanChangeApproval() const {
    return m_can_change_approval;
}
void OAITravelReimbursementOutputModel::setCanChangeApproval(const bool &can_change_approval) {
    m_can_change_approval = can_change_approval;
    m_can_change_approval_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_can_change_approval_Set() const{
    return m_can_change_approval_isSet;
}

bool OAITravelReimbursementOutputModel::is_can_change_approval_Valid() const{
    return m_can_change_approval_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAITravelReimbursementOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAITravelReimbursementOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITravelReimbursementOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAITravelReimbursementOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAITravelReimbursementOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAITravelReimbursementOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QDateTime OAITravelReimbursementOutputModel::getDate() const {
    return m_date;
}
void OAITravelReimbursementOutputModel::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAITravelReimbursementOutputModel::is_date_Valid() const{
    return m_date_isValid;
}

OAIGroupByType OAITravelReimbursementOutputModel::getGroupBy() const {
    return m_group_by;
}
void OAITravelReimbursementOutputModel::setGroupBy(const OAIGroupByType &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAITravelReimbursementOutputModel::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QString OAITravelReimbursementOutputModel::getGuid() const {
    return m_guid;
}
void OAITravelReimbursementOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAITravelReimbursementOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAITravelReimbursementOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAITravelReimbursementOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAITravelReimbursementOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAITravelReimbursementOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAITravelReimbursementOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAITravelReimbursementOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

qint32 OAITravelReimbursementOutputModel::getNumber() const {
    return m_number;
}
void OAITravelReimbursementOutputModel::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_number_Set() const{
    return m_number_isSet;
}

bool OAITravelReimbursementOutputModel::is_number_Valid() const{
    return m_number_isValid;
}

QString OAITravelReimbursementOutputModel::getTitle() const {
    return m_title;
}
void OAITravelReimbursementOutputModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAITravelReimbursementOutputModel::is_title_Valid() const{
    return m_title_isValid;
}

OAIMoneyOutputModel OAITravelReimbursementOutputModel::getTotal() const {
    return m_total;
}
void OAITravelReimbursementOutputModel::setTotal(const OAIMoneyOutputModel &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_total_Set() const{
    return m_total_isSet;
}

bool OAITravelReimbursementOutputModel::is_total_Valid() const{
    return m_total_isValid;
}

OAIMoneyOutputModel OAITravelReimbursementOutputModel::getTotalExpenses() const {
    return m_total_expenses;
}
void OAITravelReimbursementOutputModel::setTotalExpenses(const OAIMoneyOutputModel &total_expenses) {
    m_total_expenses = total_expenses;
    m_total_expenses_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_total_expenses_Set() const{
    return m_total_expenses_isSet;
}

bool OAITravelReimbursementOutputModel::is_total_expenses_Valid() const{
    return m_total_expenses_isValid;
}

OAIModelWithName OAITravelReimbursementOutputModel::getTravelReimbursementStatus() const {
    return m_travel_reimbursement_status;
}
void OAITravelReimbursementOutputModel::setTravelReimbursementStatus(const OAIModelWithName &travel_reimbursement_status) {
    m_travel_reimbursement_status = travel_reimbursement_status;
    m_travel_reimbursement_status_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_travel_reimbursement_status_Set() const{
    return m_travel_reimbursement_status_isSet;
}

bool OAITravelReimbursementOutputModel::is_travel_reimbursement_status_Valid() const{
    return m_travel_reimbursement_status_isValid;
}

OAIModelWithName OAITravelReimbursementOutputModel::getUser() const {
    return m_user;
}
void OAITravelReimbursementOutputModel::setUser(const OAIModelWithName &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITravelReimbursementOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAITravelReimbursementOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITravelReimbursementOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advance_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_by_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_reimbursement_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITravelReimbursementOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
