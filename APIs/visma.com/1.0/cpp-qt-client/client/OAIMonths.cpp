/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonths.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonths::OAIMonths(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonths::OAIMonths() {
    this->initializeModel();
}

OAIMonths::~OAIMonths() {}

void OAIMonths::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMonths::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMonths::fromJson(QString jsonString) {
    
    if ( jsonString.compare("January", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::JANUARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("February", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::FEBRUARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("March", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::MARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("April", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::APRIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("May", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::MAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("June", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::JUNE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("July", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::JULY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("August", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::AUGUST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("September", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::SEPTEMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("October", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::OCTOBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("November", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::NOVEMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("December", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonths::DECEMBER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMonths::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMonths::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMonths::JANUARY:
            val = "January";
            break;
        case eOAIMonths::FEBRUARY:
            val = "February";
            break;
        case eOAIMonths::MARCH:
            val = "March";
            break;
        case eOAIMonths::APRIL:
            val = "April";
            break;
        case eOAIMonths::MAY:
            val = "May";
            break;
        case eOAIMonths::JUNE:
            val = "June";
            break;
        case eOAIMonths::JULY:
            val = "July";
            break;
        case eOAIMonths::AUGUST:
            val = "August";
            break;
        case eOAIMonths::SEPTEMBER:
            val = "September";
            break;
        case eOAIMonths::OCTOBER:
            val = "October";
            break;
        case eOAIMonths::NOVEMBER:
            val = "November";
            break;
        case eOAIMonths::DECEMBER:
            val = "December";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMonths::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMonths::eOAIMonths OAIMonths::getValue() const {
    return m_value;
}

void OAIMonths::setValue(const OAIMonths::eOAIMonths& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMonths::isSet() const {
    
    return m_value_isSet;
}

bool OAIMonths::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
