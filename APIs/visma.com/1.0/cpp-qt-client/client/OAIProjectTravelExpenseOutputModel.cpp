/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTravelExpenseOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTravelExpenseOutputModel::OAIProjectTravelExpenseOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTravelExpenseOutputModel::OAIProjectTravelExpenseOutputModel() {
    this->initializeModel();
}

OAIProjectTravelExpenseOutputModel::~OAIProjectTravelExpenseOutputModel() {}

void OAIProjectTravelExpenseOutputModel::initializeModel() {

    m_attachment_count_isSet = false;
    m_attachment_count_isValid = false;

    m_billing_dependency_phase_isSet = false;
    m_billing_dependency_phase_isValid = false;

    m_billing_schedule_isSet = false;
    m_billing_schedule_isValid = false;

    m_cost_account_isSet = false;
    m_cost_account_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_invoice_quantity_isSet = false;
    m_invoice_quantity_isValid = false;

    m_invoice_row_comment_isSet = false;
    m_invoice_row_comment_isValid = false;

    m_invoice_row_description_isSet = false;
    m_invoice_row_description_isValid = false;

    m_invoice_row_guid_isSet = false;
    m_invoice_row_guid_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_planned_billing_date_isSet = false;
    m_planned_billing_date_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_purchase_vat_rate_isSet = false;
    m_purchase_vat_rate_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_travel_end_time_isSet = false;
    m_travel_end_time_isValid = false;

    m_travel_expense_isSet = false;
    m_travel_expense_isValid = false;

    m_travel_reimbursement_isSet = false;
    m_travel_reimbursement_isValid = false;

    m_travel_reimbursement_required_isSet = false;
    m_travel_reimbursement_required_isValid = false;

    m_travel_start_time_isSet = false;
    m_travel_start_time_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_cost_excluding_purchase_vat_isSet = false;
    m_unit_cost_excluding_purchase_vat_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIProjectTravelExpenseOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTravelExpenseOutputModel::fromJsonObject(QJsonObject json) {

    m_attachment_count_isValid = ::OpenAPI::fromJsonValue(m_attachment_count, json[QString("attachmentCount")]);
    m_attachment_count_isSet = !json[QString("attachmentCount")].isNull() && m_attachment_count_isValid;

    m_billing_dependency_phase_isValid = ::OpenAPI::fromJsonValue(m_billing_dependency_phase, json[QString("billingDependencyPhase")]);
    m_billing_dependency_phase_isSet = !json[QString("billingDependencyPhase")].isNull() && m_billing_dependency_phase_isValid;

    m_billing_schedule_isValid = ::OpenAPI::fromJsonValue(m_billing_schedule, json[QString("billingSchedule")]);
    m_billing_schedule_isSet = !json[QString("billingSchedule")].isNull() && m_billing_schedule_isValid;

    m_cost_account_isValid = ::OpenAPI::fromJsonValue(m_cost_account, json[QString("costAccount")]);
    m_cost_account_isSet = !json[QString("costAccount")].isNull() && m_cost_account_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_invoice_quantity_isValid = ::OpenAPI::fromJsonValue(m_invoice_quantity, json[QString("invoiceQuantity")]);
    m_invoice_quantity_isSet = !json[QString("invoiceQuantity")].isNull() && m_invoice_quantity_isValid;

    m_invoice_row_comment_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_comment, json[QString("invoiceRowComment")]);
    m_invoice_row_comment_isSet = !json[QString("invoiceRowComment")].isNull() && m_invoice_row_comment_isValid;

    m_invoice_row_description_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_description, json[QString("invoiceRowDescription")]);
    m_invoice_row_description_isSet = !json[QString("invoiceRowDescription")].isNull() && m_invoice_row_description_isValid;

    m_invoice_row_guid_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_guid, json[QString("invoiceRowGuid")]);
    m_invoice_row_guid_isSet = !json[QString("invoiceRowGuid")].isNull() && m_invoice_row_guid_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_planned_billing_date_isValid = ::OpenAPI::fromJsonValue(m_planned_billing_date, json[QString("plannedBillingDate")]);
    m_planned_billing_date_isSet = !json[QString("plannedBillingDate")].isNull() && m_planned_billing_date_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_purchase_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_purchase_vat_rate, json[QString("purchaseVatRate")]);
    m_purchase_vat_rate_isSet = !json[QString("purchaseVatRate")].isNull() && m_purchase_vat_rate_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_travel_end_time_isValid = ::OpenAPI::fromJsonValue(m_travel_end_time, json[QString("travelEndTime")]);
    m_travel_end_time_isSet = !json[QString("travelEndTime")].isNull() && m_travel_end_time_isValid;

    m_travel_expense_isValid = ::OpenAPI::fromJsonValue(m_travel_expense, json[QString("travelExpense")]);
    m_travel_expense_isSet = !json[QString("travelExpense")].isNull() && m_travel_expense_isValid;

    m_travel_reimbursement_isValid = ::OpenAPI::fromJsonValue(m_travel_reimbursement, json[QString("travelReimbursement")]);
    m_travel_reimbursement_isSet = !json[QString("travelReimbursement")].isNull() && m_travel_reimbursement_isValid;

    m_travel_reimbursement_required_isValid = ::OpenAPI::fromJsonValue(m_travel_reimbursement_required, json[QString("travelReimbursementRequired")]);
    m_travel_reimbursement_required_isSet = !json[QString("travelReimbursementRequired")].isNull() && m_travel_reimbursement_required_isValid;

    m_travel_start_time_isValid = ::OpenAPI::fromJsonValue(m_travel_start_time, json[QString("travelStartTime")]);
    m_travel_start_time_isSet = !json[QString("travelStartTime")].isNull() && m_travel_start_time_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_cost_excluding_purchase_vat_isValid = ::OpenAPI::fromJsonValue(m_unit_cost_excluding_purchase_vat, json[QString("unitCostExcludingPurchaseVat")]);
    m_unit_cost_excluding_purchase_vat_isSet = !json[QString("unitCostExcludingPurchaseVat")].isNull() && m_unit_cost_excluding_purchase_vat_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIProjectTravelExpenseOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTravelExpenseOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_count_isSet) {
        obj.insert(QString("attachmentCount"), ::OpenAPI::toJsonValue(m_attachment_count));
    }
    if (m_billing_dependency_phase.isSet()) {
        obj.insert(QString("billingDependencyPhase"), ::OpenAPI::toJsonValue(m_billing_dependency_phase));
    }
    if (m_billing_schedule.isSet()) {
        obj.insert(QString("billingSchedule"), ::OpenAPI::toJsonValue(m_billing_schedule));
    }
    if (m_cost_account.isSet()) {
        obj.insert(QString("costAccount"), ::OpenAPI::toJsonValue(m_cost_account));
    }
    if (m_cost_center.isSet()) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_invoice_quantity_isSet) {
        obj.insert(QString("invoiceQuantity"), ::OpenAPI::toJsonValue(m_invoice_quantity));
    }
    if (m_invoice_row_comment_isSet) {
        obj.insert(QString("invoiceRowComment"), ::OpenAPI::toJsonValue(m_invoice_row_comment));
    }
    if (m_invoice_row_description_isSet) {
        obj.insert(QString("invoiceRowDescription"), ::OpenAPI::toJsonValue(m_invoice_row_description));
    }
    if (m_invoice_row_guid_isSet) {
        obj.insert(QString("invoiceRowGuid"), ::OpenAPI::toJsonValue(m_invoice_row_guid));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_planned_billing_date_isSet) {
        obj.insert(QString("plannedBillingDate"), ::OpenAPI::toJsonValue(m_planned_billing_date));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_purchase_vat_rate_isSet) {
        obj.insert(QString("purchaseVatRate"), ::OpenAPI::toJsonValue(m_purchase_vat_rate));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_travel_end_time_isSet) {
        obj.insert(QString("travelEndTime"), ::OpenAPI::toJsonValue(m_travel_end_time));
    }
    if (m_travel_expense.isSet()) {
        obj.insert(QString("travelExpense"), ::OpenAPI::toJsonValue(m_travel_expense));
    }
    if (m_travel_reimbursement.isSet()) {
        obj.insert(QString("travelReimbursement"), ::OpenAPI::toJsonValue(m_travel_reimbursement));
    }
    if (m_travel_reimbursement_required_isSet) {
        obj.insert(QString("travelReimbursementRequired"), ::OpenAPI::toJsonValue(m_travel_reimbursement_required));
    }
    if (m_travel_start_time_isSet) {
        obj.insert(QString("travelStartTime"), ::OpenAPI::toJsonValue(m_travel_start_time));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_cost_excluding_purchase_vat.isSet()) {
        obj.insert(QString("unitCostExcludingPurchaseVat"), ::OpenAPI::toJsonValue(m_unit_cost_excluding_purchase_vat));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

qint32 OAIProjectTravelExpenseOutputModel::getAttachmentCount() const {
    return m_attachment_count;
}
void OAIProjectTravelExpenseOutputModel::setAttachmentCount(const qint32 &attachment_count) {
    m_attachment_count = attachment_count;
    m_attachment_count_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_attachment_count_Set() const{
    return m_attachment_count_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_attachment_count_Valid() const{
    return m_attachment_count_isValid;
}

OAIModelWithName OAIProjectTravelExpenseOutputModel::getBillingDependencyPhase() const {
    return m_billing_dependency_phase;
}
void OAIProjectTravelExpenseOutputModel::setBillingDependencyPhase(const OAIModelWithName &billing_dependency_phase) {
    m_billing_dependency_phase = billing_dependency_phase;
    m_billing_dependency_phase_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_billing_dependency_phase_Set() const{
    return m_billing_dependency_phase_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_billing_dependency_phase_Valid() const{
    return m_billing_dependency_phase_isValid;
}

OAIProjectTravelExpenseBillingScheduleType OAIProjectTravelExpenseOutputModel::getBillingSchedule() const {
    return m_billing_schedule;
}
void OAIProjectTravelExpenseOutputModel::setBillingSchedule(const OAIProjectTravelExpenseBillingScheduleType &billing_schedule) {
    m_billing_schedule = billing_schedule;
    m_billing_schedule_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_billing_schedule_Set() const{
    return m_billing_schedule_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_billing_schedule_Valid() const{
    return m_billing_schedule_isValid;
}

OAIModelWithName OAIProjectTravelExpenseOutputModel::getCostAccount() const {
    return m_cost_account;
}
void OAIProjectTravelExpenseOutputModel::setCostAccount(const OAIModelWithName &cost_account) {
    m_cost_account = cost_account;
    m_cost_account_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_cost_account_Set() const{
    return m_cost_account_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_cost_account_Valid() const{
    return m_cost_account_isValid;
}

OAIModelWithName OAIProjectTravelExpenseOutputModel::getCostCenter() const {
    return m_cost_center;
}
void OAIProjectTravelExpenseOutputModel::setCostCenter(const OAIModelWithName &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectTravelExpenseOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProjectTravelExpenseOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProjectTravelExpenseOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectTravelExpenseOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIModelWithName OAIProjectTravelExpenseOutputModel::getCustomer() const {
    return m_customer;
}
void OAIProjectTravelExpenseOutputModel::setCustomer(const OAIModelWithName &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIProjectTravelExpenseOutputModel::getDescription() const {
    return m_description;
}
void OAIProjectTravelExpenseOutputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIProjectTravelExpenseOutputModel::getEventDate() const {
    return m_event_date;
}
void OAIProjectTravelExpenseOutputModel::setEventDate(const QDate &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIProjectTravelExpenseOutputModel::getGuid() const {
    return m_guid;
}
void OAIProjectTravelExpenseOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIInvoiceSubModel OAIProjectTravelExpenseOutputModel::getInvoice() const {
    return m_invoice;
}
void OAIProjectTravelExpenseOutputModel::setInvoice(const OAIInvoiceSubModel &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_Valid() const{
    return m_invoice_isValid;
}

double OAIProjectTravelExpenseOutputModel::getInvoiceQuantity() const {
    return m_invoice_quantity;
}
void OAIProjectTravelExpenseOutputModel::setInvoiceQuantity(const double &invoice_quantity) {
    m_invoice_quantity = invoice_quantity;
    m_invoice_quantity_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_quantity_Set() const{
    return m_invoice_quantity_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_quantity_Valid() const{
    return m_invoice_quantity_isValid;
}

QString OAIProjectTravelExpenseOutputModel::getInvoiceRowComment() const {
    return m_invoice_row_comment;
}
void OAIProjectTravelExpenseOutputModel::setInvoiceRowComment(const QString &invoice_row_comment) {
    m_invoice_row_comment = invoice_row_comment;
    m_invoice_row_comment_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_row_comment_Set() const{
    return m_invoice_row_comment_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_row_comment_Valid() const{
    return m_invoice_row_comment_isValid;
}

QString OAIProjectTravelExpenseOutputModel::getInvoiceRowDescription() const {
    return m_invoice_row_description;
}
void OAIProjectTravelExpenseOutputModel::setInvoiceRowDescription(const QString &invoice_row_description) {
    m_invoice_row_description = invoice_row_description;
    m_invoice_row_description_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_row_description_Set() const{
    return m_invoice_row_description_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_row_description_Valid() const{
    return m_invoice_row_description_isValid;
}

QString OAIProjectTravelExpenseOutputModel::getInvoiceRowGuid() const {
    return m_invoice_row_guid;
}
void OAIProjectTravelExpenseOutputModel::setInvoiceRowGuid(const QString &invoice_row_guid) {
    m_invoice_row_guid = invoice_row_guid;
    m_invoice_row_guid_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_row_guid_Set() const{
    return m_invoice_row_guid_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_invoice_row_guid_Valid() const{
    return m_invoice_row_guid_isValid;
}

bool OAIProjectTravelExpenseOutputModel::isIsBillable() const {
    return m_is_billable;
}
void OAIProjectTravelExpenseOutputModel::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectTravelExpenseOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProjectTravelExpenseOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProjectTravelExpenseOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProjectTravelExpenseOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIProjectTravelExpenseOutputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIProjectTravelExpenseOutputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

OAIModelBaseWithRequiredGuid OAIProjectTravelExpenseOutputModel::getPhase() const {
    return m_phase;
}
void OAIProjectTravelExpenseOutputModel::setPhase(const OAIModelBaseWithRequiredGuid &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

QDate OAIProjectTravelExpenseOutputModel::getPlannedBillingDate() const {
    return m_planned_billing_date;
}
void OAIProjectTravelExpenseOutputModel::setPlannedBillingDate(const QDate &planned_billing_date) {
    m_planned_billing_date = planned_billing_date;
    m_planned_billing_date_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_planned_billing_date_Set() const{
    return m_planned_billing_date_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_planned_billing_date_Valid() const{
    return m_planned_billing_date_isValid;
}

OAIProjectTravelExpenseProjectSubModel OAIProjectTravelExpenseOutputModel::getProject() const {
    return m_project;
}
void OAIProjectTravelExpenseOutputModel::setProject(const OAIProjectTravelExpenseProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

double OAIProjectTravelExpenseOutputModel::getPurchaseVatRate() const {
    return m_purchase_vat_rate;
}
void OAIProjectTravelExpenseOutputModel::setPurchaseVatRate(const double &purchase_vat_rate) {
    m_purchase_vat_rate = purchase_vat_rate;
    m_purchase_vat_rate_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_purchase_vat_rate_Set() const{
    return m_purchase_vat_rate_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_purchase_vat_rate_Valid() const{
    return m_purchase_vat_rate_isValid;
}

double OAIProjectTravelExpenseOutputModel::getQuantity() const {
    return m_quantity;
}
void OAIProjectTravelExpenseOutputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIModelWithName OAIProjectTravelExpenseOutputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIProjectTravelExpenseOutputModel::setSalesAccount(const OAIModelWithName &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

QDateTime OAIProjectTravelExpenseOutputModel::getTravelEndTime() const {
    return m_travel_end_time;
}
void OAIProjectTravelExpenseOutputModel::setTravelEndTime(const QDateTime &travel_end_time) {
    m_travel_end_time = travel_end_time;
    m_travel_end_time_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_end_time_Set() const{
    return m_travel_end_time_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_end_time_Valid() const{
    return m_travel_end_time_isValid;
}

OAITravelExpenseSubModel OAIProjectTravelExpenseOutputModel::getTravelExpense() const {
    return m_travel_expense;
}
void OAIProjectTravelExpenseOutputModel::setTravelExpense(const OAITravelExpenseSubModel &travel_expense) {
    m_travel_expense = travel_expense;
    m_travel_expense_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_expense_Set() const{
    return m_travel_expense_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_expense_Valid() const{
    return m_travel_expense_isValid;
}

OAITravelReimbursementSubModel OAIProjectTravelExpenseOutputModel::getTravelReimbursement() const {
    return m_travel_reimbursement;
}
void OAIProjectTravelExpenseOutputModel::setTravelReimbursement(const OAITravelReimbursementSubModel &travel_reimbursement) {
    m_travel_reimbursement = travel_reimbursement;
    m_travel_reimbursement_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_reimbursement_Set() const{
    return m_travel_reimbursement_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_reimbursement_Valid() const{
    return m_travel_reimbursement_isValid;
}

bool OAIProjectTravelExpenseOutputModel::isTravelReimbursementRequired() const {
    return m_travel_reimbursement_required;
}
void OAIProjectTravelExpenseOutputModel::setTravelReimbursementRequired(const bool &travel_reimbursement_required) {
    m_travel_reimbursement_required = travel_reimbursement_required;
    m_travel_reimbursement_required_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_reimbursement_required_Set() const{
    return m_travel_reimbursement_required_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_reimbursement_required_Valid() const{
    return m_travel_reimbursement_required_isValid;
}

QDateTime OAIProjectTravelExpenseOutputModel::getTravelStartTime() const {
    return m_travel_start_time;
}
void OAIProjectTravelExpenseOutputModel::setTravelStartTime(const QDateTime &travel_start_time) {
    m_travel_start_time = travel_start_time;
    m_travel_start_time_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_start_time_Set() const{
    return m_travel_start_time_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_travel_start_time_Valid() const{
    return m_travel_start_time_isValid;
}

OAIMoneyOutputModel OAIProjectTravelExpenseOutputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIProjectTravelExpenseOutputModel::setUnitCost(const OAIMoneyOutputModel &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyOutputModel OAIProjectTravelExpenseOutputModel::getUnitCostExcludingPurchaseVat() const {
    return m_unit_cost_excluding_purchase_vat;
}
void OAIProjectTravelExpenseOutputModel::setUnitCostExcludingPurchaseVat(const OAIMoneyOutputModel &unit_cost_excluding_purchase_vat) {
    m_unit_cost_excluding_purchase_vat = unit_cost_excluding_purchase_vat;
    m_unit_cost_excluding_purchase_vat_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_unit_cost_excluding_purchase_vat_Set() const{
    return m_unit_cost_excluding_purchase_vat_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_unit_cost_excluding_purchase_vat_Valid() const{
    return m_unit_cost_excluding_purchase_vat_isValid;
}

OAIMoneyOutputModel OAIProjectTravelExpenseOutputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProjectTravelExpenseOutputModel::setUnitPrice(const OAIMoneyOutputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIUserRequiredSubModel OAIProjectTravelExpenseOutputModel::getUser() const {
    return m_user;
}
void OAIProjectTravelExpenseOutputModel::setUser(const OAIUserRequiredSubModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

double OAIProjectTravelExpenseOutputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIProjectTravelExpenseOutputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIProjectTravelExpenseOutputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIProjectTravelExpenseOutputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIProjectTravelExpenseOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_dependency_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_expense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_reimbursement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_reimbursement_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_excluding_purchase_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTravelExpenseOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
