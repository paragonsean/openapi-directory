/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityModel::OAIActivityModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityModel::OAIActivityModel() {
    this->initializeModel();
}

OAIActivityModel::~OAIActivityModel() {}

void OAIActivityModel::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_has_duration_isSet = false;
    m_has_duration_isValid = false;

    m_has_hours_isSet = false;
    m_has_hours_isValid = false;

    m_is_all_day_isSet = false;
    m_is_all_day_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_is_unassigned_isSet = false;
    m_is_unassigned_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_owner_user_isSet = false;
    m_owner_user_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_project_task_status_isSet = false;
    m_project_task_status_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_recurrence_parent_activity_guid_isSet = false;
    m_recurrence_parent_activity_guid_isValid = false;

    m_recurrence_rule_isSet = false;
    m_recurrence_rule_isValid = false;

    m_recurrence_type_isSet = false;
    m_recurrence_type_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;
}

void OAIActivityModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityModel::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_has_duration_isValid = ::OpenAPI::fromJsonValue(m_has_duration, json[QString("hasDuration")]);
    m_has_duration_isSet = !json[QString("hasDuration")].isNull() && m_has_duration_isValid;

    m_has_hours_isValid = ::OpenAPI::fromJsonValue(m_has_hours, json[QString("hasHours")]);
    m_has_hours_isSet = !json[QString("hasHours")].isNull() && m_has_hours_isValid;

    m_is_all_day_isValid = ::OpenAPI::fromJsonValue(m_is_all_day, json[QString("isAllDay")]);
    m_is_all_day_isSet = !json[QString("isAllDay")].isNull() && m_is_all_day_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("isClosed")]);
    m_is_closed_isSet = !json[QString("isClosed")].isNull() && m_is_closed_isValid;

    m_is_unassigned_isValid = ::OpenAPI::fromJsonValue(m_is_unassigned, json[QString("isUnassigned")]);
    m_is_unassigned_isSet = !json[QString("isUnassigned")].isNull() && m_is_unassigned_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_owner_user_isValid = ::OpenAPI::fromJsonValue(m_owner_user, json[QString("ownerUser")]);
    m_owner_user_isSet = !json[QString("ownerUser")].isNull() && m_owner_user_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_project_task_status_isValid = ::OpenAPI::fromJsonValue(m_project_task_status, json[QString("projectTaskStatus")]);
    m_project_task_status_isSet = !json[QString("projectTaskStatus")].isNull() && m_project_task_status_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_recurrence_parent_activity_guid_isValid = ::OpenAPI::fromJsonValue(m_recurrence_parent_activity_guid, json[QString("recurrenceParentActivityGuid")]);
    m_recurrence_parent_activity_guid_isSet = !json[QString("recurrenceParentActivityGuid")].isNull() && m_recurrence_parent_activity_guid_isValid;

    m_recurrence_rule_isValid = ::OpenAPI::fromJsonValue(m_recurrence_rule, json[QString("recurrenceRule")]);
    m_recurrence_rule_isSet = !json[QString("recurrenceRule")].isNull() && m_recurrence_rule_isValid;

    m_recurrence_type_isValid = ::OpenAPI::fromJsonValue(m_recurrence_type, json[QString("recurrenceType")]);
    m_recurrence_type_isSet = !json[QString("recurrenceType")].isNull() && m_recurrence_type_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;
}

QString OAIActivityModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityModel::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type.isSet()) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_has_duration_isSet) {
        obj.insert(QString("hasDuration"), ::OpenAPI::toJsonValue(m_has_duration));
    }
    if (m_has_hours_isSet) {
        obj.insert(QString("hasHours"), ::OpenAPI::toJsonValue(m_has_hours));
    }
    if (m_is_all_day_isSet) {
        obj.insert(QString("isAllDay"), ::OpenAPI::toJsonValue(m_is_all_day));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("isClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_is_unassigned_isSet) {
        obj.insert(QString("isUnassigned"), ::OpenAPI::toJsonValue(m_is_unassigned));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_owner_user.isSet()) {
        obj.insert(QString("ownerUser"), ::OpenAPI::toJsonValue(m_owner_user));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_project_task_status.isSet()) {
        obj.insert(QString("projectTaskStatus"), ::OpenAPI::toJsonValue(m_project_task_status));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_recurrence_parent_activity_guid_isSet) {
        obj.insert(QString("recurrenceParentActivityGuid"), ::OpenAPI::toJsonValue(m_recurrence_parent_activity_guid));
    }
    if (m_recurrence_rule_isSet) {
        obj.insert(QString("recurrenceRule"), ::OpenAPI::toJsonValue(m_recurrence_rule));
    }
    if (m_recurrence_type.isSet()) {
        obj.insert(QString("recurrenceType"), ::OpenAPI::toJsonValue(m_recurrence_type));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    return obj;
}

OAIActivityActivityType OAIActivityModel::getActivityType() const {
    return m_activity_type;
}
void OAIActivityModel::setActivityType(const OAIActivityActivityType &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIActivityModel::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIActivityModel::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIActivityModel::getCreatedBy() const {
    return m_created_by;
}
void OAIActivityModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIActivityModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIActivityModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIActivityModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIActivityModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIActivityModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIActivityModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIActivityCustomer OAIActivityModel::getCustomer() const {
    return m_customer;
}
void OAIActivityModel::setCustomer(const OAIActivityCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIActivityModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIActivityModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QDateTime OAIActivityModel::getEndDateTime() const {
    return m_end_date_time;
}
void OAIActivityModel::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIActivityModel::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIActivityModel::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QString OAIActivityModel::getGuid() const {
    return m_guid;
}
void OAIActivityModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIActivityModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIActivityModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIActivityModel::isHasDuration() const {
    return m_has_duration;
}
void OAIActivityModel::setHasDuration(const bool &has_duration) {
    m_has_duration = has_duration;
    m_has_duration_isSet = true;
}

bool OAIActivityModel::is_has_duration_Set() const{
    return m_has_duration_isSet;
}

bool OAIActivityModel::is_has_duration_Valid() const{
    return m_has_duration_isValid;
}

bool OAIActivityModel::isHasHours() const {
    return m_has_hours;
}
void OAIActivityModel::setHasHours(const bool &has_hours) {
    m_has_hours = has_hours;
    m_has_hours_isSet = true;
}

bool OAIActivityModel::is_has_hours_Set() const{
    return m_has_hours_isSet;
}

bool OAIActivityModel::is_has_hours_Valid() const{
    return m_has_hours_isValid;
}

bool OAIActivityModel::isIsAllDay() const {
    return m_is_all_day;
}
void OAIActivityModel::setIsAllDay(const bool &is_all_day) {
    m_is_all_day = is_all_day;
    m_is_all_day_isSet = true;
}

bool OAIActivityModel::is_is_all_day_Set() const{
    return m_is_all_day_isSet;
}

bool OAIActivityModel::is_is_all_day_Valid() const{
    return m_is_all_day_isValid;
}

bool OAIActivityModel::isIsClosed() const {
    return m_is_closed;
}
void OAIActivityModel::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIActivityModel::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIActivityModel::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

bool OAIActivityModel::isIsUnassigned() const {
    return m_is_unassigned;
}
void OAIActivityModel::setIsUnassigned(const bool &is_unassigned) {
    m_is_unassigned = is_unassigned;
    m_is_unassigned_isSet = true;
}

bool OAIActivityModel::is_is_unassigned_Set() const{
    return m_is_unassigned_isSet;
}

bool OAIActivityModel::is_is_unassigned_Valid() const{
    return m_is_unassigned_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIActivityModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIActivityModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIActivityModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIActivityModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIActivityModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIActivityModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIActivityModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIActivityModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIActivityModel::getLocation() const {
    return m_location;
}
void OAIActivityModel::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIActivityModel::is_location_Set() const{
    return m_location_isSet;
}

bool OAIActivityModel::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIActivityModel::getName() const {
    return m_name;
}
void OAIActivityModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivityModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivityModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIActivityModel::getNotes() const {
    return m_notes;
}
void OAIActivityModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIActivityModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIActivityModel::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIActivityOwnerModel OAIActivityModel::getOwnerUser() const {
    return m_owner_user;
}
void OAIActivityModel::setOwnerUser(const OAIActivityOwnerModel &owner_user) {
    m_owner_user = owner_user;
    m_owner_user_isSet = true;
}

bool OAIActivityModel::is_owner_user_Set() const{
    return m_owner_user_isSet;
}

bool OAIActivityModel::is_owner_user_Valid() const{
    return m_owner_user_isValid;
}

OAIActivityPhase OAIActivityModel::getPhase() const {
    return m_phase;
}
void OAIActivityModel::setPhase(const OAIActivityPhase &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIActivityModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIActivityModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAIModelWithName OAIActivityModel::getProjectTaskStatus() const {
    return m_project_task_status;
}
void OAIActivityModel::setProjectTaskStatus(const OAIModelWithName &project_task_status) {
    m_project_task_status = project_task_status;
    m_project_task_status_isSet = true;
}

bool OAIActivityModel::is_project_task_status_Set() const{
    return m_project_task_status_isSet;
}

bool OAIActivityModel::is_project_task_status_Valid() const{
    return m_project_task_status_isValid;
}

OAIActivityRecurrenceModel OAIActivityModel::getRecurrence() const {
    return m_recurrence;
}
void OAIActivityModel::setRecurrence(const OAIActivityRecurrenceModel &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIActivityModel::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIActivityModel::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QString OAIActivityModel::getRecurrenceParentActivityGuid() const {
    return m_recurrence_parent_activity_guid;
}
void OAIActivityModel::setRecurrenceParentActivityGuid(const QString &recurrence_parent_activity_guid) {
    m_recurrence_parent_activity_guid = recurrence_parent_activity_guid;
    m_recurrence_parent_activity_guid_isSet = true;
}

bool OAIActivityModel::is_recurrence_parent_activity_guid_Set() const{
    return m_recurrence_parent_activity_guid_isSet;
}

bool OAIActivityModel::is_recurrence_parent_activity_guid_Valid() const{
    return m_recurrence_parent_activity_guid_isValid;
}

QString OAIActivityModel::getRecurrenceRule() const {
    return m_recurrence_rule;
}
void OAIActivityModel::setRecurrenceRule(const QString &recurrence_rule) {
    m_recurrence_rule = recurrence_rule;
    m_recurrence_rule_isSet = true;
}

bool OAIActivityModel::is_recurrence_rule_Set() const{
    return m_recurrence_rule_isSet;
}

bool OAIActivityModel::is_recurrence_rule_Valid() const{
    return m_recurrence_rule_isValid;
}

OAIRecurrenceType OAIActivityModel::getRecurrenceType() const {
    return m_recurrence_type;
}
void OAIActivityModel::setRecurrenceType(const OAIRecurrenceType &recurrence_type) {
    m_recurrence_type = recurrence_type;
    m_recurrence_type_isSet = true;
}

bool OAIActivityModel::is_recurrence_type_Set() const{
    return m_recurrence_type_isSet;
}

bool OAIActivityModel::is_recurrence_type_Valid() const{
    return m_recurrence_type_isValid;
}

QDateTime OAIActivityModel::getStartDateTime() const {
    return m_start_date_time;
}
void OAIActivityModel::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIActivityModel::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIActivityModel::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

bool OAIActivityModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_all_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unassigned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_parent_activity_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_type_isValid && m_name_isValid && m_owner_user_isValid && m_start_date_time_isValid && true;
}

} // namespace OpenAPI
