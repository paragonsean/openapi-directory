/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkdayModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkdayModel::OAIWorkdayModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkdayModel::OAIWorkdayModel() {
    this->initializeModel();
}

OAIWorkdayModel::~OAIWorkdayModel() {}

void OAIWorkdayModel::initializeModel() {

    m_absence_hours_isSet = false;
    m_absence_hours_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_entered_hours_isSet = false;
    m_entered_hours_isValid = false;

    m_entered_time_entries_isSet = false;
    m_entered_time_entries_isValid = false;

    m_expected_hours_isSet = false;
    m_expected_hours_isValid = false;

    m_flextime_limit_per_day_isSet = false;
    m_flextime_limit_per_day_isValid = false;

    m_holiday_name_isSet = false;
    m_holiday_name_isValid = false;

    m_incomplete_timing_minutes_isSet = false;
    m_incomplete_timing_minutes_isValid = false;

    m_is_completed_isSet = false;
    m_is_completed_isValid = false;

    m_is_holiday_isSet = false;
    m_is_holiday_isValid = false;

    m_is_overtime_allowed_isSet = false;
    m_is_overtime_allowed_isValid = false;

    m_is_read_only_isSet = false;
    m_is_read_only_isValid = false;

    m_user_guid_isSet = false;
    m_user_guid_isValid = false;
}

void OAIWorkdayModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkdayModel::fromJsonObject(QJsonObject json) {

    m_absence_hours_isValid = ::OpenAPI::fromJsonValue(m_absence_hours, json[QString("absenceHours")]);
    m_absence_hours_isSet = !json[QString("absenceHours")].isNull() && m_absence_hours_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_entered_hours_isValid = ::OpenAPI::fromJsonValue(m_entered_hours, json[QString("enteredHours")]);
    m_entered_hours_isSet = !json[QString("enteredHours")].isNull() && m_entered_hours_isValid;

    m_entered_time_entries_isValid = ::OpenAPI::fromJsonValue(m_entered_time_entries, json[QString("enteredTimeEntries")]);
    m_entered_time_entries_isSet = !json[QString("enteredTimeEntries")].isNull() && m_entered_time_entries_isValid;

    m_expected_hours_isValid = ::OpenAPI::fromJsonValue(m_expected_hours, json[QString("expectedHours")]);
    m_expected_hours_isSet = !json[QString("expectedHours")].isNull() && m_expected_hours_isValid;

    m_flextime_limit_per_day_isValid = ::OpenAPI::fromJsonValue(m_flextime_limit_per_day, json[QString("flextimeLimitPerDay")]);
    m_flextime_limit_per_day_isSet = !json[QString("flextimeLimitPerDay")].isNull() && m_flextime_limit_per_day_isValid;

    m_holiday_name_isValid = ::OpenAPI::fromJsonValue(m_holiday_name, json[QString("holidayName")]);
    m_holiday_name_isSet = !json[QString("holidayName")].isNull() && m_holiday_name_isValid;

    m_incomplete_timing_minutes_isValid = ::OpenAPI::fromJsonValue(m_incomplete_timing_minutes, json[QString("incompleteTimingMinutes")]);
    m_incomplete_timing_minutes_isSet = !json[QString("incompleteTimingMinutes")].isNull() && m_incomplete_timing_minutes_isValid;

    m_is_completed_isValid = ::OpenAPI::fromJsonValue(m_is_completed, json[QString("isCompleted")]);
    m_is_completed_isSet = !json[QString("isCompleted")].isNull() && m_is_completed_isValid;

    m_is_holiday_isValid = ::OpenAPI::fromJsonValue(m_is_holiday, json[QString("isHoliday")]);
    m_is_holiday_isSet = !json[QString("isHoliday")].isNull() && m_is_holiday_isValid;

    m_is_overtime_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_overtime_allowed, json[QString("isOvertimeAllowed")]);
    m_is_overtime_allowed_isSet = !json[QString("isOvertimeAllowed")].isNull() && m_is_overtime_allowed_isValid;

    m_is_read_only_isValid = ::OpenAPI::fromJsonValue(m_is_read_only, json[QString("isReadOnly")]);
    m_is_read_only_isSet = !json[QString("isReadOnly")].isNull() && m_is_read_only_isValid;

    m_user_guid_isValid = ::OpenAPI::fromJsonValue(m_user_guid, json[QString("userGuid")]);
    m_user_guid_isSet = !json[QString("userGuid")].isNull() && m_user_guid_isValid;
}

QString OAIWorkdayModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkdayModel::asJsonObject() const {
    QJsonObject obj;
    if (m_absence_hours_isSet) {
        obj.insert(QString("absenceHours"), ::OpenAPI::toJsonValue(m_absence_hours));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_entered_hours_isSet) {
        obj.insert(QString("enteredHours"), ::OpenAPI::toJsonValue(m_entered_hours));
    }
    if (m_entered_time_entries_isSet) {
        obj.insert(QString("enteredTimeEntries"), ::OpenAPI::toJsonValue(m_entered_time_entries));
    }
    if (m_expected_hours_isSet) {
        obj.insert(QString("expectedHours"), ::OpenAPI::toJsonValue(m_expected_hours));
    }
    if (m_flextime_limit_per_day_isSet) {
        obj.insert(QString("flextimeLimitPerDay"), ::OpenAPI::toJsonValue(m_flextime_limit_per_day));
    }
    if (m_holiday_name_isSet) {
        obj.insert(QString("holidayName"), ::OpenAPI::toJsonValue(m_holiday_name));
    }
    if (m_incomplete_timing_minutes_isSet) {
        obj.insert(QString("incompleteTimingMinutes"), ::OpenAPI::toJsonValue(m_incomplete_timing_minutes));
    }
    if (m_is_completed_isSet) {
        obj.insert(QString("isCompleted"), ::OpenAPI::toJsonValue(m_is_completed));
    }
    if (m_is_holiday_isSet) {
        obj.insert(QString("isHoliday"), ::OpenAPI::toJsonValue(m_is_holiday));
    }
    if (m_is_overtime_allowed_isSet) {
        obj.insert(QString("isOvertimeAllowed"), ::OpenAPI::toJsonValue(m_is_overtime_allowed));
    }
    if (m_is_read_only_isSet) {
        obj.insert(QString("isReadOnly"), ::OpenAPI::toJsonValue(m_is_read_only));
    }
    if (m_user_guid_isSet) {
        obj.insert(QString("userGuid"), ::OpenAPI::toJsonValue(m_user_guid));
    }
    return obj;
}

double OAIWorkdayModel::getAbsenceHours() const {
    return m_absence_hours;
}
void OAIWorkdayModel::setAbsenceHours(const double &absence_hours) {
    m_absence_hours = absence_hours;
    m_absence_hours_isSet = true;
}

bool OAIWorkdayModel::is_absence_hours_Set() const{
    return m_absence_hours_isSet;
}

bool OAIWorkdayModel::is_absence_hours_Valid() const{
    return m_absence_hours_isValid;
}

QDate OAIWorkdayModel::getDate() const {
    return m_date;
}
void OAIWorkdayModel::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIWorkdayModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIWorkdayModel::is_date_Valid() const{
    return m_date_isValid;
}

double OAIWorkdayModel::getEnteredHours() const {
    return m_entered_hours;
}
void OAIWorkdayModel::setEnteredHours(const double &entered_hours) {
    m_entered_hours = entered_hours;
    m_entered_hours_isSet = true;
}

bool OAIWorkdayModel::is_entered_hours_Set() const{
    return m_entered_hours_isSet;
}

bool OAIWorkdayModel::is_entered_hours_Valid() const{
    return m_entered_hours_isValid;
}

double OAIWorkdayModel::getEnteredTimeEntries() const {
    return m_entered_time_entries;
}
void OAIWorkdayModel::setEnteredTimeEntries(const double &entered_time_entries) {
    m_entered_time_entries = entered_time_entries;
    m_entered_time_entries_isSet = true;
}

bool OAIWorkdayModel::is_entered_time_entries_Set() const{
    return m_entered_time_entries_isSet;
}

bool OAIWorkdayModel::is_entered_time_entries_Valid() const{
    return m_entered_time_entries_isValid;
}

double OAIWorkdayModel::getExpectedHours() const {
    return m_expected_hours;
}
void OAIWorkdayModel::setExpectedHours(const double &expected_hours) {
    m_expected_hours = expected_hours;
    m_expected_hours_isSet = true;
}

bool OAIWorkdayModel::is_expected_hours_Set() const{
    return m_expected_hours_isSet;
}

bool OAIWorkdayModel::is_expected_hours_Valid() const{
    return m_expected_hours_isValid;
}

double OAIWorkdayModel::getFlextimeLimitPerDay() const {
    return m_flextime_limit_per_day;
}
void OAIWorkdayModel::setFlextimeLimitPerDay(const double &flextime_limit_per_day) {
    m_flextime_limit_per_day = flextime_limit_per_day;
    m_flextime_limit_per_day_isSet = true;
}

bool OAIWorkdayModel::is_flextime_limit_per_day_Set() const{
    return m_flextime_limit_per_day_isSet;
}

bool OAIWorkdayModel::is_flextime_limit_per_day_Valid() const{
    return m_flextime_limit_per_day_isValid;
}

QString OAIWorkdayModel::getHolidayName() const {
    return m_holiday_name;
}
void OAIWorkdayModel::setHolidayName(const QString &holiday_name) {
    m_holiday_name = holiday_name;
    m_holiday_name_isSet = true;
}

bool OAIWorkdayModel::is_holiday_name_Set() const{
    return m_holiday_name_isSet;
}

bool OAIWorkdayModel::is_holiday_name_Valid() const{
    return m_holiday_name_isValid;
}

qint32 OAIWorkdayModel::getIncompleteTimingMinutes() const {
    return m_incomplete_timing_minutes;
}
void OAIWorkdayModel::setIncompleteTimingMinutes(const qint32 &incomplete_timing_minutes) {
    m_incomplete_timing_minutes = incomplete_timing_minutes;
    m_incomplete_timing_minutes_isSet = true;
}

bool OAIWorkdayModel::is_incomplete_timing_minutes_Set() const{
    return m_incomplete_timing_minutes_isSet;
}

bool OAIWorkdayModel::is_incomplete_timing_minutes_Valid() const{
    return m_incomplete_timing_minutes_isValid;
}

bool OAIWorkdayModel::isIsCompleted() const {
    return m_is_completed;
}
void OAIWorkdayModel::setIsCompleted(const bool &is_completed) {
    m_is_completed = is_completed;
    m_is_completed_isSet = true;
}

bool OAIWorkdayModel::is_is_completed_Set() const{
    return m_is_completed_isSet;
}

bool OAIWorkdayModel::is_is_completed_Valid() const{
    return m_is_completed_isValid;
}

bool OAIWorkdayModel::isIsHoliday() const {
    return m_is_holiday;
}
void OAIWorkdayModel::setIsHoliday(const bool &is_holiday) {
    m_is_holiday = is_holiday;
    m_is_holiday_isSet = true;
}

bool OAIWorkdayModel::is_is_holiday_Set() const{
    return m_is_holiday_isSet;
}

bool OAIWorkdayModel::is_is_holiday_Valid() const{
    return m_is_holiday_isValid;
}

bool OAIWorkdayModel::isIsOvertimeAllowed() const {
    return m_is_overtime_allowed;
}
void OAIWorkdayModel::setIsOvertimeAllowed(const bool &is_overtime_allowed) {
    m_is_overtime_allowed = is_overtime_allowed;
    m_is_overtime_allowed_isSet = true;
}

bool OAIWorkdayModel::is_is_overtime_allowed_Set() const{
    return m_is_overtime_allowed_isSet;
}

bool OAIWorkdayModel::is_is_overtime_allowed_Valid() const{
    return m_is_overtime_allowed_isValid;
}

bool OAIWorkdayModel::isIsReadOnly() const {
    return m_is_read_only;
}
void OAIWorkdayModel::setIsReadOnly(const bool &is_read_only) {
    m_is_read_only = is_read_only;
    m_is_read_only_isSet = true;
}

bool OAIWorkdayModel::is_is_read_only_Set() const{
    return m_is_read_only_isSet;
}

bool OAIWorkdayModel::is_is_read_only_Valid() const{
    return m_is_read_only_isValid;
}

QString OAIWorkdayModel::getUserGuid() const {
    return m_user_guid;
}
void OAIWorkdayModel::setUserGuid(const QString &user_guid) {
    m_user_guid = user_guid;
    m_user_guid_isSet = true;
}

bool OAIWorkdayModel::is_user_guid_Set() const{
    return m_user_guid_isSet;
}

bool OAIWorkdayModel::is_user_guid_Valid() const{
    return m_user_guid_isValid;
}

bool OAIWorkdayModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absence_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entered_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entered_time_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flextime_limit_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holiday_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incomplete_timing_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_holiday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overtime_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkdayModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
