/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicAuthenticationOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicAuthenticationOutputModel::OAIPublicAuthenticationOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicAuthenticationOutputModel::OAIPublicAuthenticationOutputModel() {
    this->initializeModel();
}

OAIPublicAuthenticationOutputModel::~OAIPublicAuthenticationOutputModel() {}

void OAIPublicAuthenticationOutputModel::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_access_token_expires_in_isSet = false;
    m_access_token_expires_in_isValid = false;

    m_access_token_expires_utc_isSet = false;
    m_access_token_expires_utc_isValid = false;

    m_access_token_type_isSet = false;
    m_access_token_type_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_refresh_token_expires_in_isSet = false;
    m_refresh_token_expires_in_isValid = false;

    m_refresh_token_expires_utc_isSet = false;
    m_refresh_token_expires_utc_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIPublicAuthenticationOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicAuthenticationOutputModel::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_access_token_expires_in_isValid = ::OpenAPI::fromJsonValue(m_access_token_expires_in, json[QString("access_token_expires_in")]);
    m_access_token_expires_in_isSet = !json[QString("access_token_expires_in")].isNull() && m_access_token_expires_in_isValid;

    m_access_token_expires_utc_isValid = ::OpenAPI::fromJsonValue(m_access_token_expires_utc, json[QString("access_token_expires_utc")]);
    m_access_token_expires_utc_isSet = !json[QString("access_token_expires_utc")].isNull() && m_access_token_expires_utc_isValid;

    m_access_token_type_isValid = ::OpenAPI::fromJsonValue(m_access_token_type, json[QString("access_token_type")]);
    m_access_token_type_isSet = !json[QString("access_token_type")].isNull() && m_access_token_type_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_refresh_token_expires_in_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_expires_in, json[QString("refresh_token_expires_in")]);
    m_refresh_token_expires_in_isSet = !json[QString("refresh_token_expires_in")].isNull() && m_refresh_token_expires_in_isValid;

    m_refresh_token_expires_utc_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_expires_utc, json[QString("refresh_token_expires_utc")]);
    m_refresh_token_expires_utc_isSet = !json[QString("refresh_token_expires_utc")].isNull() && m_refresh_token_expires_utc_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIPublicAuthenticationOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicAuthenticationOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_access_token_expires_in_isSet) {
        obj.insert(QString("access_token_expires_in"), ::OpenAPI::toJsonValue(m_access_token_expires_in));
    }
    if (m_access_token_expires_utc_isSet) {
        obj.insert(QString("access_token_expires_utc"), ::OpenAPI::toJsonValue(m_access_token_expires_utc));
    }
    if (m_access_token_type_isSet) {
        obj.insert(QString("access_token_type"), ::OpenAPI::toJsonValue(m_access_token_type));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_refresh_token_expires_in_isSet) {
        obj.insert(QString("refresh_token_expires_in"), ::OpenAPI::toJsonValue(m_refresh_token_expires_in));
    }
    if (m_refresh_token_expires_utc_isSet) {
        obj.insert(QString("refresh_token_expires_utc"), ::OpenAPI::toJsonValue(m_refresh_token_expires_utc));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIPublicAuthenticationOutputModel::getAccessToken() const {
    return m_access_token;
}
void OAIPublicAuthenticationOutputModel::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_Valid() const{
    return m_access_token_isValid;
}

qint64 OAIPublicAuthenticationOutputModel::getAccessTokenExpiresIn() const {
    return m_access_token_expires_in;
}
void OAIPublicAuthenticationOutputModel::setAccessTokenExpiresIn(const qint64 &access_token_expires_in) {
    m_access_token_expires_in = access_token_expires_in;
    m_access_token_expires_in_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_expires_in_Set() const{
    return m_access_token_expires_in_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_expires_in_Valid() const{
    return m_access_token_expires_in_isValid;
}

QDateTime OAIPublicAuthenticationOutputModel::getAccessTokenExpiresUtc() const {
    return m_access_token_expires_utc;
}
void OAIPublicAuthenticationOutputModel::setAccessTokenExpiresUtc(const QDateTime &access_token_expires_utc) {
    m_access_token_expires_utc = access_token_expires_utc;
    m_access_token_expires_utc_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_expires_utc_Set() const{
    return m_access_token_expires_utc_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_expires_utc_Valid() const{
    return m_access_token_expires_utc_isValid;
}

QString OAIPublicAuthenticationOutputModel::getAccessTokenType() const {
    return m_access_token_type;
}
void OAIPublicAuthenticationOutputModel::setAccessTokenType(const QString &access_token_type) {
    m_access_token_type = access_token_type;
    m_access_token_type_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_type_Set() const{
    return m_access_token_type_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_access_token_type_Valid() const{
    return m_access_token_type_isValid;
}

QString OAIPublicAuthenticationOutputModel::getRefreshToken() const {
    return m_refresh_token;
}
void OAIPublicAuthenticationOutputModel::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

qint64 OAIPublicAuthenticationOutputModel::getRefreshTokenExpiresIn() const {
    return m_refresh_token_expires_in;
}
void OAIPublicAuthenticationOutputModel::setRefreshTokenExpiresIn(const qint64 &refresh_token_expires_in) {
    m_refresh_token_expires_in = refresh_token_expires_in;
    m_refresh_token_expires_in_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_refresh_token_expires_in_Set() const{
    return m_refresh_token_expires_in_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_refresh_token_expires_in_Valid() const{
    return m_refresh_token_expires_in_isValid;
}

QDateTime OAIPublicAuthenticationOutputModel::getRefreshTokenExpiresUtc() const {
    return m_refresh_token_expires_utc;
}
void OAIPublicAuthenticationOutputModel::setRefreshTokenExpiresUtc(const QDateTime &refresh_token_expires_utc) {
    m_refresh_token_expires_utc = refresh_token_expires_utc;
    m_refresh_token_expires_utc_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_refresh_token_expires_utc_Set() const{
    return m_refresh_token_expires_utc_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_refresh_token_expires_utc_Valid() const{
    return m_refresh_token_expires_utc_isValid;
}

QString OAIPublicAuthenticationOutputModel::getScope() const {
    return m_scope;
}
void OAIPublicAuthenticationOutputModel::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIPublicAuthenticationOutputModel::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIPublicAuthenticationOutputModel::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIPublicAuthenticationOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_expires_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_expires_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicAuthenticationOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
