/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductInputModel::OAIProductInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductInputModel::OAIProductInputModel() {
    this->initializeModel();
}

OAIProductInputModel::~OAIProductInputModel() {}

void OAIProductInputModel::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_category_isSet = false;
    m_product_category_isValid = false;

    m_proposal_description_isSet = false;
    m_proposal_description_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIProductInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductInputModel::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_category_isValid = ::OpenAPI::fromJsonValue(m_product_category, json[QString("productCategory")]);
    m_product_category_isSet = !json[QString("productCategory")].isNull() && m_product_category_isValid;

    m_proposal_description_isValid = ::OpenAPI::fromJsonValue(m_proposal_description, json[QString("proposalDescription")]);
    m_proposal_description_isSet = !json[QString("proposalDescription")].isNull() && m_proposal_description_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIProductInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_category.isSet()) {
        obj.insert(QString("productCategory"), ::OpenAPI::toJsonValue(m_product_category));
    }
    if (m_proposal_description_isSet) {
        obj.insert(QString("proposalDescription"), ::OpenAPI::toJsonValue(m_proposal_description));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

QString OAIProductInputModel::getCode() const {
    return m_code;
}
void OAIProductInputModel::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProductInputModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProductInputModel::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIProductInputModel::isIsActive() const {
    return m_is_active;
}
void OAIProductInputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIProductInputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIProductInputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIProductInputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIProductInputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIProductInputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIProductInputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIProductInputModel::getName() const {
    return m_name;
}
void OAIProductInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductInputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAISimpleInputModel OAIProductInputModel::getProductCategory() const {
    return m_product_category;
}
void OAIProductInputModel::setProductCategory(const OAISimpleInputModel &product_category) {
    m_product_category = product_category;
    m_product_category_isSet = true;
}

bool OAIProductInputModel::is_product_category_Set() const{
    return m_product_category_isSet;
}

bool OAIProductInputModel::is_product_category_Valid() const{
    return m_product_category_isValid;
}

QString OAIProductInputModel::getProposalDescription() const {
    return m_proposal_description;
}
void OAIProductInputModel::setProposalDescription(const QString &proposal_description) {
    m_proposal_description = proposal_description;
    m_proposal_description_isSet = true;
}

bool OAIProductInputModel::is_proposal_description_Set() const{
    return m_proposal_description_isSet;
}

bool OAIProductInputModel::is_proposal_description_Valid() const{
    return m_proposal_description_isValid;
}

OAISimpleInputModel OAIProductInputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIProductInputModel::setSalesAccount(const OAISimpleInputModel &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIProductInputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIProductInputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIProductType OAIProductInputModel::getType() const {
    return m_type;
}
void OAIProductInputModel::setType(const OAIProductType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductInputModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductInputModel::is_type_Valid() const{
    return m_type_isValid;
}

OAIMoneyInputModelWithNullableAmount OAIProductInputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIProductInputModel::setUnitCost(const OAIMoneyInputModelWithNullableAmount &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIProductInputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIProductInputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyInputModelWithNullableAmount OAIProductInputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProductInputModel::setUnitPrice(const OAIMoneyInputModelWithNullableAmount &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProductInputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProductInputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

double OAIProductInputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIProductInputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIProductInputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIProductInputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIProductInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
