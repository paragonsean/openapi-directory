/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceRowOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceRowOutputModel::OAIInvoiceRowOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceRowOutputModel::OAIInvoiceRowOutputModel() {
    this->initializeModel();
}

OAIInvoiceRowOutputModel::~OAIInvoiceRowOutputModel() {}

void OAIInvoiceRowOutputModel::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_flat_rate_guid_isSet = false;
    m_flat_rate_guid_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_has_invoice_comment_isSet = false;
    m_has_invoice_comment_isValid = false;

    m_invoice_guid_isSet = false;
    m_invoice_guid_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_recurring_sales_account_isSet = false;
    m_recurring_sales_account_isValid = false;

    m_row_type_isSet = false;
    m_row_type_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_receivable_account_isSet = false;
    m_sales_receivable_account_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_vat_account_isSet = false;
    m_vat_account_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIInvoiceRowOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceRowOutputModel::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_flat_rate_guid_isValid = ::OpenAPI::fromJsonValue(m_flat_rate_guid, json[QString("flatRateGuid")]);
    m_flat_rate_guid_isSet = !json[QString("flatRateGuid")].isNull() && m_flat_rate_guid_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_has_invoice_comment_isValid = ::OpenAPI::fromJsonValue(m_has_invoice_comment, json[QString("hasInvoiceComment")]);
    m_has_invoice_comment_isSet = !json[QString("hasInvoiceComment")].isNull() && m_has_invoice_comment_isValid;

    m_invoice_guid_isValid = ::OpenAPI::fromJsonValue(m_invoice_guid, json[QString("invoiceGuid")]);
    m_invoice_guid_isSet = !json[QString("invoiceGuid")].isNull() && m_invoice_guid_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_recurring_sales_account_isValid = ::OpenAPI::fromJsonValue(m_recurring_sales_account, json[QString("recurringSalesAccount")]);
    m_recurring_sales_account_isSet = !json[QString("recurringSalesAccount")].isNull() && m_recurring_sales_account_isValid;

    m_row_type_isValid = ::OpenAPI::fromJsonValue(m_row_type, json[QString("rowType")]);
    m_row_type_isSet = !json[QString("rowType")].isNull() && m_row_type_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_receivable_account_isValid = ::OpenAPI::fromJsonValue(m_sales_receivable_account, json[QString("salesReceivableAccount")]);
    m_sales_receivable_account_isSet = !json[QString("salesReceivableAccount")].isNull() && m_sales_receivable_account_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_vat_account_isValid = ::OpenAPI::fromJsonValue(m_vat_account, json[QString("vatAccount")]);
    m_vat_account_isSet = !json[QString("vatAccount")].isNull() && m_vat_account_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIInvoiceRowOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceRowOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_code.size() > 0) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_cost_center.isSet()) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_flat_rate_guid_isSet) {
        obj.insert(QString("flatRateGuid"), ::OpenAPI::toJsonValue(m_flat_rate_guid));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_has_invoice_comment_isSet) {
        obj.insert(QString("hasInvoiceComment"), ::OpenAPI::toJsonValue(m_has_invoice_comment));
    }
    if (m_invoice_guid_isSet) {
        obj.insert(QString("invoiceGuid"), ::OpenAPI::toJsonValue(m_invoice_guid));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_recurring_sales_account.isSet()) {
        obj.insert(QString("recurringSalesAccount"), ::OpenAPI::toJsonValue(m_recurring_sales_account));
    }
    if (m_row_type.isSet()) {
        obj.insert(QString("rowType"), ::OpenAPI::toJsonValue(m_row_type));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_receivable_account.isSet()) {
        obj.insert(QString("salesReceivableAccount"), ::OpenAPI::toJsonValue(m_sales_receivable_account));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_vat_account.isSet()) {
        obj.insert(QString("vatAccount"), ::OpenAPI::toJsonValue(m_vat_account));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

OAIInvoiceRowCategory OAIInvoiceRowOutputModel::getCategory() const {
    return m_category;
}
void OAIInvoiceRowOutputModel::setCategory(const OAIInvoiceRowCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_category_Set() const{
    return m_category_isSet;
}

bool OAIInvoiceRowOutputModel::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIInvoiceRowOutputModel::getCode() const {
    return m_code;
}
void OAIInvoiceRowOutputModel::setCode(const QList<QString> &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIInvoiceRowOutputModel::is_code_Valid() const{
    return m_code_isValid;
}

OAIInvoiceRowAccountingSubModel OAIInvoiceRowOutputModel::getCostCenter() const {
    return m_cost_center;
}
void OAIInvoiceRowOutputModel::setCostCenter(const OAIInvoiceRowAccountingSubModel &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIInvoiceRowOutputModel::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIInvoiceRowOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIInvoiceRowOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIInvoiceRowOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIInvoiceRowOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIInvoiceRowOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIInvoiceRowOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIInvoiceRowOutputModel::getDescription() const {
    return m_description;
}
void OAIInvoiceRowOutputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInvoiceRowOutputModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInvoiceRowOutputModel::getFlatRateGuid() const {
    return m_flat_rate_guid;
}
void OAIInvoiceRowOutputModel::setFlatRateGuid(const QString &flat_rate_guid) {
    m_flat_rate_guid = flat_rate_guid;
    m_flat_rate_guid_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_flat_rate_guid_Set() const{
    return m_flat_rate_guid_isSet;
}

bool OAIInvoiceRowOutputModel::is_flat_rate_guid_Valid() const{
    return m_flat_rate_guid_isValid;
}

QString OAIInvoiceRowOutputModel::getGuid() const {
    return m_guid;
}
void OAIInvoiceRowOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIInvoiceRowOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIInvoiceRowOutputModel::isHasInvoiceComment() const {
    return m_has_invoice_comment;
}
void OAIInvoiceRowOutputModel::setHasInvoiceComment(const bool &has_invoice_comment) {
    m_has_invoice_comment = has_invoice_comment;
    m_has_invoice_comment_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_has_invoice_comment_Set() const{
    return m_has_invoice_comment_isSet;
}

bool OAIInvoiceRowOutputModel::is_has_invoice_comment_Valid() const{
    return m_has_invoice_comment_isValid;
}

QString OAIInvoiceRowOutputModel::getInvoiceGuid() const {
    return m_invoice_guid;
}
void OAIInvoiceRowOutputModel::setInvoiceGuid(const QString &invoice_guid) {
    m_invoice_guid = invoice_guid;
    m_invoice_guid_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_invoice_guid_Set() const{
    return m_invoice_guid_isSet;
}

bool OAIInvoiceRowOutputModel::is_invoice_guid_Valid() const{
    return m_invoice_guid_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIInvoiceRowOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIInvoiceRowOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIInvoiceRowOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIInvoiceRowOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIInvoiceRowOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIInvoiceRowOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIInvoiceRowOutputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIInvoiceRowOutputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIInvoiceRowOutputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

double OAIInvoiceRowOutputModel::getQuantity() const {
    return m_quantity;
}
void OAIInvoiceRowOutputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInvoiceRowOutputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIInvoiceRowAccountingSubModel OAIInvoiceRowOutputModel::getRecurringSalesAccount() const {
    return m_recurring_sales_account;
}
void OAIInvoiceRowOutputModel::setRecurringSalesAccount(const OAIInvoiceRowAccountingSubModel &recurring_sales_account) {
    m_recurring_sales_account = recurring_sales_account;
    m_recurring_sales_account_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_recurring_sales_account_Set() const{
    return m_recurring_sales_account_isSet;
}

bool OAIInvoiceRowOutputModel::is_recurring_sales_account_Valid() const{
    return m_recurring_sales_account_isValid;
}

OAIInvoiceRowType OAIInvoiceRowOutputModel::getRowType() const {
    return m_row_type;
}
void OAIInvoiceRowOutputModel::setRowType(const OAIInvoiceRowType &row_type) {
    m_row_type = row_type;
    m_row_type_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_row_type_Set() const{
    return m_row_type_isSet;
}

bool OAIInvoiceRowOutputModel::is_row_type_Valid() const{
    return m_row_type_isValid;
}

OAIInvoiceRowAccountingSubModel OAIInvoiceRowOutputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIInvoiceRowOutputModel::setSalesAccount(const OAIInvoiceRowAccountingSubModel &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIInvoiceRowOutputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIInvoiceRowAccountingSubModel OAIInvoiceRowOutputModel::getSalesReceivableAccount() const {
    return m_sales_receivable_account;
}
void OAIInvoiceRowOutputModel::setSalesReceivableAccount(const OAIInvoiceRowAccountingSubModel &sales_receivable_account) {
    m_sales_receivable_account = sales_receivable_account;
    m_sales_receivable_account_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_sales_receivable_account_Set() const{
    return m_sales_receivable_account_isSet;
}

bool OAIInvoiceRowOutputModel::is_sales_receivable_account_Valid() const{
    return m_sales_receivable_account_isValid;
}

qint32 OAIInvoiceRowOutputModel::getSortOrder() const {
    return m_sort_order;
}
void OAIInvoiceRowOutputModel::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIInvoiceRowOutputModel::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAIMoneyOutputModel OAIInvoiceRowOutputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIInvoiceRowOutputModel::setUnitPrice(const OAIMoneyOutputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIInvoiceRowOutputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIInvoiceRowAccountingSubModel OAIInvoiceRowOutputModel::getVatAccount() const {
    return m_vat_account;
}
void OAIInvoiceRowOutputModel::setVatAccount(const OAIInvoiceRowAccountingSubModel &vat_account) {
    m_vat_account = vat_account;
    m_vat_account_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_vat_account_Set() const{
    return m_vat_account_isSet;
}

bool OAIInvoiceRowOutputModel::is_vat_account_Valid() const{
    return m_vat_account_isValid;
}

double OAIInvoiceRowOutputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIInvoiceRowOutputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIInvoiceRowOutputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIInvoiceRowOutputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIInvoiceRowOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flat_rate_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_invoice_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_receivable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceRowOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
