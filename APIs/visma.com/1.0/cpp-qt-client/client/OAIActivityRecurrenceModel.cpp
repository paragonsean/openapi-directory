/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityRecurrenceModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityRecurrenceModel::OAIActivityRecurrenceModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityRecurrenceModel::OAIActivityRecurrenceModel() {
    this->initializeModel();
}

OAIActivityRecurrenceModel::~OAIActivityRecurrenceModel() {}

void OAIActivityRecurrenceModel::initializeModel() {

    m_exceptions_isSet = false;
    m_exceptions_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_last_occurrence_date_time_isSet = false;
    m_last_occurrence_date_time_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;
}

void OAIActivityRecurrenceModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityRecurrenceModel::fromJsonObject(QJsonObject json) {

    m_exceptions_isValid = ::OpenAPI::fromJsonValue(m_exceptions, json[QString("exceptions")]);
    m_exceptions_isSet = !json[QString("exceptions")].isNull() && m_exceptions_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_last_occurrence_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_occurrence_date_time, json[QString("lastOccurrenceDateTime")]);
    m_last_occurrence_date_time_isSet = !json[QString("lastOccurrenceDateTime")].isNull() && m_last_occurrence_date_time_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;
}

QString OAIActivityRecurrenceModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityRecurrenceModel::asJsonObject() const {
    QJsonObject obj;
    if (m_exceptions.size() > 0) {
        obj.insert(QString("exceptions"), ::OpenAPI::toJsonValue(m_exceptions));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_last_occurrence_date_time_isSet) {
        obj.insert(QString("lastOccurrenceDateTime"), ::OpenAPI::toJsonValue(m_last_occurrence_date_time));
    }
    if (m_pattern.isSet()) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    return obj;
}

QList<QDateTime> OAIActivityRecurrenceModel::getExceptions() const {
    return m_exceptions;
}
void OAIActivityRecurrenceModel::setExceptions(const QList<QDateTime> &exceptions) {
    m_exceptions = exceptions;
    m_exceptions_isSet = true;
}

bool OAIActivityRecurrenceModel::is_exceptions_Set() const{
    return m_exceptions_isSet;
}

bool OAIActivityRecurrenceModel::is_exceptions_Valid() const{
    return m_exceptions_isValid;
}

OAIRecurrenceFrequency OAIActivityRecurrenceModel::getFrequency() const {
    return m_frequency;
}
void OAIActivityRecurrenceModel::setFrequency(const OAIRecurrenceFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIActivityRecurrenceModel::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIActivityRecurrenceModel::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QDateTime OAIActivityRecurrenceModel::getLastOccurrenceDateTime() const {
    return m_last_occurrence_date_time;
}
void OAIActivityRecurrenceModel::setLastOccurrenceDateTime(const QDateTime &last_occurrence_date_time) {
    m_last_occurrence_date_time = last_occurrence_date_time;
    m_last_occurrence_date_time_isSet = true;
}

bool OAIActivityRecurrenceModel::is_last_occurrence_date_time_Set() const{
    return m_last_occurrence_date_time_isSet;
}

bool OAIActivityRecurrenceModel::is_last_occurrence_date_time_Valid() const{
    return m_last_occurrence_date_time_isValid;
}

OAIRecurrencePattern OAIActivityRecurrenceModel::getPattern() const {
    return m_pattern;
}
void OAIActivityRecurrenceModel::setPattern(const OAIRecurrencePattern &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIActivityRecurrenceModel::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIActivityRecurrenceModel::is_pattern_Valid() const{
    return m_pattern_isValid;
}

OAIRecurrenceRange OAIActivityRecurrenceModel::getRange() const {
    return m_range;
}
void OAIActivityRecurrenceModel::setRange(const OAIRecurrenceRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIActivityRecurrenceModel::is_range_Set() const{
    return m_range_isSet;
}

bool OAIActivityRecurrenceModel::is_range_Valid() const{
    return m_range_isValid;
}

bool OAIActivityRecurrenceModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exceptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_occurrence_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityRecurrenceModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frequency_isValid && true;
}

} // namespace OpenAPI
