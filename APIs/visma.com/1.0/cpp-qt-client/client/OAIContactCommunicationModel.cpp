/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactCommunicationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactCommunicationModel::OAIContactCommunicationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactCommunicationModel::OAIContactCommunicationModel() {
    this->initializeModel();
}

OAIContactCommunicationModel::~OAIContactCommunicationModel() {}

void OAIContactCommunicationModel::initializeModel() {

    m_communication_type_isSet = false;
    m_communication_type_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_forbidden_to_use_isSet = false;
    m_is_forbidden_to_use_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIContactCommunicationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactCommunicationModel::fromJsonObject(QJsonObject json) {

    m_communication_type_isValid = ::OpenAPI::fromJsonValue(m_communication_type, json[QString("communicationType")]);
    m_communication_type_isSet = !json[QString("communicationType")].isNull() && m_communication_type_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_forbidden_to_use_isValid = ::OpenAPI::fromJsonValue(m_is_forbidden_to_use, json[QString("isForbiddenToUse")]);
    m_is_forbidden_to_use_isSet = !json[QString("isForbiddenToUse")].isNull() && m_is_forbidden_to_use_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIContactCommunicationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactCommunicationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_communication_type.isSet()) {
        obj.insert(QString("communicationType"), ::OpenAPI::toJsonValue(m_communication_type));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_forbidden_to_use_isSet) {
        obj.insert(QString("isForbiddenToUse"), ::OpenAPI::toJsonValue(m_is_forbidden_to_use));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICommunicationTypeSubModel OAIContactCommunicationModel::getCommunicationType() const {
    return m_communication_type;
}
void OAIContactCommunicationModel::setCommunicationType(const OAICommunicationTypeSubModel &communication_type) {
    m_communication_type = communication_type;
    m_communication_type_isSet = true;
}

bool OAIContactCommunicationModel::is_communication_type_Set() const{
    return m_communication_type_isSet;
}

bool OAIContactCommunicationModel::is_communication_type_Valid() const{
    return m_communication_type_isValid;
}

OAIModelBaseWithRequiredGuid OAIContactCommunicationModel::getContact() const {
    return m_contact;
}
void OAIContactCommunicationModel::setContact(const OAIModelBaseWithRequiredGuid &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIContactCommunicationModel::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIContactCommunicationModel::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIContactCommunicationModel::getCreatedBy() const {
    return m_created_by;
}
void OAIContactCommunicationModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIContactCommunicationModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIContactCommunicationModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIContactCommunicationModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIContactCommunicationModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIContactCommunicationModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIContactCommunicationModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIContactCommunicationModel::getGuid() const {
    return m_guid;
}
void OAIContactCommunicationModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIContactCommunicationModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIContactCommunicationModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIContactCommunicationModel::isIsForbiddenToUse() const {
    return m_is_forbidden_to_use;
}
void OAIContactCommunicationModel::setIsForbiddenToUse(const bool &is_forbidden_to_use) {
    m_is_forbidden_to_use = is_forbidden_to_use;
    m_is_forbidden_to_use_isSet = true;
}

bool OAIContactCommunicationModel::is_is_forbidden_to_use_Set() const{
    return m_is_forbidden_to_use_isSet;
}

bool OAIContactCommunicationModel::is_is_forbidden_to_use_Valid() const{
    return m_is_forbidden_to_use_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIContactCommunicationModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIContactCommunicationModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIContactCommunicationModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIContactCommunicationModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIContactCommunicationModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIContactCommunicationModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIContactCommunicationModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIContactCommunicationModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIContactCommunicationModel::getValue() const {
    return m_value;
}
void OAIContactCommunicationModel::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIContactCommunicationModel::is_value_Set() const{
    return m_value_isSet;
}

bool OAIContactCommunicationModel::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIContactCommunicationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_communication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_forbidden_to_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactCommunicationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_communication_type_isValid && m_contact_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
