/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContactCommunicationModel.h
 *
 * 
 */

#ifndef OAIContactCommunicationModel_H
#define OAIContactCommunicationModel_H

#include <QJsonObject>

#include "OAICommunicationTypeSubModel.h"
#include "OAIModelBaseWithRequiredGuid.h"
#include "OAIUserWithFirstNameLastNameAndPhotoFileModel.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICommunicationTypeSubModel;
class OAIModelBaseWithRequiredGuid;
class OAIUserWithFirstNameLastNameAndPhotoFileModel;

class OAIContactCommunicationModel : public OAIObject {
public:
    OAIContactCommunicationModel();
    OAIContactCommunicationModel(QString json);
    ~OAIContactCommunicationModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICommunicationTypeSubModel getCommunicationType() const;
    void setCommunicationType(const OAICommunicationTypeSubModel &communication_type);
    bool is_communication_type_Set() const;
    bool is_communication_type_Valid() const;

    OAIModelBaseWithRequiredGuid getContact() const;
    void setContact(const OAIModelBaseWithRequiredGuid &contact);
    bool is_contact_Set() const;
    bool is_contact_Valid() const;

    OAIUserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() const;
    void setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QDateTime getCreatedDateTime() const;
    void setCreatedDateTime(const QDateTime &created_date_time);
    bool is_created_date_time_Set() const;
    bool is_created_date_time_Valid() const;

    QString getGuid() const;
    void setGuid(const QString &guid);
    bool is_guid_Set() const;
    bool is_guid_Valid() const;

    bool isIsForbiddenToUse() const;
    void setIsForbiddenToUse(const bool &is_forbidden_to_use);
    bool is_is_forbidden_to_use_Set() const;
    bool is_is_forbidden_to_use_Valid() const;

    OAIUserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() const;
    void setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by);
    bool is_last_updated_by_Set() const;
    bool is_last_updated_by_Valid() const;

    QDateTime getLastUpdatedDateTime() const;
    void setLastUpdatedDateTime(const QDateTime &last_updated_date_time);
    bool is_last_updated_date_time_Set() const;
    bool is_last_updated_date_time_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICommunicationTypeSubModel m_communication_type;
    bool m_communication_type_isSet;
    bool m_communication_type_isValid;

    OAIModelBaseWithRequiredGuid m_contact;
    bool m_contact_isSet;
    bool m_contact_isValid;

    OAIUserWithFirstNameLastNameAndPhotoFileModel m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QDateTime m_created_date_time;
    bool m_created_date_time_isSet;
    bool m_created_date_time_isValid;

    QString m_guid;
    bool m_guid_isSet;
    bool m_guid_isValid;

    bool m_is_forbidden_to_use;
    bool m_is_forbidden_to_use_isSet;
    bool m_is_forbidden_to_use_isValid;

    OAIUserWithFirstNameLastNameAndPhotoFileModel m_last_updated_by;
    bool m_last_updated_by_isSet;
    bool m_last_updated_by_isValid;

    QDateTime m_last_updated_date_time;
    bool m_last_updated_date_time_isSet;
    bool m_last_updated_date_time_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContactCommunicationModel)

#endif // OAIContactCommunicationModel_H
