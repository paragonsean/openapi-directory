/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlextimeAdjustmentInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlextimeAdjustmentInputModel::OAIFlextimeAdjustmentInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlextimeAdjustmentInputModel::OAIFlextimeAdjustmentInputModel() {
    this->initializeModel();
}

OAIFlextimeAdjustmentInputModel::~OAIFlextimeAdjustmentInputModel() {}

void OAIFlextimeAdjustmentInputModel::initializeModel() {

    m_adjustment_date_isSet = false;
    m_adjustment_date_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIFlextimeAdjustmentInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlextimeAdjustmentInputModel::fromJsonObject(QJsonObject json) {

    m_adjustment_date_isValid = ::OpenAPI::fromJsonValue(m_adjustment_date, json[QString("adjustmentDate")]);
    m_adjustment_date_isSet = !json[QString("adjustmentDate")].isNull() && m_adjustment_date_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIFlextimeAdjustmentInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlextimeAdjustmentInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_date_isSet) {
        obj.insert(QString("adjustmentDate"), ::OpenAPI::toJsonValue(m_adjustment_date));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDate OAIFlextimeAdjustmentInputModel::getAdjustmentDate() const {
    return m_adjustment_date;
}
void OAIFlextimeAdjustmentInputModel::setAdjustmentDate(const QDate &adjustment_date) {
    m_adjustment_date = adjustment_date;
    m_adjustment_date_isSet = true;
}

bool OAIFlextimeAdjustmentInputModel::is_adjustment_date_Set() const{
    return m_adjustment_date_isSet;
}

bool OAIFlextimeAdjustmentInputModel::is_adjustment_date_Valid() const{
    return m_adjustment_date_isValid;
}

double OAIFlextimeAdjustmentInputModel::getAmount() const {
    return m_amount;
}
void OAIFlextimeAdjustmentInputModel::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIFlextimeAdjustmentInputModel::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIFlextimeAdjustmentInputModel::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIFlextimeAdjustmentInputModel::getNotes() const {
    return m_notes;
}
void OAIFlextimeAdjustmentInputModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFlextimeAdjustmentInputModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFlextimeAdjustmentInputModel::is_notes_Valid() const{
    return m_notes_isValid;
}

OAISimpleInputRequiredModel OAIFlextimeAdjustmentInputModel::getUser() const {
    return m_user;
}
void OAIFlextimeAdjustmentInputModel::setUser(const OAISimpleInputRequiredModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIFlextimeAdjustmentInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIFlextimeAdjustmentInputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIFlextimeAdjustmentInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlextimeAdjustmentInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_adjustment_date_isValid && m_amount_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
