/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWeeklyModel.h
 *
 * 
 */

#ifndef OAIWeeklyModel_H
#define OAIWeeklyModel_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWeeklyModel : public OAIObject {
public:
    OAIWeeklyModel();
    OAIWeeklyModel(QString json);
    ~OAIWeeklyModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isFriday() const;
    void setFriday(const bool &friday);
    bool is_friday_Set() const;
    bool is_friday_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    bool isMonday() const;
    void setMonday(const bool &monday);
    bool is_monday_Set() const;
    bool is_monday_Valid() const;

    bool isSaturday() const;
    void setSaturday(const bool &saturday);
    bool is_saturday_Set() const;
    bool is_saturday_Valid() const;

    bool isSunday() const;
    void setSunday(const bool &sunday);
    bool is_sunday_Set() const;
    bool is_sunday_Valid() const;

    bool isThursday() const;
    void setThursday(const bool &thursday);
    bool is_thursday_Set() const;
    bool is_thursday_Valid() const;

    bool isTuesday() const;
    void setTuesday(const bool &tuesday);
    bool is_tuesday_Set() const;
    bool is_tuesday_Valid() const;

    bool isWednesday() const;
    void setWednesday(const bool &wednesday);
    bool is_wednesday_Set() const;
    bool is_wednesday_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_friday;
    bool m_friday_isSet;
    bool m_friday_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    bool m_monday;
    bool m_monday_isSet;
    bool m_monday_isValid;

    bool m_saturday;
    bool m_saturday_isSet;
    bool m_saturday_isValid;

    bool m_sunday;
    bool m_sunday_isSet;
    bool m_sunday_isValid;

    bool m_thursday;
    bool m_thursday_isSet;
    bool m_thursday_isValid;

    bool m_tuesday;
    bool m_tuesday_isSet;
    bool m_tuesday_isValid;

    bool m_wednesday;
    bool m_wednesday_isSet;
    bool m_wednesday_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWeeklyModel)

#endif // OAIWeeklyModel_H
