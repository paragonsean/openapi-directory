/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAllocationOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAllocationOutputModel::OAIResourceAllocationOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAllocationOutputModel::OAIResourceAllocationOutputModel() {
    this->initializeModel();
}

OAIResourceAllocationOutputModel::~OAIResourceAllocationOutputModel() {}

void OAIResourceAllocationOutputModel::initializeModel() {

    m_allocation_hours_isSet = false;
    m_allocation_hours_isValid = false;

    m_allocation_percentage_isSet = false;
    m_allocation_percentage_isValid = false;

    m_calculated_allocation_hours_isSet = false;
    m_calculated_allocation_hours_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_derived_end_date_isSet = false;
    m_derived_end_date_isValid = false;

    m_derived_start_date_isSet = false;
    m_derived_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_member_guid_isSet = false;
    m_project_member_guid_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIResourceAllocationOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAllocationOutputModel::fromJsonObject(QJsonObject json) {

    m_allocation_hours_isValid = ::OpenAPI::fromJsonValue(m_allocation_hours, json[QString("allocationHours")]);
    m_allocation_hours_isSet = !json[QString("allocationHours")].isNull() && m_allocation_hours_isValid;

    m_allocation_percentage_isValid = ::OpenAPI::fromJsonValue(m_allocation_percentage, json[QString("allocationPercentage")]);
    m_allocation_percentage_isSet = !json[QString("allocationPercentage")].isNull() && m_allocation_percentage_isValid;

    m_calculated_allocation_hours_isValid = ::OpenAPI::fromJsonValue(m_calculated_allocation_hours, json[QString("calculatedAllocationHours")]);
    m_calculated_allocation_hours_isSet = !json[QString("calculatedAllocationHours")].isNull() && m_calculated_allocation_hours_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_derived_end_date_isValid = ::OpenAPI::fromJsonValue(m_derived_end_date, json[QString("derivedEndDate")]);
    m_derived_end_date_isSet = !json[QString("derivedEndDate")].isNull() && m_derived_end_date_isValid;

    m_derived_start_date_isValid = ::OpenAPI::fromJsonValue(m_derived_start_date, json[QString("derivedStartDate")]);
    m_derived_start_date_isSet = !json[QString("derivedStartDate")].isNull() && m_derived_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_member_guid_isValid = ::OpenAPI::fromJsonValue(m_project_member_guid, json[QString("projectMemberGuid")]);
    m_project_member_guid_isSet = !json[QString("projectMemberGuid")].isNull() && m_project_member_guid_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIResourceAllocationOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAllocationOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_hours_isSet) {
        obj.insert(QString("allocationHours"), ::OpenAPI::toJsonValue(m_allocation_hours));
    }
    if (m_allocation_percentage_isSet) {
        obj.insert(QString("allocationPercentage"), ::OpenAPI::toJsonValue(m_allocation_percentage));
    }
    if (m_calculated_allocation_hours_isSet) {
        obj.insert(QString("calculatedAllocationHours"), ::OpenAPI::toJsonValue(m_calculated_allocation_hours));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_derived_end_date_isSet) {
        obj.insert(QString("derivedEndDate"), ::OpenAPI::toJsonValue(m_derived_end_date));
    }
    if (m_derived_start_date_isSet) {
        obj.insert(QString("derivedStartDate"), ::OpenAPI::toJsonValue(m_derived_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_member_guid_isSet) {
        obj.insert(QString("projectMemberGuid"), ::OpenAPI::toJsonValue(m_project_member_guid));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

double OAIResourceAllocationOutputModel::getAllocationHours() const {
    return m_allocation_hours;
}
void OAIResourceAllocationOutputModel::setAllocationHours(const double &allocation_hours) {
    m_allocation_hours = allocation_hours;
    m_allocation_hours_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_allocation_hours_Set() const{
    return m_allocation_hours_isSet;
}

bool OAIResourceAllocationOutputModel::is_allocation_hours_Valid() const{
    return m_allocation_hours_isValid;
}

qint32 OAIResourceAllocationOutputModel::getAllocationPercentage() const {
    return m_allocation_percentage;
}
void OAIResourceAllocationOutputModel::setAllocationPercentage(const qint32 &allocation_percentage) {
    m_allocation_percentage = allocation_percentage;
    m_allocation_percentage_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_allocation_percentage_Set() const{
    return m_allocation_percentage_isSet;
}

bool OAIResourceAllocationOutputModel::is_allocation_percentage_Valid() const{
    return m_allocation_percentage_isValid;
}

double OAIResourceAllocationOutputModel::getCalculatedAllocationHours() const {
    return m_calculated_allocation_hours;
}
void OAIResourceAllocationOutputModel::setCalculatedAllocationHours(const double &calculated_allocation_hours) {
    m_calculated_allocation_hours = calculated_allocation_hours;
    m_calculated_allocation_hours_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_calculated_allocation_hours_Set() const{
    return m_calculated_allocation_hours_isSet;
}

bool OAIResourceAllocationOutputModel::is_calculated_allocation_hours_Valid() const{
    return m_calculated_allocation_hours_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIResourceAllocationOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIResourceAllocationOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIResourceAllocationOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIResourceAllocationOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIResourceAllocationOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIResourceAllocationOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIModelWithName OAIResourceAllocationOutputModel::getCustomer() const {
    return m_customer;
}
void OAIResourceAllocationOutputModel::setCustomer(const OAIModelWithName &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIResourceAllocationOutputModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QDate OAIResourceAllocationOutputModel::getDerivedEndDate() const {
    return m_derived_end_date;
}
void OAIResourceAllocationOutputModel::setDerivedEndDate(const QDate &derived_end_date) {
    m_derived_end_date = derived_end_date;
    m_derived_end_date_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_derived_end_date_Set() const{
    return m_derived_end_date_isSet;
}

bool OAIResourceAllocationOutputModel::is_derived_end_date_Valid() const{
    return m_derived_end_date_isValid;
}

QDate OAIResourceAllocationOutputModel::getDerivedStartDate() const {
    return m_derived_start_date;
}
void OAIResourceAllocationOutputModel::setDerivedStartDate(const QDate &derived_start_date) {
    m_derived_start_date = derived_start_date;
    m_derived_start_date_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_derived_start_date_Set() const{
    return m_derived_start_date_isSet;
}

bool OAIResourceAllocationOutputModel::is_derived_start_date_Valid() const{
    return m_derived_start_date_isValid;
}

QDate OAIResourceAllocationOutputModel::getEndDate() const {
    return m_end_date;
}
void OAIResourceAllocationOutputModel::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIResourceAllocationOutputModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIResourceAllocationOutputModel::getGuid() const {
    return m_guid;
}
void OAIResourceAllocationOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIResourceAllocationOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIResourceAllocationOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIResourceAllocationOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIResourceAllocationOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIResourceAllocationOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIResourceAllocationOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIResourceAllocationOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIResourceAllocationPhaseSubModel OAIResourceAllocationOutputModel::getPhase() const {
    return m_phase;
}
void OAIResourceAllocationOutputModel::setPhase(const OAIResourceAllocationPhaseSubModel &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIResourceAllocationOutputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAIResourceAllocationProjectSubModel OAIResourceAllocationOutputModel::getProject() const {
    return m_project;
}
void OAIResourceAllocationOutputModel::setProject(const OAIResourceAllocationProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIResourceAllocationOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIResourceAllocationOutputModel::getProjectMemberGuid() const {
    return m_project_member_guid;
}
void OAIResourceAllocationOutputModel::setProjectMemberGuid(const QString &project_member_guid) {
    m_project_member_guid = project_member_guid;
    m_project_member_guid_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_project_member_guid_Set() const{
    return m_project_member_guid_isSet;
}

bool OAIResourceAllocationOutputModel::is_project_member_guid_Valid() const{
    return m_project_member_guid_isValid;
}

QDate OAIResourceAllocationOutputModel::getStartDate() const {
    return m_start_date;
}
void OAIResourceAllocationOutputModel::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIResourceAllocationOutputModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIResourceAllocationOutputModel::getUser() const {
    return m_user;
}
void OAIResourceAllocationOutputModel::setUser(const OAIUserWithFirstNameLastNameAndPhotoFileModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIResourceAllocationOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIResourceAllocationOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIResourceAllocationOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_allocation_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_member_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAllocationOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
