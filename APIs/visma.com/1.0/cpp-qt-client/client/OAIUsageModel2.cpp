/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageModel2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageModel2::OAIUsageModel2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageModel2::OAIUsageModel2() {
    this->initializeModel();
}

OAIUsageModel2::~OAIUsageModel2() {}

void OAIUsageModel2::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;
}

void OAIUsageModel2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageModel2::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;
}

QString OAIUsageModel2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageModel2::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    return obj;
}

QString OAIUsageModel2::getContext() const {
    return m_context;
}
void OAIUsageModel2::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIUsageModel2::is_context_Set() const{
    return m_context_isSet;
}

bool OAIUsageModel2::is_context_Valid() const{
    return m_context_isValid;
}

qint32 OAIUsageModel2::getCount() const {
    return m_count;
}
void OAIUsageModel2::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIUsageModel2::is_count_Set() const{
    return m_count_isSet;
}

bool OAIUsageModel2::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIUsageModel2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageModel2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
