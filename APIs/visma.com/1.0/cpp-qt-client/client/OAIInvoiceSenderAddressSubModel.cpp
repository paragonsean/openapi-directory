/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceSenderAddressSubModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceSenderAddressSubModel::OAIInvoiceSenderAddressSubModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceSenderAddressSubModel::OAIInvoiceSenderAddressSubModel() {
    this->initializeModel();
}

OAIInvoiceSenderAddressSubModel::~OAIInvoiceSenderAddressSubModel() {}

void OAIInvoiceSenderAddressSubModel::initializeModel() {

    m_addressline_isSet = false;
    m_addressline_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIInvoiceSenderAddressSubModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceSenderAddressSubModel::fromJsonObject(QJsonObject json) {

    m_addressline_isValid = ::OpenAPI::fromJsonValue(m_addressline, json[QString("addressline")]);
    m_addressline_isSet = !json[QString("addressline")].isNull() && m_addressline_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIInvoiceSenderAddressSubModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceSenderAddressSubModel::asJsonObject() const {
    QJsonObject obj;
    if (m_addressline_isSet) {
        obj.insert(QString("addressline"), ::OpenAPI::toJsonValue(m_addressline));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIInvoiceSenderAddressSubModel::getAddressline() const {
    return m_addressline;
}
void OAIInvoiceSenderAddressSubModel::setAddressline(const QString &addressline) {
    m_addressline = addressline;
    m_addressline_isSet = true;
}

bool OAIInvoiceSenderAddressSubModel::is_addressline_Set() const{
    return m_addressline_isSet;
}

bool OAIInvoiceSenderAddressSubModel::is_addressline_Valid() const{
    return m_addressline_isValid;
}

QString OAIInvoiceSenderAddressSubModel::getCity() const {
    return m_city;
}
void OAIInvoiceSenderAddressSubModel::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIInvoiceSenderAddressSubModel::is_city_Set() const{
    return m_city_isSet;
}

bool OAIInvoiceSenderAddressSubModel::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIInvoiceSenderAddressSubModel::getCountry() const {
    return m_country;
}
void OAIInvoiceSenderAddressSubModel::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIInvoiceSenderAddressSubModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIInvoiceSenderAddressSubModel::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIInvoiceSenderAddressSubModel::getPostalCode() const {
    return m_postal_code;
}
void OAIInvoiceSenderAddressSubModel::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIInvoiceSenderAddressSubModel::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIInvoiceSenderAddressSubModel::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIInvoiceSenderAddressSubModel::getState() const {
    return m_state;
}
void OAIInvoiceSenderAddressSubModel::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInvoiceSenderAddressSubModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInvoiceSenderAddressSubModel::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIInvoiceSenderAddressSubModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addressline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceSenderAddressSubModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
