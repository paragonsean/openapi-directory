/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlatRateInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlatRateInputModel::OAIFlatRateInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlatRateInputModel::OAIFlatRateInputModel() {
    this->initializeModel();
}

OAIFlatRateInputModel::~OAIFlatRateInputModel() {}

void OAIFlatRateInputModel::initializeModel() {

    m_bill_additional_hours_isSet = false;
    m_bill_additional_hours_isValid = false;

    m_billing_schedule_isSet = false;
    m_billing_schedule_isValid = false;

    m_includes_hours_isSet = false;
    m_includes_hours_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_planned_billing_date_isSet = false;
    m_planned_billing_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_per_additional_hour_isSet = false;
    m_price_per_additional_hour_isValid = false;
}

void OAIFlatRateInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlatRateInputModel::fromJsonObject(QJsonObject json) {

    m_bill_additional_hours_isValid = ::OpenAPI::fromJsonValue(m_bill_additional_hours, json[QString("billAdditionalHours")]);
    m_bill_additional_hours_isSet = !json[QString("billAdditionalHours")].isNull() && m_bill_additional_hours_isValid;

    m_billing_schedule_isValid = ::OpenAPI::fromJsonValue(m_billing_schedule, json[QString("billingSchedule")]);
    m_billing_schedule_isSet = !json[QString("billingSchedule")].isNull() && m_billing_schedule_isValid;

    m_includes_hours_isValid = ::OpenAPI::fromJsonValue(m_includes_hours, json[QString("includesHours")]);
    m_includes_hours_isSet = !json[QString("includesHours")].isNull() && m_includes_hours_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_planned_billing_date_isValid = ::OpenAPI::fromJsonValue(m_planned_billing_date, json[QString("plannedBillingDate")]);
    m_planned_billing_date_isSet = !json[QString("plannedBillingDate")].isNull() && m_planned_billing_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_per_additional_hour_isValid = ::OpenAPI::fromJsonValue(m_price_per_additional_hour, json[QString("pricePerAdditionalHour")]);
    m_price_per_additional_hour_isSet = !json[QString("pricePerAdditionalHour")].isNull() && m_price_per_additional_hour_isValid;
}

QString OAIFlatRateInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlatRateInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_bill_additional_hours_isSet) {
        obj.insert(QString("billAdditionalHours"), ::OpenAPI::toJsonValue(m_bill_additional_hours));
    }
    if (m_billing_schedule.isSet()) {
        obj.insert(QString("billingSchedule"), ::OpenAPI::toJsonValue(m_billing_schedule));
    }
    if (m_includes_hours_isSet) {
        obj.insert(QString("includesHours"), ::OpenAPI::toJsonValue(m_includes_hours));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_planned_billing_date_isSet) {
        obj.insert(QString("plannedBillingDate"), ::OpenAPI::toJsonValue(m_planned_billing_date));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_per_additional_hour.isSet()) {
        obj.insert(QString("pricePerAdditionalHour"), ::OpenAPI::toJsonValue(m_price_per_additional_hour));
    }
    return obj;
}

bool OAIFlatRateInputModel::isBillAdditionalHours() const {
    return m_bill_additional_hours;
}
void OAIFlatRateInputModel::setBillAdditionalHours(const bool &bill_additional_hours) {
    m_bill_additional_hours = bill_additional_hours;
    m_bill_additional_hours_isSet = true;
}

bool OAIFlatRateInputModel::is_bill_additional_hours_Set() const{
    return m_bill_additional_hours_isSet;
}

bool OAIFlatRateInputModel::is_bill_additional_hours_Valid() const{
    return m_bill_additional_hours_isValid;
}

OAIBillingScheduleType OAIFlatRateInputModel::getBillingSchedule() const {
    return m_billing_schedule;
}
void OAIFlatRateInputModel::setBillingSchedule(const OAIBillingScheduleType &billing_schedule) {
    m_billing_schedule = billing_schedule;
    m_billing_schedule_isSet = true;
}

bool OAIFlatRateInputModel::is_billing_schedule_Set() const{
    return m_billing_schedule_isSet;
}

bool OAIFlatRateInputModel::is_billing_schedule_Valid() const{
    return m_billing_schedule_isValid;
}

double OAIFlatRateInputModel::getIncludesHours() const {
    return m_includes_hours;
}
void OAIFlatRateInputModel::setIncludesHours(const double &includes_hours) {
    m_includes_hours = includes_hours;
    m_includes_hours_isSet = true;
}

bool OAIFlatRateInputModel::is_includes_hours_Set() const{
    return m_includes_hours_isSet;
}

bool OAIFlatRateInputModel::is_includes_hours_Valid() const{
    return m_includes_hours_isValid;
}

OAISimpleInputRequiredModel OAIFlatRateInputModel::getPhase() const {
    return m_phase;
}
void OAIFlatRateInputModel::setPhase(const OAISimpleInputRequiredModel &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIFlatRateInputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIFlatRateInputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

QDate OAIFlatRateInputModel::getPlannedBillingDate() const {
    return m_planned_billing_date;
}
void OAIFlatRateInputModel::setPlannedBillingDate(const QDate &planned_billing_date) {
    m_planned_billing_date = planned_billing_date;
    m_planned_billing_date_isSet = true;
}

bool OAIFlatRateInputModel::is_planned_billing_date_Set() const{
    return m_planned_billing_date_isSet;
}

bool OAIFlatRateInputModel::is_planned_billing_date_Valid() const{
    return m_planned_billing_date_isValid;
}

OAIMoneyInputModelWithNullableAmount OAIFlatRateInputModel::getPrice() const {
    return m_price;
}
void OAIFlatRateInputModel::setPrice(const OAIMoneyInputModelWithNullableAmount &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFlatRateInputModel::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFlatRateInputModel::is_price_Valid() const{
    return m_price_isValid;
}

OAIMoneyInputModelWithNullableAmount OAIFlatRateInputModel::getPricePerAdditionalHour() const {
    return m_price_per_additional_hour;
}
void OAIFlatRateInputModel::setPricePerAdditionalHour(const OAIMoneyInputModelWithNullableAmount &price_per_additional_hour) {
    m_price_per_additional_hour = price_per_additional_hour;
    m_price_per_additional_hour_isSet = true;
}

bool OAIFlatRateInputModel::is_price_per_additional_hour_Set() const{
    return m_price_per_additional_hour_isSet;
}

bool OAIFlatRateInputModel::is_price_per_additional_hour_Valid() const{
    return m_price_per_additional_hour_isValid;
}

bool OAIFlatRateInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bill_additional_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_additional_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlatRateInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_billing_schedule_isValid && m_phase_isValid && true;
}

} // namespace OpenAPI
