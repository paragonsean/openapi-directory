/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTravelExpenseInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTravelExpenseInputModel::OAIProjectTravelExpenseInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTravelExpenseInputModel::OAIProjectTravelExpenseInputModel() {
    this->initializeModel();
}

OAIProjectTravelExpenseInputModel::~OAIProjectTravelExpenseInputModel() {}

void OAIProjectTravelExpenseInputModel::initializeModel() {

    m_billing_dependency_phase_isSet = false;
    m_billing_dependency_phase_isValid = false;

    m_billing_schedule_isSet = false;
    m_billing_schedule_isValid = false;

    m_cost_account_isSet = false;
    m_cost_account_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_invoice_quantity_isSet = false;
    m_invoice_quantity_isValid = false;

    m_invoice_row_comment_isSet = false;
    m_invoice_row_comment_isValid = false;

    m_invoice_row_description_isSet = false;
    m_invoice_row_description_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_planned_billing_date_isSet = false;
    m_planned_billing_date_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_purchase_vat_rate_isSet = false;
    m_purchase_vat_rate_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_travel_end_time_isSet = false;
    m_travel_end_time_isValid = false;

    m_travel_expense_isSet = false;
    m_travel_expense_isValid = false;

    m_travel_reimbursement_isSet = false;
    m_travel_reimbursement_isValid = false;

    m_travel_reimbursement_required_isSet = false;
    m_travel_reimbursement_required_isValid = false;

    m_travel_start_time_isSet = false;
    m_travel_start_time_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIProjectTravelExpenseInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTravelExpenseInputModel::fromJsonObject(QJsonObject json) {

    m_billing_dependency_phase_isValid = ::OpenAPI::fromJsonValue(m_billing_dependency_phase, json[QString("billingDependencyPhase")]);
    m_billing_dependency_phase_isSet = !json[QString("billingDependencyPhase")].isNull() && m_billing_dependency_phase_isValid;

    m_billing_schedule_isValid = ::OpenAPI::fromJsonValue(m_billing_schedule, json[QString("billingSchedule")]);
    m_billing_schedule_isSet = !json[QString("billingSchedule")].isNull() && m_billing_schedule_isValid;

    m_cost_account_isValid = ::OpenAPI::fromJsonValue(m_cost_account, json[QString("costAccount")]);
    m_cost_account_isSet = !json[QString("costAccount")].isNull() && m_cost_account_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_invoice_quantity_isValid = ::OpenAPI::fromJsonValue(m_invoice_quantity, json[QString("invoiceQuantity")]);
    m_invoice_quantity_isSet = !json[QString("invoiceQuantity")].isNull() && m_invoice_quantity_isValid;

    m_invoice_row_comment_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_comment, json[QString("invoiceRowComment")]);
    m_invoice_row_comment_isSet = !json[QString("invoiceRowComment")].isNull() && m_invoice_row_comment_isValid;

    m_invoice_row_description_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_description, json[QString("invoiceRowDescription")]);
    m_invoice_row_description_isSet = !json[QString("invoiceRowDescription")].isNull() && m_invoice_row_description_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_planned_billing_date_isValid = ::OpenAPI::fromJsonValue(m_planned_billing_date, json[QString("plannedBillingDate")]);
    m_planned_billing_date_isSet = !json[QString("plannedBillingDate")].isNull() && m_planned_billing_date_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_purchase_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_purchase_vat_rate, json[QString("purchaseVatRate")]);
    m_purchase_vat_rate_isSet = !json[QString("purchaseVatRate")].isNull() && m_purchase_vat_rate_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_travel_end_time_isValid = ::OpenAPI::fromJsonValue(m_travel_end_time, json[QString("travelEndTime")]);
    m_travel_end_time_isSet = !json[QString("travelEndTime")].isNull() && m_travel_end_time_isValid;

    m_travel_expense_isValid = ::OpenAPI::fromJsonValue(m_travel_expense, json[QString("travelExpense")]);
    m_travel_expense_isSet = !json[QString("travelExpense")].isNull() && m_travel_expense_isValid;

    m_travel_reimbursement_isValid = ::OpenAPI::fromJsonValue(m_travel_reimbursement, json[QString("travelReimbursement")]);
    m_travel_reimbursement_isSet = !json[QString("travelReimbursement")].isNull() && m_travel_reimbursement_isValid;

    m_travel_reimbursement_required_isValid = ::OpenAPI::fromJsonValue(m_travel_reimbursement_required, json[QString("travelReimbursementRequired")]);
    m_travel_reimbursement_required_isSet = !json[QString("travelReimbursementRequired")].isNull() && m_travel_reimbursement_required_isValid;

    m_travel_start_time_isValid = ::OpenAPI::fromJsonValue(m_travel_start_time, json[QString("travelStartTime")]);
    m_travel_start_time_isSet = !json[QString("travelStartTime")].isNull() && m_travel_start_time_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIProjectTravelExpenseInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTravelExpenseInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_dependency_phase.isSet()) {
        obj.insert(QString("billingDependencyPhase"), ::OpenAPI::toJsonValue(m_billing_dependency_phase));
    }
    if (m_billing_schedule.isSet()) {
        obj.insert(QString("billingSchedule"), ::OpenAPI::toJsonValue(m_billing_schedule));
    }
    if (m_cost_account.isSet()) {
        obj.insert(QString("costAccount"), ::OpenAPI::toJsonValue(m_cost_account));
    }
    if (m_cost_center.isSet()) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_invoice_quantity_isSet) {
        obj.insert(QString("invoiceQuantity"), ::OpenAPI::toJsonValue(m_invoice_quantity));
    }
    if (m_invoice_row_comment_isSet) {
        obj.insert(QString("invoiceRowComment"), ::OpenAPI::toJsonValue(m_invoice_row_comment));
    }
    if (m_invoice_row_description_isSet) {
        obj.insert(QString("invoiceRowDescription"), ::OpenAPI::toJsonValue(m_invoice_row_description));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_planned_billing_date_isSet) {
        obj.insert(QString("plannedBillingDate"), ::OpenAPI::toJsonValue(m_planned_billing_date));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_purchase_vat_rate_isSet) {
        obj.insert(QString("purchaseVatRate"), ::OpenAPI::toJsonValue(m_purchase_vat_rate));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_travel_end_time_isSet) {
        obj.insert(QString("travelEndTime"), ::OpenAPI::toJsonValue(m_travel_end_time));
    }
    if (m_travel_expense.isSet()) {
        obj.insert(QString("travelExpense"), ::OpenAPI::toJsonValue(m_travel_expense));
    }
    if (m_travel_reimbursement.isSet()) {
        obj.insert(QString("travelReimbursement"), ::OpenAPI::toJsonValue(m_travel_reimbursement));
    }
    if (m_travel_reimbursement_required_isSet) {
        obj.insert(QString("travelReimbursementRequired"), ::OpenAPI::toJsonValue(m_travel_reimbursement_required));
    }
    if (m_travel_start_time_isSet) {
        obj.insert(QString("travelStartTime"), ::OpenAPI::toJsonValue(m_travel_start_time));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

OAISimpleInputModel OAIProjectTravelExpenseInputModel::getBillingDependencyPhase() const {
    return m_billing_dependency_phase;
}
void OAIProjectTravelExpenseInputModel::setBillingDependencyPhase(const OAISimpleInputModel &billing_dependency_phase) {
    m_billing_dependency_phase = billing_dependency_phase;
    m_billing_dependency_phase_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_billing_dependency_phase_Set() const{
    return m_billing_dependency_phase_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_billing_dependency_phase_Valid() const{
    return m_billing_dependency_phase_isValid;
}

OAIProjectTravelExpenseBillingScheduleType OAIProjectTravelExpenseInputModel::getBillingSchedule() const {
    return m_billing_schedule;
}
void OAIProjectTravelExpenseInputModel::setBillingSchedule(const OAIProjectTravelExpenseBillingScheduleType &billing_schedule) {
    m_billing_schedule = billing_schedule;
    m_billing_schedule_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_billing_schedule_Set() const{
    return m_billing_schedule_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_billing_schedule_Valid() const{
    return m_billing_schedule_isValid;
}

OAISimpleInputModel OAIProjectTravelExpenseInputModel::getCostAccount() const {
    return m_cost_account;
}
void OAIProjectTravelExpenseInputModel::setCostAccount(const OAISimpleInputModel &cost_account) {
    m_cost_account = cost_account;
    m_cost_account_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_cost_account_Set() const{
    return m_cost_account_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_cost_account_Valid() const{
    return m_cost_account_isValid;
}

OAISimpleInputModel OAIProjectTravelExpenseInputModel::getCostCenter() const {
    return m_cost_center;
}
void OAIProjectTravelExpenseInputModel::setCostCenter(const OAISimpleInputModel &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

QString OAIProjectTravelExpenseInputModel::getDescription() const {
    return m_description;
}
void OAIProjectTravelExpenseInputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIProjectTravelExpenseInputModel::getEventDate() const {
    return m_event_date;
}
void OAIProjectTravelExpenseInputModel::setEventDate(const QDate &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_event_date_Valid() const{
    return m_event_date_isValid;
}

OAISimpleInputModel OAIProjectTravelExpenseInputModel::getInvoice() const {
    return m_invoice;
}
void OAIProjectTravelExpenseInputModel::setInvoice(const OAISimpleInputModel &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_Valid() const{
    return m_invoice_isValid;
}

double OAIProjectTravelExpenseInputModel::getInvoiceQuantity() const {
    return m_invoice_quantity;
}
void OAIProjectTravelExpenseInputModel::setInvoiceQuantity(const double &invoice_quantity) {
    m_invoice_quantity = invoice_quantity;
    m_invoice_quantity_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_quantity_Set() const{
    return m_invoice_quantity_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_quantity_Valid() const{
    return m_invoice_quantity_isValid;
}

QString OAIProjectTravelExpenseInputModel::getInvoiceRowComment() const {
    return m_invoice_row_comment;
}
void OAIProjectTravelExpenseInputModel::setInvoiceRowComment(const QString &invoice_row_comment) {
    m_invoice_row_comment = invoice_row_comment;
    m_invoice_row_comment_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_row_comment_Set() const{
    return m_invoice_row_comment_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_row_comment_Valid() const{
    return m_invoice_row_comment_isValid;
}

QString OAIProjectTravelExpenseInputModel::getInvoiceRowDescription() const {
    return m_invoice_row_description;
}
void OAIProjectTravelExpenseInputModel::setInvoiceRowDescription(const QString &invoice_row_description) {
    m_invoice_row_description = invoice_row_description;
    m_invoice_row_description_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_row_description_Set() const{
    return m_invoice_row_description_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_invoice_row_description_Valid() const{
    return m_invoice_row_description_isValid;
}

bool OAIProjectTravelExpenseInputModel::isIsBillable() const {
    return m_is_billable;
}
void OAIProjectTravelExpenseInputModel::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

QString OAIProjectTravelExpenseInputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIProjectTravelExpenseInputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

OAISimpleInputRequiredModel OAIProjectTravelExpenseInputModel::getPhase() const {
    return m_phase;
}
void OAIProjectTravelExpenseInputModel::setPhase(const OAISimpleInputRequiredModel &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

QDate OAIProjectTravelExpenseInputModel::getPlannedBillingDate() const {
    return m_planned_billing_date;
}
void OAIProjectTravelExpenseInputModel::setPlannedBillingDate(const QDate &planned_billing_date) {
    m_planned_billing_date = planned_billing_date;
    m_planned_billing_date_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_planned_billing_date_Set() const{
    return m_planned_billing_date_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_planned_billing_date_Valid() const{
    return m_planned_billing_date_isValid;
}

OAISimpleInputRequiredModel OAIProjectTravelExpenseInputModel::getProject() const {
    return m_project;
}
void OAIProjectTravelExpenseInputModel::setProject(const OAISimpleInputRequiredModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_project_Valid() const{
    return m_project_isValid;
}

double OAIProjectTravelExpenseInputModel::getPurchaseVatRate() const {
    return m_purchase_vat_rate;
}
void OAIProjectTravelExpenseInputModel::setPurchaseVatRate(const double &purchase_vat_rate) {
    m_purchase_vat_rate = purchase_vat_rate;
    m_purchase_vat_rate_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_purchase_vat_rate_Set() const{
    return m_purchase_vat_rate_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_purchase_vat_rate_Valid() const{
    return m_purchase_vat_rate_isValid;
}

double OAIProjectTravelExpenseInputModel::getQuantity() const {
    return m_quantity;
}
void OAIProjectTravelExpenseInputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAISimpleInputModel OAIProjectTravelExpenseInputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIProjectTravelExpenseInputModel::setSalesAccount(const OAISimpleInputModel &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

QDateTime OAIProjectTravelExpenseInputModel::getTravelEndTime() const {
    return m_travel_end_time;
}
void OAIProjectTravelExpenseInputModel::setTravelEndTime(const QDateTime &travel_end_time) {
    m_travel_end_time = travel_end_time;
    m_travel_end_time_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_travel_end_time_Set() const{
    return m_travel_end_time_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_travel_end_time_Valid() const{
    return m_travel_end_time_isValid;
}

OAISimpleInputRequiredModel OAIProjectTravelExpenseInputModel::getTravelExpense() const {
    return m_travel_expense;
}
void OAIProjectTravelExpenseInputModel::setTravelExpense(const OAISimpleInputRequiredModel &travel_expense) {
    m_travel_expense = travel_expense;
    m_travel_expense_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_travel_expense_Set() const{
    return m_travel_expense_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_travel_expense_Valid() const{
    return m_travel_expense_isValid;
}

OAISimpleInputModel OAIProjectTravelExpenseInputModel::getTravelReimbursement() const {
    return m_travel_reimbursement;
}
void OAIProjectTravelExpenseInputModel::setTravelReimbursement(const OAISimpleInputModel &travel_reimbursement) {
    m_travel_reimbursement = travel_reimbursement;
    m_travel_reimbursement_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_travel_reimbursement_Set() const{
    return m_travel_reimbursement_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_travel_reimbursement_Valid() const{
    return m_travel_reimbursement_isValid;
}

bool OAIProjectTravelExpenseInputModel::isTravelReimbursementRequired() const {
    return m_travel_reimbursement_required;
}
void OAIProjectTravelExpenseInputModel::setTravelReimbursementRequired(const bool &travel_reimbursement_required) {
    m_travel_reimbursement_required = travel_reimbursement_required;
    m_travel_reimbursement_required_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_travel_reimbursement_required_Set() const{
    return m_travel_reimbursement_required_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_travel_reimbursement_required_Valid() const{
    return m_travel_reimbursement_required_isValid;
}

QDateTime OAIProjectTravelExpenseInputModel::getTravelStartTime() const {
    return m_travel_start_time;
}
void OAIProjectTravelExpenseInputModel::setTravelStartTime(const QDateTime &travel_start_time) {
    m_travel_start_time = travel_start_time;
    m_travel_start_time_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_travel_start_time_Set() const{
    return m_travel_start_time_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_travel_start_time_Valid() const{
    return m_travel_start_time_isValid;
}

OAIMoneyInputModel OAIProjectTravelExpenseInputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIProjectTravelExpenseInputModel::setUnitCost(const OAIMoneyInputModel &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyInputModel OAIProjectTravelExpenseInputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProjectTravelExpenseInputModel::setUnitPrice(const OAIMoneyInputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAISimpleInputRequiredModel OAIProjectTravelExpenseInputModel::getUser() const {
    return m_user;
}
void OAIProjectTravelExpenseInputModel::setUser(const OAISimpleInputRequiredModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_user_Valid() const{
    return m_user_isValid;
}

double OAIProjectTravelExpenseInputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIProjectTravelExpenseInputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIProjectTravelExpenseInputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIProjectTravelExpenseInputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIProjectTravelExpenseInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_dependency_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_expense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_reimbursement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_reimbursement_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTravelExpenseInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_phase_isValid && m_project_isValid && m_quantity_isValid && m_travel_expense_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
