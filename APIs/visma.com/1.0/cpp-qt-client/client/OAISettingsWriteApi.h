/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsWriteApi_H
#define OAI_OAISettingsWriteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivityTypeModel.h"
#include "OAIBusinessUnitModel.h"
#include "OAICommunicationTypeModel.h"
#include "OAIContactRoleModel.h"
#include "OAICostAccountModel.h"
#include "OAICostCenterModel.h"
#include "OAICurrencyOutputModel.h"
#include "OAICustomPropertyModel.h"
#include "OAICustomerCustomPropertySelectionItemInputModel.h"
#include "OAICustomerCustomPropertySelectionItemOutputModel.h"
#include "OAIExceptionModel.h"
#include "OAIIndustryModel.h"
#include "OAIInvoiceStatusModel.h"
#include "OAIKeywordModel.h"
#include "OAILeadSourceModel.h"
#include "OAIMarketSegmentModel.h"
#include "OAIOvertimeModel.h"
#include "OAIPatchOperation.h"
#include "OAIPhaseStatusTypeModel.h"
#include "OAIProductCategoryModel.h"
#include "OAIProductCountrySettingsModel.h"
#include "OAIProductInputModel.h"
#include "OAIProductOutputModel.h"
#include "OAIProjectBillingCustomerModel2.h"
#include "OAIProjectCustomPropertySelectionItemInputModel.h"
#include "OAIProjectCustomPropertySelectionItemOutputModel.h"
#include "OAIProjectMemberCostExceptionInputModel.h"
#include "OAIProjectMemberCostExceptionOutputModel.h"
#include "OAIProjectStatusTypeModel.h"
#include "OAIProjectTaskStatusModel.h"
#include "OAIProposalStatusInputModel.h"
#include "OAIProposalStatusOutputModel.h"
#include "OAIRoleInputModel.h"
#include "OAIRoleOutputModel.h"
#include "OAISalesAccountModel.h"
#include "OAISalesStatusTypeInputModel.h"
#include "OAISalesStatusTypeOutputModel.h"
#include "OAITimeEntryTypeModel.h"
#include "OAITravelExpenseTypeCountrySettingsModel.h"
#include "OAITravelExpenseTypeInputModel.h"
#include "OAITravelExpenseTypeOutputModel.h"
#include "OAITravelReimbursementStatusModel.h"
#include "OAIUserCustomPropertyInputModel.h"
#include "OAIUserCustomPropertyOutputModel.h"
#include "OAIUserCustomPropertySelectionItemInputModel.h"
#include "OAIUserCustomPropertySelectionItemOutputModel.h"
#include "OAIVatRateInputModel.h"
#include "OAIVatRateOutputModel.h"
#include "OAIWorkContractInputModel.h"
#include "OAIWorkContractOutputModel.h"
#include "OAIWorkTypeInputModel.h"
#include "OAIWorkTypeOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsWriteApi : public QObject {
    Q_OBJECT

public:
    OAISettingsWriteApi(const int timeOut = 0);
    ~OAISettingsWriteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void activityTypesPatchActivityType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_activity_type_model OAIActivityTypeModel [optional]
    */
    virtual void activityTypesPostActivityType(const ::OpenAPI::OptionalParam<OAIActivityTypeModel> &oai_activity_type_model = ::OpenAPI::OptionalParam<OAIActivityTypeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void businessUnitsPatchBusinessUnit(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void communicationTypesPatchCommunicationType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_communication_type_model OAICommunicationTypeModel [optional]
    */
    virtual void communicationTypesPostCommunicationType(const ::OpenAPI::OptionalParam<OAICommunicationTypeModel> &oai_communication_type_model = ::OpenAPI::OptionalParam<OAICommunicationTypeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void contactRolesPatchContactRole(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_contact_role_model OAIContactRoleModel [optional]
    */
    virtual void contactRolesPostContactRole(const ::OpenAPI::OptionalParam<OAIContactRoleModel> &oai_contact_role_model = ::OpenAPI::OptionalParam<OAIContactRoleModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void costAccountsPatchCostAccount(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_cost_account_model OAICostAccountModel [optional]
    */
    virtual void costAccountsPostCostAccount(const ::OpenAPI::OptionalParam<OAICostAccountModel> &oai_cost_account_model = ::OpenAPI::OptionalParam<OAICostAccountModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void costCentersPatchCostCenter(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_cost_center_model OAICostCenterModel [optional]
    */
    virtual void costCentersPostCostCenter(const ::OpenAPI::OptionalParam<OAICostCenterModel> &oai_cost_center_model = ::OpenAPI::OptionalParam<OAICostCenterModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void currenciesPatchCurrency(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void customerCustomPropertiesPatchCustomerCustomProperty(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_custom_property_model OAICustomPropertyModel [optional]
    */
    virtual void customerCustomPropertiesPostCustomerCustomProperty(const ::OpenAPI::OptionalParam<OAICustomPropertyModel> &oai_custom_property_model = ::OpenAPI::OptionalParam<OAICustomPropertyModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_customer_custom_property_selection_item_input_model OAICustomerCustomPropertySelectionItemInputModel [optional]
    */
    virtual void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem(const ::OpenAPI::OptionalParam<OAICustomerCustomPropertySelectionItemInputModel> &oai_customer_custom_property_selection_item_input_model = ::OpenAPI::OptionalParam<OAICustomerCustomPropertySelectionItemInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void industriesPatchIndustry(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_industry_model OAIIndustryModel [optional]
    */
    virtual void industriesPostIndustry(const ::OpenAPI::OptionalParam<OAIIndustryModel> &oai_industry_model = ::OpenAPI::OptionalParam<OAIIndustryModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void invoiceStatusesPatchInvoiceStatus(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_invoice_status_model OAIInvoiceStatusModel [optional]
    */
    virtual void invoiceStatusesPostInvoiceStatus(const ::OpenAPI::OptionalParam<OAIInvoiceStatusModel> &oai_invoice_status_model = ::OpenAPI::OptionalParam<OAIInvoiceStatusModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void keywordsPatchKeyword(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_keyword_model OAIKeywordModel [optional]
    */
    virtual void keywordsPostKeyword(const ::OpenAPI::OptionalParam<OAIKeywordModel> &oai_keyword_model = ::OpenAPI::OptionalParam<OAIKeywordModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void leadSourcesPatchLeadSource(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_lead_source_model OAILeadSourceModel [optional]
    */
    virtual void leadSourcesPostLeadSource(const ::OpenAPI::OptionalParam<OAILeadSourceModel> &oai_lead_source_model = ::OpenAPI::OptionalParam<OAILeadSourceModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void marketSegmentsPatchMarketSegment(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_market_segment_model OAIMarketSegmentModel [optional]
    */
    virtual void marketSegmentsPostMarketSegment(const ::OpenAPI::OptionalParam<OAIMarketSegmentModel> &oai_market_segment_model = ::OpenAPI::OptionalParam<OAIMarketSegmentModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void overtimesPatchOvertime(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_overtime_model OAIOvertimeModel [optional]
    */
    virtual void overtimesPostOvertime(const ::OpenAPI::OptionalParam<OAIOvertimeModel> &oai_overtime_model = ::OpenAPI::OptionalParam<OAIOvertimeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void phaseStatusTypesPatchPhaseStatusType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_phase_status_type_model OAIPhaseStatusTypeModel [optional]
    */
    virtual void phaseStatusTypesPostPhaseStatusType(const ::OpenAPI::OptionalParam<OAIPhaseStatusTypeModel> &oai_phase_status_type_model = ::OpenAPI::OptionalParam<OAIPhaseStatusTypeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void productCategoriesPatchProductCategory(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_product_category_model OAIProductCategoryModel [optional]
    */
    virtual void productCategoriesPostProductCategory(const ::OpenAPI::OptionalParam<OAIProductCategoryModel> &oai_product_category_model = ::OpenAPI::OptionalParam<OAIProductCategoryModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void productCountrySettingsPatchProductCountrySettings(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_product_country_settings_model OAIProductCountrySettingsModel [optional]
    */
    virtual void productCountrySettingsPostProductCountrySettings(const ::OpenAPI::OptionalParam<OAIProductCountrySettingsModel> &oai_product_country_settings_model = ::OpenAPI::OptionalParam<OAIProductCountrySettingsModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void productsPatchProduct(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_product_input_model OAIProductInputModel [optional]
    */
    virtual void productsPostProduct(const ::OpenAPI::OptionalParam<OAIProductInputModel> &oai_product_input_model = ::OpenAPI::OptionalParam<OAIProductInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectBillingCustomersPatchProjectBillingCustomer(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_billing_customer_model2 OAIProjectBillingCustomerModel2 [optional]
    */
    virtual void projectBillingCustomersPostProjectBillingCustomer(const ::OpenAPI::OptionalParam<OAIProjectBillingCustomerModel2> &oai_project_billing_customer_model2 = ::OpenAPI::OptionalParam<OAIProjectBillingCustomerModel2>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectCustomPropertiesPatchProjectCustomProperty(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_custom_property_model OAICustomPropertyModel [optional]
    */
    virtual void projectCustomPropertiesPostProjectCustomProperty(const ::OpenAPI::OptionalParam<OAICustomPropertyModel> &oai_custom_property_model = ::OpenAPI::OptionalParam<OAICustomPropertyModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_custom_property_selection_item_input_model OAIProjectCustomPropertySelectionItemInputModel [optional]
    */
    virtual void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem(const ::OpenAPI::OptionalParam<OAIProjectCustomPropertySelectionItemInputModel> &oai_project_custom_property_selection_item_input_model = ::OpenAPI::OptionalParam<OAIProjectCustomPropertySelectionItemInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectMemberCostExceptionsPatch(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_member_cost_exception_input_model OAIProjectMemberCostExceptionInputModel [optional]
    */
    virtual void projectMemberCostExceptionsPost(const ::OpenAPI::OptionalParam<OAIProjectMemberCostExceptionInputModel> &oai_project_member_cost_exception_input_model = ::OpenAPI::OptionalParam<OAIProjectMemberCostExceptionInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectStatusTypesPatchProjectStatusType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_status_type_model OAIProjectStatusTypeModel [optional]
    */
    virtual void projectStatusTypesPostProjectStatusType(const ::OpenAPI::OptionalParam<OAIProjectStatusTypeModel> &oai_project_status_type_model = ::OpenAPI::OptionalParam<OAIProjectStatusTypeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectTaskStatusesPatchProjectTaskStatus(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_task_status_model OAIProjectTaskStatusModel [optional]
    */
    virtual void projectTaskStatusesPostProjectTaskStatus(const ::OpenAPI::OptionalParam<OAIProjectTaskStatusModel> &oai_project_task_status_model = ::OpenAPI::OptionalParam<OAIProjectTaskStatusModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void proposalStatusesPatchProposalStatus(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_proposal_status_input_model OAIProposalStatusInputModel [optional]
    */
    virtual void proposalStatusesPostProposalStatus(const ::OpenAPI::OptionalParam<OAIProposalStatusInputModel> &oai_proposal_status_input_model = ::OpenAPI::OptionalParam<OAIProposalStatusInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void rolesPatchRole(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_role_input_model OAIRoleInputModel [optional]
    */
    virtual void rolesPostRole(const ::OpenAPI::OptionalParam<OAIRoleInputModel> &oai_role_input_model = ::OpenAPI::OptionalParam<OAIRoleInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void salesAccountsPatchSalesAccount(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_sales_account_model OAISalesAccountModel [optional]
    */
    virtual void salesAccountsPostSalesAccount(const ::OpenAPI::OptionalParam<OAISalesAccountModel> &oai_sales_account_model = ::OpenAPI::OptionalParam<OAISalesAccountModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void salesStatusTypesPatchSalesStatusType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_sales_status_type_input_model OAISalesStatusTypeInputModel [optional]
    */
    virtual void salesStatusTypesPostSalesStatusType(const ::OpenAPI::OptionalParam<OAISalesStatusTypeInputModel> &oai_sales_status_type_input_model = ::OpenAPI::OptionalParam<OAISalesStatusTypeInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void timeEntryTypesPatchTimeEntryType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_time_entry_type_model OAITimeEntryTypeModel [optional]
    */
    virtual void timeEntryTypesPostTimeEntryType(const ::OpenAPI::OptionalParam<OAITimeEntryTypeModel> &oai_time_entry_type_model = ::OpenAPI::OptionalParam<OAITimeEntryTypeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_travel_expense_type_country_settings_model OAITravelExpenseTypeCountrySettingsModel [optional]
    */
    virtual void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings(const ::OpenAPI::OptionalParam<OAITravelExpenseTypeCountrySettingsModel> &oai_travel_expense_type_country_settings_model = ::OpenAPI::OptionalParam<OAITravelExpenseTypeCountrySettingsModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void travelExpenseTypesPatchTravelExpenseType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_travel_expense_type_input_model OAITravelExpenseTypeInputModel [optional]
    */
    virtual void travelExpenseTypesPostTravelExpenseType(const ::OpenAPI::OptionalParam<OAITravelExpenseTypeInputModel> &oai_travel_expense_type_input_model = ::OpenAPI::OptionalParam<OAITravelExpenseTypeInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void travelReimbursementStatusPatchTravelReimbursementStatus(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_travel_reimbursement_status_model OAITravelReimbursementStatusModel [optional]
    */
    virtual void travelReimbursementStatusPostTravelReimbursementStatus(const ::OpenAPI::OptionalParam<OAITravelReimbursementStatusModel> &oai_travel_reimbursement_status_model = ::OpenAPI::OptionalParam<OAITravelReimbursementStatusModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void userCustomPropertiesPatchUserCustomProperty(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_user_custom_property_input_model OAIUserCustomPropertyInputModel [optional]
    */
    virtual void userCustomPropertiesPostUserCustomProperty(const ::OpenAPI::OptionalParam<OAIUserCustomPropertyInputModel> &oai_user_custom_property_input_model = ::OpenAPI::OptionalParam<OAIUserCustomPropertyInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_user_custom_property_selection_item_input_model OAIUserCustomPropertySelectionItemInputModel [optional]
    */
    virtual void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem(const ::OpenAPI::OptionalParam<OAIUserCustomPropertySelectionItemInputModel> &oai_user_custom_property_selection_item_input_model = ::OpenAPI::OptionalParam<OAIUserCustomPropertySelectionItemInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void vatRatesPatchVatRate(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_vat_rate_input_model OAIVatRateInputModel [optional]
    */
    virtual void vatRatesPostVatRate(const ::OpenAPI::OptionalParam<OAIVatRateInputModel> &oai_vat_rate_input_model = ::OpenAPI::OptionalParam<OAIVatRateInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void workContractsPatchWorkContract(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  reset_flextime bool [optional]
    * @param[in]  oai_work_contract_input_model OAIWorkContractInputModel [optional]
    */
    virtual void workContractsPostWorkContract(const ::OpenAPI::OptionalParam<bool> &reset_flextime = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIWorkContractInputModel> &oai_work_contract_input_model = ::OpenAPI::OptionalParam<OAIWorkContractInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void workTypesPatchWorkType(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_work_type_input_model OAIWorkTypeInputModel [optional]
    */
    virtual void workTypesPostWorkType(const ::OpenAPI::OptionalParam<OAIWorkTypeInputModel> &oai_work_type_input_model = ::OpenAPI::OptionalParam<OAIWorkTypeInputModel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activityTypesPatchActivityTypeCallback(OAIHttpRequestWorker *worker);
    void activityTypesPostActivityTypeCallback(OAIHttpRequestWorker *worker);
    void businessUnitsPatchBusinessUnitCallback(OAIHttpRequestWorker *worker);
    void communicationTypesPatchCommunicationTypeCallback(OAIHttpRequestWorker *worker);
    void communicationTypesPostCommunicationTypeCallback(OAIHttpRequestWorker *worker);
    void contactRolesPatchContactRoleCallback(OAIHttpRequestWorker *worker);
    void contactRolesPostContactRoleCallback(OAIHttpRequestWorker *worker);
    void costAccountsPatchCostAccountCallback(OAIHttpRequestWorker *worker);
    void costAccountsPostCostAccountCallback(OAIHttpRequestWorker *worker);
    void costCentersPatchCostCenterCallback(OAIHttpRequestWorker *worker);
    void costCentersPostCostCenterCallback(OAIHttpRequestWorker *worker);
    void currenciesPatchCurrencyCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertiesPatchCustomerCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertiesPostCustomerCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void industriesPatchIndustryCallback(OAIHttpRequestWorker *worker);
    void industriesPostIndustryCallback(OAIHttpRequestWorker *worker);
    void invoiceStatusesPatchInvoiceStatusCallback(OAIHttpRequestWorker *worker);
    void invoiceStatusesPostInvoiceStatusCallback(OAIHttpRequestWorker *worker);
    void keywordsPatchKeywordCallback(OAIHttpRequestWorker *worker);
    void keywordsPostKeywordCallback(OAIHttpRequestWorker *worker);
    void leadSourcesPatchLeadSourceCallback(OAIHttpRequestWorker *worker);
    void leadSourcesPostLeadSourceCallback(OAIHttpRequestWorker *worker);
    void marketSegmentsPatchMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void marketSegmentsPostMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void overtimesPatchOvertimeCallback(OAIHttpRequestWorker *worker);
    void overtimesPostOvertimeCallback(OAIHttpRequestWorker *worker);
    void phaseStatusTypesPatchPhaseStatusTypeCallback(OAIHttpRequestWorker *worker);
    void phaseStatusTypesPostPhaseStatusTypeCallback(OAIHttpRequestWorker *worker);
    void productCategoriesPatchProductCategoryCallback(OAIHttpRequestWorker *worker);
    void productCategoriesPostProductCategoryCallback(OAIHttpRequestWorker *worker);
    void productCountrySettingsPatchProductCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void productCountrySettingsPostProductCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void productsPatchProductCallback(OAIHttpRequestWorker *worker);
    void productsPostProductCallback(OAIHttpRequestWorker *worker);
    void projectBillingCustomersPatchProjectBillingCustomerCallback(OAIHttpRequestWorker *worker);
    void projectBillingCustomersPostProjectBillingCustomerCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertiesPatchProjectCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertiesPostProjectCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsPatchCallback(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsPostCallback(OAIHttpRequestWorker *worker);
    void projectStatusTypesPatchProjectStatusTypeCallback(OAIHttpRequestWorker *worker);
    void projectStatusTypesPostProjectStatusTypeCallback(OAIHttpRequestWorker *worker);
    void projectTaskStatusesPatchProjectTaskStatusCallback(OAIHttpRequestWorker *worker);
    void projectTaskStatusesPostProjectTaskStatusCallback(OAIHttpRequestWorker *worker);
    void proposalStatusesPatchProposalStatusCallback(OAIHttpRequestWorker *worker);
    void proposalStatusesPostProposalStatusCallback(OAIHttpRequestWorker *worker);
    void rolesPatchRoleCallback(OAIHttpRequestWorker *worker);
    void rolesPostRoleCallback(OAIHttpRequestWorker *worker);
    void salesAccountsPatchSalesAccountCallback(OAIHttpRequestWorker *worker);
    void salesAccountsPostSalesAccountCallback(OAIHttpRequestWorker *worker);
    void salesStatusTypesPatchSalesStatusTypeCallback(OAIHttpRequestWorker *worker);
    void salesStatusTypesPostSalesStatusTypeCallback(OAIHttpRequestWorker *worker);
    void timeEntryTypesPatchTimeEntryTypeCallback(OAIHttpRequestWorker *worker);
    void timeEntryTypesPostTimeEntryTypeCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypesPatchTravelExpenseTypeCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypesPostTravelExpenseTypeCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementStatusPatchTravelReimbursementStatusCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementStatusPostTravelReimbursementStatusCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertiesPatchUserCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertiesPostUserCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void vatRatesPatchVatRateCallback(OAIHttpRequestWorker *worker);
    void vatRatesPostVatRateCallback(OAIHttpRequestWorker *worker);
    void workContractsPatchWorkContractCallback(OAIHttpRequestWorker *worker);
    void workContractsPostWorkContractCallback(OAIHttpRequestWorker *worker);
    void workTypesPatchWorkTypeCallback(OAIHttpRequestWorker *worker);
    void workTypesPostWorkTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activityTypesPatchActivityTypeSignal(QList<OAIActivityTypeModel> summary);
    void activityTypesPostActivityTypeSignal(OAIActivityTypeModel summary);
    void businessUnitsPatchBusinessUnitSignal(QList<OAIBusinessUnitModel> summary);
    void communicationTypesPatchCommunicationTypeSignal(QList<OAICommunicationTypeModel> summary);
    void communicationTypesPostCommunicationTypeSignal(OAICommunicationTypeModel summary);
    void contactRolesPatchContactRoleSignal(QList<OAIContactRoleModel> summary);
    void contactRolesPostContactRoleSignal(OAIContactRoleModel summary);
    void costAccountsPatchCostAccountSignal(QList<OAICostAccountModel> summary);
    void costAccountsPostCostAccountSignal(OAICostAccountModel summary);
    void costCentersPatchCostCenterSignal(QList<OAICostCenterModel> summary);
    void costCentersPostCostCenterSignal(OAICostCenterModel summary);
    void currenciesPatchCurrencySignal(QList<OAICurrencyOutputModel> summary);
    void customerCustomPropertiesPatchCustomerCustomPropertySignal(QList<OAICustomPropertyModel> summary);
    void customerCustomPropertiesPostCustomerCustomPropertySignal(QList<OAICustomPropertyModel> summary);
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignal(QList<OAICustomerCustomPropertySelectionItemOutputModel> summary);
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignal(OAICustomerCustomPropertySelectionItemOutputModel summary);
    void industriesPatchIndustrySignal(QList<OAIIndustryModel> summary);
    void industriesPostIndustrySignal(OAIIndustryModel summary);
    void invoiceStatusesPatchInvoiceStatusSignal(QList<OAIInvoiceStatusModel> summary);
    void invoiceStatusesPostInvoiceStatusSignal(OAIInvoiceStatusModel summary);
    void keywordsPatchKeywordSignal(QList<OAIKeywordModel> summary);
    void keywordsPostKeywordSignal(OAIKeywordModel summary);
    void leadSourcesPatchLeadSourceSignal(QList<OAILeadSourceModel> summary);
    void leadSourcesPostLeadSourceSignal(OAILeadSourceModel summary);
    void marketSegmentsPatchMarketSegmentSignal(QList<OAIMarketSegmentModel> summary);
    void marketSegmentsPostMarketSegmentSignal(OAIMarketSegmentModel summary);
    void overtimesPatchOvertimeSignal(QList<OAIOvertimeModel> summary);
    void overtimesPostOvertimeSignal(OAIOvertimeModel summary);
    void phaseStatusTypesPatchPhaseStatusTypeSignal(QList<OAIPhaseStatusTypeModel> summary);
    void phaseStatusTypesPostPhaseStatusTypeSignal(OAIPhaseStatusTypeModel summary);
    void productCategoriesPatchProductCategorySignal(QList<OAIProductCategoryModel> summary);
    void productCategoriesPostProductCategorySignal(OAIProductCategoryModel summary);
    void productCountrySettingsPatchProductCountrySettingsSignal(QList<OAIProductCountrySettingsModel> summary);
    void productCountrySettingsPostProductCountrySettingsSignal(OAIProductCountrySettingsModel summary);
    void productsPatchProductSignal(QList<OAIProductOutputModel> summary);
    void productsPostProductSignal(OAIProductOutputModel summary);
    void projectBillingCustomersPatchProjectBillingCustomerSignal(QList<OAIProjectBillingCustomerModel2> summary);
    void projectBillingCustomersPostProjectBillingCustomerSignal(OAIProjectBillingCustomerModel2 summary);
    void projectCustomPropertiesPatchProjectCustomPropertySignal(QList<OAICustomPropertyModel> summary);
    void projectCustomPropertiesPostProjectCustomPropertySignal(QList<OAICustomPropertyModel> summary);
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignal(QList<OAIProjectCustomPropertySelectionItemOutputModel> summary);
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignal(OAIProjectCustomPropertySelectionItemOutputModel summary);
    void projectMemberCostExceptionsPatchSignal(QList<OAIProjectMemberCostExceptionOutputModel> summary);
    void projectMemberCostExceptionsPostSignal(OAIProjectMemberCostExceptionOutputModel summary);
    void projectStatusTypesPatchProjectStatusTypeSignal(QList<OAIProjectStatusTypeModel> summary);
    void projectStatusTypesPostProjectStatusTypeSignal(OAIProjectStatusTypeModel summary);
    void projectTaskStatusesPatchProjectTaskStatusSignal(QList<OAIProjectTaskStatusModel> summary);
    void projectTaskStatusesPostProjectTaskStatusSignal(OAIProjectTaskStatusModel summary);
    void proposalStatusesPatchProposalStatusSignal(QList<OAIProposalStatusOutputModel> summary);
    void proposalStatusesPostProposalStatusSignal(OAIProposalStatusOutputModel summary);
    void rolesPatchRoleSignal(QList<OAIRoleOutputModel> summary);
    void rolesPostRoleSignal(OAIRoleOutputModel summary);
    void salesAccountsPatchSalesAccountSignal(QList<OAISalesAccountModel> summary);
    void salesAccountsPostSalesAccountSignal(OAISalesAccountModel summary);
    void salesStatusTypesPatchSalesStatusTypeSignal(QList<OAISalesStatusTypeOutputModel> summary);
    void salesStatusTypesPostSalesStatusTypeSignal(OAISalesStatusTypeOutputModel summary);
    void timeEntryTypesPatchTimeEntryTypeSignal(QList<OAITimeEntryTypeModel> summary);
    void timeEntryTypesPostTimeEntryTypeSignal(OAITimeEntryTypeModel summary);
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignal(QList<OAITravelExpenseTypeCountrySettingsModel> summary);
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignal(OAITravelExpenseTypeCountrySettingsModel summary);
    void travelExpenseTypesPatchTravelExpenseTypeSignal(QList<OAITravelExpenseTypeOutputModel> summary);
    void travelExpenseTypesPostTravelExpenseTypeSignal(OAITravelExpenseTypeOutputModel summary);
    void travelReimbursementStatusPatchTravelReimbursementStatusSignal(QList<OAITravelReimbursementStatusModel> summary);
    void travelReimbursementStatusPostTravelReimbursementStatusSignal(OAITravelReimbursementStatusModel summary);
    void userCustomPropertiesPatchUserCustomPropertySignal(QList<OAIUserCustomPropertyOutputModel> summary);
    void userCustomPropertiesPostUserCustomPropertySignal(OAIUserCustomPropertyOutputModel summary);
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignal(QList<OAIUserCustomPropertySelectionItemOutputModel> summary);
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignal(OAIUserCustomPropertySelectionItemOutputModel summary);
    void vatRatesPatchVatRateSignal(QList<OAIVatRateOutputModel> summary);
    void vatRatesPostVatRateSignal(OAIVatRateOutputModel summary);
    void workContractsPatchWorkContractSignal(QList<OAIWorkContractOutputModel> summary);
    void workContractsPostWorkContractSignal(OAIWorkContractOutputModel summary);
    void workTypesPatchWorkTypeSignal(QList<OAIWorkTypeOutputModel> summary);
    void workTypesPostWorkTypeSignal(OAIWorkTypeOutputModel summary);


    void activityTypesPatchActivityTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivityTypeModel> summary);
    void activityTypesPostActivityTypeSignalFull(OAIHttpRequestWorker *worker, OAIActivityTypeModel summary);
    void businessUnitsPatchBusinessUnitSignalFull(OAIHttpRequestWorker *worker, QList<OAIBusinessUnitModel> summary);
    void communicationTypesPatchCommunicationTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAICommunicationTypeModel> summary);
    void communicationTypesPostCommunicationTypeSignalFull(OAIHttpRequestWorker *worker, OAICommunicationTypeModel summary);
    void contactRolesPatchContactRoleSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactRoleModel> summary);
    void contactRolesPostContactRoleSignalFull(OAIHttpRequestWorker *worker, OAIContactRoleModel summary);
    void costAccountsPatchCostAccountSignalFull(OAIHttpRequestWorker *worker, QList<OAICostAccountModel> summary);
    void costAccountsPostCostAccountSignalFull(OAIHttpRequestWorker *worker, OAICostAccountModel summary);
    void costCentersPatchCostCenterSignalFull(OAIHttpRequestWorker *worker, QList<OAICostCenterModel> summary);
    void costCentersPostCostCenterSignalFull(OAIHttpRequestWorker *worker, OAICostCenterModel summary);
    void currenciesPatchCurrencySignalFull(OAIHttpRequestWorker *worker, QList<OAICurrencyOutputModel> summary);
    void customerCustomPropertiesPatchCustomerCustomPropertySignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPropertyModel> summary);
    void customerCustomPropertiesPostCustomerCustomPropertySignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPropertyModel> summary);
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCustomPropertySelectionItemOutputModel> summary);
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, OAICustomerCustomPropertySelectionItemOutputModel summary);
    void industriesPatchIndustrySignalFull(OAIHttpRequestWorker *worker, QList<OAIIndustryModel> summary);
    void industriesPostIndustrySignalFull(OAIHttpRequestWorker *worker, OAIIndustryModel summary);
    void invoiceStatusesPatchInvoiceStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceStatusModel> summary);
    void invoiceStatusesPostInvoiceStatusSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceStatusModel summary);
    void keywordsPatchKeywordSignalFull(OAIHttpRequestWorker *worker, QList<OAIKeywordModel> summary);
    void keywordsPostKeywordSignalFull(OAIHttpRequestWorker *worker, OAIKeywordModel summary);
    void leadSourcesPatchLeadSourceSignalFull(OAIHttpRequestWorker *worker, QList<OAILeadSourceModel> summary);
    void leadSourcesPostLeadSourceSignalFull(OAIHttpRequestWorker *worker, OAILeadSourceModel summary);
    void marketSegmentsPatchMarketSegmentSignalFull(OAIHttpRequestWorker *worker, QList<OAIMarketSegmentModel> summary);
    void marketSegmentsPostMarketSegmentSignalFull(OAIHttpRequestWorker *worker, OAIMarketSegmentModel summary);
    void overtimesPatchOvertimeSignalFull(OAIHttpRequestWorker *worker, QList<OAIOvertimeModel> summary);
    void overtimesPostOvertimeSignalFull(OAIHttpRequestWorker *worker, OAIOvertimeModel summary);
    void phaseStatusTypesPatchPhaseStatusTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseStatusTypeModel> summary);
    void phaseStatusTypesPostPhaseStatusTypeSignalFull(OAIHttpRequestWorker *worker, OAIPhaseStatusTypeModel summary);
    void productCategoriesPatchProductCategorySignalFull(OAIHttpRequestWorker *worker, QList<OAIProductCategoryModel> summary);
    void productCategoriesPostProductCategorySignalFull(OAIHttpRequestWorker *worker, OAIProductCategoryModel summary);
    void productCountrySettingsPatchProductCountrySettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductCountrySettingsModel> summary);
    void productCountrySettingsPostProductCountrySettingsSignalFull(OAIHttpRequestWorker *worker, OAIProductCountrySettingsModel summary);
    void productsPatchProductSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductOutputModel> summary);
    void productsPostProductSignalFull(OAIHttpRequestWorker *worker, OAIProductOutputModel summary);
    void projectBillingCustomersPatchProjectBillingCustomerSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectBillingCustomerModel2> summary);
    void projectBillingCustomersPostProjectBillingCustomerSignalFull(OAIHttpRequestWorker *worker, OAIProjectBillingCustomerModel2 summary);
    void projectCustomPropertiesPatchProjectCustomPropertySignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPropertyModel> summary);
    void projectCustomPropertiesPostProjectCustomPropertySignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPropertyModel> summary);
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCustomPropertySelectionItemOutputModel> summary);
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, OAIProjectCustomPropertySelectionItemOutputModel summary);
    void projectMemberCostExceptionsPatchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectMemberCostExceptionOutputModel> summary);
    void projectMemberCostExceptionsPostSignalFull(OAIHttpRequestWorker *worker, OAIProjectMemberCostExceptionOutputModel summary);
    void projectStatusTypesPatchProjectStatusTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectStatusTypeModel> summary);
    void projectStatusTypesPostProjectStatusTypeSignalFull(OAIHttpRequestWorker *worker, OAIProjectStatusTypeModel summary);
    void projectTaskStatusesPatchProjectTaskStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTaskStatusModel> summary);
    void projectTaskStatusesPostProjectTaskStatusSignalFull(OAIHttpRequestWorker *worker, OAIProjectTaskStatusModel summary);
    void proposalStatusesPatchProposalStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalStatusOutputModel> summary);
    void proposalStatusesPostProposalStatusSignalFull(OAIHttpRequestWorker *worker, OAIProposalStatusOutputModel summary);
    void rolesPatchRoleSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleOutputModel> summary);
    void rolesPostRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleOutputModel summary);
    void salesAccountsPatchSalesAccountSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesAccountModel> summary);
    void salesAccountsPostSalesAccountSignalFull(OAIHttpRequestWorker *worker, OAISalesAccountModel summary);
    void salesStatusTypesPatchSalesStatusTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesStatusTypeOutputModel> summary);
    void salesStatusTypesPostSalesStatusTypeSignalFull(OAIHttpRequestWorker *worker, OAISalesStatusTypeOutputModel summary);
    void timeEntryTypesPatchTimeEntryTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeEntryTypeModel> summary);
    void timeEntryTypesPostTimeEntryTypeSignalFull(OAIHttpRequestWorker *worker, OAITimeEntryTypeModel summary);
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelExpenseTypeCountrySettingsModel> summary);
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalFull(OAIHttpRequestWorker *worker, OAITravelExpenseTypeCountrySettingsModel summary);
    void travelExpenseTypesPatchTravelExpenseTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelExpenseTypeOutputModel> summary);
    void travelExpenseTypesPostTravelExpenseTypeSignalFull(OAIHttpRequestWorker *worker, OAITravelExpenseTypeOutputModel summary);
    void travelReimbursementStatusPatchTravelReimbursementStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelReimbursementStatusModel> summary);
    void travelReimbursementStatusPostTravelReimbursementStatusSignalFull(OAIHttpRequestWorker *worker, OAITravelReimbursementStatusModel summary);
    void userCustomPropertiesPatchUserCustomPropertySignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomPropertyOutputModel> summary);
    void userCustomPropertiesPostUserCustomPropertySignalFull(OAIHttpRequestWorker *worker, OAIUserCustomPropertyOutputModel summary);
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomPropertySelectionItemOutputModel> summary);
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, OAIUserCustomPropertySelectionItemOutputModel summary);
    void vatRatesPatchVatRateSignalFull(OAIHttpRequestWorker *worker, QList<OAIVatRateOutputModel> summary);
    void vatRatesPostVatRateSignalFull(OAIHttpRequestWorker *worker, OAIVatRateOutputModel summary);
    void workContractsPatchWorkContractSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkContractOutputModel> summary);
    void workContractsPostWorkContractSignalFull(OAIHttpRequestWorker *worker, OAIWorkContractOutputModel summary);
    void workTypesPatchWorkTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkTypeOutputModel> summary);
    void workTypesPostWorkTypeSignalFull(OAIHttpRequestWorker *worker, OAIWorkTypeOutputModel summary);

    Q_DECL_DEPRECATED_X("Use activityTypesPatchActivityTypeSignalError() instead")
    void activityTypesPatchActivityTypeSignalE(QList<OAIActivityTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesPatchActivityTypeSignalError(QList<OAIActivityTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityTypesPostActivityTypeSignalError() instead")
    void activityTypesPostActivityTypeSignalE(OAIActivityTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesPostActivityTypeSignalError(OAIActivityTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessUnitsPatchBusinessUnitSignalError() instead")
    void businessUnitsPatchBusinessUnitSignalE(QList<OAIBusinessUnitModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessUnitsPatchBusinessUnitSignalError(QList<OAIBusinessUnitModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesPatchCommunicationTypeSignalError() instead")
    void communicationTypesPatchCommunicationTypeSignalE(QList<OAICommunicationTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesPatchCommunicationTypeSignalError(QList<OAICommunicationTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesPostCommunicationTypeSignalError() instead")
    void communicationTypesPostCommunicationTypeSignalE(OAICommunicationTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesPostCommunicationTypeSignalError(OAICommunicationTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesPatchContactRoleSignalError() instead")
    void contactRolesPatchContactRoleSignalE(QList<OAIContactRoleModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesPatchContactRoleSignalError(QList<OAIContactRoleModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesPostContactRoleSignalError() instead")
    void contactRolesPostContactRoleSignalE(OAIContactRoleModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesPostContactRoleSignalError(OAIContactRoleModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsPatchCostAccountSignalError() instead")
    void costAccountsPatchCostAccountSignalE(QList<OAICostAccountModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsPatchCostAccountSignalError(QList<OAICostAccountModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsPostCostAccountSignalError() instead")
    void costAccountsPostCostAccountSignalE(OAICostAccountModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsPostCostAccountSignalError(OAICostAccountModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersPatchCostCenterSignalError() instead")
    void costCentersPatchCostCenterSignalE(QList<OAICostCenterModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersPatchCostCenterSignalError(QList<OAICostCenterModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersPostCostCenterSignalError() instead")
    void costCentersPostCostCenterSignalE(OAICostCenterModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersPostCostCenterSignalError(OAICostCenterModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesPatchCurrencySignalError() instead")
    void currenciesPatchCurrencySignalE(QList<OAICurrencyOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesPatchCurrencySignalError(QList<OAICurrencyOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesPatchCustomerCustomPropertySignalError() instead")
    void customerCustomPropertiesPatchCustomerCustomPropertySignalE(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesPatchCustomerCustomPropertySignalError(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesPostCustomerCustomPropertySignalError() instead")
    void customerCustomPropertiesPostCustomerCustomPropertySignalE(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesPostCustomerCustomPropertySignalError(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalError() instead")
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalE(QList<OAICustomerCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalError(QList<OAICustomerCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalError() instead")
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalE(OAICustomerCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalError(OAICustomerCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesPatchIndustrySignalError() instead")
    void industriesPatchIndustrySignalE(QList<OAIIndustryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesPatchIndustrySignalError(QList<OAIIndustryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesPostIndustrySignalError() instead")
    void industriesPostIndustrySignalE(OAIIndustryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesPostIndustrySignalError(OAIIndustryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesPatchInvoiceStatusSignalError() instead")
    void invoiceStatusesPatchInvoiceStatusSignalE(QList<OAIInvoiceStatusModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesPatchInvoiceStatusSignalError(QList<OAIInvoiceStatusModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesPostInvoiceStatusSignalError() instead")
    void invoiceStatusesPostInvoiceStatusSignalE(OAIInvoiceStatusModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesPostInvoiceStatusSignalError(OAIInvoiceStatusModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsPatchKeywordSignalError() instead")
    void keywordsPatchKeywordSignalE(QList<OAIKeywordModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsPatchKeywordSignalError(QList<OAIKeywordModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsPostKeywordSignalError() instead")
    void keywordsPostKeywordSignalE(OAIKeywordModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsPostKeywordSignalError(OAIKeywordModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesPatchLeadSourceSignalError() instead")
    void leadSourcesPatchLeadSourceSignalE(QList<OAILeadSourceModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesPatchLeadSourceSignalError(QList<OAILeadSourceModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesPostLeadSourceSignalError() instead")
    void leadSourcesPostLeadSourceSignalE(OAILeadSourceModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesPostLeadSourceSignalError(OAILeadSourceModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsPatchMarketSegmentSignalError() instead")
    void marketSegmentsPatchMarketSegmentSignalE(QList<OAIMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsPatchMarketSegmentSignalError(QList<OAIMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsPostMarketSegmentSignalError() instead")
    void marketSegmentsPostMarketSegmentSignalE(OAIMarketSegmentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsPostMarketSegmentSignalError(OAIMarketSegmentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesPatchOvertimeSignalError() instead")
    void overtimesPatchOvertimeSignalE(QList<OAIOvertimeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesPatchOvertimeSignalError(QList<OAIOvertimeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesPostOvertimeSignalError() instead")
    void overtimesPostOvertimeSignalE(OAIOvertimeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesPostOvertimeSignalError(OAIOvertimeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesPatchPhaseStatusTypeSignalError() instead")
    void phaseStatusTypesPatchPhaseStatusTypeSignalE(QList<OAIPhaseStatusTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesPatchPhaseStatusTypeSignalError(QList<OAIPhaseStatusTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesPostPhaseStatusTypeSignalError() instead")
    void phaseStatusTypesPostPhaseStatusTypeSignalE(OAIPhaseStatusTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesPostPhaseStatusTypeSignalError(OAIPhaseStatusTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesPatchProductCategorySignalError() instead")
    void productCategoriesPatchProductCategorySignalE(QList<OAIProductCategoryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesPatchProductCategorySignalError(QList<OAIProductCategoryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesPostProductCategorySignalError() instead")
    void productCategoriesPostProductCategorySignalE(OAIProductCategoryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesPostProductCategorySignalError(OAIProductCategoryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsPatchProductCountrySettingsSignalError() instead")
    void productCountrySettingsPatchProductCountrySettingsSignalE(QList<OAIProductCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsPatchProductCountrySettingsSignalError(QList<OAIProductCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsPostProductCountrySettingsSignalError() instead")
    void productCountrySettingsPostProductCountrySettingsSignalE(OAIProductCountrySettingsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsPostProductCountrySettingsSignalError(OAIProductCountrySettingsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPatchProductSignalError() instead")
    void productsPatchProductSignalE(QList<OAIProductOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPatchProductSignalError(QList<OAIProductOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPostProductSignalError() instead")
    void productsPostProductSignalE(OAIProductOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPostProductSignalError(OAIProductOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersPatchProjectBillingCustomerSignalError() instead")
    void projectBillingCustomersPatchProjectBillingCustomerSignalE(QList<OAIProjectBillingCustomerModel2> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersPatchProjectBillingCustomerSignalError(QList<OAIProjectBillingCustomerModel2> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersPostProjectBillingCustomerSignalError() instead")
    void projectBillingCustomersPostProjectBillingCustomerSignalE(OAIProjectBillingCustomerModel2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersPostProjectBillingCustomerSignalError(OAIProjectBillingCustomerModel2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesPatchProjectCustomPropertySignalError() instead")
    void projectCustomPropertiesPatchProjectCustomPropertySignalE(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesPatchProjectCustomPropertySignalError(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesPostProjectCustomPropertySignalError() instead")
    void projectCustomPropertiesPostProjectCustomPropertySignalE(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesPostProjectCustomPropertySignalError(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalError() instead")
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalE(QList<OAIProjectCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalError(QList<OAIProjectCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalError() instead")
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalE(OAIProjectCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalError(OAIProjectCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsPatchSignalError() instead")
    void projectMemberCostExceptionsPatchSignalE(QList<OAIProjectMemberCostExceptionOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsPatchSignalError(QList<OAIProjectMemberCostExceptionOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsPostSignalError() instead")
    void projectMemberCostExceptionsPostSignalE(OAIProjectMemberCostExceptionOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsPostSignalError(OAIProjectMemberCostExceptionOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesPatchProjectStatusTypeSignalError() instead")
    void projectStatusTypesPatchProjectStatusTypeSignalE(QList<OAIProjectStatusTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesPatchProjectStatusTypeSignalError(QList<OAIProjectStatusTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesPostProjectStatusTypeSignalError() instead")
    void projectStatusTypesPostProjectStatusTypeSignalE(OAIProjectStatusTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesPostProjectStatusTypeSignalError(OAIProjectStatusTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesPatchProjectTaskStatusSignalError() instead")
    void projectTaskStatusesPatchProjectTaskStatusSignalE(QList<OAIProjectTaskStatusModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesPatchProjectTaskStatusSignalError(QList<OAIProjectTaskStatusModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesPostProjectTaskStatusSignalError() instead")
    void projectTaskStatusesPostProjectTaskStatusSignalE(OAIProjectTaskStatusModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesPostProjectTaskStatusSignalError(OAIProjectTaskStatusModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesPatchProposalStatusSignalError() instead")
    void proposalStatusesPatchProposalStatusSignalE(QList<OAIProposalStatusOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesPatchProposalStatusSignalError(QList<OAIProposalStatusOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesPostProposalStatusSignalError() instead")
    void proposalStatusesPostProposalStatusSignalE(OAIProposalStatusOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesPostProposalStatusSignalError(OAIProposalStatusOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesPatchRoleSignalError() instead")
    void rolesPatchRoleSignalE(QList<OAIRoleOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesPatchRoleSignalError(QList<OAIRoleOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesPostRoleSignalError() instead")
    void rolesPostRoleSignalE(OAIRoleOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesPostRoleSignalError(OAIRoleOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsPatchSalesAccountSignalError() instead")
    void salesAccountsPatchSalesAccountSignalE(QList<OAISalesAccountModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsPatchSalesAccountSignalError(QList<OAISalesAccountModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsPostSalesAccountSignalError() instead")
    void salesAccountsPostSalesAccountSignalE(OAISalesAccountModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsPostSalesAccountSignalError(OAISalesAccountModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesPatchSalesStatusTypeSignalError() instead")
    void salesStatusTypesPatchSalesStatusTypeSignalE(QList<OAISalesStatusTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesPatchSalesStatusTypeSignalError(QList<OAISalesStatusTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesPostSalesStatusTypeSignalError() instead")
    void salesStatusTypesPostSalesStatusTypeSignalE(OAISalesStatusTypeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesPostSalesStatusTypeSignalError(OAISalesStatusTypeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesPatchTimeEntryTypeSignalError() instead")
    void timeEntryTypesPatchTimeEntryTypeSignalE(QList<OAITimeEntryTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesPatchTimeEntryTypeSignalError(QList<OAITimeEntryTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesPostTimeEntryTypeSignalError() instead")
    void timeEntryTypesPostTimeEntryTypeSignalE(OAITimeEntryTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesPostTimeEntryTypeSignalError(OAITimeEntryTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalError() instead")
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalE(QList<OAITravelExpenseTypeCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalError(QList<OAITravelExpenseTypeCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalError() instead")
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalE(OAITravelExpenseTypeCountrySettingsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalError(OAITravelExpenseTypeCountrySettingsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesPatchTravelExpenseTypeSignalError() instead")
    void travelExpenseTypesPatchTravelExpenseTypeSignalE(QList<OAITravelExpenseTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesPatchTravelExpenseTypeSignalError(QList<OAITravelExpenseTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesPostTravelExpenseTypeSignalError() instead")
    void travelExpenseTypesPostTravelExpenseTypeSignalE(OAITravelExpenseTypeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesPostTravelExpenseTypeSignalError(OAITravelExpenseTypeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusPatchTravelReimbursementStatusSignalError() instead")
    void travelReimbursementStatusPatchTravelReimbursementStatusSignalE(QList<OAITravelReimbursementStatusModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusPatchTravelReimbursementStatusSignalError(QList<OAITravelReimbursementStatusModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusPostTravelReimbursementStatusSignalError() instead")
    void travelReimbursementStatusPostTravelReimbursementStatusSignalE(OAITravelReimbursementStatusModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusPostTravelReimbursementStatusSignalError(OAITravelReimbursementStatusModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesPatchUserCustomPropertySignalError() instead")
    void userCustomPropertiesPatchUserCustomPropertySignalE(QList<OAIUserCustomPropertyOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesPatchUserCustomPropertySignalError(QList<OAIUserCustomPropertyOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesPostUserCustomPropertySignalError() instead")
    void userCustomPropertiesPostUserCustomPropertySignalE(OAIUserCustomPropertyOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesPostUserCustomPropertySignalError(OAIUserCustomPropertyOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalError() instead")
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalE(QList<OAIUserCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalError(QList<OAIUserCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalError() instead")
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalE(OAIUserCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalError(OAIUserCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesPatchVatRateSignalError() instead")
    void vatRatesPatchVatRateSignalE(QList<OAIVatRateOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesPatchVatRateSignalError(QList<OAIVatRateOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesPostVatRateSignalError() instead")
    void vatRatesPostVatRateSignalE(OAIVatRateOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesPostVatRateSignalError(OAIVatRateOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPatchWorkContractSignalError() instead")
    void workContractsPatchWorkContractSignalE(QList<OAIWorkContractOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPatchWorkContractSignalError(QList<OAIWorkContractOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPostWorkContractSignalError() instead")
    void workContractsPostWorkContractSignalE(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPostWorkContractSignalError(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesPatchWorkTypeSignalError() instead")
    void workTypesPatchWorkTypeSignalE(QList<OAIWorkTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesPatchWorkTypeSignalError(QList<OAIWorkTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesPostWorkTypeSignalError() instead")
    void workTypesPostWorkTypeSignalE(OAIWorkTypeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesPostWorkTypeSignalError(OAIWorkTypeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activityTypesPatchActivityTypeSignalErrorFull() instead")
    void activityTypesPatchActivityTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesPatchActivityTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityTypesPostActivityTypeSignalErrorFull() instead")
    void activityTypesPostActivityTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesPostActivityTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessUnitsPatchBusinessUnitSignalErrorFull() instead")
    void businessUnitsPatchBusinessUnitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessUnitsPatchBusinessUnitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesPatchCommunicationTypeSignalErrorFull() instead")
    void communicationTypesPatchCommunicationTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesPatchCommunicationTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesPostCommunicationTypeSignalErrorFull() instead")
    void communicationTypesPostCommunicationTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesPostCommunicationTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesPatchContactRoleSignalErrorFull() instead")
    void contactRolesPatchContactRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesPatchContactRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesPostContactRoleSignalErrorFull() instead")
    void contactRolesPostContactRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesPostContactRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsPatchCostAccountSignalErrorFull() instead")
    void costAccountsPatchCostAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsPatchCostAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsPostCostAccountSignalErrorFull() instead")
    void costAccountsPostCostAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsPostCostAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersPatchCostCenterSignalErrorFull() instead")
    void costCentersPatchCostCenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersPatchCostCenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersPostCostCenterSignalErrorFull() instead")
    void costCentersPostCostCenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersPostCostCenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesPatchCurrencySignalErrorFull() instead")
    void currenciesPatchCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesPatchCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesPatchCustomerCustomPropertySignalErrorFull() instead")
    void customerCustomPropertiesPatchCustomerCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesPatchCustomerCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesPostCustomerCustomPropertySignalErrorFull() instead")
    void customerCustomPropertiesPostCustomerCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesPostCustomerCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalErrorFull() instead")
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalErrorFull() instead")
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesPatchIndustrySignalErrorFull() instead")
    void industriesPatchIndustrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesPatchIndustrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesPostIndustrySignalErrorFull() instead")
    void industriesPostIndustrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesPostIndustrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesPatchInvoiceStatusSignalErrorFull() instead")
    void invoiceStatusesPatchInvoiceStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesPatchInvoiceStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesPostInvoiceStatusSignalErrorFull() instead")
    void invoiceStatusesPostInvoiceStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesPostInvoiceStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsPatchKeywordSignalErrorFull() instead")
    void keywordsPatchKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsPatchKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsPostKeywordSignalErrorFull() instead")
    void keywordsPostKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsPostKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesPatchLeadSourceSignalErrorFull() instead")
    void leadSourcesPatchLeadSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesPatchLeadSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesPostLeadSourceSignalErrorFull() instead")
    void leadSourcesPostLeadSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesPostLeadSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsPatchMarketSegmentSignalErrorFull() instead")
    void marketSegmentsPatchMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsPatchMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsPostMarketSegmentSignalErrorFull() instead")
    void marketSegmentsPostMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsPostMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesPatchOvertimeSignalErrorFull() instead")
    void overtimesPatchOvertimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesPatchOvertimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesPostOvertimeSignalErrorFull() instead")
    void overtimesPostOvertimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesPostOvertimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesPatchPhaseStatusTypeSignalErrorFull() instead")
    void phaseStatusTypesPatchPhaseStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesPatchPhaseStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesPostPhaseStatusTypeSignalErrorFull() instead")
    void phaseStatusTypesPostPhaseStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesPostPhaseStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesPatchProductCategorySignalErrorFull() instead")
    void productCategoriesPatchProductCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesPatchProductCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesPostProductCategorySignalErrorFull() instead")
    void productCategoriesPostProductCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesPostProductCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsPatchProductCountrySettingsSignalErrorFull() instead")
    void productCountrySettingsPatchProductCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsPatchProductCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsPostProductCountrySettingsSignalErrorFull() instead")
    void productCountrySettingsPostProductCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsPostProductCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPatchProductSignalErrorFull() instead")
    void productsPatchProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPatchProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPostProductSignalErrorFull() instead")
    void productsPostProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPostProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersPatchProjectBillingCustomerSignalErrorFull() instead")
    void projectBillingCustomersPatchProjectBillingCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersPatchProjectBillingCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersPostProjectBillingCustomerSignalErrorFull() instead")
    void projectBillingCustomersPostProjectBillingCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersPostProjectBillingCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesPatchProjectCustomPropertySignalErrorFull() instead")
    void projectCustomPropertiesPatchProjectCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesPatchProjectCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesPostProjectCustomPropertySignalErrorFull() instead")
    void projectCustomPropertiesPostProjectCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesPostProjectCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalErrorFull() instead")
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalErrorFull() instead")
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsPatchSignalErrorFull() instead")
    void projectMemberCostExceptionsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsPostSignalErrorFull() instead")
    void projectMemberCostExceptionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesPatchProjectStatusTypeSignalErrorFull() instead")
    void projectStatusTypesPatchProjectStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesPatchProjectStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesPostProjectStatusTypeSignalErrorFull() instead")
    void projectStatusTypesPostProjectStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesPostProjectStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesPatchProjectTaskStatusSignalErrorFull() instead")
    void projectTaskStatusesPatchProjectTaskStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesPatchProjectTaskStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesPostProjectTaskStatusSignalErrorFull() instead")
    void projectTaskStatusesPostProjectTaskStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesPostProjectTaskStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesPatchProposalStatusSignalErrorFull() instead")
    void proposalStatusesPatchProposalStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesPatchProposalStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesPostProposalStatusSignalErrorFull() instead")
    void proposalStatusesPostProposalStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesPostProposalStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesPatchRoleSignalErrorFull() instead")
    void rolesPatchRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesPatchRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesPostRoleSignalErrorFull() instead")
    void rolesPostRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesPostRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsPatchSalesAccountSignalErrorFull() instead")
    void salesAccountsPatchSalesAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsPatchSalesAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsPostSalesAccountSignalErrorFull() instead")
    void salesAccountsPostSalesAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsPostSalesAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesPatchSalesStatusTypeSignalErrorFull() instead")
    void salesStatusTypesPatchSalesStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesPatchSalesStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesPostSalesStatusTypeSignalErrorFull() instead")
    void salesStatusTypesPostSalesStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesPostSalesStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesPatchTimeEntryTypeSignalErrorFull() instead")
    void timeEntryTypesPatchTimeEntryTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesPatchTimeEntryTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesPostTimeEntryTypeSignalErrorFull() instead")
    void timeEntryTypesPostTimeEntryTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesPostTimeEntryTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalErrorFull() instead")
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalErrorFull() instead")
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesPatchTravelExpenseTypeSignalErrorFull() instead")
    void travelExpenseTypesPatchTravelExpenseTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesPatchTravelExpenseTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesPostTravelExpenseTypeSignalErrorFull() instead")
    void travelExpenseTypesPostTravelExpenseTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesPostTravelExpenseTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusPatchTravelReimbursementStatusSignalErrorFull() instead")
    void travelReimbursementStatusPatchTravelReimbursementStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusPatchTravelReimbursementStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusPostTravelReimbursementStatusSignalErrorFull() instead")
    void travelReimbursementStatusPostTravelReimbursementStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusPostTravelReimbursementStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesPatchUserCustomPropertySignalErrorFull() instead")
    void userCustomPropertiesPatchUserCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesPatchUserCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesPostUserCustomPropertySignalErrorFull() instead")
    void userCustomPropertiesPostUserCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesPostUserCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalErrorFull() instead")
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalErrorFull() instead")
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesPatchVatRateSignalErrorFull() instead")
    void vatRatesPatchVatRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesPatchVatRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesPostVatRateSignalErrorFull() instead")
    void vatRatesPostVatRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesPostVatRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPatchWorkContractSignalErrorFull() instead")
    void workContractsPatchWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPatchWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsPostWorkContractSignalErrorFull() instead")
    void workContractsPostWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsPostWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesPatchWorkTypeSignalErrorFull() instead")
    void workTypesPatchWorkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesPatchWorkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesPostWorkTypeSignalErrorFull() instead")
    void workTypesPostWorkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesPostWorkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
