/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProposalWorkhourRowInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProposalWorkhourRowInputModel::OAIProposalWorkhourRowInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProposalWorkhourRowInputModel::OAIProposalWorkhourRowInputModel() {
    this->initializeModel();
}

OAIProposalWorkhourRowInputModel::~OAIProposalWorkhourRowInputModel() {}

void OAIProposalWorkhourRowInputModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_shown_on_proposal_isSet = false;
    m_is_shown_on_proposal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_proposal_isSet = false;
    m_proposal_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_work_type_isSet = false;
    m_work_type_isValid = false;
}

void OAIProposalWorkhourRowInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProposalWorkhourRowInputModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_shown_on_proposal_isValid = ::OpenAPI::fromJsonValue(m_is_shown_on_proposal, json[QString("isShownOnProposal")]);
    m_is_shown_on_proposal_isSet = !json[QString("isShownOnProposal")].isNull() && m_is_shown_on_proposal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_proposal_isValid = ::OpenAPI::fromJsonValue(m_proposal, json[QString("proposal")]);
    m_proposal_isSet = !json[QString("proposal")].isNull() && m_proposal_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_work_type_isValid = ::OpenAPI::fromJsonValue(m_work_type, json[QString("workType")]);
    m_work_type_isSet = !json[QString("workType")].isNull() && m_work_type_isValid;
}

QString OAIProposalWorkhourRowInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProposalWorkhourRowInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_shown_on_proposal_isSet) {
        obj.insert(QString("isShownOnProposal"), ::OpenAPI::toJsonValue(m_is_shown_on_proposal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_proposal.isSet()) {
        obj.insert(QString("proposal"), ::OpenAPI::toJsonValue(m_proposal));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_subtotal.isSet()) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_work_type.isSet()) {
        obj.insert(QString("workType"), ::OpenAPI::toJsonValue(m_work_type));
    }
    return obj;
}

QString OAIProposalWorkhourRowInputModel::getDescription() const {
    return m_description;
}
void OAIProposalWorkhourRowInputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProposalWorkhourRowInputModel::isIsShownOnProposal() const {
    return m_is_shown_on_proposal;
}
void OAIProposalWorkhourRowInputModel::setIsShownOnProposal(const bool &is_shown_on_proposal) {
    m_is_shown_on_proposal = is_shown_on_proposal;
    m_is_shown_on_proposal_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_is_shown_on_proposal_Set() const{
    return m_is_shown_on_proposal_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_is_shown_on_proposal_Valid() const{
    return m_is_shown_on_proposal_isValid;
}

QString OAIProposalWorkhourRowInputModel::getName() const {
    return m_name;
}
void OAIProposalWorkhourRowInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAISimpleInputModel OAIProposalWorkhourRowInputModel::getPhase() const {
    return m_phase;
}
void OAIProposalWorkhourRowInputModel::setPhase(const OAISimpleInputModel &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAISimpleInputRequiredModel OAIProposalWorkhourRowInputModel::getProposal() const {
    return m_proposal;
}
void OAIProposalWorkhourRowInputModel::setProposal(const OAISimpleInputRequiredModel &proposal) {
    m_proposal = proposal;
    m_proposal_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_proposal_Set() const{
    return m_proposal_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_proposal_Valid() const{
    return m_proposal_isValid;
}

double OAIProposalWorkhourRowInputModel::getQuantity() const {
    return m_quantity;
}
void OAIProposalWorkhourRowInputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIProposalWorkhourRowInputModel::getSortOrder() const {
    return m_sort_order;
}
void OAIProposalWorkhourRowInputModel::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAISimpleInputModel OAIProposalWorkhourRowInputModel::getSubtotal() const {
    return m_subtotal;
}
void OAIProposalWorkhourRowInputModel::setSubtotal(const OAISimpleInputModel &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

OAISimpleInputRequiredModel OAIProposalWorkhourRowInputModel::getWorkType() const {
    return m_work_type;
}
void OAIProposalWorkhourRowInputModel::setWorkType(const OAISimpleInputRequiredModel &work_type) {
    m_work_type = work_type;
    m_work_type_isSet = true;
}

bool OAIProposalWorkhourRowInputModel::is_work_type_Set() const{
    return m_work_type_isSet;
}

bool OAIProposalWorkhourRowInputModel::is_work_type_Valid() const{
    return m_work_type_isValid;
}

bool OAIProposalWorkhourRowInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shown_on_proposal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProposalWorkhourRowInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_proposal_isValid && m_quantity_isValid && m_work_type_isValid && true;
}

} // namespace OpenAPI
