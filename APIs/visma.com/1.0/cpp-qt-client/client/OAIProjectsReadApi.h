/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsReadApi_H
#define OAI_OAIProjectsReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeletedPhaseMemberOutputModel.h"
#include "OAIExceptionModel.h"
#include "OAIExpensesClass.h"
#include "OAIKeyValuePairOfStringAndSortDirection.h"
#include "OAIOvertimePriceModel.h"
#include "OAIPhaseMemberOutputModel.h"
#include "OAIPhaseModelWithHierarchyInfo.h"
#include "OAIPhaseOutputModel.h"
#include "OAIProductForProjectOutputModel.h"
#include "OAIProductPriceOutputModel.h"
#include "OAIProductType.h"
#include "OAIProjectBillingCustomerModel.h"
#include "OAIProjectCustomValueModel.h"
#include "OAIProjectForecastOutputModel.h"
#include "OAIProjectInvoiceSettingsOutputModel.h"
#include "OAIProjectKeywordModel.h"
#include "OAIProjectMemberCostExceptionOutputModel.h"
#include "OAIProjectOutputModel.h"
#include "OAIProjectProductOutputModel.h"
#include "OAIProjectSalesNoteOutputModel.h"
#include "OAIProjectWorkHourPriceOutputModel.h"
#include "OAIProjectWorkTypeModel.h"
#include "OAIProposalFeeRowOutputModel.h"
#include "OAIProposalOutputModel.h"
#include "OAIProposalSettingsOutputModel.h"
#include "OAIProposalSubtotalOutputModel.h"
#include "OAIProposalWorkhourRowOutputModel.h"
#include "OAISalesNoteOutputModel.h"
#include "OAISalesStatusHistoryOutputModel.h"
#include "OAITeamProductivityOutputModel.h"
#include "OAITravelExpenseTypeOutputModel.h"
#include "OAITravelPriceOutputModel.h"
#include "OAIWorkTypeOutputModel.h"
#include "OAIWorktypeForProjectOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsReadApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsReadApi(const int timeOut = 0);
    ~OAIProjectsReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void keywordsGetProjectKeywords(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void overtimePricesGetOvertimePricesForProject(const QString &project_guid);

    /**
    * @param[in]  deleted_since QDateTime [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_user_active bool [optional]
    */
    virtual void phaseMembersGetAllDeletedPhaseMembers(const ::OpenAPI::OptionalParam<QDateTime> &deleted_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_user_active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_user_active bool [optional]
    */
    virtual void phaseMembersGetAllPhaseMembers(const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_user_active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  phase_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  is_user_active bool [optional]
    */
    virtual void phaseMembersGetPhaseMembers(const QString &phase_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_user_active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void phasesGetPhase(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  code QString [optional]
    * @param[in]  project_guids QList<QString> [optional]
    */
    virtual void phasesGetPhases(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void phasesGetProjectPhases(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  customer_guids QList<QString> [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  project_keyword_guids QList<QString> [optional]
    * @param[in]  project_status_type_guids QList<QString> [optional]
    * @param[in]  sales_person_guids QList<QString> [optional]
    * @param[in]  project_owner_guids QList<QString> [optional]
    * @param[in]  business_unit_guids QList<QString> [optional]
    * @param[in]  customer_owner_guids QList<QString> [optional]
    * @param[in]  sales_status_type_guids QList<QString> [optional]
    * @param[in]  open_projects bool [optional]
    * @param[in]  project_member_user_guids QList<QString> [optional]
    */
    virtual void phasesGetRootPhases(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_keyword_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_person_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &open_projects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_member_user_guids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  from_pricelist_only bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  is_available bool [optional]
    * @param[in]  product_code QString [optional]
    * @param[in]  product_guids QList<QString> [optional]
    * @param[in]  is_volume_priced bool [optional]
    * @param[in]  product_category_guids QList<QString> [optional]
    * @param[in]  product_types QList<OAIProductType> [optional]
    */
    virtual void productPricesGetProductPricesForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &from_pricelist_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_available = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &product_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_volume_priced = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_category_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIProductType>> &product_types = ::OpenAPI::OptionalParam<QList<OAIProductType>>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  type OAIProductType [optional]
    * @param[in]  include_products_from_registry bool [optional]
    */
    virtual void productsGetSearchedProducts(const QString &project_guid, const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProductType> &type = ::OpenAPI::OptionalParam<OAIProductType>(), const ::OpenAPI::OptionalParam<bool> &include_products_from_registry = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void projectBillingCustomersGetWorkHourPricesForProject(const QString &project_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectCustomValuesGetProjectCustomValue(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  active bool [optional]
    * @param[in]  target QList<QString> [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void projectCustomValuesGetProjectCustomValues(const QString &project_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &target = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectForecastsGetForecast(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    */
    virtual void projectForecastsGetForecasts(const QString &project_guid, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectInvoiceSettingsGetProjectInvoiceSetting(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void projectInvoiceSettingsGetProjectInvoiceSettings(const QString &project_guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  user_guid QString [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<QString> &user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  include_products_from_registry bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  active bool [optional]
    */
    virtual void projectProductsGetProjectProducts(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &include_products_from_registry = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectWorkHourPricesGetProjectWorkHourPrice(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  from_pricelist_only bool [optional]
    * @param[in]  is_available bool [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void projectWorkHourPricesGetWorkHourPricesForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &from_pricelist_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_available = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  include_worktypes_from_registry bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  active bool [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void projectWorkTypesGetProjectWorktypes(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &include_worktypes_from_registry = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_billable bool [optional]
    * @param[in]  currency_guids QList<QString> [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  project_keyword_guids QList<QString> [optional]
    * @param[in]  project_status_type_guids QList<QString> [optional]
    * @param[in]  sales_person_guids QList<QString> [optional]
    * @param[in]  project_owner_guids QList<QString> [optional]
    * @param[in]  business_unit_guids QList<QString> [optional]
    * @param[in]  minimum_billable_amount double [optional]
    * @param[in]  customer_owner_guids QList<QString> [optional]
    * @param[in]  invoiceable_date QDateTime [optional]
    * @param[in]  market_segmentation_guids QList<QString> [optional]
    * @param[in]  sales_status_type_guids QList<QString> [optional]
    * @param[in]  is_closed bool [optional]
    * @param[in]  has_recurring_fees bool [optional]
    * @param[in]  company_currency_guids QList<QString> [optional]
    * @param[in]  project_member_user_guids QList<QString> [optional]
    * @param[in]  numbers QList<qint64> [optional]
    */
    virtual void projectsGetCustomerProjects(const QString &customer_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &currency_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_keyword_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_person_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &minimum_billable_amount = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &invoiceable_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_segmentation_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_recurring_fees = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &company_currency_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_member_user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint64>> &numbers = ::OpenAPI::OptionalParam<QList<qint64>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectsGetProject(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  currency_guid QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  is_billable bool [optional]
    * @param[in]  customer_guids QList<QString> [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  project_keyword_guids QList<QString> [optional]
    * @param[in]  project_status_type_guids QList<QString> [optional]
    * @param[in]  sales_person_guids QList<QString> [optional]
    * @param[in]  project_owner_guids QList<QString> [optional]
    * @param[in]  business_unit_guids QList<QString> [optional]
    * @param[in]  minimum_billable_amount double [optional]
    * @param[in]  customer_owner_guids QList<QString> [optional]
    * @param[in]  invoiceable_date QDateTime [optional]
    * @param[in]  market_segmentation_guids QList<QString> [optional]
    * @param[in]  sales_status_type_guids QList<QString> [optional]
    * @param[in]  is_closed bool [optional]
    * @param[in]  has_recurring_fees bool [optional]
    * @param[in]  company_currency_guids QList<QString> [optional]
    * @param[in]  project_member_user_guids QList<QString> [optional]
    * @param[in]  numbers QList<qint64> [optional]
    * @param[in]  internal bool [optional]
    */
    virtual void projectsGetProjects(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &currency_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_keyword_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_person_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &minimum_billable_amount = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &invoiceable_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_segmentation_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_recurring_fees = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &company_currency_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_member_user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint64>> &numbers = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<bool> &internal = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  customer_guids QList<QString> [optional]
    * @param[in]  currency_guids QList<QString> [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  project_keyword_guids QList<QString> [optional]
    * @param[in]  project_status_type_guids QList<QString> [optional]
    * @param[in]  sales_person_guids QList<QString> [optional]
    * @param[in]  project_owner_guids QList<QString> [optional]
    * @param[in]  business_unit_guids QList<QString> [optional]
    * @param[in]  minimum_billable_amount double [optional]
    * @param[in]  customer_owner_guids QList<QString> [optional]
    * @param[in]  invoiceable_date QDateTime [optional]
    * @param[in]  market_segmentation_guids QList<QString> [optional]
    * @param[in]  sales_status_type_guids QList<QString> [optional]
    * @param[in]  is_closed bool [optional]
    * @param[in]  has_recurring_fees bool [optional]
    * @param[in]  company_currency_guids QList<QString> [optional]
    * @param[in]  project_member_user_guids QList<QString> [optional]
    * @param[in]  numbers QList<qint64> [optional]
    */
    virtual void projectsGetSalesCases(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &currency_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_keyword_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_person_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &minimum_billable_amount = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &invoiceable_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_segmentation_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_status_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_recurring_fees = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &company_currency_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_member_user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint64>> &numbers = ::OpenAPI::OptionalParam<QList<qint64>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalFeesGetProposalFee(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void proposalFeesGetProposalFees(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  proposal_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void proposalFeesGetProposalFeesForProposal(const QString &proposal_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalSettingsGetProposalSettings(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalSubtotalsGetProposalSubtotal(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void proposalSubtotalsGetProposalSubtotals(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  proposal_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void proposalSubtotalsGetProposalSubtotalsForProposal(const QString &proposal_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void proposalWorkhoursGetProposalWorkHours(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  proposal_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void proposalWorkhoursGetProposalWorkHoursForProposal(const QString &proposal_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalWorkhoursGetProposalWorkhour(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalsGetProposal(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void proposalsGetProposals(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void proposalsGetProposalsForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void salesNotesGetAllCustomerSalesNotes(const QString &customer_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesNotesGetProjectSalesNote(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void salesNotesGetProjectSalesNotes(const QString &project_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void salesStatusHistoryGetSalesStatusHistory(const QString &project_guid);

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void teamProductivityGetTeamProductivity(const QString &project_guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  user_guid QString [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    */
    virtual void travelExpenseTypesGetSearchedTravelExpenseTypes(const QString &project_guid, const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  from_pricelist_only bool [optional]
    * @param[in]  expense_classes QList<OAIExpensesClass> [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    */
    virtual void travelPricesGetTravelPricesForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &from_pricelist_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIExpensesClass>> &expense_classes = ::OpenAPI::OptionalParam<QList<OAIExpensesClass>>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  phase_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  user_guid QString [optional]
    */
    virtual void workTypesGetPhaseWorkTypes(const QString &phase_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    */
    virtual void workTypesGetSearchedWorktypes(const QString &project_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void keywordsGetProjectKeywordsCallback(OAIHttpRequestWorker *worker);
    void overtimePricesGetOvertimePricesForProjectCallback(OAIHttpRequestWorker *worker);
    void phaseMembersGetAllDeletedPhaseMembersCallback(OAIHttpRequestWorker *worker);
    void phaseMembersGetAllPhaseMembersCallback(OAIHttpRequestWorker *worker);
    void phaseMembersGetPhaseMembersCallback(OAIHttpRequestWorker *worker);
    void phasesGetPhaseCallback(OAIHttpRequestWorker *worker);
    void phasesGetPhasesCallback(OAIHttpRequestWorker *worker);
    void phasesGetProjectPhasesCallback(OAIHttpRequestWorker *worker);
    void phasesGetRootPhasesCallback(OAIHttpRequestWorker *worker);
    void productPricesGetProductPricesForProjectCallback(OAIHttpRequestWorker *worker);
    void productsGetSearchedProductsCallback(OAIHttpRequestWorker *worker);
    void projectBillingCustomersGetWorkHourPricesForProjectCallback(OAIHttpRequestWorker *worker);
    void projectCustomValuesGetProjectCustomValueCallback(OAIHttpRequestWorker *worker);
    void projectCustomValuesGetProjectCustomValuesCallback(OAIHttpRequestWorker *worker);
    void projectForecastsGetForecastCallback(OAIHttpRequestWorker *worker);
    void projectForecastsGetForecastsCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsGetProjectInvoiceSettingCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsGetProjectInvoiceSettingsCallback(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectCallback(OAIHttpRequestWorker *worker);
    void projectProductsGetProjectProductsCallback(OAIHttpRequestWorker *worker);
    void projectWorkHourPricesGetProjectWorkHourPriceCallback(OAIHttpRequestWorker *worker);
    void projectWorkHourPricesGetWorkHourPricesForProjectCallback(OAIHttpRequestWorker *worker);
    void projectWorkTypesGetProjectWorktypesCallback(OAIHttpRequestWorker *worker);
    void projectsGetCustomerProjectsCallback(OAIHttpRequestWorker *worker);
    void projectsGetProjectCallback(OAIHttpRequestWorker *worker);
    void projectsGetProjectsCallback(OAIHttpRequestWorker *worker);
    void projectsGetSalesCasesCallback(OAIHttpRequestWorker *worker);
    void proposalFeesGetProposalFeeCallback(OAIHttpRequestWorker *worker);
    void proposalFeesGetProposalFeesCallback(OAIHttpRequestWorker *worker);
    void proposalFeesGetProposalFeesForProposalCallback(OAIHttpRequestWorker *worker);
    void proposalSettingsGetProposalSettingsCallback(OAIHttpRequestWorker *worker);
    void proposalSubtotalsGetProposalSubtotalCallback(OAIHttpRequestWorker *worker);
    void proposalSubtotalsGetProposalSubtotalsCallback(OAIHttpRequestWorker *worker);
    void proposalSubtotalsGetProposalSubtotalsForProposalCallback(OAIHttpRequestWorker *worker);
    void proposalWorkhoursGetProposalWorkHoursCallback(OAIHttpRequestWorker *worker);
    void proposalWorkhoursGetProposalWorkHoursForProposalCallback(OAIHttpRequestWorker *worker);
    void proposalWorkhoursGetProposalWorkhourCallback(OAIHttpRequestWorker *worker);
    void proposalsGetProposalCallback(OAIHttpRequestWorker *worker);
    void proposalsGetProposalsCallback(OAIHttpRequestWorker *worker);
    void proposalsGetProposalsForProjectCallback(OAIHttpRequestWorker *worker);
    void salesNotesGetAllCustomerSalesNotesCallback(OAIHttpRequestWorker *worker);
    void salesNotesGetProjectSalesNoteCallback(OAIHttpRequestWorker *worker);
    void salesNotesGetProjectSalesNotesCallback(OAIHttpRequestWorker *worker);
    void salesStatusHistoryGetSalesStatusHistoryCallback(OAIHttpRequestWorker *worker);
    void teamProductivityGetTeamProductivityCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypesGetSearchedTravelExpenseTypesCallback(OAIHttpRequestWorker *worker);
    void travelPricesGetTravelPricesForProjectCallback(OAIHttpRequestWorker *worker);
    void workTypesGetPhaseWorkTypesCallback(OAIHttpRequestWorker *worker);
    void workTypesGetSearchedWorktypesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void keywordsGetProjectKeywordsSignal(QList<OAIProjectKeywordModel> summary);
    void overtimePricesGetOvertimePricesForProjectSignal(QList<OAIOvertimePriceModel> summary);
    void phaseMembersGetAllDeletedPhaseMembersSignal(QList<OAIDeletedPhaseMemberOutputModel> summary);
    void phaseMembersGetAllPhaseMembersSignal(QList<OAIPhaseMemberOutputModel> summary);
    void phaseMembersGetPhaseMembersSignal(QList<OAIPhaseMemberOutputModel> summary);
    void phasesGetPhaseSignal(OAIPhaseOutputModel summary);
    void phasesGetPhasesSignal(QList<OAIPhaseOutputModel> summary);
    void phasesGetProjectPhasesSignal(QList<OAIPhaseModelWithHierarchyInfo> summary);
    void phasesGetRootPhasesSignal(QList<OAIPhaseOutputModel> summary);
    void productPricesGetProductPricesForProjectSignal(QList<OAIProductPriceOutputModel> summary);
    void productsGetSearchedProductsSignal(QList<OAIProductForProjectOutputModel> summary);
    void projectBillingCustomersGetWorkHourPricesForProjectSignal(QList<OAIProjectBillingCustomerModel> summary);
    void projectCustomValuesGetProjectCustomValueSignal(OAIProjectCustomValueModel summary);
    void projectCustomValuesGetProjectCustomValuesSignal(QList<OAIProjectCustomValueModel> summary);
    void projectForecastsGetForecastSignal(OAIProjectForecastOutputModel summary);
    void projectForecastsGetForecastsSignal(QList<OAIProjectForecastOutputModel> summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignal(OAIProjectInvoiceSettingsOutputModel summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignal(QList<OAIProjectInvoiceSettingsOutputModel> summary);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignal(QList<OAIProjectMemberCostExceptionOutputModel> summary);
    void projectProductsGetProjectProductsSignal(QList<OAIProjectProductOutputModel> summary);
    void projectWorkHourPricesGetProjectWorkHourPriceSignal(OAIProjectWorkHourPriceOutputModel summary);
    void projectWorkHourPricesGetWorkHourPricesForProjectSignal(QList<OAIProjectWorkHourPriceOutputModel> summary);
    void projectWorkTypesGetProjectWorktypesSignal(QList<OAIProjectWorkTypeModel> summary);
    void projectsGetCustomerProjectsSignal(QList<OAIProjectOutputModel> summary);
    void projectsGetProjectSignal(OAIProjectOutputModel summary);
    void projectsGetProjectsSignal(QList<OAIProjectOutputModel> summary);
    void projectsGetSalesCasesSignal(QList<OAIProjectOutputModel> summary);
    void proposalFeesGetProposalFeeSignal(OAIProposalFeeRowOutputModel summary);
    void proposalFeesGetProposalFeesSignal(QList<OAIProposalFeeRowOutputModel> summary);
    void proposalFeesGetProposalFeesForProposalSignal(QList<OAIProposalFeeRowOutputModel> summary);
    void proposalSettingsGetProposalSettingsSignal(OAIProposalSettingsOutputModel summary);
    void proposalSubtotalsGetProposalSubtotalSignal(OAIProposalSubtotalOutputModel summary);
    void proposalSubtotalsGetProposalSubtotalsSignal(QList<OAIProposalSubtotalOutputModel> summary);
    void proposalSubtotalsGetProposalSubtotalsForProposalSignal(QList<OAIProposalSubtotalOutputModel> summary);
    void proposalWorkhoursGetProposalWorkHoursSignal(QList<OAIProposalWorkhourRowOutputModel> summary);
    void proposalWorkhoursGetProposalWorkHoursForProposalSignal(QList<OAIProposalWorkhourRowOutputModel> summary);
    void proposalWorkhoursGetProposalWorkhourSignal(OAIProposalWorkhourRowOutputModel summary);
    void proposalsGetProposalSignal(OAIProposalOutputModel summary);
    void proposalsGetProposalsSignal(QList<OAIProposalOutputModel> summary);
    void proposalsGetProposalsForProjectSignal(QList<OAIProposalOutputModel> summary);
    void salesNotesGetAllCustomerSalesNotesSignal(QList<OAISalesNoteOutputModel> summary);
    void salesNotesGetProjectSalesNoteSignal(OAIProjectSalesNoteOutputModel summary);
    void salesNotesGetProjectSalesNotesSignal(QList<OAIProjectSalesNoteOutputModel> summary);
    void salesStatusHistoryGetSalesStatusHistorySignal(QList<OAISalesStatusHistoryOutputModel> summary);
    void teamProductivityGetTeamProductivitySignal(QList<OAITeamProductivityOutputModel> summary);
    void travelExpenseTypesGetSearchedTravelExpenseTypesSignal(QList<OAITravelExpenseTypeOutputModel> summary);
    void travelPricesGetTravelPricesForProjectSignal(QList<OAITravelPriceOutputModel> summary);
    void workTypesGetPhaseWorkTypesSignal(QList<OAIWorkTypeOutputModel> summary);
    void workTypesGetSearchedWorktypesSignal(QList<OAIWorktypeForProjectOutputModel> summary);


    void keywordsGetProjectKeywordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectKeywordModel> summary);
    void overtimePricesGetOvertimePricesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIOvertimePriceModel> summary);
    void phaseMembersGetAllDeletedPhaseMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeletedPhaseMemberOutputModel> summary);
    void phaseMembersGetAllPhaseMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseMemberOutputModel> summary);
    void phaseMembersGetPhaseMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseMemberOutputModel> summary);
    void phasesGetPhaseSignalFull(OAIHttpRequestWorker *worker, OAIPhaseOutputModel summary);
    void phasesGetPhasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseOutputModel> summary);
    void phasesGetProjectPhasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseModelWithHierarchyInfo> summary);
    void phasesGetRootPhasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseOutputModel> summary);
    void productPricesGetProductPricesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductPriceOutputModel> summary);
    void productsGetSearchedProductsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductForProjectOutputModel> summary);
    void projectBillingCustomersGetWorkHourPricesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectBillingCustomerModel> summary);
    void projectCustomValuesGetProjectCustomValueSignalFull(OAIHttpRequestWorker *worker, OAIProjectCustomValueModel summary);
    void projectCustomValuesGetProjectCustomValuesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCustomValueModel> summary);
    void projectForecastsGetForecastSignalFull(OAIHttpRequestWorker *worker, OAIProjectForecastOutputModel summary);
    void projectForecastsGetForecastsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectForecastOutputModel> summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalFull(OAIHttpRequestWorker *worker, OAIProjectInvoiceSettingsOutputModel summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectInvoiceSettingsOutputModel> summary);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectMemberCostExceptionOutputModel> summary);
    void projectProductsGetProjectProductsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectProductOutputModel> summary);
    void projectWorkHourPricesGetProjectWorkHourPriceSignalFull(OAIHttpRequestWorker *worker, OAIProjectWorkHourPriceOutputModel summary);
    void projectWorkHourPricesGetWorkHourPricesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectWorkHourPriceOutputModel> summary);
    void projectWorkTypesGetProjectWorktypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectWorkTypeModel> summary);
    void projectsGetCustomerProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectOutputModel> summary);
    void projectsGetProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectOutputModel summary);
    void projectsGetProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectOutputModel> summary);
    void projectsGetSalesCasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectOutputModel> summary);
    void proposalFeesGetProposalFeeSignalFull(OAIHttpRequestWorker *worker, OAIProposalFeeRowOutputModel summary);
    void proposalFeesGetProposalFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalFeeRowOutputModel> summary);
    void proposalFeesGetProposalFeesForProposalSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalFeeRowOutputModel> summary);
    void proposalSettingsGetProposalSettingsSignalFull(OAIHttpRequestWorker *worker, OAIProposalSettingsOutputModel summary);
    void proposalSubtotalsGetProposalSubtotalSignalFull(OAIHttpRequestWorker *worker, OAIProposalSubtotalOutputModel summary);
    void proposalSubtotalsGetProposalSubtotalsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalSubtotalOutputModel> summary);
    void proposalSubtotalsGetProposalSubtotalsForProposalSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalSubtotalOutputModel> summary);
    void proposalWorkhoursGetProposalWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalWorkhourRowOutputModel> summary);
    void proposalWorkhoursGetProposalWorkHoursForProposalSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalWorkhourRowOutputModel> summary);
    void proposalWorkhoursGetProposalWorkhourSignalFull(OAIHttpRequestWorker *worker, OAIProposalWorkhourRowOutputModel summary);
    void proposalsGetProposalSignalFull(OAIHttpRequestWorker *worker, OAIProposalOutputModel summary);
    void proposalsGetProposalsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalOutputModel> summary);
    void proposalsGetProposalsForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalOutputModel> summary);
    void salesNotesGetAllCustomerSalesNotesSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesNoteOutputModel> summary);
    void salesNotesGetProjectSalesNoteSignalFull(OAIHttpRequestWorker *worker, OAIProjectSalesNoteOutputModel summary);
    void salesNotesGetProjectSalesNotesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectSalesNoteOutputModel> summary);
    void salesStatusHistoryGetSalesStatusHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAISalesStatusHistoryOutputModel> summary);
    void teamProductivityGetTeamProductivitySignalFull(OAIHttpRequestWorker *worker, QList<OAITeamProductivityOutputModel> summary);
    void travelExpenseTypesGetSearchedTravelExpenseTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelExpenseTypeOutputModel> summary);
    void travelPricesGetTravelPricesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelPriceOutputModel> summary);
    void workTypesGetPhaseWorkTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkTypeOutputModel> summary);
    void workTypesGetSearchedWorktypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorktypeForProjectOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use keywordsGetProjectKeywordsSignalError() instead")
    void keywordsGetProjectKeywordsSignalE(QList<OAIProjectKeywordModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetProjectKeywordsSignalError(QList<OAIProjectKeywordModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimePricesGetOvertimePricesForProjectSignalError() instead")
    void overtimePricesGetOvertimePricesForProjectSignalE(QList<OAIOvertimePriceModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimePricesGetOvertimePricesForProjectSignalError(QList<OAIOvertimePriceModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersGetAllDeletedPhaseMembersSignalError() instead")
    void phaseMembersGetAllDeletedPhaseMembersSignalE(QList<OAIDeletedPhaseMemberOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersGetAllDeletedPhaseMembersSignalError(QList<OAIDeletedPhaseMemberOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersGetAllPhaseMembersSignalError() instead")
    void phaseMembersGetAllPhaseMembersSignalE(QList<OAIPhaseMemberOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersGetAllPhaseMembersSignalError(QList<OAIPhaseMemberOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersGetPhaseMembersSignalError() instead")
    void phaseMembersGetPhaseMembersSignalE(QList<OAIPhaseMemberOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersGetPhaseMembersSignalError(QList<OAIPhaseMemberOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetPhaseSignalError() instead")
    void phasesGetPhaseSignalE(OAIPhaseOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetPhaseSignalError(OAIPhaseOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetPhasesSignalError() instead")
    void phasesGetPhasesSignalE(QList<OAIPhaseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetPhasesSignalError(QList<OAIPhaseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetProjectPhasesSignalError() instead")
    void phasesGetProjectPhasesSignalE(QList<OAIPhaseModelWithHierarchyInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetProjectPhasesSignalError(QList<OAIPhaseModelWithHierarchyInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetRootPhasesSignalError() instead")
    void phasesGetRootPhasesSignalE(QList<OAIPhaseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetRootPhasesSignalError(QList<OAIPhaseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPricesGetProductPricesForProjectSignalError() instead")
    void productPricesGetProductPricesForProjectSignalE(QList<OAIProductPriceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPricesGetProductPricesForProjectSignalError(QList<OAIProductPriceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetSearchedProductsSignalError() instead")
    void productsGetSearchedProductsSignalE(QList<OAIProductForProjectOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSearchedProductsSignalError(QList<OAIProductForProjectOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersGetWorkHourPricesForProjectSignalError() instead")
    void projectBillingCustomersGetWorkHourPricesForProjectSignalE(QList<OAIProjectBillingCustomerModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersGetWorkHourPricesForProjectSignalError(QList<OAIProjectBillingCustomerModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesGetProjectCustomValueSignalError() instead")
    void projectCustomValuesGetProjectCustomValueSignalE(OAIProjectCustomValueModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesGetProjectCustomValueSignalError(OAIProjectCustomValueModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesGetProjectCustomValuesSignalError() instead")
    void projectCustomValuesGetProjectCustomValuesSignalE(QList<OAIProjectCustomValueModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesGetProjectCustomValuesSignalError(QList<OAIProjectCustomValueModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsGetForecastSignalError() instead")
    void projectForecastsGetForecastSignalE(OAIProjectForecastOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsGetForecastSignalError(OAIProjectForecastOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsGetForecastsSignalError() instead")
    void projectForecastsGetForecastsSignalE(QList<OAIProjectForecastOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsGetForecastsSignalError(QList<OAIProjectForecastOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingSignalError() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalE(OAIProjectInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalError(OAIProjectInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingsSignalError() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalE(QList<OAIProjectInvoiceSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalError(QList<OAIProjectInvoiceSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalError() instead")
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalE(QList<OAIProjectMemberCostExceptionOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalError(QList<OAIProjectMemberCostExceptionOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsGetProjectProductsSignalError() instead")
    void projectProductsGetProjectProductsSignalE(QList<OAIProjectProductOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsGetProjectProductsSignalError(QList<OAIProjectProductOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesGetProjectWorkHourPriceSignalError() instead")
    void projectWorkHourPricesGetProjectWorkHourPriceSignalE(OAIProjectWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesGetProjectWorkHourPriceSignalError(OAIProjectWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesGetWorkHourPricesForProjectSignalError() instead")
    void projectWorkHourPricesGetWorkHourPricesForProjectSignalE(QList<OAIProjectWorkHourPriceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesGetWorkHourPricesForProjectSignalError(QList<OAIProjectWorkHourPriceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesGetProjectWorktypesSignalError() instead")
    void projectWorkTypesGetProjectWorktypesSignalE(QList<OAIProjectWorkTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesGetProjectWorktypesSignalError(QList<OAIProjectWorkTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetCustomerProjectsSignalError() instead")
    void projectsGetCustomerProjectsSignalE(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetCustomerProjectsSignalError(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetProjectSignalError() instead")
    void projectsGetProjectSignalE(OAIProjectOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetProjectSignalError(OAIProjectOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetProjectsSignalError() instead")
    void projectsGetProjectsSignalE(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetProjectsSignalError(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSalesCasesSignalError() instead")
    void projectsGetSalesCasesSignalE(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSalesCasesSignalError(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesGetProposalFeeSignalError() instead")
    void proposalFeesGetProposalFeeSignalE(OAIProposalFeeRowOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesGetProposalFeeSignalError(OAIProposalFeeRowOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesGetProposalFeesSignalError() instead")
    void proposalFeesGetProposalFeesSignalE(QList<OAIProposalFeeRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesGetProposalFeesSignalError(QList<OAIProposalFeeRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesGetProposalFeesForProposalSignalError() instead")
    void proposalFeesGetProposalFeesForProposalSignalE(QList<OAIProposalFeeRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesGetProposalFeesForProposalSignalError(QList<OAIProposalFeeRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSettingsGetProposalSettingsSignalError() instead")
    void proposalSettingsGetProposalSettingsSignalE(OAIProposalSettingsOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSettingsGetProposalSettingsSignalError(OAIProposalSettingsOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsGetProposalSubtotalSignalError() instead")
    void proposalSubtotalsGetProposalSubtotalSignalE(OAIProposalSubtotalOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsGetProposalSubtotalSignalError(OAIProposalSubtotalOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsGetProposalSubtotalsSignalError() instead")
    void proposalSubtotalsGetProposalSubtotalsSignalE(QList<OAIProposalSubtotalOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsGetProposalSubtotalsSignalError(QList<OAIProposalSubtotalOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsGetProposalSubtotalsForProposalSignalError() instead")
    void proposalSubtotalsGetProposalSubtotalsForProposalSignalE(QList<OAIProposalSubtotalOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsGetProposalSubtotalsForProposalSignalError(QList<OAIProposalSubtotalOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursGetProposalWorkHoursSignalError() instead")
    void proposalWorkhoursGetProposalWorkHoursSignalE(QList<OAIProposalWorkhourRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursGetProposalWorkHoursSignalError(QList<OAIProposalWorkhourRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursGetProposalWorkHoursForProposalSignalError() instead")
    void proposalWorkhoursGetProposalWorkHoursForProposalSignalE(QList<OAIProposalWorkhourRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursGetProposalWorkHoursForProposalSignalError(QList<OAIProposalWorkhourRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursGetProposalWorkhourSignalError() instead")
    void proposalWorkhoursGetProposalWorkhourSignalE(OAIProposalWorkhourRowOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursGetProposalWorkhourSignalError(OAIProposalWorkhourRowOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsGetProposalSignalError() instead")
    void proposalsGetProposalSignalE(OAIProposalOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsGetProposalSignalError(OAIProposalOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsGetProposalsSignalError() instead")
    void proposalsGetProposalsSignalE(QList<OAIProposalOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsGetProposalsSignalError(QList<OAIProposalOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsGetProposalsForProjectSignalError() instead")
    void proposalsGetProposalsForProjectSignalE(QList<OAIProposalOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsGetProposalsForProjectSignalError(QList<OAIProposalOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetAllCustomerSalesNotesSignalError() instead")
    void salesNotesGetAllCustomerSalesNotesSignalE(QList<OAISalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetAllCustomerSalesNotesSignalError(QList<OAISalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetProjectSalesNoteSignalError() instead")
    void salesNotesGetProjectSalesNoteSignalE(OAIProjectSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetProjectSalesNoteSignalError(OAIProjectSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetProjectSalesNotesSignalError() instead")
    void salesNotesGetProjectSalesNotesSignalE(QList<OAIProjectSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetProjectSalesNotesSignalError(QList<OAIProjectSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusHistoryGetSalesStatusHistorySignalError() instead")
    void salesStatusHistoryGetSalesStatusHistorySignalE(QList<OAISalesStatusHistoryOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusHistoryGetSalesStatusHistorySignalError(QList<OAISalesStatusHistoryOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamProductivityGetTeamProductivitySignalError() instead")
    void teamProductivityGetTeamProductivitySignalE(QList<OAITeamProductivityOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamProductivityGetTeamProductivitySignalError(QList<OAITeamProductivityOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesGetSearchedTravelExpenseTypesSignalError() instead")
    void travelExpenseTypesGetSearchedTravelExpenseTypesSignalE(QList<OAITravelExpenseTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesGetSearchedTravelExpenseTypesSignalError(QList<OAITravelExpenseTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelPricesGetTravelPricesForProjectSignalError() instead")
    void travelPricesGetTravelPricesForProjectSignalE(QList<OAITravelPriceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelPricesGetTravelPricesForProjectSignalError(QList<OAITravelPriceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetPhaseWorkTypesSignalError() instead")
    void workTypesGetPhaseWorkTypesSignalE(QList<OAIWorkTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetPhaseWorkTypesSignalError(QList<OAIWorkTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetSearchedWorktypesSignalError() instead")
    void workTypesGetSearchedWorktypesSignalE(QList<OAIWorktypeForProjectOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetSearchedWorktypesSignalError(QList<OAIWorktypeForProjectOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use keywordsGetProjectKeywordsSignalErrorFull() instead")
    void keywordsGetProjectKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetProjectKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimePricesGetOvertimePricesForProjectSignalErrorFull() instead")
    void overtimePricesGetOvertimePricesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimePricesGetOvertimePricesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersGetAllDeletedPhaseMembersSignalErrorFull() instead")
    void phaseMembersGetAllDeletedPhaseMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersGetAllDeletedPhaseMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersGetAllPhaseMembersSignalErrorFull() instead")
    void phaseMembersGetAllPhaseMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersGetAllPhaseMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersGetPhaseMembersSignalErrorFull() instead")
    void phaseMembersGetPhaseMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersGetPhaseMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetPhaseSignalErrorFull() instead")
    void phasesGetPhaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetPhaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetPhasesSignalErrorFull() instead")
    void phasesGetPhasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetPhasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetProjectPhasesSignalErrorFull() instead")
    void phasesGetProjectPhasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetProjectPhasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesGetRootPhasesSignalErrorFull() instead")
    void phasesGetRootPhasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesGetRootPhasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPricesGetProductPricesForProjectSignalErrorFull() instead")
    void productPricesGetProductPricesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPricesGetProductPricesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetSearchedProductsSignalErrorFull() instead")
    void productsGetSearchedProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSearchedProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersGetWorkHourPricesForProjectSignalErrorFull() instead")
    void projectBillingCustomersGetWorkHourPricesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersGetWorkHourPricesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesGetProjectCustomValueSignalErrorFull() instead")
    void projectCustomValuesGetProjectCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesGetProjectCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesGetProjectCustomValuesSignalErrorFull() instead")
    void projectCustomValuesGetProjectCustomValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesGetProjectCustomValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsGetForecastSignalErrorFull() instead")
    void projectForecastsGetForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsGetForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsGetForecastsSignalErrorFull() instead")
    void projectForecastsGetForecastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsGetForecastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingSignalErrorFull() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingsSignalErrorFull() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalErrorFull() instead")
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsGetProjectProductsSignalErrorFull() instead")
    void projectProductsGetProjectProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsGetProjectProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesGetProjectWorkHourPriceSignalErrorFull() instead")
    void projectWorkHourPricesGetProjectWorkHourPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesGetProjectWorkHourPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesGetWorkHourPricesForProjectSignalErrorFull() instead")
    void projectWorkHourPricesGetWorkHourPricesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesGetWorkHourPricesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesGetProjectWorktypesSignalErrorFull() instead")
    void projectWorkTypesGetProjectWorktypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesGetProjectWorktypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetCustomerProjectsSignalErrorFull() instead")
    void projectsGetCustomerProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetCustomerProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetProjectSignalErrorFull() instead")
    void projectsGetProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetProjectsSignalErrorFull() instead")
    void projectsGetProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSalesCasesSignalErrorFull() instead")
    void projectsGetSalesCasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSalesCasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesGetProposalFeeSignalErrorFull() instead")
    void proposalFeesGetProposalFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesGetProposalFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesGetProposalFeesSignalErrorFull() instead")
    void proposalFeesGetProposalFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesGetProposalFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesGetProposalFeesForProposalSignalErrorFull() instead")
    void proposalFeesGetProposalFeesForProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesGetProposalFeesForProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSettingsGetProposalSettingsSignalErrorFull() instead")
    void proposalSettingsGetProposalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSettingsGetProposalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsGetProposalSubtotalSignalErrorFull() instead")
    void proposalSubtotalsGetProposalSubtotalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsGetProposalSubtotalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsGetProposalSubtotalsSignalErrorFull() instead")
    void proposalSubtotalsGetProposalSubtotalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsGetProposalSubtotalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsGetProposalSubtotalsForProposalSignalErrorFull() instead")
    void proposalSubtotalsGetProposalSubtotalsForProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsGetProposalSubtotalsForProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursGetProposalWorkHoursSignalErrorFull() instead")
    void proposalWorkhoursGetProposalWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursGetProposalWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursGetProposalWorkHoursForProposalSignalErrorFull() instead")
    void proposalWorkhoursGetProposalWorkHoursForProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursGetProposalWorkHoursForProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursGetProposalWorkhourSignalErrorFull() instead")
    void proposalWorkhoursGetProposalWorkhourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursGetProposalWorkhourSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsGetProposalSignalErrorFull() instead")
    void proposalsGetProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsGetProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsGetProposalsSignalErrorFull() instead")
    void proposalsGetProposalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsGetProposalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsGetProposalsForProjectSignalErrorFull() instead")
    void proposalsGetProposalsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsGetProposalsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetAllCustomerSalesNotesSignalErrorFull() instead")
    void salesNotesGetAllCustomerSalesNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetAllCustomerSalesNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetProjectSalesNoteSignalErrorFull() instead")
    void salesNotesGetProjectSalesNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetProjectSalesNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetProjectSalesNotesSignalErrorFull() instead")
    void salesNotesGetProjectSalesNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetProjectSalesNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusHistoryGetSalesStatusHistorySignalErrorFull() instead")
    void salesStatusHistoryGetSalesStatusHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusHistoryGetSalesStatusHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamProductivityGetTeamProductivitySignalErrorFull() instead")
    void teamProductivityGetTeamProductivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamProductivityGetTeamProductivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesGetSearchedTravelExpenseTypesSignalErrorFull() instead")
    void travelExpenseTypesGetSearchedTravelExpenseTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesGetSearchedTravelExpenseTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelPricesGetTravelPricesForProjectSignalErrorFull() instead")
    void travelPricesGetTravelPricesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelPricesGetTravelPricesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetPhaseWorkTypesSignalErrorFull() instead")
    void workTypesGetPhaseWorkTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetPhaseWorkTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetSearchedWorktypesSignalErrorFull() instead")
    void workTypesGetSearchedWorktypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetSearchedWorktypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
