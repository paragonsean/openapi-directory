/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReimbursedProjectFeeOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReimbursedProjectFeeOutputModel::OAIReimbursedProjectFeeOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReimbursedProjectFeeOutputModel::OAIReimbursedProjectFeeOutputModel() {
    this->initializeModel();
}

OAIReimbursedProjectFeeOutputModel::~OAIReimbursedProjectFeeOutputModel() {}

void OAIReimbursedProjectFeeOutputModel::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_invoice_guid_isSet = false;
    m_invoice_guid_isValid = false;

    m_invoice_quantity_isSet = false;
    m_invoice_quantity_isValid = false;

    m_invoice_row_description_isSet = false;
    m_invoice_row_description_isValid = false;

    m_invoice_row_guid_isSet = false;
    m_invoice_row_guid_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIReimbursedProjectFeeOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReimbursedProjectFeeOutputModel::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_invoice_guid_isValid = ::OpenAPI::fromJsonValue(m_invoice_guid, json[QString("invoiceGuid")]);
    m_invoice_guid_isSet = !json[QString("invoiceGuid")].isNull() && m_invoice_guid_isValid;

    m_invoice_quantity_isValid = ::OpenAPI::fromJsonValue(m_invoice_quantity, json[QString("invoiceQuantity")]);
    m_invoice_quantity_isSet = !json[QString("invoiceQuantity")].isNull() && m_invoice_quantity_isValid;

    m_invoice_row_description_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_description, json[QString("invoiceRowDescription")]);
    m_invoice_row_description_isSet = !json[QString("invoiceRowDescription")].isNull() && m_invoice_row_description_isValid;

    m_invoice_row_guid_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_guid, json[QString("invoiceRowGuid")]);
    m_invoice_row_guid_isSet = !json[QString("invoiceRowGuid")].isNull() && m_invoice_row_guid_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReimbursedProjectFeeOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_invoice_guid_isSet) {
        obj.insert(QString("invoiceGuid"), ::OpenAPI::toJsonValue(m_invoice_guid));
    }
    if (m_invoice_quantity_isSet) {
        obj.insert(QString("invoiceQuantity"), ::OpenAPI::toJsonValue(m_invoice_quantity));
    }
    if (m_invoice_row_description_isSet) {
        obj.insert(QString("invoiceRowDescription"), ::OpenAPI::toJsonValue(m_invoice_row_description));
    }
    if (m_invoice_row_guid_isSet) {
        obj.insert(QString("invoiceRowGuid"), ::OpenAPI::toJsonValue(m_invoice_row_guid));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_type.isSet()) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIReimbursedProjectFeeOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIReimbursedProjectFeeOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIReimbursedProjectFeeOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIReimbursedProjectFeeOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getDescription() const {
    return m_description;
}
void OAIReimbursedProjectFeeOutputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIReimbursedProjectFeeOutputModel::getEventDate() const {
    return m_event_date;
}
void OAIReimbursedProjectFeeOutputModel::setEventDate(const QDate &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getGuid() const {
    return m_guid;
}
void OAIReimbursedProjectFeeOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getInvoiceGuid() const {
    return m_invoice_guid;
}
void OAIReimbursedProjectFeeOutputModel::setInvoiceGuid(const QString &invoice_guid) {
    m_invoice_guid = invoice_guid;
    m_invoice_guid_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_guid_Set() const{
    return m_invoice_guid_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_guid_Valid() const{
    return m_invoice_guid_isValid;
}

double OAIReimbursedProjectFeeOutputModel::getInvoiceQuantity() const {
    return m_invoice_quantity;
}
void OAIReimbursedProjectFeeOutputModel::setInvoiceQuantity(const double &invoice_quantity) {
    m_invoice_quantity = invoice_quantity;
    m_invoice_quantity_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_quantity_Set() const{
    return m_invoice_quantity_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_quantity_Valid() const{
    return m_invoice_quantity_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getInvoiceRowDescription() const {
    return m_invoice_row_description;
}
void OAIReimbursedProjectFeeOutputModel::setInvoiceRowDescription(const QString &invoice_row_description) {
    m_invoice_row_description = invoice_row_description;
    m_invoice_row_description_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_row_description_Set() const{
    return m_invoice_row_description_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_row_description_Valid() const{
    return m_invoice_row_description_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getInvoiceRowGuid() const {
    return m_invoice_row_guid;
}
void OAIReimbursedProjectFeeOutputModel::setInvoiceRowGuid(const QString &invoice_row_guid) {
    m_invoice_row_guid = invoice_row_guid;
    m_invoice_row_guid_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_row_guid_Set() const{
    return m_invoice_row_guid_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_invoice_row_guid_Valid() const{
    return m_invoice_row_guid_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIReimbursedProjectFeeOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIReimbursedProjectFeeOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIReimbursedProjectFeeOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIReimbursedProjectFeeOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIReimbursedProjectFeeOutputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIReimbursedProjectFeeOutputModel::getName() const {
    return m_name;
}
void OAIReimbursedProjectFeeOutputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIModelWithName OAIReimbursedProjectFeeOutputModel::getPhase() const {
    return m_phase;
}
void OAIReimbursedProjectFeeOutputModel::setPhase(const OAIModelWithName &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAIModelWithName OAIReimbursedProjectFeeOutputModel::getProduct() const {
    return m_product;
}
void OAIReimbursedProjectFeeOutputModel::setProduct(const OAIModelWithName &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_product_Set() const{
    return m_product_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_product_Valid() const{
    return m_product_isValid;
}

OAIProductType OAIReimbursedProjectFeeOutputModel::getProductType() const {
    return m_product_type;
}
void OAIReimbursedProjectFeeOutputModel::setProductType(const OAIProductType &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_product_type_Valid() const{
    return m_product_type_isValid;
}

OAIReimbursedProjectFeeProjectSubModel OAIReimbursedProjectFeeOutputModel::getProject() const {
    return m_project;
}
void OAIReimbursedProjectFeeOutputModel::setProject(const OAIReimbursedProjectFeeProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

double OAIReimbursedProjectFeeOutputModel::getQuantity() const {
    return m_quantity;
}
void OAIReimbursedProjectFeeOutputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIMoneyOutputModel OAIReimbursedProjectFeeOutputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIReimbursedProjectFeeOutputModel::setUnitCost(const OAIMoneyOutputModel &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyOutputModel OAIReimbursedProjectFeeOutputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIReimbursedProjectFeeOutputModel::setUnitPrice(const OAIMoneyOutputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIModelWithName OAIReimbursedProjectFeeOutputModel::getUser() const {
    return m_user;
}
void OAIReimbursedProjectFeeOutputModel::setUser(const OAIModelWithName &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

double OAIReimbursedProjectFeeOutputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIReimbursedProjectFeeOutputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIReimbursedProjectFeeOutputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIReimbursedProjectFeeOutputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIReimbursedProjectFeeOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReimbursedProjectFeeOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
