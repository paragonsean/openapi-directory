/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIErrorModel.h
 *
 * 
 */

#ifndef OAIErrorModel_H
#define OAIErrorModel_H

#include <QJsonObject>

#include "OAIExceptionDetailModel.h"
#include "OAIExceptionTypeEnum.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExceptionDetailModel;

class OAIErrorModel : public OAIObject {
public:
    OAIErrorModel();
    OAIErrorModel(QString json);
    ~OAIErrorModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIExceptionDetailModel> getDetails() const;
    void setDetails(const QList<OAIExceptionDetailModel> &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    qint32 getHttpStatusCode() const;
    void setHttpStatusCode(const qint32 &http_status_code);
    bool is_http_status_code_Set() const;
    bool is_http_status_code_Valid() const;

    QString getStack() const;
    void setStack(const QString &stack);
    bool is_stack_Set() const;
    bool is_stack_Valid() const;

    OAIExceptionTypeEnum getType() const;
    void setType(const OAIExceptionTypeEnum &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIExceptionDetailModel> m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    qint32 m_http_status_code;
    bool m_http_status_code_isSet;
    bool m_http_status_code_isValid;

    QString m_stack;
    bool m_stack_isSet;
    bool m_stack_isValid;

    OAIExceptionTypeEnum m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIErrorModel)

#endif // OAIErrorModel_H
