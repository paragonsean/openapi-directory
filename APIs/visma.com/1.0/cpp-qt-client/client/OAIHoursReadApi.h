/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHoursReadApi_H
#define OAI_OAIHoursReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillableStatusType.h"
#include "OAIDeletedWorkHourModel.h"
#include "OAIExceptionModel.h"
#include "OAITimeEntryModel.h"
#include "OAIWorkHourOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHoursReadApi : public QObject {
    Q_OBJECT

public:
    OAIHoursReadApi(const int timeOut = 0);
    ~OAIHoursReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  first_row qint32 [optional]
    * @param[in]  phase_guid QList<QString> [optional]
    * @param[in]  time_entry_type_guid QList<QString> [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void timeEntriesGetTimeEntries(const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &phase_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &time_entry_type_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  phase_guid QList<QString> [optional]
    * @param[in]  time_entry_type_guid QList<QString> [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void timeEntriesGetTimeEntriesForUser(const QString &user_guid, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &phase_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &time_entry_type_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void timeEntriesGetTimeEntry(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  user_guids QList<QString> [optional]
    * @param[in]  deleted_since QDateTime [optional]
    */
    virtual void workHoursGetDeletedWorkHours(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &deleted_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  is_billable bool [optional]
    * @param[in]  is_billed bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void workHoursGetProjectWorkHours(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_billed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void workHoursGetWorkHour(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  billable_status OAIBillableStatusType [optional]
    * @param[in]  event_date_start QDate [optional]
    * @param[in]  event_date_end QDate [optional]
    */
    virtual void workHoursGetWorkHours(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIBillableStatusType> &billable_status = ::OpenAPI::OptionalParam<OAIBillableStatusType>(), const ::OpenAPI::OptionalParam<QDate> &event_date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &event_date_end = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  phase_guid QList<QString> [optional]
    * @param[in]  work_type_guid QList<QString> [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void workHoursGetWorkHoursForUser(const QString &user_guid, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &phase_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &work_type_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void timeEntriesGetTimeEntriesCallback(OAIHttpRequestWorker *worker);
    void timeEntriesGetTimeEntriesForUserCallback(OAIHttpRequestWorker *worker);
    void timeEntriesGetTimeEntryCallback(OAIHttpRequestWorker *worker);
    void workHoursGetDeletedWorkHoursCallback(OAIHttpRequestWorker *worker);
    void workHoursGetProjectWorkHoursCallback(OAIHttpRequestWorker *worker);
    void workHoursGetWorkHourCallback(OAIHttpRequestWorker *worker);
    void workHoursGetWorkHoursCallback(OAIHttpRequestWorker *worker);
    void workHoursGetWorkHoursForUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void timeEntriesGetTimeEntriesSignal(QList<OAITimeEntryModel> summary);
    void timeEntriesGetTimeEntriesForUserSignal(QList<OAITimeEntryModel> summary);
    void timeEntriesGetTimeEntrySignal(OAITimeEntryModel summary);
    void workHoursGetDeletedWorkHoursSignal(QList<OAIDeletedWorkHourModel> summary);
    void workHoursGetProjectWorkHoursSignal(QList<OAIWorkHourOutputModel> summary);
    void workHoursGetWorkHourSignal(OAIWorkHourOutputModel summary);
    void workHoursGetWorkHoursSignal(QList<OAIWorkHourOutputModel> summary);
    void workHoursGetWorkHoursForUserSignal(QList<OAIWorkHourOutputModel> summary);


    void timeEntriesGetTimeEntriesSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeEntryModel> summary);
    void timeEntriesGetTimeEntriesForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeEntryModel> summary);
    void timeEntriesGetTimeEntrySignalFull(OAIHttpRequestWorker *worker, OAITimeEntryModel summary);
    void workHoursGetDeletedWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeletedWorkHourModel> summary);
    void workHoursGetProjectWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkHourOutputModel> summary);
    void workHoursGetWorkHourSignalFull(OAIHttpRequestWorker *worker, OAIWorkHourOutputModel summary);
    void workHoursGetWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkHourOutputModel> summary);
    void workHoursGetWorkHoursForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkHourOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use timeEntriesGetTimeEntriesSignalError() instead")
    void timeEntriesGetTimeEntriesSignalE(QList<OAITimeEntryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntriesGetTimeEntriesSignalError(QList<OAITimeEntryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntriesGetTimeEntriesForUserSignalError() instead")
    void timeEntriesGetTimeEntriesForUserSignalE(QList<OAITimeEntryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntriesGetTimeEntriesForUserSignalError(QList<OAITimeEntryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntriesGetTimeEntrySignalError() instead")
    void timeEntriesGetTimeEntrySignalE(OAITimeEntryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntriesGetTimeEntrySignalError(OAITimeEntryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetDeletedWorkHoursSignalError() instead")
    void workHoursGetDeletedWorkHoursSignalE(QList<OAIDeletedWorkHourModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetDeletedWorkHoursSignalError(QList<OAIDeletedWorkHourModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetProjectWorkHoursSignalError() instead")
    void workHoursGetProjectWorkHoursSignalE(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetProjectWorkHoursSignalError(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetWorkHourSignalError() instead")
    void workHoursGetWorkHourSignalE(OAIWorkHourOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetWorkHourSignalError(OAIWorkHourOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetWorkHoursSignalError() instead")
    void workHoursGetWorkHoursSignalE(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetWorkHoursSignalError(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetWorkHoursForUserSignalError() instead")
    void workHoursGetWorkHoursForUserSignalE(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetWorkHoursForUserSignalError(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use timeEntriesGetTimeEntriesSignalErrorFull() instead")
    void timeEntriesGetTimeEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntriesGetTimeEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntriesGetTimeEntriesForUserSignalErrorFull() instead")
    void timeEntriesGetTimeEntriesForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntriesGetTimeEntriesForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntriesGetTimeEntrySignalErrorFull() instead")
    void timeEntriesGetTimeEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntriesGetTimeEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetDeletedWorkHoursSignalErrorFull() instead")
    void workHoursGetDeletedWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetDeletedWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetProjectWorkHoursSignalErrorFull() instead")
    void workHoursGetProjectWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetProjectWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetWorkHourSignalErrorFull() instead")
    void workHoursGetWorkHourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetWorkHourSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetWorkHoursSignalErrorFull() instead")
    void workHoursGetWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetWorkHoursForUserSignalErrorFull() instead")
    void workHoursGetWorkHoursForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetWorkHoursForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
