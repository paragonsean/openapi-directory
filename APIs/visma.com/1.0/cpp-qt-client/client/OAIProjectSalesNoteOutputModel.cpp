/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSalesNoteOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSalesNoteOutputModel::OAIProjectSalesNoteOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSalesNoteOutputModel::OAIProjectSalesNoteOutputModel() {
    this->initializeModel();
}

OAIProjectSalesNoteOutputModel::~OAIProjectSalesNoteOutputModel() {}

void OAIProjectSalesNoteOutputModel::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIProjectSalesNoteOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSalesNoteOutputModel::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIProjectSalesNoteOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSalesNoteOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIModelBase OAIProjectSalesNoteOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProjectSalesNoteOutputModel::setCreatedBy(const OAIModelBase &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProjectSalesNoteOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectSalesNoteOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIProjectSalesNoteOutputModel::getGuid() const {
    return m_guid;
}
void OAIProjectSalesNoteOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIProjectSalesNoteOutputModel::isIsDeleted() const {
    return m_is_deleted;
}
void OAIProjectSalesNoteOutputModel::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

OAIModelBase OAIProjectSalesNoteOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProjectSalesNoteOutputModel::setLastUpdatedBy(const OAIModelBase &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProjectSalesNoteOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProjectSalesNoteOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIProjectSalesNoteOutputModel::getNote() const {
    return m_note;
}
void OAIProjectSalesNoteOutputModel::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_note_Set() const{
    return m_note_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_note_Valid() const{
    return m_note_isValid;
}

OAIModelBase OAIProjectSalesNoteOutputModel::getProject() const {
    return m_project;
}
void OAIProjectSalesNoteOutputModel::setProject(const OAIModelBase &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

OAIModelBase OAIProjectSalesNoteOutputModel::getUser() const {
    return m_user;
}
void OAIProjectSalesNoteOutputModel::setUser(const OAIModelBase &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProjectSalesNoteOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProjectSalesNoteOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIProjectSalesNoteOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSalesNoteOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
