/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUsersPurpose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUsersPurpose::OAIGetUsersPurpose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUsersPurpose::OAIGetUsersPurpose() {
    this->initializeModel();
}

OAIGetUsersPurpose::~OAIGetUsersPurpose() {}

void OAIGetUsersPurpose::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIGetUsersPurpose::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIGetUsersPurpose::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AbsenceOwner", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::ABSENCEOWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccountOwner", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::ACCOUNTOWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityOwner", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::ACTIVITYOWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityParticipant", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::ACTIVITYPARTICIPANT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingContact", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::BILLINGCONTACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProjectManager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::PROJECTMANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SalesPerson", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::SALESPERSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SuperiorUser", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::SUPERIORUSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TermsOfServiceApprover", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGetUsersPurpose::TERMSOFSERVICEAPPROVER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIGetUsersPurpose::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIGetUsersPurpose::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIGetUsersPurpose::ABSENCEOWNER:
            val = "AbsenceOwner";
            break;
        case eOAIGetUsersPurpose::ACCOUNTOWNER:
            val = "AccountOwner";
            break;
        case eOAIGetUsersPurpose::ACTIVITYOWNER:
            val = "ActivityOwner";
            break;
        case eOAIGetUsersPurpose::ACTIVITYPARTICIPANT:
            val = "ActivityParticipant";
            break;
        case eOAIGetUsersPurpose::BILLINGCONTACT:
            val = "BillingContact";
            break;
        case eOAIGetUsersPurpose::PROJECTMANAGER:
            val = "ProjectManager";
            break;
        case eOAIGetUsersPurpose::SALESPERSON:
            val = "SalesPerson";
            break;
        case eOAIGetUsersPurpose::SUPERIORUSER:
            val = "SuperiorUser";
            break;
        case eOAIGetUsersPurpose::TERMSOFSERVICEAPPROVER:
            val = "TermsOfServiceApprover";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIGetUsersPurpose::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIGetUsersPurpose::eOAIGetUsersPurpose OAIGetUsersPurpose::getValue() const {
    return m_value;
}

void OAIGetUsersPurpose::setValue(const OAIGetUsersPurpose::eOAIGetUsersPurpose& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIGetUsersPurpose::isSet() const {
    
    return m_value_isSet;
}

bool OAIGetUsersPurpose::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
