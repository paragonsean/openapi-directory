/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorktypeForProjectOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorktypeForProjectOutputModel::OAIWorktypeForProjectOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorktypeForProjectOutputModel::OAIWorktypeForProjectOutputModel() {
    this->initializeModel();
}

OAIWorktypeForProjectOutputModel::~OAIWorktypeForProjectOutputModel() {}

void OAIWorktypeForProjectOutputModel::initializeModel() {

    m_hour_price_isSet = false;
    m_hour_price_isValid = false;

    m_worktype_isSet = false;
    m_worktype_isValid = false;
}

void OAIWorktypeForProjectOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorktypeForProjectOutputModel::fromJsonObject(QJsonObject json) {

    m_hour_price_isValid = ::OpenAPI::fromJsonValue(m_hour_price, json[QString("hourPrice")]);
    m_hour_price_isSet = !json[QString("hourPrice")].isNull() && m_hour_price_isValid;

    m_worktype_isValid = ::OpenAPI::fromJsonValue(m_worktype, json[QString("worktype")]);
    m_worktype_isSet = !json[QString("worktype")].isNull() && m_worktype_isValid;
}

QString OAIWorktypeForProjectOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorktypeForProjectOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_hour_price.isSet()) {
        obj.insert(QString("hourPrice"), ::OpenAPI::toJsonValue(m_hour_price));
    }
    if (m_worktype.isSet()) {
        obj.insert(QString("worktype"), ::OpenAPI::toJsonValue(m_worktype));
    }
    return obj;
}

OAIMoneyOutputModel OAIWorktypeForProjectOutputModel::getHourPrice() const {
    return m_hour_price;
}
void OAIWorktypeForProjectOutputModel::setHourPrice(const OAIMoneyOutputModel &hour_price) {
    m_hour_price = hour_price;
    m_hour_price_isSet = true;
}

bool OAIWorktypeForProjectOutputModel::is_hour_price_Set() const{
    return m_hour_price_isSet;
}

bool OAIWorktypeForProjectOutputModel::is_hour_price_Valid() const{
    return m_hour_price_isValid;
}

OAIWorkTypeOutputModel OAIWorktypeForProjectOutputModel::getWorktype() const {
    return m_worktype;
}
void OAIWorktypeForProjectOutputModel::setWorktype(const OAIWorkTypeOutputModel &worktype) {
    m_worktype = worktype;
    m_worktype_isSet = true;
}

bool OAIWorktypeForProjectOutputModel::is_worktype_Set() const{
    return m_worktype_isSet;
}

bool OAIWorktypeForProjectOutputModel::is_worktype_Valid() const{
    return m_worktype_isValid;
}

bool OAIWorktypeForProjectOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hour_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worktype.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorktypeForProjectOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
