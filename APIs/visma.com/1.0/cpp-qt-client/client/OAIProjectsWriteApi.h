/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsWriteApi_H
#define OAI_OAIProjectsWriteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomPriceListOutputModel.h"
#include "OAIExceptionModel.h"
#include "OAIPatchOperation.h"
#include "OAIPhaseInputModel.h"
#include "OAIPhaseMemberModel.h"
#include "OAIPhaseMembersFromBusinessUnitUsersModel.h"
#include "OAIPhaseOutputModel.h"
#include "OAIProjectCustomValueModel.h"
#include "OAIProjectFileModel.h"
#include "OAIProjectForecastInputModel.h"
#include "OAIProjectForecastOutputModel.h"
#include "OAIProjectInputModelBase.h"
#include "OAIProjectInvoiceSettingsInputModel.h"
#include "OAIProjectInvoiceSettingsOutputModel.h"
#include "OAIProjectKeywordModel.h"
#include "OAIProjectOutputModel.h"
#include "OAIProjectProductInputModel.h"
#include "OAIProjectProductOutputModel.h"
#include "OAIProjectSalesNoteInputModel.h"
#include "OAIProjectSalesNoteOutputModel.h"
#include "OAIProjectWorkHourPriceInputModel.h"
#include "OAIProjectWorkHourPriceOutputModel.h"
#include "OAIProjectWorkTypeModel.h"
#include "OAIProposalFeeRowInputModel.h"
#include "OAIProposalFeeRowOutputModel.h"
#include "OAIProposalInputModel.h"
#include "OAIProposalOutputModel.h"
#include "OAIProposalSettingsOutputModel.h"
#include "OAIProposalSubtotalInputModel.h"
#include "OAIProposalSubtotalOutputModel.h"
#include "OAIProposalWorkhourRowInputModel.h"
#include "OAIProposalWorkhourRowOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsWriteApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsWriteApi(const int timeOut = 0);
    ~OAIProjectsWriteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_project_file_model OAIProjectFileModel [optional]
    */
    virtual void filesPostProjectLink(const ::OpenAPI::OptionalParam<OAIProjectFileModel> &oai_project_file_model = ::OpenAPI::OptionalParam<OAIProjectFileModel>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  guid QString [required]
    */
    virtual void keywordsLinkKeywordToProject(const QString &project_guid, const QString &guid);

    /**
    * @param[in]  add_to_all_sub_phases bool [optional]
    * @param[in]  oai_phase_member_model OAIPhaseMemberModel [optional]
    */
    virtual void phaseMembersPostPhaseMember(const ::OpenAPI::OptionalParam<bool> &add_to_all_sub_phases = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPhaseMemberModel> &oai_phase_member_model = ::OpenAPI::OptionalParam<OAIPhaseMemberModel>());

    /**
    * @param[in]  add_to_all_sub_phases bool [optional]
    * @param[in]  oai_phase_members_from_business_unit_users_model OAIPhaseMembersFromBusinessUnitUsersModel [optional]
    */
    virtual void phaseMembersPostPhaseMembersFromBusinessUnitUsers(const ::OpenAPI::OptionalParam<bool> &add_to_all_sub_phases = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPhaseMembersFromBusinessUnitUsersModel> &oai_phase_members_from_business_unit_users_model = ::OpenAPI::OptionalParam<OAIPhaseMembersFromBusinessUnitUsersModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void phasesPatchPhase(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_phase_input_model OAIPhaseInputModel [optional]
    */
    virtual void phasesPostPhase(const ::OpenAPI::OptionalParam<OAIPhaseInputModel> &oai_phase_input_model = ::OpenAPI::OptionalParam<OAIPhaseInputModel>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  is_volume_pricing bool [optional]
    */
    virtual void priceListsPostCustomPricelist(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &is_volume_pricing = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectCustomValuesPatchProjectCustomValue(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_custom_value_model OAIProjectCustomValueModel [optional]
    */
    virtual void projectCustomValuesPostProjectCustomValue(const ::OpenAPI::OptionalParam<OAIProjectCustomValueModel> &oai_project_custom_value_model = ::OpenAPI::OptionalParam<OAIProjectCustomValueModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectForecastsPatchForecast(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_forecast_input_model OAIProjectForecastInputModel [optional]
    */
    virtual void projectForecastsPostForecast(const ::OpenAPI::OptionalParam<OAIProjectForecastInputModel> &oai_project_forecast_input_model = ::OpenAPI::OptionalParam<OAIProjectForecastInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectInvoiceSettingsPatchProjectInvoiceSettings(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_invoice_settings_input_model OAIProjectInvoiceSettingsInputModel [optional]
    */
    virtual void projectInvoiceSettingsPostProjectInvoiceSettings(const ::OpenAPI::OptionalParam<OAIProjectInvoiceSettingsInputModel> &oai_project_invoice_settings_input_model = ::OpenAPI::OptionalParam<OAIProjectInvoiceSettingsInputModel>());

    /**
    * @param[in]  oai_project_product_input_model OAIProjectProductInputModel [optional]
    */
    virtual void projectProductsPostProjectProduct(const ::OpenAPI::OptionalParam<OAIProjectProductInputModel> &oai_project_product_input_model = ::OpenAPI::OptionalParam<OAIProjectProductInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectWorkHourPricesPatchProjectWorkHourPrice(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_work_hour_price_input_model OAIProjectWorkHourPriceInputModel [optional]
    */
    virtual void projectWorkHourPricesPostProjectWorkHourPrice(const ::OpenAPI::OptionalParam<OAIProjectWorkHourPriceInputModel> &oai_project_work_hour_price_input_model = ::OpenAPI::OptionalParam<OAIProjectWorkHourPriceInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectWorkTypesPatchProjectWorktype(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_work_type_model OAIProjectWorkTypeModel [optional]
    */
    virtual void projectWorkTypesPostProjectWorktype(const ::OpenAPI::OptionalParam<OAIProjectWorkTypeModel> &oai_project_work_type_model = ::OpenAPI::OptionalParam<OAIProjectWorkTypeModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectsPatchProject(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_input_model_base OAIProjectInputModelBase [optional]
    */
    virtual void projectsPostProject(const ::OpenAPI::OptionalParam<OAIProjectInputModelBase> &oai_project_input_model_base = ::OpenAPI::OptionalParam<OAIProjectInputModelBase>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void proposalFeesPatchProposalFee(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_proposal_fee_row_input_model OAIProposalFeeRowInputModel [optional]
    */
    virtual void proposalFeesPostProposalFee(const ::OpenAPI::OptionalParam<OAIProposalFeeRowInputModel> &oai_proposal_fee_row_input_model = ::OpenAPI::OptionalParam<OAIProposalFeeRowInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void proposalSettingsPatchProposalSettings(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void proposalSubtotalsPatchProposalSubtotal(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_proposal_subtotal_input_model OAIProposalSubtotalInputModel [optional]
    */
    virtual void proposalSubtotalsPostProposalSubtotal(const ::OpenAPI::OptionalParam<OAIProposalSubtotalInputModel> &oai_proposal_subtotal_input_model = ::OpenAPI::OptionalParam<OAIProposalSubtotalInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void proposalWorkhoursPatchProposalWorkhour(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_proposal_workhour_row_input_model OAIProposalWorkhourRowInputModel [optional]
    */
    virtual void proposalWorkhoursPostProposalWorkhour(const ::OpenAPI::OptionalParam<OAIProposalWorkhourRowInputModel> &oai_proposal_workhour_row_input_model = ::OpenAPI::OptionalParam<OAIProposalWorkhourRowInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void proposalsPatchProposal(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_proposal_input_model OAIProposalInputModel [optional]
    */
    virtual void proposalsPostProposal(const ::OpenAPI::OptionalParam<OAIProposalInputModel> &oai_proposal_input_model = ::OpenAPI::OptionalParam<OAIProposalInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void salesNotesPatchProjectSalesNote(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_sales_note_input_model OAIProjectSalesNoteInputModel [optional]
    */
    virtual void salesNotesPostProjectSalesNotes(const ::OpenAPI::OptionalParam<OAIProjectSalesNoteInputModel> &oai_project_sales_note_input_model = ::OpenAPI::OptionalParam<OAIProjectSalesNoteInputModel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void filesPostProjectLinkCallback(OAIHttpRequestWorker *worker);
    void keywordsLinkKeywordToProjectCallback(OAIHttpRequestWorker *worker);
    void phaseMembersPostPhaseMemberCallback(OAIHttpRequestWorker *worker);
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersCallback(OAIHttpRequestWorker *worker);
    void phasesPatchPhaseCallback(OAIHttpRequestWorker *worker);
    void phasesPostPhaseCallback(OAIHttpRequestWorker *worker);
    void priceListsPostCustomPricelistCallback(OAIHttpRequestWorker *worker);
    void projectCustomValuesPatchProjectCustomValueCallback(OAIHttpRequestWorker *worker);
    void projectCustomValuesPostProjectCustomValueCallback(OAIHttpRequestWorker *worker);
    void projectForecastsPatchForecastCallback(OAIHttpRequestWorker *worker);
    void projectForecastsPostForecastCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsPatchProjectInvoiceSettingsCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsPostProjectInvoiceSettingsCallback(OAIHttpRequestWorker *worker);
    void projectProductsPostProjectProductCallback(OAIHttpRequestWorker *worker);
    void projectWorkHourPricesPatchProjectWorkHourPriceCallback(OAIHttpRequestWorker *worker);
    void projectWorkHourPricesPostProjectWorkHourPriceCallback(OAIHttpRequestWorker *worker);
    void projectWorkTypesPatchProjectWorktypeCallback(OAIHttpRequestWorker *worker);
    void projectWorkTypesPostProjectWorktypeCallback(OAIHttpRequestWorker *worker);
    void projectsPatchProjectCallback(OAIHttpRequestWorker *worker);
    void projectsPostProjectCallback(OAIHttpRequestWorker *worker);
    void proposalFeesPatchProposalFeeCallback(OAIHttpRequestWorker *worker);
    void proposalFeesPostProposalFeeCallback(OAIHttpRequestWorker *worker);
    void proposalSettingsPatchProposalSettingsCallback(OAIHttpRequestWorker *worker);
    void proposalSubtotalsPatchProposalSubtotalCallback(OAIHttpRequestWorker *worker);
    void proposalSubtotalsPostProposalSubtotalCallback(OAIHttpRequestWorker *worker);
    void proposalWorkhoursPatchProposalWorkhourCallback(OAIHttpRequestWorker *worker);
    void proposalWorkhoursPostProposalWorkhourCallback(OAIHttpRequestWorker *worker);
    void proposalsPatchProposalCallback(OAIHttpRequestWorker *worker);
    void proposalsPostProposalCallback(OAIHttpRequestWorker *worker);
    void salesNotesPatchProjectSalesNoteCallback(OAIHttpRequestWorker *worker);
    void salesNotesPostProjectSalesNotesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void filesPostProjectLinkSignal(OAIProjectFileModel summary);
    void keywordsLinkKeywordToProjectSignal(OAIProjectKeywordModel summary);
    void phaseMembersPostPhaseMemberSignal(OAIPhaseMemberModel summary);
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersSignal(QList<OAIPhaseMemberModel> summary);
    void phasesPatchPhaseSignal(QList<OAIPhaseOutputModel> summary);
    void phasesPostPhaseSignal(OAIPhaseOutputModel summary);
    void priceListsPostCustomPricelistSignal(OAICustomPriceListOutputModel summary);
    void projectCustomValuesPatchProjectCustomValueSignal(QList<OAIProjectCustomValueModel> summary);
    void projectCustomValuesPostProjectCustomValueSignal(QList<OAIProjectCustomValueModel> summary);
    void projectForecastsPatchForecastSignal(QList<OAIProjectForecastOutputModel> summary);
    void projectForecastsPostForecastSignal(OAIProjectForecastOutputModel summary);
    void projectInvoiceSettingsPatchProjectInvoiceSettingsSignal(QList<OAIProjectInvoiceSettingsOutputModel> summary);
    void projectInvoiceSettingsPostProjectInvoiceSettingsSignal(OAIProjectInvoiceSettingsOutputModel summary);
    void projectProductsPostProjectProductSignal(OAIProjectProductOutputModel summary);
    void projectWorkHourPricesPatchProjectWorkHourPriceSignal(QList<OAIProjectWorkHourPriceOutputModel> summary);
    void projectWorkHourPricesPostProjectWorkHourPriceSignal(OAIProjectWorkHourPriceOutputModel summary);
    void projectWorkTypesPatchProjectWorktypeSignal(QList<OAIProjectWorkTypeModel> summary);
    void projectWorkTypesPostProjectWorktypeSignal(OAIProjectWorkTypeModel summary);
    void projectsPatchProjectSignal(QList<OAIProjectOutputModel> summary);
    void projectsPostProjectSignal(OAIProjectOutputModel summary);
    void proposalFeesPatchProposalFeeSignal(QList<OAIProposalFeeRowOutputModel> summary);
    void proposalFeesPostProposalFeeSignal(OAIProposalFeeRowOutputModel summary);
    void proposalSettingsPatchProposalSettingsSignal(QList<OAIProposalSettingsOutputModel> summary);
    void proposalSubtotalsPatchProposalSubtotalSignal(QList<OAIProposalSubtotalOutputModel> summary);
    void proposalSubtotalsPostProposalSubtotalSignal(OAIProposalSubtotalOutputModel summary);
    void proposalWorkhoursPatchProposalWorkhourSignal(QList<OAIProposalWorkhourRowOutputModel> summary);
    void proposalWorkhoursPostProposalWorkhourSignal(OAIProposalWorkhourRowOutputModel summary);
    void proposalsPatchProposalSignal(QList<OAIProposalOutputModel> summary);
    void proposalsPostProposalSignal(OAIProposalOutputModel summary);
    void salesNotesPatchProjectSalesNoteSignal(QList<OAIProjectSalesNoteOutputModel> summary);
    void salesNotesPostProjectSalesNotesSignal(OAIProjectSalesNoteOutputModel summary);


    void filesPostProjectLinkSignalFull(OAIHttpRequestWorker *worker, OAIProjectFileModel summary);
    void keywordsLinkKeywordToProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectKeywordModel summary);
    void phaseMembersPostPhaseMemberSignalFull(OAIHttpRequestWorker *worker, OAIPhaseMemberModel summary);
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseMemberModel> summary);
    void phasesPatchPhaseSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseOutputModel> summary);
    void phasesPostPhaseSignalFull(OAIHttpRequestWorker *worker, OAIPhaseOutputModel summary);
    void priceListsPostCustomPricelistSignalFull(OAIHttpRequestWorker *worker, OAICustomPriceListOutputModel summary);
    void projectCustomValuesPatchProjectCustomValueSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCustomValueModel> summary);
    void projectCustomValuesPostProjectCustomValueSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCustomValueModel> summary);
    void projectForecastsPatchForecastSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectForecastOutputModel> summary);
    void projectForecastsPostForecastSignalFull(OAIHttpRequestWorker *worker, OAIProjectForecastOutputModel summary);
    void projectInvoiceSettingsPatchProjectInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectInvoiceSettingsOutputModel> summary);
    void projectInvoiceSettingsPostProjectInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIProjectInvoiceSettingsOutputModel summary);
    void projectProductsPostProjectProductSignalFull(OAIHttpRequestWorker *worker, OAIProjectProductOutputModel summary);
    void projectWorkHourPricesPatchProjectWorkHourPriceSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectWorkHourPriceOutputModel> summary);
    void projectWorkHourPricesPostProjectWorkHourPriceSignalFull(OAIHttpRequestWorker *worker, OAIProjectWorkHourPriceOutputModel summary);
    void projectWorkTypesPatchProjectWorktypeSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectWorkTypeModel> summary);
    void projectWorkTypesPostProjectWorktypeSignalFull(OAIHttpRequestWorker *worker, OAIProjectWorkTypeModel summary);
    void projectsPatchProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectOutputModel> summary);
    void projectsPostProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectOutputModel summary);
    void proposalFeesPatchProposalFeeSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalFeeRowOutputModel> summary);
    void proposalFeesPostProposalFeeSignalFull(OAIHttpRequestWorker *worker, OAIProposalFeeRowOutputModel summary);
    void proposalSettingsPatchProposalSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalSettingsOutputModel> summary);
    void proposalSubtotalsPatchProposalSubtotalSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalSubtotalOutputModel> summary);
    void proposalSubtotalsPostProposalSubtotalSignalFull(OAIHttpRequestWorker *worker, OAIProposalSubtotalOutputModel summary);
    void proposalWorkhoursPatchProposalWorkhourSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalWorkhourRowOutputModel> summary);
    void proposalWorkhoursPostProposalWorkhourSignalFull(OAIHttpRequestWorker *worker, OAIProposalWorkhourRowOutputModel summary);
    void proposalsPatchProposalSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalOutputModel> summary);
    void proposalsPostProposalSignalFull(OAIHttpRequestWorker *worker, OAIProposalOutputModel summary);
    void salesNotesPatchProjectSalesNoteSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectSalesNoteOutputModel> summary);
    void salesNotesPostProjectSalesNotesSignalFull(OAIHttpRequestWorker *worker, OAIProjectSalesNoteOutputModel summary);

    Q_DECL_DEPRECATED_X("Use filesPostProjectLinkSignalError() instead")
    void filesPostProjectLinkSignalE(OAIProjectFileModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPostProjectLinkSignalError(OAIProjectFileModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsLinkKeywordToProjectSignalError() instead")
    void keywordsLinkKeywordToProjectSignalE(OAIProjectKeywordModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsLinkKeywordToProjectSignalError(OAIProjectKeywordModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersPostPhaseMemberSignalError() instead")
    void phaseMembersPostPhaseMemberSignalE(OAIPhaseMemberModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersPostPhaseMemberSignalError(OAIPhaseMemberModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalError() instead")
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalE(QList<OAIPhaseMemberModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalError(QList<OAIPhaseMemberModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesPatchPhaseSignalError() instead")
    void phasesPatchPhaseSignalE(QList<OAIPhaseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesPatchPhaseSignalError(QList<OAIPhaseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesPostPhaseSignalError() instead")
    void phasesPostPhaseSignalE(OAIPhaseOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesPostPhaseSignalError(OAIPhaseOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListsPostCustomPricelistSignalError() instead")
    void priceListsPostCustomPricelistSignalE(OAICustomPriceListOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListsPostCustomPricelistSignalError(OAICustomPriceListOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesPatchProjectCustomValueSignalError() instead")
    void projectCustomValuesPatchProjectCustomValueSignalE(QList<OAIProjectCustomValueModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesPatchProjectCustomValueSignalError(QList<OAIProjectCustomValueModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesPostProjectCustomValueSignalError() instead")
    void projectCustomValuesPostProjectCustomValueSignalE(QList<OAIProjectCustomValueModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesPostProjectCustomValueSignalError(QList<OAIProjectCustomValueModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsPatchForecastSignalError() instead")
    void projectForecastsPatchForecastSignalE(QList<OAIProjectForecastOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsPatchForecastSignalError(QList<OAIProjectForecastOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsPostForecastSignalError() instead")
    void projectForecastsPostForecastSignalE(OAIProjectForecastOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsPostForecastSignalError(OAIProjectForecastOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsPatchProjectInvoiceSettingsSignalError() instead")
    void projectInvoiceSettingsPatchProjectInvoiceSettingsSignalE(QList<OAIProjectInvoiceSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsPatchProjectInvoiceSettingsSignalError(QList<OAIProjectInvoiceSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsPostProjectInvoiceSettingsSignalError() instead")
    void projectInvoiceSettingsPostProjectInvoiceSettingsSignalE(OAIProjectInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsPostProjectInvoiceSettingsSignalError(OAIProjectInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsPostProjectProductSignalError() instead")
    void projectProductsPostProjectProductSignalE(OAIProjectProductOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsPostProjectProductSignalError(OAIProjectProductOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesPatchProjectWorkHourPriceSignalError() instead")
    void projectWorkHourPricesPatchProjectWorkHourPriceSignalE(QList<OAIProjectWorkHourPriceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesPatchProjectWorkHourPriceSignalError(QList<OAIProjectWorkHourPriceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesPostProjectWorkHourPriceSignalError() instead")
    void projectWorkHourPricesPostProjectWorkHourPriceSignalE(OAIProjectWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesPostProjectWorkHourPriceSignalError(OAIProjectWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesPatchProjectWorktypeSignalError() instead")
    void projectWorkTypesPatchProjectWorktypeSignalE(QList<OAIProjectWorkTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesPatchProjectWorktypeSignalError(QList<OAIProjectWorkTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesPostProjectWorktypeSignalError() instead")
    void projectWorkTypesPostProjectWorktypeSignalE(OAIProjectWorkTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesPostProjectWorktypeSignalError(OAIProjectWorkTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsPatchProjectSignalError() instead")
    void projectsPatchProjectSignalE(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsPatchProjectSignalError(QList<OAIProjectOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsPostProjectSignalError() instead")
    void projectsPostProjectSignalE(OAIProjectOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsPostProjectSignalError(OAIProjectOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesPatchProposalFeeSignalError() instead")
    void proposalFeesPatchProposalFeeSignalE(QList<OAIProposalFeeRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesPatchProposalFeeSignalError(QList<OAIProposalFeeRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesPostProposalFeeSignalError() instead")
    void proposalFeesPostProposalFeeSignalE(OAIProposalFeeRowOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesPostProposalFeeSignalError(OAIProposalFeeRowOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSettingsPatchProposalSettingsSignalError() instead")
    void proposalSettingsPatchProposalSettingsSignalE(QList<OAIProposalSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSettingsPatchProposalSettingsSignalError(QList<OAIProposalSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsPatchProposalSubtotalSignalError() instead")
    void proposalSubtotalsPatchProposalSubtotalSignalE(QList<OAIProposalSubtotalOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsPatchProposalSubtotalSignalError(QList<OAIProposalSubtotalOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsPostProposalSubtotalSignalError() instead")
    void proposalSubtotalsPostProposalSubtotalSignalE(OAIProposalSubtotalOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsPostProposalSubtotalSignalError(OAIProposalSubtotalOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursPatchProposalWorkhourSignalError() instead")
    void proposalWorkhoursPatchProposalWorkhourSignalE(QList<OAIProposalWorkhourRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursPatchProposalWorkhourSignalError(QList<OAIProposalWorkhourRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursPostProposalWorkhourSignalError() instead")
    void proposalWorkhoursPostProposalWorkhourSignalE(OAIProposalWorkhourRowOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursPostProposalWorkhourSignalError(OAIProposalWorkhourRowOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsPatchProposalSignalError() instead")
    void proposalsPatchProposalSignalE(QList<OAIProposalOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsPatchProposalSignalError(QList<OAIProposalOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsPostProposalSignalError() instead")
    void proposalsPostProposalSignalE(OAIProposalOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsPostProposalSignalError(OAIProposalOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPatchProjectSalesNoteSignalError() instead")
    void salesNotesPatchProjectSalesNoteSignalE(QList<OAIProjectSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPatchProjectSalesNoteSignalError(QList<OAIProjectSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPostProjectSalesNotesSignalError() instead")
    void salesNotesPostProjectSalesNotesSignalE(OAIProjectSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPostProjectSalesNotesSignalError(OAIProjectSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use filesPostProjectLinkSignalErrorFull() instead")
    void filesPostProjectLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPostProjectLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsLinkKeywordToProjectSignalErrorFull() instead")
    void keywordsLinkKeywordToProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsLinkKeywordToProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersPostPhaseMemberSignalErrorFull() instead")
    void phaseMembersPostPhaseMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersPostPhaseMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalErrorFull() instead")
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseMembersPostPhaseMembersFromBusinessUnitUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesPatchPhaseSignalErrorFull() instead")
    void phasesPatchPhaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesPatchPhaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phasesPostPhaseSignalErrorFull() instead")
    void phasesPostPhaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phasesPostPhaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListsPostCustomPricelistSignalErrorFull() instead")
    void priceListsPostCustomPricelistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListsPostCustomPricelistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesPatchProjectCustomValueSignalErrorFull() instead")
    void projectCustomValuesPatchProjectCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesPatchProjectCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomValuesPostProjectCustomValueSignalErrorFull() instead")
    void projectCustomValuesPostProjectCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomValuesPostProjectCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsPatchForecastSignalErrorFull() instead")
    void projectForecastsPatchForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsPatchForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectForecastsPostForecastSignalErrorFull() instead")
    void projectForecastsPostForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectForecastsPostForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsPatchProjectInvoiceSettingsSignalErrorFull() instead")
    void projectInvoiceSettingsPatchProjectInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsPatchProjectInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsPostProjectInvoiceSettingsSignalErrorFull() instead")
    void projectInvoiceSettingsPostProjectInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsPostProjectInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectProductsPostProjectProductSignalErrorFull() instead")
    void projectProductsPostProjectProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectProductsPostProjectProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesPatchProjectWorkHourPriceSignalErrorFull() instead")
    void projectWorkHourPricesPatchProjectWorkHourPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesPatchProjectWorkHourPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkHourPricesPostProjectWorkHourPriceSignalErrorFull() instead")
    void projectWorkHourPricesPostProjectWorkHourPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkHourPricesPostProjectWorkHourPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesPatchProjectWorktypeSignalErrorFull() instead")
    void projectWorkTypesPatchProjectWorktypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesPatchProjectWorktypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectWorkTypesPostProjectWorktypeSignalErrorFull() instead")
    void projectWorkTypesPostProjectWorktypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectWorkTypesPostProjectWorktypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsPatchProjectSignalErrorFull() instead")
    void projectsPatchProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsPatchProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsPostProjectSignalErrorFull() instead")
    void projectsPostProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsPostProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesPatchProposalFeeSignalErrorFull() instead")
    void proposalFeesPatchProposalFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesPatchProposalFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalFeesPostProposalFeeSignalErrorFull() instead")
    void proposalFeesPostProposalFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalFeesPostProposalFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSettingsPatchProposalSettingsSignalErrorFull() instead")
    void proposalSettingsPatchProposalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSettingsPatchProposalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsPatchProposalSubtotalSignalErrorFull() instead")
    void proposalSubtotalsPatchProposalSubtotalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsPatchProposalSubtotalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalSubtotalsPostProposalSubtotalSignalErrorFull() instead")
    void proposalSubtotalsPostProposalSubtotalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalSubtotalsPostProposalSubtotalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursPatchProposalWorkhourSignalErrorFull() instead")
    void proposalWorkhoursPatchProposalWorkhourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursPatchProposalWorkhourSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalWorkhoursPostProposalWorkhourSignalErrorFull() instead")
    void proposalWorkhoursPostProposalWorkhourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalWorkhoursPostProposalWorkhourSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsPatchProposalSignalErrorFull() instead")
    void proposalsPatchProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsPatchProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalsPostProposalSignalErrorFull() instead")
    void proposalsPostProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalsPostProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPatchProjectSalesNoteSignalErrorFull() instead")
    void salesNotesPatchProjectSalesNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPatchProjectSalesNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPostProjectSalesNotesSignalErrorFull() instead")
    void salesNotesPostProjectSalesNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPostProjectSalesNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
