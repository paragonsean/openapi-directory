/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamProductivityOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamProductivityOutputModel::OAITeamProductivityOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamProductivityOutputModel::OAITeamProductivityOutputModel() {
    this->initializeModel();
}

OAITeamProductivityOutputModel::~OAITeamProductivityOutputModel() {}

void OAITeamProductivityOutputModel::initializeModel() {

    m_adjusted_share_of_billing_isSet = false;
    m_adjusted_share_of_billing_isValid = false;

    m_adjusted_share_of_billing_percentage_isSet = false;
    m_adjusted_share_of_billing_percentage_isValid = false;

    m_billable_hours_percentage_isSet = false;
    m_billable_hours_percentage_isValid = false;

    m_calculated_share_of_billing_isSet = false;
    m_calculated_share_of_billing_isValid = false;

    m_calculated_share_of_billing_percentage_isSet = false;
    m_calculated_share_of_billing_percentage_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_project_guid_isSet = false;
    m_project_guid_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_work_hours_isSet = false;
    m_work_hours_isValid = false;

    m_work_hours_billable_isSet = false;
    m_work_hours_billable_isValid = false;

    m_work_hours_cost_isSet = false;
    m_work_hours_cost_isValid = false;

    m_work_hours_value_isSet = false;
    m_work_hours_value_isValid = false;
}

void OAITeamProductivityOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamProductivityOutputModel::fromJsonObject(QJsonObject json) {

    m_adjusted_share_of_billing_isValid = ::OpenAPI::fromJsonValue(m_adjusted_share_of_billing, json[QString("adjustedShareOfBilling")]);
    m_adjusted_share_of_billing_isSet = !json[QString("adjustedShareOfBilling")].isNull() && m_adjusted_share_of_billing_isValid;

    m_adjusted_share_of_billing_percentage_isValid = ::OpenAPI::fromJsonValue(m_adjusted_share_of_billing_percentage, json[QString("adjustedShareOfBillingPercentage")]);
    m_adjusted_share_of_billing_percentage_isSet = !json[QString("adjustedShareOfBillingPercentage")].isNull() && m_adjusted_share_of_billing_percentage_isValid;

    m_billable_hours_percentage_isValid = ::OpenAPI::fromJsonValue(m_billable_hours_percentage, json[QString("billableHoursPercentage")]);
    m_billable_hours_percentage_isSet = !json[QString("billableHoursPercentage")].isNull() && m_billable_hours_percentage_isValid;

    m_calculated_share_of_billing_isValid = ::OpenAPI::fromJsonValue(m_calculated_share_of_billing, json[QString("calculatedShareOfBilling")]);
    m_calculated_share_of_billing_isSet = !json[QString("calculatedShareOfBilling")].isNull() && m_calculated_share_of_billing_isValid;

    m_calculated_share_of_billing_percentage_isValid = ::OpenAPI::fromJsonValue(m_calculated_share_of_billing_percentage, json[QString("calculatedShareOfBillingPercentage")]);
    m_calculated_share_of_billing_percentage_isSet = !json[QString("calculatedShareOfBillingPercentage")].isNull() && m_calculated_share_of_billing_percentage_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_project_guid_isValid = ::OpenAPI::fromJsonValue(m_project_guid, json[QString("projectGuid")]);
    m_project_guid_isSet = !json[QString("projectGuid")].isNull() && m_project_guid_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_work_hours_isValid = ::OpenAPI::fromJsonValue(m_work_hours, json[QString("workHours")]);
    m_work_hours_isSet = !json[QString("workHours")].isNull() && m_work_hours_isValid;

    m_work_hours_billable_isValid = ::OpenAPI::fromJsonValue(m_work_hours_billable, json[QString("workHoursBillable")]);
    m_work_hours_billable_isSet = !json[QString("workHoursBillable")].isNull() && m_work_hours_billable_isValid;

    m_work_hours_cost_isValid = ::OpenAPI::fromJsonValue(m_work_hours_cost, json[QString("workHoursCost")]);
    m_work_hours_cost_isSet = !json[QString("workHoursCost")].isNull() && m_work_hours_cost_isValid;

    m_work_hours_value_isValid = ::OpenAPI::fromJsonValue(m_work_hours_value, json[QString("workHoursValue")]);
    m_work_hours_value_isSet = !json[QString("workHoursValue")].isNull() && m_work_hours_value_isValid;
}

QString OAITeamProductivityOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamProductivityOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_adjusted_share_of_billing.isSet()) {
        obj.insert(QString("adjustedShareOfBilling"), ::OpenAPI::toJsonValue(m_adjusted_share_of_billing));
    }
    if (m_adjusted_share_of_billing_percentage_isSet) {
        obj.insert(QString("adjustedShareOfBillingPercentage"), ::OpenAPI::toJsonValue(m_adjusted_share_of_billing_percentage));
    }
    if (m_billable_hours_percentage_isSet) {
        obj.insert(QString("billableHoursPercentage"), ::OpenAPI::toJsonValue(m_billable_hours_percentage));
    }
    if (m_calculated_share_of_billing.isSet()) {
        obj.insert(QString("calculatedShareOfBilling"), ::OpenAPI::toJsonValue(m_calculated_share_of_billing));
    }
    if (m_calculated_share_of_billing_percentage_isSet) {
        obj.insert(QString("calculatedShareOfBillingPercentage"), ::OpenAPI::toJsonValue(m_calculated_share_of_billing_percentage));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_project_guid_isSet) {
        obj.insert(QString("projectGuid"), ::OpenAPI::toJsonValue(m_project_guid));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_work_hours_isSet) {
        obj.insert(QString("workHours"), ::OpenAPI::toJsonValue(m_work_hours));
    }
    if (m_work_hours_billable_isSet) {
        obj.insert(QString("workHoursBillable"), ::OpenAPI::toJsonValue(m_work_hours_billable));
    }
    if (m_work_hours_cost.isSet()) {
        obj.insert(QString("workHoursCost"), ::OpenAPI::toJsonValue(m_work_hours_cost));
    }
    if (m_work_hours_value.isSet()) {
        obj.insert(QString("workHoursValue"), ::OpenAPI::toJsonValue(m_work_hours_value));
    }
    return obj;
}

OAIMoneyOutputModel OAITeamProductivityOutputModel::getAdjustedShareOfBilling() const {
    return m_adjusted_share_of_billing;
}
void OAITeamProductivityOutputModel::setAdjustedShareOfBilling(const OAIMoneyOutputModel &adjusted_share_of_billing) {
    m_adjusted_share_of_billing = adjusted_share_of_billing;
    m_adjusted_share_of_billing_isSet = true;
}

bool OAITeamProductivityOutputModel::is_adjusted_share_of_billing_Set() const{
    return m_adjusted_share_of_billing_isSet;
}

bool OAITeamProductivityOutputModel::is_adjusted_share_of_billing_Valid() const{
    return m_adjusted_share_of_billing_isValid;
}

double OAITeamProductivityOutputModel::getAdjustedShareOfBillingPercentage() const {
    return m_adjusted_share_of_billing_percentage;
}
void OAITeamProductivityOutputModel::setAdjustedShareOfBillingPercentage(const double &adjusted_share_of_billing_percentage) {
    m_adjusted_share_of_billing_percentage = adjusted_share_of_billing_percentage;
    m_adjusted_share_of_billing_percentage_isSet = true;
}

bool OAITeamProductivityOutputModel::is_adjusted_share_of_billing_percentage_Set() const{
    return m_adjusted_share_of_billing_percentage_isSet;
}

bool OAITeamProductivityOutputModel::is_adjusted_share_of_billing_percentage_Valid() const{
    return m_adjusted_share_of_billing_percentage_isValid;
}

double OAITeamProductivityOutputModel::getBillableHoursPercentage() const {
    return m_billable_hours_percentage;
}
void OAITeamProductivityOutputModel::setBillableHoursPercentage(const double &billable_hours_percentage) {
    m_billable_hours_percentage = billable_hours_percentage;
    m_billable_hours_percentage_isSet = true;
}

bool OAITeamProductivityOutputModel::is_billable_hours_percentage_Set() const{
    return m_billable_hours_percentage_isSet;
}

bool OAITeamProductivityOutputModel::is_billable_hours_percentage_Valid() const{
    return m_billable_hours_percentage_isValid;
}

OAIMoneyOutputModel OAITeamProductivityOutputModel::getCalculatedShareOfBilling() const {
    return m_calculated_share_of_billing;
}
void OAITeamProductivityOutputModel::setCalculatedShareOfBilling(const OAIMoneyOutputModel &calculated_share_of_billing) {
    m_calculated_share_of_billing = calculated_share_of_billing;
    m_calculated_share_of_billing_isSet = true;
}

bool OAITeamProductivityOutputModel::is_calculated_share_of_billing_Set() const{
    return m_calculated_share_of_billing_isSet;
}

bool OAITeamProductivityOutputModel::is_calculated_share_of_billing_Valid() const{
    return m_calculated_share_of_billing_isValid;
}

double OAITeamProductivityOutputModel::getCalculatedShareOfBillingPercentage() const {
    return m_calculated_share_of_billing_percentage;
}
void OAITeamProductivityOutputModel::setCalculatedShareOfBillingPercentage(const double &calculated_share_of_billing_percentage) {
    m_calculated_share_of_billing_percentage = calculated_share_of_billing_percentage;
    m_calculated_share_of_billing_percentage_isSet = true;
}

bool OAITeamProductivityOutputModel::is_calculated_share_of_billing_percentage_Set() const{
    return m_calculated_share_of_billing_percentage_isSet;
}

bool OAITeamProductivityOutputModel::is_calculated_share_of_billing_percentage_Valid() const{
    return m_calculated_share_of_billing_percentage_isValid;
}

QString OAITeamProductivityOutputModel::getGuid() const {
    return m_guid;
}
void OAITeamProductivityOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAITeamProductivityOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAITeamProductivityOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAITeamProductivityOutputModel::getProjectGuid() const {
    return m_project_guid;
}
void OAITeamProductivityOutputModel::setProjectGuid(const QString &project_guid) {
    m_project_guid = project_guid;
    m_project_guid_isSet = true;
}

bool OAITeamProductivityOutputModel::is_project_guid_Set() const{
    return m_project_guid_isSet;
}

bool OAITeamProductivityOutputModel::is_project_guid_Valid() const{
    return m_project_guid_isValid;
}

OAIUserWithNameAndPhotoFileModel OAITeamProductivityOutputModel::getUser() const {
    return m_user;
}
void OAITeamProductivityOutputModel::setUser(const OAIUserWithNameAndPhotoFileModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITeamProductivityOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAITeamProductivityOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

double OAITeamProductivityOutputModel::getWorkHours() const {
    return m_work_hours;
}
void OAITeamProductivityOutputModel::setWorkHours(const double &work_hours) {
    m_work_hours = work_hours;
    m_work_hours_isSet = true;
}

bool OAITeamProductivityOutputModel::is_work_hours_Set() const{
    return m_work_hours_isSet;
}

bool OAITeamProductivityOutputModel::is_work_hours_Valid() const{
    return m_work_hours_isValid;
}

double OAITeamProductivityOutputModel::getWorkHoursBillable() const {
    return m_work_hours_billable;
}
void OAITeamProductivityOutputModel::setWorkHoursBillable(const double &work_hours_billable) {
    m_work_hours_billable = work_hours_billable;
    m_work_hours_billable_isSet = true;
}

bool OAITeamProductivityOutputModel::is_work_hours_billable_Set() const{
    return m_work_hours_billable_isSet;
}

bool OAITeamProductivityOutputModel::is_work_hours_billable_Valid() const{
    return m_work_hours_billable_isValid;
}

OAIMoneyOutputModel OAITeamProductivityOutputModel::getWorkHoursCost() const {
    return m_work_hours_cost;
}
void OAITeamProductivityOutputModel::setWorkHoursCost(const OAIMoneyOutputModel &work_hours_cost) {
    m_work_hours_cost = work_hours_cost;
    m_work_hours_cost_isSet = true;
}

bool OAITeamProductivityOutputModel::is_work_hours_cost_Set() const{
    return m_work_hours_cost_isSet;
}

bool OAITeamProductivityOutputModel::is_work_hours_cost_Valid() const{
    return m_work_hours_cost_isValid;
}

OAIMoneyOutputModel OAITeamProductivityOutputModel::getWorkHoursValue() const {
    return m_work_hours_value;
}
void OAITeamProductivityOutputModel::setWorkHoursValue(const OAIMoneyOutputModel &work_hours_value) {
    m_work_hours_value = work_hours_value;
    m_work_hours_value_isSet = true;
}

bool OAITeamProductivityOutputModel::is_work_hours_value_Set() const{
    return m_work_hours_value_isSet;
}

bool OAITeamProductivityOutputModel::is_work_hours_value_Valid() const{
    return m_work_hours_value_isValid;
}

bool OAITeamProductivityOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjusted_share_of_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjusted_share_of_billing_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_hours_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_share_of_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_share_of_billing_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hours_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hours_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hours_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamProductivityOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
