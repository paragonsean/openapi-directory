/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerSalesNoteInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerSalesNoteInputModel::OAICustomerSalesNoteInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerSalesNoteInputModel::OAICustomerSalesNoteInputModel() {
    this->initializeModel();
}

OAICustomerSalesNoteInputModel::~OAICustomerSalesNoteInputModel() {}

void OAICustomerSalesNoteInputModel::initializeModel() {

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICustomerSalesNoteInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerSalesNoteInputModel::fromJsonObject(QJsonObject json) {

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICustomerSalesNoteInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerSalesNoteInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAISimpleInputRequiredModel OAICustomerSalesNoteInputModel::getCustomer() const {
    return m_customer;
}
void OAICustomerSalesNoteInputModel::setCustomer(const OAISimpleInputRequiredModel &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerSalesNoteInputModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerSalesNoteInputModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICustomerSalesNoteInputModel::getNote() const {
    return m_note;
}
void OAICustomerSalesNoteInputModel::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerSalesNoteInputModel::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerSalesNoteInputModel::is_note_Valid() const{
    return m_note_isValid;
}

OAISimpleInputRequiredModel OAICustomerSalesNoteInputModel::getUser() const {
    return m_user;
}
void OAICustomerSalesNoteInputModel::setUser(const OAISimpleInputRequiredModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICustomerSalesNoteInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAICustomerSalesNoteInputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICustomerSalesNoteInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerSalesNoteInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
