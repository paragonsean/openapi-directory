/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectForecastOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectForecastOutputModel::OAIProjectForecastOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectForecastOutputModel::OAIProjectForecastOutputModel() {
    this->initializeModel();
}

OAIProjectForecastOutputModel::~OAIProjectForecastOutputModel() {}

void OAIProjectForecastOutputModel::initializeModel() {

    m_billing_forecast_isSet = false;
    m_billing_forecast_isValid = false;

    m_billing_forecast_notes_isSet = false;
    m_billing_forecast_notes_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_expense_forecast_isSet = false;
    m_expense_forecast_isValid = false;

    m_expense_forecast_notes_isSet = false;
    m_expense_forecast_notes_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_labor_expense_forecast_isSet = false;
    m_labor_expense_forecast_isValid = false;

    m_labor_expense_forecast_notes_isSet = false;
    m_labor_expense_forecast_notes_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_revenue_forecast_isSet = false;
    m_revenue_forecast_isValid = false;

    m_revenue_forecast_notes_isSet = false;
    m_revenue_forecast_notes_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIProjectForecastOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectForecastOutputModel::fromJsonObject(QJsonObject json) {

    m_billing_forecast_isValid = ::OpenAPI::fromJsonValue(m_billing_forecast, json[QString("billingForecast")]);
    m_billing_forecast_isSet = !json[QString("billingForecast")].isNull() && m_billing_forecast_isValid;

    m_billing_forecast_notes_isValid = ::OpenAPI::fromJsonValue(m_billing_forecast_notes, json[QString("billingForecastNotes")]);
    m_billing_forecast_notes_isSet = !json[QString("billingForecastNotes")].isNull() && m_billing_forecast_notes_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_expense_forecast_isValid = ::OpenAPI::fromJsonValue(m_expense_forecast, json[QString("expenseForecast")]);
    m_expense_forecast_isSet = !json[QString("expenseForecast")].isNull() && m_expense_forecast_isValid;

    m_expense_forecast_notes_isValid = ::OpenAPI::fromJsonValue(m_expense_forecast_notes, json[QString("expenseForecastNotes")]);
    m_expense_forecast_notes_isSet = !json[QString("expenseForecastNotes")].isNull() && m_expense_forecast_notes_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_labor_expense_forecast_isValid = ::OpenAPI::fromJsonValue(m_labor_expense_forecast, json[QString("laborExpenseForecast")]);
    m_labor_expense_forecast_isSet = !json[QString("laborExpenseForecast")].isNull() && m_labor_expense_forecast_isValid;

    m_labor_expense_forecast_notes_isValid = ::OpenAPI::fromJsonValue(m_labor_expense_forecast_notes, json[QString("laborExpenseForecastNotes")]);
    m_labor_expense_forecast_notes_isSet = !json[QString("laborExpenseForecastNotes")].isNull() && m_labor_expense_forecast_notes_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_revenue_forecast_isValid = ::OpenAPI::fromJsonValue(m_revenue_forecast, json[QString("revenueForecast")]);
    m_revenue_forecast_isSet = !json[QString("revenueForecast")].isNull() && m_revenue_forecast_isValid;

    m_revenue_forecast_notes_isValid = ::OpenAPI::fromJsonValue(m_revenue_forecast_notes, json[QString("revenueForecastNotes")]);
    m_revenue_forecast_notes_isSet = !json[QString("revenueForecastNotes")].isNull() && m_revenue_forecast_notes_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIProjectForecastOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectForecastOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_forecast.isSet()) {
        obj.insert(QString("billingForecast"), ::OpenAPI::toJsonValue(m_billing_forecast));
    }
    if (m_billing_forecast_notes_isSet) {
        obj.insert(QString("billingForecastNotes"), ::OpenAPI::toJsonValue(m_billing_forecast_notes));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_expense_forecast.isSet()) {
        obj.insert(QString("expenseForecast"), ::OpenAPI::toJsonValue(m_expense_forecast));
    }
    if (m_expense_forecast_notes_isSet) {
        obj.insert(QString("expenseForecastNotes"), ::OpenAPI::toJsonValue(m_expense_forecast_notes));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_labor_expense_forecast.isSet()) {
        obj.insert(QString("laborExpenseForecast"), ::OpenAPI::toJsonValue(m_labor_expense_forecast));
    }
    if (m_labor_expense_forecast_notes_isSet) {
        obj.insert(QString("laborExpenseForecastNotes"), ::OpenAPI::toJsonValue(m_labor_expense_forecast_notes));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_revenue_forecast.isSet()) {
        obj.insert(QString("revenueForecast"), ::OpenAPI::toJsonValue(m_revenue_forecast));
    }
    if (m_revenue_forecast_notes_isSet) {
        obj.insert(QString("revenueForecastNotes"), ::OpenAPI::toJsonValue(m_revenue_forecast_notes));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

OAIMoneyOutputModel OAIProjectForecastOutputModel::getBillingForecast() const {
    return m_billing_forecast;
}
void OAIProjectForecastOutputModel::setBillingForecast(const OAIMoneyOutputModel &billing_forecast) {
    m_billing_forecast = billing_forecast;
    m_billing_forecast_isSet = true;
}

bool OAIProjectForecastOutputModel::is_billing_forecast_Set() const{
    return m_billing_forecast_isSet;
}

bool OAIProjectForecastOutputModel::is_billing_forecast_Valid() const{
    return m_billing_forecast_isValid;
}

QString OAIProjectForecastOutputModel::getBillingForecastNotes() const {
    return m_billing_forecast_notes;
}
void OAIProjectForecastOutputModel::setBillingForecastNotes(const QString &billing_forecast_notes) {
    m_billing_forecast_notes = billing_forecast_notes;
    m_billing_forecast_notes_isSet = true;
}

bool OAIProjectForecastOutputModel::is_billing_forecast_notes_Set() const{
    return m_billing_forecast_notes_isSet;
}

bool OAIProjectForecastOutputModel::is_billing_forecast_notes_Valid() const{
    return m_billing_forecast_notes_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectForecastOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProjectForecastOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProjectForecastOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProjectForecastOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProjectForecastOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectForecastOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectForecastOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectForecastOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIMoneyOutputModel OAIProjectForecastOutputModel::getExpenseForecast() const {
    return m_expense_forecast;
}
void OAIProjectForecastOutputModel::setExpenseForecast(const OAIMoneyOutputModel &expense_forecast) {
    m_expense_forecast = expense_forecast;
    m_expense_forecast_isSet = true;
}

bool OAIProjectForecastOutputModel::is_expense_forecast_Set() const{
    return m_expense_forecast_isSet;
}

bool OAIProjectForecastOutputModel::is_expense_forecast_Valid() const{
    return m_expense_forecast_isValid;
}

QString OAIProjectForecastOutputModel::getExpenseForecastNotes() const {
    return m_expense_forecast_notes;
}
void OAIProjectForecastOutputModel::setExpenseForecastNotes(const QString &expense_forecast_notes) {
    m_expense_forecast_notes = expense_forecast_notes;
    m_expense_forecast_notes_isSet = true;
}

bool OAIProjectForecastOutputModel::is_expense_forecast_notes_Set() const{
    return m_expense_forecast_notes_isSet;
}

bool OAIProjectForecastOutputModel::is_expense_forecast_notes_Valid() const{
    return m_expense_forecast_notes_isValid;
}

QString OAIProjectForecastOutputModel::getGuid() const {
    return m_guid;
}
void OAIProjectForecastOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProjectForecastOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProjectForecastOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIMoneyOutputModel OAIProjectForecastOutputModel::getLaborExpenseForecast() const {
    return m_labor_expense_forecast;
}
void OAIProjectForecastOutputModel::setLaborExpenseForecast(const OAIMoneyOutputModel &labor_expense_forecast) {
    m_labor_expense_forecast = labor_expense_forecast;
    m_labor_expense_forecast_isSet = true;
}

bool OAIProjectForecastOutputModel::is_labor_expense_forecast_Set() const{
    return m_labor_expense_forecast_isSet;
}

bool OAIProjectForecastOutputModel::is_labor_expense_forecast_Valid() const{
    return m_labor_expense_forecast_isValid;
}

QString OAIProjectForecastOutputModel::getLaborExpenseForecastNotes() const {
    return m_labor_expense_forecast_notes;
}
void OAIProjectForecastOutputModel::setLaborExpenseForecastNotes(const QString &labor_expense_forecast_notes) {
    m_labor_expense_forecast_notes = labor_expense_forecast_notes;
    m_labor_expense_forecast_notes_isSet = true;
}

bool OAIProjectForecastOutputModel::is_labor_expense_forecast_notes_Set() const{
    return m_labor_expense_forecast_notes_isSet;
}

bool OAIProjectForecastOutputModel::is_labor_expense_forecast_notes_Valid() const{
    return m_labor_expense_forecast_notes_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectForecastOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProjectForecastOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProjectForecastOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProjectForecastOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProjectForecastOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProjectForecastOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProjectForecastOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProjectForecastOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

qint32 OAIProjectForecastOutputModel::getMonth() const {
    return m_month;
}
void OAIProjectForecastOutputModel::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIProjectForecastOutputModel::is_month_Set() const{
    return m_month_isSet;
}

bool OAIProjectForecastOutputModel::is_month_Valid() const{
    return m_month_isValid;
}

OAIModelBaseWithRequiredGuid OAIProjectForecastOutputModel::getProject() const {
    return m_project;
}
void OAIProjectForecastOutputModel::setProject(const OAIModelBaseWithRequiredGuid &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectForecastOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectForecastOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

OAIMoneyOutputModel OAIProjectForecastOutputModel::getRevenueForecast() const {
    return m_revenue_forecast;
}
void OAIProjectForecastOutputModel::setRevenueForecast(const OAIMoneyOutputModel &revenue_forecast) {
    m_revenue_forecast = revenue_forecast;
    m_revenue_forecast_isSet = true;
}

bool OAIProjectForecastOutputModel::is_revenue_forecast_Set() const{
    return m_revenue_forecast_isSet;
}

bool OAIProjectForecastOutputModel::is_revenue_forecast_Valid() const{
    return m_revenue_forecast_isValid;
}

QString OAIProjectForecastOutputModel::getRevenueForecastNotes() const {
    return m_revenue_forecast_notes;
}
void OAIProjectForecastOutputModel::setRevenueForecastNotes(const QString &revenue_forecast_notes) {
    m_revenue_forecast_notes = revenue_forecast_notes;
    m_revenue_forecast_notes_isSet = true;
}

bool OAIProjectForecastOutputModel::is_revenue_forecast_notes_Set() const{
    return m_revenue_forecast_notes_isSet;
}

bool OAIProjectForecastOutputModel::is_revenue_forecast_notes_Valid() const{
    return m_revenue_forecast_notes_isValid;
}

qint32 OAIProjectForecastOutputModel::getYear() const {
    return m_year;
}
void OAIProjectForecastOutputModel::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIProjectForecastOutputModel::is_year_Set() const{
    return m_year_isSet;
}

bool OAIProjectForecastOutputModel::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIProjectForecastOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_forecast_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_forecast_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labor_expense_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labor_expense_forecast_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_forecast_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectForecastOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
