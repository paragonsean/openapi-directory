/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectInputModelBase.h
 *
 * 
 */

#ifndef OAIProjectInputModelBase_H
#define OAIProjectInputModelBase_H

#include <QJsonObject>

#include "OAIInvoiceTemplateSubModel.h"
#include "OAIMoneyInputModelWithNullableAmount.h"
#include "OAISimpleInputModel.h"
#include "OAISimpleInputRequiredModel.h"
#include "OAISimpleProjectStatusInputModel.h"
#include "OAISimpleSalesStatusInputModel.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleInputModel;
class OAISimpleInputRequiredModel;
class OAIMoneyInputModelWithNullableAmount;
class OAIInvoiceTemplateSubModel;
class OAISimpleProjectStatusInputModel;
class OAISimpleSalesStatusInputModel;

class OAIProjectInputModelBase : public OAIObject {
public:
    OAIProjectInputModelBase();
    OAIProjectInputModelBase(QString json);
    ~OAIProjectInputModelBase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISimpleInputModel getBillingContact() const;
    void setBillingContact(const OAISimpleInputModel &billing_contact);
    bool is_billing_contact_Set() const;
    bool is_billing_contact_Valid() const;

    OAISimpleInputRequiredModel getBusinessUnit() const;
    void setBusinessUnit(const OAISimpleInputRequiredModel &business_unit);
    bool is_business_unit_Set() const;
    bool is_business_unit_Valid() const;

    qint32 getCompletionEstimatePercentage() const;
    void setCompletionEstimatePercentage(const qint32 &completion_estimate_percentage);
    bool is_completion_estimate_percentage_Set() const;
    bool is_completion_estimate_percentage_Valid() const;

    OAISimpleInputModel getCostCenter() const;
    void setCostCenter(const OAISimpleInputModel &cost_center);
    bool is_cost_center_Set() const;
    bool is_cost_center_Valid() const;

    OAISimpleInputRequiredModel getCurrency() const;
    void setCurrency(const OAISimpleInputRequiredModel &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    OAISimpleInputRequiredModel getCustomer() const;
    void setCustomer(const OAISimpleInputRequiredModel &customer);
    bool is_customer_Set() const;
    bool is_customer_Valid() const;

    OAISimpleInputModel getCustomerContact() const;
    void setCustomerContact(const OAISimpleInputModel &customer_contact);
    bool is_customer_contact_Set() const;
    bool is_customer_contact_Valid() const;

    QDate getDeadline() const;
    void setDeadline(const QDate &deadline);
    bool is_deadline_Set() const;
    bool is_deadline_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDate getExpectedOrderDate() const;
    void setExpectedOrderDate(const QDate &expected_order_date);
    bool is_expected_order_date_Set() const;
    bool is_expected_order_date_Valid() const;

    OAIMoneyInputModelWithNullableAmount getExpectedValue() const;
    void setExpectedValue(const OAIMoneyInputModelWithNullableAmount &expected_value);
    bool is_expected_value_Set() const;
    bool is_expected_value_Valid() const;

    QString getInternalName() const;
    void setInternalName(const QString &internal_name);
    bool is_internal_name_Set() const;
    bool is_internal_name_Valid() const;

    QString getInvoiceNotes() const;
    void setInvoiceNotes(const QString &invoice_notes);
    bool is_invoice_notes_Set() const;
    bool is_invoice_notes_Valid() const;

    OAIInvoiceTemplateSubModel getInvoiceTemplate() const;
    void setInvoiceTemplate(const OAIInvoiceTemplateSubModel &invoice_template);
    bool is_invoice_template_Set() const;
    bool is_invoice_template_Valid() const;

    bool isIsClosed() const;
    void setIsClosed(const bool &is_closed);
    bool is_is_closed_Set() const;
    bool is_is_closed_Valid() const;

    bool isIsInternal() const;
    void setIsInternal(const bool &is_internal);
    bool is_is_internal_Set() const;
    bool is_is_internal_Valid() const;

    bool isIsJoiningAllowed() const;
    void setIsJoiningAllowed(const bool &is_joining_allowed);
    bool is_is_joining_allowed_Set() const;
    bool is_is_joining_allowed_Valid() const;

    OAISimpleInputModel getLeadSource() const;
    void setLeadSource(const OAISimpleInputModel &lead_source);
    bool is_lead_source_Set() const;
    bool is_lead_source_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getNumber() const;
    void setNumber(const qint64 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getOrderNumber() const;
    void setOrderNumber(const QString &order_number);
    bool is_order_number_Set() const;
    bool is_order_number_Valid() const;

    QString getOurReference() const;
    void setOurReference(const QString &our_reference);
    bool is_our_reference_Set() const;
    bool is_our_reference_Valid() const;

    qint32 getPaymentTerm() const;
    void setPaymentTerm(const qint32 &payment_term);
    bool is_payment_term_Set() const;
    bool is_payment_term_Valid() const;

    qint32 getProbability() const;
    void setProbability(const qint32 &probability);
    bool is_probability_Set() const;
    bool is_probability_Valid() const;

    OAISimpleInputModel getProjectOwner() const;
    void setProjectOwner(const OAISimpleInputModel &project_owner);
    bool is_project_owner_Set() const;
    bool is_project_owner_Valid() const;

    OAISimpleProjectStatusInputModel getProjectStatus() const;
    void setProjectStatus(const OAISimpleProjectStatusInputModel &project_status);
    bool is_project_status_Set() const;
    bool is_project_status_Valid() const;

    OAISimpleInputModel getSalesPerson() const;
    void setSalesPerson(const OAISimpleInputModel &sales_person);
    bool is_sales_person_Set() const;
    bool is_sales_person_Valid() const;

    OAISimpleSalesStatusInputModel getSalesStatus() const;
    void setSalesStatus(const OAISimpleSalesStatusInputModel &sales_status);
    bool is_sales_status_Set() const;
    bool is_sales_status_Valid() const;

    QDate getStartDate() const;
    void setStartDate(const QDate &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    bool isUseOvertimeMultipliers() const;
    void setUseOvertimeMultipliers(const bool &use_overtime_multipliers);
    bool is_use_overtime_multipliers_Set() const;
    bool is_use_overtime_multipliers_Valid() const;

    bool isUseProductsFromSetting() const;
    void setUseProductsFromSetting(const bool &use_products_from_setting);
    bool is_use_products_from_setting_Set() const;
    bool is_use_products_from_setting_Valid() const;

    bool isUseWorktypesFromSetting() const;
    void setUseWorktypesFromSetting(const bool &use_worktypes_from_setting);
    bool is_use_worktypes_from_setting_Set() const;
    bool is_use_worktypes_from_setting_Valid() const;

    QString getYourReference() const;
    void setYourReference(const QString &your_reference);
    bool is_your_reference_Set() const;
    bool is_your_reference_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISimpleInputModel m_billing_contact;
    bool m_billing_contact_isSet;
    bool m_billing_contact_isValid;

    OAISimpleInputRequiredModel m_business_unit;
    bool m_business_unit_isSet;
    bool m_business_unit_isValid;

    qint32 m_completion_estimate_percentage;
    bool m_completion_estimate_percentage_isSet;
    bool m_completion_estimate_percentage_isValid;

    OAISimpleInputModel m_cost_center;
    bool m_cost_center_isSet;
    bool m_cost_center_isValid;

    OAISimpleInputRequiredModel m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    OAISimpleInputRequiredModel m_customer;
    bool m_customer_isSet;
    bool m_customer_isValid;

    OAISimpleInputModel m_customer_contact;
    bool m_customer_contact_isSet;
    bool m_customer_contact_isValid;

    QDate m_deadline;
    bool m_deadline_isSet;
    bool m_deadline_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDate m_expected_order_date;
    bool m_expected_order_date_isSet;
    bool m_expected_order_date_isValid;

    OAIMoneyInputModelWithNullableAmount m_expected_value;
    bool m_expected_value_isSet;
    bool m_expected_value_isValid;

    QString m_internal_name;
    bool m_internal_name_isSet;
    bool m_internal_name_isValid;

    QString m_invoice_notes;
    bool m_invoice_notes_isSet;
    bool m_invoice_notes_isValid;

    OAIInvoiceTemplateSubModel m_invoice_template;
    bool m_invoice_template_isSet;
    bool m_invoice_template_isValid;

    bool m_is_closed;
    bool m_is_closed_isSet;
    bool m_is_closed_isValid;

    bool m_is_internal;
    bool m_is_internal_isSet;
    bool m_is_internal_isValid;

    bool m_is_joining_allowed;
    bool m_is_joining_allowed_isSet;
    bool m_is_joining_allowed_isValid;

    OAISimpleInputModel m_lead_source;
    bool m_lead_source_isSet;
    bool m_lead_source_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_order_number;
    bool m_order_number_isSet;
    bool m_order_number_isValid;

    QString m_our_reference;
    bool m_our_reference_isSet;
    bool m_our_reference_isValid;

    qint32 m_payment_term;
    bool m_payment_term_isSet;
    bool m_payment_term_isValid;

    qint32 m_probability;
    bool m_probability_isSet;
    bool m_probability_isValid;

    OAISimpleInputModel m_project_owner;
    bool m_project_owner_isSet;
    bool m_project_owner_isValid;

    OAISimpleProjectStatusInputModel m_project_status;
    bool m_project_status_isSet;
    bool m_project_status_isValid;

    OAISimpleInputModel m_sales_person;
    bool m_sales_person_isSet;
    bool m_sales_person_isValid;

    OAISimpleSalesStatusInputModel m_sales_status;
    bool m_sales_status_isSet;
    bool m_sales_status_isValid;

    QDate m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    bool m_use_overtime_multipliers;
    bool m_use_overtime_multipliers_isSet;
    bool m_use_overtime_multipliers_isValid;

    bool m_use_products_from_setting;
    bool m_use_products_from_setting_isSet;
    bool m_use_products_from_setting_isValid;

    bool m_use_worktypes_from_setting;
    bool m_use_worktypes_from_setting_isSet;
    bool m_use_worktypes_from_setting_isValid;

    QString m_your_reference;
    bool m_your_reference_isSet;
    bool m_your_reference_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectInputModelBase)

#endif // OAIProjectInputModelBase_H
