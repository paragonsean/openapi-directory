/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectWorkHourPriceInputModel.h
 *
 * 
 */

#ifndef OAIProjectWorkHourPriceInputModel_H
#define OAIProjectWorkHourPriceInputModel_H

#include <QJsonObject>

#include "OAIMoneyInputModel.h"
#include "OAISimpleInputModel.h"
#include "OAISimpleInputRequiredModel.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleInputRequiredModel;
class OAISimpleInputModel;
class OAIMoneyInputModel;

class OAIProjectWorkHourPriceInputModel : public OAIObject {
public:
    OAIProjectWorkHourPriceInputModel();
    OAIProjectWorkHourPriceInputModel(QString json);
    ~OAIProjectWorkHourPriceInputModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsBillable() const;
    void setIsBillable(const bool &is_billable);
    bool is_is_billable_Set() const;
    bool is_is_billable_Valid() const;

    OAISimpleInputRequiredModel getPhase() const;
    void setPhase(const OAISimpleInputRequiredModel &phase);
    bool is_phase_Set() const;
    bool is_phase_Valid() const;

    OAISimpleInputModel getProject() const;
    void setProject(const OAISimpleInputModel &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    OAIMoneyInputModel getUnitPrice() const;
    void setUnitPrice(const OAIMoneyInputModel &unit_price);
    bool is_unit_price_Set() const;
    bool is_unit_price_Valid() const;

    OAISimpleInputModel getUser() const;
    void setUser(const OAISimpleInputModel &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAISimpleInputModel getWorkType() const;
    void setWorkType(const OAISimpleInputModel &work_type);
    bool is_work_type_Set() const;
    bool is_work_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_billable;
    bool m_is_billable_isSet;
    bool m_is_billable_isValid;

    OAISimpleInputRequiredModel m_phase;
    bool m_phase_isSet;
    bool m_phase_isValid;

    OAISimpleInputModel m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    OAIMoneyInputModel m_unit_price;
    bool m_unit_price_isSet;
    bool m_unit_price_isValid;

    OAISimpleInputModel m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAISimpleInputModel m_work_type;
    bool m_work_type_isSet;
    bool m_work_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectWorkHourPriceInputModel)

#endif // OAIProjectWorkHourPriceInputModel_H
