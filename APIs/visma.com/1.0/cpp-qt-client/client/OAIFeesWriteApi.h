/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeesWriteApi_H
#define OAI_OAIFeesWriteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAIFlatRateInputModel.h"
#include "OAIFlatRateOutputModel.h"
#include "OAIPatchOperation.h"
#include "OAIProjectFeeInputModel.h"
#include "OAIProjectFeeOutputModel.h"
#include "OAIProjectRecurringFeeRuleInputModel.h"
#include "OAIProjectRecurringFeeRuleOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeesWriteApi : public QObject {
    Q_OBJECT

public:
    OAIFeesWriteApi(const int timeOut = 0);
    ~OAIFeesWriteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void flatRatesPatchFlatRate(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_flat_rate_input_model OAIFlatRateInputModel [optional]
    */
    virtual void flatRatesPostFlatRate(const ::OpenAPI::OptionalParam<OAIFlatRateInputModel> &oai_flat_rate_input_model = ::OpenAPI::OptionalParam<OAIFlatRateInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectFeesPatchProjectFee(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_fee_input_model OAIProjectFeeInputModel [optional]
    */
    virtual void projectFeesPostProjectFee(const ::OpenAPI::OptionalParam<OAIProjectFeeInputModel> &oai_project_fee_input_model = ::OpenAPI::OptionalParam<OAIProjectFeeInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void projectRecurringFeeRulesPatchProjectRecurringFeeRule(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_project_recurring_fee_rule_input_model OAIProjectRecurringFeeRuleInputModel [optional]
    */
    virtual void projectRecurringFeeRulesPostProjectRecurringFeeRule(const ::OpenAPI::OptionalParam<OAIProjectRecurringFeeRuleInputModel> &oai_project_recurring_fee_rule_input_model = ::OpenAPI::OptionalParam<OAIProjectRecurringFeeRuleInputModel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void flatRatesPatchFlatRateCallback(OAIHttpRequestWorker *worker);
    void flatRatesPostFlatRateCallback(OAIHttpRequestWorker *worker);
    void projectFeesPatchProjectFeeCallback(OAIHttpRequestWorker *worker);
    void projectFeesPostProjectFeeCallback(OAIHttpRequestWorker *worker);
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleCallback(OAIHttpRequestWorker *worker);
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void flatRatesPatchFlatRateSignal(QList<OAIFlatRateOutputModel> summary);
    void flatRatesPostFlatRateSignal(OAIFlatRateOutputModel summary);
    void projectFeesPatchProjectFeeSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectFeesPostProjectFeeSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignal(QList<OAIProjectRecurringFeeRuleOutputModel> summary);
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleSignal(QList<OAIProjectRecurringFeeRuleOutputModel> summary);


    void flatRatesPatchFlatRateSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlatRateOutputModel> summary);
    void flatRatesPostFlatRateSignalFull(OAIHttpRequestWorker *worker, OAIFlatRateOutputModel summary);
    void projectFeesPatchProjectFeeSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectFeesPostProjectFeeSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectRecurringFeeRuleOutputModel> summary);
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectRecurringFeeRuleOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use flatRatesPatchFlatRateSignalError() instead")
    void flatRatesPatchFlatRateSignalE(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesPatchFlatRateSignalError(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flatRatesPostFlatRateSignalError() instead")
    void flatRatesPostFlatRateSignalE(OAIFlatRateOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesPostFlatRateSignalError(OAIFlatRateOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesPatchProjectFeeSignalError() instead")
    void projectFeesPatchProjectFeeSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesPatchProjectFeeSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesPostProjectFeeSignalError() instead")
    void projectFeesPostProjectFeeSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesPostProjectFeeSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalError() instead")
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalE(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalError(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalError() instead")
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalE(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalError(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use flatRatesPatchFlatRateSignalErrorFull() instead")
    void flatRatesPatchFlatRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesPatchFlatRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flatRatesPostFlatRateSignalErrorFull() instead")
    void flatRatesPostFlatRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesPostFlatRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesPatchProjectFeeSignalErrorFull() instead")
    void projectFeesPatchProjectFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesPatchProjectFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesPostProjectFeeSignalErrorFull() instead")
    void projectFeesPostProjectFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesPostProjectFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalErrorFull() instead")
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesPatchProjectRecurringFeeRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalErrorFull() instead")
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesPostProjectRecurringFeeRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
