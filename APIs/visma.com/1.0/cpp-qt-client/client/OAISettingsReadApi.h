/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsReadApi_H
#define OAI_OAISettingsReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivityCategory.h"
#include "OAIActivityTypeModel.h"
#include "OAIBankAccountOutputModel.h"
#include "OAIBusinessUnitModel.h"
#include "OAICommunicationTypeModel.h"
#include "OAIContactRoleModel.h"
#include "OAICostAccountModel.h"
#include "OAICostCenterModel.h"
#include "OAICountryModel.h"
#include "OAICountryRegionModel.h"
#include "OAICurrencyOutputModel.h"
#include "OAICustomPropertyModel.h"
#include "OAICustomerCustomPropertySelectionItemOutputModel.h"
#include "OAIExceptionModel.h"
#include "OAIExpensesClass.h"
#include "OAIFormattingCultureModel.h"
#include "OAIHolidayModel.h"
#include "OAIIndustryModel.h"
#include "OAIInvoiceStatusModel.h"
#include "OAIInvoiceTemplateModel.h"
#include "OAIKeyValuePairOfStringAndSortDirection.h"
#include "OAIKeywordCategory.h"
#include "OAIKeywordModel.h"
#include "OAIKpiFormulaCategory.h"
#include "OAIKpiFormulaModelBase.h"
#include "OAILanguageModel.h"
#include "OAILeadSourceModel.h"
#include "OAIMarketSegmentModel.h"
#include "OAIOvertimeModel.h"
#include "OAIOvertimePriceModel.h"
#include "OAIPermissionProfileModel.h"
#include "OAIPhaseStatusTypeModel.h"
#include "OAIPriceListModel.h"
#include "OAIPriceListOutputModel.h"
#include "OAIPricelistVersionOutputModel.h"
#include "OAIProductCategoryModel.h"
#include "OAIProductCountrySettingsModel.h"
#include "OAIProductOutputModel.h"
#include "OAIProductPriceOutputModel.h"
#include "OAIProductType.h"
#include "OAIProjectBillingCustomerModel2.h"
#include "OAIProjectCustomPropertySelectionItemOutputModel.h"
#include "OAIProjectMemberCostExceptionOutputModel.h"
#include "OAIProjectStatusTypeModel.h"
#include "OAIProjectTaskStatusModel.h"
#include "OAIProposalStatusOutputModel.h"
#include "OAIRoleOutputModel.h"
#include "OAISalesAccountModel.h"
#include "OAISalesStatusType.h"
#include "OAISalesStatusTypeOutputModel.h"
#include "OAITimeEntryTypeModel.h"
#include "OAITimezoneModel.h"
#include "OAITravelExpenseTypeCountrySettingsModel.h"
#include "OAITravelExpenseTypeOutputModel.h"
#include "OAITravelPriceOutputModel.h"
#include "OAITravelReimbursementStatusModel.h"
#include "OAIUsageModel2.h"
#include "OAIUserCustomPropertyOutputModel.h"
#include "OAIUserCustomPropertySelectionItemOutputModel.h"
#include "OAIVatRateOutputModel.h"
#include "OAIWorkContractOutputModel.h"
#include "OAIWorkHourPriceOutputModel.h"
#include "OAIWorkTypeOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsReadApi : public QObject {
    Q_OBJECT

public:
    OAISettingsReadApi(const int timeOut = 0);
    ~OAISettingsReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void activityTypesGetActivityType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  category QList<OAIActivityCategory> [optional]
    */
    virtual void activityTypesGetActivityTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<OAIActivityCategory>> &category = ::OpenAPI::OptionalParam<QList<OAIActivityCategory>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void bankAccountsGetBankAccount(const QString &guid);

    /**
    * @param[in]  company_guid QString [optional]
    * @param[in]  business_unit_guid QString [optional]
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void bankAccountsGetBankAccounts(const ::OpenAPI::OptionalParam<QString> &company_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void businessUnitsGetBusinessUnit(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  company_guid QString [optional]
    * @param[in]  company_country_guid QString [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  code QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void businessUnitsGetBusinessUnits(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &company_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_country_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void communicationTypesGetCommunicationType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void communicationTypesGetCommunicationTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void contactRolesGetContactRole(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    */
    virtual void contactRolesGetContactRoles(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void costAccountsGetCostAccount(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void costAccountsGetCostAccounts(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void costCentersGetCostCenter(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    * @param[in]  identifier QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void costCentersGetCostCenters(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>(), const ::OpenAPI::OptionalParam<QString> &identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());


    virtual void countriesGetCountries();

    /**
    * @param[in]  guid QString [required]
    */
    virtual void countriesGetCountry(const QString &guid);

    /**
    * @param[in]  code2 QString [required]
    */
    virtual void countriesGetCountryByCode2(const QString &code2);

    /**
    * @param[in]  code3 QString [required]
    */
    virtual void countriesGetCountryByCode3(const QString &code3);

    /**
    * @param[in]  country_name QString [required]
    */
    virtual void countriesGetCountryByName(const QString &country_name);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void countriesGetCountryRegion(const QString &guid);

    /**
    * @param[in]  country_guid QString [required]
    */
    virtual void countriesGetCountryRegions(const QString &country_guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void currenciesGetCurrencies(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void currenciesGetCurrency(const QString &guid);

    /**
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  active bool [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  is_in_use bool [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void customerCustomPropertiesGetCustomerCustomProperties(const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_in_use = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCustomPropertiesGetCustomerCustomProperty(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem(const QString &guid);

    /**
    * @param[in]  custom_property_guid QString [required]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems(const QString &custom_property_guid, const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void formattingCulturesGetFormattingCulture(const QString &guid);


    virtual void formattingCulturesGetFormattings();

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  country_guid QString [optional]
    */
    virtual void holidaysGetHolidays(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  country_guid QString [optional]
    */
    virtual void holidaysGetHolidaysByTimePeriod(const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &country_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    */
    virtual void industriesGetIndustries(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void industriesGetIndustry(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void invoiceStatusesGetInvoiceStatus(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void invoiceStatusesGetInvoiceStatuses(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void invoiceTemplatesGetInvoiceTemplate(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void invoiceTemplatesGetInvoiceTemplates(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void keywordsGetKeyword(const QString &guid);

    /**
    * @param[in]  category OAIKeywordCategory [optional]
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    * @param[in]  keyword QString [optional]
    */
    virtual void keywordsGetKeywords(const ::OpenAPI::OptionalParam<OAIKeywordCategory> &category = ::OpenAPI::OptionalParam<OAIKeywordCategory>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>(), const ::OpenAPI::OptionalParam<QString> &keyword = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category OAIKpiFormulaCategory [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    * @param[in]  include_definition bool [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void kpiFormulasGetKpiFormulas(const ::OpenAPI::OptionalParam<OAIKpiFormulaCategory> &category = ::OpenAPI::OptionalParam<OAIKpiFormulaCategory>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>(), const ::OpenAPI::OptionalParam<bool> &include_definition = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void languagesGetLanguage(const QString &guid);

    /**
    * @param[in]  is_invoice_language bool [optional]
    */
    virtual void languagesGetLanguages(const ::OpenAPI::OptionalParam<bool> &is_invoice_language = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void leadSourcesGetLeadSource(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    */
    virtual void leadSourcesGetLeadSources(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void marketSegmentsGetMarketSegment(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  include_child_segments bool [optional]
    */
    virtual void marketSegmentsGetMarketSegments(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_child_segments = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void overtimePricesGetOvertimePrice(const QString &guid);

    /**
    * @param[in]  pricelist_version_guid QString [required]
    */
    virtual void overtimePricesGetOvertimePrices(const QString &pricelist_version_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void overtimesGetOvertime(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void overtimesGetOvertimes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void permissionProfilesGetPermissionProfile(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void permissionProfilesGetPermissionProfiles(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void phaseStatusTypesGetPhaseStatusType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void phaseStatusTypesGetPhaseStatusTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void priceListVersionsGetPricelistVersion(const QString &guid);

    /**
    * @param[in]  pricelist_guid QString [required]
    */
    virtual void priceListVersionsGetPricelistVersionsByPricelist(const QString &pricelist_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void priceListsGetPriceList(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  currency_guid QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    * @param[in]  name QString [optional]
    */
    virtual void priceListsGetPricelists(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void productCategoriesGetProductCategories(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void productCategoriesGetProductCategory(const QString &guid);

    /**
    * @param[in]  product_guid QString [required]
    */
    virtual void productCountrySettingsGetProductCountrySettings(const QString &product_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void productPricesGetProductPrice(const QString &guid);

    /**
    * @param[in]  pricelist_version_guid QString [required]
    * @param[in]  from_pricelist_only bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  product_code QString [optional]
    * @param[in]  product_guids QList<QString> [optional]
    * @param[in]  is_volume_priced bool [optional]
    * @param[in]  product_category_guids QList<QString> [optional]
    * @param[in]  product_types QList<OAIProductType> [optional]
    */
    virtual void productPricesGetProductPrices(const QString &pricelist_version_guid, const ::OpenAPI::OptionalParam<bool> &from_pricelist_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &product_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_volume_priced = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_category_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIProductType>> &product_types = ::OpenAPI::OptionalParam<QList<OAIProductType>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void productsGetProduct(const QString &guid);

    /**
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  type OAIProductType [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  code QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void productsGetProducts(const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProductType> &type = ::OpenAPI::OptionalParam<OAIProductType>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectBillingCustomersGetProjectBillingCustomer(const QString &guid);

    /**
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  active bool [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  is_in_use bool [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void projectCustomPropertiesGetProjectCustomProperties(const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_in_use = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectCustomPropertiesGetProjectCustomProperty(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem(const QString &guid);

    /**
    * @param[in]  custom_property_guid QString [required]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems(const QString &custom_property_guid, const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectMemberCostExceptionsGetProjectMemberCostException(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectStatusTypesGetProjectStatusType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void projectStatusTypesGetProjectStatusTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectTaskStatusesGetProjectTaskStatus(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void projectTaskStatusesGetProjectTaskStatuses(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalStatusesGetProposalStatus(const QString &guid);

    /**
    * @param[in]  is_active bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  proposal_status_name QString [optional]
    */
    virtual void proposalStatusesGetProposalStatuses(const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &proposal_status_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void proposalStatusesGetUsage(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void rolesGetRole(const QString &guid);

    /**
    * @param[in]  is_active bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void rolesGetRoles(const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesAccountsGetSalesAccount(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void salesAccountsGetSalesAccounts(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesStatusTypesGetSalesStatusType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  sales_state OAISalesStatusType [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void salesStatusTypesGetSalesStatusTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAISalesStatusType> &sales_state = ::OpenAPI::OptionalParam<OAISalesStatusType>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void timeEntryTypesGetTimeEntryType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void timeEntryTypesGetTimeEntryTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void timezonesGetTimezone(const QString &guid);


    virtual void timezonesGetTimezones();

    /**
    * @param[in]  travel_expense_type_guid QString [required]
    */
    virtual void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings(const QString &travel_expense_type_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void travelExpenseTypesGetTravelExpenseType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  code QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void travelExpenseTypesGetTravelExpenseTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void travelPricesGetTravelPrice(const QString &guid);

    /**
    * @param[in]  pricelist_version_guid QString [required]
    * @param[in]  from_pricelist_only bool [optional]
    * @param[in]  expense_classes QList<OAIExpensesClass> [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    */
    virtual void travelPricesGetTravelPrices(const QString &pricelist_version_guid, const ::OpenAPI::OptionalParam<bool> &from_pricelist_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIExpensesClass>> &expense_classes = ::OpenAPI::OptionalParam<QList<OAIExpensesClass>>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void travelReimbursementStatusGetTravelReimbursementStatus(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void travelReimbursementStatusGetTravelReimbursementStatuses(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  is_in_use bool [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void userCustomPropertiesGetUserCustomProperties(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_in_use = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void userCustomPropertiesGetUserCustomProperty(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem(const QString &guid);

    /**
    * @param[in]  custom_property_guid QString [required]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems(const QString &custom_property_guid, const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void vatRatesGetVatRate(const QString &guid);

    /**
    * @param[in]  country_guid QString [optional]
    * @param[in]  active bool [optional]
    */
    virtual void vatRatesGetVatRates(const ::OpenAPI::OptionalParam<QString> &country_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void workContractsGetWorkContract(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void workHourPricesGetWorkHourPrice(const QString &guid);

    /**
    * @param[in]  pricelist_version_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void workHourPricesGetWorkHourPrices(const QString &pricelist_version_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void workTypesGetWorkType(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  productive bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  code QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void workTypesGetWorkTypes(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &productive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activityTypesGetActivityTypeCallback(OAIHttpRequestWorker *worker);
    void activityTypesGetActivityTypesCallback(OAIHttpRequestWorker *worker);
    void bankAccountsGetBankAccountCallback(OAIHttpRequestWorker *worker);
    void bankAccountsGetBankAccountsCallback(OAIHttpRequestWorker *worker);
    void businessUnitsGetBusinessUnitCallback(OAIHttpRequestWorker *worker);
    void businessUnitsGetBusinessUnitsCallback(OAIHttpRequestWorker *worker);
    void communicationTypesGetCommunicationTypeCallback(OAIHttpRequestWorker *worker);
    void communicationTypesGetCommunicationTypesCallback(OAIHttpRequestWorker *worker);
    void contactRolesGetContactRoleCallback(OAIHttpRequestWorker *worker);
    void contactRolesGetContactRolesCallback(OAIHttpRequestWorker *worker);
    void costAccountsGetCostAccountCallback(OAIHttpRequestWorker *worker);
    void costAccountsGetCostAccountsCallback(OAIHttpRequestWorker *worker);
    void costCentersGetCostCenterCallback(OAIHttpRequestWorker *worker);
    void costCentersGetCostCentersCallback(OAIHttpRequestWorker *worker);
    void countriesGetCountriesCallback(OAIHttpRequestWorker *worker);
    void countriesGetCountryCallback(OAIHttpRequestWorker *worker);
    void countriesGetCountryByCode2Callback(OAIHttpRequestWorker *worker);
    void countriesGetCountryByCode3Callback(OAIHttpRequestWorker *worker);
    void countriesGetCountryByNameCallback(OAIHttpRequestWorker *worker);
    void countriesGetCountryRegionCallback(OAIHttpRequestWorker *worker);
    void countriesGetCountryRegionsCallback(OAIHttpRequestWorker *worker);
    void currenciesGetCurrenciesCallback(OAIHttpRequestWorker *worker);
    void currenciesGetCurrencyCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertiesGetCustomerCustomPropertiesCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertiesGetCustomerCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsCallback(OAIHttpRequestWorker *worker);
    void formattingCulturesGetFormattingCultureCallback(OAIHttpRequestWorker *worker);
    void formattingCulturesGetFormattingsCallback(OAIHttpRequestWorker *worker);
    void holidaysGetHolidaysCallback(OAIHttpRequestWorker *worker);
    void holidaysGetHolidaysByTimePeriodCallback(OAIHttpRequestWorker *worker);
    void industriesGetIndustriesCallback(OAIHttpRequestWorker *worker);
    void industriesGetIndustryCallback(OAIHttpRequestWorker *worker);
    void invoiceStatusesGetInvoiceStatusCallback(OAIHttpRequestWorker *worker);
    void invoiceStatusesGetInvoiceStatusesCallback(OAIHttpRequestWorker *worker);
    void invoiceTemplatesGetInvoiceTemplateCallback(OAIHttpRequestWorker *worker);
    void invoiceTemplatesGetInvoiceTemplatesCallback(OAIHttpRequestWorker *worker);
    void keywordsGetKeywordCallback(OAIHttpRequestWorker *worker);
    void keywordsGetKeywordsCallback(OAIHttpRequestWorker *worker);
    void kpiFormulasGetKpiFormulasCallback(OAIHttpRequestWorker *worker);
    void languagesGetLanguageCallback(OAIHttpRequestWorker *worker);
    void languagesGetLanguagesCallback(OAIHttpRequestWorker *worker);
    void leadSourcesGetLeadSourceCallback(OAIHttpRequestWorker *worker);
    void leadSourcesGetLeadSourcesCallback(OAIHttpRequestWorker *worker);
    void marketSegmentsGetMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void marketSegmentsGetMarketSegmentsCallback(OAIHttpRequestWorker *worker);
    void overtimePricesGetOvertimePriceCallback(OAIHttpRequestWorker *worker);
    void overtimePricesGetOvertimePricesCallback(OAIHttpRequestWorker *worker);
    void overtimesGetOvertimeCallback(OAIHttpRequestWorker *worker);
    void overtimesGetOvertimesCallback(OAIHttpRequestWorker *worker);
    void permissionProfilesGetPermissionProfileCallback(OAIHttpRequestWorker *worker);
    void permissionProfilesGetPermissionProfilesCallback(OAIHttpRequestWorker *worker);
    void phaseStatusTypesGetPhaseStatusTypeCallback(OAIHttpRequestWorker *worker);
    void phaseStatusTypesGetPhaseStatusTypesCallback(OAIHttpRequestWorker *worker);
    void priceListVersionsGetPricelistVersionCallback(OAIHttpRequestWorker *worker);
    void priceListVersionsGetPricelistVersionsByPricelistCallback(OAIHttpRequestWorker *worker);
    void priceListsGetPriceListCallback(OAIHttpRequestWorker *worker);
    void priceListsGetPricelistsCallback(OAIHttpRequestWorker *worker);
    void productCategoriesGetProductCategoriesCallback(OAIHttpRequestWorker *worker);
    void productCategoriesGetProductCategoryCallback(OAIHttpRequestWorker *worker);
    void productCountrySettingsGetProductCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void productPricesGetProductPriceCallback(OAIHttpRequestWorker *worker);
    void productPricesGetProductPricesCallback(OAIHttpRequestWorker *worker);
    void productsGetProductCallback(OAIHttpRequestWorker *worker);
    void productsGetProductsCallback(OAIHttpRequestWorker *worker);
    void projectBillingCustomersGetProjectBillingCustomerCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertiesGetProjectCustomPropertiesCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertiesGetProjectCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsCallback(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionCallback(OAIHttpRequestWorker *worker);
    void projectStatusTypesGetProjectStatusTypeCallback(OAIHttpRequestWorker *worker);
    void projectStatusTypesGetProjectStatusTypesCallback(OAIHttpRequestWorker *worker);
    void projectTaskStatusesGetProjectTaskStatusCallback(OAIHttpRequestWorker *worker);
    void projectTaskStatusesGetProjectTaskStatusesCallback(OAIHttpRequestWorker *worker);
    void proposalStatusesGetProposalStatusCallback(OAIHttpRequestWorker *worker);
    void proposalStatusesGetProposalStatusesCallback(OAIHttpRequestWorker *worker);
    void proposalStatusesGetUsageCallback(OAIHttpRequestWorker *worker);
    void rolesGetRoleCallback(OAIHttpRequestWorker *worker);
    void rolesGetRolesCallback(OAIHttpRequestWorker *worker);
    void salesAccountsGetSalesAccountCallback(OAIHttpRequestWorker *worker);
    void salesAccountsGetSalesAccountsCallback(OAIHttpRequestWorker *worker);
    void salesStatusTypesGetSalesStatusTypeCallback(OAIHttpRequestWorker *worker);
    void salesStatusTypesGetSalesStatusTypesCallback(OAIHttpRequestWorker *worker);
    void timeEntryTypesGetTimeEntryTypeCallback(OAIHttpRequestWorker *worker);
    void timeEntryTypesGetTimeEntryTypesCallback(OAIHttpRequestWorker *worker);
    void timezonesGetTimezoneCallback(OAIHttpRequestWorker *worker);
    void timezonesGetTimezonesCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypesGetTravelExpenseTypeCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypesGetTravelExpenseTypesCallback(OAIHttpRequestWorker *worker);
    void travelPricesGetTravelPriceCallback(OAIHttpRequestWorker *worker);
    void travelPricesGetTravelPricesCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementStatusGetTravelReimbursementStatusCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementStatusGetTravelReimbursementStatusesCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertiesGetUserCustomPropertiesCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertiesGetUserCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsCallback(OAIHttpRequestWorker *worker);
    void vatRatesGetVatRateCallback(OAIHttpRequestWorker *worker);
    void vatRatesGetVatRatesCallback(OAIHttpRequestWorker *worker);
    void workContractsGetWorkContractCallback(OAIHttpRequestWorker *worker);
    void workHourPricesGetWorkHourPriceCallback(OAIHttpRequestWorker *worker);
    void workHourPricesGetWorkHourPricesCallback(OAIHttpRequestWorker *worker);
    void workTypesGetWorkTypeCallback(OAIHttpRequestWorker *worker);
    void workTypesGetWorkTypesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activityTypesGetActivityTypeSignal(OAIActivityTypeModel summary);
    void activityTypesGetActivityTypesSignal(QList<OAIActivityTypeModel> summary);
    void bankAccountsGetBankAccountSignal(OAIBankAccountOutputModel summary);
    void bankAccountsGetBankAccountsSignal(QList<OAIBankAccountOutputModel> summary);
    void businessUnitsGetBusinessUnitSignal(OAIBusinessUnitModel summary);
    void businessUnitsGetBusinessUnitsSignal(QList<OAIBusinessUnitModel> summary);
    void communicationTypesGetCommunicationTypeSignal(OAICommunicationTypeModel summary);
    void communicationTypesGetCommunicationTypesSignal(QList<OAICommunicationTypeModel> summary);
    void contactRolesGetContactRoleSignal(OAIContactRoleModel summary);
    void contactRolesGetContactRolesSignal(QList<OAIContactRoleModel> summary);
    void costAccountsGetCostAccountSignal(OAICostAccountModel summary);
    void costAccountsGetCostAccountsSignal(QList<OAICostAccountModel> summary);
    void costCentersGetCostCenterSignal(OAICostCenterModel summary);
    void costCentersGetCostCentersSignal(QList<OAICostCenterModel> summary);
    void countriesGetCountriesSignal(QList<OAICountryModel> summary);
    void countriesGetCountrySignal(OAICountryModel summary);
    void countriesGetCountryByCode2Signal(QList<OAICountryModel> summary);
    void countriesGetCountryByCode3Signal(QList<OAICountryModel> summary);
    void countriesGetCountryByNameSignal(QList<OAICountryModel> summary);
    void countriesGetCountryRegionSignal(OAICountryRegionModel summary);
    void countriesGetCountryRegionsSignal(QList<OAICountryRegionModel> summary);
    void currenciesGetCurrenciesSignal(QList<OAICurrencyOutputModel> summary);
    void currenciesGetCurrencySignal(OAICurrencyOutputModel summary);
    void customerCustomPropertiesGetCustomerCustomPropertiesSignal(QList<OAICustomPropertyModel> summary);
    void customerCustomPropertiesGetCustomerCustomPropertySignal(OAICustomPropertyModel summary);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignal(OAICustomerCustomPropertySelectionItemOutputModel summary);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignal(QList<OAICustomerCustomPropertySelectionItemOutputModel> summary);
    void formattingCulturesGetFormattingCultureSignal(OAIFormattingCultureModel summary);
    void formattingCulturesGetFormattingsSignal(QList<OAIFormattingCultureModel> summary);
    void holidaysGetHolidaysSignal(QList<OAIHolidayModel> summary);
    void holidaysGetHolidaysByTimePeriodSignal(QList<OAIHolidayModel> summary);
    void industriesGetIndustriesSignal(QList<OAIIndustryModel> summary);
    void industriesGetIndustrySignal(OAIIndustryModel summary);
    void invoiceStatusesGetInvoiceStatusSignal(OAIInvoiceStatusModel summary);
    void invoiceStatusesGetInvoiceStatusesSignal(QList<OAIInvoiceStatusModel> summary);
    void invoiceTemplatesGetInvoiceTemplateSignal(OAIInvoiceTemplateModel summary);
    void invoiceTemplatesGetInvoiceTemplatesSignal(QList<OAIInvoiceTemplateModel> summary);
    void keywordsGetKeywordSignal(OAIKeywordModel summary);
    void keywordsGetKeywordsSignal(QList<OAIKeywordModel> summary);
    void kpiFormulasGetKpiFormulasSignal(QList<OAIKpiFormulaModelBase> summary);
    void languagesGetLanguageSignal(OAILanguageModel summary);
    void languagesGetLanguagesSignal(QList<OAILanguageModel> summary);
    void leadSourcesGetLeadSourceSignal(OAILeadSourceModel summary);
    void leadSourcesGetLeadSourcesSignal(QList<OAILeadSourceModel> summary);
    void marketSegmentsGetMarketSegmentSignal(OAIMarketSegmentModel summary);
    void marketSegmentsGetMarketSegmentsSignal(QList<OAIMarketSegmentModel> summary);
    void overtimePricesGetOvertimePriceSignal(OAIOvertimePriceModel summary);
    void overtimePricesGetOvertimePricesSignal(QList<OAIOvertimePriceModel> summary);
    void overtimesGetOvertimeSignal(OAIOvertimeModel summary);
    void overtimesGetOvertimesSignal(QList<OAIOvertimeModel> summary);
    void permissionProfilesGetPermissionProfileSignal(OAIPermissionProfileModel summary);
    void permissionProfilesGetPermissionProfilesSignal(QList<OAIPermissionProfileModel> summary);
    void phaseStatusTypesGetPhaseStatusTypeSignal(OAIPhaseStatusTypeModel summary);
    void phaseStatusTypesGetPhaseStatusTypesSignal(QList<OAIPhaseStatusTypeModel> summary);
    void priceListVersionsGetPricelistVersionSignal(OAIPricelistVersionOutputModel summary);
    void priceListVersionsGetPricelistVersionsByPricelistSignal(QList<OAIPricelistVersionOutputModel> summary);
    void priceListsGetPriceListSignal(OAIPriceListModel summary);
    void priceListsGetPricelistsSignal(QList<OAIPriceListOutputModel> summary);
    void productCategoriesGetProductCategoriesSignal(QList<OAIProductCategoryModel> summary);
    void productCategoriesGetProductCategorySignal(OAIProductCategoryModel summary);
    void productCountrySettingsGetProductCountrySettingsSignal(QList<OAIProductCountrySettingsModel> summary);
    void productPricesGetProductPriceSignal(OAIProductPriceOutputModel summary);
    void productPricesGetProductPricesSignal(QList<OAIProductPriceOutputModel> summary);
    void productsGetProductSignal(OAIProductOutputModel summary);
    void productsGetProductsSignal(QList<OAIProductOutputModel> summary);
    void projectBillingCustomersGetProjectBillingCustomerSignal(OAIProjectBillingCustomerModel2 summary);
    void projectCustomPropertiesGetProjectCustomPropertiesSignal(QList<OAICustomPropertyModel> summary);
    void projectCustomPropertiesGetProjectCustomPropertySignal(OAICustomPropertyModel summary);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignal(OAIProjectCustomPropertySelectionItemOutputModel summary);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignal(QList<OAIProjectCustomPropertySelectionItemOutputModel> summary);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionSignal(OAIProjectMemberCostExceptionOutputModel summary);
    void projectStatusTypesGetProjectStatusTypeSignal(OAIProjectStatusTypeModel summary);
    void projectStatusTypesGetProjectStatusTypesSignal(QList<OAIProjectStatusTypeModel> summary);
    void projectTaskStatusesGetProjectTaskStatusSignal(OAIProjectTaskStatusModel summary);
    void projectTaskStatusesGetProjectTaskStatusesSignal(QList<OAIProjectTaskStatusModel> summary);
    void proposalStatusesGetProposalStatusSignal(OAIProposalStatusOutputModel summary);
    void proposalStatusesGetProposalStatusesSignal(QList<OAIProposalStatusOutputModel> summary);
    void proposalStatusesGetUsageSignal(QList<OAIUsageModel2> summary);
    void rolesGetRoleSignal(OAIRoleOutputModel summary);
    void rolesGetRolesSignal(QList<OAIRoleOutputModel> summary);
    void salesAccountsGetSalesAccountSignal(OAISalesAccountModel summary);
    void salesAccountsGetSalesAccountsSignal(QList<OAISalesAccountModel> summary);
    void salesStatusTypesGetSalesStatusTypeSignal(OAISalesStatusTypeOutputModel summary);
    void salesStatusTypesGetSalesStatusTypesSignal(QList<OAISalesStatusTypeOutputModel> summary);
    void timeEntryTypesGetTimeEntryTypeSignal(OAITimeEntryTypeModel summary);
    void timeEntryTypesGetTimeEntryTypesSignal(QList<OAITimeEntryTypeModel> summary);
    void timezonesGetTimezoneSignal(OAITimezoneModel summary);
    void timezonesGetTimezonesSignal(QList<OAITimezoneModel> summary);
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignal(QList<OAITravelExpenseTypeCountrySettingsModel> summary);
    void travelExpenseTypesGetTravelExpenseTypeSignal(OAITravelExpenseTypeOutputModel summary);
    void travelExpenseTypesGetTravelExpenseTypesSignal(QList<OAITravelExpenseTypeOutputModel> summary);
    void travelPricesGetTravelPriceSignal(OAITravelPriceOutputModel summary);
    void travelPricesGetTravelPricesSignal(QList<OAITravelPriceOutputModel> summary);
    void travelReimbursementStatusGetTravelReimbursementStatusSignal(OAITravelReimbursementStatusModel summary);
    void travelReimbursementStatusGetTravelReimbursementStatusesSignal(QList<OAITravelReimbursementStatusModel> summary);
    void userCustomPropertiesGetUserCustomPropertiesSignal(QList<OAIUserCustomPropertyOutputModel> summary);
    void userCustomPropertiesGetUserCustomPropertySignal(OAIUserCustomPropertyOutputModel summary);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignal(OAIUserCustomPropertySelectionItemOutputModel summary);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignal(QList<OAIUserCustomPropertySelectionItemOutputModel> summary);
    void vatRatesGetVatRateSignal(OAIVatRateOutputModel summary);
    void vatRatesGetVatRatesSignal(QList<OAIVatRateOutputModel> summary);
    void workContractsGetWorkContractSignal(OAIWorkContractOutputModel summary);
    void workHourPricesGetWorkHourPriceSignal(OAIWorkHourPriceOutputModel summary);
    void workHourPricesGetWorkHourPricesSignal(OAIWorkHourPriceOutputModel summary);
    void workTypesGetWorkTypeSignal(OAIWorkTypeOutputModel summary);
    void workTypesGetWorkTypesSignal(QList<OAIWorkTypeOutputModel> summary);


    void activityTypesGetActivityTypeSignalFull(OAIHttpRequestWorker *worker, OAIActivityTypeModel summary);
    void activityTypesGetActivityTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivityTypeModel> summary);
    void bankAccountsGetBankAccountSignalFull(OAIHttpRequestWorker *worker, OAIBankAccountOutputModel summary);
    void bankAccountsGetBankAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBankAccountOutputModel> summary);
    void businessUnitsGetBusinessUnitSignalFull(OAIHttpRequestWorker *worker, OAIBusinessUnitModel summary);
    void businessUnitsGetBusinessUnitsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBusinessUnitModel> summary);
    void communicationTypesGetCommunicationTypeSignalFull(OAIHttpRequestWorker *worker, OAICommunicationTypeModel summary);
    void communicationTypesGetCommunicationTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAICommunicationTypeModel> summary);
    void contactRolesGetContactRoleSignalFull(OAIHttpRequestWorker *worker, OAIContactRoleModel summary);
    void contactRolesGetContactRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactRoleModel> summary);
    void costAccountsGetCostAccountSignalFull(OAIHttpRequestWorker *worker, OAICostAccountModel summary);
    void costAccountsGetCostAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAICostAccountModel> summary);
    void costCentersGetCostCenterSignalFull(OAIHttpRequestWorker *worker, OAICostCenterModel summary);
    void costCentersGetCostCentersSignalFull(OAIHttpRequestWorker *worker, QList<OAICostCenterModel> summary);
    void countriesGetCountriesSignalFull(OAIHttpRequestWorker *worker, QList<OAICountryModel> summary);
    void countriesGetCountrySignalFull(OAIHttpRequestWorker *worker, OAICountryModel summary);
    void countriesGetCountryByCode2SignalFull(OAIHttpRequestWorker *worker, QList<OAICountryModel> summary);
    void countriesGetCountryByCode3SignalFull(OAIHttpRequestWorker *worker, QList<OAICountryModel> summary);
    void countriesGetCountryByNameSignalFull(OAIHttpRequestWorker *worker, QList<OAICountryModel> summary);
    void countriesGetCountryRegionSignalFull(OAIHttpRequestWorker *worker, OAICountryRegionModel summary);
    void countriesGetCountryRegionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICountryRegionModel> summary);
    void currenciesGetCurrenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAICurrencyOutputModel> summary);
    void currenciesGetCurrencySignalFull(OAIHttpRequestWorker *worker, OAICurrencyOutputModel summary);
    void customerCustomPropertiesGetCustomerCustomPropertiesSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPropertyModel> summary);
    void customerCustomPropertiesGetCustomerCustomPropertySignalFull(OAIHttpRequestWorker *worker, OAICustomPropertyModel summary);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, OAICustomerCustomPropertySelectionItemOutputModel summary);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCustomPropertySelectionItemOutputModel> summary);
    void formattingCulturesGetFormattingCultureSignalFull(OAIHttpRequestWorker *worker, OAIFormattingCultureModel summary);
    void formattingCulturesGetFormattingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFormattingCultureModel> summary);
    void holidaysGetHolidaysSignalFull(OAIHttpRequestWorker *worker, QList<OAIHolidayModel> summary);
    void holidaysGetHolidaysByTimePeriodSignalFull(OAIHttpRequestWorker *worker, QList<OAIHolidayModel> summary);
    void industriesGetIndustriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIndustryModel> summary);
    void industriesGetIndustrySignalFull(OAIHttpRequestWorker *worker, OAIIndustryModel summary);
    void invoiceStatusesGetInvoiceStatusSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceStatusModel summary);
    void invoiceStatusesGetInvoiceStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceStatusModel> summary);
    void invoiceTemplatesGetInvoiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceTemplateModel summary);
    void invoiceTemplatesGetInvoiceTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceTemplateModel> summary);
    void keywordsGetKeywordSignalFull(OAIHttpRequestWorker *worker, OAIKeywordModel summary);
    void keywordsGetKeywordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIKeywordModel> summary);
    void kpiFormulasGetKpiFormulasSignalFull(OAIHttpRequestWorker *worker, QList<OAIKpiFormulaModelBase> summary);
    void languagesGetLanguageSignalFull(OAIHttpRequestWorker *worker, OAILanguageModel summary);
    void languagesGetLanguagesSignalFull(OAIHttpRequestWorker *worker, QList<OAILanguageModel> summary);
    void leadSourcesGetLeadSourceSignalFull(OAIHttpRequestWorker *worker, OAILeadSourceModel summary);
    void leadSourcesGetLeadSourcesSignalFull(OAIHttpRequestWorker *worker, QList<OAILeadSourceModel> summary);
    void marketSegmentsGetMarketSegmentSignalFull(OAIHttpRequestWorker *worker, OAIMarketSegmentModel summary);
    void marketSegmentsGetMarketSegmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIMarketSegmentModel> summary);
    void overtimePricesGetOvertimePriceSignalFull(OAIHttpRequestWorker *worker, OAIOvertimePriceModel summary);
    void overtimePricesGetOvertimePricesSignalFull(OAIHttpRequestWorker *worker, QList<OAIOvertimePriceModel> summary);
    void overtimesGetOvertimeSignalFull(OAIHttpRequestWorker *worker, OAIOvertimeModel summary);
    void overtimesGetOvertimesSignalFull(OAIHttpRequestWorker *worker, QList<OAIOvertimeModel> summary);
    void permissionProfilesGetPermissionProfileSignalFull(OAIHttpRequestWorker *worker, OAIPermissionProfileModel summary);
    void permissionProfilesGetPermissionProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPermissionProfileModel> summary);
    void phaseStatusTypesGetPhaseStatusTypeSignalFull(OAIHttpRequestWorker *worker, OAIPhaseStatusTypeModel summary);
    void phaseStatusTypesGetPhaseStatusTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhaseStatusTypeModel> summary);
    void priceListVersionsGetPricelistVersionSignalFull(OAIHttpRequestWorker *worker, OAIPricelistVersionOutputModel summary);
    void priceListVersionsGetPricelistVersionsByPricelistSignalFull(OAIHttpRequestWorker *worker, QList<OAIPricelistVersionOutputModel> summary);
    void priceListsGetPriceListSignalFull(OAIHttpRequestWorker *worker, OAIPriceListModel summary);
    void priceListsGetPricelistsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPriceListOutputModel> summary);
    void productCategoriesGetProductCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductCategoryModel> summary);
    void productCategoriesGetProductCategorySignalFull(OAIHttpRequestWorker *worker, OAIProductCategoryModel summary);
    void productCountrySettingsGetProductCountrySettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductCountrySettingsModel> summary);
    void productPricesGetProductPriceSignalFull(OAIHttpRequestWorker *worker, OAIProductPriceOutputModel summary);
    void productPricesGetProductPricesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductPriceOutputModel> summary);
    void productsGetProductSignalFull(OAIHttpRequestWorker *worker, OAIProductOutputModel summary);
    void productsGetProductsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductOutputModel> summary);
    void projectBillingCustomersGetProjectBillingCustomerSignalFull(OAIHttpRequestWorker *worker, OAIProjectBillingCustomerModel2 summary);
    void projectCustomPropertiesGetProjectCustomPropertiesSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPropertyModel> summary);
    void projectCustomPropertiesGetProjectCustomPropertySignalFull(OAIHttpRequestWorker *worker, OAICustomPropertyModel summary);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, OAIProjectCustomPropertySelectionItemOutputModel summary);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCustomPropertySelectionItemOutputModel> summary);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionSignalFull(OAIHttpRequestWorker *worker, OAIProjectMemberCostExceptionOutputModel summary);
    void projectStatusTypesGetProjectStatusTypeSignalFull(OAIHttpRequestWorker *worker, OAIProjectStatusTypeModel summary);
    void projectStatusTypesGetProjectStatusTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectStatusTypeModel> summary);
    void projectTaskStatusesGetProjectTaskStatusSignalFull(OAIHttpRequestWorker *worker, OAIProjectTaskStatusModel summary);
    void projectTaskStatusesGetProjectTaskStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTaskStatusModel> summary);
    void proposalStatusesGetProposalStatusSignalFull(OAIHttpRequestWorker *worker, OAIProposalStatusOutputModel summary);
    void proposalStatusesGetProposalStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProposalStatusOutputModel> summary);
    void proposalStatusesGetUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIUsageModel2> summary);
    void rolesGetRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleOutputModel summary);
    void rolesGetRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleOutputModel> summary);
    void salesAccountsGetSalesAccountSignalFull(OAIHttpRequestWorker *worker, OAISalesAccountModel summary);
    void salesAccountsGetSalesAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesAccountModel> summary);
    void salesStatusTypesGetSalesStatusTypeSignalFull(OAIHttpRequestWorker *worker, OAISalesStatusTypeOutputModel summary);
    void salesStatusTypesGetSalesStatusTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesStatusTypeOutputModel> summary);
    void timeEntryTypesGetTimeEntryTypeSignalFull(OAIHttpRequestWorker *worker, OAITimeEntryTypeModel summary);
    void timeEntryTypesGetTimeEntryTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeEntryTypeModel> summary);
    void timezonesGetTimezoneSignalFull(OAIHttpRequestWorker *worker, OAITimezoneModel summary);
    void timezonesGetTimezonesSignalFull(OAIHttpRequestWorker *worker, QList<OAITimezoneModel> summary);
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelExpenseTypeCountrySettingsModel> summary);
    void travelExpenseTypesGetTravelExpenseTypeSignalFull(OAIHttpRequestWorker *worker, OAITravelExpenseTypeOutputModel summary);
    void travelExpenseTypesGetTravelExpenseTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelExpenseTypeOutputModel> summary);
    void travelPricesGetTravelPriceSignalFull(OAIHttpRequestWorker *worker, OAITravelPriceOutputModel summary);
    void travelPricesGetTravelPricesSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelPriceOutputModel> summary);
    void travelReimbursementStatusGetTravelReimbursementStatusSignalFull(OAIHttpRequestWorker *worker, OAITravelReimbursementStatusModel summary);
    void travelReimbursementStatusGetTravelReimbursementStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelReimbursementStatusModel> summary);
    void userCustomPropertiesGetUserCustomPropertiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomPropertyOutputModel> summary);
    void userCustomPropertiesGetUserCustomPropertySignalFull(OAIHttpRequestWorker *worker, OAIUserCustomPropertyOutputModel summary);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker, OAIUserCustomPropertySelectionItemOutputModel summary);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomPropertySelectionItemOutputModel> summary);
    void vatRatesGetVatRateSignalFull(OAIHttpRequestWorker *worker, OAIVatRateOutputModel summary);
    void vatRatesGetVatRatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIVatRateOutputModel> summary);
    void workContractsGetWorkContractSignalFull(OAIHttpRequestWorker *worker, OAIWorkContractOutputModel summary);
    void workHourPricesGetWorkHourPriceSignalFull(OAIHttpRequestWorker *worker, OAIWorkHourPriceOutputModel summary);
    void workHourPricesGetWorkHourPricesSignalFull(OAIHttpRequestWorker *worker, OAIWorkHourPriceOutputModel summary);
    void workTypesGetWorkTypeSignalFull(OAIHttpRequestWorker *worker, OAIWorkTypeOutputModel summary);
    void workTypesGetWorkTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkTypeOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use activityTypesGetActivityTypeSignalError() instead")
    void activityTypesGetActivityTypeSignalE(OAIActivityTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesGetActivityTypeSignalError(OAIActivityTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityTypesGetActivityTypesSignalError() instead")
    void activityTypesGetActivityTypesSignalE(QList<OAIActivityTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesGetActivityTypesSignalError(QList<OAIActivityTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankAccountsGetBankAccountSignalError() instead")
    void bankAccountsGetBankAccountSignalE(OAIBankAccountOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankAccountsGetBankAccountSignalError(OAIBankAccountOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankAccountsGetBankAccountsSignalError() instead")
    void bankAccountsGetBankAccountsSignalE(QList<OAIBankAccountOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankAccountsGetBankAccountsSignalError(QList<OAIBankAccountOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessUnitsGetBusinessUnitSignalError() instead")
    void businessUnitsGetBusinessUnitSignalE(OAIBusinessUnitModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessUnitsGetBusinessUnitSignalError(OAIBusinessUnitModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessUnitsGetBusinessUnitsSignalError() instead")
    void businessUnitsGetBusinessUnitsSignalE(QList<OAIBusinessUnitModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessUnitsGetBusinessUnitsSignalError(QList<OAIBusinessUnitModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesGetCommunicationTypeSignalError() instead")
    void communicationTypesGetCommunicationTypeSignalE(OAICommunicationTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesGetCommunicationTypeSignalError(OAICommunicationTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesGetCommunicationTypesSignalError() instead")
    void communicationTypesGetCommunicationTypesSignalE(QList<OAICommunicationTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesGetCommunicationTypesSignalError(QList<OAICommunicationTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesGetContactRoleSignalError() instead")
    void contactRolesGetContactRoleSignalE(OAIContactRoleModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesGetContactRoleSignalError(OAIContactRoleModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesGetContactRolesSignalError() instead")
    void contactRolesGetContactRolesSignalE(QList<OAIContactRoleModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesGetContactRolesSignalError(QList<OAIContactRoleModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsGetCostAccountSignalError() instead")
    void costAccountsGetCostAccountSignalE(OAICostAccountModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsGetCostAccountSignalError(OAICostAccountModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsGetCostAccountsSignalError() instead")
    void costAccountsGetCostAccountsSignalE(QList<OAICostAccountModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsGetCostAccountsSignalError(QList<OAICostAccountModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersGetCostCenterSignalError() instead")
    void costCentersGetCostCenterSignalE(OAICostCenterModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersGetCostCenterSignalError(OAICostCenterModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersGetCostCentersSignalError() instead")
    void costCentersGetCostCentersSignalE(QList<OAICostCenterModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersGetCostCentersSignalError(QList<OAICostCenterModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountriesSignalError() instead")
    void countriesGetCountriesSignalE(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountriesSignalError(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountrySignalError() instead")
    void countriesGetCountrySignalE(OAICountryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountrySignalError(OAICountryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryByCode2SignalError() instead")
    void countriesGetCountryByCode2SignalE(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryByCode2SignalError(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryByCode3SignalError() instead")
    void countriesGetCountryByCode3SignalE(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryByCode3SignalError(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryByNameSignalError() instead")
    void countriesGetCountryByNameSignalE(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryByNameSignalError(QList<OAICountryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryRegionSignalError() instead")
    void countriesGetCountryRegionSignalE(OAICountryRegionModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryRegionSignalError(OAICountryRegionModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryRegionsSignalError() instead")
    void countriesGetCountryRegionsSignalE(QList<OAICountryRegionModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryRegionsSignalError(QList<OAICountryRegionModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesGetCurrenciesSignalError() instead")
    void currenciesGetCurrenciesSignalE(QList<OAICurrencyOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesGetCurrenciesSignalError(QList<OAICurrencyOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesGetCurrencySignalError() instead")
    void currenciesGetCurrencySignalE(OAICurrencyOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesGetCurrencySignalError(OAICurrencyOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesGetCustomerCustomPropertiesSignalError() instead")
    void customerCustomPropertiesGetCustomerCustomPropertiesSignalE(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesGetCustomerCustomPropertiesSignalError(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesGetCustomerCustomPropertySignalError() instead")
    void customerCustomPropertiesGetCustomerCustomPropertySignalE(OAICustomPropertyModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesGetCustomerCustomPropertySignalError(OAICustomPropertyModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalError() instead")
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalE(OAICustomerCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalError(OAICustomerCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalError() instead")
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalE(QList<OAICustomerCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalError(QList<OAICustomerCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formattingCulturesGetFormattingCultureSignalError() instead")
    void formattingCulturesGetFormattingCultureSignalE(OAIFormattingCultureModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formattingCulturesGetFormattingCultureSignalError(OAIFormattingCultureModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formattingCulturesGetFormattingsSignalError() instead")
    void formattingCulturesGetFormattingsSignalE(QList<OAIFormattingCultureModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formattingCulturesGetFormattingsSignalError(QList<OAIFormattingCultureModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use holidaysGetHolidaysSignalError() instead")
    void holidaysGetHolidaysSignalE(QList<OAIHolidayModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void holidaysGetHolidaysSignalError(QList<OAIHolidayModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use holidaysGetHolidaysByTimePeriodSignalError() instead")
    void holidaysGetHolidaysByTimePeriodSignalE(QList<OAIHolidayModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void holidaysGetHolidaysByTimePeriodSignalError(QList<OAIHolidayModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesGetIndustriesSignalError() instead")
    void industriesGetIndustriesSignalE(QList<OAIIndustryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesGetIndustriesSignalError(QList<OAIIndustryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesGetIndustrySignalError() instead")
    void industriesGetIndustrySignalE(OAIIndustryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesGetIndustrySignalError(OAIIndustryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesGetInvoiceStatusSignalError() instead")
    void invoiceStatusesGetInvoiceStatusSignalE(OAIInvoiceStatusModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesGetInvoiceStatusSignalError(OAIInvoiceStatusModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesGetInvoiceStatusesSignalError() instead")
    void invoiceStatusesGetInvoiceStatusesSignalE(QList<OAIInvoiceStatusModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesGetInvoiceStatusesSignalError(QList<OAIInvoiceStatusModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceTemplatesGetInvoiceTemplateSignalError() instead")
    void invoiceTemplatesGetInvoiceTemplateSignalE(OAIInvoiceTemplateModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceTemplatesGetInvoiceTemplateSignalError(OAIInvoiceTemplateModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceTemplatesGetInvoiceTemplatesSignalError() instead")
    void invoiceTemplatesGetInvoiceTemplatesSignalE(QList<OAIInvoiceTemplateModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceTemplatesGetInvoiceTemplatesSignalError(QList<OAIInvoiceTemplateModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetKeywordSignalError() instead")
    void keywordsGetKeywordSignalE(OAIKeywordModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetKeywordSignalError(OAIKeywordModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetKeywordsSignalError() instead")
    void keywordsGetKeywordsSignalE(QList<OAIKeywordModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetKeywordsSignalError(QList<OAIKeywordModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiFormulasGetKpiFormulasSignalError() instead")
    void kpiFormulasGetKpiFormulasSignalE(QList<OAIKpiFormulaModelBase> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiFormulasGetKpiFormulasSignalError(QList<OAIKpiFormulaModelBase> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguageSignalError() instead")
    void languagesGetLanguageSignalE(OAILanguageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguageSignalError(OAILanguageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguagesSignalError() instead")
    void languagesGetLanguagesSignalE(QList<OAILanguageModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguagesSignalError(QList<OAILanguageModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesGetLeadSourceSignalError() instead")
    void leadSourcesGetLeadSourceSignalE(OAILeadSourceModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesGetLeadSourceSignalError(OAILeadSourceModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesGetLeadSourcesSignalError() instead")
    void leadSourcesGetLeadSourcesSignalE(QList<OAILeadSourceModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesGetLeadSourcesSignalError(QList<OAILeadSourceModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsGetMarketSegmentSignalError() instead")
    void marketSegmentsGetMarketSegmentSignalE(OAIMarketSegmentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsGetMarketSegmentSignalError(OAIMarketSegmentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsGetMarketSegmentsSignalError() instead")
    void marketSegmentsGetMarketSegmentsSignalE(QList<OAIMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsGetMarketSegmentsSignalError(QList<OAIMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimePricesGetOvertimePriceSignalError() instead")
    void overtimePricesGetOvertimePriceSignalE(OAIOvertimePriceModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimePricesGetOvertimePriceSignalError(OAIOvertimePriceModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimePricesGetOvertimePricesSignalError() instead")
    void overtimePricesGetOvertimePricesSignalE(QList<OAIOvertimePriceModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimePricesGetOvertimePricesSignalError(QList<OAIOvertimePriceModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesGetOvertimeSignalError() instead")
    void overtimesGetOvertimeSignalE(OAIOvertimeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesGetOvertimeSignalError(OAIOvertimeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesGetOvertimesSignalError() instead")
    void overtimesGetOvertimesSignalE(QList<OAIOvertimeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesGetOvertimesSignalError(QList<OAIOvertimeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionProfilesGetPermissionProfileSignalError() instead")
    void permissionProfilesGetPermissionProfileSignalE(OAIPermissionProfileModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionProfilesGetPermissionProfileSignalError(OAIPermissionProfileModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionProfilesGetPermissionProfilesSignalError() instead")
    void permissionProfilesGetPermissionProfilesSignalE(QList<OAIPermissionProfileModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionProfilesGetPermissionProfilesSignalError(QList<OAIPermissionProfileModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesGetPhaseStatusTypeSignalError() instead")
    void phaseStatusTypesGetPhaseStatusTypeSignalE(OAIPhaseStatusTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesGetPhaseStatusTypeSignalError(OAIPhaseStatusTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesGetPhaseStatusTypesSignalError() instead")
    void phaseStatusTypesGetPhaseStatusTypesSignalE(QList<OAIPhaseStatusTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesGetPhaseStatusTypesSignalError(QList<OAIPhaseStatusTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListVersionsGetPricelistVersionSignalError() instead")
    void priceListVersionsGetPricelistVersionSignalE(OAIPricelistVersionOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListVersionsGetPricelistVersionSignalError(OAIPricelistVersionOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListVersionsGetPricelistVersionsByPricelistSignalError() instead")
    void priceListVersionsGetPricelistVersionsByPricelistSignalE(QList<OAIPricelistVersionOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListVersionsGetPricelistVersionsByPricelistSignalError(QList<OAIPricelistVersionOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListsGetPriceListSignalError() instead")
    void priceListsGetPriceListSignalE(OAIPriceListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListsGetPriceListSignalError(OAIPriceListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListsGetPricelistsSignalError() instead")
    void priceListsGetPricelistsSignalE(QList<OAIPriceListOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListsGetPricelistsSignalError(QList<OAIPriceListOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesGetProductCategoriesSignalError() instead")
    void productCategoriesGetProductCategoriesSignalE(QList<OAIProductCategoryModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesGetProductCategoriesSignalError(QList<OAIProductCategoryModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesGetProductCategorySignalError() instead")
    void productCategoriesGetProductCategorySignalE(OAIProductCategoryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesGetProductCategorySignalError(OAIProductCategoryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsGetProductCountrySettingsSignalError() instead")
    void productCountrySettingsGetProductCountrySettingsSignalE(QList<OAIProductCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsGetProductCountrySettingsSignalError(QList<OAIProductCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPricesGetProductPriceSignalError() instead")
    void productPricesGetProductPriceSignalE(OAIProductPriceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPricesGetProductPriceSignalError(OAIProductPriceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPricesGetProductPricesSignalError() instead")
    void productPricesGetProductPricesSignalE(QList<OAIProductPriceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPricesGetProductPricesSignalError(QList<OAIProductPriceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetProductSignalError() instead")
    void productsGetProductSignalE(OAIProductOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetProductSignalError(OAIProductOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetProductsSignalError() instead")
    void productsGetProductsSignalE(QList<OAIProductOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetProductsSignalError(QList<OAIProductOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersGetProjectBillingCustomerSignalError() instead")
    void projectBillingCustomersGetProjectBillingCustomerSignalE(OAIProjectBillingCustomerModel2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersGetProjectBillingCustomerSignalError(OAIProjectBillingCustomerModel2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesGetProjectCustomPropertiesSignalError() instead")
    void projectCustomPropertiesGetProjectCustomPropertiesSignalE(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesGetProjectCustomPropertiesSignalError(QList<OAICustomPropertyModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesGetProjectCustomPropertySignalError() instead")
    void projectCustomPropertiesGetProjectCustomPropertySignalE(OAICustomPropertyModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesGetProjectCustomPropertySignalError(OAICustomPropertyModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalError() instead")
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalE(OAIProjectCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalError(OAIProjectCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalError() instead")
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalE(QList<OAIProjectCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalError(QList<OAIProjectCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsGetProjectMemberCostExceptionSignalError() instead")
    void projectMemberCostExceptionsGetProjectMemberCostExceptionSignalE(OAIProjectMemberCostExceptionOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionSignalError(OAIProjectMemberCostExceptionOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesGetProjectStatusTypeSignalError() instead")
    void projectStatusTypesGetProjectStatusTypeSignalE(OAIProjectStatusTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesGetProjectStatusTypeSignalError(OAIProjectStatusTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesGetProjectStatusTypesSignalError() instead")
    void projectStatusTypesGetProjectStatusTypesSignalE(QList<OAIProjectStatusTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesGetProjectStatusTypesSignalError(QList<OAIProjectStatusTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesGetProjectTaskStatusSignalError() instead")
    void projectTaskStatusesGetProjectTaskStatusSignalE(OAIProjectTaskStatusModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesGetProjectTaskStatusSignalError(OAIProjectTaskStatusModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesGetProjectTaskStatusesSignalError() instead")
    void projectTaskStatusesGetProjectTaskStatusesSignalE(QList<OAIProjectTaskStatusModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesGetProjectTaskStatusesSignalError(QList<OAIProjectTaskStatusModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesGetProposalStatusSignalError() instead")
    void proposalStatusesGetProposalStatusSignalE(OAIProposalStatusOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesGetProposalStatusSignalError(OAIProposalStatusOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesGetProposalStatusesSignalError() instead")
    void proposalStatusesGetProposalStatusesSignalE(QList<OAIProposalStatusOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesGetProposalStatusesSignalError(QList<OAIProposalStatusOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesGetUsageSignalError() instead")
    void proposalStatusesGetUsageSignalE(QList<OAIUsageModel2> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesGetUsageSignalError(QList<OAIUsageModel2> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesGetRoleSignalError() instead")
    void rolesGetRoleSignalE(OAIRoleOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesGetRoleSignalError(OAIRoleOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesGetRolesSignalError() instead")
    void rolesGetRolesSignalE(QList<OAIRoleOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesGetRolesSignalError(QList<OAIRoleOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsGetSalesAccountSignalError() instead")
    void salesAccountsGetSalesAccountSignalE(OAISalesAccountModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsGetSalesAccountSignalError(OAISalesAccountModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsGetSalesAccountsSignalError() instead")
    void salesAccountsGetSalesAccountsSignalE(QList<OAISalesAccountModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsGetSalesAccountsSignalError(QList<OAISalesAccountModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesGetSalesStatusTypeSignalError() instead")
    void salesStatusTypesGetSalesStatusTypeSignalE(OAISalesStatusTypeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesGetSalesStatusTypeSignalError(OAISalesStatusTypeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesGetSalesStatusTypesSignalError() instead")
    void salesStatusTypesGetSalesStatusTypesSignalE(QList<OAISalesStatusTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesGetSalesStatusTypesSignalError(QList<OAISalesStatusTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesGetTimeEntryTypeSignalError() instead")
    void timeEntryTypesGetTimeEntryTypeSignalE(OAITimeEntryTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesGetTimeEntryTypeSignalError(OAITimeEntryTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesGetTimeEntryTypesSignalError() instead")
    void timeEntryTypesGetTimeEntryTypesSignalE(QList<OAITimeEntryTypeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesGetTimeEntryTypesSignalError(QList<OAITimeEntryTypeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezonesGetTimezoneSignalError() instead")
    void timezonesGetTimezoneSignalE(OAITimezoneModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezonesGetTimezoneSignalError(OAITimezoneModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezonesGetTimezonesSignalError() instead")
    void timezonesGetTimezonesSignalE(QList<OAITimezoneModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezonesGetTimezonesSignalError(QList<OAITimezoneModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalError() instead")
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalE(QList<OAITravelExpenseTypeCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalError(QList<OAITravelExpenseTypeCountrySettingsModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesGetTravelExpenseTypeSignalError() instead")
    void travelExpenseTypesGetTravelExpenseTypeSignalE(OAITravelExpenseTypeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesGetTravelExpenseTypeSignalError(OAITravelExpenseTypeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesGetTravelExpenseTypesSignalError() instead")
    void travelExpenseTypesGetTravelExpenseTypesSignalE(QList<OAITravelExpenseTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesGetTravelExpenseTypesSignalError(QList<OAITravelExpenseTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelPricesGetTravelPriceSignalError() instead")
    void travelPricesGetTravelPriceSignalE(OAITravelPriceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelPricesGetTravelPriceSignalError(OAITravelPriceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelPricesGetTravelPricesSignalError() instead")
    void travelPricesGetTravelPricesSignalE(QList<OAITravelPriceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelPricesGetTravelPricesSignalError(QList<OAITravelPriceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusGetTravelReimbursementStatusSignalError() instead")
    void travelReimbursementStatusGetTravelReimbursementStatusSignalE(OAITravelReimbursementStatusModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusGetTravelReimbursementStatusSignalError(OAITravelReimbursementStatusModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusGetTravelReimbursementStatusesSignalError() instead")
    void travelReimbursementStatusGetTravelReimbursementStatusesSignalE(QList<OAITravelReimbursementStatusModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusGetTravelReimbursementStatusesSignalError(QList<OAITravelReimbursementStatusModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesGetUserCustomPropertiesSignalError() instead")
    void userCustomPropertiesGetUserCustomPropertiesSignalE(QList<OAIUserCustomPropertyOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesGetUserCustomPropertiesSignalError(QList<OAIUserCustomPropertyOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesGetUserCustomPropertySignalError() instead")
    void userCustomPropertiesGetUserCustomPropertySignalE(OAIUserCustomPropertyOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesGetUserCustomPropertySignalError(OAIUserCustomPropertyOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalError() instead")
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalE(OAIUserCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalError(OAIUserCustomPropertySelectionItemOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalError() instead")
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalE(QList<OAIUserCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalError(QList<OAIUserCustomPropertySelectionItemOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesGetVatRateSignalError() instead")
    void vatRatesGetVatRateSignalE(OAIVatRateOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesGetVatRateSignalError(OAIVatRateOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesGetVatRatesSignalError() instead")
    void vatRatesGetVatRatesSignalE(QList<OAIVatRateOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesGetVatRatesSignalError(QList<OAIVatRateOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetWorkContractSignalError() instead")
    void workContractsGetWorkContractSignalE(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetWorkContractSignalError(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHourPricesGetWorkHourPriceSignalError() instead")
    void workHourPricesGetWorkHourPriceSignalE(OAIWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHourPricesGetWorkHourPriceSignalError(OAIWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHourPricesGetWorkHourPricesSignalError() instead")
    void workHourPricesGetWorkHourPricesSignalE(OAIWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHourPricesGetWorkHourPricesSignalError(OAIWorkHourPriceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetWorkTypeSignalError() instead")
    void workTypesGetWorkTypeSignalE(OAIWorkTypeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetWorkTypeSignalError(OAIWorkTypeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetWorkTypesSignalError() instead")
    void workTypesGetWorkTypesSignalE(QList<OAIWorkTypeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetWorkTypesSignalError(QList<OAIWorkTypeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activityTypesGetActivityTypeSignalErrorFull() instead")
    void activityTypesGetActivityTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesGetActivityTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityTypesGetActivityTypesSignalErrorFull() instead")
    void activityTypesGetActivityTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesGetActivityTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankAccountsGetBankAccountSignalErrorFull() instead")
    void bankAccountsGetBankAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankAccountsGetBankAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankAccountsGetBankAccountsSignalErrorFull() instead")
    void bankAccountsGetBankAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankAccountsGetBankAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessUnitsGetBusinessUnitSignalErrorFull() instead")
    void businessUnitsGetBusinessUnitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessUnitsGetBusinessUnitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessUnitsGetBusinessUnitsSignalErrorFull() instead")
    void businessUnitsGetBusinessUnitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessUnitsGetBusinessUnitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesGetCommunicationTypeSignalErrorFull() instead")
    void communicationTypesGetCommunicationTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesGetCommunicationTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesGetCommunicationTypesSignalErrorFull() instead")
    void communicationTypesGetCommunicationTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesGetCommunicationTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesGetContactRoleSignalErrorFull() instead")
    void contactRolesGetContactRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesGetContactRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesGetContactRolesSignalErrorFull() instead")
    void contactRolesGetContactRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesGetContactRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsGetCostAccountSignalErrorFull() instead")
    void costAccountsGetCostAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsGetCostAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsGetCostAccountsSignalErrorFull() instead")
    void costAccountsGetCostAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsGetCostAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersGetCostCenterSignalErrorFull() instead")
    void costCentersGetCostCenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersGetCostCenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersGetCostCentersSignalErrorFull() instead")
    void costCentersGetCostCentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersGetCostCentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountriesSignalErrorFull() instead")
    void countriesGetCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountrySignalErrorFull() instead")
    void countriesGetCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryByCode2SignalErrorFull() instead")
    void countriesGetCountryByCode2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryByCode2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryByCode3SignalErrorFull() instead")
    void countriesGetCountryByCode3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryByCode3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryByNameSignalErrorFull() instead")
    void countriesGetCountryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryRegionSignalErrorFull() instead")
    void countriesGetCountryRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetCountryRegionsSignalErrorFull() instead")
    void countriesGetCountryRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetCountryRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesGetCurrenciesSignalErrorFull() instead")
    void currenciesGetCurrenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesGetCurrenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesGetCurrencySignalErrorFull() instead")
    void currenciesGetCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesGetCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesGetCustomerCustomPropertiesSignalErrorFull() instead")
    void customerCustomPropertiesGetCustomerCustomPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesGetCustomerCustomPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesGetCustomerCustomPropertySignalErrorFull() instead")
    void customerCustomPropertiesGetCustomerCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesGetCustomerCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalErrorFull() instead")
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalErrorFull() instead")
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formattingCulturesGetFormattingCultureSignalErrorFull() instead")
    void formattingCulturesGetFormattingCultureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formattingCulturesGetFormattingCultureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formattingCulturesGetFormattingsSignalErrorFull() instead")
    void formattingCulturesGetFormattingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formattingCulturesGetFormattingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use holidaysGetHolidaysSignalErrorFull() instead")
    void holidaysGetHolidaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void holidaysGetHolidaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use holidaysGetHolidaysByTimePeriodSignalErrorFull() instead")
    void holidaysGetHolidaysByTimePeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void holidaysGetHolidaysByTimePeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesGetIndustriesSignalErrorFull() instead")
    void industriesGetIndustriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesGetIndustriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesGetIndustrySignalErrorFull() instead")
    void industriesGetIndustrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesGetIndustrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesGetInvoiceStatusSignalErrorFull() instead")
    void invoiceStatusesGetInvoiceStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesGetInvoiceStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesGetInvoiceStatusesSignalErrorFull() instead")
    void invoiceStatusesGetInvoiceStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesGetInvoiceStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceTemplatesGetInvoiceTemplateSignalErrorFull() instead")
    void invoiceTemplatesGetInvoiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceTemplatesGetInvoiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceTemplatesGetInvoiceTemplatesSignalErrorFull() instead")
    void invoiceTemplatesGetInvoiceTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceTemplatesGetInvoiceTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetKeywordSignalErrorFull() instead")
    void keywordsGetKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetKeywordsSignalErrorFull() instead")
    void keywordsGetKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiFormulasGetKpiFormulasSignalErrorFull() instead")
    void kpiFormulasGetKpiFormulasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiFormulasGetKpiFormulasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguageSignalErrorFull() instead")
    void languagesGetLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguagesSignalErrorFull() instead")
    void languagesGetLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesGetLeadSourceSignalErrorFull() instead")
    void leadSourcesGetLeadSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesGetLeadSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesGetLeadSourcesSignalErrorFull() instead")
    void leadSourcesGetLeadSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesGetLeadSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsGetMarketSegmentSignalErrorFull() instead")
    void marketSegmentsGetMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsGetMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsGetMarketSegmentsSignalErrorFull() instead")
    void marketSegmentsGetMarketSegmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsGetMarketSegmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimePricesGetOvertimePriceSignalErrorFull() instead")
    void overtimePricesGetOvertimePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimePricesGetOvertimePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimePricesGetOvertimePricesSignalErrorFull() instead")
    void overtimePricesGetOvertimePricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimePricesGetOvertimePricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesGetOvertimeSignalErrorFull() instead")
    void overtimesGetOvertimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesGetOvertimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesGetOvertimesSignalErrorFull() instead")
    void overtimesGetOvertimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesGetOvertimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionProfilesGetPermissionProfileSignalErrorFull() instead")
    void permissionProfilesGetPermissionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionProfilesGetPermissionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionProfilesGetPermissionProfilesSignalErrorFull() instead")
    void permissionProfilesGetPermissionProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionProfilesGetPermissionProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesGetPhaseStatusTypeSignalErrorFull() instead")
    void phaseStatusTypesGetPhaseStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesGetPhaseStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesGetPhaseStatusTypesSignalErrorFull() instead")
    void phaseStatusTypesGetPhaseStatusTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesGetPhaseStatusTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListVersionsGetPricelistVersionSignalErrorFull() instead")
    void priceListVersionsGetPricelistVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListVersionsGetPricelistVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListVersionsGetPricelistVersionsByPricelistSignalErrorFull() instead")
    void priceListVersionsGetPricelistVersionsByPricelistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListVersionsGetPricelistVersionsByPricelistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListsGetPriceListSignalErrorFull() instead")
    void priceListsGetPriceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListsGetPriceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceListsGetPricelistsSignalErrorFull() instead")
    void priceListsGetPricelistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceListsGetPricelistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesGetProductCategoriesSignalErrorFull() instead")
    void productCategoriesGetProductCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesGetProductCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesGetProductCategorySignalErrorFull() instead")
    void productCategoriesGetProductCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesGetProductCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsGetProductCountrySettingsSignalErrorFull() instead")
    void productCountrySettingsGetProductCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsGetProductCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPricesGetProductPriceSignalErrorFull() instead")
    void productPricesGetProductPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPricesGetProductPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPricesGetProductPricesSignalErrorFull() instead")
    void productPricesGetProductPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPricesGetProductPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetProductSignalErrorFull() instead")
    void productsGetProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetProductsSignalErrorFull() instead")
    void productsGetProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersGetProjectBillingCustomerSignalErrorFull() instead")
    void projectBillingCustomersGetProjectBillingCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersGetProjectBillingCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesGetProjectCustomPropertiesSignalErrorFull() instead")
    void projectCustomPropertiesGetProjectCustomPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesGetProjectCustomPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesGetProjectCustomPropertySignalErrorFull() instead")
    void projectCustomPropertiesGetProjectCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesGetProjectCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalErrorFull() instead")
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalErrorFull() instead")
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsGetProjectMemberCostExceptionSignalErrorFull() instead")
    void projectMemberCostExceptionsGetProjectMemberCostExceptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesGetProjectStatusTypeSignalErrorFull() instead")
    void projectStatusTypesGetProjectStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesGetProjectStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesGetProjectStatusTypesSignalErrorFull() instead")
    void projectStatusTypesGetProjectStatusTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesGetProjectStatusTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesGetProjectTaskStatusSignalErrorFull() instead")
    void projectTaskStatusesGetProjectTaskStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesGetProjectTaskStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesGetProjectTaskStatusesSignalErrorFull() instead")
    void projectTaskStatusesGetProjectTaskStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesGetProjectTaskStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesGetProposalStatusSignalErrorFull() instead")
    void proposalStatusesGetProposalStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesGetProposalStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesGetProposalStatusesSignalErrorFull() instead")
    void proposalStatusesGetProposalStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesGetProposalStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesGetUsageSignalErrorFull() instead")
    void proposalStatusesGetUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesGetUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesGetRoleSignalErrorFull() instead")
    void rolesGetRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesGetRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesGetRolesSignalErrorFull() instead")
    void rolesGetRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesGetRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsGetSalesAccountSignalErrorFull() instead")
    void salesAccountsGetSalesAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsGetSalesAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsGetSalesAccountsSignalErrorFull() instead")
    void salesAccountsGetSalesAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsGetSalesAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesGetSalesStatusTypeSignalErrorFull() instead")
    void salesStatusTypesGetSalesStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesGetSalesStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesGetSalesStatusTypesSignalErrorFull() instead")
    void salesStatusTypesGetSalesStatusTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesGetSalesStatusTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesGetTimeEntryTypeSignalErrorFull() instead")
    void timeEntryTypesGetTimeEntryTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesGetTimeEntryTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesGetTimeEntryTypesSignalErrorFull() instead")
    void timeEntryTypesGetTimeEntryTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesGetTimeEntryTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezonesGetTimezoneSignalErrorFull() instead")
    void timezonesGetTimezoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezonesGetTimezoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezonesGetTimezonesSignalErrorFull() instead")
    void timezonesGetTimezonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezonesGetTimezonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalErrorFull() instead")
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesGetTravelExpenseTypeSignalErrorFull() instead")
    void travelExpenseTypesGetTravelExpenseTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesGetTravelExpenseTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesGetTravelExpenseTypesSignalErrorFull() instead")
    void travelExpenseTypesGetTravelExpenseTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesGetTravelExpenseTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelPricesGetTravelPriceSignalErrorFull() instead")
    void travelPricesGetTravelPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelPricesGetTravelPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelPricesGetTravelPricesSignalErrorFull() instead")
    void travelPricesGetTravelPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelPricesGetTravelPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusGetTravelReimbursementStatusSignalErrorFull() instead")
    void travelReimbursementStatusGetTravelReimbursementStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusGetTravelReimbursementStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusGetTravelReimbursementStatusesSignalErrorFull() instead")
    void travelReimbursementStatusGetTravelReimbursementStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusGetTravelReimbursementStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesGetUserCustomPropertiesSignalErrorFull() instead")
    void userCustomPropertiesGetUserCustomPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesGetUserCustomPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesGetUserCustomPropertySignalErrorFull() instead")
    void userCustomPropertiesGetUserCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesGetUserCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalErrorFull() instead")
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalErrorFull() instead")
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesGetVatRateSignalErrorFull() instead")
    void vatRatesGetVatRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesGetVatRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesGetVatRatesSignalErrorFull() instead")
    void vatRatesGetVatRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesGetVatRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetWorkContractSignalErrorFull() instead")
    void workContractsGetWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHourPricesGetWorkHourPriceSignalErrorFull() instead")
    void workHourPricesGetWorkHourPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHourPricesGetWorkHourPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHourPricesGetWorkHourPricesSignalErrorFull() instead")
    void workHourPricesGetWorkHourPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHourPricesGetWorkHourPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetWorkTypeSignalErrorFull() instead")
    void workTypesGetWorkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetWorkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesGetWorkTypesSignalErrorFull() instead")
    void workTypesGetWorkTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesGetWorkTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
