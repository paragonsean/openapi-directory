/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonthlyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonthlyModel::OAIMonthlyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonthlyModel::OAIMonthlyModel() {
    this->initializeModel();
}

OAIMonthlyModel::~OAIMonthlyModel() {}

void OAIMonthlyModel::initializeModel() {

    m_day_of_month_isSet = false;
    m_day_of_month_isValid = false;

    m_day_ordinal_isSet = false;
    m_day_ordinal_isValid = false;

    m_day_ordinal_option_isSet = false;
    m_day_ordinal_option_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;
}

void OAIMonthlyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonthlyModel::fromJsonObject(QJsonObject json) {

    m_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_day_of_month, json[QString("dayOfMonth")]);
    m_day_of_month_isSet = !json[QString("dayOfMonth")].isNull() && m_day_of_month_isValid;

    m_day_ordinal_isValid = ::OpenAPI::fromJsonValue(m_day_ordinal, json[QString("dayOrdinal")]);
    m_day_ordinal_isSet = !json[QString("dayOrdinal")].isNull() && m_day_ordinal_isValid;

    m_day_ordinal_option_isValid = ::OpenAPI::fromJsonValue(m_day_ordinal_option, json[QString("dayOrdinalOption")]);
    m_day_ordinal_option_isSet = !json[QString("dayOrdinalOption")].isNull() && m_day_ordinal_option_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;
}

QString OAIMonthlyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonthlyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_month_isSet) {
        obj.insert(QString("dayOfMonth"), ::OpenAPI::toJsonValue(m_day_of_month));
    }
    if (m_day_ordinal.isSet()) {
        obj.insert(QString("dayOrdinal"), ::OpenAPI::toJsonValue(m_day_ordinal));
    }
    if (m_day_ordinal_option.isSet()) {
        obj.insert(QString("dayOrdinalOption"), ::OpenAPI::toJsonValue(m_day_ordinal_option));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    return obj;
}

qint32 OAIMonthlyModel::getDayOfMonth() const {
    return m_day_of_month;
}
void OAIMonthlyModel::setDayOfMonth(const qint32 &day_of_month) {
    m_day_of_month = day_of_month;
    m_day_of_month_isSet = true;
}

bool OAIMonthlyModel::is_day_of_month_Set() const{
    return m_day_of_month_isSet;
}

bool OAIMonthlyModel::is_day_of_month_Valid() const{
    return m_day_of_month_isValid;
}

OAIDayOrdinal OAIMonthlyModel::getDayOrdinal() const {
    return m_day_ordinal;
}
void OAIMonthlyModel::setDayOrdinal(const OAIDayOrdinal &day_ordinal) {
    m_day_ordinal = day_ordinal;
    m_day_ordinal_isSet = true;
}

bool OAIMonthlyModel::is_day_ordinal_Set() const{
    return m_day_ordinal_isSet;
}

bool OAIMonthlyModel::is_day_ordinal_Valid() const{
    return m_day_ordinal_isValid;
}

OAIDayOrdinalOption OAIMonthlyModel::getDayOrdinalOption() const {
    return m_day_ordinal_option;
}
void OAIMonthlyModel::setDayOrdinalOption(const OAIDayOrdinalOption &day_ordinal_option) {
    m_day_ordinal_option = day_ordinal_option;
    m_day_ordinal_option_isSet = true;
}

bool OAIMonthlyModel::is_day_ordinal_option_Set() const{
    return m_day_ordinal_option_isSet;
}

bool OAIMonthlyModel::is_day_ordinal_option_Valid() const{
    return m_day_ordinal_option_isValid;
}

qint32 OAIMonthlyModel::getInterval() const {
    return m_interval;
}
void OAIMonthlyModel::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIMonthlyModel::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIMonthlyModel::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAIMonthlyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_ordinal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_ordinal_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonthlyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
