/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesReadApi_H
#define OAI_OAIFilesReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAIFileKeywordModel.h"
#include "OAIFileModel.h"
#include "OAIHttpFileElement.h"
#include "OAIInvoiceFileModel.h"
#include "OAIInvoicePdfGetOptions.h"
#include "OAIInvoiceType.h"
#include "OAIKeyValuePairOfStringAndSortDirection.h"
#include "OAIProjectFileModel.h"
#include "OAIProjectTravelExpenseFileModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesReadApi : public QObject {
    Q_OBJECT

public:
    OAIFilesReadApi(const int timeOut = 0);
    ~OAIFilesReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void fileDataGetDataForFile(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  include_data_in_response bool [optional]
    */
    virtual void filesGetFile(const QString &guid, const ::OpenAPI::OptionalParam<bool> &include_data_in_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void filesGetInvoiceFile(const QString &guid);

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void filesGetInvoiceFiles(const QString &invoice_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void filesGetProjectFile(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void filesGetProjectFiles(const QString &project_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void filesGetTravelExpenseFile(const QString &guid);

    /**
    * @param[in]  project_travel_expense_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void filesGetTravelExpenseFiles(const QString &project_travel_expense_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    */
    virtual void filesGetUsersTravelExpensesFiles(const QString &user_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  file_guid QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void keywordsGetFileKeywords(const QString &file_guid, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  invoice_type OAIInvoiceType [optional]
    * @param[in]  pdf_get_options OAIInvoicePdfGetOptions [optional]
    */
    virtual void pdfGetInvoicePdf(const QString &guid, const ::OpenAPI::OptionalParam<OAIInvoiceType> &invoice_type = ::OpenAPI::OptionalParam<OAIInvoiceType>(), const ::OpenAPI::OptionalParam<OAIInvoicePdfGetOptions> &pdf_get_options = ::OpenAPI::OptionalParam<OAIInvoicePdfGetOptions>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void pdfGetTravelReimbursementPdf(const QString &guid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fileDataGetDataForFileCallback(OAIHttpRequestWorker *worker);
    void filesGetFileCallback(OAIHttpRequestWorker *worker);
    void filesGetInvoiceFileCallback(OAIHttpRequestWorker *worker);
    void filesGetInvoiceFilesCallback(OAIHttpRequestWorker *worker);
    void filesGetProjectFileCallback(OAIHttpRequestWorker *worker);
    void filesGetProjectFilesCallback(OAIHttpRequestWorker *worker);
    void filesGetTravelExpenseFileCallback(OAIHttpRequestWorker *worker);
    void filesGetTravelExpenseFilesCallback(OAIHttpRequestWorker *worker);
    void filesGetUsersTravelExpensesFilesCallback(OAIHttpRequestWorker *worker);
    void keywordsGetFileKeywordsCallback(OAIHttpRequestWorker *worker);
    void pdfGetInvoicePdfCallback(OAIHttpRequestWorker *worker);
    void pdfGetTravelReimbursementPdfCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fileDataGetDataForFileSignal(OAIHttpFileElement summary);
    void filesGetFileSignal(OAIFileModel summary);
    void filesGetInvoiceFileSignal(OAIInvoiceFileModel summary);
    void filesGetInvoiceFilesSignal(QList<OAIInvoiceFileModel> summary);
    void filesGetProjectFileSignal(OAIProjectFileModel summary);
    void filesGetProjectFilesSignal(QList<OAIProjectFileModel> summary);
    void filesGetTravelExpenseFileSignal(OAIProjectTravelExpenseFileModel summary);
    void filesGetTravelExpenseFilesSignal(QList<OAIProjectTravelExpenseFileModel> summary);
    void filesGetUsersTravelExpensesFilesSignal(QList<OAIProjectTravelExpenseFileModel> summary);
    void keywordsGetFileKeywordsSignal(QList<OAIFileKeywordModel> summary);
    void pdfGetInvoicePdfSignal(OAIHttpFileElement summary);
    void pdfGetTravelReimbursementPdfSignal(OAIHttpFileElement summary);


    void fileDataGetDataForFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void filesGetFileSignalFull(OAIHttpRequestWorker *worker, OAIFileModel summary);
    void filesGetInvoiceFileSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceFileModel summary);
    void filesGetInvoiceFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceFileModel> summary);
    void filesGetProjectFileSignalFull(OAIHttpRequestWorker *worker, OAIProjectFileModel summary);
    void filesGetProjectFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileModel> summary);
    void filesGetTravelExpenseFileSignalFull(OAIHttpRequestWorker *worker, OAIProjectTravelExpenseFileModel summary);
    void filesGetTravelExpenseFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseFileModel> summary);
    void filesGetUsersTravelExpensesFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseFileModel> summary);
    void keywordsGetFileKeywordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFileKeywordModel> summary);
    void pdfGetInvoicePdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void pdfGetTravelReimbursementPdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use fileDataGetDataForFileSignalError() instead")
    void fileDataGetDataForFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDataGetDataForFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFileSignalError() instead")
    void filesGetFileSignalE(OAIFileModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFileSignalError(OAIFileModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetInvoiceFileSignalError() instead")
    void filesGetInvoiceFileSignalE(OAIInvoiceFileModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetInvoiceFileSignalError(OAIInvoiceFileModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetInvoiceFilesSignalError() instead")
    void filesGetInvoiceFilesSignalE(QList<OAIInvoiceFileModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetInvoiceFilesSignalError(QList<OAIInvoiceFileModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetProjectFileSignalError() instead")
    void filesGetProjectFileSignalE(OAIProjectFileModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetProjectFileSignalError(OAIProjectFileModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetProjectFilesSignalError() instead")
    void filesGetProjectFilesSignalE(QList<OAIProjectFileModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetProjectFilesSignalError(QList<OAIProjectFileModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetTravelExpenseFileSignalError() instead")
    void filesGetTravelExpenseFileSignalE(OAIProjectTravelExpenseFileModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetTravelExpenseFileSignalError(OAIProjectTravelExpenseFileModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetTravelExpenseFilesSignalError() instead")
    void filesGetTravelExpenseFilesSignalE(QList<OAIProjectTravelExpenseFileModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetTravelExpenseFilesSignalError(QList<OAIProjectTravelExpenseFileModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetUsersTravelExpensesFilesSignalError() instead")
    void filesGetUsersTravelExpensesFilesSignalE(QList<OAIProjectTravelExpenseFileModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetUsersTravelExpensesFilesSignalError(QList<OAIProjectTravelExpenseFileModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetFileKeywordsSignalError() instead")
    void keywordsGetFileKeywordsSignalE(QList<OAIFileKeywordModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetFileKeywordsSignalError(QList<OAIFileKeywordModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pdfGetInvoicePdfSignalError() instead")
    void pdfGetInvoicePdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pdfGetInvoicePdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pdfGetTravelReimbursementPdfSignalError() instead")
    void pdfGetTravelReimbursementPdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pdfGetTravelReimbursementPdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fileDataGetDataForFileSignalErrorFull() instead")
    void fileDataGetDataForFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDataGetDataForFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFileSignalErrorFull() instead")
    void filesGetFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetInvoiceFileSignalErrorFull() instead")
    void filesGetInvoiceFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetInvoiceFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetInvoiceFilesSignalErrorFull() instead")
    void filesGetInvoiceFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetInvoiceFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetProjectFileSignalErrorFull() instead")
    void filesGetProjectFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetProjectFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetProjectFilesSignalErrorFull() instead")
    void filesGetProjectFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetProjectFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetTravelExpenseFileSignalErrorFull() instead")
    void filesGetTravelExpenseFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetTravelExpenseFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetTravelExpenseFilesSignalErrorFull() instead")
    void filesGetTravelExpenseFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetTravelExpenseFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetUsersTravelExpensesFilesSignalErrorFull() instead")
    void filesGetUsersTravelExpensesFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetUsersTravelExpensesFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetFileKeywordsSignalErrorFull() instead")
    void keywordsGetFileKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetFileKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pdfGetInvoicePdfSignalErrorFull() instead")
    void pdfGetInvoicePdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pdfGetInvoicePdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pdfGetTravelReimbursementPdfSignalErrorFull() instead")
    void pdfGetTravelReimbursementPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pdfGetTravelReimbursementPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
