/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProposalFeeRowInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProposalFeeRowInputModel::OAIProposalFeeRowInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProposalFeeRowInputModel::OAIProposalFeeRowInputModel() {
    this->initializeModel();
}

OAIProposalFeeRowInputModel::~OAIProposalFeeRowInputModel() {}

void OAIProposalFeeRowInputModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_shown_on_proposal_isSet = false;
    m_is_shown_on_proposal_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_project_fee_isSet = false;
    m_project_fee_isValid = false;

    m_proposal_isSet = false;
    m_proposal_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIProposalFeeRowInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProposalFeeRowInputModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_shown_on_proposal_isValid = ::OpenAPI::fromJsonValue(m_is_shown_on_proposal, json[QString("isShownOnProposal")]);
    m_is_shown_on_proposal_isSet = !json[QString("isShownOnProposal")].isNull() && m_is_shown_on_proposal_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_project_fee_isValid = ::OpenAPI::fromJsonValue(m_project_fee, json[QString("projectFee")]);
    m_project_fee_isSet = !json[QString("projectFee")].isNull() && m_project_fee_isValid;

    m_proposal_isValid = ::OpenAPI::fromJsonValue(m_proposal, json[QString("proposal")]);
    m_proposal_isSet = !json[QString("proposal")].isNull() && m_proposal_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIProposalFeeRowInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProposalFeeRowInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_shown_on_proposal_isSet) {
        obj.insert(QString("isShownOnProposal"), ::OpenAPI::toJsonValue(m_is_shown_on_proposal));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_project_fee.isSet()) {
        obj.insert(QString("projectFee"), ::OpenAPI::toJsonValue(m_project_fee));
    }
    if (m_proposal.isSet()) {
        obj.insert(QString("proposal"), ::OpenAPI::toJsonValue(m_proposal));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_subtotal.isSet()) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

QString OAIProposalFeeRowInputModel::getDescription() const {
    return m_description;
}
void OAIProposalFeeRowInputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProposalFeeRowInputModel::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProposalFeeRowInputModel::isIsShownOnProposal() const {
    return m_is_shown_on_proposal;
}
void OAIProposalFeeRowInputModel::setIsShownOnProposal(const bool &is_shown_on_proposal) {
    m_is_shown_on_proposal = is_shown_on_proposal;
    m_is_shown_on_proposal_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_is_shown_on_proposal_Set() const{
    return m_is_shown_on_proposal_isSet;
}

bool OAIProposalFeeRowInputModel::is_is_shown_on_proposal_Valid() const{
    return m_is_shown_on_proposal_isValid;
}

QString OAIProposalFeeRowInputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIProposalFeeRowInputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIProposalFeeRowInputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIProposalFeeRowInputModel::getName() const {
    return m_name;
}
void OAIProposalFeeRowInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProposalFeeRowInputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAISimpleInputModel OAIProposalFeeRowInputModel::getProduct() const {
    return m_product;
}
void OAIProposalFeeRowInputModel::setProduct(const OAISimpleInputModel &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_product_Set() const{
    return m_product_isSet;
}

bool OAIProposalFeeRowInputModel::is_product_Valid() const{
    return m_product_isValid;
}

OAISimpleInputModel OAIProposalFeeRowInputModel::getProjectFee() const {
    return m_project_fee;
}
void OAIProposalFeeRowInputModel::setProjectFee(const OAISimpleInputModel &project_fee) {
    m_project_fee = project_fee;
    m_project_fee_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_project_fee_Set() const{
    return m_project_fee_isSet;
}

bool OAIProposalFeeRowInputModel::is_project_fee_Valid() const{
    return m_project_fee_isValid;
}

OAISimpleInputRequiredModel OAIProposalFeeRowInputModel::getProposal() const {
    return m_proposal;
}
void OAIProposalFeeRowInputModel::setProposal(const OAISimpleInputRequiredModel &proposal) {
    m_proposal = proposal;
    m_proposal_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_proposal_Set() const{
    return m_proposal_isSet;
}

bool OAIProposalFeeRowInputModel::is_proposal_Valid() const{
    return m_proposal_isValid;
}

double OAIProposalFeeRowInputModel::getQuantity() const {
    return m_quantity;
}
void OAIProposalFeeRowInputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProposalFeeRowInputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIProposalFeeRowInputModel::getSortOrder() const {
    return m_sort_order;
}
void OAIProposalFeeRowInputModel::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIProposalFeeRowInputModel::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAISimpleInputModel OAIProposalFeeRowInputModel::getSubtotal() const {
    return m_subtotal;
}
void OAIProposalFeeRowInputModel::setSubtotal(const OAISimpleInputModel &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIProposalFeeRowInputModel::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

OAIMoneyInputModel OAIProposalFeeRowInputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIProposalFeeRowInputModel::setUnitCost(const OAIMoneyInputModel &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIProposalFeeRowInputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyInputModel OAIProposalFeeRowInputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProposalFeeRowInputModel::setUnitPrice(const OAIMoneyInputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProposalFeeRowInputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

double OAIProposalFeeRowInputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIProposalFeeRowInputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIProposalFeeRowInputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIProposalFeeRowInputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIProposalFeeRowInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shown_on_proposal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProposalFeeRowInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_proposal_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
