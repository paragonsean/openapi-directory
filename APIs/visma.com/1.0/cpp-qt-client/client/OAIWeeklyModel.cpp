/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeeklyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeeklyModel::OAIWeeklyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeeklyModel::OAIWeeklyModel() {
    this->initializeModel();
}

OAIWeeklyModel::~OAIWeeklyModel() {}

void OAIWeeklyModel::initializeModel() {

    m_friday_isSet = false;
    m_friday_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_monday_isSet = false;
    m_monday_isValid = false;

    m_saturday_isSet = false;
    m_saturday_isValid = false;

    m_sunday_isSet = false;
    m_sunday_isValid = false;

    m_thursday_isSet = false;
    m_thursday_isValid = false;

    m_tuesday_isSet = false;
    m_tuesday_isValid = false;

    m_wednesday_isSet = false;
    m_wednesday_isValid = false;
}

void OAIWeeklyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeeklyModel::fromJsonObject(QJsonObject json) {

    m_friday_isValid = ::OpenAPI::fromJsonValue(m_friday, json[QString("friday")]);
    m_friday_isSet = !json[QString("friday")].isNull() && m_friday_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_monday_isValid = ::OpenAPI::fromJsonValue(m_monday, json[QString("monday")]);
    m_monday_isSet = !json[QString("monday")].isNull() && m_monday_isValid;

    m_saturday_isValid = ::OpenAPI::fromJsonValue(m_saturday, json[QString("saturday")]);
    m_saturday_isSet = !json[QString("saturday")].isNull() && m_saturday_isValid;

    m_sunday_isValid = ::OpenAPI::fromJsonValue(m_sunday, json[QString("sunday")]);
    m_sunday_isSet = !json[QString("sunday")].isNull() && m_sunday_isValid;

    m_thursday_isValid = ::OpenAPI::fromJsonValue(m_thursday, json[QString("thursday")]);
    m_thursday_isSet = !json[QString("thursday")].isNull() && m_thursday_isValid;

    m_tuesday_isValid = ::OpenAPI::fromJsonValue(m_tuesday, json[QString("tuesday")]);
    m_tuesday_isSet = !json[QString("tuesday")].isNull() && m_tuesday_isValid;

    m_wednesday_isValid = ::OpenAPI::fromJsonValue(m_wednesday, json[QString("wednesday")]);
    m_wednesday_isSet = !json[QString("wednesday")].isNull() && m_wednesday_isValid;
}

QString OAIWeeklyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeeklyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_friday_isSet) {
        obj.insert(QString("friday"), ::OpenAPI::toJsonValue(m_friday));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_monday_isSet) {
        obj.insert(QString("monday"), ::OpenAPI::toJsonValue(m_monday));
    }
    if (m_saturday_isSet) {
        obj.insert(QString("saturday"), ::OpenAPI::toJsonValue(m_saturday));
    }
    if (m_sunday_isSet) {
        obj.insert(QString("sunday"), ::OpenAPI::toJsonValue(m_sunday));
    }
    if (m_thursday_isSet) {
        obj.insert(QString("thursday"), ::OpenAPI::toJsonValue(m_thursday));
    }
    if (m_tuesday_isSet) {
        obj.insert(QString("tuesday"), ::OpenAPI::toJsonValue(m_tuesday));
    }
    if (m_wednesday_isSet) {
        obj.insert(QString("wednesday"), ::OpenAPI::toJsonValue(m_wednesday));
    }
    return obj;
}

bool OAIWeeklyModel::isFriday() const {
    return m_friday;
}
void OAIWeeklyModel::setFriday(const bool &friday) {
    m_friday = friday;
    m_friday_isSet = true;
}

bool OAIWeeklyModel::is_friday_Set() const{
    return m_friday_isSet;
}

bool OAIWeeklyModel::is_friday_Valid() const{
    return m_friday_isValid;
}

qint32 OAIWeeklyModel::getInterval() const {
    return m_interval;
}
void OAIWeeklyModel::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIWeeklyModel::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIWeeklyModel::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAIWeeklyModel::isMonday() const {
    return m_monday;
}
void OAIWeeklyModel::setMonday(const bool &monday) {
    m_monday = monday;
    m_monday_isSet = true;
}

bool OAIWeeklyModel::is_monday_Set() const{
    return m_monday_isSet;
}

bool OAIWeeklyModel::is_monday_Valid() const{
    return m_monday_isValid;
}

bool OAIWeeklyModel::isSaturday() const {
    return m_saturday;
}
void OAIWeeklyModel::setSaturday(const bool &saturday) {
    m_saturday = saturday;
    m_saturday_isSet = true;
}

bool OAIWeeklyModel::is_saturday_Set() const{
    return m_saturday_isSet;
}

bool OAIWeeklyModel::is_saturday_Valid() const{
    return m_saturday_isValid;
}

bool OAIWeeklyModel::isSunday() const {
    return m_sunday;
}
void OAIWeeklyModel::setSunday(const bool &sunday) {
    m_sunday = sunday;
    m_sunday_isSet = true;
}

bool OAIWeeklyModel::is_sunday_Set() const{
    return m_sunday_isSet;
}

bool OAIWeeklyModel::is_sunday_Valid() const{
    return m_sunday_isValid;
}

bool OAIWeeklyModel::isThursday() const {
    return m_thursday;
}
void OAIWeeklyModel::setThursday(const bool &thursday) {
    m_thursday = thursday;
    m_thursday_isSet = true;
}

bool OAIWeeklyModel::is_thursday_Set() const{
    return m_thursday_isSet;
}

bool OAIWeeklyModel::is_thursday_Valid() const{
    return m_thursday_isValid;
}

bool OAIWeeklyModel::isTuesday() const {
    return m_tuesday;
}
void OAIWeeklyModel::setTuesday(const bool &tuesday) {
    m_tuesday = tuesday;
    m_tuesday_isSet = true;
}

bool OAIWeeklyModel::is_tuesday_Set() const{
    return m_tuesday_isSet;
}

bool OAIWeeklyModel::is_tuesday_Valid() const{
    return m_tuesday_isValid;
}

bool OAIWeeklyModel::isWednesday() const {
    return m_wednesday;
}
void OAIWeeklyModel::setWednesday(const bool &wednesday) {
    m_wednesday = wednesday;
    m_wednesday_isSet = true;
}

bool OAIWeeklyModel::is_wednesday_Set() const{
    return m_wednesday_isSet;
}

bool OAIWeeklyModel::is_wednesday_Valid() const{
    return m_wednesday_isValid;
}

bool OAIWeeklyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thursday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuesday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wednesday_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeeklyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
