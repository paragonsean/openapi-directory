/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITravelExpenseTypeCountrySettingsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITravelExpenseTypeCountrySettingsModel::OAITravelExpenseTypeCountrySettingsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITravelExpenseTypeCountrySettingsModel::OAITravelExpenseTypeCountrySettingsModel() {
    this->initializeModel();
}

OAITravelExpenseTypeCountrySettingsModel::~OAITravelExpenseTypeCountrySettingsModel() {}

void OAITravelExpenseTypeCountrySettingsModel::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_purchase_vat_rate_isSet = false;
    m_purchase_vat_rate_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAITravelExpenseTypeCountrySettingsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITravelExpenseTypeCountrySettingsModel::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_purchase_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_purchase_vat_rate, json[QString("purchaseVatRate")]);
    m_purchase_vat_rate_isSet = !json[QString("purchaseVatRate")].isNull() && m_purchase_vat_rate_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAITravelExpenseTypeCountrySettingsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITravelExpenseTypeCountrySettingsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_purchase_vat_rate_isSet) {
        obj.insert(QString("purchaseVatRate"), ::OpenAPI::toJsonValue(m_purchase_vat_rate));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

OAIModelBaseWithRequiredGuid OAITravelExpenseTypeCountrySettingsModel::getCountry() const {
    return m_country;
}
void OAITravelExpenseTypeCountrySettingsModel::setCountry(const OAIModelBaseWithRequiredGuid &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_country_Valid() const{
    return m_country_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAITravelExpenseTypeCountrySettingsModel::getCreatedBy() const {
    return m_created_by;
}
void OAITravelExpenseTypeCountrySettingsModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAITravelExpenseTypeCountrySettingsModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAITravelExpenseTypeCountrySettingsModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAITravelExpenseTypeCountrySettingsModel::getGuid() const {
    return m_guid;
}
void OAITravelExpenseTypeCountrySettingsModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAITravelExpenseTypeCountrySettingsModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAITravelExpenseTypeCountrySettingsModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAITravelExpenseTypeCountrySettingsModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAITravelExpenseTypeCountrySettingsModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIModelBaseWithRequiredGuid OAITravelExpenseTypeCountrySettingsModel::getProduct() const {
    return m_product;
}
void OAITravelExpenseTypeCountrySettingsModel::setProduct(const OAIModelBaseWithRequiredGuid &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_product_Set() const{
    return m_product_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_product_Valid() const{
    return m_product_isValid;
}

double OAITravelExpenseTypeCountrySettingsModel::getPurchaseVatRate() const {
    return m_purchase_vat_rate;
}
void OAITravelExpenseTypeCountrySettingsModel::setPurchaseVatRate(const double &purchase_vat_rate) {
    m_purchase_vat_rate = purchase_vat_rate;
    m_purchase_vat_rate_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_purchase_vat_rate_Set() const{
    return m_purchase_vat_rate_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_purchase_vat_rate_Valid() const{
    return m_purchase_vat_rate_isValid;
}

double OAITravelExpenseTypeCountrySettingsModel::getVatRate() const {
    return m_vat_rate;
}
void OAITravelExpenseTypeCountrySettingsModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAITravelExpenseTypeCountrySettingsModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAITravelExpenseTypeCountrySettingsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITravelExpenseTypeCountrySettingsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_product_isValid && true;
}

} // namespace OpenAPI
