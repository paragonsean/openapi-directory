/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectWorkTypeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectWorkTypeModel::OAIProjectWorkTypeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectWorkTypeModel::OAIProjectWorkTypeModel() {
    this->initializeModel();
}

OAIProjectWorkTypeModel::~OAIProjectWorkTypeModel() {}

void OAIProjectWorkTypeModel::initializeModel() {

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_project_guid_isSet = false;
    m_project_guid_isValid = false;

    m_worktype_isSet = false;
    m_worktype_isValid = false;
}

void OAIProjectWorkTypeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectWorkTypeModel::fromJsonObject(QJsonObject json) {

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_project_guid_isValid = ::OpenAPI::fromJsonValue(m_project_guid, json[QString("projectGuid")]);
    m_project_guid_isSet = !json[QString("projectGuid")].isNull() && m_project_guid_isValid;

    m_worktype_isValid = ::OpenAPI::fromJsonValue(m_worktype, json[QString("worktype")]);
    m_worktype_isSet = !json[QString("worktype")].isNull() && m_worktype_isValid;
}

QString OAIProjectWorkTypeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectWorkTypeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_project_guid_isSet) {
        obj.insert(QString("projectGuid"), ::OpenAPI::toJsonValue(m_project_guid));
    }
    if (m_worktype.isSet()) {
        obj.insert(QString("worktype"), ::OpenAPI::toJsonValue(m_worktype));
    }
    return obj;
}

QString OAIProjectWorkTypeModel::getGuid() const {
    return m_guid;
}
void OAIProjectWorkTypeModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProjectWorkTypeModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProjectWorkTypeModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIProjectWorkTypeModel::isIsDefault() const {
    return m_is_default;
}
void OAIProjectWorkTypeModel::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIProjectWorkTypeModel::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIProjectWorkTypeModel::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIProjectWorkTypeModel::getProjectGuid() const {
    return m_project_guid;
}
void OAIProjectWorkTypeModel::setProjectGuid(const QString &project_guid) {
    m_project_guid = project_guid;
    m_project_guid_isSet = true;
}

bool OAIProjectWorkTypeModel::is_project_guid_Set() const{
    return m_project_guid_isSet;
}

bool OAIProjectWorkTypeModel::is_project_guid_Valid() const{
    return m_project_guid_isValid;
}

OAIWorkTypeSubModel OAIProjectWorkTypeModel::getWorktype() const {
    return m_worktype;
}
void OAIProjectWorkTypeModel::setWorktype(const OAIWorkTypeSubModel &worktype) {
    m_worktype = worktype;
    m_worktype_isSet = true;
}

bool OAIProjectWorkTypeModel::is_worktype_Set() const{
    return m_worktype_isSet;
}

bool OAIProjectWorkTypeModel::is_worktype_Valid() const{
    return m_worktype_isValid;
}

bool OAIProjectWorkTypeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worktype.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectWorkTypeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_guid_isValid && m_worktype_isValid && true;
}

} // namespace OpenAPI
