/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityParticipantModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityParticipantModel::OAIActivityParticipantModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityParticipantModel::OAIActivityParticipantModel() {
    this->initializeModel();
}

OAIActivityParticipantModel::~OAIActivityParticipantModel() {}

void OAIActivityParticipantModel::initializeModel() {

    m_activity_guid_isSet = false;
    m_activity_guid_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_mobile_phone_isSet = false;
    m_mobile_phone_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_participant_guid_isSet = false;
    m_participant_guid_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIActivityParticipantModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityParticipantModel::fromJsonObject(QJsonObject json) {

    m_activity_guid_isValid = ::OpenAPI::fromJsonValue(m_activity_guid, json[QString("activityGuid")]);
    m_activity_guid_isSet = !json[QString("activityGuid")].isNull() && m_activity_guid_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_mobile_phone_isValid = ::OpenAPI::fromJsonValue(m_mobile_phone, json[QString("mobilePhone")]);
    m_mobile_phone_isSet = !json[QString("mobilePhone")].isNull() && m_mobile_phone_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_participant_guid_isValid = ::OpenAPI::fromJsonValue(m_participant_guid, json[QString("participantGuid")]);
    m_participant_guid_isSet = !json[QString("participantGuid")].isNull() && m_participant_guid_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIActivityParticipantModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityParticipantModel::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_guid_isSet) {
        obj.insert(QString("activityGuid"), ::OpenAPI::toJsonValue(m_activity_guid));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_mobile_phone_isSet) {
        obj.insert(QString("mobilePhone"), ::OpenAPI::toJsonValue(m_mobile_phone));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_participant_guid_isSet) {
        obj.insert(QString("participantGuid"), ::OpenAPI::toJsonValue(m_participant_guid));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIActivityParticipantModel::getActivityGuid() const {
    return m_activity_guid;
}
void OAIActivityParticipantModel::setActivityGuid(const QString &activity_guid) {
    m_activity_guid = activity_guid;
    m_activity_guid_isSet = true;
}

bool OAIActivityParticipantModel::is_activity_guid_Set() const{
    return m_activity_guid_isSet;
}

bool OAIActivityParticipantModel::is_activity_guid_Valid() const{
    return m_activity_guid_isValid;
}

QString OAIActivityParticipantModel::getEmail() const {
    return m_email;
}
void OAIActivityParticipantModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIActivityParticipantModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIActivityParticipantModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIActivityParticipantModel::getGuid() const {
    return m_guid;
}
void OAIActivityParticipantModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIActivityParticipantModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIActivityParticipantModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIActivityParticipantModel::isIsActive() const {
    return m_is_active;
}
void OAIActivityParticipantModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIActivityParticipantModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIActivityParticipantModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIActivityParticipantModel::getMobilePhone() const {
    return m_mobile_phone;
}
void OAIActivityParticipantModel::setMobilePhone(const QString &mobile_phone) {
    m_mobile_phone = mobile_phone;
    m_mobile_phone_isSet = true;
}

bool OAIActivityParticipantModel::is_mobile_phone_Set() const{
    return m_mobile_phone_isSet;
}

bool OAIActivityParticipantModel::is_mobile_phone_Valid() const{
    return m_mobile_phone_isValid;
}

QString OAIActivityParticipantModel::getName() const {
    return m_name;
}
void OAIActivityParticipantModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivityParticipantModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivityParticipantModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIActivityParticipantModel::getParticipantGuid() const {
    return m_participant_guid;
}
void OAIActivityParticipantModel::setParticipantGuid(const QString &participant_guid) {
    m_participant_guid = participant_guid;
    m_participant_guid_isSet = true;
}

bool OAIActivityParticipantModel::is_participant_guid_Set() const{
    return m_participant_guid_isSet;
}

bool OAIActivityParticipantModel::is_participant_guid_Valid() const{
    return m_participant_guid_isValid;
}

QString OAIActivityParticipantModel::getPhone() const {
    return m_phone;
}
void OAIActivityParticipantModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIActivityParticipantModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIActivityParticipantModel::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIMemberStatus OAIActivityParticipantModel::getStatus() const {
    return m_status;
}
void OAIActivityParticipantModel::setStatus(const OAIMemberStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActivityParticipantModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActivityParticipantModel::is_status_Valid() const{
    return m_status_isValid;
}

OAIParticipantType OAIActivityParticipantModel::getType() const {
    return m_type;
}
void OAIActivityParticipantModel::setType(const OAIParticipantType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivityParticipantModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivityParticipantModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIActivityParticipantModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityParticipantModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_guid_isValid && m_participant_guid_isValid && true;
}

} // namespace OpenAPI
