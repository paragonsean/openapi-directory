/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateFreeTextModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateFreeTextModel::OAITemplateFreeTextModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateFreeTextModel::OAITemplateFreeTextModel() {
    this->initializeModel();
}

OAITemplateFreeTextModel::~OAITemplateFreeTextModel() {}

void OAITemplateFreeTextModel::initializeModel() {

    m_allow_tags_isSet = false;
    m_allow_tags_isValid = false;

    m_tag_context_isSet = false;
    m_tag_context_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITemplateFreeTextModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateFreeTextModel::fromJsonObject(QJsonObject json) {

    m_allow_tags_isValid = ::OpenAPI::fromJsonValue(m_allow_tags, json[QString("allowTags")]);
    m_allow_tags_isSet = !json[QString("allowTags")].isNull() && m_allow_tags_isValid;

    m_tag_context_isValid = ::OpenAPI::fromJsonValue(m_tag_context, json[QString("tagContext")]);
    m_tag_context_isSet = !json[QString("tagContext")].isNull() && m_tag_context_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITemplateFreeTextModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateFreeTextModel::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_tags_isSet) {
        obj.insert(QString("allowTags"), ::OpenAPI::toJsonValue(m_allow_tags));
    }
    if (m_tag_context_isSet) {
        obj.insert(QString("tagContext"), ::OpenAPI::toJsonValue(m_tag_context));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAITemplateFreeTextModel::isAllowTags() const {
    return m_allow_tags;
}
void OAITemplateFreeTextModel::setAllowTags(const bool &allow_tags) {
    m_allow_tags = allow_tags;
    m_allow_tags_isSet = true;
}

bool OAITemplateFreeTextModel::is_allow_tags_Set() const{
    return m_allow_tags_isSet;
}

bool OAITemplateFreeTextModel::is_allow_tags_Valid() const{
    return m_allow_tags_isValid;
}

QString OAITemplateFreeTextModel::getTagContext() const {
    return m_tag_context;
}
void OAITemplateFreeTextModel::setTagContext(const QString &tag_context) {
    m_tag_context = tag_context;
    m_tag_context_isSet = true;
}

bool OAITemplateFreeTextModel::is_tag_context_Set() const{
    return m_tag_context_isSet;
}

bool OAITemplateFreeTextModel::is_tag_context_Valid() const{
    return m_tag_context_isValid;
}

QString OAITemplateFreeTextModel::getValue() const {
    return m_value;
}
void OAITemplateFreeTextModel::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITemplateFreeTextModel::is_value_Set() const{
    return m_value_isSet;
}

bool OAITemplateFreeTextModel::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITemplateFreeTextModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateFreeTextModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
