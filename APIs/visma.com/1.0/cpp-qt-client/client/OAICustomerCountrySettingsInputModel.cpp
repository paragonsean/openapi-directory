/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerCountrySettingsInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerCountrySettingsInputModel::OAICustomerCountrySettingsInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerCountrySettingsInputModel::OAICustomerCountrySettingsInputModel() {
    this->initializeModel();
}

OAICustomerCountrySettingsInputModel::~OAICustomerCountrySettingsInputModel() {}

void OAICustomerCountrySettingsInputModel::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_is_tax_free_isSet = false;
    m_is_tax_free_isValid = false;

    m_tax_free_description_isSet = false;
    m_tax_free_description_isValid = false;

    m_value_added_tax_isSet = false;
    m_value_added_tax_isValid = false;

    m_zero_vat_category_code_en16931_isSet = false;
    m_zero_vat_category_code_en16931_isValid = false;
}

void OAICustomerCountrySettingsInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerCountrySettingsInputModel::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_is_tax_free_isValid = ::OpenAPI::fromJsonValue(m_is_tax_free, json[QString("isTaxFree")]);
    m_is_tax_free_isSet = !json[QString("isTaxFree")].isNull() && m_is_tax_free_isValid;

    m_tax_free_description_isValid = ::OpenAPI::fromJsonValue(m_tax_free_description, json[QString("taxFreeDescription")]);
    m_tax_free_description_isSet = !json[QString("taxFreeDescription")].isNull() && m_tax_free_description_isValid;

    m_value_added_tax_isValid = ::OpenAPI::fromJsonValue(m_value_added_tax, json[QString("valueAddedTax")]);
    m_value_added_tax_isSet = !json[QString("valueAddedTax")].isNull() && m_value_added_tax_isValid;

    m_zero_vat_category_code_en16931_isValid = ::OpenAPI::fromJsonValue(m_zero_vat_category_code_en16931, json[QString("zeroVatCategoryCodeEn16931")]);
    m_zero_vat_category_code_en16931_isSet = !json[QString("zeroVatCategoryCodeEn16931")].isNull() && m_zero_vat_category_code_en16931_isValid;
}

QString OAICustomerCountrySettingsInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerCountrySettingsInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_is_tax_free_isSet) {
        obj.insert(QString("isTaxFree"), ::OpenAPI::toJsonValue(m_is_tax_free));
    }
    if (m_tax_free_description_isSet) {
        obj.insert(QString("taxFreeDescription"), ::OpenAPI::toJsonValue(m_tax_free_description));
    }
    if (m_value_added_tax.isSet()) {
        obj.insert(QString("valueAddedTax"), ::OpenAPI::toJsonValue(m_value_added_tax));
    }
    if (m_zero_vat_category_code_en16931_isSet) {
        obj.insert(QString("zeroVatCategoryCodeEn16931"), ::OpenAPI::toJsonValue(m_zero_vat_category_code_en16931));
    }
    return obj;
}

OAISimpleInputRequiredModel OAICustomerCountrySettingsInputModel::getCountry() const {
    return m_country;
}
void OAICustomerCountrySettingsInputModel::setCountry(const OAISimpleInputRequiredModel &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICustomerCountrySettingsInputModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAICustomerCountrySettingsInputModel::is_country_Valid() const{
    return m_country_isValid;
}

OAISimpleInputRequiredModel OAICustomerCountrySettingsInputModel::getCustomer() const {
    return m_customer;
}
void OAICustomerCountrySettingsInputModel::setCustomer(const OAISimpleInputRequiredModel &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerCountrySettingsInputModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerCountrySettingsInputModel::is_customer_Valid() const{
    return m_customer_isValid;
}

bool OAICustomerCountrySettingsInputModel::isIsTaxFree() const {
    return m_is_tax_free;
}
void OAICustomerCountrySettingsInputModel::setIsTaxFree(const bool &is_tax_free) {
    m_is_tax_free = is_tax_free;
    m_is_tax_free_isSet = true;
}

bool OAICustomerCountrySettingsInputModel::is_is_tax_free_Set() const{
    return m_is_tax_free_isSet;
}

bool OAICustomerCountrySettingsInputModel::is_is_tax_free_Valid() const{
    return m_is_tax_free_isValid;
}

QString OAICustomerCountrySettingsInputModel::getTaxFreeDescription() const {
    return m_tax_free_description;
}
void OAICustomerCountrySettingsInputModel::setTaxFreeDescription(const QString &tax_free_description) {
    m_tax_free_description = tax_free_description;
    m_tax_free_description_isSet = true;
}

bool OAICustomerCountrySettingsInputModel::is_tax_free_description_Set() const{
    return m_tax_free_description_isSet;
}

bool OAICustomerCountrySettingsInputModel::is_tax_free_description_Valid() const{
    return m_tax_free_description_isValid;
}

OAISimpleInputModel OAICustomerCountrySettingsInputModel::getValueAddedTax() const {
    return m_value_added_tax;
}
void OAICustomerCountrySettingsInputModel::setValueAddedTax(const OAISimpleInputModel &value_added_tax) {
    m_value_added_tax = value_added_tax;
    m_value_added_tax_isSet = true;
}

bool OAICustomerCountrySettingsInputModel::is_value_added_tax_Set() const{
    return m_value_added_tax_isSet;
}

bool OAICustomerCountrySettingsInputModel::is_value_added_tax_Valid() const{
    return m_value_added_tax_isValid;
}

QString OAICustomerCountrySettingsInputModel::getZeroVatCategoryCodeEn16931() const {
    return m_zero_vat_category_code_en16931;
}
void OAICustomerCountrySettingsInputModel::setZeroVatCategoryCodeEn16931(const QString &zero_vat_category_code_en16931) {
    m_zero_vat_category_code_en16931 = zero_vat_category_code_en16931;
    m_zero_vat_category_code_en16931_isSet = true;
}

bool OAICustomerCountrySettingsInputModel::is_zero_vat_category_code_en16931_Set() const{
    return m_zero_vat_category_code_en16931_isSet;
}

bool OAICustomerCountrySettingsInputModel::is_zero_vat_category_code_en16931_Valid() const{
    return m_zero_vat_category_code_en16931_isValid;
}

bool OAICustomerCountrySettingsInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tax_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_free_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_added_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zero_vat_category_code_en16931_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerCountrySettingsInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_customer_isValid && true;
}

} // namespace OpenAPI
