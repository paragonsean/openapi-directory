/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceSkin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceSkin::OAIInvoiceSkin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceSkin::OAIInvoiceSkin() {
    this->initializeModel();
}

OAIInvoiceSkin::~OAIInvoiceSkin() {}

void OAIInvoiceSkin::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInvoiceSkin::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInvoiceSkin::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BlackAndWhite", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::BLACKANDWHITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Blue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::BLUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cyan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::CYAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Green", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::GREEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Lilac", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::LILAC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Orange", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::ORANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Plain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::PLAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Red", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::RED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Yellow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvoiceSkin::YELLOW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInvoiceSkin::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInvoiceSkin::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInvoiceSkin::BLACKANDWHITE:
            val = "BlackAndWhite";
            break;
        case eOAIInvoiceSkin::BLUE:
            val = "Blue";
            break;
        case eOAIInvoiceSkin::CYAN:
            val = "Cyan";
            break;
        case eOAIInvoiceSkin::GREEN:
            val = "Green";
            break;
        case eOAIInvoiceSkin::LILAC:
            val = "Lilac";
            break;
        case eOAIInvoiceSkin::ORANGE:
            val = "Orange";
            break;
        case eOAIInvoiceSkin::PLAIN:
            val = "Plain";
            break;
        case eOAIInvoiceSkin::RED:
            val = "Red";
            break;
        case eOAIInvoiceSkin::YELLOW:
            val = "Yellow";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInvoiceSkin::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInvoiceSkin::eOAIInvoiceSkin OAIInvoiceSkin::getValue() const {
    return m_value;
}

void OAIInvoiceSkin::setValue(const OAIInvoiceSkin::eOAIInvoiceSkin& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInvoiceSkin::isSet() const {
    
    return m_value_isSet;
}

bool OAIInvoiceSkin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
