/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorModel::OAIErrorModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorModel::OAIErrorModel() {
    this->initializeModel();
}

OAIErrorModel::~OAIErrorModel() {}

void OAIErrorModel::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_http_status_code_isSet = false;
    m_http_status_code_isValid = false;

    m_stack_isSet = false;
    m_stack_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIErrorModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorModel::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_http_status_code_isValid = ::OpenAPI::fromJsonValue(m_http_status_code, json[QString("httpStatusCode")]);
    m_http_status_code_isSet = !json[QString("httpStatusCode")].isNull() && m_http_status_code_isValid;

    m_stack_isValid = ::OpenAPI::fromJsonValue(m_stack, json[QString("stack")]);
    m_stack_isSet = !json[QString("stack")].isNull() && m_stack_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIErrorModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorModel::asJsonObject() const {
    QJsonObject obj;
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_http_status_code_isSet) {
        obj.insert(QString("httpStatusCode"), ::OpenAPI::toJsonValue(m_http_status_code));
    }
    if (m_stack_isSet) {
        obj.insert(QString("stack"), ::OpenAPI::toJsonValue(m_stack));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIExceptionDetailModel> OAIErrorModel::getDetails() const {
    return m_details;
}
void OAIErrorModel::setDetails(const QList<OAIExceptionDetailModel> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIErrorModel::is_details_Set() const{
    return m_details_isSet;
}

bool OAIErrorModel::is_details_Valid() const{
    return m_details_isValid;
}

qint32 OAIErrorModel::getHttpStatusCode() const {
    return m_http_status_code;
}
void OAIErrorModel::setHttpStatusCode(const qint32 &http_status_code) {
    m_http_status_code = http_status_code;
    m_http_status_code_isSet = true;
}

bool OAIErrorModel::is_http_status_code_Set() const{
    return m_http_status_code_isSet;
}

bool OAIErrorModel::is_http_status_code_Valid() const{
    return m_http_status_code_isValid;
}

QString OAIErrorModel::getStack() const {
    return m_stack;
}
void OAIErrorModel::setStack(const QString &stack) {
    m_stack = stack;
    m_stack_isSet = true;
}

bool OAIErrorModel::is_stack_Set() const{
    return m_stack_isSet;
}

bool OAIErrorModel::is_stack_Valid() const{
    return m_stack_isValid;
}

OAIExceptionTypeEnum OAIErrorModel::getType() const {
    return m_type;
}
void OAIErrorModel::setType(const OAIExceptionTypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIErrorModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIErrorModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIErrorModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
