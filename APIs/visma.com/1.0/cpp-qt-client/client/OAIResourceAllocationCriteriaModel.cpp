/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAllocationCriteriaModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAllocationCriteriaModel::OAIResourceAllocationCriteriaModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAllocationCriteriaModel::OAIResourceAllocationCriteriaModel() {
    this->initializeModel();
}

OAIResourceAllocationCriteriaModel::~OAIResourceAllocationCriteriaModel() {}

void OAIResourceAllocationCriteriaModel::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_include_absences_isSet = false;
    m_include_absences_isValid = false;

    m_phase_guids_isSet = false;
    m_phase_guids_isValid = false;

    m_project_business_unit_guids_isSet = false;
    m_project_business_unit_guids_isValid = false;

    m_project_guids_isSet = false;
    m_project_guids_isValid = false;

    m_project_manager_user_guids_isSet = false;
    m_project_manager_user_guids_isValid = false;

    m_project_status_type_guids_isSet = false;
    m_project_status_type_guids_isValid = false;

    m_project_tag_guids_isSet = false;
    m_project_tag_guids_isValid = false;

    m_resource_allocation_guids_isSet = false;
    m_resource_allocation_guids_isValid = false;

    m_sales_progresses_isSet = false;
    m_sales_progresses_isValid = false;

    m_sales_status_type_guids_isSet = false;
    m_sales_status_type_guids_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_superior_user_guids_isSet = false;
    m_superior_user_guids_isValid = false;

    m_use_sales_probability_isSet = false;
    m_use_sales_probability_isValid = false;

    m_user_business_unit_guids_isSet = false;
    m_user_business_unit_guids_isValid = false;

    m_user_guids_isSet = false;
    m_user_guids_isValid = false;

    m_user_license_types_isSet = false;
    m_user_license_types_isValid = false;

    m_user_tag_guids_isSet = false;
    m_user_tag_guids_isValid = false;
}

void OAIResourceAllocationCriteriaModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAllocationCriteriaModel::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_include_absences_isValid = ::OpenAPI::fromJsonValue(m_include_absences, json[QString("includeAbsences")]);
    m_include_absences_isSet = !json[QString("includeAbsences")].isNull() && m_include_absences_isValid;

    m_phase_guids_isValid = ::OpenAPI::fromJsonValue(m_phase_guids, json[QString("phaseGuids")]);
    m_phase_guids_isSet = !json[QString("phaseGuids")].isNull() && m_phase_guids_isValid;

    m_project_business_unit_guids_isValid = ::OpenAPI::fromJsonValue(m_project_business_unit_guids, json[QString("projectBusinessUnitGuids")]);
    m_project_business_unit_guids_isSet = !json[QString("projectBusinessUnitGuids")].isNull() && m_project_business_unit_guids_isValid;

    m_project_guids_isValid = ::OpenAPI::fromJsonValue(m_project_guids, json[QString("projectGuids")]);
    m_project_guids_isSet = !json[QString("projectGuids")].isNull() && m_project_guids_isValid;

    m_project_manager_user_guids_isValid = ::OpenAPI::fromJsonValue(m_project_manager_user_guids, json[QString("projectManagerUserGuids")]);
    m_project_manager_user_guids_isSet = !json[QString("projectManagerUserGuids")].isNull() && m_project_manager_user_guids_isValid;

    m_project_status_type_guids_isValid = ::OpenAPI::fromJsonValue(m_project_status_type_guids, json[QString("projectStatusTypeGuids")]);
    m_project_status_type_guids_isSet = !json[QString("projectStatusTypeGuids")].isNull() && m_project_status_type_guids_isValid;

    m_project_tag_guids_isValid = ::OpenAPI::fromJsonValue(m_project_tag_guids, json[QString("projectTagGuids")]);
    m_project_tag_guids_isSet = !json[QString("projectTagGuids")].isNull() && m_project_tag_guids_isValid;

    m_resource_allocation_guids_isValid = ::OpenAPI::fromJsonValue(m_resource_allocation_guids, json[QString("resourceAllocationGuids")]);
    m_resource_allocation_guids_isSet = !json[QString("resourceAllocationGuids")].isNull() && m_resource_allocation_guids_isValid;

    m_sales_progresses_isValid = ::OpenAPI::fromJsonValue(m_sales_progresses, json[QString("salesProgresses")]);
    m_sales_progresses_isSet = !json[QString("salesProgresses")].isNull() && m_sales_progresses_isValid;

    m_sales_status_type_guids_isValid = ::OpenAPI::fromJsonValue(m_sales_status_type_guids, json[QString("salesStatusTypeGuids")]);
    m_sales_status_type_guids_isSet = !json[QString("salesStatusTypeGuids")].isNull() && m_sales_status_type_guids_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_superior_user_guids_isValid = ::OpenAPI::fromJsonValue(m_superior_user_guids, json[QString("superiorUserGuids")]);
    m_superior_user_guids_isSet = !json[QString("superiorUserGuids")].isNull() && m_superior_user_guids_isValid;

    m_use_sales_probability_isValid = ::OpenAPI::fromJsonValue(m_use_sales_probability, json[QString("useSalesProbability")]);
    m_use_sales_probability_isSet = !json[QString("useSalesProbability")].isNull() && m_use_sales_probability_isValid;

    m_user_business_unit_guids_isValid = ::OpenAPI::fromJsonValue(m_user_business_unit_guids, json[QString("userBusinessUnitGuids")]);
    m_user_business_unit_guids_isSet = !json[QString("userBusinessUnitGuids")].isNull() && m_user_business_unit_guids_isValid;

    m_user_guids_isValid = ::OpenAPI::fromJsonValue(m_user_guids, json[QString("userGuids")]);
    m_user_guids_isSet = !json[QString("userGuids")].isNull() && m_user_guids_isValid;

    m_user_license_types_isValid = ::OpenAPI::fromJsonValue(m_user_license_types, json[QString("userLicenseTypes")]);
    m_user_license_types_isSet = !json[QString("userLicenseTypes")].isNull() && m_user_license_types_isValid;

    m_user_tag_guids_isValid = ::OpenAPI::fromJsonValue(m_user_tag_guids, json[QString("userTagGuids")]);
    m_user_tag_guids_isSet = !json[QString("userTagGuids")].isNull() && m_user_tag_guids_isValid;
}

QString OAIResourceAllocationCriteriaModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAllocationCriteriaModel::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_include_absences_isSet) {
        obj.insert(QString("includeAbsences"), ::OpenAPI::toJsonValue(m_include_absences));
    }
    if (m_phase_guids.size() > 0) {
        obj.insert(QString("phaseGuids"), ::OpenAPI::toJsonValue(m_phase_guids));
    }
    if (m_project_business_unit_guids.size() > 0) {
        obj.insert(QString("projectBusinessUnitGuids"), ::OpenAPI::toJsonValue(m_project_business_unit_guids));
    }
    if (m_project_guids.size() > 0) {
        obj.insert(QString("projectGuids"), ::OpenAPI::toJsonValue(m_project_guids));
    }
    if (m_project_manager_user_guids.size() > 0) {
        obj.insert(QString("projectManagerUserGuids"), ::OpenAPI::toJsonValue(m_project_manager_user_guids));
    }
    if (m_project_status_type_guids.size() > 0) {
        obj.insert(QString("projectStatusTypeGuids"), ::OpenAPI::toJsonValue(m_project_status_type_guids));
    }
    if (m_project_tag_guids.size() > 0) {
        obj.insert(QString("projectTagGuids"), ::OpenAPI::toJsonValue(m_project_tag_guids));
    }
    if (m_resource_allocation_guids.size() > 0) {
        obj.insert(QString("resourceAllocationGuids"), ::OpenAPI::toJsonValue(m_resource_allocation_guids));
    }
    if (m_sales_progresses.size() > 0) {
        obj.insert(QString("salesProgresses"), ::OpenAPI::toJsonValue(m_sales_progresses));
    }
    if (m_sales_status_type_guids.size() > 0) {
        obj.insert(QString("salesStatusTypeGuids"), ::OpenAPI::toJsonValue(m_sales_status_type_guids));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_superior_user_guids.size() > 0) {
        obj.insert(QString("superiorUserGuids"), ::OpenAPI::toJsonValue(m_superior_user_guids));
    }
    if (m_use_sales_probability_isSet) {
        obj.insert(QString("useSalesProbability"), ::OpenAPI::toJsonValue(m_use_sales_probability));
    }
    if (m_user_business_unit_guids.size() > 0) {
        obj.insert(QString("userBusinessUnitGuids"), ::OpenAPI::toJsonValue(m_user_business_unit_guids));
    }
    if (m_user_guids.size() > 0) {
        obj.insert(QString("userGuids"), ::OpenAPI::toJsonValue(m_user_guids));
    }
    if (m_user_license_types.size() > 0) {
        obj.insert(QString("userLicenseTypes"), ::OpenAPI::toJsonValue(m_user_license_types));
    }
    if (m_user_tag_guids.size() > 0) {
        obj.insert(QString("userTagGuids"), ::OpenAPI::toJsonValue(m_user_tag_guids));
    }
    return obj;
}

QDateTime OAIResourceAllocationCriteriaModel::getEndDate() const {
    return m_end_date;
}
void OAIResourceAllocationCriteriaModel::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIResourceAllocationCriteriaModel::isIncludeAbsences() const {
    return m_include_absences;
}
void OAIResourceAllocationCriteriaModel::setIncludeAbsences(const bool &include_absences) {
    m_include_absences = include_absences;
    m_include_absences_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_include_absences_Set() const{
    return m_include_absences_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_include_absences_Valid() const{
    return m_include_absences_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getPhaseGuids() const {
    return m_phase_guids;
}
void OAIResourceAllocationCriteriaModel::setPhaseGuids(const QList<QString> &phase_guids) {
    m_phase_guids = phase_guids;
    m_phase_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_phase_guids_Set() const{
    return m_phase_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_phase_guids_Valid() const{
    return m_phase_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getProjectBusinessUnitGuids() const {
    return m_project_business_unit_guids;
}
void OAIResourceAllocationCriteriaModel::setProjectBusinessUnitGuids(const QList<QString> &project_business_unit_guids) {
    m_project_business_unit_guids = project_business_unit_guids;
    m_project_business_unit_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_project_business_unit_guids_Set() const{
    return m_project_business_unit_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_project_business_unit_guids_Valid() const{
    return m_project_business_unit_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getProjectGuids() const {
    return m_project_guids;
}
void OAIResourceAllocationCriteriaModel::setProjectGuids(const QList<QString> &project_guids) {
    m_project_guids = project_guids;
    m_project_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_project_guids_Set() const{
    return m_project_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_project_guids_Valid() const{
    return m_project_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getProjectManagerUserGuids() const {
    return m_project_manager_user_guids;
}
void OAIResourceAllocationCriteriaModel::setProjectManagerUserGuids(const QList<QString> &project_manager_user_guids) {
    m_project_manager_user_guids = project_manager_user_guids;
    m_project_manager_user_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_project_manager_user_guids_Set() const{
    return m_project_manager_user_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_project_manager_user_guids_Valid() const{
    return m_project_manager_user_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getProjectStatusTypeGuids() const {
    return m_project_status_type_guids;
}
void OAIResourceAllocationCriteriaModel::setProjectStatusTypeGuids(const QList<QString> &project_status_type_guids) {
    m_project_status_type_guids = project_status_type_guids;
    m_project_status_type_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_project_status_type_guids_Set() const{
    return m_project_status_type_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_project_status_type_guids_Valid() const{
    return m_project_status_type_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getProjectTagGuids() const {
    return m_project_tag_guids;
}
void OAIResourceAllocationCriteriaModel::setProjectTagGuids(const QList<QString> &project_tag_guids) {
    m_project_tag_guids = project_tag_guids;
    m_project_tag_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_project_tag_guids_Set() const{
    return m_project_tag_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_project_tag_guids_Valid() const{
    return m_project_tag_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getResourceAllocationGuids() const {
    return m_resource_allocation_guids;
}
void OAIResourceAllocationCriteriaModel::setResourceAllocationGuids(const QList<QString> &resource_allocation_guids) {
    m_resource_allocation_guids = resource_allocation_guids;
    m_resource_allocation_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_resource_allocation_guids_Set() const{
    return m_resource_allocation_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_resource_allocation_guids_Valid() const{
    return m_resource_allocation_guids_isValid;
}

QList<OAISalesProgress> OAIResourceAllocationCriteriaModel::getSalesProgresses() const {
    return m_sales_progresses;
}
void OAIResourceAllocationCriteriaModel::setSalesProgresses(const QList<OAISalesProgress> &sales_progresses) {
    m_sales_progresses = sales_progresses;
    m_sales_progresses_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_sales_progresses_Set() const{
    return m_sales_progresses_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_sales_progresses_Valid() const{
    return m_sales_progresses_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getSalesStatusTypeGuids() const {
    return m_sales_status_type_guids;
}
void OAIResourceAllocationCriteriaModel::setSalesStatusTypeGuids(const QList<QString> &sales_status_type_guids) {
    m_sales_status_type_guids = sales_status_type_guids;
    m_sales_status_type_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_sales_status_type_guids_Set() const{
    return m_sales_status_type_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_sales_status_type_guids_Valid() const{
    return m_sales_status_type_guids_isValid;
}

QDateTime OAIResourceAllocationCriteriaModel::getStartDate() const {
    return m_start_date;
}
void OAIResourceAllocationCriteriaModel::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getSuperiorUserGuids() const {
    return m_superior_user_guids;
}
void OAIResourceAllocationCriteriaModel::setSuperiorUserGuids(const QList<QString> &superior_user_guids) {
    m_superior_user_guids = superior_user_guids;
    m_superior_user_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_superior_user_guids_Set() const{
    return m_superior_user_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_superior_user_guids_Valid() const{
    return m_superior_user_guids_isValid;
}

bool OAIResourceAllocationCriteriaModel::isUseSalesProbability() const {
    return m_use_sales_probability;
}
void OAIResourceAllocationCriteriaModel::setUseSalesProbability(const bool &use_sales_probability) {
    m_use_sales_probability = use_sales_probability;
    m_use_sales_probability_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_use_sales_probability_Set() const{
    return m_use_sales_probability_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_use_sales_probability_Valid() const{
    return m_use_sales_probability_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getUserBusinessUnitGuids() const {
    return m_user_business_unit_guids;
}
void OAIResourceAllocationCriteriaModel::setUserBusinessUnitGuids(const QList<QString> &user_business_unit_guids) {
    m_user_business_unit_guids = user_business_unit_guids;
    m_user_business_unit_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_user_business_unit_guids_Set() const{
    return m_user_business_unit_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_user_business_unit_guids_Valid() const{
    return m_user_business_unit_guids_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getUserGuids() const {
    return m_user_guids;
}
void OAIResourceAllocationCriteriaModel::setUserGuids(const QList<QString> &user_guids) {
    m_user_guids = user_guids;
    m_user_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_user_guids_Set() const{
    return m_user_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_user_guids_Valid() const{
    return m_user_guids_isValid;
}

QList<OAILicenseUserType> OAIResourceAllocationCriteriaModel::getUserLicenseTypes() const {
    return m_user_license_types;
}
void OAIResourceAllocationCriteriaModel::setUserLicenseTypes(const QList<OAILicenseUserType> &user_license_types) {
    m_user_license_types = user_license_types;
    m_user_license_types_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_user_license_types_Set() const{
    return m_user_license_types_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_user_license_types_Valid() const{
    return m_user_license_types_isValid;
}

QList<QString> OAIResourceAllocationCriteriaModel::getUserTagGuids() const {
    return m_user_tag_guids;
}
void OAIResourceAllocationCriteriaModel::setUserTagGuids(const QList<QString> &user_tag_guids) {
    m_user_tag_guids = user_tag_guids;
    m_user_tag_guids_isSet = true;
}

bool OAIResourceAllocationCriteriaModel::is_user_tag_guids_Set() const{
    return m_user_tag_guids_isSet;
}

bool OAIResourceAllocationCriteriaModel::is_user_tag_guids_Valid() const{
    return m_user_tag_guids_isValid;
}

bool OAIResourceAllocationCriteriaModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_absences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_business_unit_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_manager_user_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status_type_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_tag_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_allocation_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_progresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_status_type_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superior_user_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_sales_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_business_unit_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_license_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_tag_guids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAllocationCriteriaModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
