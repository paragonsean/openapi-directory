/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExceptionTypeEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExceptionTypeEnum::OAIExceptionTypeEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExceptionTypeEnum::OAIExceptionTypeEnum() {
    this->initializeModel();
}

OAIExceptionTypeEnum::~OAIExceptionTypeEnum() {}

void OAIExceptionTypeEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExceptionTypeEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExceptionTypeEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("InternalSystemError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INTERNALSYSTEMERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AuthenticationRequired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::AUTHENTICATIONREQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AddonMissing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::ADDONMISSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FeatureIsNotEnabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::FEATUREISNOTENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidParameter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INVALIDPARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidOperation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INVALIDOPERATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidRequest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INVALIDREQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InsufficientApiScope", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INSUFFICIENTAPISCOPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidApiVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INVALIDAPIVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConfigurationError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::CONFIGURATIONERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UserLicenseType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::USERLICENSETYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TermsOfServiceNotApproved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::TERMSOFSERVICENOTAPPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HttpsRequired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::HTTPSREQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OrganizationNotActive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::ORGANIZATIONNOTACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PermissionDenied", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::PERMISSIONDENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TrialExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::TRIALEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotAvailableInTrial", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::NOTAVAILABLEINTRIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidRecaptcha", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::INVALIDRECAPTCHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AddonMissingTermsOfServiceApproval", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExceptionTypeEnum::ADDONMISSINGTERMSOFSERVICEAPPROVAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExceptionTypeEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExceptionTypeEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExceptionTypeEnum::INTERNALSYSTEMERROR:
            val = "InternalSystemError";
            break;
        case eOAIExceptionTypeEnum::AUTHENTICATIONREQUIRED:
            val = "AuthenticationRequired";
            break;
        case eOAIExceptionTypeEnum::ADDONMISSING:
            val = "AddonMissing";
            break;
        case eOAIExceptionTypeEnum::FEATUREISNOTENABLED:
            val = "FeatureIsNotEnabled";
            break;
        case eOAIExceptionTypeEnum::INVALIDPARAMETER:
            val = "InvalidParameter";
            break;
        case eOAIExceptionTypeEnum::INVALIDOPERATION:
            val = "InvalidOperation";
            break;
        case eOAIExceptionTypeEnum::INVALIDREQUEST:
            val = "InvalidRequest";
            break;
        case eOAIExceptionTypeEnum::INSUFFICIENTAPISCOPE:
            val = "InsufficientApiScope";
            break;
        case eOAIExceptionTypeEnum::INVALIDAPIVERSION:
            val = "InvalidApiVersion";
            break;
        case eOAIExceptionTypeEnum::CONFIGURATIONERROR:
            val = "ConfigurationError";
            break;
        case eOAIExceptionTypeEnum::USERLICENSETYPE:
            val = "UserLicenseType";
            break;
        case eOAIExceptionTypeEnum::TERMSOFSERVICENOTAPPROVED:
            val = "TermsOfServiceNotApproved";
            break;
        case eOAIExceptionTypeEnum::HTTPSREQUIRED:
            val = "HttpsRequired";
            break;
        case eOAIExceptionTypeEnum::ORGANIZATIONNOTACTIVE:
            val = "OrganizationNotActive";
            break;
        case eOAIExceptionTypeEnum::PERMISSIONDENIED:
            val = "PermissionDenied";
            break;
        case eOAIExceptionTypeEnum::TRIALEXPIRED:
            val = "TrialExpired";
            break;
        case eOAIExceptionTypeEnum::NOTAVAILABLEINTRIAL:
            val = "NotAvailableInTrial";
            break;
        case eOAIExceptionTypeEnum::INVALIDRECAPTCHA:
            val = "InvalidRecaptcha";
            break;
        case eOAIExceptionTypeEnum::ADDONMISSINGTERMSOFSERVICEAPPROVAL:
            val = "AddonMissingTermsOfServiceApproval";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExceptionTypeEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExceptionTypeEnum::eOAIExceptionTypeEnum OAIExceptionTypeEnum::getValue() const {
    return m_value;
}

void OAIExceptionTypeEnum::setValue(const OAIExceptionTypeEnum::eOAIExceptionTypeEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExceptionTypeEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIExceptionTypeEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
