/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserCountrySubModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserCountrySubModel::OAIUserCountrySubModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserCountrySubModel::OAIUserCountrySubModel() {
    this->initializeModel();
}

OAIUserCountrySubModel::~OAIUserCountrySubModel() {}

void OAIUserCountrySubModel::initializeModel() {

    m_code3_isSet = false;
    m_code3_isValid = false;

    m_english_name_isSet = false;
    m_english_name_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_has_regions_isSet = false;
    m_has_regions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUserCountrySubModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserCountrySubModel::fromJsonObject(QJsonObject json) {

    m_code3_isValid = ::OpenAPI::fromJsonValue(m_code3, json[QString("code3")]);
    m_code3_isSet = !json[QString("code3")].isNull() && m_code3_isValid;

    m_english_name_isValid = ::OpenAPI::fromJsonValue(m_english_name, json[QString("englishName")]);
    m_english_name_isSet = !json[QString("englishName")].isNull() && m_english_name_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_has_regions_isValid = ::OpenAPI::fromJsonValue(m_has_regions, json[QString("hasRegions")]);
    m_has_regions_isSet = !json[QString("hasRegions")].isNull() && m_has_regions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUserCountrySubModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserCountrySubModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code3_isSet) {
        obj.insert(QString("code3"), ::OpenAPI::toJsonValue(m_code3));
    }
    if (m_english_name_isSet) {
        obj.insert(QString("englishName"), ::OpenAPI::toJsonValue(m_english_name));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_has_regions.isSet()) {
        obj.insert(QString("hasRegions"), ::OpenAPI::toJsonValue(m_has_regions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIUserCountrySubModel::getCode3() const {
    return m_code3;
}
void OAIUserCountrySubModel::setCode3(const QString &code3) {
    m_code3 = code3;
    m_code3_isSet = true;
}

bool OAIUserCountrySubModel::is_code3_Set() const{
    return m_code3_isSet;
}

bool OAIUserCountrySubModel::is_code3_Valid() const{
    return m_code3_isValid;
}

QString OAIUserCountrySubModel::getEnglishName() const {
    return m_english_name;
}
void OAIUserCountrySubModel::setEnglishName(const QString &english_name) {
    m_english_name = english_name;
    m_english_name_isSet = true;
}

bool OAIUserCountrySubModel::is_english_name_Set() const{
    return m_english_name_isSet;
}

bool OAIUserCountrySubModel::is_english_name_Valid() const{
    return m_english_name_isValid;
}

QString OAIUserCountrySubModel::getGuid() const {
    return m_guid;
}
void OAIUserCountrySubModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIUserCountrySubModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIUserCountrySubModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAICountryRegionsStatus OAIUserCountrySubModel::getHasRegions() const {
    return m_has_regions;
}
void OAIUserCountrySubModel::setHasRegions(const OAICountryRegionsStatus &has_regions) {
    m_has_regions = has_regions;
    m_has_regions_isSet = true;
}

bool OAIUserCountrySubModel::is_has_regions_Set() const{
    return m_has_regions_isSet;
}

bool OAIUserCountrySubModel::is_has_regions_Valid() const{
    return m_has_regions_isValid;
}

QString OAIUserCountrySubModel::getName() const {
    return m_name;
}
void OAIUserCountrySubModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserCountrySubModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserCountrySubModel::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUserCountrySubModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_english_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserCountrySubModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
