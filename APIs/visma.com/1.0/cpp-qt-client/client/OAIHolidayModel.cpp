/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHolidayModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHolidayModel::OAIHolidayModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHolidayModel::OAIHolidayModel() {
    this->initializeModel();
}

OAIHolidayModel::~OAIHolidayModel() {}

void OAIHolidayModel::initializeModel() {

    m_country_guid_isSet = false;
    m_country_guid_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_public_holiday_isSet = false;
    m_is_public_holiday_isValid = false;

    m_is_recurring_yearly_isSet = false;
    m_is_recurring_yearly_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recurring_end_year_isSet = false;
    m_recurring_end_year_isValid = false;
}

void OAIHolidayModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHolidayModel::fromJsonObject(QJsonObject json) {

    m_country_guid_isValid = ::OpenAPI::fromJsonValue(m_country_guid, json[QString("countryGuid")]);
    m_country_guid_isSet = !json[QString("countryGuid")].isNull() && m_country_guid_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_public_holiday_isValid = ::OpenAPI::fromJsonValue(m_is_public_holiday, json[QString("isPublicHoliday")]);
    m_is_public_holiday_isSet = !json[QString("isPublicHoliday")].isNull() && m_is_public_holiday_isValid;

    m_is_recurring_yearly_isValid = ::OpenAPI::fromJsonValue(m_is_recurring_yearly, json[QString("isRecurringYearly")]);
    m_is_recurring_yearly_isSet = !json[QString("isRecurringYearly")].isNull() && m_is_recurring_yearly_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recurring_end_year_isValid = ::OpenAPI::fromJsonValue(m_recurring_end_year, json[QString("recurringEndYear")]);
    m_recurring_end_year_isSet = !json[QString("recurringEndYear")].isNull() && m_recurring_end_year_isValid;
}

QString OAIHolidayModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHolidayModel::asJsonObject() const {
    QJsonObject obj;
    if (m_country_guid_isSet) {
        obj.insert(QString("countryGuid"), ::OpenAPI::toJsonValue(m_country_guid));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_public_holiday_isSet) {
        obj.insert(QString("isPublicHoliday"), ::OpenAPI::toJsonValue(m_is_public_holiday));
    }
    if (m_is_recurring_yearly_isSet) {
        obj.insert(QString("isRecurringYearly"), ::OpenAPI::toJsonValue(m_is_recurring_yearly));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recurring_end_year_isSet) {
        obj.insert(QString("recurringEndYear"), ::OpenAPI::toJsonValue(m_recurring_end_year));
    }
    return obj;
}

QString OAIHolidayModel::getCountryGuid() const {
    return m_country_guid;
}
void OAIHolidayModel::setCountryGuid(const QString &country_guid) {
    m_country_guid = country_guid;
    m_country_guid_isSet = true;
}

bool OAIHolidayModel::is_country_guid_Set() const{
    return m_country_guid_isSet;
}

bool OAIHolidayModel::is_country_guid_Valid() const{
    return m_country_guid_isValid;
}

QDate OAIHolidayModel::getDate() const {
    return m_date;
}
void OAIHolidayModel::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIHolidayModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIHolidayModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIHolidayModel::getGuid() const {
    return m_guid;
}
void OAIHolidayModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIHolidayModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIHolidayModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIHolidayModel::isIsActive() const {
    return m_is_active;
}
void OAIHolidayModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIHolidayModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIHolidayModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIHolidayModel::isIsPublicHoliday() const {
    return m_is_public_holiday;
}
void OAIHolidayModel::setIsPublicHoliday(const bool &is_public_holiday) {
    m_is_public_holiday = is_public_holiday;
    m_is_public_holiday_isSet = true;
}

bool OAIHolidayModel::is_is_public_holiday_Set() const{
    return m_is_public_holiday_isSet;
}

bool OAIHolidayModel::is_is_public_holiday_Valid() const{
    return m_is_public_holiday_isValid;
}

bool OAIHolidayModel::isIsRecurringYearly() const {
    return m_is_recurring_yearly;
}
void OAIHolidayModel::setIsRecurringYearly(const bool &is_recurring_yearly) {
    m_is_recurring_yearly = is_recurring_yearly;
    m_is_recurring_yearly_isSet = true;
}

bool OAIHolidayModel::is_is_recurring_yearly_Set() const{
    return m_is_recurring_yearly_isSet;
}

bool OAIHolidayModel::is_is_recurring_yearly_Valid() const{
    return m_is_recurring_yearly_isValid;
}

QString OAIHolidayModel::getName() const {
    return m_name;
}
void OAIHolidayModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHolidayModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHolidayModel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIHolidayModel::getRecurringEndYear() const {
    return m_recurring_end_year;
}
void OAIHolidayModel::setRecurringEndYear(const qint32 &recurring_end_year) {
    m_recurring_end_year = recurring_end_year;
    m_recurring_end_year_isSet = true;
}

bool OAIHolidayModel::is_recurring_end_year_Set() const{
    return m_recurring_end_year_isSet;
}

bool OAIHolidayModel::is_recurring_end_year_Valid() const{
    return m_recurring_end_year_isValid;
}

bool OAIHolidayModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_holiday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_recurring_yearly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_end_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHolidayModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_guid_isValid && m_date_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
