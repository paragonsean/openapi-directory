/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhaseModelWithHierarchyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhaseModelWithHierarchyInfo::OAIPhaseModelWithHierarchyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhaseModelWithHierarchyInfo::OAIPhaseModelWithHierarchyInfo() {
    this->initializeModel();
}

OAIPhaseModelWithHierarchyInfo::~OAIPhaseModelWithHierarchyInfo() {}

void OAIPhaseModelWithHierarchyInfo::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_default_work_type_isSet = false;
    m_default_work_type_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_is_completed_isSet = false;
    m_is_completed_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_deadline_isSet = false;
    m_original_deadline_isValid = false;

    m_original_start_date_isSet = false;
    m_original_start_date_isValid = false;

    m_original_work_hours_estimate_isSet = false;
    m_original_work_hours_estimate_isValid = false;

    m_parent_phase_isSet = false;
    m_parent_phase_isValid = false;

    m_phase_status_isSet = false;
    m_phase_status_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_work_hours_estimate_isSet = false;
    m_work_hours_estimate_isValid = false;
}

void OAIPhaseModelWithHierarchyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhaseModelWithHierarchyInfo::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_default_work_type_isValid = ::OpenAPI::fromJsonValue(m_default_work_type, json[QString("defaultWorkType")]);
    m_default_work_type_isSet = !json[QString("defaultWorkType")].isNull() && m_default_work_type_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("hasChildren")]);
    m_has_children_isSet = !json[QString("hasChildren")].isNull() && m_has_children_isValid;

    m_is_completed_isValid = ::OpenAPI::fromJsonValue(m_is_completed, json[QString("isCompleted")]);
    m_is_completed_isSet = !json[QString("isCompleted")].isNull() && m_is_completed_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_deadline_isValid = ::OpenAPI::fromJsonValue(m_original_deadline, json[QString("originalDeadline")]);
    m_original_deadline_isSet = !json[QString("originalDeadline")].isNull() && m_original_deadline_isValid;

    m_original_start_date_isValid = ::OpenAPI::fromJsonValue(m_original_start_date, json[QString("originalStartDate")]);
    m_original_start_date_isSet = !json[QString("originalStartDate")].isNull() && m_original_start_date_isValid;

    m_original_work_hours_estimate_isValid = ::OpenAPI::fromJsonValue(m_original_work_hours_estimate, json[QString("originalWorkHoursEstimate")]);
    m_original_work_hours_estimate_isSet = !json[QString("originalWorkHoursEstimate")].isNull() && m_original_work_hours_estimate_isValid;

    m_parent_phase_isValid = ::OpenAPI::fromJsonValue(m_parent_phase, json[QString("parentPhase")]);
    m_parent_phase_isSet = !json[QString("parentPhase")].isNull() && m_parent_phase_isValid;

    m_phase_status_isValid = ::OpenAPI::fromJsonValue(m_phase_status, json[QString("phaseStatus")]);
    m_phase_status_isSet = !json[QString("phaseStatus")].isNull() && m_phase_status_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_work_hours_estimate_isValid = ::OpenAPI::fromJsonValue(m_work_hours_estimate, json[QString("workHoursEstimate")]);
    m_work_hours_estimate_isSet = !json[QString("workHoursEstimate")].isNull() && m_work_hours_estimate_isValid;
}

QString OAIPhaseModelWithHierarchyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhaseModelWithHierarchyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_deadline_isSet) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_default_work_type.isSet()) {
        obj.insert(QString("defaultWorkType"), ::OpenAPI::toJsonValue(m_default_work_type));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("hasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_is_completed_isSet) {
        obj.insert(QString("isCompleted"), ::OpenAPI::toJsonValue(m_is_completed));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_deadline_isSet) {
        obj.insert(QString("originalDeadline"), ::OpenAPI::toJsonValue(m_original_deadline));
    }
    if (m_original_start_date_isSet) {
        obj.insert(QString("originalStartDate"), ::OpenAPI::toJsonValue(m_original_start_date));
    }
    if (m_original_work_hours_estimate_isSet) {
        obj.insert(QString("originalWorkHoursEstimate"), ::OpenAPI::toJsonValue(m_original_work_hours_estimate));
    }
    if (m_parent_phase.isSet()) {
        obj.insert(QString("parentPhase"), ::OpenAPI::toJsonValue(m_parent_phase));
    }
    if (m_phase_status.isSet()) {
        obj.insert(QString("phaseStatus"), ::OpenAPI::toJsonValue(m_phase_status));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_work_hours_estimate_isSet) {
        obj.insert(QString("workHoursEstimate"), ::OpenAPI::toJsonValue(m_work_hours_estimate));
    }
    return obj;
}

QString OAIPhaseModelWithHierarchyInfo::getCode() const {
    return m_code;
}
void OAIPhaseModelWithHierarchyInfo::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_code_Set() const{
    return m_code_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_code_Valid() const{
    return m_code_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIPhaseModelWithHierarchyInfo::getCreatedBy() const {
    return m_created_by;
}
void OAIPhaseModelWithHierarchyInfo::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIPhaseModelWithHierarchyInfo::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIPhaseModelWithHierarchyInfo::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAICurrencyBaseModel OAIPhaseModelWithHierarchyInfo::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPhaseModelWithHierarchyInfo::setCurrencyCode(const OAICurrencyBaseModel &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAIPhaseCustomerSubModel OAIPhaseModelWithHierarchyInfo::getCustomer() const {
    return m_customer;
}
void OAIPhaseModelWithHierarchyInfo::setCustomer(const OAIPhaseCustomerSubModel &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_customer_Valid() const{
    return m_customer_isValid;
}

QDate OAIPhaseModelWithHierarchyInfo::getDeadline() const {
    return m_deadline;
}
void OAIPhaseModelWithHierarchyInfo::setDeadline(const QDate &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_deadline_Valid() const{
    return m_deadline_isValid;
}

OAIModelWithName OAIPhaseModelWithHierarchyInfo::getDefaultWorkType() const {
    return m_default_work_type;
}
void OAIPhaseModelWithHierarchyInfo::setDefaultWorkType(const OAIModelWithName &default_work_type) {
    m_default_work_type = default_work_type;
    m_default_work_type_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_default_work_type_Set() const{
    return m_default_work_type_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_default_work_type_Valid() const{
    return m_default_work_type_isValid;
}

QString OAIPhaseModelWithHierarchyInfo::getGuid() const {
    return m_guid;
}
void OAIPhaseModelWithHierarchyInfo::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIPhaseModelWithHierarchyInfo::isHasChildren() const {
    return m_has_children;
}
void OAIPhaseModelWithHierarchyInfo::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_has_children_Valid() const{
    return m_has_children_isValid;
}

bool OAIPhaseModelWithHierarchyInfo::isIsCompleted() const {
    return m_is_completed;
}
void OAIPhaseModelWithHierarchyInfo::setIsCompleted(const bool &is_completed) {
    m_is_completed = is_completed;
    m_is_completed_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_is_completed_Set() const{
    return m_is_completed_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_is_completed_Valid() const{
    return m_is_completed_isValid;
}

bool OAIPhaseModelWithHierarchyInfo::isIsLocked() const {
    return m_is_locked;
}
void OAIPhaseModelWithHierarchyInfo::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIPhaseModelWithHierarchyInfo::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIPhaseModelWithHierarchyInfo::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIPhaseModelWithHierarchyInfo::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIPhaseModelWithHierarchyInfo::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

qint32 OAIPhaseModelWithHierarchyInfo::getLevel() const {
    return m_level;
}
void OAIPhaseModelWithHierarchyInfo::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_level_Set() const{
    return m_level_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIPhaseModelWithHierarchyInfo::getName() const {
    return m_name;
}
void OAIPhaseModelWithHierarchyInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_name_Valid() const{
    return m_name_isValid;
}

QDate OAIPhaseModelWithHierarchyInfo::getOriginalDeadline() const {
    return m_original_deadline;
}
void OAIPhaseModelWithHierarchyInfo::setOriginalDeadline(const QDate &original_deadline) {
    m_original_deadline = original_deadline;
    m_original_deadline_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_original_deadline_Set() const{
    return m_original_deadline_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_original_deadline_Valid() const{
    return m_original_deadline_isValid;
}

QDate OAIPhaseModelWithHierarchyInfo::getOriginalStartDate() const {
    return m_original_start_date;
}
void OAIPhaseModelWithHierarchyInfo::setOriginalStartDate(const QDate &original_start_date) {
    m_original_start_date = original_start_date;
    m_original_start_date_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_original_start_date_Set() const{
    return m_original_start_date_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_original_start_date_Valid() const{
    return m_original_start_date_isValid;
}

double OAIPhaseModelWithHierarchyInfo::getOriginalWorkHoursEstimate() const {
    return m_original_work_hours_estimate;
}
void OAIPhaseModelWithHierarchyInfo::setOriginalWorkHoursEstimate(const double &original_work_hours_estimate) {
    m_original_work_hours_estimate = original_work_hours_estimate;
    m_original_work_hours_estimate_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_original_work_hours_estimate_Set() const{
    return m_original_work_hours_estimate_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_original_work_hours_estimate_Valid() const{
    return m_original_work_hours_estimate_isValid;
}

OAIModelBaseWithRequiredGuid OAIPhaseModelWithHierarchyInfo::getParentPhase() const {
    return m_parent_phase;
}
void OAIPhaseModelWithHierarchyInfo::setParentPhase(const OAIModelBaseWithRequiredGuid &parent_phase) {
    m_parent_phase = parent_phase;
    m_parent_phase_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_parent_phase_Set() const{
    return m_parent_phase_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_parent_phase_Valid() const{
    return m_parent_phase_isValid;
}

OAIPhaseStatusOutputModel OAIPhaseModelWithHierarchyInfo::getPhaseStatus() const {
    return m_phase_status;
}
void OAIPhaseModelWithHierarchyInfo::setPhaseStatus(const OAIPhaseStatusOutputModel &phase_status) {
    m_phase_status = phase_status;
    m_phase_status_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_phase_status_Set() const{
    return m_phase_status_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_phase_status_Valid() const{
    return m_phase_status_isValid;
}

OAIPhaseProjectSubModel OAIPhaseModelWithHierarchyInfo::getProject() const {
    return m_project;
}
void OAIPhaseModelWithHierarchyInfo::setProject(const OAIPhaseProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_project_Set() const{
    return m_project_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_project_Valid() const{
    return m_project_isValid;
}

qint32 OAIPhaseModelWithHierarchyInfo::getSortOrder() const {
    return m_sort_order;
}
void OAIPhaseModelWithHierarchyInfo::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QDate OAIPhaseModelWithHierarchyInfo::getStartDate() const {
    return m_start_date;
}
void OAIPhaseModelWithHierarchyInfo::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_start_date_Valid() const{
    return m_start_date_isValid;
}

double OAIPhaseModelWithHierarchyInfo::getWorkHoursEstimate() const {
    return m_work_hours_estimate;
}
void OAIPhaseModelWithHierarchyInfo::setWorkHoursEstimate(const double &work_hours_estimate) {
    m_work_hours_estimate = work_hours_estimate;
    m_work_hours_estimate_isSet = true;
}

bool OAIPhaseModelWithHierarchyInfo::is_work_hours_estimate_Set() const{
    return m_work_hours_estimate_isSet;
}

bool OAIPhaseModelWithHierarchyInfo::is_work_hours_estimate_Valid() const{
    return m_work_hours_estimate_isValid;
}

bool OAIPhaseModelWithHierarchyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_work_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_work_hours_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hours_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhaseModelWithHierarchyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
