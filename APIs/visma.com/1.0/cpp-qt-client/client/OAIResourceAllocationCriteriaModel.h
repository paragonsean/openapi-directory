/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceAllocationCriteriaModel.h
 *
 * 
 */

#ifndef OAIResourceAllocationCriteriaModel_H
#define OAIResourceAllocationCriteriaModel_H

#include <QJsonObject>

#include "OAILicenseUserType.h"
#include "OAISalesProgress.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResourceAllocationCriteriaModel : public OAIObject {
public:
    OAIResourceAllocationCriteriaModel();
    OAIResourceAllocationCriteriaModel(QString json);
    ~OAIResourceAllocationCriteriaModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    bool isIncludeAbsences() const;
    void setIncludeAbsences(const bool &include_absences);
    bool is_include_absences_Set() const;
    bool is_include_absences_Valid() const;

    QList<QString> getPhaseGuids() const;
    void setPhaseGuids(const QList<QString> &phase_guids);
    bool is_phase_guids_Set() const;
    bool is_phase_guids_Valid() const;

    QList<QString> getProjectBusinessUnitGuids() const;
    void setProjectBusinessUnitGuids(const QList<QString> &project_business_unit_guids);
    bool is_project_business_unit_guids_Set() const;
    bool is_project_business_unit_guids_Valid() const;

    QList<QString> getProjectGuids() const;
    void setProjectGuids(const QList<QString> &project_guids);
    bool is_project_guids_Set() const;
    bool is_project_guids_Valid() const;

    QList<QString> getProjectManagerUserGuids() const;
    void setProjectManagerUserGuids(const QList<QString> &project_manager_user_guids);
    bool is_project_manager_user_guids_Set() const;
    bool is_project_manager_user_guids_Valid() const;

    QList<QString> getProjectStatusTypeGuids() const;
    void setProjectStatusTypeGuids(const QList<QString> &project_status_type_guids);
    bool is_project_status_type_guids_Set() const;
    bool is_project_status_type_guids_Valid() const;

    QList<QString> getProjectTagGuids() const;
    void setProjectTagGuids(const QList<QString> &project_tag_guids);
    bool is_project_tag_guids_Set() const;
    bool is_project_tag_guids_Valid() const;

    QList<QString> getResourceAllocationGuids() const;
    void setResourceAllocationGuids(const QList<QString> &resource_allocation_guids);
    bool is_resource_allocation_guids_Set() const;
    bool is_resource_allocation_guids_Valid() const;

    QList<OAISalesProgress> getSalesProgresses() const;
    void setSalesProgresses(const QList<OAISalesProgress> &sales_progresses);
    bool is_sales_progresses_Set() const;
    bool is_sales_progresses_Valid() const;

    QList<QString> getSalesStatusTypeGuids() const;
    void setSalesStatusTypeGuids(const QList<QString> &sales_status_type_guids);
    bool is_sales_status_type_guids_Set() const;
    bool is_sales_status_type_guids_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QList<QString> getSuperiorUserGuids() const;
    void setSuperiorUserGuids(const QList<QString> &superior_user_guids);
    bool is_superior_user_guids_Set() const;
    bool is_superior_user_guids_Valid() const;

    bool isUseSalesProbability() const;
    void setUseSalesProbability(const bool &use_sales_probability);
    bool is_use_sales_probability_Set() const;
    bool is_use_sales_probability_Valid() const;

    QList<QString> getUserBusinessUnitGuids() const;
    void setUserBusinessUnitGuids(const QList<QString> &user_business_unit_guids);
    bool is_user_business_unit_guids_Set() const;
    bool is_user_business_unit_guids_Valid() const;

    QList<QString> getUserGuids() const;
    void setUserGuids(const QList<QString> &user_guids);
    bool is_user_guids_Set() const;
    bool is_user_guids_Valid() const;

    QList<OAILicenseUserType> getUserLicenseTypes() const;
    void setUserLicenseTypes(const QList<OAILicenseUserType> &user_license_types);
    bool is_user_license_types_Set() const;
    bool is_user_license_types_Valid() const;

    QList<QString> getUserTagGuids() const;
    void setUserTagGuids(const QList<QString> &user_tag_guids);
    bool is_user_tag_guids_Set() const;
    bool is_user_tag_guids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    bool m_include_absences;
    bool m_include_absences_isSet;
    bool m_include_absences_isValid;

    QList<QString> m_phase_guids;
    bool m_phase_guids_isSet;
    bool m_phase_guids_isValid;

    QList<QString> m_project_business_unit_guids;
    bool m_project_business_unit_guids_isSet;
    bool m_project_business_unit_guids_isValid;

    QList<QString> m_project_guids;
    bool m_project_guids_isSet;
    bool m_project_guids_isValid;

    QList<QString> m_project_manager_user_guids;
    bool m_project_manager_user_guids_isSet;
    bool m_project_manager_user_guids_isValid;

    QList<QString> m_project_status_type_guids;
    bool m_project_status_type_guids_isSet;
    bool m_project_status_type_guids_isValid;

    QList<QString> m_project_tag_guids;
    bool m_project_tag_guids_isSet;
    bool m_project_tag_guids_isValid;

    QList<QString> m_resource_allocation_guids;
    bool m_resource_allocation_guids_isSet;
    bool m_resource_allocation_guids_isValid;

    QList<OAISalesProgress> m_sales_progresses;
    bool m_sales_progresses_isSet;
    bool m_sales_progresses_isValid;

    QList<QString> m_sales_status_type_guids;
    bool m_sales_status_type_guids_isSet;
    bool m_sales_status_type_guids_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QList<QString> m_superior_user_guids;
    bool m_superior_user_guids_isSet;
    bool m_superior_user_guids_isValid;

    bool m_use_sales_probability;
    bool m_use_sales_probability_isSet;
    bool m_use_sales_probability_isValid;

    QList<QString> m_user_business_unit_guids;
    bool m_user_business_unit_guids_isSet;
    bool m_user_business_unit_guids_isValid;

    QList<QString> m_user_guids;
    bool m_user_guids_isSet;
    bool m_user_guids_isValid;

    QList<OAILicenseUserType> m_user_license_types;
    bool m_user_license_types_isSet;
    bool m_user_license_types_isValid;

    QList<QString> m_user_tag_guids;
    bool m_user_tag_guids_isSet;
    bool m_user_tag_guids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceAllocationCriteriaModel)

#endif // OAIResourceAllocationCriteriaModel_H
