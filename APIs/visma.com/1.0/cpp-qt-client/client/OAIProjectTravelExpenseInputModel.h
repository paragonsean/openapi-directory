/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectTravelExpenseInputModel.h
 *
 * 
 */

#ifndef OAIProjectTravelExpenseInputModel_H
#define OAIProjectTravelExpenseInputModel_H

#include <QJsonObject>

#include "OAIMoneyInputModel.h"
#include "OAIProjectTravelExpenseBillingScheduleType.h"
#include "OAISimpleInputModel.h"
#include "OAISimpleInputRequiredModel.h"
#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleInputModel;
class OAISimpleInputRequiredModel;
class OAIMoneyInputModel;

class OAIProjectTravelExpenseInputModel : public OAIObject {
public:
    OAIProjectTravelExpenseInputModel();
    OAIProjectTravelExpenseInputModel(QString json);
    ~OAIProjectTravelExpenseInputModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISimpleInputModel getBillingDependencyPhase() const;
    void setBillingDependencyPhase(const OAISimpleInputModel &billing_dependency_phase);
    bool is_billing_dependency_phase_Set() const;
    bool is_billing_dependency_phase_Valid() const;

    OAIProjectTravelExpenseBillingScheduleType getBillingSchedule() const;
    void setBillingSchedule(const OAIProjectTravelExpenseBillingScheduleType &billing_schedule);
    bool is_billing_schedule_Set() const;
    bool is_billing_schedule_Valid() const;

    OAISimpleInputModel getCostAccount() const;
    void setCostAccount(const OAISimpleInputModel &cost_account);
    bool is_cost_account_Set() const;
    bool is_cost_account_Valid() const;

    OAISimpleInputModel getCostCenter() const;
    void setCostCenter(const OAISimpleInputModel &cost_center);
    bool is_cost_center_Set() const;
    bool is_cost_center_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDate getEventDate() const;
    void setEventDate(const QDate &event_date);
    bool is_event_date_Set() const;
    bool is_event_date_Valid() const;

    OAISimpleInputModel getInvoice() const;
    void setInvoice(const OAISimpleInputModel &invoice);
    bool is_invoice_Set() const;
    bool is_invoice_Valid() const;

    double getInvoiceQuantity() const;
    void setInvoiceQuantity(const double &invoice_quantity);
    bool is_invoice_quantity_Set() const;
    bool is_invoice_quantity_Valid() const;

    QString getInvoiceRowComment() const;
    void setInvoiceRowComment(const QString &invoice_row_comment);
    bool is_invoice_row_comment_Set() const;
    bool is_invoice_row_comment_Valid() const;

    QString getInvoiceRowDescription() const;
    void setInvoiceRowDescription(const QString &invoice_row_description);
    bool is_invoice_row_description_Set() const;
    bool is_invoice_row_description_Valid() const;

    bool isIsBillable() const;
    void setIsBillable(const bool &is_billable);
    bool is_is_billable_Set() const;
    bool is_is_billable_Valid() const;

    QString getMeasurementUnit() const;
    void setMeasurementUnit(const QString &measurement_unit);
    bool is_measurement_unit_Set() const;
    bool is_measurement_unit_Valid() const;

    OAISimpleInputRequiredModel getPhase() const;
    void setPhase(const OAISimpleInputRequiredModel &phase);
    bool is_phase_Set() const;
    bool is_phase_Valid() const;

    QDate getPlannedBillingDate() const;
    void setPlannedBillingDate(const QDate &planned_billing_date);
    bool is_planned_billing_date_Set() const;
    bool is_planned_billing_date_Valid() const;

    OAISimpleInputRequiredModel getProject() const;
    void setProject(const OAISimpleInputRequiredModel &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    double getPurchaseVatRate() const;
    void setPurchaseVatRate(const double &purchase_vat_rate);
    bool is_purchase_vat_rate_Set() const;
    bool is_purchase_vat_rate_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    OAISimpleInputModel getSalesAccount() const;
    void setSalesAccount(const OAISimpleInputModel &sales_account);
    bool is_sales_account_Set() const;
    bool is_sales_account_Valid() const;

    QDateTime getTravelEndTime() const;
    void setTravelEndTime(const QDateTime &travel_end_time);
    bool is_travel_end_time_Set() const;
    bool is_travel_end_time_Valid() const;

    OAISimpleInputRequiredModel getTravelExpense() const;
    void setTravelExpense(const OAISimpleInputRequiredModel &travel_expense);
    bool is_travel_expense_Set() const;
    bool is_travel_expense_Valid() const;

    OAISimpleInputModel getTravelReimbursement() const;
    void setTravelReimbursement(const OAISimpleInputModel &travel_reimbursement);
    bool is_travel_reimbursement_Set() const;
    bool is_travel_reimbursement_Valid() const;

    bool isTravelReimbursementRequired() const;
    void setTravelReimbursementRequired(const bool &travel_reimbursement_required);
    bool is_travel_reimbursement_required_Set() const;
    bool is_travel_reimbursement_required_Valid() const;

    QDateTime getTravelStartTime() const;
    void setTravelStartTime(const QDateTime &travel_start_time);
    bool is_travel_start_time_Set() const;
    bool is_travel_start_time_Valid() const;

    OAIMoneyInputModel getUnitCost() const;
    void setUnitCost(const OAIMoneyInputModel &unit_cost);
    bool is_unit_cost_Set() const;
    bool is_unit_cost_Valid() const;

    OAIMoneyInputModel getUnitPrice() const;
    void setUnitPrice(const OAIMoneyInputModel &unit_price);
    bool is_unit_price_Set() const;
    bool is_unit_price_Valid() const;

    OAISimpleInputRequiredModel getUser() const;
    void setUser(const OAISimpleInputRequiredModel &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    double getVatRate() const;
    void setVatRate(const double &vat_rate);
    bool is_vat_rate_Set() const;
    bool is_vat_rate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISimpleInputModel m_billing_dependency_phase;
    bool m_billing_dependency_phase_isSet;
    bool m_billing_dependency_phase_isValid;

    OAIProjectTravelExpenseBillingScheduleType m_billing_schedule;
    bool m_billing_schedule_isSet;
    bool m_billing_schedule_isValid;

    OAISimpleInputModel m_cost_account;
    bool m_cost_account_isSet;
    bool m_cost_account_isValid;

    OAISimpleInputModel m_cost_center;
    bool m_cost_center_isSet;
    bool m_cost_center_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDate m_event_date;
    bool m_event_date_isSet;
    bool m_event_date_isValid;

    OAISimpleInputModel m_invoice;
    bool m_invoice_isSet;
    bool m_invoice_isValid;

    double m_invoice_quantity;
    bool m_invoice_quantity_isSet;
    bool m_invoice_quantity_isValid;

    QString m_invoice_row_comment;
    bool m_invoice_row_comment_isSet;
    bool m_invoice_row_comment_isValid;

    QString m_invoice_row_description;
    bool m_invoice_row_description_isSet;
    bool m_invoice_row_description_isValid;

    bool m_is_billable;
    bool m_is_billable_isSet;
    bool m_is_billable_isValid;

    QString m_measurement_unit;
    bool m_measurement_unit_isSet;
    bool m_measurement_unit_isValid;

    OAISimpleInputRequiredModel m_phase;
    bool m_phase_isSet;
    bool m_phase_isValid;

    QDate m_planned_billing_date;
    bool m_planned_billing_date_isSet;
    bool m_planned_billing_date_isValid;

    OAISimpleInputRequiredModel m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    double m_purchase_vat_rate;
    bool m_purchase_vat_rate_isSet;
    bool m_purchase_vat_rate_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    OAISimpleInputModel m_sales_account;
    bool m_sales_account_isSet;
    bool m_sales_account_isValid;

    QDateTime m_travel_end_time;
    bool m_travel_end_time_isSet;
    bool m_travel_end_time_isValid;

    OAISimpleInputRequiredModel m_travel_expense;
    bool m_travel_expense_isSet;
    bool m_travel_expense_isValid;

    OAISimpleInputModel m_travel_reimbursement;
    bool m_travel_reimbursement_isSet;
    bool m_travel_reimbursement_isValid;

    bool m_travel_reimbursement_required;
    bool m_travel_reimbursement_required_isSet;
    bool m_travel_reimbursement_required_isValid;

    QDateTime m_travel_start_time;
    bool m_travel_start_time_isSet;
    bool m_travel_start_time_isValid;

    OAIMoneyInputModel m_unit_cost;
    bool m_unit_cost_isSet;
    bool m_unit_cost_isValid;

    OAIMoneyInputModel m_unit_price;
    bool m_unit_price_isSet;
    bool m_unit_price_isValid;

    OAISimpleInputRequiredModel m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    double m_vat_rate;
    bool m_vat_rate_isSet;
    bool m_vat_rate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectTravelExpenseInputModel)

#endif // OAIProjectTravelExpenseInputModel_H
