/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceallocationsReadApi_H
#define OAI_OAIResourceallocationsReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAILicenseUserType.h"
#include "OAIResourceAllocationCriteriaModel.h"
#include "OAIResourceAllocationOutputModel.h"
#include "OAIRoleAllocationOutputModel.h"
#include "OAISalesProgress.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceallocationsReadApi : public QObject {
    Q_OBJECT

public:
    OAIResourceallocationsReadApi(const int timeOut = 0);
    ~OAIResourceallocationsReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void resourceAllocationsGetResourceAllocation(const QString &guid);

    /**
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void resourceAllocationsGetResourceAllocations(const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  phase_guid QString [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  user_license_types QList<OAILicenseUserType> [optional]
    * @param[in]  project_guid QString [optional]
    * @param[in]  user_guid QString [optional]
    * @param[in]  project_business_unit_guid QString [optional]
    * @param[in]  user_business_unit_guid QString [optional]
    * @param[in]  project_manager_user_guid QString [optional]
    * @param[in]  user_tag_guid QString [optional]
    * @param[in]  use_sales_probability bool [optional]
    * @param[in]  project_status_type_guid QString [optional]
    * @param[in]  project_tag_guid QString [optional]
    * @param[in]  superior_user_guid QString [optional]
    * @param[in]  sales_status_type_guid QString [optional]
    * @param[in]  resource_allocation_guid QString [optional]
    * @param[in]  sales_progress OAISalesProgress [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void resourceAllocationsGetResourceAllocationsByPhaseGuid(const QString &phase_guid, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<OAILicenseUserType>> &user_license_types = ::OpenAPI::OptionalParam<QList<OAILicenseUserType>>(), const ::OpenAPI::OptionalParam<QString> &project_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_manager_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_tag_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_sales_probability = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &project_status_type_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_tag_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &superior_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sales_status_type_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_allocation_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISalesProgress> &sales_progress = ::OpenAPI::OptionalParam<OAISalesProgress>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  user_license_types QList<OAILicenseUserType> [optional]
    * @param[in]  phase_guid QString [optional]
    * @param[in]  user_guid QString [optional]
    * @param[in]  project_business_unit_guid QString [optional]
    * @param[in]  user_business_unit_guid QString [optional]
    * @param[in]  project_manager_user_guid QString [optional]
    * @param[in]  user_tag_guid QString [optional]
    * @param[in]  use_sales_probability bool [optional]
    * @param[in]  project_status_type_guid QString [optional]
    * @param[in]  project_tag_guid QString [optional]
    * @param[in]  superior_user_guid QString [optional]
    * @param[in]  sales_status_type_guid QString [optional]
    * @param[in]  resource_allocation_guid QString [optional]
    * @param[in]  sales_progress OAISalesProgress [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void resourceAllocationsGetResourceAllocationsByProjectGuid(const QString &project_guid, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<OAILicenseUserType>> &user_license_types = ::OpenAPI::OptionalParam<QList<OAILicenseUserType>>(), const ::OpenAPI::OptionalParam<QString> &phase_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_manager_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_tag_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_sales_probability = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &project_status_type_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_tag_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &superior_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sales_status_type_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_allocation_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISalesProgress> &sales_progress = ::OpenAPI::OptionalParam<OAISalesProgress>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  user_license_types QList<OAILicenseUserType> [optional]
    * @param[in]  phase_guid QString [optional]
    * @param[in]  project_guid QString [optional]
    * @param[in]  project_business_unit_guid QString [optional]
    * @param[in]  user_business_unit_guid QString [optional]
    * @param[in]  project_manager_user_guid QString [optional]
    * @param[in]  user_tag_guid QString [optional]
    * @param[in]  use_sales_probability bool [optional]
    * @param[in]  project_status_type_guid QString [optional]
    * @param[in]  project_tag_guid QString [optional]
    * @param[in]  superior_user_guid QString [optional]
    * @param[in]  sales_status_type_guid QString [optional]
    * @param[in]  resource_allocation_guid QString [optional]
    * @param[in]  sales_progress OAISalesProgress [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void resourceAllocationsGetResourceAllocationsByUserGuid(const QString &user_guid, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<OAILicenseUserType>> &user_license_types = ::OpenAPI::OptionalParam<QList<OAILicenseUserType>>(), const ::OpenAPI::OptionalParam<QString> &phase_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_business_unit_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_manager_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_tag_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_sales_probability = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &project_status_type_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_tag_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &superior_user_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sales_status_type_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_allocation_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISalesProgress> &sales_progress = ::OpenAPI::OptionalParam<OAISalesProgress>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  oai_resource_allocation_criteria_model OAIResourceAllocationCriteriaModel [optional]
    */
    virtual void resourceAllocationsPostResourceAllocations(const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIResourceAllocationCriteriaModel> &oai_resource_allocation_criteria_model = ::OpenAPI::OptionalParam<OAIResourceAllocationCriteriaModel>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void roleAllocationsGetRoleAllocation(const QString &guid);

    /**
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  use_sales_probability bool [optional]
    * @param[in]  role_guids QList<QString> [optional]
    * @param[in]  phase_guids QList<QString> [optional]
    * @param[in]  project_guids QList<QString> [optional]
    */
    virtual void roleAllocationsGetRoleAllocations(const QDateTime &start_date, const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &use_sales_probability = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &role_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &phase_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourceAllocationsGetResourceAllocationCallback(OAIHttpRequestWorker *worker);
    void resourceAllocationsGetResourceAllocationsCallback(OAIHttpRequestWorker *worker);
    void resourceAllocationsGetResourceAllocationsByPhaseGuidCallback(OAIHttpRequestWorker *worker);
    void resourceAllocationsGetResourceAllocationsByProjectGuidCallback(OAIHttpRequestWorker *worker);
    void resourceAllocationsGetResourceAllocationsByUserGuidCallback(OAIHttpRequestWorker *worker);
    void resourceAllocationsPostResourceAllocationsCallback(OAIHttpRequestWorker *worker);
    void roleAllocationsGetRoleAllocationCallback(OAIHttpRequestWorker *worker);
    void roleAllocationsGetRoleAllocationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourceAllocationsGetResourceAllocationSignal(OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsSignal(OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsByPhaseGuidSignal(OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsByProjectGuidSignal(OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsByUserGuidSignal(OAIResourceAllocationOutputModel summary);
    void resourceAllocationsPostResourceAllocationsSignal(QList<OAIResourceAllocationOutputModel> summary);
    void roleAllocationsGetRoleAllocationSignal(OAIRoleAllocationOutputModel summary);
    void roleAllocationsGetRoleAllocationsSignal(QList<OAIRoleAllocationOutputModel> summary);


    void resourceAllocationsGetResourceAllocationSignalFull(OAIHttpRequestWorker *worker, OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsSignalFull(OAIHttpRequestWorker *worker, OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsByPhaseGuidSignalFull(OAIHttpRequestWorker *worker, OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsByProjectGuidSignalFull(OAIHttpRequestWorker *worker, OAIResourceAllocationOutputModel summary);
    void resourceAllocationsGetResourceAllocationsByUserGuidSignalFull(OAIHttpRequestWorker *worker, OAIResourceAllocationOutputModel summary);
    void resourceAllocationsPostResourceAllocationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResourceAllocationOutputModel> summary);
    void roleAllocationsGetRoleAllocationSignalFull(OAIHttpRequestWorker *worker, OAIRoleAllocationOutputModel summary);
    void roleAllocationsGetRoleAllocationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleAllocationOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationSignalError() instead")
    void resourceAllocationsGetResourceAllocationSignalE(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationSignalError(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsSignalError() instead")
    void resourceAllocationsGetResourceAllocationsSignalE(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsSignalError(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsByPhaseGuidSignalError() instead")
    void resourceAllocationsGetResourceAllocationsByPhaseGuidSignalE(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsByPhaseGuidSignalError(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsByProjectGuidSignalError() instead")
    void resourceAllocationsGetResourceAllocationsByProjectGuidSignalE(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsByProjectGuidSignalError(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsByUserGuidSignalError() instead")
    void resourceAllocationsGetResourceAllocationsByUserGuidSignalE(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsByUserGuidSignalError(OAIResourceAllocationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsPostResourceAllocationsSignalError() instead")
    void resourceAllocationsPostResourceAllocationsSignalE(QList<OAIResourceAllocationOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsPostResourceAllocationsSignalError(QList<OAIResourceAllocationOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAllocationsGetRoleAllocationSignalError() instead")
    void roleAllocationsGetRoleAllocationSignalE(OAIRoleAllocationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAllocationsGetRoleAllocationSignalError(OAIRoleAllocationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAllocationsGetRoleAllocationsSignalError() instead")
    void roleAllocationsGetRoleAllocationsSignalE(QList<OAIRoleAllocationOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAllocationsGetRoleAllocationsSignalError(QList<OAIRoleAllocationOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationSignalErrorFull() instead")
    void resourceAllocationsGetResourceAllocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsSignalErrorFull() instead")
    void resourceAllocationsGetResourceAllocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsByPhaseGuidSignalErrorFull() instead")
    void resourceAllocationsGetResourceAllocationsByPhaseGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsByPhaseGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsByProjectGuidSignalErrorFull() instead")
    void resourceAllocationsGetResourceAllocationsByProjectGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsByProjectGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsGetResourceAllocationsByUserGuidSignalErrorFull() instead")
    void resourceAllocationsGetResourceAllocationsByUserGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsGetResourceAllocationsByUserGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceAllocationsPostResourceAllocationsSignalErrorFull() instead")
    void resourceAllocationsPostResourceAllocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceAllocationsPostResourceAllocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAllocationsGetRoleAllocationSignalErrorFull() instead")
    void roleAllocationsGetRoleAllocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAllocationsGetRoleAllocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAllocationsGetRoleAllocationsSignalErrorFull() instead")
    void roleAllocationsGetRoleAllocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAllocationsGetRoleAllocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
