/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserCustomPropertySelectionItemInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserCustomPropertySelectionItemInputModel::OAIUserCustomPropertySelectionItemInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserCustomPropertySelectionItemInputModel::OAIUserCustomPropertySelectionItemInputModel() {
    this->initializeModel();
}

OAIUserCustomPropertySelectionItemInputModel::~OAIUserCustomPropertySelectionItemInputModel() {}

void OAIUserCustomPropertySelectionItemInputModel::initializeModel() {

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_user_custom_property_isSet = false;
    m_user_custom_property_isValid = false;
}

void OAIUserCustomPropertySelectionItemInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserCustomPropertySelectionItemInputModel::fromJsonObject(QJsonObject json) {

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_user_custom_property_isValid = ::OpenAPI::fromJsonValue(m_user_custom_property, json[QString("userCustomProperty")]);
    m_user_custom_property_isSet = !json[QString("userCustomProperty")].isNull() && m_user_custom_property_isValid;
}

QString OAIUserCustomPropertySelectionItemInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserCustomPropertySelectionItemInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_user_custom_property.isSet()) {
        obj.insert(QString("userCustomProperty"), ::OpenAPI::toJsonValue(m_user_custom_property));
    }
    return obj;
}

bool OAIUserCustomPropertySelectionItemInputModel::isIsActive() const {
    return m_is_active;
}
void OAIUserCustomPropertySelectionItemInputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIUserCustomPropertySelectionItemInputModel::getName() const {
    return m_name;
}
void OAIUserCustomPropertySelectionItemInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIUserCustomPropertySelectionItemInputModel::getSortOrder() const {
    return m_sort_order;
}
void OAIUserCustomPropertySelectionItemInputModel::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAISimpleInputModel OAIUserCustomPropertySelectionItemInputModel::getUserCustomProperty() const {
    return m_user_custom_property;
}
void OAIUserCustomPropertySelectionItemInputModel::setUserCustomProperty(const OAISimpleInputModel &user_custom_property) {
    m_user_custom_property = user_custom_property;
    m_user_custom_property_isSet = true;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_user_custom_property_Set() const{
    return m_user_custom_property_isSet;
}

bool OAIUserCustomPropertySelectionItemInputModel::is_user_custom_property_Valid() const{
    return m_user_custom_property_isValid;
}

bool OAIUserCustomPropertySelectionItemInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_custom_property.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserCustomPropertySelectionItemInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_custom_property_isValid && true;
}

} // namespace OpenAPI
