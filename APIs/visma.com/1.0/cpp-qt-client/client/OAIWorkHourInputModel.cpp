/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkHourInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkHourInputModel::OAIWorkHourInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkHourInputModel::OAIWorkHourInputModel() {
    this->initializeModel();
}

OAIWorkHourInputModel::~OAIWorkHourInputModel() {}

void OAIWorkHourInputModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_invoice_quantity_isSet = false;
    m_invoice_quantity_isValid = false;

    m_invoice_row_comment_isSet = false;
    m_invoice_row_comment_isValid = false;

    m_invoice_row_description_isSet = false;
    m_invoice_row_description_isValid = false;

    m_is_approved_isSet = false;
    m_is_approved_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_overtime_isSet = false;
    m_overtime_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_planned_invoice_quantity_isSet = false;
    m_planned_invoice_quantity_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_work_type_isSet = false;
    m_work_type_isValid = false;
}

void OAIWorkHourInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkHourInputModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_invoice_quantity_isValid = ::OpenAPI::fromJsonValue(m_invoice_quantity, json[QString("invoiceQuantity")]);
    m_invoice_quantity_isSet = !json[QString("invoiceQuantity")].isNull() && m_invoice_quantity_isValid;

    m_invoice_row_comment_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_comment, json[QString("invoiceRowComment")]);
    m_invoice_row_comment_isSet = !json[QString("invoiceRowComment")].isNull() && m_invoice_row_comment_isValid;

    m_invoice_row_description_isValid = ::OpenAPI::fromJsonValue(m_invoice_row_description, json[QString("invoiceRowDescription")]);
    m_invoice_row_description_isSet = !json[QString("invoiceRowDescription")].isNull() && m_invoice_row_description_isValid;

    m_is_approved_isValid = ::OpenAPI::fromJsonValue(m_is_approved, json[QString("isApproved")]);
    m_is_approved_isSet = !json[QString("isApproved")].isNull() && m_is_approved_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_overtime_isValid = ::OpenAPI::fromJsonValue(m_overtime, json[QString("overtime")]);
    m_overtime_isSet = !json[QString("overtime")].isNull() && m_overtime_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_planned_invoice_quantity_isValid = ::OpenAPI::fromJsonValue(m_planned_invoice_quantity, json[QString("plannedInvoiceQuantity")]);
    m_planned_invoice_quantity_isSet = !json[QString("plannedInvoiceQuantity")].isNull() && m_planned_invoice_quantity_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_work_type_isValid = ::OpenAPI::fromJsonValue(m_work_type, json[QString("workType")]);
    m_work_type_isSet = !json[QString("workType")].isNull() && m_work_type_isValid;
}

QString OAIWorkHourInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkHourInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_invoice_quantity_isSet) {
        obj.insert(QString("invoiceQuantity"), ::OpenAPI::toJsonValue(m_invoice_quantity));
    }
    if (m_invoice_row_comment_isSet) {
        obj.insert(QString("invoiceRowComment"), ::OpenAPI::toJsonValue(m_invoice_row_comment));
    }
    if (m_invoice_row_description_isSet) {
        obj.insert(QString("invoiceRowDescription"), ::OpenAPI::toJsonValue(m_invoice_row_description));
    }
    if (m_is_approved_isSet) {
        obj.insert(QString("isApproved"), ::OpenAPI::toJsonValue(m_is_approved));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_overtime.isSet()) {
        obj.insert(QString("overtime"), ::OpenAPI::toJsonValue(m_overtime));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_planned_invoice_quantity_isSet) {
        obj.insert(QString("plannedInvoiceQuantity"), ::OpenAPI::toJsonValue(m_planned_invoice_quantity));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_work_type.isSet()) {
        obj.insert(QString("workType"), ::OpenAPI::toJsonValue(m_work_type));
    }
    return obj;
}

QString OAIWorkHourInputModel::getDescription() const {
    return m_description;
}
void OAIWorkHourInputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkHourInputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkHourInputModel::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIWorkHourInputModel::getEndTime() const {
    return m_end_time;
}
void OAIWorkHourInputModel::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWorkHourInputModel::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWorkHourInputModel::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDate OAIWorkHourInputModel::getEventDate() const {
    return m_event_date;
}
void OAIWorkHourInputModel::setEventDate(const QDate &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIWorkHourInputModel::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIWorkHourInputModel::is_event_date_Valid() const{
    return m_event_date_isValid;
}

OAISimpleInputModel OAIWorkHourInputModel::getInvoice() const {
    return m_invoice;
}
void OAIWorkHourInputModel::setInvoice(const OAISimpleInputModel &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIWorkHourInputModel::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIWorkHourInputModel::is_invoice_Valid() const{
    return m_invoice_isValid;
}

double OAIWorkHourInputModel::getInvoiceQuantity() const {
    return m_invoice_quantity;
}
void OAIWorkHourInputModel::setInvoiceQuantity(const double &invoice_quantity) {
    m_invoice_quantity = invoice_quantity;
    m_invoice_quantity_isSet = true;
}

bool OAIWorkHourInputModel::is_invoice_quantity_Set() const{
    return m_invoice_quantity_isSet;
}

bool OAIWorkHourInputModel::is_invoice_quantity_Valid() const{
    return m_invoice_quantity_isValid;
}

QString OAIWorkHourInputModel::getInvoiceRowComment() const {
    return m_invoice_row_comment;
}
void OAIWorkHourInputModel::setInvoiceRowComment(const QString &invoice_row_comment) {
    m_invoice_row_comment = invoice_row_comment;
    m_invoice_row_comment_isSet = true;
}

bool OAIWorkHourInputModel::is_invoice_row_comment_Set() const{
    return m_invoice_row_comment_isSet;
}

bool OAIWorkHourInputModel::is_invoice_row_comment_Valid() const{
    return m_invoice_row_comment_isValid;
}

QString OAIWorkHourInputModel::getInvoiceRowDescription() const {
    return m_invoice_row_description;
}
void OAIWorkHourInputModel::setInvoiceRowDescription(const QString &invoice_row_description) {
    m_invoice_row_description = invoice_row_description;
    m_invoice_row_description_isSet = true;
}

bool OAIWorkHourInputModel::is_invoice_row_description_Set() const{
    return m_invoice_row_description_isSet;
}

bool OAIWorkHourInputModel::is_invoice_row_description_Valid() const{
    return m_invoice_row_description_isValid;
}

bool OAIWorkHourInputModel::isIsApproved() const {
    return m_is_approved;
}
void OAIWorkHourInputModel::setIsApproved(const bool &is_approved) {
    m_is_approved = is_approved;
    m_is_approved_isSet = true;
}

bool OAIWorkHourInputModel::is_is_approved_Set() const{
    return m_is_approved_isSet;
}

bool OAIWorkHourInputModel::is_is_approved_Valid() const{
    return m_is_approved_isValid;
}

bool OAIWorkHourInputModel::isIsBillable() const {
    return m_is_billable;
}
void OAIWorkHourInputModel::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAIWorkHourInputModel::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAIWorkHourInputModel::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

OAISimpleInputModel OAIWorkHourInputModel::getOvertime() const {
    return m_overtime;
}
void OAIWorkHourInputModel::setOvertime(const OAISimpleInputModel &overtime) {
    m_overtime = overtime;
    m_overtime_isSet = true;
}

bool OAIWorkHourInputModel::is_overtime_Set() const{
    return m_overtime_isSet;
}

bool OAIWorkHourInputModel::is_overtime_Valid() const{
    return m_overtime_isValid;
}

OAISimpleInputRequiredModel OAIWorkHourInputModel::getPhase() const {
    return m_phase;
}
void OAIWorkHourInputModel::setPhase(const OAISimpleInputRequiredModel &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIWorkHourInputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIWorkHourInputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

double OAIWorkHourInputModel::getPlannedInvoiceQuantity() const {
    return m_planned_invoice_quantity;
}
void OAIWorkHourInputModel::setPlannedInvoiceQuantity(const double &planned_invoice_quantity) {
    m_planned_invoice_quantity = planned_invoice_quantity;
    m_planned_invoice_quantity_isSet = true;
}

bool OAIWorkHourInputModel::is_planned_invoice_quantity_Set() const{
    return m_planned_invoice_quantity_isSet;
}

bool OAIWorkHourInputModel::is_planned_invoice_quantity_Valid() const{
    return m_planned_invoice_quantity_isValid;
}

double OAIWorkHourInputModel::getQuantity() const {
    return m_quantity;
}
void OAIWorkHourInputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIWorkHourInputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIWorkHourInputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QDateTime OAIWorkHourInputModel::getStartTime() const {
    return m_start_time;
}
void OAIWorkHourInputModel::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkHourInputModel::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkHourInputModel::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIMoneyInputModel OAIWorkHourInputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIWorkHourInputModel::setUnitPrice(const OAIMoneyInputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIWorkHourInputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIWorkHourInputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAISimpleInputRequiredModel OAIWorkHourInputModel::getUser() const {
    return m_user;
}
void OAIWorkHourInputModel::setUser(const OAISimpleInputRequiredModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIWorkHourInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIWorkHourInputModel::is_user_Valid() const{
    return m_user_isValid;
}

OAISimpleInputRequiredModel OAIWorkHourInputModel::getWorkType() const {
    return m_work_type;
}
void OAIWorkHourInputModel::setWorkType(const OAISimpleInputRequiredModel &work_type) {
    m_work_type = work_type;
    m_work_type_isSet = true;
}

bool OAIWorkHourInputModel::is_work_type_Set() const{
    return m_work_type_isSet;
}

bool OAIWorkHourInputModel::is_work_type_Valid() const{
    return m_work_type_isValid;
}

bool OAIWorkHourInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_row_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_invoice_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkHourInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_date_isValid && m_phase_isValid && m_user_isValid && m_work_type_isValid && true;
}

} // namespace OpenAPI
