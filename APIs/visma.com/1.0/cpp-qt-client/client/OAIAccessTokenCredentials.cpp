/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenCredentials::OAIAccessTokenCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenCredentials::OAIAccessTokenCredentials() {
    this->initializeModel();
}

OAIAccessTokenCredentials::~OAIAccessTokenCredentials() {}

void OAIAccessTokenCredentials::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAccessTokenCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenCredentials::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAccessTokenCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_grant_type.isSet()) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAccessTokenCredentials::getClientId() const {
    return m_client_id;
}
void OAIAccessTokenCredentials::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAccessTokenCredentials::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAccessTokenCredentials::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAccessTokenCredentials::getClientSecret() const {
    return m_client_secret;
}
void OAIAccessTokenCredentials::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAccessTokenCredentials::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAccessTokenCredentials::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIAccessTokenCredentials::getCode() const {
    return m_code;
}
void OAIAccessTokenCredentials::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAccessTokenCredentials::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAccessTokenCredentials::is_code_Valid() const{
    return m_code_isValid;
}

OAIGrantType OAIAccessTokenCredentials::getGrantType() const {
    return m_grant_type;
}
void OAIAccessTokenCredentials::setGrantType(const OAIGrantType &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIAccessTokenCredentials::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIAccessTokenCredentials::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIAccessTokenCredentials::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIAccessTokenCredentials::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIAccessTokenCredentials::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIAccessTokenCredentials::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAIAccessTokenCredentials::getRefreshToken() const {
    return m_refresh_token;
}
void OAIAccessTokenCredentials::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIAccessTokenCredentials::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIAccessTokenCredentials::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAIAccessTokenCredentials::getScope() const {
    return m_scope;
}
void OAIAccessTokenCredentials::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAccessTokenCredentials::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAccessTokenCredentials::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAccessTokenCredentials::getState() const {
    return m_state;
}
void OAIAccessTokenCredentials::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccessTokenCredentials::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccessTokenCredentials::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAccessTokenCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
