/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectWorkHourPriceOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectWorkHourPriceOutputModel::OAIProjectWorkHourPriceOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectWorkHourPriceOutputModel::OAIProjectWorkHourPriceOutputModel() {
    this->initializeModel();
}

OAIProjectWorkHourPriceOutputModel::~OAIProjectWorkHourPriceOutputModel() {}

void OAIProjectWorkHourPriceOutputModel::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_work_type_isSet = false;
    m_work_type_isValid = false;
}

void OAIProjectWorkHourPriceOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectWorkHourPriceOutputModel::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("isAvailable")]);
    m_is_available_isSet = !json[QString("isAvailable")].isNull() && m_is_available_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_work_type_isValid = ::OpenAPI::fromJsonValue(m_work_type, json[QString("workType")]);
    m_work_type_isSet = !json[QString("workType")].isNull() && m_work_type_isValid;
}

QString OAIProjectWorkHourPriceOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectWorkHourPriceOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("isAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_work_type.isSet()) {
        obj.insert(QString("workType"), ::OpenAPI::toJsonValue(m_work_type));
    }
    return obj;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectWorkHourPriceOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProjectWorkHourPriceOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProjectWorkHourPriceOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectWorkHourPriceOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIProjectWorkHourPriceOutputModel::getGuid() const {
    return m_guid;
}
void OAIProjectWorkHourPriceOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIProjectWorkHourPriceOutputModel::isIsAvailable() const {
    return m_is_available;
}
void OAIProjectWorkHourPriceOutputModel::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_is_available_Valid() const{
    return m_is_available_isValid;
}

bool OAIProjectWorkHourPriceOutputModel::isIsBillable() const {
    return m_is_billable;
}
void OAIProjectWorkHourPriceOutputModel::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectWorkHourPriceOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProjectWorkHourPriceOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProjectWorkHourPriceOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProjectWorkHourPriceOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIModelBaseWithRequiredGuid OAIProjectWorkHourPriceOutputModel::getPhase() const {
    return m_phase;
}
void OAIProjectWorkHourPriceOutputModel::setPhase(const OAIModelBaseWithRequiredGuid &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAIProjectSubModel OAIProjectWorkHourPriceOutputModel::getProject() const {
    return m_project;
}
void OAIProjectWorkHourPriceOutputModel::setProject(const OAIProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

OAIMoneyOutputModel OAIProjectWorkHourPriceOutputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProjectWorkHourPriceOutputModel::setUnitPrice(const OAIMoneyOutputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIModelWithName OAIProjectWorkHourPriceOutputModel::getUser() const {
    return m_user;
}
void OAIProjectWorkHourPriceOutputModel::setUser(const OAIModelWithName &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

OAIModelWithName OAIProjectWorkHourPriceOutputModel::getWorkType() const {
    return m_work_type;
}
void OAIProjectWorkHourPriceOutputModel::setWorkType(const OAIModelWithName &work_type) {
    m_work_type = work_type;
    m_work_type_isSet = true;
}

bool OAIProjectWorkHourPriceOutputModel::is_work_type_Set() const{
    return m_work_type_isSet;
}

bool OAIProjectWorkHourPriceOutputModel::is_work_type_Valid() const{
    return m_work_type_isValid;
}

bool OAIProjectWorkHourPriceOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectWorkHourPriceOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
