/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeesReadApi_H
#define OAI_OAIFeesReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillablePeriod.h"
#include "OAIDeletedProjectFeeModel.h"
#include "OAIExceptionModel.h"
#include "OAIFlatRateOutputModel.h"
#include "OAIProductType.h"
#include "OAIProjectFeeOutputModel.h"
#include "OAIProjectRecurringFeeRuleOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeesReadApi : public QObject {
    Q_OBJECT

public:
    OAIFeesReadApi(const int timeOut = 0);
    ~OAIFeesReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  invoice_guid QString [optional]
    */
    virtual void flatRatesGetAllFlatRates(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &invoice_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void flatRatesGetFlatrate(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void flatRatesGetFlatratesForProject(const QString &project_guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  user_guids QList<QString> [optional]
    * @param[in]  deleted_since QDateTime [optional]
    */
    virtual void projectFeesGetDeletedProjectFees(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &deleted_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectFeesGetProjectFee(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void projectFeesGetProjectFeesByToken(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  product_type OAIProductType [optional]
    * @param[in]  is_billable bool [optional]
    * @param[in]  is_billed bool [optional]
    * @param[in]  invoiceable_date QDateTime [optional]
    * @param[in]  include_recurring_rules bool [optional]
    * @param[in]  is_billable_period_in_future bool [optional]
    */
    virtual void projectFeesGetProjectFeesForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductType> &product_type = ::OpenAPI::OptionalParam<OAIProductType>(), const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_billed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &invoiceable_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_recurring_rules = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_billable_period_in_future = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  product_type OAIProductType [optional]
    * @param[in]  is_billable bool [optional]
    * @param[in]  is_billed bool [optional]
    * @param[in]  invoiceable_date QDateTime [optional]
    * @param[in]  has_phase bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    */
    virtual void projectFeesGetUserProjectFees(const QString &user_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductType> &product_type = ::OpenAPI::OptionalParam<OAIProductType>(), const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_billed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &invoiceable_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &has_phase = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  include_inactive bool [optional]
    */
    virtual void projectRecurringFeeRulesGetProjectRecurringFeeRule(const QString &guid, const ::OpenAPI::OptionalParam<bool> &include_inactive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  product_type OAIProductType [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void projectRecurringFeeRulesGetProjectRecurringFeeRules(const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductType> &product_type = ::OpenAPI::OptionalParam<OAIProductType>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  product_type OAIProductType [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_billable_period_in_future bool [optional]
    * @param[in]  billable_time_period OAIBillablePeriod [optional]
    */
    virtual void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<OAIProductType> &product_type = ::OpenAPI::OptionalParam<OAIProductType>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_billable_period_in_future = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBillablePeriod> &billable_time_period = ::OpenAPI::OptionalParam<OAIBillablePeriod>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void flatRatesGetAllFlatRatesCallback(OAIHttpRequestWorker *worker);
    void flatRatesGetFlatrateCallback(OAIHttpRequestWorker *worker);
    void flatRatesGetFlatratesForProjectCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetDeletedProjectFeesCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetProjectFeeCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetProjectFeesByTokenCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetProjectFeesForProjectCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetUserProjectFeesCallback(OAIHttpRequestWorker *worker);
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleCallback(OAIHttpRequestWorker *worker);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesCallback(OAIHttpRequestWorker *worker);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void flatRatesGetAllFlatRatesSignal(QList<OAIFlatRateOutputModel> summary);
    void flatRatesGetFlatrateSignal(QList<OAIFlatRateOutputModel> summary);
    void flatRatesGetFlatratesForProjectSignal(QList<OAIFlatRateOutputModel> summary);
    void projectFeesGetDeletedProjectFeesSignal(QList<OAIDeletedProjectFeeModel> summary);
    void projectFeesGetProjectFeeSignal(OAIProjectFeeOutputModel summary);
    void projectFeesGetProjectFeesByTokenSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetProjectFeesForProjectSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetUserProjectFeesSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleSignal(OAIProjectRecurringFeeRuleOutputModel summary);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesSignal(QList<OAIProjectRecurringFeeRuleOutputModel> summary);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignal(QList<OAIProjectRecurringFeeRuleOutputModel> summary);


    void flatRatesGetAllFlatRatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlatRateOutputModel> summary);
    void flatRatesGetFlatrateSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlatRateOutputModel> summary);
    void flatRatesGetFlatratesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlatRateOutputModel> summary);
    void projectFeesGetDeletedProjectFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeletedProjectFeeModel> summary);
    void projectFeesGetProjectFeeSignalFull(OAIHttpRequestWorker *worker, OAIProjectFeeOutputModel summary);
    void projectFeesGetProjectFeesByTokenSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetProjectFeesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetUserProjectFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRecurringFeeRuleOutputModel summary);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectRecurringFeeRuleOutputModel> summary);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectRecurringFeeRuleOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use flatRatesGetAllFlatRatesSignalError() instead")
    void flatRatesGetAllFlatRatesSignalE(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesGetAllFlatRatesSignalError(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flatRatesGetFlatrateSignalError() instead")
    void flatRatesGetFlatrateSignalE(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesGetFlatrateSignalError(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flatRatesGetFlatratesForProjectSignalError() instead")
    void flatRatesGetFlatratesForProjectSignalE(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesGetFlatratesForProjectSignalError(QList<OAIFlatRateOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetDeletedProjectFeesSignalError() instead")
    void projectFeesGetDeletedProjectFeesSignalE(QList<OAIDeletedProjectFeeModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetDeletedProjectFeesSignalError(QList<OAIDeletedProjectFeeModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetProjectFeeSignalError() instead")
    void projectFeesGetProjectFeeSignalE(OAIProjectFeeOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetProjectFeeSignalError(OAIProjectFeeOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetProjectFeesByTokenSignalError() instead")
    void projectFeesGetProjectFeesByTokenSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetProjectFeesByTokenSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetProjectFeesForProjectSignalError() instead")
    void projectFeesGetProjectFeesForProjectSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetProjectFeesForProjectSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetUserProjectFeesSignalError() instead")
    void projectFeesGetUserProjectFeesSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetUserProjectFeesSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalError() instead")
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalE(OAIProjectRecurringFeeRuleOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalError(OAIProjectRecurringFeeRuleOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalError() instead")
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalE(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalError(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalError() instead")
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalE(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalError(QList<OAIProjectRecurringFeeRuleOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use flatRatesGetAllFlatRatesSignalErrorFull() instead")
    void flatRatesGetAllFlatRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesGetAllFlatRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flatRatesGetFlatrateSignalErrorFull() instead")
    void flatRatesGetFlatrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesGetFlatrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flatRatesGetFlatratesForProjectSignalErrorFull() instead")
    void flatRatesGetFlatratesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flatRatesGetFlatratesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetDeletedProjectFeesSignalErrorFull() instead")
    void projectFeesGetDeletedProjectFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetDeletedProjectFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetProjectFeeSignalErrorFull() instead")
    void projectFeesGetProjectFeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetProjectFeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetProjectFeesByTokenSignalErrorFull() instead")
    void projectFeesGetProjectFeesByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetProjectFeesByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetProjectFeesForProjectSignalErrorFull() instead")
    void projectFeesGetProjectFeesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetProjectFeesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetUserProjectFeesSignalErrorFull() instead")
    void projectFeesGetUserProjectFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetUserProjectFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalErrorFull() instead")
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesGetProjectRecurringFeeRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalErrorFull() instead")
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalErrorFull() instead")
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
