/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAllocationInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAllocationInputModel::OAIResourceAllocationInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAllocationInputModel::OAIResourceAllocationInputModel() {
    this->initializeModel();
}

OAIResourceAllocationInputModel::~OAIResourceAllocationInputModel() {}

void OAIResourceAllocationInputModel::initializeModel() {

    m_allocation_hours_isSet = false;
    m_allocation_hours_isValid = false;

    m_allocation_percentage_isSet = false;
    m_allocation_percentage_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIResourceAllocationInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAllocationInputModel::fromJsonObject(QJsonObject json) {

    m_allocation_hours_isValid = ::OpenAPI::fromJsonValue(m_allocation_hours, json[QString("allocationHours")]);
    m_allocation_hours_isSet = !json[QString("allocationHours")].isNull() && m_allocation_hours_isValid;

    m_allocation_percentage_isValid = ::OpenAPI::fromJsonValue(m_allocation_percentage, json[QString("allocationPercentage")]);
    m_allocation_percentage_isSet = !json[QString("allocationPercentage")].isNull() && m_allocation_percentage_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIResourceAllocationInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAllocationInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_hours_isSet) {
        obj.insert(QString("allocationHours"), ::OpenAPI::toJsonValue(m_allocation_hours));
    }
    if (m_allocation_percentage_isSet) {
        obj.insert(QString("allocationPercentage"), ::OpenAPI::toJsonValue(m_allocation_percentage));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

double OAIResourceAllocationInputModel::getAllocationHours() const {
    return m_allocation_hours;
}
void OAIResourceAllocationInputModel::setAllocationHours(const double &allocation_hours) {
    m_allocation_hours = allocation_hours;
    m_allocation_hours_isSet = true;
}

bool OAIResourceAllocationInputModel::is_allocation_hours_Set() const{
    return m_allocation_hours_isSet;
}

bool OAIResourceAllocationInputModel::is_allocation_hours_Valid() const{
    return m_allocation_hours_isValid;
}

qint32 OAIResourceAllocationInputModel::getAllocationPercentage() const {
    return m_allocation_percentage;
}
void OAIResourceAllocationInputModel::setAllocationPercentage(const qint32 &allocation_percentage) {
    m_allocation_percentage = allocation_percentage;
    m_allocation_percentage_isSet = true;
}

bool OAIResourceAllocationInputModel::is_allocation_percentage_Set() const{
    return m_allocation_percentage_isSet;
}

bool OAIResourceAllocationInputModel::is_allocation_percentage_Valid() const{
    return m_allocation_percentage_isValid;
}

QDate OAIResourceAllocationInputModel::getEndDate() const {
    return m_end_date;
}
void OAIResourceAllocationInputModel::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIResourceAllocationInputModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIResourceAllocationInputModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAISimpleInputModel OAIResourceAllocationInputModel::getPhase() const {
    return m_phase;
}
void OAIResourceAllocationInputModel::setPhase(const OAISimpleInputModel &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIResourceAllocationInputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIResourceAllocationInputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAISimpleInputRequiredModel OAIResourceAllocationInputModel::getProject() const {
    return m_project;
}
void OAIResourceAllocationInputModel::setProject(const OAISimpleInputRequiredModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIResourceAllocationInputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIResourceAllocationInputModel::is_project_Valid() const{
    return m_project_isValid;
}

QDate OAIResourceAllocationInputModel::getStartDate() const {
    return m_start_date;
}
void OAIResourceAllocationInputModel::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIResourceAllocationInputModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIResourceAllocationInputModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAISimpleInputRequiredModel OAIResourceAllocationInputModel::getUser() const {
    return m_user;
}
void OAIResourceAllocationInputModel::setUser(const OAISimpleInputRequiredModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIResourceAllocationInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIResourceAllocationInputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIResourceAllocationInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAllocationInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
