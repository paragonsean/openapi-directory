/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchOperation::OAIPatchOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchOperation::OAIPatchOperation() {
    this->initializeModel();
}

OAIPatchOperation::~OAIPatchOperation() {}

void OAIPatchOperation::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPatchOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchOperation::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPatchOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_op.isSet()) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPatchOperation::getFrom() const {
    return m_from;
}
void OAIPatchOperation::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIPatchOperation::is_from_Set() const{
    return m_from_isSet;
}

bool OAIPatchOperation::is_from_Valid() const{
    return m_from_isValid;
}

OAIPatchOperationType OAIPatchOperation::getOp() const {
    return m_op;
}
void OAIPatchOperation::setOp(const OAIPatchOperationType &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIPatchOperation::is_op_Set() const{
    return m_op_isSet;
}

bool OAIPatchOperation::is_op_Valid() const{
    return m_op_isValid;
}

QString OAIPatchOperation::getPath() const {
    return m_path;
}
void OAIPatchOperation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPatchOperation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPatchOperation::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPatchOperation::getValue() const {
    return m_value;
}
void OAIPatchOperation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPatchOperation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPatchOperation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPatchOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_op_isValid && true;
}

} // namespace OpenAPI
