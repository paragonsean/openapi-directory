/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISalesStatusTypeInputModel.h
 *
 * 
 */

#ifndef OAISalesStatusTypeInputModel_H
#define OAISalesStatusTypeInputModel_H

#include <QJsonObject>

#include "OAISalesStatusType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISalesStatusTypeInputModel : public OAIObject {
public:
    OAISalesStatusTypeInputModel();
    OAISalesStatusTypeInputModel(QString json);
    ~OAISalesStatusTypeInputModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDefaultProbability() const;
    void setDefaultProbability(const qint32 &default_probability);
    bool is_default_probability_Set() const;
    bool is_default_probability_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsProposalDefault() const;
    void setIsProposalDefault(const bool &is_proposal_default);
    bool is_is_proposal_default_Set() const;
    bool is_is_proposal_default_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAISalesStatusType getSalesState() const;
    void setSalesState(const OAISalesStatusType &sales_state);
    bool is_sales_state_Set() const;
    bool is_sales_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_default_probability;
    bool m_default_probability_isSet;
    bool m_default_probability_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_proposal_default;
    bool m_is_proposal_default_isSet;
    bool m_is_proposal_default_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAISalesStatusType m_sales_state;
    bool m_sales_state_isSet;
    bool m_sales_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISalesStatusTypeInputModel)

#endif // OAISalesStatusTypeInputModel_H
