/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkTypeInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkTypeInputModel::OAIWorkTypeInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkTypeInputModel::OAIWorkTypeInputModel() {
    this->initializeModel();
}

OAIWorkTypeInputModel::~OAIWorkTypeInputModel() {}

void OAIWorkTypeInputModel::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_hour_cost_isSet = false;
    m_hour_cost_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_productive_isSet = false;
    m_is_productive_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;
}

void OAIWorkTypeInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkTypeInputModel::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_hour_cost_isValid = ::OpenAPI::fromJsonValue(m_hour_cost, json[QString("hourCost")]);
    m_hour_cost_isSet = !json[QString("hourCost")].isNull() && m_hour_cost_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_productive_isValid = ::OpenAPI::fromJsonValue(m_is_productive, json[QString("isProductive")]);
    m_is_productive_isSet = !json[QString("isProductive")].isNull() && m_is_productive_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;
}

QString OAIWorkTypeInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkTypeInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_hour_cost.isSet()) {
        obj.insert(QString("hourCost"), ::OpenAPI::toJsonValue(m_hour_cost));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_productive_isSet) {
        obj.insert(QString("isProductive"), ::OpenAPI::toJsonValue(m_is_productive));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    return obj;
}

QString OAIWorkTypeInputModel::getCode() const {
    return m_code;
}
void OAIWorkTypeInputModel::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWorkTypeInputModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWorkTypeInputModel::is_code_Valid() const{
    return m_code_isValid;
}

OAIMoneyInputModelWithNullableAmount OAIWorkTypeInputModel::getHourCost() const {
    return m_hour_cost;
}
void OAIWorkTypeInputModel::setHourCost(const OAIMoneyInputModelWithNullableAmount &hour_cost) {
    m_hour_cost = hour_cost;
    m_hour_cost_isSet = true;
}

bool OAIWorkTypeInputModel::is_hour_cost_Set() const{
    return m_hour_cost_isSet;
}

bool OAIWorkTypeInputModel::is_hour_cost_Valid() const{
    return m_hour_cost_isValid;
}

bool OAIWorkTypeInputModel::isIsActive() const {
    return m_is_active;
}
void OAIWorkTypeInputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIWorkTypeInputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIWorkTypeInputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIWorkTypeInputModel::isIsDefault() const {
    return m_is_default;
}
void OAIWorkTypeInputModel::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIWorkTypeInputModel::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIWorkTypeInputModel::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIWorkTypeInputModel::isIsProductive() const {
    return m_is_productive;
}
void OAIWorkTypeInputModel::setIsProductive(const bool &is_productive) {
    m_is_productive = is_productive;
    m_is_productive_isSet = true;
}

bool OAIWorkTypeInputModel::is_is_productive_Set() const{
    return m_is_productive_isSet;
}

bool OAIWorkTypeInputModel::is_is_productive_Valid() const{
    return m_is_productive_isValid;
}

QString OAIWorkTypeInputModel::getName() const {
    return m_name;
}
void OAIWorkTypeInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkTypeInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkTypeInputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAISimpleInputModel OAIWorkTypeInputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIWorkTypeInputModel::setSalesAccount(const OAISimpleInputModel &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIWorkTypeInputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIWorkTypeInputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

bool OAIWorkTypeInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_productive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkTypeInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
