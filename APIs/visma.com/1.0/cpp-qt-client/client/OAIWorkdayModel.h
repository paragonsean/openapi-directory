/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkdayModel.h
 *
 * 
 */

#ifndef OAIWorkdayModel_H
#define OAIWorkdayModel_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWorkdayModel : public OAIObject {
public:
    OAIWorkdayModel();
    OAIWorkdayModel(QString json);
    ~OAIWorkdayModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAbsenceHours() const;
    void setAbsenceHours(const double &absence_hours);
    bool is_absence_hours_Set() const;
    bool is_absence_hours_Valid() const;

    QDate getDate() const;
    void setDate(const QDate &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    double getEnteredHours() const;
    void setEnteredHours(const double &entered_hours);
    bool is_entered_hours_Set() const;
    bool is_entered_hours_Valid() const;

    double getEnteredTimeEntries() const;
    void setEnteredTimeEntries(const double &entered_time_entries);
    bool is_entered_time_entries_Set() const;
    bool is_entered_time_entries_Valid() const;

    double getExpectedHours() const;
    void setExpectedHours(const double &expected_hours);
    bool is_expected_hours_Set() const;
    bool is_expected_hours_Valid() const;

    double getFlextimeLimitPerDay() const;
    void setFlextimeLimitPerDay(const double &flextime_limit_per_day);
    bool is_flextime_limit_per_day_Set() const;
    bool is_flextime_limit_per_day_Valid() const;

    QString getHolidayName() const;
    void setHolidayName(const QString &holiday_name);
    bool is_holiday_name_Set() const;
    bool is_holiday_name_Valid() const;

    qint32 getIncompleteTimingMinutes() const;
    void setIncompleteTimingMinutes(const qint32 &incomplete_timing_minutes);
    bool is_incomplete_timing_minutes_Set() const;
    bool is_incomplete_timing_minutes_Valid() const;

    bool isIsCompleted() const;
    void setIsCompleted(const bool &is_completed);
    bool is_is_completed_Set() const;
    bool is_is_completed_Valid() const;

    bool isIsHoliday() const;
    void setIsHoliday(const bool &is_holiday);
    bool is_is_holiday_Set() const;
    bool is_is_holiday_Valid() const;

    bool isIsOvertimeAllowed() const;
    void setIsOvertimeAllowed(const bool &is_overtime_allowed);
    bool is_is_overtime_allowed_Set() const;
    bool is_is_overtime_allowed_Valid() const;

    bool isIsReadOnly() const;
    void setIsReadOnly(const bool &is_read_only);
    bool is_is_read_only_Set() const;
    bool is_is_read_only_Valid() const;

    QString getUserGuid() const;
    void setUserGuid(const QString &user_guid);
    bool is_user_guid_Set() const;
    bool is_user_guid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_absence_hours;
    bool m_absence_hours_isSet;
    bool m_absence_hours_isValid;

    QDate m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    double m_entered_hours;
    bool m_entered_hours_isSet;
    bool m_entered_hours_isValid;

    double m_entered_time_entries;
    bool m_entered_time_entries_isSet;
    bool m_entered_time_entries_isValid;

    double m_expected_hours;
    bool m_expected_hours_isSet;
    bool m_expected_hours_isValid;

    double m_flextime_limit_per_day;
    bool m_flextime_limit_per_day_isSet;
    bool m_flextime_limit_per_day_isValid;

    QString m_holiday_name;
    bool m_holiday_name_isSet;
    bool m_holiday_name_isValid;

    qint32 m_incomplete_timing_minutes;
    bool m_incomplete_timing_minutes_isSet;
    bool m_incomplete_timing_minutes_isValid;

    bool m_is_completed;
    bool m_is_completed_isSet;
    bool m_is_completed_isValid;

    bool m_is_holiday;
    bool m_is_holiday_isSet;
    bool m_is_holiday_isValid;

    bool m_is_overtime_allowed;
    bool m_is_overtime_allowed_isSet;
    bool m_is_overtime_allowed_isValid;

    bool m_is_read_only;
    bool m_is_read_only_isSet;
    bool m_is_read_only_isValid;

    QString m_user_guid;
    bool m_user_guid_isSet;
    bool m_user_guid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkdayModel)

#endif // OAIWorkdayModel_H
