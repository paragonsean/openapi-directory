/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerModel::OAICustomerModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerModel::OAICustomerModel() {
    this->initializeModel();
}

OAICustomerModel::~OAICustomerModel() {}

void OAICustomerModel::initializeModel() {

    m_annual_revenue_isSet = false;
    m_annual_revenue_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_e_invoice_address_isSet = false;
    m_e_invoice_address_isValid = false;

    m_e_invoice_operator_isSet = false;
    m_e_invoice_operator_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_headquarter_address_isSet = false;
    m_headquarter_address_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_invoice_template_isSet = false;
    m_invoice_template_isValid = false;

    m_invoicing_vat_isSet = false;
    m_invoicing_vat_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_kvk_number_isSet = false;
    m_kvk_number_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_number_of_employees_isSet = false;
    m_number_of_employees_isValid = false;

    m_overdue_interest_isSet = false;
    m_overdue_interest_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payment_term_isSet = false;
    m_payment_term_isValid = false;

    m_pricelist_isSet = false;
    m_pricelist_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAICustomerModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerModel::fromJsonObject(QJsonObject json) {

    m_annual_revenue_isValid = ::OpenAPI::fromJsonValue(m_annual_revenue, json[QString("annualRevenue")]);
    m_annual_revenue_isSet = !json[QString("annualRevenue")].isNull() && m_annual_revenue_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_e_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_e_invoice_address, json[QString("eInvoiceAddress")]);
    m_e_invoice_address_isSet = !json[QString("eInvoiceAddress")].isNull() && m_e_invoice_address_isValid;

    m_e_invoice_operator_isValid = ::OpenAPI::fromJsonValue(m_e_invoice_operator, json[QString("eInvoiceOperator")]);
    m_e_invoice_operator_isSet = !json[QString("eInvoiceOperator")].isNull() && m_e_invoice_operator_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_headquarter_address_isValid = ::OpenAPI::fromJsonValue(m_headquarter_address, json[QString("headquarterAddress")]);
    m_headquarter_address_isSet = !json[QString("headquarterAddress")].isNull() && m_headquarter_address_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_invoice_template_isValid = ::OpenAPI::fromJsonValue(m_invoice_template, json[QString("invoiceTemplate")]);
    m_invoice_template_isSet = !json[QString("invoiceTemplate")].isNull() && m_invoice_template_isValid;

    m_invoicing_vat_isValid = ::OpenAPI::fromJsonValue(m_invoicing_vat, json[QString("invoicingVat")]);
    m_invoicing_vat_isSet = !json[QString("invoicingVat")].isNull() && m_invoicing_vat_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_kvk_number_isValid = ::OpenAPI::fromJsonValue(m_kvk_number, json[QString("kvkNumber")]);
    m_kvk_number_isSet = !json[QString("kvkNumber")].isNull() && m_kvk_number_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_number_of_employees_isValid = ::OpenAPI::fromJsonValue(m_number_of_employees, json[QString("numberOfEmployees")]);
    m_number_of_employees_isSet = !json[QString("numberOfEmployees")].isNull() && m_number_of_employees_isValid;

    m_overdue_interest_isValid = ::OpenAPI::fromJsonValue(m_overdue_interest, json[QString("overdueInterest")]);
    m_overdue_interest_isSet = !json[QString("overdueInterest")].isNull() && m_overdue_interest_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payment_term_isValid = ::OpenAPI::fromJsonValue(m_payment_term, json[QString("paymentTerm")]);
    m_payment_term_isSet = !json[QString("paymentTerm")].isNull() && m_payment_term_isValid;

    m_pricelist_isValid = ::OpenAPI::fromJsonValue(m_pricelist, json[QString("pricelist")]);
    m_pricelist_isSet = !json[QString("pricelist")].isNull() && m_pricelist_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("vatNumber")]);
    m_vat_number_isSet = !json[QString("vatNumber")].isNull() && m_vat_number_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAICustomerModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerModel::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_revenue_isSet) {
        obj.insert(QString("annualRevenue"), ::OpenAPI::toJsonValue(m_annual_revenue));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_e_invoice_address_isSet) {
        obj.insert(QString("eInvoiceAddress"), ::OpenAPI::toJsonValue(m_e_invoice_address));
    }
    if (m_e_invoice_operator_isSet) {
        obj.insert(QString("eInvoiceOperator"), ::OpenAPI::toJsonValue(m_e_invoice_operator));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_headquarter_address.isSet()) {
        obj.insert(QString("headquarterAddress"), ::OpenAPI::toJsonValue(m_headquarter_address));
    }
    if (m_industry.isSet()) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_invoice_template.isSet()) {
        obj.insert(QString("invoiceTemplate"), ::OpenAPI::toJsonValue(m_invoice_template));
    }
    if (m_invoicing_vat.isSet()) {
        obj.insert(QString("invoicingVat"), ::OpenAPI::toJsonValue(m_invoicing_vat));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_kvk_number_isSet) {
        obj.insert(QString("kvkNumber"), ::OpenAPI::toJsonValue(m_kvk_number));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_number_of_employees_isSet) {
        obj.insert(QString("numberOfEmployees"), ::OpenAPI::toJsonValue(m_number_of_employees));
    }
    if (m_overdue_interest_isSet) {
        obj.insert(QString("overdueInterest"), ::OpenAPI::toJsonValue(m_overdue_interest));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payment_term_isSet) {
        obj.insert(QString("paymentTerm"), ::OpenAPI::toJsonValue(m_payment_term));
    }
    if (m_pricelist.isSet()) {
        obj.insert(QString("pricelist"), ::OpenAPI::toJsonValue(m_pricelist));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("vatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

qint64 OAICustomerModel::getAnnualRevenue() const {
    return m_annual_revenue;
}
void OAICustomerModel::setAnnualRevenue(const qint64 &annual_revenue) {
    m_annual_revenue = annual_revenue;
    m_annual_revenue_isSet = true;
}

bool OAICustomerModel::is_annual_revenue_Set() const{
    return m_annual_revenue_isSet;
}

bool OAICustomerModel::is_annual_revenue_Valid() const{
    return m_annual_revenue_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAICustomerModel::getCreatedBy() const {
    return m_created_by;
}
void OAICustomerModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAICustomerModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAICustomerModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAICustomerModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAICustomerModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAICustomerModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAICustomerModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAICustomerCurrency OAICustomerModel::getCurrency() const {
    return m_currency;
}
void OAICustomerModel::setCurrency(const OAICustomerCurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICustomerModel::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICustomerModel::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICustomerModel::getEInvoiceAddress() const {
    return m_e_invoice_address;
}
void OAICustomerModel::setEInvoiceAddress(const QString &e_invoice_address) {
    m_e_invoice_address = e_invoice_address;
    m_e_invoice_address_isSet = true;
}

bool OAICustomerModel::is_e_invoice_address_Set() const{
    return m_e_invoice_address_isSet;
}

bool OAICustomerModel::is_e_invoice_address_Valid() const{
    return m_e_invoice_address_isValid;
}

QString OAICustomerModel::getEInvoiceOperator() const {
    return m_e_invoice_operator;
}
void OAICustomerModel::setEInvoiceOperator(const QString &e_invoice_operator) {
    m_e_invoice_operator = e_invoice_operator;
    m_e_invoice_operator_isSet = true;
}

bool OAICustomerModel::is_e_invoice_operator_Set() const{
    return m_e_invoice_operator_isSet;
}

bool OAICustomerModel::is_e_invoice_operator_Valid() const{
    return m_e_invoice_operator_isValid;
}

QString OAICustomerModel::getEmail() const {
    return m_email;
}
void OAICustomerModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomerModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomerModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomerModel::getGuid() const {
    return m_guid;
}
void OAICustomerModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAICustomerModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAICustomerModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAICustomerHeadquarterAddress OAICustomerModel::getHeadquarterAddress() const {
    return m_headquarter_address;
}
void OAICustomerModel::setHeadquarterAddress(const OAICustomerHeadquarterAddress &headquarter_address) {
    m_headquarter_address = headquarter_address;
    m_headquarter_address_isSet = true;
}

bool OAICustomerModel::is_headquarter_address_Set() const{
    return m_headquarter_address_isSet;
}

bool OAICustomerModel::is_headquarter_address_Valid() const{
    return m_headquarter_address_isValid;
}

OAIModelWithName OAICustomerModel::getIndustry() const {
    return m_industry;
}
void OAICustomerModel::setIndustry(const OAIModelWithName &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAICustomerModel::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAICustomerModel::is_industry_Valid() const{
    return m_industry_isValid;
}

OAIModelWithName OAICustomerModel::getInvoiceTemplate() const {
    return m_invoice_template;
}
void OAICustomerModel::setInvoiceTemplate(const OAIModelWithName &invoice_template) {
    m_invoice_template = invoice_template;
    m_invoice_template_isSet = true;
}

bool OAICustomerModel::is_invoice_template_Set() const{
    return m_invoice_template_isSet;
}

bool OAICustomerModel::is_invoice_template_Valid() const{
    return m_invoice_template_isValid;
}

OAICustomerInvoicingVat OAICustomerModel::getInvoicingVat() const {
    return m_invoicing_vat;
}
void OAICustomerModel::setInvoicingVat(const OAICustomerInvoicingVat &invoicing_vat) {
    m_invoicing_vat = invoicing_vat;
    m_invoicing_vat_isSet = true;
}

bool OAICustomerModel::is_invoicing_vat_Set() const{
    return m_invoicing_vat_isSet;
}

bool OAICustomerModel::is_invoicing_vat_Valid() const{
    return m_invoicing_vat_isValid;
}

bool OAICustomerModel::isIsActive() const {
    return m_is_active;
}
void OAICustomerModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICustomerModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICustomerModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAICustomerModel::isIsInternal() const {
    return m_is_internal;
}
void OAICustomerModel::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAICustomerModel::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAICustomerModel::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

QString OAICustomerModel::getKvkNumber() const {
    return m_kvk_number;
}
void OAICustomerModel::setKvkNumber(const QString &kvk_number) {
    m_kvk_number = kvk_number;
    m_kvk_number_isSet = true;
}

bool OAICustomerModel::is_kvk_number_Set() const{
    return m_kvk_number_isSet;
}

bool OAICustomerModel::is_kvk_number_Valid() const{
    return m_kvk_number_isValid;
}

OAICustomerLanguage OAICustomerModel::getLanguage() const {
    return m_language;
}
void OAICustomerModel::setLanguage(const OAICustomerLanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICustomerModel::is_language_Set() const{
    return m_language_isSet;
}

bool OAICustomerModel::is_language_Valid() const{
    return m_language_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAICustomerModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAICustomerModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAICustomerModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAICustomerModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAICustomerModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAICustomerModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAICustomerModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAICustomerModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAICustomerModel::getName() const {
    return m_name;
}
void OAICustomerModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomerModel::getNotes() const {
    return m_notes;
}
void OAICustomerModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAICustomerModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAICustomerModel::is_notes_Valid() const{
    return m_notes_isValid;
}

qint64 OAICustomerModel::getNumber() const {
    return m_number;
}
void OAICustomerModel::setNumber(const qint64 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICustomerModel::is_number_Set() const{
    return m_number_isSet;
}

bool OAICustomerModel::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAICustomerModel::getNumberOfEmployees() const {
    return m_number_of_employees;
}
void OAICustomerModel::setNumberOfEmployees(const qint32 &number_of_employees) {
    m_number_of_employees = number_of_employees;
    m_number_of_employees_isSet = true;
}

bool OAICustomerModel::is_number_of_employees_Set() const{
    return m_number_of_employees_isSet;
}

bool OAICustomerModel::is_number_of_employees_Valid() const{
    return m_number_of_employees_isValid;
}

double OAICustomerModel::getOverdueInterest() const {
    return m_overdue_interest;
}
void OAICustomerModel::setOverdueInterest(const double &overdue_interest) {
    m_overdue_interest = overdue_interest;
    m_overdue_interest_isSet = true;
}

bool OAICustomerModel::is_overdue_interest_Set() const{
    return m_overdue_interest_isSet;
}

bool OAICustomerModel::is_overdue_interest_Valid() const{
    return m_overdue_interest_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAICustomerModel::getOwner() const {
    return m_owner;
}
void OAICustomerModel::setOwner(const OAIUserWithFirstNameLastNameAndPhotoFileModel &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICustomerModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICustomerModel::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAICustomerModel::getPaymentTerm() const {
    return m_payment_term;
}
void OAICustomerModel::setPaymentTerm(const qint32 &payment_term) {
    m_payment_term = payment_term;
    m_payment_term_isSet = true;
}

bool OAICustomerModel::is_payment_term_Set() const{
    return m_payment_term_isSet;
}

bool OAICustomerModel::is_payment_term_Valid() const{
    return m_payment_term_isValid;
}

OAIModelWithName OAICustomerModel::getPricelist() const {
    return m_pricelist;
}
void OAICustomerModel::setPricelist(const OAIModelWithName &pricelist) {
    m_pricelist = pricelist;
    m_pricelist_isSet = true;
}

bool OAICustomerModel::is_pricelist_Set() const{
    return m_pricelist_isSet;
}

bool OAICustomerModel::is_pricelist_Valid() const{
    return m_pricelist_isValid;
}

OAIModelWithName OAICustomerModel::getTimezone() const {
    return m_timezone;
}
void OAICustomerModel::setTimezone(const OAIModelWithName &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICustomerModel::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICustomerModel::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAICustomerModel::getVatNumber() const {
    return m_vat_number;
}
void OAICustomerModel::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAICustomerModel::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAICustomerModel::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

QString OAICustomerModel::getWebsite() const {
    return m_website;
}
void OAICustomerModel::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICustomerModel::is_website_Set() const{
    return m_website_isSet;
}

bool OAICustomerModel::is_website_Valid() const{
    return m_website_isValid;
}

bool OAICustomerModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_invoice_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_invoice_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headquarter_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoicing_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kvk_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_employees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overdue_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricelist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
