/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountryModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountryModel::OAICountryModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountryModel::OAICountryModel() {
    this->initializeModel();
}

OAICountryModel::~OAICountryModel() {}

void OAICountryModel::initializeModel() {

    m_code2_isSet = false;
    m_code2_isValid = false;

    m_code3_isSet = false;
    m_code3_isValid = false;

    m_company_register_url_isSet = false;
    m_company_register_url_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_default_culture_isSet = false;
    m_default_culture_isValid = false;

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_english_name_isSet = false;
    m_english_name_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_has_regions_isSet = false;
    m_has_regions_isValid = false;

    m_is_in_eu_isSet = false;
    m_is_in_eu_isValid = false;

    m_is_registration_country_isSet = false;
    m_is_registration_country_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAICountryModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountryModel::fromJsonObject(QJsonObject json) {

    m_code2_isValid = ::OpenAPI::fromJsonValue(m_code2, json[QString("code2")]);
    m_code2_isSet = !json[QString("code2")].isNull() && m_code2_isValid;

    m_code3_isValid = ::OpenAPI::fromJsonValue(m_code3, json[QString("code3")]);
    m_code3_isSet = !json[QString("code3")].isNull() && m_code3_isValid;

    m_company_register_url_isValid = ::OpenAPI::fromJsonValue(m_company_register_url, json[QString("companyRegisterUrl")]);
    m_company_register_url_isSet = !json[QString("companyRegisterUrl")].isNull() && m_company_register_url_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_default_culture_isValid = ::OpenAPI::fromJsonValue(m_default_culture, json[QString("defaultCulture")]);
    m_default_culture_isSet = !json[QString("defaultCulture")].isNull() && m_default_culture_isValid;

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("defaultLanguage")]);
    m_default_language_isSet = !json[QString("defaultLanguage")].isNull() && m_default_language_isValid;

    m_english_name_isValid = ::OpenAPI::fromJsonValue(m_english_name, json[QString("englishName")]);
    m_english_name_isSet = !json[QString("englishName")].isNull() && m_english_name_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_has_regions_isValid = ::OpenAPI::fromJsonValue(m_has_regions, json[QString("hasRegions")]);
    m_has_regions_isSet = !json[QString("hasRegions")].isNull() && m_has_regions_isValid;

    m_is_in_eu_isValid = ::OpenAPI::fromJsonValue(m_is_in_eu, json[QString("isInEU")]);
    m_is_in_eu_isSet = !json[QString("isInEU")].isNull() && m_is_in_eu_isValid;

    m_is_registration_country_isValid = ::OpenAPI::fromJsonValue(m_is_registration_country, json[QString("isRegistrationCountry")]);
    m_is_registration_country_isSet = !json[QString("isRegistrationCountry")].isNull() && m_is_registration_country_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAICountryModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountryModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code2_isSet) {
        obj.insert(QString("code2"), ::OpenAPI::toJsonValue(m_code2));
    }
    if (m_code3_isSet) {
        obj.insert(QString("code3"), ::OpenAPI::toJsonValue(m_code3));
    }
    if (m_company_register_url_isSet) {
        obj.insert(QString("companyRegisterUrl"), ::OpenAPI::toJsonValue(m_company_register_url));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_default_culture_isSet) {
        obj.insert(QString("defaultCulture"), ::OpenAPI::toJsonValue(m_default_culture));
    }
    if (m_default_language.isSet()) {
        obj.insert(QString("defaultLanguage"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_english_name_isSet) {
        obj.insert(QString("englishName"), ::OpenAPI::toJsonValue(m_english_name));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_has_regions.isSet()) {
        obj.insert(QString("hasRegions"), ::OpenAPI::toJsonValue(m_has_regions));
    }
    if (m_is_in_eu_isSet) {
        obj.insert(QString("isInEU"), ::OpenAPI::toJsonValue(m_is_in_eu));
    }
    if (m_is_registration_country_isSet) {
        obj.insert(QString("isRegistrationCountry"), ::OpenAPI::toJsonValue(m_is_registration_country));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAICountryModel::getCode2() const {
    return m_code2;
}
void OAICountryModel::setCode2(const QString &code2) {
    m_code2 = code2;
    m_code2_isSet = true;
}

bool OAICountryModel::is_code2_Set() const{
    return m_code2_isSet;
}

bool OAICountryModel::is_code2_Valid() const{
    return m_code2_isValid;
}

QString OAICountryModel::getCode3() const {
    return m_code3;
}
void OAICountryModel::setCode3(const QString &code3) {
    m_code3 = code3;
    m_code3_isSet = true;
}

bool OAICountryModel::is_code3_Set() const{
    return m_code3_isSet;
}

bool OAICountryModel::is_code3_Valid() const{
    return m_code3_isValid;
}

QString OAICountryModel::getCompanyRegisterUrl() const {
    return m_company_register_url;
}
void OAICountryModel::setCompanyRegisterUrl(const QString &company_register_url) {
    m_company_register_url = company_register_url;
    m_company_register_url_isSet = true;
}

bool OAICountryModel::is_company_register_url_Set() const{
    return m_company_register_url_isSet;
}

bool OAICountryModel::is_company_register_url_Valid() const{
    return m_company_register_url_isValid;
}

OAICurrencyBaseModel OAICountryModel::getCurrency() const {
    return m_currency;
}
void OAICountryModel::setCurrency(const OAICurrencyBaseModel &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICountryModel::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICountryModel::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICountryModel::getDefaultCulture() const {
    return m_default_culture;
}
void OAICountryModel::setDefaultCulture(const QString &default_culture) {
    m_default_culture = default_culture;
    m_default_culture_isSet = true;
}

bool OAICountryModel::is_default_culture_Set() const{
    return m_default_culture_isSet;
}

bool OAICountryModel::is_default_culture_Valid() const{
    return m_default_culture_isValid;
}

OAICountryLanguage OAICountryModel::getDefaultLanguage() const {
    return m_default_language;
}
void OAICountryModel::setDefaultLanguage(const OAICountryLanguage &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAICountryModel::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAICountryModel::is_default_language_Valid() const{
    return m_default_language_isValid;
}

QString OAICountryModel::getEnglishName() const {
    return m_english_name;
}
void OAICountryModel::setEnglishName(const QString &english_name) {
    m_english_name = english_name;
    m_english_name_isSet = true;
}

bool OAICountryModel::is_english_name_Set() const{
    return m_english_name_isSet;
}

bool OAICountryModel::is_english_name_Valid() const{
    return m_english_name_isValid;
}

QString OAICountryModel::getGuid() const {
    return m_guid;
}
void OAICountryModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAICountryModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAICountryModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAICountryRegionsStatus OAICountryModel::getHasRegions() const {
    return m_has_regions;
}
void OAICountryModel::setHasRegions(const OAICountryRegionsStatus &has_regions) {
    m_has_regions = has_regions;
    m_has_regions_isSet = true;
}

bool OAICountryModel::is_has_regions_Set() const{
    return m_has_regions_isSet;
}

bool OAICountryModel::is_has_regions_Valid() const{
    return m_has_regions_isValid;
}

bool OAICountryModel::isIsInEu() const {
    return m_is_in_eu;
}
void OAICountryModel::setIsInEu(const bool &is_in_eu) {
    m_is_in_eu = is_in_eu;
    m_is_in_eu_isSet = true;
}

bool OAICountryModel::is_is_in_eu_Set() const{
    return m_is_in_eu_isSet;
}

bool OAICountryModel::is_is_in_eu_Valid() const{
    return m_is_in_eu_isValid;
}

bool OAICountryModel::isIsRegistrationCountry() const {
    return m_is_registration_country;
}
void OAICountryModel::setIsRegistrationCountry(const bool &is_registration_country) {
    m_is_registration_country = is_registration_country;
    m_is_registration_country_isSet = true;
}

bool OAICountryModel::is_is_registration_country_Set() const{
    return m_is_registration_country_isSet;
}

bool OAICountryModel::is_is_registration_country_Valid() const{
    return m_is_registration_country_isValid;
}

QString OAICountryModel::getName() const {
    return m_name;
}
void OAICountryModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountryModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountryModel::is_name_Valid() const{
    return m_name_isValid;
}

OAICountryTimezone OAICountryModel::getTimezone() const {
    return m_timezone;
}
void OAICountryModel::setTimezone(const OAICountryTimezone &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICountryModel::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICountryModel::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAICountryModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_register_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_english_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_eu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_registration_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountryModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
