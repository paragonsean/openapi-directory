/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoicesDeleteApi_H
#define OAI_OAIInvoicesDeleteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoicesDeleteApi : public QObject {
    Q_OBJECT

public:
    OAIInvoicesDeleteApi(const int timeOut = 0);
    ~OAIInvoicesDeleteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  set_as_non_billable bool [optional]
    */
    virtual void invoiceRowsDeleteInvoiceRow(const QString &guid, const ::OpenAPI::OptionalParam<bool> &set_as_non_billable = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void invoicesDeleteInvoice(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  project_guid QString [required]
    */
    virtual void invoicesDeleteProjectFromInvoice(const QString &guid, const QString &project_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectInvoiceSettingsDeleteProjectInvoiceSettings(const QString &guid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void invoiceRowsDeleteInvoiceRowCallback(OAIHttpRequestWorker *worker);
    void invoicesDeleteInvoiceCallback(OAIHttpRequestWorker *worker);
    void invoicesDeleteProjectFromInvoiceCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void invoiceRowsDeleteInvoiceRowSignal();
    void invoicesDeleteInvoiceSignal();
    void invoicesDeleteProjectFromInvoiceSignal();
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignal();


    void invoiceRowsDeleteInvoiceRowSignalFull(OAIHttpRequestWorker *worker);
    void invoicesDeleteInvoiceSignalFull(OAIHttpRequestWorker *worker);
    void invoicesDeleteProjectFromInvoiceSignalFull(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use invoiceRowsDeleteInvoiceRowSignalError() instead")
    void invoiceRowsDeleteInvoiceRowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsDeleteInvoiceRowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesDeleteInvoiceSignalError() instead")
    void invoicesDeleteInvoiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesDeleteInvoiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesDeleteProjectFromInvoiceSignalError() instead")
    void invoicesDeleteProjectFromInvoiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesDeleteProjectFromInvoiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalError() instead")
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use invoiceRowsDeleteInvoiceRowSignalErrorFull() instead")
    void invoiceRowsDeleteInvoiceRowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsDeleteInvoiceRowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesDeleteInvoiceSignalErrorFull() instead")
    void invoicesDeleteInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesDeleteInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesDeleteProjectFromInvoiceSignalErrorFull() instead")
    void invoicesDeleteProjectFromInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesDeleteProjectFromInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalErrorFull() instead")
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsDeleteProjectInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
