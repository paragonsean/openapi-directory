/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINoScopeApi_H
#define OAI_OAINoScopeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessTokenCredentials.h"
#include "OAIClientCredentials.h"
#include "OAIExceptionModel.h"
#include "OAIHttpFileElement.h"
#include "OAIPublicAuthenticationOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINoScopeApi : public QObject {
    Q_OBJECT

public:
    OAINoScopeApi(const int timeOut = 0);
    ~OAINoScopeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void heartBeatGetAuthorization();


    virtual void heartBeatGetDatabaseStatus();


    virtual void heartBeatGetServerStatus();

    /**
    * @param[in]  oai_access_token_credentials OAIAccessTokenCredentials [optional]
    */
    virtual void publicBearerAuthenticationGetAccessTokenJson(const ::OpenAPI::OptionalParam<OAIAccessTokenCredentials> &oai_access_token_credentials = ::OpenAPI::OptionalParam<OAIAccessTokenCredentials>());

    /**
    * @param[in]  body QString [optional]
    */
    virtual void publicBearerAuthenticationGetAccessTokenTokenFromRefreshToken(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  response_type QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  redirect_uri QString [optional]
    * @param[in]  scope QString [optional]
    */
    virtual void publicBearerAuthenticationGetAuthorizationCode(const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_client_credentials OAIClientCredentials [optional]
    */
    virtual void publicBearerAuthenticationGetLoginToken(const ::OpenAPI::OptionalParam<OAIClientCredentials> &oai_client_credentials = ::OpenAPI::OptionalParam<OAIClientCredentials>());

    /**
    * @param[in]  body QString [optional]
    */
    virtual void publicBearerAuthenticationLogout(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void heartBeatGetAuthorizationCallback(OAIHttpRequestWorker *worker);
    void heartBeatGetDatabaseStatusCallback(OAIHttpRequestWorker *worker);
    void heartBeatGetServerStatusCallback(OAIHttpRequestWorker *worker);
    void publicBearerAuthenticationGetAccessTokenJsonCallback(OAIHttpRequestWorker *worker);
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenCallback(OAIHttpRequestWorker *worker);
    void publicBearerAuthenticationGetAuthorizationCodeCallback(OAIHttpRequestWorker *worker);
    void publicBearerAuthenticationGetLoginTokenCallback(OAIHttpRequestWorker *worker);
    void publicBearerAuthenticationLogoutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void heartBeatGetAuthorizationSignal();
    void heartBeatGetDatabaseStatusSignal(OAIHttpFileElement summary);
    void heartBeatGetServerStatusSignal(OAIHttpFileElement summary);
    void publicBearerAuthenticationGetAccessTokenJsonSignal(OAIPublicAuthenticationOutputModel summary);
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignal(OAIPublicAuthenticationOutputModel summary);
    void publicBearerAuthenticationGetAuthorizationCodeSignal(OAIExceptionModel summary);
    void publicBearerAuthenticationGetLoginTokenSignal(OAIPublicAuthenticationOutputModel summary);
    void publicBearerAuthenticationLogoutSignal(OAIHttpFileElement summary);


    void heartBeatGetAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void heartBeatGetDatabaseStatusSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void heartBeatGetServerStatusSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void publicBearerAuthenticationGetAccessTokenJsonSignalFull(OAIHttpRequestWorker *worker, OAIPublicAuthenticationOutputModel summary);
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalFull(OAIHttpRequestWorker *worker, OAIPublicAuthenticationOutputModel summary);
    void publicBearerAuthenticationGetAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker, OAIExceptionModel summary);
    void publicBearerAuthenticationGetLoginTokenSignalFull(OAIHttpRequestWorker *worker, OAIPublicAuthenticationOutputModel summary);
    void publicBearerAuthenticationLogoutSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use heartBeatGetAuthorizationSignalError() instead")
    void heartBeatGetAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatGetAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartBeatGetDatabaseStatusSignalError() instead")
    void heartBeatGetDatabaseStatusSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatGetDatabaseStatusSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartBeatGetServerStatusSignalError() instead")
    void heartBeatGetServerStatusSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatGetServerStatusSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetAccessTokenJsonSignalError() instead")
    void publicBearerAuthenticationGetAccessTokenJsonSignalE(OAIPublicAuthenticationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetAccessTokenJsonSignalError(OAIPublicAuthenticationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalError() instead")
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalE(OAIPublicAuthenticationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalError(OAIPublicAuthenticationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetAuthorizationCodeSignalError() instead")
    void publicBearerAuthenticationGetAuthorizationCodeSignalE(OAIExceptionModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetAuthorizationCodeSignalError(OAIExceptionModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetLoginTokenSignalError() instead")
    void publicBearerAuthenticationGetLoginTokenSignalE(OAIPublicAuthenticationOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetLoginTokenSignalError(OAIPublicAuthenticationOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationLogoutSignalError() instead")
    void publicBearerAuthenticationLogoutSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationLogoutSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use heartBeatGetAuthorizationSignalErrorFull() instead")
    void heartBeatGetAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatGetAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartBeatGetDatabaseStatusSignalErrorFull() instead")
    void heartBeatGetDatabaseStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatGetDatabaseStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartBeatGetServerStatusSignalErrorFull() instead")
    void heartBeatGetServerStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatGetServerStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetAccessTokenJsonSignalErrorFull() instead")
    void publicBearerAuthenticationGetAccessTokenJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetAccessTokenJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalErrorFull() instead")
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetAuthorizationCodeSignalErrorFull() instead")
    void publicBearerAuthenticationGetAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationGetLoginTokenSignalErrorFull() instead")
    void publicBearerAuthenticationGetLoginTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationGetLoginTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicBearerAuthenticationLogoutSignalErrorFull() instead")
    void publicBearerAuthenticationLogoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicBearerAuthenticationLogoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
