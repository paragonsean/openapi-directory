/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectRecurringFeeRuleOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectRecurringFeeRuleOutputModel::OAIProjectRecurringFeeRuleOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectRecurringFeeRuleOutputModel::OAIProjectRecurringFeeRuleOutputModel() {
    this->initializeModel();
}

OAIProjectRecurringFeeRuleOutputModel::~OAIProjectRecurringFeeRuleOutputModel() {}

void OAIProjectRecurringFeeRuleOutputModel::initializeModel() {

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_period_start_date_isSet = false;
    m_display_period_start_date_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_generated_times_isSet = false;
    m_generated_times_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_has_volume_pricing_isSet = false;
    m_has_volume_pricing_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_recurrence_end_date_isSet = false;
    m_recurrence_end_date_isValid = false;

    m_recurrence_end_type_isSet = false;
    m_recurrence_end_type_isValid = false;

    m_recurrence_start_date_isSet = false;
    m_recurrence_start_date_isValid = false;

    m_recurrence_times_isSet = false;
    m_recurrence_times_isValid = false;

    m_recurring_sales_account_isSet = false;
    m_recurring_sales_account_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIProjectRecurringFeeRuleOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectRecurringFeeRuleOutputModel::fromJsonObject(QJsonObject json) {

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_display_period_start_date, json[QString("displayPeriodStartDate")]);
    m_display_period_start_date_isSet = !json[QString("displayPeriodStartDate")].isNull() && m_display_period_start_date_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_generated_times_isValid = ::OpenAPI::fromJsonValue(m_generated_times, json[QString("generatedTimes")]);
    m_generated_times_isSet = !json[QString("generatedTimes")].isNull() && m_generated_times_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_has_volume_pricing_isValid = ::OpenAPI::fromJsonValue(m_has_volume_pricing, json[QString("hasVolumePricing")]);
    m_has_volume_pricing_isSet = !json[QString("hasVolumePricing")].isNull() && m_has_volume_pricing_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_recurrence_end_date_isValid = ::OpenAPI::fromJsonValue(m_recurrence_end_date, json[QString("recurrenceEndDate")]);
    m_recurrence_end_date_isSet = !json[QString("recurrenceEndDate")].isNull() && m_recurrence_end_date_isValid;

    m_recurrence_end_type_isValid = ::OpenAPI::fromJsonValue(m_recurrence_end_type, json[QString("recurrenceEndType")]);
    m_recurrence_end_type_isSet = !json[QString("recurrenceEndType")].isNull() && m_recurrence_end_type_isValid;

    m_recurrence_start_date_isValid = ::OpenAPI::fromJsonValue(m_recurrence_start_date, json[QString("recurrenceStartDate")]);
    m_recurrence_start_date_isSet = !json[QString("recurrenceStartDate")].isNull() && m_recurrence_start_date_isValid;

    m_recurrence_times_isValid = ::OpenAPI::fromJsonValue(m_recurrence_times, json[QString("recurrenceTimes")]);
    m_recurrence_times_isSet = !json[QString("recurrenceTimes")].isNull() && m_recurrence_times_isValid;

    m_recurring_sales_account_isValid = ::OpenAPI::fromJsonValue(m_recurring_sales_account, json[QString("recurringSalesAccount")]);
    m_recurring_sales_account_isSet = !json[QString("recurringSalesAccount")].isNull() && m_recurring_sales_account_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIProjectRecurringFeeRuleOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectRecurringFeeRuleOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_center.isSet()) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_period_start_date_isSet) {
        obj.insert(QString("displayPeriodStartDate"), ::OpenAPI::toJsonValue(m_display_period_start_date));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_generated_times_isSet) {
        obj.insert(QString("generatedTimes"), ::OpenAPI::toJsonValue(m_generated_times));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_has_volume_pricing_isSet) {
        obj.insert(QString("hasVolumePricing"), ::OpenAPI::toJsonValue(m_has_volume_pricing));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_type.isSet()) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_recurrence_end_date_isSet) {
        obj.insert(QString("recurrenceEndDate"), ::OpenAPI::toJsonValue(m_recurrence_end_date));
    }
    if (m_recurrence_end_type.isSet()) {
        obj.insert(QString("recurrenceEndType"), ::OpenAPI::toJsonValue(m_recurrence_end_type));
    }
    if (m_recurrence_start_date_isSet) {
        obj.insert(QString("recurrenceStartDate"), ::OpenAPI::toJsonValue(m_recurrence_start_date));
    }
    if (m_recurrence_times_isSet) {
        obj.insert(QString("recurrenceTimes"), ::OpenAPI::toJsonValue(m_recurrence_times));
    }
    if (m_recurring_sales_account.isSet()) {
        obj.insert(QString("recurringSalesAccount"), ::OpenAPI::toJsonValue(m_recurring_sales_account));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

OAIProjectCostCenterSubModel OAIProjectRecurringFeeRuleOutputModel::getCostCenter() const {
    return m_cost_center;
}
void OAIProjectRecurringFeeRuleOutputModel::setCostCenter(const OAIProjectCostCenterSubModel &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectRecurringFeeRuleOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProjectRecurringFeeRuleOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProjectRecurringFeeRuleOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectRecurringFeeRuleOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIProjectFeeCustomerSubModel OAIProjectRecurringFeeRuleOutputModel::getCustomer() const {
    return m_customer;
}
void OAIProjectRecurringFeeRuleOutputModel::setCustomer(const OAIProjectFeeCustomerSubModel &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIProjectRecurringFeeRuleOutputModel::getDescription() const {
    return m_description;
}
void OAIProjectRecurringFeeRuleOutputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIProjectRecurringFeeRuleOutputModel::getDisplayPeriodStartDate() const {
    return m_display_period_start_date;
}
void OAIProjectRecurringFeeRuleOutputModel::setDisplayPeriodStartDate(const QDate &display_period_start_date) {
    m_display_period_start_date = display_period_start_date;
    m_display_period_start_date_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_display_period_start_date_Set() const{
    return m_display_period_start_date_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_display_period_start_date_Valid() const{
    return m_display_period_start_date_isValid;
}

qint32 OAIProjectRecurringFeeRuleOutputModel::getFrequency() const {
    return m_frequency;
}
void OAIProjectRecurringFeeRuleOutputModel::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint32 OAIProjectRecurringFeeRuleOutputModel::getGeneratedTimes() const {
    return m_generated_times;
}
void OAIProjectRecurringFeeRuleOutputModel::setGeneratedTimes(const qint32 &generated_times) {
    m_generated_times = generated_times;
    m_generated_times_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_generated_times_Set() const{
    return m_generated_times_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_generated_times_Valid() const{
    return m_generated_times_isValid;
}

QString OAIProjectRecurringFeeRuleOutputModel::getGuid() const {
    return m_guid;
}
void OAIProjectRecurringFeeRuleOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIProjectRecurringFeeRuleOutputModel::isHasVolumePricing() const {
    return m_has_volume_pricing;
}
void OAIProjectRecurringFeeRuleOutputModel::setHasVolumePricing(const bool &has_volume_pricing) {
    m_has_volume_pricing = has_volume_pricing;
    m_has_volume_pricing_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_has_volume_pricing_Set() const{
    return m_has_volume_pricing_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_has_volume_pricing_Valid() const{
    return m_has_volume_pricing_isValid;
}

bool OAIProjectRecurringFeeRuleOutputModel::isIsActive() const {
    return m_is_active;
}
void OAIProjectRecurringFeeRuleOutputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProjectRecurringFeeRuleOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProjectRecurringFeeRuleOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProjectRecurringFeeRuleOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProjectRecurringFeeRuleOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIProjectRecurringFeeRuleOutputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIProjectRecurringFeeRuleOutputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIProjectRecurringFeeRuleOutputModel::getName() const {
    return m_name;
}
void OAIProjectRecurringFeeRuleOutputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIModelWithName OAIProjectRecurringFeeRuleOutputModel::getPhase() const {
    return m_phase;
}
void OAIProjectRecurringFeeRuleOutputModel::setPhase(const OAIModelWithName &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

OAIProjectFeeProductSubModel OAIProjectRecurringFeeRuleOutputModel::getProduct() const {
    return m_product;
}
void OAIProjectRecurringFeeRuleOutputModel::setProduct(const OAIProjectFeeProductSubModel &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_product_Set() const{
    return m_product_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_product_Valid() const{
    return m_product_isValid;
}

OAIProductType OAIProjectRecurringFeeRuleOutputModel::getProductType() const {
    return m_product_type;
}
void OAIProjectRecurringFeeRuleOutputModel::setProductType(const OAIProductType &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_product_type_Valid() const{
    return m_product_type_isValid;
}

OAIProjectFeeProjectSubModel OAIProjectRecurringFeeRuleOutputModel::getProject() const {
    return m_project;
}
void OAIProjectRecurringFeeRuleOutputModel::setProject(const OAIProjectFeeProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

double OAIProjectRecurringFeeRuleOutputModel::getQuantity() const {
    return m_quantity;
}
void OAIProjectRecurringFeeRuleOutputModel::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QDate OAIProjectRecurringFeeRuleOutputModel::getRecurrenceEndDate() const {
    return m_recurrence_end_date;
}
void OAIProjectRecurringFeeRuleOutputModel::setRecurrenceEndDate(const QDate &recurrence_end_date) {
    m_recurrence_end_date = recurrence_end_date;
    m_recurrence_end_date_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_end_date_Set() const{
    return m_recurrence_end_date_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_end_date_Valid() const{
    return m_recurrence_end_date_isValid;
}

OAIRecurrenceEndTypes OAIProjectRecurringFeeRuleOutputModel::getRecurrenceEndType() const {
    return m_recurrence_end_type;
}
void OAIProjectRecurringFeeRuleOutputModel::setRecurrenceEndType(const OAIRecurrenceEndTypes &recurrence_end_type) {
    m_recurrence_end_type = recurrence_end_type;
    m_recurrence_end_type_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_end_type_Set() const{
    return m_recurrence_end_type_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_end_type_Valid() const{
    return m_recurrence_end_type_isValid;
}

QDate OAIProjectRecurringFeeRuleOutputModel::getRecurrenceStartDate() const {
    return m_recurrence_start_date;
}
void OAIProjectRecurringFeeRuleOutputModel::setRecurrenceStartDate(const QDate &recurrence_start_date) {
    m_recurrence_start_date = recurrence_start_date;
    m_recurrence_start_date_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_start_date_Set() const{
    return m_recurrence_start_date_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_start_date_Valid() const{
    return m_recurrence_start_date_isValid;
}

qint32 OAIProjectRecurringFeeRuleOutputModel::getRecurrenceTimes() const {
    return m_recurrence_times;
}
void OAIProjectRecurringFeeRuleOutputModel::setRecurrenceTimes(const qint32 &recurrence_times) {
    m_recurrence_times = recurrence_times;
    m_recurrence_times_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_times_Set() const{
    return m_recurrence_times_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurrence_times_Valid() const{
    return m_recurrence_times_isValid;
}

OAIProjectSalesAccountSubModel OAIProjectRecurringFeeRuleOutputModel::getRecurringSalesAccount() const {
    return m_recurring_sales_account;
}
void OAIProjectRecurringFeeRuleOutputModel::setRecurringSalesAccount(const OAIProjectSalesAccountSubModel &recurring_sales_account) {
    m_recurring_sales_account = recurring_sales_account;
    m_recurring_sales_account_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurring_sales_account_Set() const{
    return m_recurring_sales_account_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_recurring_sales_account_Valid() const{
    return m_recurring_sales_account_isValid;
}

OAIProjectSalesAccountSubModel OAIProjectRecurringFeeRuleOutputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIProjectRecurringFeeRuleOutputModel::setSalesAccount(const OAIProjectSalesAccountSubModel &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIMoneyOutputModel OAIProjectRecurringFeeRuleOutputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIProjectRecurringFeeRuleOutputModel::setUnitCost(const OAIMoneyOutputModel &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyOutputModel OAIProjectRecurringFeeRuleOutputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProjectRecurringFeeRuleOutputModel::setUnitPrice(const OAIMoneyOutputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIUserSubModel OAIProjectRecurringFeeRuleOutputModel::getUser() const {
    return m_user;
}
void OAIProjectRecurringFeeRuleOutputModel::setUser(const OAIUserSubModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_user_Valid() const{
    return m_user_isValid;
}

double OAIProjectRecurringFeeRuleOutputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIProjectRecurringFeeRuleOutputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIProjectRecurringFeeRuleOutputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIProjectRecurringFeeRuleOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_times_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_volume_pricing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_end_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_times_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectRecurringFeeRuleOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
