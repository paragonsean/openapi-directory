/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketSegmentModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketSegmentModel::OAIMarketSegmentModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketSegmentModel::OAIMarketSegmentModel() {
    this->initializeModel();
}

OAIMarketSegmentModel::~OAIMarketSegmentModel() {}

void OAIMarketSegmentModel::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_market_segment_isSet = false;
    m_parent_market_segment_isValid = false;
}

void OAIMarketSegmentModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketSegmentModel::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_market_segment_isValid = ::OpenAPI::fromJsonValue(m_parent_market_segment, json[QString("parentMarketSegment")]);
    m_parent_market_segment_isSet = !json[QString("parentMarketSegment")].isNull() && m_parent_market_segment_isValid;
}

QString OAIMarketSegmentModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketSegmentModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_market_segment.isSet()) {
        obj.insert(QString("parentMarketSegment"), ::OpenAPI::toJsonValue(m_parent_market_segment));
    }
    return obj;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIMarketSegmentModel::getCreatedBy() const {
    return m_created_by;
}
void OAIMarketSegmentModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIMarketSegmentModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIMarketSegmentModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIMarketSegmentModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIMarketSegmentModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIMarketSegmentModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIMarketSegmentModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIMarketSegmentModel::getGuid() const {
    return m_guid;
}
void OAIMarketSegmentModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIMarketSegmentModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIMarketSegmentModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIMarketSegmentModel::isIsActive() const {
    return m_is_active;
}
void OAIMarketSegmentModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIMarketSegmentModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIMarketSegmentModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIMarketSegmentModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIMarketSegmentModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIMarketSegmentModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIMarketSegmentModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIMarketSegmentModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIMarketSegmentModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIMarketSegmentModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIMarketSegmentModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIMarketSegmentModel::getName() const {
    return m_name;
}
void OAIMarketSegmentModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarketSegmentModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarketSegmentModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIModelWithName OAIMarketSegmentModel::getParentMarketSegment() const {
    return m_parent_market_segment;
}
void OAIMarketSegmentModel::setParentMarketSegment(const OAIModelWithName &parent_market_segment) {
    m_parent_market_segment = parent_market_segment;
    m_parent_market_segment_isSet = true;
}

bool OAIMarketSegmentModel::is_parent_market_segment_Set() const{
    return m_parent_market_segment_isSet;
}

bool OAIMarketSegmentModel::is_parent_market_segment_Valid() const{
    return m_parent_market_segment_isValid;
}

bool OAIMarketSegmentModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_market_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketSegmentModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
