/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlatRateOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlatRateOutputModel::OAIFlatRateOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlatRateOutputModel::OAIFlatRateOutputModel() {
    this->initializeModel();
}

OAIFlatRateOutputModel::~OAIFlatRateOutputModel() {}

void OAIFlatRateOutputModel::initializeModel() {

    m_bill_additional_hours_isSet = false;
    m_bill_additional_hours_isValid = false;

    m_billing_schedule_isSet = false;
    m_billing_schedule_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_includes_hours_isSet = false;
    m_includes_hours_isValid = false;

    m_invoice_guid_isSet = false;
    m_invoice_guid_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_planned_billing_date_isSet = false;
    m_planned_billing_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_per_additional_hour_isSet = false;
    m_price_per_additional_hour_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIFlatRateOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlatRateOutputModel::fromJsonObject(QJsonObject json) {

    m_bill_additional_hours_isValid = ::OpenAPI::fromJsonValue(m_bill_additional_hours, json[QString("billAdditionalHours")]);
    m_bill_additional_hours_isSet = !json[QString("billAdditionalHours")].isNull() && m_bill_additional_hours_isValid;

    m_billing_schedule_isValid = ::OpenAPI::fromJsonValue(m_billing_schedule, json[QString("billingSchedule")]);
    m_billing_schedule_isSet = !json[QString("billingSchedule")].isNull() && m_billing_schedule_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_includes_hours_isValid = ::OpenAPI::fromJsonValue(m_includes_hours, json[QString("includesHours")]);
    m_includes_hours_isSet = !json[QString("includesHours")].isNull() && m_includes_hours_isValid;

    m_invoice_guid_isValid = ::OpenAPI::fromJsonValue(m_invoice_guid, json[QString("invoiceGuid")]);
    m_invoice_guid_isSet = !json[QString("invoiceGuid")].isNull() && m_invoice_guid_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_planned_billing_date_isValid = ::OpenAPI::fromJsonValue(m_planned_billing_date, json[QString("plannedBillingDate")]);
    m_planned_billing_date_isSet = !json[QString("plannedBillingDate")].isNull() && m_planned_billing_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_per_additional_hour_isValid = ::OpenAPI::fromJsonValue(m_price_per_additional_hour, json[QString("pricePerAdditionalHour")]);
    m_price_per_additional_hour_isSet = !json[QString("pricePerAdditionalHour")].isNull() && m_price_per_additional_hour_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIFlatRateOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlatRateOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_bill_additional_hours_isSet) {
        obj.insert(QString("billAdditionalHours"), ::OpenAPI::toJsonValue(m_bill_additional_hours));
    }
    if (m_billing_schedule.isSet()) {
        obj.insert(QString("billingSchedule"), ::OpenAPI::toJsonValue(m_billing_schedule));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_includes_hours_isSet) {
        obj.insert(QString("includesHours"), ::OpenAPI::toJsonValue(m_includes_hours));
    }
    if (m_invoice_guid_isSet) {
        obj.insert(QString("invoiceGuid"), ::OpenAPI::toJsonValue(m_invoice_guid));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_planned_billing_date_isSet) {
        obj.insert(QString("plannedBillingDate"), ::OpenAPI::toJsonValue(m_planned_billing_date));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_per_additional_hour.isSet()) {
        obj.insert(QString("pricePerAdditionalHour"), ::OpenAPI::toJsonValue(m_price_per_additional_hour));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

bool OAIFlatRateOutputModel::isBillAdditionalHours() const {
    return m_bill_additional_hours;
}
void OAIFlatRateOutputModel::setBillAdditionalHours(const bool &bill_additional_hours) {
    m_bill_additional_hours = bill_additional_hours;
    m_bill_additional_hours_isSet = true;
}

bool OAIFlatRateOutputModel::is_bill_additional_hours_Set() const{
    return m_bill_additional_hours_isSet;
}

bool OAIFlatRateOutputModel::is_bill_additional_hours_Valid() const{
    return m_bill_additional_hours_isValid;
}

OAIBillingScheduleType OAIFlatRateOutputModel::getBillingSchedule() const {
    return m_billing_schedule;
}
void OAIFlatRateOutputModel::setBillingSchedule(const OAIBillingScheduleType &billing_schedule) {
    m_billing_schedule = billing_schedule;
    m_billing_schedule_isSet = true;
}

bool OAIFlatRateOutputModel::is_billing_schedule_Set() const{
    return m_billing_schedule_isSet;
}

bool OAIFlatRateOutputModel::is_billing_schedule_Valid() const{
    return m_billing_schedule_isValid;
}

QString OAIFlatRateOutputModel::getGuid() const {
    return m_guid;
}
void OAIFlatRateOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIFlatRateOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIFlatRateOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

double OAIFlatRateOutputModel::getIncludesHours() const {
    return m_includes_hours;
}
void OAIFlatRateOutputModel::setIncludesHours(const double &includes_hours) {
    m_includes_hours = includes_hours;
    m_includes_hours_isSet = true;
}

bool OAIFlatRateOutputModel::is_includes_hours_Set() const{
    return m_includes_hours_isSet;
}

bool OAIFlatRateOutputModel::is_includes_hours_Valid() const{
    return m_includes_hours_isValid;
}

QString OAIFlatRateOutputModel::getInvoiceGuid() const {
    return m_invoice_guid;
}
void OAIFlatRateOutputModel::setInvoiceGuid(const QString &invoice_guid) {
    m_invoice_guid = invoice_guid;
    m_invoice_guid_isSet = true;
}

bool OAIFlatRateOutputModel::is_invoice_guid_Set() const{
    return m_invoice_guid_isSet;
}

bool OAIFlatRateOutputModel::is_invoice_guid_Valid() const{
    return m_invoice_guid_isValid;
}

OAIModelBaseWithRequiredGuid OAIFlatRateOutputModel::getPhase() const {
    return m_phase;
}
void OAIFlatRateOutputModel::setPhase(const OAIModelBaseWithRequiredGuid &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIFlatRateOutputModel::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIFlatRateOutputModel::is_phase_Valid() const{
    return m_phase_isValid;
}

QDate OAIFlatRateOutputModel::getPlannedBillingDate() const {
    return m_planned_billing_date;
}
void OAIFlatRateOutputModel::setPlannedBillingDate(const QDate &planned_billing_date) {
    m_planned_billing_date = planned_billing_date;
    m_planned_billing_date_isSet = true;
}

bool OAIFlatRateOutputModel::is_planned_billing_date_Set() const{
    return m_planned_billing_date_isSet;
}

bool OAIFlatRateOutputModel::is_planned_billing_date_Valid() const{
    return m_planned_billing_date_isValid;
}

OAIMoneyOutputModel OAIFlatRateOutputModel::getPrice() const {
    return m_price;
}
void OAIFlatRateOutputModel::setPrice(const OAIMoneyOutputModel &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFlatRateOutputModel::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFlatRateOutputModel::is_price_Valid() const{
    return m_price_isValid;
}

OAIMoneyOutputModel OAIFlatRateOutputModel::getPricePerAdditionalHour() const {
    return m_price_per_additional_hour;
}
void OAIFlatRateOutputModel::setPricePerAdditionalHour(const OAIMoneyOutputModel &price_per_additional_hour) {
    m_price_per_additional_hour = price_per_additional_hour;
    m_price_per_additional_hour_isSet = true;
}

bool OAIFlatRateOutputModel::is_price_per_additional_hour_Set() const{
    return m_price_per_additional_hour_isSet;
}

bool OAIFlatRateOutputModel::is_price_per_additional_hour_Valid() const{
    return m_price_per_additional_hour_isValid;
}

OAIFlatrateProjectSubModel OAIFlatRateOutputModel::getProject() const {
    return m_project;
}
void OAIFlatRateOutputModel::setProject(const OAIFlatrateProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIFlatRateOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIFlatRateOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIFlatRateOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bill_additional_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_additional_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlatRateOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
