/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICountryModel.h
 *
 * 
 */

#ifndef OAICountryModel_H
#define OAICountryModel_H

#include <QJsonObject>

#include "OAICountryLanguage.h"
#include "OAICountryRegionsStatus.h"
#include "OAICountryTimezone.h"
#include "OAICurrencyBaseModel.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICurrencyBaseModel;
class OAICountryLanguage;
class OAICountryTimezone;

class OAICountryModel : public OAIObject {
public:
    OAICountryModel();
    OAICountryModel(QString json);
    ~OAICountryModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCode2() const;
    void setCode2(const QString &code2);
    bool is_code2_Set() const;
    bool is_code2_Valid() const;

    QString getCode3() const;
    void setCode3(const QString &code3);
    bool is_code3_Set() const;
    bool is_code3_Valid() const;

    QString getCompanyRegisterUrl() const;
    void setCompanyRegisterUrl(const QString &company_register_url);
    bool is_company_register_url_Set() const;
    bool is_company_register_url_Valid() const;

    OAICurrencyBaseModel getCurrency() const;
    void setCurrency(const OAICurrencyBaseModel &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDefaultCulture() const;
    void setDefaultCulture(const QString &default_culture);
    bool is_default_culture_Set() const;
    bool is_default_culture_Valid() const;

    OAICountryLanguage getDefaultLanguage() const;
    void setDefaultLanguage(const OAICountryLanguage &default_language);
    bool is_default_language_Set() const;
    bool is_default_language_Valid() const;

    QString getEnglishName() const;
    void setEnglishName(const QString &english_name);
    bool is_english_name_Set() const;
    bool is_english_name_Valid() const;

    QString getGuid() const;
    void setGuid(const QString &guid);
    bool is_guid_Set() const;
    bool is_guid_Valid() const;

    OAICountryRegionsStatus getHasRegions() const;
    void setHasRegions(const OAICountryRegionsStatus &has_regions);
    bool is_has_regions_Set() const;
    bool is_has_regions_Valid() const;

    bool isIsInEu() const;
    void setIsInEu(const bool &is_in_eu);
    bool is_is_in_eu_Set() const;
    bool is_is_in_eu_Valid() const;

    bool isIsRegistrationCountry() const;
    void setIsRegistrationCountry(const bool &is_registration_country);
    bool is_is_registration_country_Set() const;
    bool is_is_registration_country_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICountryTimezone getTimezone() const;
    void setTimezone(const OAICountryTimezone &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_code2;
    bool m_code2_isSet;
    bool m_code2_isValid;

    QString m_code3;
    bool m_code3_isSet;
    bool m_code3_isValid;

    QString m_company_register_url;
    bool m_company_register_url_isSet;
    bool m_company_register_url_isValid;

    OAICurrencyBaseModel m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_default_culture;
    bool m_default_culture_isSet;
    bool m_default_culture_isValid;

    OAICountryLanguage m_default_language;
    bool m_default_language_isSet;
    bool m_default_language_isValid;

    QString m_english_name;
    bool m_english_name_isSet;
    bool m_english_name_isValid;

    QString m_guid;
    bool m_guid_isSet;
    bool m_guid_isValid;

    OAICountryRegionsStatus m_has_regions;
    bool m_has_regions_isSet;
    bool m_has_regions_isValid;

    bool m_is_in_eu;
    bool m_is_in_eu_isSet;
    bool m_is_in_eu_isValid;

    bool m_is_registration_country;
    bool m_is_registration_country_isSet;
    bool m_is_registration_country_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICountryTimezone m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICountryModel)

#endif // OAICountryModel_H
