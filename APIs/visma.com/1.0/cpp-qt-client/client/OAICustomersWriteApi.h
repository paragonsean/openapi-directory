/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersWriteApi_H
#define OAI_OAICustomersWriteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddressModel.h"
#include "OAIContactCommunicationModel.h"
#include "OAIContactKeywordModel.h"
#include "OAIContactModel.h"
#include "OAICustomerCountrySettingsInputModel.h"
#include "OAICustomerCountrySettingsOutputModel.h"
#include "OAICustomerCustomValueModel.h"
#include "OAICustomerMarketSegmentModel.h"
#include "OAICustomerModel.h"
#include "OAICustomerSalesNoteInputModel.h"
#include "OAICustomerSalesNoteOutputModel.h"
#include "OAIExceptionModel.h"
#include "OAIPatchOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersWriteApi : public QObject {
    Q_OBJECT

public:
    OAICustomersWriteApi(const int timeOut = 0);
    ~OAICustomersWriteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void addressesPatchAddress(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  oai_address_model OAIAddressModel [optional]
    */
    virtual void addressesPostCustomerAddress(const QString &customer_guid, const ::OpenAPI::OptionalParam<OAIAddressModel> &oai_address_model = ::OpenAPI::OptionalParam<OAIAddressModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void contactCommunicationsPatchContactCommunication(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_contact_communication_model OAIContactCommunicationModel [optional]
    */
    virtual void contactCommunicationsPostContactCommunication(const ::OpenAPI::OptionalParam<OAIContactCommunicationModel> &oai_contact_communication_model = ::OpenAPI::OptionalParam<OAIContactCommunicationModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void contactsPatchContact(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_contact_model OAIContactModel [optional]
    */
    virtual void contactsPostContact(const ::OpenAPI::OptionalParam<OAIContactModel> &oai_contact_model = ::OpenAPI::OptionalParam<OAIContactModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void customerCountrySettingsPatchCustomerCountrySettings(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_customer_country_settings_input_model OAICustomerCountrySettingsInputModel [optional]
    */
    virtual void customerCountrySettingsPostCustomerCountrySettings(const ::OpenAPI::OptionalParam<OAICustomerCountrySettingsInputModel> &oai_customer_country_settings_input_model = ::OpenAPI::OptionalParam<OAICustomerCountrySettingsInputModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void customerCustomValuesPatchCustomerCustomValue(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_customer_custom_value_model OAICustomerCustomValueModel [optional]
    */
    virtual void customerCustomValuesPostCustomerCustomValue(const ::OpenAPI::OptionalParam<OAICustomerCustomValueModel> &oai_customer_custom_value_model = ::OpenAPI::OptionalParam<OAICustomerCustomValueModel>());

    /**
    * @param[in]  oai_customer_market_segment_model OAICustomerMarketSegmentModel [optional]
    */
    virtual void customerMarketSegmentsPostCustomerMarketSegment(const ::OpenAPI::OptionalParam<OAICustomerMarketSegmentModel> &oai_customer_market_segment_model = ::OpenAPI::OptionalParam<OAICustomerMarketSegmentModel>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void customersPatchCustomer(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_customer_model OAICustomerModel [optional]
    */
    virtual void customersPostCustomer(const ::OpenAPI::OptionalParam<OAICustomerModel> &oai_customer_model = ::OpenAPI::OptionalParam<OAICustomerModel>());

    /**
    * @param[in]  contact_guid QString [required]
    * @param[in]  guid QString [required]
    */
    virtual void keywordsLinkKeywordToContact(const QString &contact_guid, const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  oai_patch_operation QList<OAIPatchOperation> [optional]
    */
    virtual void salesNotesPatchCustomerSalesNote(const QString &guid, const ::OpenAPI::OptionalParam<QList<OAIPatchOperation>> &oai_patch_operation = ::OpenAPI::OptionalParam<QList<OAIPatchOperation>>());

    /**
    * @param[in]  oai_customer_sales_note_input_model OAICustomerSalesNoteInputModel [optional]
    */
    virtual void salesNotesPostCustomerSalesNotes(const ::OpenAPI::OptionalParam<OAICustomerSalesNoteInputModel> &oai_customer_sales_note_input_model = ::OpenAPI::OptionalParam<OAICustomerSalesNoteInputModel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addressesPatchAddressCallback(OAIHttpRequestWorker *worker);
    void addressesPostCustomerAddressCallback(OAIHttpRequestWorker *worker);
    void contactCommunicationsPatchContactCommunicationCallback(OAIHttpRequestWorker *worker);
    void contactCommunicationsPostContactCommunicationCallback(OAIHttpRequestWorker *worker);
    void contactsPatchContactCallback(OAIHttpRequestWorker *worker);
    void contactsPostContactCallback(OAIHttpRequestWorker *worker);
    void customerCountrySettingsPatchCustomerCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void customerCountrySettingsPostCustomerCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void customerCustomValuesPatchCustomerCustomValueCallback(OAIHttpRequestWorker *worker);
    void customerCustomValuesPostCustomerCustomValueCallback(OAIHttpRequestWorker *worker);
    void customerMarketSegmentsPostCustomerMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void customersPatchCustomerCallback(OAIHttpRequestWorker *worker);
    void customersPostCustomerCallback(OAIHttpRequestWorker *worker);
    void keywordsLinkKeywordToContactCallback(OAIHttpRequestWorker *worker);
    void salesNotesPatchCustomerSalesNoteCallback(OAIHttpRequestWorker *worker);
    void salesNotesPostCustomerSalesNotesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addressesPatchAddressSignal(QList<OAIAddressModel> summary);
    void addressesPostCustomerAddressSignal(OAIAddressModel summary);
    void contactCommunicationsPatchContactCommunicationSignal(OAIContactCommunicationModel summary);
    void contactCommunicationsPostContactCommunicationSignal(OAIContactCommunicationModel summary);
    void contactsPatchContactSignal(QList<OAIContactModel> summary);
    void contactsPostContactSignal(OAIContactModel summary);
    void customerCountrySettingsPatchCustomerCountrySettingsSignal(QList<OAICustomerCountrySettingsOutputModel> summary);
    void customerCountrySettingsPostCustomerCountrySettingsSignal(OAICustomerCountrySettingsOutputModel summary);
    void customerCustomValuesPatchCustomerCustomValueSignal(QList<OAICustomerCustomValueModel> summary);
    void customerCustomValuesPostCustomerCustomValueSignal(QList<OAICustomerCustomValueModel> summary);
    void customerMarketSegmentsPostCustomerMarketSegmentSignal(OAICustomerMarketSegmentModel summary);
    void customersPatchCustomerSignal(QList<OAICustomerModel> summary);
    void customersPostCustomerSignal(OAICustomerModel summary);
    void keywordsLinkKeywordToContactSignal(OAIContactKeywordModel summary);
    void salesNotesPatchCustomerSalesNoteSignal(QList<OAICustomerSalesNoteOutputModel> summary);
    void salesNotesPostCustomerSalesNotesSignal(OAICustomerSalesNoteOutputModel summary);


    void addressesPatchAddressSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddressModel> summary);
    void addressesPostCustomerAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddressModel summary);
    void contactCommunicationsPatchContactCommunicationSignalFull(OAIHttpRequestWorker *worker, OAIContactCommunicationModel summary);
    void contactCommunicationsPostContactCommunicationSignalFull(OAIHttpRequestWorker *worker, OAIContactCommunicationModel summary);
    void contactsPatchContactSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactModel> summary);
    void contactsPostContactSignalFull(OAIHttpRequestWorker *worker, OAIContactModel summary);
    void customerCountrySettingsPatchCustomerCountrySettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCountrySettingsOutputModel> summary);
    void customerCountrySettingsPostCustomerCountrySettingsSignalFull(OAIHttpRequestWorker *worker, OAICustomerCountrySettingsOutputModel summary);
    void customerCustomValuesPatchCustomerCustomValueSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCustomValueModel> summary);
    void customerCustomValuesPostCustomerCustomValueSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCustomValueModel> summary);
    void customerMarketSegmentsPostCustomerMarketSegmentSignalFull(OAIHttpRequestWorker *worker, OAICustomerMarketSegmentModel summary);
    void customersPatchCustomerSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerModel> summary);
    void customersPostCustomerSignalFull(OAIHttpRequestWorker *worker, OAICustomerModel summary);
    void keywordsLinkKeywordToContactSignalFull(OAIHttpRequestWorker *worker, OAIContactKeywordModel summary);
    void salesNotesPatchCustomerSalesNoteSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerSalesNoteOutputModel> summary);
    void salesNotesPostCustomerSalesNotesSignalFull(OAIHttpRequestWorker *worker, OAICustomerSalesNoteOutputModel summary);

    Q_DECL_DEPRECATED_X("Use addressesPatchAddressSignalError() instead")
    void addressesPatchAddressSignalE(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesPatchAddressSignalError(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesPostCustomerAddressSignalError() instead")
    void addressesPostCustomerAddressSignalE(OAIAddressModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesPostCustomerAddressSignalError(OAIAddressModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsPatchContactCommunicationSignalError() instead")
    void contactCommunicationsPatchContactCommunicationSignalE(OAIContactCommunicationModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsPatchContactCommunicationSignalError(OAIContactCommunicationModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsPostContactCommunicationSignalError() instead")
    void contactCommunicationsPostContactCommunicationSignalE(OAIContactCommunicationModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsPostContactCommunicationSignalError(OAIContactCommunicationModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsPatchContactSignalError() instead")
    void contactsPatchContactSignalE(QList<OAIContactModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsPatchContactSignalError(QList<OAIContactModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsPostContactSignalError() instead")
    void contactsPostContactSignalE(OAIContactModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsPostContactSignalError(OAIContactModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsPatchCustomerCountrySettingsSignalError() instead")
    void customerCountrySettingsPatchCustomerCountrySettingsSignalE(QList<OAICustomerCountrySettingsOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsPatchCustomerCountrySettingsSignalError(QList<OAICustomerCountrySettingsOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsPostCustomerCountrySettingsSignalError() instead")
    void customerCountrySettingsPostCustomerCountrySettingsSignalE(OAICustomerCountrySettingsOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsPostCustomerCountrySettingsSignalError(OAICustomerCountrySettingsOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesPatchCustomerCustomValueSignalError() instead")
    void customerCustomValuesPatchCustomerCustomValueSignalE(QList<OAICustomerCustomValueModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesPatchCustomerCustomValueSignalError(QList<OAICustomerCustomValueModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesPostCustomerCustomValueSignalError() instead")
    void customerCustomValuesPostCustomerCustomValueSignalE(QList<OAICustomerCustomValueModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesPostCustomerCustomValueSignalError(QList<OAICustomerCustomValueModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsPostCustomerMarketSegmentSignalError() instead")
    void customerMarketSegmentsPostCustomerMarketSegmentSignalE(OAICustomerMarketSegmentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsPostCustomerMarketSegmentSignalError(OAICustomerMarketSegmentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPatchCustomerSignalError() instead")
    void customersPatchCustomerSignalE(QList<OAICustomerModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPatchCustomerSignalError(QList<OAICustomerModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPostCustomerSignalError() instead")
    void customersPostCustomerSignalE(OAICustomerModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPostCustomerSignalError(OAICustomerModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsLinkKeywordToContactSignalError() instead")
    void keywordsLinkKeywordToContactSignalE(OAIContactKeywordModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsLinkKeywordToContactSignalError(OAIContactKeywordModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPatchCustomerSalesNoteSignalError() instead")
    void salesNotesPatchCustomerSalesNoteSignalE(QList<OAICustomerSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPatchCustomerSalesNoteSignalError(QList<OAICustomerSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPostCustomerSalesNotesSignalError() instead")
    void salesNotesPostCustomerSalesNotesSignalE(OAICustomerSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPostCustomerSalesNotesSignalError(OAICustomerSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addressesPatchAddressSignalErrorFull() instead")
    void addressesPatchAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesPatchAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesPostCustomerAddressSignalErrorFull() instead")
    void addressesPostCustomerAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesPostCustomerAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsPatchContactCommunicationSignalErrorFull() instead")
    void contactCommunicationsPatchContactCommunicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsPatchContactCommunicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsPostContactCommunicationSignalErrorFull() instead")
    void contactCommunicationsPostContactCommunicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsPostContactCommunicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsPatchContactSignalErrorFull() instead")
    void contactsPatchContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsPatchContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsPostContactSignalErrorFull() instead")
    void contactsPostContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsPostContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsPatchCustomerCountrySettingsSignalErrorFull() instead")
    void customerCountrySettingsPatchCustomerCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsPatchCustomerCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsPostCustomerCountrySettingsSignalErrorFull() instead")
    void customerCountrySettingsPostCustomerCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsPostCustomerCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesPatchCustomerCustomValueSignalErrorFull() instead")
    void customerCustomValuesPatchCustomerCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesPatchCustomerCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesPostCustomerCustomValueSignalErrorFull() instead")
    void customerCustomValuesPostCustomerCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesPostCustomerCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsPostCustomerMarketSegmentSignalErrorFull() instead")
    void customerMarketSegmentsPostCustomerMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsPostCustomerMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPatchCustomerSignalErrorFull() instead")
    void customersPatchCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPatchCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPostCustomerSignalErrorFull() instead")
    void customersPostCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPostCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsLinkKeywordToContactSignalErrorFull() instead")
    void keywordsLinkKeywordToContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsLinkKeywordToContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPatchCustomerSalesNoteSignalErrorFull() instead")
    void salesNotesPatchCustomerSalesNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPatchCustomerSalesNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesPostCustomerSalesNotesSignalErrorFull() instead")
    void salesNotesPostCustomerSalesNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesPostCustomerSalesNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
