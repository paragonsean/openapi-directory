/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileModel::OAIFileModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileModel::OAIFileModel() {
    this->initializeModel();
}

OAIFileModel::~OAIFileModel() {}

void OAIFileModel::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIFileModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileModel::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIFileModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileModel::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

OAIFileCategory OAIFileModel::getCategory() const {
    return m_category;
}
void OAIFileModel::setCategory(const OAIFileCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFileModel::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFileModel::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIFileModel::getContentType() const {
    return m_content_type;
}
void OAIFileModel::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIFileModel::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIFileModel::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIFileModel::getCreatedBy() const {
    return m_created_by;
}
void OAIFileModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIFileModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIFileModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIFileModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIFileModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIFileModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIFileModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIFileModel::getDescription() const {
    return m_description;
}
void OAIFileModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFileModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFileModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFileModel::getGuid() const {
    return m_guid;
}
void OAIFileModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIFileModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIFileModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIFileModel::isIsInternal() const {
    return m_is_internal;
}
void OAIFileModel::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIFileModel::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIFileModel::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIFileModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIFileModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIFileModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIFileModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIFileModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIFileModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIFileModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIFileModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIFileModel::getName() const {
    return m_name;
}
void OAIFileModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFileModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFileModel::is_name_Valid() const{
    return m_name_isValid;
}

double OAIFileModel::getSize() const {
    return m_size;
}
void OAIFileModel::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFileModel::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFileModel::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIFileModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
