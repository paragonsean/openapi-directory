/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyModel::OAICompanyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyModel::OAICompanyModel() {
    this->initializeModel();
}

OAICompanyModel::~OAICompanyModel() {}

void OAICompanyModel::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_guid_isSet = false;
    m_currency_guid_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_currency_symbol_isSet = false;
    m_currency_symbol_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_root_business_unit_guid_isSet = false;
    m_root_business_unit_guid_isValid = false;
}

void OAICompanyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyModel::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_currency_guid_isValid = ::OpenAPI::fromJsonValue(m_currency_guid, json[QString("currencyGuid")]);
    m_currency_guid_isSet = !json[QString("currencyGuid")].isNull() && m_currency_guid_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("currencyRate")]);
    m_currency_rate_isSet = !json[QString("currencyRate")].isNull() && m_currency_rate_isValid;

    m_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_currency_symbol, json[QString("currencySymbol")]);
    m_currency_symbol_isSet = !json[QString("currencySymbol")].isNull() && m_currency_symbol_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_root_business_unit_guid_isValid = ::OpenAPI::fromJsonValue(m_root_business_unit_guid, json[QString("rootBusinessUnitGuid")]);
    m_root_business_unit_guid_isSet = !json[QString("rootBusinessUnitGuid")].isNull() && m_root_business_unit_guid_isValid;
}

QString OAICompanyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_guid_isSet) {
        obj.insert(QString("currencyGuid"), ::OpenAPI::toJsonValue(m_currency_guid));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("currencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_currency_symbol_isSet) {
        obj.insert(QString("currencySymbol"), ::OpenAPI::toJsonValue(m_currency_symbol));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_root_business_unit_guid_isSet) {
        obj.insert(QString("rootBusinessUnitGuid"), ::OpenAPI::toJsonValue(m_root_business_unit_guid));
    }
    return obj;
}

OAICompanyCountry OAICompanyModel::getCountry() const {
    return m_country;
}
void OAICompanyModel::setCountry(const OAICompanyCountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICompanyModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAICompanyModel::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICompanyModel::getCurrencyCode() const {
    return m_currency_code;
}
void OAICompanyModel::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICompanyModel::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICompanyModel::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAICompanyModel::getCurrencyGuid() const {
    return m_currency_guid;
}
void OAICompanyModel::setCurrencyGuid(const QString &currency_guid) {
    m_currency_guid = currency_guid;
    m_currency_guid_isSet = true;
}

bool OAICompanyModel::is_currency_guid_Set() const{
    return m_currency_guid_isSet;
}

bool OAICompanyModel::is_currency_guid_Valid() const{
    return m_currency_guid_isValid;
}

double OAICompanyModel::getCurrencyRate() const {
    return m_currency_rate;
}
void OAICompanyModel::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAICompanyModel::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAICompanyModel::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAICompanyModel::getCurrencySymbol() const {
    return m_currency_symbol;
}
void OAICompanyModel::setCurrencySymbol(const QString &currency_symbol) {
    m_currency_symbol = currency_symbol;
    m_currency_symbol_isSet = true;
}

bool OAICompanyModel::is_currency_symbol_Set() const{
    return m_currency_symbol_isSet;
}

bool OAICompanyModel::is_currency_symbol_Valid() const{
    return m_currency_symbol_isValid;
}

QString OAICompanyModel::getGuid() const {
    return m_guid;
}
void OAICompanyModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAICompanyModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAICompanyModel::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAICompanyModel::getName() const {
    return m_name;
}
void OAICompanyModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompanyModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompanyModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompanyModel::getRootBusinessUnitGuid() const {
    return m_root_business_unit_guid;
}
void OAICompanyModel::setRootBusinessUnitGuid(const QString &root_business_unit_guid) {
    m_root_business_unit_guid = root_business_unit_guid;
    m_root_business_unit_guid_isSet = true;
}

bool OAICompanyModel::is_root_business_unit_guid_Set() const{
    return m_root_business_unit_guid_isSet;
}

bool OAICompanyModel::is_root_business_unit_guid_Valid() const{
    return m_root_business_unit_guid_isValid;
}

bool OAICompanyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_business_unit_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
