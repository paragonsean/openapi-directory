/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationDetailsOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationDetailsOutputModel::OAIOrganizationDetailsOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationDetailsOutputModel::OAIOrganizationDetailsOutputModel() {
    this->initializeModel();
}

OAIOrganizationDetailsOutputModel::~OAIOrganizationDetailsOutputModel() {}

void OAIOrganizationDetailsOutputModel::initializeModel() {

    m_active_addons_isSet = false;
    m_active_addons_isValid = false;

    m_active_companies_isSet = false;
    m_active_companies_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_e_invoice_address_isSet = false;
    m_e_invoice_address_isValid = false;

    m_e_invoice_operator_code_isSet = false;
    m_e_invoice_operator_code_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_formatting_isSet = false;
    m_formatting_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_vat_registered_isSet = false;
    m_is_vat_registered_isValid = false;

    m_kvk_number_isSet = false;
    m_kvk_number_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_odp_company_isSet = false;
    m_odp_company_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_registered_office_isSet = false;
    m_registered_office_isValid = false;

    m_terms_of_service_approver_isSet = false;
    m_terms_of_service_approver_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;
}

void OAIOrganizationDetailsOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationDetailsOutputModel::fromJsonObject(QJsonObject json) {

    m_active_addons_isValid = ::OpenAPI::fromJsonValue(m_active_addons, json[QString("activeAddons")]);
    m_active_addons_isSet = !json[QString("activeAddons")].isNull() && m_active_addons_isValid;

    m_active_companies_isValid = ::OpenAPI::fromJsonValue(m_active_companies, json[QString("activeCompanies")]);
    m_active_companies_isSet = !json[QString("activeCompanies")].isNull() && m_active_companies_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_e_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_e_invoice_address, json[QString("eInvoiceAddress")]);
    m_e_invoice_address_isSet = !json[QString("eInvoiceAddress")].isNull() && m_e_invoice_address_isValid;

    m_e_invoice_operator_code_isValid = ::OpenAPI::fromJsonValue(m_e_invoice_operator_code, json[QString("eInvoiceOperatorCode")]);
    m_e_invoice_operator_code_isSet = !json[QString("eInvoiceOperatorCode")].isNull() && m_e_invoice_operator_code_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_formatting_isValid = ::OpenAPI::fromJsonValue(m_formatting, json[QString("formatting")]);
    m_formatting_isSet = !json[QString("formatting")].isNull() && m_formatting_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_vat_registered_isValid = ::OpenAPI::fromJsonValue(m_is_vat_registered, json[QString("isVatRegistered")]);
    m_is_vat_registered_isSet = !json[QString("isVatRegistered")].isNull() && m_is_vat_registered_isValid;

    m_kvk_number_isValid = ::OpenAPI::fromJsonValue(m_kvk_number, json[QString("kvkNumber")]);
    m_kvk_number_isSet = !json[QString("kvkNumber")].isNull() && m_kvk_number_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_odp_company_isValid = ::OpenAPI::fromJsonValue(m_odp_company, json[QString("odpCompany")]);
    m_odp_company_isSet = !json[QString("odpCompany")].isNull() && m_odp_company_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_registered_office_isValid = ::OpenAPI::fromJsonValue(m_registered_office, json[QString("registeredOffice")]);
    m_registered_office_isSet = !json[QString("registeredOffice")].isNull() && m_registered_office_isValid;

    m_terms_of_service_approver_isValid = ::OpenAPI::fromJsonValue(m_terms_of_service_approver, json[QString("termsOfServiceApprover")]);
    m_terms_of_service_approver_isSet = !json[QString("termsOfServiceApprover")].isNull() && m_terms_of_service_approver_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("vatNumber")]);
    m_vat_number_isSet = !json[QString("vatNumber")].isNull() && m_vat_number_isValid;
}

QString OAIOrganizationDetailsOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationDetailsOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_active_addons.size() > 0) {
        obj.insert(QString("activeAddons"), ::OpenAPI::toJsonValue(m_active_addons));
    }
    if (m_active_companies.size() > 0) {
        obj.insert(QString("activeCompanies"), ::OpenAPI::toJsonValue(m_active_companies));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_e_invoice_address_isSet) {
        obj.insert(QString("eInvoiceAddress"), ::OpenAPI::toJsonValue(m_e_invoice_address));
    }
    if (m_e_invoice_operator_code_isSet) {
        obj.insert(QString("eInvoiceOperatorCode"), ::OpenAPI::toJsonValue(m_e_invoice_operator_code));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_formatting.isSet()) {
        obj.insert(QString("formatting"), ::OpenAPI::toJsonValue(m_formatting));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_vat_registered_isSet) {
        obj.insert(QString("isVatRegistered"), ::OpenAPI::toJsonValue(m_is_vat_registered));
    }
    if (m_kvk_number_isSet) {
        obj.insert(QString("kvkNumber"), ::OpenAPI::toJsonValue(m_kvk_number));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_odp_company_isSet) {
        obj.insert(QString("odpCompany"), ::OpenAPI::toJsonValue(m_odp_company));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_registered_office_isSet) {
        obj.insert(QString("registeredOffice"), ::OpenAPI::toJsonValue(m_registered_office));
    }
    if (m_terms_of_service_approver.isSet()) {
        obj.insert(QString("termsOfServiceApprover"), ::OpenAPI::toJsonValue(m_terms_of_service_approver));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("vatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    return obj;
}

QList<QString> OAIOrganizationDetailsOutputModel::getActiveAddons() const {
    return m_active_addons;
}
void OAIOrganizationDetailsOutputModel::setActiveAddons(const QList<QString> &active_addons) {
    m_active_addons = active_addons;
    m_active_addons_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_active_addons_Set() const{
    return m_active_addons_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_active_addons_Valid() const{
    return m_active_addons_isValid;
}

QList<OAICompanyModel> OAIOrganizationDetailsOutputModel::getActiveCompanies() const {
    return m_active_companies;
}
void OAIOrganizationDetailsOutputModel::setActiveCompanies(const QList<OAICompanyModel> &active_companies) {
    m_active_companies = active_companies;
    m_active_companies_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_active_companies_Set() const{
    return m_active_companies_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_active_companies_Valid() const{
    return m_active_companies_isValid;
}

QString OAIOrganizationDetailsOutputModel::getAddress() const {
    return m_address;
}
void OAIOrganizationDetailsOutputModel::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIOrganizationDetailsOutputModel::getCity() const {
    return m_city;
}
void OAIOrganizationDetailsOutputModel::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_city_Set() const{
    return m_city_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_city_Valid() const{
    return m_city_isValid;
}

OAIOrganizationDetailsCountrySubModel OAIOrganizationDetailsOutputModel::getCountry() const {
    return m_country;
}
void OAIOrganizationDetailsOutputModel::setCountry(const OAIOrganizationDetailsCountrySubModel &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_country_Valid() const{
    return m_country_isValid;
}

OAICurrencyBaseModel OAIOrganizationDetailsOutputModel::getCurrency() const {
    return m_currency;
}
void OAIOrganizationDetailsOutputModel::setCurrency(const OAICurrencyBaseModel &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIOrganizationDetailsOutputModel::getEInvoiceAddress() const {
    return m_e_invoice_address;
}
void OAIOrganizationDetailsOutputModel::setEInvoiceAddress(const QString &e_invoice_address) {
    m_e_invoice_address = e_invoice_address;
    m_e_invoice_address_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_e_invoice_address_Set() const{
    return m_e_invoice_address_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_e_invoice_address_Valid() const{
    return m_e_invoice_address_isValid;
}

QString OAIOrganizationDetailsOutputModel::getEInvoiceOperatorCode() const {
    return m_e_invoice_operator_code;
}
void OAIOrganizationDetailsOutputModel::setEInvoiceOperatorCode(const QString &e_invoice_operator_code) {
    m_e_invoice_operator_code = e_invoice_operator_code;
    m_e_invoice_operator_code_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_e_invoice_operator_code_Set() const{
    return m_e_invoice_operator_code_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_e_invoice_operator_code_Valid() const{
    return m_e_invoice_operator_code_isValid;
}

QString OAIOrganizationDetailsOutputModel::getFax() const {
    return m_fax;
}
void OAIOrganizationDetailsOutputModel::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_fax_Valid() const{
    return m_fax_isValid;
}

OAIOrganizationDetailsFormattingSubModel OAIOrganizationDetailsOutputModel::getFormatting() const {
    return m_formatting;
}
void OAIOrganizationDetailsOutputModel::setFormatting(const OAIOrganizationDetailsFormattingSubModel &formatting) {
    m_formatting = formatting;
    m_formatting_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_formatting_Set() const{
    return m_formatting_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_formatting_Valid() const{
    return m_formatting_isValid;
}

QString OAIOrganizationDetailsOutputModel::getGuid() const {
    return m_guid;
}
void OAIOrganizationDetailsOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIOrganizationDetailsOutputModel::isIsVatRegistered() const {
    return m_is_vat_registered;
}
void OAIOrganizationDetailsOutputModel::setIsVatRegistered(const bool &is_vat_registered) {
    m_is_vat_registered = is_vat_registered;
    m_is_vat_registered_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_is_vat_registered_Set() const{
    return m_is_vat_registered_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_is_vat_registered_Valid() const{
    return m_is_vat_registered_isValid;
}

QString OAIOrganizationDetailsOutputModel::getKvkNumber() const {
    return m_kvk_number;
}
void OAIOrganizationDetailsOutputModel::setKvkNumber(const QString &kvk_number) {
    m_kvk_number = kvk_number;
    m_kvk_number_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_kvk_number_Set() const{
    return m_kvk_number_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_kvk_number_Valid() const{
    return m_kvk_number_isValid;
}

OAIOrganizationDetailsLanguageSubModel OAIOrganizationDetailsOutputModel::getLanguage() const {
    return m_language;
}
void OAIOrganizationDetailsOutputModel::setLanguage(const OAIOrganizationDetailsLanguageSubModel &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_language_Set() const{
    return m_language_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIOrganizationDetailsOutputModel::getName() const {
    return m_name;
}
void OAIOrganizationDetailsOutputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganizationDetailsOutputModel::getOdpCompany() const {
    return m_odp_company;
}
void OAIOrganizationDetailsOutputModel::setOdpCompany(const QString &odp_company) {
    m_odp_company = odp_company;
    m_odp_company_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_odp_company_Set() const{
    return m_odp_company_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_odp_company_Valid() const{
    return m_odp_company_isValid;
}

QString OAIOrganizationDetailsOutputModel::getPhone() const {
    return m_phone;
}
void OAIOrganizationDetailsOutputModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIOrganizationDetailsOutputModel::getPostalCode() const {
    return m_postal_code;
}
void OAIOrganizationDetailsOutputModel::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIOrganizationDetailsOutputModel::getRegisteredOffice() const {
    return m_registered_office;
}
void OAIOrganizationDetailsOutputModel::setRegisteredOffice(const QString &registered_office) {
    m_registered_office = registered_office;
    m_registered_office_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_registered_office_Set() const{
    return m_registered_office_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_registered_office_Valid() const{
    return m_registered_office_isValid;
}

OAIUserWithNameAndPhotoFileModel OAIOrganizationDetailsOutputModel::getTermsOfServiceApprover() const {
    return m_terms_of_service_approver;
}
void OAIOrganizationDetailsOutputModel::setTermsOfServiceApprover(const OAIUserWithNameAndPhotoFileModel &terms_of_service_approver) {
    m_terms_of_service_approver = terms_of_service_approver;
    m_terms_of_service_approver_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_terms_of_service_approver_Set() const{
    return m_terms_of_service_approver_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_terms_of_service_approver_Valid() const{
    return m_terms_of_service_approver_isValid;
}

OAIModelWithName OAIOrganizationDetailsOutputModel::getTimezone() const {
    return m_timezone;
}
void OAIOrganizationDetailsOutputModel::setTimezone(const OAIModelWithName &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIOrganizationDetailsOutputModel::getVatNumber() const {
    return m_vat_number;
}
void OAIOrganizationDetailsOutputModel::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAIOrganizationDetailsOutputModel::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAIOrganizationDetailsOutputModel::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

bool OAIOrganizationDetailsOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_addons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_companies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_invoice_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_invoice_operator_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vat_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kvk_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odp_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_service_approver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationDetailsOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
