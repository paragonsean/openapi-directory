/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectMemberCostExceptionInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectMemberCostExceptionInputModel::OAIProjectMemberCostExceptionInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectMemberCostExceptionInputModel::OAIProjectMemberCostExceptionInputModel() {
    this->initializeModel();
}

OAIProjectMemberCostExceptionInputModel::~OAIProjectMemberCostExceptionInputModel() {}

void OAIProjectMemberCostExceptionInputModel::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIProjectMemberCostExceptionInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectMemberCostExceptionInputModel::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIProjectMemberCostExceptionInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectMemberCostExceptionInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_cost.isSet()) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIMoneyInputModelWithNullableAmount OAIProjectMemberCostExceptionInputModel::getCost() const {
    return m_cost;
}
void OAIProjectMemberCostExceptionInputModel::setCost(const OAIMoneyInputModelWithNullableAmount &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIProjectMemberCostExceptionInputModel::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIProjectMemberCostExceptionInputModel::is_cost_Valid() const{
    return m_cost_isValid;
}

OAISimpleInputRequiredModel OAIProjectMemberCostExceptionInputModel::getProject() const {
    return m_project;
}
void OAIProjectMemberCostExceptionInputModel::setProject(const OAISimpleInputRequiredModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectMemberCostExceptionInputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectMemberCostExceptionInputModel::is_project_Valid() const{
    return m_project_isValid;
}

OAISimpleInputRequiredModel OAIProjectMemberCostExceptionInputModel::getUser() const {
    return m_user;
}
void OAIProjectMemberCostExceptionInputModel::setUser(const OAISimpleInputRequiredModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProjectMemberCostExceptionInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProjectMemberCostExceptionInputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIProjectMemberCostExceptionInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectMemberCostExceptionInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
