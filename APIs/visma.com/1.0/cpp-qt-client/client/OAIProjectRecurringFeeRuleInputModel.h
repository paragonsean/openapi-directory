/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectRecurringFeeRuleInputModel.h
 *
 * 
 */

#ifndef OAIProjectRecurringFeeRuleInputModel_H
#define OAIProjectRecurringFeeRuleInputModel_H

#include <QJsonObject>

#include "OAIMoneyInputModelWithNullableAmount.h"
#include "OAIProductType.h"
#include "OAIRecurrenceEndTypes.h"
#include "OAISimpleInputModel.h"
#include "OAISimpleInputRequiredModel.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleInputModel;
class OAISimpleInputRequiredModel;
class OAIMoneyInputModelWithNullableAmount;

class OAIProjectRecurringFeeRuleInputModel : public OAIObject {
public:
    OAIProjectRecurringFeeRuleInputModel();
    OAIProjectRecurringFeeRuleInputModel(QString json);
    ~OAIProjectRecurringFeeRuleInputModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISimpleInputModel getCostCenter() const;
    void setCostCenter(const OAISimpleInputModel &cost_center);
    bool is_cost_center_Set() const;
    bool is_cost_center_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDate getDisplayPeriodStartDate() const;
    void setDisplayPeriodStartDate(const QDate &display_period_start_date);
    bool is_display_period_start_date_Set() const;
    bool is_display_period_start_date_Valid() const;

    qint32 getFrequency() const;
    void setFrequency(const qint32 &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    bool isHasVolumePricing() const;
    void setHasVolumePricing(const bool &has_volume_pricing);
    bool is_has_volume_pricing_Set() const;
    bool is_has_volume_pricing_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    QString getMeasurementUnit() const;
    void setMeasurementUnit(const QString &measurement_unit);
    bool is_measurement_unit_Set() const;
    bool is_measurement_unit_Valid() const;

    OAISimpleInputModel getPhase() const;
    void setPhase(const OAISimpleInputModel &phase);
    bool is_phase_Set() const;
    bool is_phase_Valid() const;

    OAISimpleInputModel getProduct() const;
    void setProduct(const OAISimpleInputModel &product);
    bool is_product_Set() const;
    bool is_product_Valid() const;

    OAIProductType getProductType() const;
    void setProductType(const OAIProductType &product_type);
    bool is_product_type_Set() const;
    bool is_product_type_Valid() const;

    OAISimpleInputRequiredModel getProject() const;
    void setProject(const OAISimpleInputRequiredModel &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QDate getRecurrenceEndDate() const;
    void setRecurrenceEndDate(const QDate &recurrence_end_date);
    bool is_recurrence_end_date_Set() const;
    bool is_recurrence_end_date_Valid() const;

    OAIRecurrenceEndTypes getRecurrenceEndType() const;
    void setRecurrenceEndType(const OAIRecurrenceEndTypes &recurrence_end_type);
    bool is_recurrence_end_type_Set() const;
    bool is_recurrence_end_type_Valid() const;

    QDate getRecurrenceStartDate() const;
    void setRecurrenceStartDate(const QDate &recurrence_start_date);
    bool is_recurrence_start_date_Set() const;
    bool is_recurrence_start_date_Valid() const;

    qint32 getRecurrenceTimes() const;
    void setRecurrenceTimes(const qint32 &recurrence_times);
    bool is_recurrence_times_Set() const;
    bool is_recurrence_times_Valid() const;

    OAISimpleInputModel getRecurringSalesAccount() const;
    void setRecurringSalesAccount(const OAISimpleInputModel &recurring_sales_account);
    bool is_recurring_sales_account_Set() const;
    bool is_recurring_sales_account_Valid() const;

    OAISimpleInputModel getSalesAccount() const;
    void setSalesAccount(const OAISimpleInputModel &sales_account);
    bool is_sales_account_Set() const;
    bool is_sales_account_Valid() const;

    OAIMoneyInputModelWithNullableAmount getUnitCost() const;
    void setUnitCost(const OAIMoneyInputModelWithNullableAmount &unit_cost);
    bool is_unit_cost_Set() const;
    bool is_unit_cost_Valid() const;

    OAIMoneyInputModelWithNullableAmount getUnitPrice() const;
    void setUnitPrice(const OAIMoneyInputModelWithNullableAmount &unit_price);
    bool is_unit_price_Set() const;
    bool is_unit_price_Valid() const;

    OAISimpleInputModel getUser() const;
    void setUser(const OAISimpleInputModel &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    double getVatRate() const;
    void setVatRate(const double &vat_rate);
    bool is_vat_rate_Set() const;
    bool is_vat_rate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISimpleInputModel m_cost_center;
    bool m_cost_center_isSet;
    bool m_cost_center_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDate m_display_period_start_date;
    bool m_display_period_start_date_isSet;
    bool m_display_period_start_date_isValid;

    qint32 m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    bool m_has_volume_pricing;
    bool m_has_volume_pricing_isSet;
    bool m_has_volume_pricing_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    QString m_measurement_unit;
    bool m_measurement_unit_isSet;
    bool m_measurement_unit_isValid;

    OAISimpleInputModel m_phase;
    bool m_phase_isSet;
    bool m_phase_isValid;

    OAISimpleInputModel m_product;
    bool m_product_isSet;
    bool m_product_isValid;

    OAIProductType m_product_type;
    bool m_product_type_isSet;
    bool m_product_type_isValid;

    OAISimpleInputRequiredModel m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QDate m_recurrence_end_date;
    bool m_recurrence_end_date_isSet;
    bool m_recurrence_end_date_isValid;

    OAIRecurrenceEndTypes m_recurrence_end_type;
    bool m_recurrence_end_type_isSet;
    bool m_recurrence_end_type_isValid;

    QDate m_recurrence_start_date;
    bool m_recurrence_start_date_isSet;
    bool m_recurrence_start_date_isValid;

    qint32 m_recurrence_times;
    bool m_recurrence_times_isSet;
    bool m_recurrence_times_isValid;

    OAISimpleInputModel m_recurring_sales_account;
    bool m_recurring_sales_account_isSet;
    bool m_recurring_sales_account_isValid;

    OAISimpleInputModel m_sales_account;
    bool m_sales_account_isSet;
    bool m_sales_account_isValid;

    OAIMoneyInputModelWithNullableAmount m_unit_cost;
    bool m_unit_cost_isSet;
    bool m_unit_cost_isValid;

    OAIMoneyInputModelWithNullableAmount m_unit_price;
    bool m_unit_price_isSet;
    bool m_unit_price_isValid;

    OAISimpleInputModel m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    double m_vat_rate;
    bool m_vat_rate_isSet;
    bool m_vat_rate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectRecurringFeeRuleInputModel)

#endif // OAIProjectRecurringFeeRuleInputModel_H
