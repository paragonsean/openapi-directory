/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillablePeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillablePeriod::OAIBillablePeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillablePeriod::OAIBillablePeriod() {
    this->initializeModel();
}

OAIBillablePeriod::~OAIBillablePeriod() {}

void OAIBillablePeriod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBillablePeriod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBillablePeriod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Any", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBillablePeriod::ANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Past", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBillablePeriod::PAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Future", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBillablePeriod::FUTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NowAndPast", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBillablePeriod::NOWANDPAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NowAndFuture", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBillablePeriod::NOWANDFUTURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBillablePeriod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBillablePeriod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBillablePeriod::ANY:
            val = "Any";
            break;
        case eOAIBillablePeriod::PAST:
            val = "Past";
            break;
        case eOAIBillablePeriod::FUTURE:
            val = "Future";
            break;
        case eOAIBillablePeriod::NOWANDPAST:
            val = "NowAndPast";
            break;
        case eOAIBillablePeriod::NOWANDFUTURE:
            val = "NowAndFuture";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBillablePeriod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBillablePeriod::eOAIBillablePeriod OAIBillablePeriod::getValue() const {
    return m_value;
}

void OAIBillablePeriod::setValue(const OAIBillablePeriod::eOAIBillablePeriod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBillablePeriod::isSet() const {
    
    return m_value_isSet;
}

bool OAIBillablePeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
