/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProposalOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProposalOutputModel::OAIProposalOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProposalOutputModel::OAIProposalOutputModel() {
    this->initializeModel();
}

OAIProposalOutputModel::~OAIProposalOutputModel() {}

void OAIProposalOutputModel::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_contact_person_isSet = false;
    m_customer_contact_person_isValid = false;

    m_free_text1_isSet = false;
    m_free_text1_isValid = false;

    m_free_text2_isSet = false;
    m_free_text2_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_pricelist_isSet = false;
    m_pricelist_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_proposal_date_isSet = false;
    m_proposal_date_isValid = false;

    m_proposal_status_isSet = false;
    m_proposal_status_isValid = false;

    m_total_excluding_vat_isSet = false;
    m_total_excluding_vat_isValid = false;

    m_total_including_vat_isSet = false;
    m_total_including_vat_isValid = false;
}

void OAIProposalOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProposalOutputModel::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_contact_person_isValid = ::OpenAPI::fromJsonValue(m_customer_contact_person, json[QString("customerContactPerson")]);
    m_customer_contact_person_isSet = !json[QString("customerContactPerson")].isNull() && m_customer_contact_person_isValid;

    m_free_text1_isValid = ::OpenAPI::fromJsonValue(m_free_text1, json[QString("freeText1")]);
    m_free_text1_isSet = !json[QString("freeText1")].isNull() && m_free_text1_isValid;

    m_free_text2_isValid = ::OpenAPI::fromJsonValue(m_free_text2, json[QString("freeText2")]);
    m_free_text2_isSet = !json[QString("freeText2")].isNull() && m_free_text2_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_pricelist_isValid = ::OpenAPI::fromJsonValue(m_pricelist, json[QString("pricelist")]);
    m_pricelist_isSet = !json[QString("pricelist")].isNull() && m_pricelist_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_proposal_date_isValid = ::OpenAPI::fromJsonValue(m_proposal_date, json[QString("proposalDate")]);
    m_proposal_date_isSet = !json[QString("proposalDate")].isNull() && m_proposal_date_isValid;

    m_proposal_status_isValid = ::OpenAPI::fromJsonValue(m_proposal_status, json[QString("proposalStatus")]);
    m_proposal_status_isSet = !json[QString("proposalStatus")].isNull() && m_proposal_status_isValid;

    m_total_excluding_vat_isValid = ::OpenAPI::fromJsonValue(m_total_excluding_vat, json[QString("totalExcludingVat")]);
    m_total_excluding_vat_isSet = !json[QString("totalExcludingVat")].isNull() && m_total_excluding_vat_isValid;

    m_total_including_vat_isValid = ::OpenAPI::fromJsonValue(m_total_including_vat, json[QString("totalIncludingVat")]);
    m_total_including_vat_isSet = !json[QString("totalIncludingVat")].isNull() && m_total_including_vat_isValid;
}

QString OAIProposalOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProposalOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_culture.isSet()) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_contact_person.isSet()) {
        obj.insert(QString("customerContactPerson"), ::OpenAPI::toJsonValue(m_customer_contact_person));
    }
    if (m_free_text1.isSet()) {
        obj.insert(QString("freeText1"), ::OpenAPI::toJsonValue(m_free_text1));
    }
    if (m_free_text2.isSet()) {
        obj.insert(QString("freeText2"), ::OpenAPI::toJsonValue(m_free_text2));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_pricelist.isSet()) {
        obj.insert(QString("pricelist"), ::OpenAPI::toJsonValue(m_pricelist));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_proposal_date_isSet) {
        obj.insert(QString("proposalDate"), ::OpenAPI::toJsonValue(m_proposal_date));
    }
    if (m_proposal_status.isSet()) {
        obj.insert(QString("proposalStatus"), ::OpenAPI::toJsonValue(m_proposal_status));
    }
    if (m_total_excluding_vat.isSet()) {
        obj.insert(QString("totalExcludingVat"), ::OpenAPI::toJsonValue(m_total_excluding_vat));
    }
    if (m_total_including_vat.isSet()) {
        obj.insert(QString("totalIncludingVat"), ::OpenAPI::toJsonValue(m_total_including_vat));
    }
    return obj;
}

OAIProposalBillingAddressSubModel OAIProposalOutputModel::getBillingAddress() const {
    return m_billing_address;
}
void OAIProposalOutputModel::setBillingAddress(const OAIProposalBillingAddressSubModel &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIProposalOutputModel::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIProposalOutputModel::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProposalOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProposalOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProposalOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProposalOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProposalOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProposalOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProposalOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProposalOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIFormattingCultureSubModel OAIProposalOutputModel::getCulture() const {
    return m_culture;
}
void OAIProposalOutputModel::setCulture(const OAIFormattingCultureSubModel &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIProposalOutputModel::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIProposalOutputModel::is_culture_Valid() const{
    return m_culture_isValid;
}

OAIProposalCustomerSubModel OAIProposalOutputModel::getCustomer() const {
    return m_customer;
}
void OAIProposalOutputModel::setCustomer(const OAIProposalCustomerSubModel &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProposalOutputModel::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProposalOutputModel::is_customer_Valid() const{
    return m_customer_isValid;
}

OAICustomerContactPersonSubModel OAIProposalOutputModel::getCustomerContactPerson() const {
    return m_customer_contact_person;
}
void OAIProposalOutputModel::setCustomerContactPerson(const OAICustomerContactPersonSubModel &customer_contact_person) {
    m_customer_contact_person = customer_contact_person;
    m_customer_contact_person_isSet = true;
}

bool OAIProposalOutputModel::is_customer_contact_person_Set() const{
    return m_customer_contact_person_isSet;
}

bool OAIProposalOutputModel::is_customer_contact_person_Valid() const{
    return m_customer_contact_person_isValid;
}

OAIFreeTextModel2 OAIProposalOutputModel::getFreeText1() const {
    return m_free_text1;
}
void OAIProposalOutputModel::setFreeText1(const OAIFreeTextModel2 &free_text1) {
    m_free_text1 = free_text1;
    m_free_text1_isSet = true;
}

bool OAIProposalOutputModel::is_free_text1_Set() const{
    return m_free_text1_isSet;
}

bool OAIProposalOutputModel::is_free_text1_Valid() const{
    return m_free_text1_isValid;
}

OAIFreeTextModel2 OAIProposalOutputModel::getFreeText2() const {
    return m_free_text2;
}
void OAIProposalOutputModel::setFreeText2(const OAIFreeTextModel2 &free_text2) {
    m_free_text2 = free_text2;
    m_free_text2_isSet = true;
}

bool OAIProposalOutputModel::is_free_text2_Set() const{
    return m_free_text2_isSet;
}

bool OAIProposalOutputModel::is_free_text2_Valid() const{
    return m_free_text2_isValid;
}

QString OAIProposalOutputModel::getGuid() const {
    return m_guid;
}
void OAIProposalOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProposalOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProposalOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIProposalLanguageSubModel OAIProposalOutputModel::getLanguage() const {
    return m_language;
}
void OAIProposalOutputModel::setLanguage(const OAIProposalLanguageSubModel &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIProposalOutputModel::is_language_Set() const{
    return m_language_isSet;
}

bool OAIProposalOutputModel::is_language_Valid() const{
    return m_language_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProposalOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProposalOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProposalOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProposalOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProposalOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProposalOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProposalOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProposalOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIProposalOutputModel::getName() const {
    return m_name;
}
void OAIProposalOutputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProposalOutputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProposalOutputModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProposalOutputModel::getNumber() const {
    return m_number;
}
void OAIProposalOutputModel::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIProposalOutputModel::is_number_Set() const{
    return m_number_isSet;
}

bool OAIProposalOutputModel::is_number_Valid() const{
    return m_number_isValid;
}

OAIModelWithName OAIProposalOutputModel::getPricelist() const {
    return m_pricelist;
}
void OAIProposalOutputModel::setPricelist(const OAIModelWithName &pricelist) {
    m_pricelist = pricelist;
    m_pricelist_isSet = true;
}

bool OAIProposalOutputModel::is_pricelist_Set() const{
    return m_pricelist_isSet;
}

bool OAIProposalOutputModel::is_pricelist_Valid() const{
    return m_pricelist_isValid;
}

OAIProposalProjectSubModel OAIProposalOutputModel::getProject() const {
    return m_project;
}
void OAIProposalOutputModel::setProject(const OAIProposalProjectSubModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProposalOutputModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProposalOutputModel::is_project_Valid() const{
    return m_project_isValid;
}

QDate OAIProposalOutputModel::getProposalDate() const {
    return m_proposal_date;
}
void OAIProposalOutputModel::setProposalDate(const QDate &proposal_date) {
    m_proposal_date = proposal_date;
    m_proposal_date_isSet = true;
}

bool OAIProposalOutputModel::is_proposal_date_Set() const{
    return m_proposal_date_isSet;
}

bool OAIProposalOutputModel::is_proposal_date_Valid() const{
    return m_proposal_date_isValid;
}

OAIModelWithName OAIProposalOutputModel::getProposalStatus() const {
    return m_proposal_status;
}
void OAIProposalOutputModel::setProposalStatus(const OAIModelWithName &proposal_status) {
    m_proposal_status = proposal_status;
    m_proposal_status_isSet = true;
}

bool OAIProposalOutputModel::is_proposal_status_Set() const{
    return m_proposal_status_isSet;
}

bool OAIProposalOutputModel::is_proposal_status_Valid() const{
    return m_proposal_status_isValid;
}

OAIMoneyOutputModel OAIProposalOutputModel::getTotalExcludingVat() const {
    return m_total_excluding_vat;
}
void OAIProposalOutputModel::setTotalExcludingVat(const OAIMoneyOutputModel &total_excluding_vat) {
    m_total_excluding_vat = total_excluding_vat;
    m_total_excluding_vat_isSet = true;
}

bool OAIProposalOutputModel::is_total_excluding_vat_Set() const{
    return m_total_excluding_vat_isSet;
}

bool OAIProposalOutputModel::is_total_excluding_vat_Valid() const{
    return m_total_excluding_vat_isValid;
}

OAIMoneyOutputModel OAIProposalOutputModel::getTotalIncludingVat() const {
    return m_total_including_vat;
}
void OAIProposalOutputModel::setTotalIncludingVat(const OAIMoneyOutputModel &total_including_vat) {
    m_total_including_vat = total_including_vat;
    m_total_including_vat_isSet = true;
}

bool OAIProposalOutputModel::is_total_including_vat_Set() const{
    return m_total_including_vat_isSet;
}

bool OAIProposalOutputModel::is_total_including_vat_Valid() const{
    return m_total_including_vat_isValid;
}

bool OAIProposalOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_contact_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_text1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_text2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricelist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_excluding_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_including_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProposalOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
