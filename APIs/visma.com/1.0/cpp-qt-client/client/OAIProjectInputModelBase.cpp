/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectInputModelBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectInputModelBase::OAIProjectInputModelBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectInputModelBase::OAIProjectInputModelBase() {
    this->initializeModel();
}

OAIProjectInputModelBase::~OAIProjectInputModelBase() {}

void OAIProjectInputModelBase::initializeModel() {

    m_billing_contact_isSet = false;
    m_billing_contact_isValid = false;

    m_business_unit_isSet = false;
    m_business_unit_isValid = false;

    m_completion_estimate_percentage_isSet = false;
    m_completion_estimate_percentage_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_contact_isSet = false;
    m_customer_contact_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expected_order_date_isSet = false;
    m_expected_order_date_isValid = false;

    m_expected_value_isSet = false;
    m_expected_value_isValid = false;

    m_internal_name_isSet = false;
    m_internal_name_isValid = false;

    m_invoice_notes_isSet = false;
    m_invoice_notes_isValid = false;

    m_invoice_template_isSet = false;
    m_invoice_template_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_is_joining_allowed_isSet = false;
    m_is_joining_allowed_isValid = false;

    m_lead_source_isSet = false;
    m_lead_source_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_our_reference_isSet = false;
    m_our_reference_isValid = false;

    m_payment_term_isSet = false;
    m_payment_term_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;

    m_project_owner_isSet = false;
    m_project_owner_isValid = false;

    m_project_status_isSet = false;
    m_project_status_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_sales_status_isSet = false;
    m_sales_status_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_use_overtime_multipliers_isSet = false;
    m_use_overtime_multipliers_isValid = false;

    m_use_products_from_setting_isSet = false;
    m_use_products_from_setting_isValid = false;

    m_use_worktypes_from_setting_isSet = false;
    m_use_worktypes_from_setting_isValid = false;

    m_your_reference_isSet = false;
    m_your_reference_isValid = false;
}

void OAIProjectInputModelBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectInputModelBase::fromJsonObject(QJsonObject json) {

    m_billing_contact_isValid = ::OpenAPI::fromJsonValue(m_billing_contact, json[QString("billingContact")]);
    m_billing_contact_isSet = !json[QString("billingContact")].isNull() && m_billing_contact_isValid;

    m_business_unit_isValid = ::OpenAPI::fromJsonValue(m_business_unit, json[QString("businessUnit")]);
    m_business_unit_isSet = !json[QString("businessUnit")].isNull() && m_business_unit_isValid;

    m_completion_estimate_percentage_isValid = ::OpenAPI::fromJsonValue(m_completion_estimate_percentage, json[QString("completionEstimatePercentage")]);
    m_completion_estimate_percentage_isSet = !json[QString("completionEstimatePercentage")].isNull() && m_completion_estimate_percentage_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_contact_isValid = ::OpenAPI::fromJsonValue(m_customer_contact, json[QString("customerContact")]);
    m_customer_contact_isSet = !json[QString("customerContact")].isNull() && m_customer_contact_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expected_order_date_isValid = ::OpenAPI::fromJsonValue(m_expected_order_date, json[QString("expectedOrderDate")]);
    m_expected_order_date_isSet = !json[QString("expectedOrderDate")].isNull() && m_expected_order_date_isValid;

    m_expected_value_isValid = ::OpenAPI::fromJsonValue(m_expected_value, json[QString("expectedValue")]);
    m_expected_value_isSet = !json[QString("expectedValue")].isNull() && m_expected_value_isValid;

    m_internal_name_isValid = ::OpenAPI::fromJsonValue(m_internal_name, json[QString("internalName")]);
    m_internal_name_isSet = !json[QString("internalName")].isNull() && m_internal_name_isValid;

    m_invoice_notes_isValid = ::OpenAPI::fromJsonValue(m_invoice_notes, json[QString("invoiceNotes")]);
    m_invoice_notes_isSet = !json[QString("invoiceNotes")].isNull() && m_invoice_notes_isValid;

    m_invoice_template_isValid = ::OpenAPI::fromJsonValue(m_invoice_template, json[QString("invoiceTemplate")]);
    m_invoice_template_isSet = !json[QString("invoiceTemplate")].isNull() && m_invoice_template_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("isClosed")]);
    m_is_closed_isSet = !json[QString("isClosed")].isNull() && m_is_closed_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_is_joining_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_joining_allowed, json[QString("isJoiningAllowed")]);
    m_is_joining_allowed_isSet = !json[QString("isJoiningAllowed")].isNull() && m_is_joining_allowed_isValid;

    m_lead_source_isValid = ::OpenAPI::fromJsonValue(m_lead_source, json[QString("leadSource")]);
    m_lead_source_isSet = !json[QString("leadSource")].isNull() && m_lead_source_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_our_reference_isValid = ::OpenAPI::fromJsonValue(m_our_reference, json[QString("ourReference")]);
    m_our_reference_isSet = !json[QString("ourReference")].isNull() && m_our_reference_isValid;

    m_payment_term_isValid = ::OpenAPI::fromJsonValue(m_payment_term, json[QString("paymentTerm")]);
    m_payment_term_isSet = !json[QString("paymentTerm")].isNull() && m_payment_term_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;

    m_project_owner_isValid = ::OpenAPI::fromJsonValue(m_project_owner, json[QString("projectOwner")]);
    m_project_owner_isSet = !json[QString("projectOwner")].isNull() && m_project_owner_isValid;

    m_project_status_isValid = ::OpenAPI::fromJsonValue(m_project_status, json[QString("projectStatus")]);
    m_project_status_isSet = !json[QString("projectStatus")].isNull() && m_project_status_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_sales_status_isValid = ::OpenAPI::fromJsonValue(m_sales_status, json[QString("salesStatus")]);
    m_sales_status_isSet = !json[QString("salesStatus")].isNull() && m_sales_status_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_use_overtime_multipliers_isValid = ::OpenAPI::fromJsonValue(m_use_overtime_multipliers, json[QString("useOvertimeMultipliers")]);
    m_use_overtime_multipliers_isSet = !json[QString("useOvertimeMultipliers")].isNull() && m_use_overtime_multipliers_isValid;

    m_use_products_from_setting_isValid = ::OpenAPI::fromJsonValue(m_use_products_from_setting, json[QString("useProductsFromSetting")]);
    m_use_products_from_setting_isSet = !json[QString("useProductsFromSetting")].isNull() && m_use_products_from_setting_isValid;

    m_use_worktypes_from_setting_isValid = ::OpenAPI::fromJsonValue(m_use_worktypes_from_setting, json[QString("useWorktypesFromSetting")]);
    m_use_worktypes_from_setting_isSet = !json[QString("useWorktypesFromSetting")].isNull() && m_use_worktypes_from_setting_isValid;

    m_your_reference_isValid = ::OpenAPI::fromJsonValue(m_your_reference, json[QString("yourReference")]);
    m_your_reference_isSet = !json[QString("yourReference")].isNull() && m_your_reference_isValid;
}

QString OAIProjectInputModelBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectInputModelBase::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_contact.isSet()) {
        obj.insert(QString("billingContact"), ::OpenAPI::toJsonValue(m_billing_contact));
    }
    if (m_business_unit.isSet()) {
        obj.insert(QString("businessUnit"), ::OpenAPI::toJsonValue(m_business_unit));
    }
    if (m_completion_estimate_percentage_isSet) {
        obj.insert(QString("completionEstimatePercentage"), ::OpenAPI::toJsonValue(m_completion_estimate_percentage));
    }
    if (m_cost_center.isSet()) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_contact.isSet()) {
        obj.insert(QString("customerContact"), ::OpenAPI::toJsonValue(m_customer_contact));
    }
    if (m_deadline_isSet) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expected_order_date_isSet) {
        obj.insert(QString("expectedOrderDate"), ::OpenAPI::toJsonValue(m_expected_order_date));
    }
    if (m_expected_value.isSet()) {
        obj.insert(QString("expectedValue"), ::OpenAPI::toJsonValue(m_expected_value));
    }
    if (m_internal_name_isSet) {
        obj.insert(QString("internalName"), ::OpenAPI::toJsonValue(m_internal_name));
    }
    if (m_invoice_notes_isSet) {
        obj.insert(QString("invoiceNotes"), ::OpenAPI::toJsonValue(m_invoice_notes));
    }
    if (m_invoice_template.isSet()) {
        obj.insert(QString("invoiceTemplate"), ::OpenAPI::toJsonValue(m_invoice_template));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("isClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_is_joining_allowed_isSet) {
        obj.insert(QString("isJoiningAllowed"), ::OpenAPI::toJsonValue(m_is_joining_allowed));
    }
    if (m_lead_source.isSet()) {
        obj.insert(QString("leadSource"), ::OpenAPI::toJsonValue(m_lead_source));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_our_reference_isSet) {
        obj.insert(QString("ourReference"), ::OpenAPI::toJsonValue(m_our_reference));
    }
    if (m_payment_term_isSet) {
        obj.insert(QString("paymentTerm"), ::OpenAPI::toJsonValue(m_payment_term));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    if (m_project_owner.isSet()) {
        obj.insert(QString("projectOwner"), ::OpenAPI::toJsonValue(m_project_owner));
    }
    if (m_project_status.isSet()) {
        obj.insert(QString("projectStatus"), ::OpenAPI::toJsonValue(m_project_status));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_sales_status.isSet()) {
        obj.insert(QString("salesStatus"), ::OpenAPI::toJsonValue(m_sales_status));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_use_overtime_multipliers_isSet) {
        obj.insert(QString("useOvertimeMultipliers"), ::OpenAPI::toJsonValue(m_use_overtime_multipliers));
    }
    if (m_use_products_from_setting_isSet) {
        obj.insert(QString("useProductsFromSetting"), ::OpenAPI::toJsonValue(m_use_products_from_setting));
    }
    if (m_use_worktypes_from_setting_isSet) {
        obj.insert(QString("useWorktypesFromSetting"), ::OpenAPI::toJsonValue(m_use_worktypes_from_setting));
    }
    if (m_your_reference_isSet) {
        obj.insert(QString("yourReference"), ::OpenAPI::toJsonValue(m_your_reference));
    }
    return obj;
}

OAISimpleInputModel OAIProjectInputModelBase::getBillingContact() const {
    return m_billing_contact;
}
void OAIProjectInputModelBase::setBillingContact(const OAISimpleInputModel &billing_contact) {
    m_billing_contact = billing_contact;
    m_billing_contact_isSet = true;
}

bool OAIProjectInputModelBase::is_billing_contact_Set() const{
    return m_billing_contact_isSet;
}

bool OAIProjectInputModelBase::is_billing_contact_Valid() const{
    return m_billing_contact_isValid;
}

OAISimpleInputRequiredModel OAIProjectInputModelBase::getBusinessUnit() const {
    return m_business_unit;
}
void OAIProjectInputModelBase::setBusinessUnit(const OAISimpleInputRequiredModel &business_unit) {
    m_business_unit = business_unit;
    m_business_unit_isSet = true;
}

bool OAIProjectInputModelBase::is_business_unit_Set() const{
    return m_business_unit_isSet;
}

bool OAIProjectInputModelBase::is_business_unit_Valid() const{
    return m_business_unit_isValid;
}

qint32 OAIProjectInputModelBase::getCompletionEstimatePercentage() const {
    return m_completion_estimate_percentage;
}
void OAIProjectInputModelBase::setCompletionEstimatePercentage(const qint32 &completion_estimate_percentage) {
    m_completion_estimate_percentage = completion_estimate_percentage;
    m_completion_estimate_percentage_isSet = true;
}

bool OAIProjectInputModelBase::is_completion_estimate_percentage_Set() const{
    return m_completion_estimate_percentage_isSet;
}

bool OAIProjectInputModelBase::is_completion_estimate_percentage_Valid() const{
    return m_completion_estimate_percentage_isValid;
}

OAISimpleInputModel OAIProjectInputModelBase::getCostCenter() const {
    return m_cost_center;
}
void OAIProjectInputModelBase::setCostCenter(const OAISimpleInputModel &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIProjectInputModelBase::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIProjectInputModelBase::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

OAISimpleInputRequiredModel OAIProjectInputModelBase::getCurrency() const {
    return m_currency;
}
void OAIProjectInputModelBase::setCurrency(const OAISimpleInputRequiredModel &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIProjectInputModelBase::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIProjectInputModelBase::is_currency_Valid() const{
    return m_currency_isValid;
}

OAISimpleInputRequiredModel OAIProjectInputModelBase::getCustomer() const {
    return m_customer;
}
void OAIProjectInputModelBase::setCustomer(const OAISimpleInputRequiredModel &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProjectInputModelBase::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProjectInputModelBase::is_customer_Valid() const{
    return m_customer_isValid;
}

OAISimpleInputModel OAIProjectInputModelBase::getCustomerContact() const {
    return m_customer_contact;
}
void OAIProjectInputModelBase::setCustomerContact(const OAISimpleInputModel &customer_contact) {
    m_customer_contact = customer_contact;
    m_customer_contact_isSet = true;
}

bool OAIProjectInputModelBase::is_customer_contact_Set() const{
    return m_customer_contact_isSet;
}

bool OAIProjectInputModelBase::is_customer_contact_Valid() const{
    return m_customer_contact_isValid;
}

QDate OAIProjectInputModelBase::getDeadline() const {
    return m_deadline;
}
void OAIProjectInputModelBase::setDeadline(const QDate &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAIProjectInputModelBase::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAIProjectInputModelBase::is_deadline_Valid() const{
    return m_deadline_isValid;
}

QString OAIProjectInputModelBase::getDescription() const {
    return m_description;
}
void OAIProjectInputModelBase::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectInputModelBase::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectInputModelBase::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIProjectInputModelBase::getExpectedOrderDate() const {
    return m_expected_order_date;
}
void OAIProjectInputModelBase::setExpectedOrderDate(const QDate &expected_order_date) {
    m_expected_order_date = expected_order_date;
    m_expected_order_date_isSet = true;
}

bool OAIProjectInputModelBase::is_expected_order_date_Set() const{
    return m_expected_order_date_isSet;
}

bool OAIProjectInputModelBase::is_expected_order_date_Valid() const{
    return m_expected_order_date_isValid;
}

OAIMoneyInputModelWithNullableAmount OAIProjectInputModelBase::getExpectedValue() const {
    return m_expected_value;
}
void OAIProjectInputModelBase::setExpectedValue(const OAIMoneyInputModelWithNullableAmount &expected_value) {
    m_expected_value = expected_value;
    m_expected_value_isSet = true;
}

bool OAIProjectInputModelBase::is_expected_value_Set() const{
    return m_expected_value_isSet;
}

bool OAIProjectInputModelBase::is_expected_value_Valid() const{
    return m_expected_value_isValid;
}

QString OAIProjectInputModelBase::getInternalName() const {
    return m_internal_name;
}
void OAIProjectInputModelBase::setInternalName(const QString &internal_name) {
    m_internal_name = internal_name;
    m_internal_name_isSet = true;
}

bool OAIProjectInputModelBase::is_internal_name_Set() const{
    return m_internal_name_isSet;
}

bool OAIProjectInputModelBase::is_internal_name_Valid() const{
    return m_internal_name_isValid;
}

QString OAIProjectInputModelBase::getInvoiceNotes() const {
    return m_invoice_notes;
}
void OAIProjectInputModelBase::setInvoiceNotes(const QString &invoice_notes) {
    m_invoice_notes = invoice_notes;
    m_invoice_notes_isSet = true;
}

bool OAIProjectInputModelBase::is_invoice_notes_Set() const{
    return m_invoice_notes_isSet;
}

bool OAIProjectInputModelBase::is_invoice_notes_Valid() const{
    return m_invoice_notes_isValid;
}

OAIInvoiceTemplateSubModel OAIProjectInputModelBase::getInvoiceTemplate() const {
    return m_invoice_template;
}
void OAIProjectInputModelBase::setInvoiceTemplate(const OAIInvoiceTemplateSubModel &invoice_template) {
    m_invoice_template = invoice_template;
    m_invoice_template_isSet = true;
}

bool OAIProjectInputModelBase::is_invoice_template_Set() const{
    return m_invoice_template_isSet;
}

bool OAIProjectInputModelBase::is_invoice_template_Valid() const{
    return m_invoice_template_isValid;
}

bool OAIProjectInputModelBase::isIsClosed() const {
    return m_is_closed;
}
void OAIProjectInputModelBase::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIProjectInputModelBase::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIProjectInputModelBase::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

bool OAIProjectInputModelBase::isIsInternal() const {
    return m_is_internal;
}
void OAIProjectInputModelBase::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIProjectInputModelBase::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIProjectInputModelBase::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

bool OAIProjectInputModelBase::isIsJoiningAllowed() const {
    return m_is_joining_allowed;
}
void OAIProjectInputModelBase::setIsJoiningAllowed(const bool &is_joining_allowed) {
    m_is_joining_allowed = is_joining_allowed;
    m_is_joining_allowed_isSet = true;
}

bool OAIProjectInputModelBase::is_is_joining_allowed_Set() const{
    return m_is_joining_allowed_isSet;
}

bool OAIProjectInputModelBase::is_is_joining_allowed_Valid() const{
    return m_is_joining_allowed_isValid;
}

OAISimpleInputModel OAIProjectInputModelBase::getLeadSource() const {
    return m_lead_source;
}
void OAIProjectInputModelBase::setLeadSource(const OAISimpleInputModel &lead_source) {
    m_lead_source = lead_source;
    m_lead_source_isSet = true;
}

bool OAIProjectInputModelBase::is_lead_source_Set() const{
    return m_lead_source_isSet;
}

bool OAIProjectInputModelBase::is_lead_source_Valid() const{
    return m_lead_source_isValid;
}

QString OAIProjectInputModelBase::getName() const {
    return m_name;
}
void OAIProjectInputModelBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectInputModelBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectInputModelBase::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIProjectInputModelBase::getNumber() const {
    return m_number;
}
void OAIProjectInputModelBase::setNumber(const qint64 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIProjectInputModelBase::is_number_Set() const{
    return m_number_isSet;
}

bool OAIProjectInputModelBase::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIProjectInputModelBase::getOrderNumber() const {
    return m_order_number;
}
void OAIProjectInputModelBase::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIProjectInputModelBase::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIProjectInputModelBase::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIProjectInputModelBase::getOurReference() const {
    return m_our_reference;
}
void OAIProjectInputModelBase::setOurReference(const QString &our_reference) {
    m_our_reference = our_reference;
    m_our_reference_isSet = true;
}

bool OAIProjectInputModelBase::is_our_reference_Set() const{
    return m_our_reference_isSet;
}

bool OAIProjectInputModelBase::is_our_reference_Valid() const{
    return m_our_reference_isValid;
}

qint32 OAIProjectInputModelBase::getPaymentTerm() const {
    return m_payment_term;
}
void OAIProjectInputModelBase::setPaymentTerm(const qint32 &payment_term) {
    m_payment_term = payment_term;
    m_payment_term_isSet = true;
}

bool OAIProjectInputModelBase::is_payment_term_Set() const{
    return m_payment_term_isSet;
}

bool OAIProjectInputModelBase::is_payment_term_Valid() const{
    return m_payment_term_isValid;
}

qint32 OAIProjectInputModelBase::getProbability() const {
    return m_probability;
}
void OAIProjectInputModelBase::setProbability(const qint32 &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAIProjectInputModelBase::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAIProjectInputModelBase::is_probability_Valid() const{
    return m_probability_isValid;
}

OAISimpleInputModel OAIProjectInputModelBase::getProjectOwner() const {
    return m_project_owner;
}
void OAIProjectInputModelBase::setProjectOwner(const OAISimpleInputModel &project_owner) {
    m_project_owner = project_owner;
    m_project_owner_isSet = true;
}

bool OAIProjectInputModelBase::is_project_owner_Set() const{
    return m_project_owner_isSet;
}

bool OAIProjectInputModelBase::is_project_owner_Valid() const{
    return m_project_owner_isValid;
}

OAISimpleProjectStatusInputModel OAIProjectInputModelBase::getProjectStatus() const {
    return m_project_status;
}
void OAIProjectInputModelBase::setProjectStatus(const OAISimpleProjectStatusInputModel &project_status) {
    m_project_status = project_status;
    m_project_status_isSet = true;
}

bool OAIProjectInputModelBase::is_project_status_Set() const{
    return m_project_status_isSet;
}

bool OAIProjectInputModelBase::is_project_status_Valid() const{
    return m_project_status_isValid;
}

OAISimpleInputModel OAIProjectInputModelBase::getSalesPerson() const {
    return m_sales_person;
}
void OAIProjectInputModelBase::setSalesPerson(const OAISimpleInputModel &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAIProjectInputModelBase::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAIProjectInputModelBase::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

OAISimpleSalesStatusInputModel OAIProjectInputModelBase::getSalesStatus() const {
    return m_sales_status;
}
void OAIProjectInputModelBase::setSalesStatus(const OAISimpleSalesStatusInputModel &sales_status) {
    m_sales_status = sales_status;
    m_sales_status_isSet = true;
}

bool OAIProjectInputModelBase::is_sales_status_Set() const{
    return m_sales_status_isSet;
}

bool OAIProjectInputModelBase::is_sales_status_Valid() const{
    return m_sales_status_isValid;
}

QDate OAIProjectInputModelBase::getStartDate() const {
    return m_start_date;
}
void OAIProjectInputModelBase::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectInputModelBase::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectInputModelBase::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIProjectInputModelBase::isUseOvertimeMultipliers() const {
    return m_use_overtime_multipliers;
}
void OAIProjectInputModelBase::setUseOvertimeMultipliers(const bool &use_overtime_multipliers) {
    m_use_overtime_multipliers = use_overtime_multipliers;
    m_use_overtime_multipliers_isSet = true;
}

bool OAIProjectInputModelBase::is_use_overtime_multipliers_Set() const{
    return m_use_overtime_multipliers_isSet;
}

bool OAIProjectInputModelBase::is_use_overtime_multipliers_Valid() const{
    return m_use_overtime_multipliers_isValid;
}

bool OAIProjectInputModelBase::isUseProductsFromSetting() const {
    return m_use_products_from_setting;
}
void OAIProjectInputModelBase::setUseProductsFromSetting(const bool &use_products_from_setting) {
    m_use_products_from_setting = use_products_from_setting;
    m_use_products_from_setting_isSet = true;
}

bool OAIProjectInputModelBase::is_use_products_from_setting_Set() const{
    return m_use_products_from_setting_isSet;
}

bool OAIProjectInputModelBase::is_use_products_from_setting_Valid() const{
    return m_use_products_from_setting_isValid;
}

bool OAIProjectInputModelBase::isUseWorktypesFromSetting() const {
    return m_use_worktypes_from_setting;
}
void OAIProjectInputModelBase::setUseWorktypesFromSetting(const bool &use_worktypes_from_setting) {
    m_use_worktypes_from_setting = use_worktypes_from_setting;
    m_use_worktypes_from_setting_isSet = true;
}

bool OAIProjectInputModelBase::is_use_worktypes_from_setting_Set() const{
    return m_use_worktypes_from_setting_isSet;
}

bool OAIProjectInputModelBase::is_use_worktypes_from_setting_Valid() const{
    return m_use_worktypes_from_setting_isValid;
}

QString OAIProjectInputModelBase::getYourReference() const {
    return m_your_reference;
}
void OAIProjectInputModelBase::setYourReference(const QString &your_reference) {
    m_your_reference = your_reference;
    m_your_reference_isSet = true;
}

bool OAIProjectInputModelBase::is_your_reference_Set() const{
    return m_your_reference_isSet;
}

bool OAIProjectInputModelBase::is_your_reference_Valid() const{
    return m_your_reference_isValid;
}

bool OAIProjectInputModelBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_estimate_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_order_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_joining_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_our_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_overtime_multipliers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_products_from_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_worktypes_from_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_your_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectInputModelBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_isValid && m_name_isValid && m_project_owner_isValid && true;
}

} // namespace OpenAPI
