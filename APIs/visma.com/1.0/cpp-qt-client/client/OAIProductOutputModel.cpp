/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductOutputModel::OAIProductOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductOutputModel::OAIProductOutputModel() {
    this->initializeModel();
}

OAIProductOutputModel::~OAIProductOutputModel() {}

void OAIProductOutputModel::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_category_isSet = false;
    m_product_category_isValid = false;

    m_proposal_description_isSet = false;
    m_proposal_description_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIProductOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductOutputModel::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_category_isValid = ::OpenAPI::fromJsonValue(m_product_category, json[QString("productCategory")]);
    m_product_category_isSet = !json[QString("productCategory")].isNull() && m_product_category_isValid;

    m_proposal_description_isValid = ::OpenAPI::fromJsonValue(m_proposal_description, json[QString("proposalDescription")]);
    m_proposal_description_isSet = !json[QString("proposalDescription")].isNull() && m_proposal_description_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIProductOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_category.isSet()) {
        obj.insert(QString("productCategory"), ::OpenAPI::toJsonValue(m_product_category));
    }
    if (m_proposal_description_isSet) {
        obj.insert(QString("proposalDescription"), ::OpenAPI::toJsonValue(m_proposal_description));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

QString OAIProductOutputModel::getCode() const {
    return m_code;
}
void OAIProductOutputModel::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProductOutputModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProductOutputModel::is_code_Valid() const{
    return m_code_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProductOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIProductOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProductOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProductOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIProductOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProductOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProductOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProductOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIProductOutputModel::getGuid() const {
    return m_guid;
}
void OAIProductOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIProductOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIProductOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIProductOutputModel::isIsActive() const {
    return m_is_active;
}
void OAIProductOutputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIProductOutputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIProductOutputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIProductOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIProductOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIProductOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIProductOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIProductOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIProductOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIProductOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIProductOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIProductOutputModel::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIProductOutputModel::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIProductOutputModel::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIProductOutputModel::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIProductOutputModel::getName() const {
    return m_name;
}
void OAIProductOutputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductOutputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductOutputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIModelWithName OAIProductOutputModel::getProductCategory() const {
    return m_product_category;
}
void OAIProductOutputModel::setProductCategory(const OAIModelWithName &product_category) {
    m_product_category = product_category;
    m_product_category_isSet = true;
}

bool OAIProductOutputModel::is_product_category_Set() const{
    return m_product_category_isSet;
}

bool OAIProductOutputModel::is_product_category_Valid() const{
    return m_product_category_isValid;
}

QString OAIProductOutputModel::getProposalDescription() const {
    return m_proposal_description;
}
void OAIProductOutputModel::setProposalDescription(const QString &proposal_description) {
    m_proposal_description = proposal_description;
    m_proposal_description_isSet = true;
}

bool OAIProductOutputModel::is_proposal_description_Set() const{
    return m_proposal_description_isSet;
}

bool OAIProductOutputModel::is_proposal_description_Valid() const{
    return m_proposal_description_isValid;
}

OAIProductSalesAccountSubModel OAIProductOutputModel::getSalesAccount() const {
    return m_sales_account;
}
void OAIProductOutputModel::setSalesAccount(const OAIProductSalesAccountSubModel &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIProductOutputModel::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIProductOutputModel::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIProductType OAIProductOutputModel::getType() const {
    return m_type;
}
void OAIProductOutputModel::setType(const OAIProductType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductOutputModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductOutputModel::is_type_Valid() const{
    return m_type_isValid;
}

OAIMoneyOutputModel OAIProductOutputModel::getUnitCost() const {
    return m_unit_cost;
}
void OAIProductOutputModel::setUnitCost(const OAIMoneyOutputModel &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIProductOutputModel::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIProductOutputModel::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIMoneyOutputModel OAIProductOutputModel::getUnitPrice() const {
    return m_unit_price;
}
void OAIProductOutputModel::setUnitPrice(const OAIMoneyOutputModel &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProductOutputModel::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProductOutputModel::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

double OAIProductOutputModel::getVatRate() const {
    return m_vat_rate;
}
void OAIProductOutputModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIProductOutputModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIProductOutputModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIProductOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
