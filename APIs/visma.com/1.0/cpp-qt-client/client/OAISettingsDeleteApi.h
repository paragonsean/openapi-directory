/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsDeleteApi_H
#define OAI_OAISettingsDeleteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsDeleteApi : public QObject {
    Q_OBJECT

public:
    OAISettingsDeleteApi(const int timeOut = 0);
    ~OAISettingsDeleteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void activityTypesDeleteActivityType(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void communicationTypesDeleteCommunicationType(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void contactRolesDeleteContactRole(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void costAccountsDeleteCostAccount(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void costCentersDeleteCostCenter(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCustomPropertiesDeleteCustomerCustomProperty(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItem(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void industriesDeleteIndustry(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void invoiceStatusesDeleteInvoiceStatus(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void keywordsDeleteKeyword(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void leadSourcesDeleteLeadSource(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void marketSegmentsDeleteMarketSegment(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void overtimesDeleteOvertime(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void phaseStatusTypesDeletePhaseStatusType(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void productCategoriesDeleteProductCategory(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void productCountrySettingsDeleteProductCountrySetting(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void productsDeleteProduct(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectBillingCustomersDeleteProjectBillingCustomer(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectCustomPropertiesDeleteProjectCustomProperty(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItem(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectMemberCostExceptionsDelete(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void projectStatusTypesDeleteProjectStatusType(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void projectTaskStatusesDeleteProjectTaskStatus(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void proposalStatusesDeleteProposalStatus(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void rolesDeleteRole(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesAccountsDeleteSalesAccount(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void salesStatusTypesDeleteSalesStatusType(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void timeEntryTypesDeleteTimeEntryType(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySetting(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void travelExpenseTypesDeleteTravelExpenseType(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void travelReimbursementStatusDeleteTravelReimbursementStatus(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void userCustomPropertiesDeleteUserCustomProperty(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItem(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void vatRatesDeleteVatRate(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void workContractsDeleteWorkContract(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  move_usages_to_guid QString [optional]
    */
    virtual void workTypesDeleteWorkType(const QString &guid, const ::OpenAPI::OptionalParam<QString> &move_usages_to_guid = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activityTypesDeleteActivityTypeCallback(OAIHttpRequestWorker *worker);
    void communicationTypesDeleteCommunicationTypeCallback(OAIHttpRequestWorker *worker);
    void contactRolesDeleteContactRoleCallback(OAIHttpRequestWorker *worker);
    void costAccountsDeleteCostAccountCallback(OAIHttpRequestWorker *worker);
    void costCentersDeleteCostCenterCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertiesDeleteCustomerCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void industriesDeleteIndustryCallback(OAIHttpRequestWorker *worker);
    void invoiceStatusesDeleteInvoiceStatusCallback(OAIHttpRequestWorker *worker);
    void keywordsDeleteKeywordCallback(OAIHttpRequestWorker *worker);
    void leadSourcesDeleteLeadSourceCallback(OAIHttpRequestWorker *worker);
    void marketSegmentsDeleteMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void overtimesDeleteOvertimeCallback(OAIHttpRequestWorker *worker);
    void phaseStatusTypesDeletePhaseStatusTypeCallback(OAIHttpRequestWorker *worker);
    void productCategoriesDeleteProductCategoryCallback(OAIHttpRequestWorker *worker);
    void productCountrySettingsDeleteProductCountrySettingCallback(OAIHttpRequestWorker *worker);
    void productsDeleteProductCallback(OAIHttpRequestWorker *worker);
    void projectBillingCustomersDeleteProjectBillingCustomerCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertiesDeleteProjectCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectStatusTypesDeleteProjectStatusTypeCallback(OAIHttpRequestWorker *worker);
    void projectTaskStatusesDeleteProjectTaskStatusCallback(OAIHttpRequestWorker *worker);
    void proposalStatusesDeleteProposalStatusCallback(OAIHttpRequestWorker *worker);
    void rolesDeleteRoleCallback(OAIHttpRequestWorker *worker);
    void salesAccountsDeleteSalesAccountCallback(OAIHttpRequestWorker *worker);
    void salesStatusTypesDeleteSalesStatusTypeCallback(OAIHttpRequestWorker *worker);
    void timeEntryTypesDeleteTimeEntryTypeCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingCallback(OAIHttpRequestWorker *worker);
    void travelExpenseTypesDeleteTravelExpenseTypeCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementStatusDeleteTravelReimbursementStatusCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertiesDeleteUserCustomPropertyCallback(OAIHttpRequestWorker *worker);
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemCallback(OAIHttpRequestWorker *worker);
    void vatRatesDeleteVatRateCallback(OAIHttpRequestWorker *worker);
    void workContractsDeleteWorkContractCallback(OAIHttpRequestWorker *worker);
    void workTypesDeleteWorkTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activityTypesDeleteActivityTypeSignal();
    void communicationTypesDeleteCommunicationTypeSignal();
    void contactRolesDeleteContactRoleSignal();
    void costAccountsDeleteCostAccountSignal();
    void costCentersDeleteCostCenterSignal();
    void customerCustomPropertiesDeleteCustomerCustomPropertySignal();
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignal();
    void industriesDeleteIndustrySignal();
    void invoiceStatusesDeleteInvoiceStatusSignal();
    void keywordsDeleteKeywordSignal();
    void leadSourcesDeleteLeadSourceSignal();
    void marketSegmentsDeleteMarketSegmentSignal();
    void overtimesDeleteOvertimeSignal();
    void phaseStatusTypesDeletePhaseStatusTypeSignal();
    void productCategoriesDeleteProductCategorySignal();
    void productCountrySettingsDeleteProductCountrySettingSignal();
    void productsDeleteProductSignal();
    void projectBillingCustomersDeleteProjectBillingCustomerSignal();
    void projectCustomPropertiesDeleteProjectCustomPropertySignal();
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignal();
    void projectMemberCostExceptionsDeleteSignal();
    void projectStatusTypesDeleteProjectStatusTypeSignal();
    void projectTaskStatusesDeleteProjectTaskStatusSignal();
    void proposalStatusesDeleteProposalStatusSignal();
    void rolesDeleteRoleSignal();
    void salesAccountsDeleteSalesAccountSignal();
    void salesStatusTypesDeleteSalesStatusTypeSignal();
    void timeEntryTypesDeleteTimeEntryTypeSignal();
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignal();
    void travelExpenseTypesDeleteTravelExpenseTypeSignal();
    void travelReimbursementStatusDeleteTravelReimbursementStatusSignal();
    void userCustomPropertiesDeleteUserCustomPropertySignal();
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignal();
    void vatRatesDeleteVatRateSignal();
    void workContractsDeleteWorkContractSignal();
    void workTypesDeleteWorkTypeSignal();


    void activityTypesDeleteActivityTypeSignalFull(OAIHttpRequestWorker *worker);
    void communicationTypesDeleteCommunicationTypeSignalFull(OAIHttpRequestWorker *worker);
    void contactRolesDeleteContactRoleSignalFull(OAIHttpRequestWorker *worker);
    void costAccountsDeleteCostAccountSignalFull(OAIHttpRequestWorker *worker);
    void costCentersDeleteCostCenterSignalFull(OAIHttpRequestWorker *worker);
    void customerCustomPropertiesDeleteCustomerCustomPropertySignalFull(OAIHttpRequestWorker *worker);
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker);
    void industriesDeleteIndustrySignalFull(OAIHttpRequestWorker *worker);
    void invoiceStatusesDeleteInvoiceStatusSignalFull(OAIHttpRequestWorker *worker);
    void keywordsDeleteKeywordSignalFull(OAIHttpRequestWorker *worker);
    void leadSourcesDeleteLeadSourceSignalFull(OAIHttpRequestWorker *worker);
    void marketSegmentsDeleteMarketSegmentSignalFull(OAIHttpRequestWorker *worker);
    void overtimesDeleteOvertimeSignalFull(OAIHttpRequestWorker *worker);
    void phaseStatusTypesDeletePhaseStatusTypeSignalFull(OAIHttpRequestWorker *worker);
    void productCategoriesDeleteProductCategorySignalFull(OAIHttpRequestWorker *worker);
    void productCountrySettingsDeleteProductCountrySettingSignalFull(OAIHttpRequestWorker *worker);
    void productsDeleteProductSignalFull(OAIHttpRequestWorker *worker);
    void projectBillingCustomersDeleteProjectBillingCustomerSignalFull(OAIHttpRequestWorker *worker);
    void projectCustomPropertiesDeleteProjectCustomPropertySignalFull(OAIHttpRequestWorker *worker);
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectStatusTypesDeleteProjectStatusTypeSignalFull(OAIHttpRequestWorker *worker);
    void projectTaskStatusesDeleteProjectTaskStatusSignalFull(OAIHttpRequestWorker *worker);
    void proposalStatusesDeleteProposalStatusSignalFull(OAIHttpRequestWorker *worker);
    void rolesDeleteRoleSignalFull(OAIHttpRequestWorker *worker);
    void salesAccountsDeleteSalesAccountSignalFull(OAIHttpRequestWorker *worker);
    void salesStatusTypesDeleteSalesStatusTypeSignalFull(OAIHttpRequestWorker *worker);
    void timeEntryTypesDeleteTimeEntryTypeSignalFull(OAIHttpRequestWorker *worker);
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalFull(OAIHttpRequestWorker *worker);
    void travelExpenseTypesDeleteTravelExpenseTypeSignalFull(OAIHttpRequestWorker *worker);
    void travelReimbursementStatusDeleteTravelReimbursementStatusSignalFull(OAIHttpRequestWorker *worker);
    void userCustomPropertiesDeleteUserCustomPropertySignalFull(OAIHttpRequestWorker *worker);
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalFull(OAIHttpRequestWorker *worker);
    void vatRatesDeleteVatRateSignalFull(OAIHttpRequestWorker *worker);
    void workContractsDeleteWorkContractSignalFull(OAIHttpRequestWorker *worker);
    void workTypesDeleteWorkTypeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activityTypesDeleteActivityTypeSignalError() instead")
    void activityTypesDeleteActivityTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesDeleteActivityTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesDeleteCommunicationTypeSignalError() instead")
    void communicationTypesDeleteCommunicationTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesDeleteCommunicationTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesDeleteContactRoleSignalError() instead")
    void contactRolesDeleteContactRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesDeleteContactRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsDeleteCostAccountSignalError() instead")
    void costAccountsDeleteCostAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsDeleteCostAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersDeleteCostCenterSignalError() instead")
    void costCentersDeleteCostCenterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersDeleteCostCenterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesDeleteCustomerCustomPropertySignalError() instead")
    void customerCustomPropertiesDeleteCustomerCustomPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesDeleteCustomerCustomPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalError() instead")
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesDeleteIndustrySignalError() instead")
    void industriesDeleteIndustrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void industriesDeleteIndustrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesDeleteInvoiceStatusSignalError() instead")
    void invoiceStatusesDeleteInvoiceStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesDeleteInvoiceStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsDeleteKeywordSignalError() instead")
    void keywordsDeleteKeywordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsDeleteKeywordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesDeleteLeadSourceSignalError() instead")
    void leadSourcesDeleteLeadSourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesDeleteLeadSourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsDeleteMarketSegmentSignalError() instead")
    void marketSegmentsDeleteMarketSegmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsDeleteMarketSegmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesDeleteOvertimeSignalError() instead")
    void overtimesDeleteOvertimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesDeleteOvertimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesDeletePhaseStatusTypeSignalError() instead")
    void phaseStatusTypesDeletePhaseStatusTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesDeletePhaseStatusTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesDeleteProductCategorySignalError() instead")
    void productCategoriesDeleteProductCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesDeleteProductCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsDeleteProductCountrySettingSignalError() instead")
    void productCountrySettingsDeleteProductCountrySettingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsDeleteProductCountrySettingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsDeleteProductSignalError() instead")
    void productsDeleteProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsDeleteProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersDeleteProjectBillingCustomerSignalError() instead")
    void projectBillingCustomersDeleteProjectBillingCustomerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersDeleteProjectBillingCustomerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesDeleteProjectCustomPropertySignalError() instead")
    void projectCustomPropertiesDeleteProjectCustomPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesDeleteProjectCustomPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalError() instead")
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsDeleteSignalError() instead")
    void projectMemberCostExceptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesDeleteProjectStatusTypeSignalError() instead")
    void projectStatusTypesDeleteProjectStatusTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesDeleteProjectStatusTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesDeleteProjectTaskStatusSignalError() instead")
    void projectTaskStatusesDeleteProjectTaskStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesDeleteProjectTaskStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesDeleteProposalStatusSignalError() instead")
    void proposalStatusesDeleteProposalStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesDeleteProposalStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesDeleteRoleSignalError() instead")
    void rolesDeleteRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rolesDeleteRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsDeleteSalesAccountSignalError() instead")
    void salesAccountsDeleteSalesAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsDeleteSalesAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesDeleteSalesStatusTypeSignalError() instead")
    void salesStatusTypesDeleteSalesStatusTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesDeleteSalesStatusTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesDeleteTimeEntryTypeSignalError() instead")
    void timeEntryTypesDeleteTimeEntryTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesDeleteTimeEntryTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalError() instead")
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesDeleteTravelExpenseTypeSignalError() instead")
    void travelExpenseTypesDeleteTravelExpenseTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesDeleteTravelExpenseTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusDeleteTravelReimbursementStatusSignalError() instead")
    void travelReimbursementStatusDeleteTravelReimbursementStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusDeleteTravelReimbursementStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesDeleteUserCustomPropertySignalError() instead")
    void userCustomPropertiesDeleteUserCustomPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesDeleteUserCustomPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalError() instead")
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesDeleteVatRateSignalError() instead")
    void vatRatesDeleteVatRateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesDeleteVatRateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsDeleteWorkContractSignalError() instead")
    void workContractsDeleteWorkContractSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsDeleteWorkContractSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesDeleteWorkTypeSignalError() instead")
    void workTypesDeleteWorkTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesDeleteWorkTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activityTypesDeleteActivityTypeSignalErrorFull() instead")
    void activityTypesDeleteActivityTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityTypesDeleteActivityTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use communicationTypesDeleteCommunicationTypeSignalErrorFull() instead")
    void communicationTypesDeleteCommunicationTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationTypesDeleteCommunicationTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactRolesDeleteContactRoleSignalErrorFull() instead")
    void contactRolesDeleteContactRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactRolesDeleteContactRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costAccountsDeleteCostAccountSignalErrorFull() instead")
    void costAccountsDeleteCostAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costAccountsDeleteCostAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use costCentersDeleteCostCenterSignalErrorFull() instead")
    void costCentersDeleteCostCenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void costCentersDeleteCostCenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertiesDeleteCustomerCustomPropertySignalErrorFull() instead")
    void customerCustomPropertiesDeleteCustomerCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertiesDeleteCustomerCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalErrorFull() instead")
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use industriesDeleteIndustrySignalErrorFull() instead")
    void industriesDeleteIndustrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void industriesDeleteIndustrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceStatusesDeleteInvoiceStatusSignalErrorFull() instead")
    void invoiceStatusesDeleteInvoiceStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceStatusesDeleteInvoiceStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsDeleteKeywordSignalErrorFull() instead")
    void keywordsDeleteKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsDeleteKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadSourcesDeleteLeadSourceSignalErrorFull() instead")
    void leadSourcesDeleteLeadSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leadSourcesDeleteLeadSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketSegmentsDeleteMarketSegmentSignalErrorFull() instead")
    void marketSegmentsDeleteMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSegmentsDeleteMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overtimesDeleteOvertimeSignalErrorFull() instead")
    void overtimesDeleteOvertimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overtimesDeleteOvertimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phaseStatusTypesDeletePhaseStatusTypeSignalErrorFull() instead")
    void phaseStatusTypesDeletePhaseStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phaseStatusTypesDeletePhaseStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesDeleteProductCategorySignalErrorFull() instead")
    void productCategoriesDeleteProductCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesDeleteProductCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountrySettingsDeleteProductCountrySettingSignalErrorFull() instead")
    void productCountrySettingsDeleteProductCountrySettingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountrySettingsDeleteProductCountrySettingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsDeleteProductSignalErrorFull() instead")
    void productsDeleteProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsDeleteProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectBillingCustomersDeleteProjectBillingCustomerSignalErrorFull() instead")
    void projectBillingCustomersDeleteProjectBillingCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectBillingCustomersDeleteProjectBillingCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertiesDeleteProjectCustomPropertySignalErrorFull() instead")
    void projectCustomPropertiesDeleteProjectCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertiesDeleteProjectCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalErrorFull() instead")
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsDeleteSignalErrorFull() instead")
    void projectMemberCostExceptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectStatusTypesDeleteProjectStatusTypeSignalErrorFull() instead")
    void projectStatusTypesDeleteProjectStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectStatusTypesDeleteProjectStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskStatusesDeleteProjectTaskStatusSignalErrorFull() instead")
    void projectTaskStatusesDeleteProjectTaskStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskStatusesDeleteProjectTaskStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proposalStatusesDeleteProposalStatusSignalErrorFull() instead")
    void proposalStatusesDeleteProposalStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proposalStatusesDeleteProposalStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesDeleteRoleSignalErrorFull() instead")
    void rolesDeleteRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesDeleteRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesAccountsDeleteSalesAccountSignalErrorFull() instead")
    void salesAccountsDeleteSalesAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesAccountsDeleteSalesAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesStatusTypesDeleteSalesStatusTypeSignalErrorFull() instead")
    void salesStatusTypesDeleteSalesStatusTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesStatusTypesDeleteSalesStatusTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeEntryTypesDeleteTimeEntryTypeSignalErrorFull() instead")
    void timeEntryTypesDeleteTimeEntryTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeEntryTypesDeleteTimeEntryTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalErrorFull() instead")
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelExpenseTypesDeleteTravelExpenseTypeSignalErrorFull() instead")
    void travelExpenseTypesDeleteTravelExpenseTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelExpenseTypesDeleteTravelExpenseTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementStatusDeleteTravelReimbursementStatusSignalErrorFull() instead")
    void travelReimbursementStatusDeleteTravelReimbursementStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementStatusDeleteTravelReimbursementStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertiesDeleteUserCustomPropertySignalErrorFull() instead")
    void userCustomPropertiesDeleteUserCustomPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertiesDeleteUserCustomPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalErrorFull() instead")
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesDeleteVatRateSignalErrorFull() instead")
    void vatRatesDeleteVatRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesDeleteVatRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsDeleteWorkContractSignalErrorFull() instead")
    void workContractsDeleteWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsDeleteWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypesDeleteWorkTypeSignalErrorFull() instead")
    void workTypesDeleteWorkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypesDeleteWorkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
