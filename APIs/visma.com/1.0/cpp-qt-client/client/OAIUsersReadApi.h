/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersReadApi_H
#define OAI_OAIUsersReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAIFlextimeAdjustmentOutputModel.h"
#include "OAIFlextimeModel.h"
#include "OAIGetUsersPurpose.h"
#include "OAIKeyValuePairOfStringAndSortDirection.h"
#include "OAIProjectMemberCostExceptionOutputModel.h"
#include "OAIUserCustomValueOutputModel.h"
#include "OAIUserKeywordModel.h"
#include "OAIUserOutputModel.h"
#include "OAIWorkContractOutputModel.h"
#include "OAIWorkdayModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersReadApi : public QObject {
    Q_OBJECT

public:
    OAIUsersReadApi(const int timeOut = 0);
    ~OAIUsersReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void flextimeAdjustmentsGetFlextimeAdjustment(const QString &guid);

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void flextimeAdjustmentsGetFlextimeAdjustments(const QString &user_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  event_date QDateTime [optional]
    */
    virtual void flextimeGetFlextime(const QString &user_guid, const ::OpenAPI::OptionalParam<QDateTime> &event_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void keywordsGetUserKeywords(const QString &user_guid, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  is_project_closed bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser(const QString &user_guid, const ::OpenAPI::OptionalParam<bool> &is_project_closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void userCustomValuesGetUserCustomValue(const QString &guid);

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  targets QList<QString> [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void userCustomValuesGetUserCustomValues(const QString &user_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &targets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void usersGetUser(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  business_unit_guids QList<QString> [optional]
    * @param[in]  keyword_guids QList<QString> [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  supervisor_user_guids QList<QString> [optional]
    * @param[in]  code QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  purpose OAIGetUsersPurpose [optional]
    */
    virtual void usersGetUsers(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &keyword_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &supervisor_user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetUsersPurpose> &purpose = ::OpenAPI::OptionalParam<OAIGetUsersPurpose>());

    /**
    * @param[in]  user_guid QString [required]
    */
    virtual void workContractsGetCurrentWorkContractForUser(const QString &user_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void workContractsGetWorkContract(const QString &guid);

    /**
    * @param[in]  user_guid QString [required]
    */
    virtual void workContractsGetWorkContractsForUser(const QString &user_guid);

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    virtual void workdaysGetWorkdays(const QString &user_guid, const QDateTime &start_date, const QDateTime &end_date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void flextimeAdjustmentsGetFlextimeAdjustmentCallback(OAIHttpRequestWorker *worker);
    void flextimeAdjustmentsGetFlextimeAdjustmentsCallback(OAIHttpRequestWorker *worker);
    void flextimeGetFlextimeCallback(OAIHttpRequestWorker *worker);
    void keywordsGetUserKeywordsCallback(OAIHttpRequestWorker *worker);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserCallback(OAIHttpRequestWorker *worker);
    void userCustomValuesGetUserCustomValueCallback(OAIHttpRequestWorker *worker);
    void userCustomValuesGetUserCustomValuesCallback(OAIHttpRequestWorker *worker);
    void usersGetUserCallback(OAIHttpRequestWorker *worker);
    void usersGetUsersCallback(OAIHttpRequestWorker *worker);
    void workContractsGetCurrentWorkContractForUserCallback(OAIHttpRequestWorker *worker);
    void workContractsGetWorkContractCallback(OAIHttpRequestWorker *worker);
    void workContractsGetWorkContractsForUserCallback(OAIHttpRequestWorker *worker);
    void workdaysGetWorkdaysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void flextimeAdjustmentsGetFlextimeAdjustmentSignal(OAIFlextimeAdjustmentOutputModel summary);
    void flextimeAdjustmentsGetFlextimeAdjustmentsSignal(QList<OAIFlextimeAdjustmentOutputModel> summary);
    void flextimeGetFlextimeSignal(OAIFlextimeModel summary);
    void keywordsGetUserKeywordsSignal(QList<OAIUserKeywordModel> summary);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignal(QList<OAIProjectMemberCostExceptionOutputModel> summary);
    void userCustomValuesGetUserCustomValueSignal(OAIUserCustomValueOutputModel summary);
    void userCustomValuesGetUserCustomValuesSignal(QList<OAIUserCustomValueOutputModel> summary);
    void usersGetUserSignal(OAIUserOutputModel summary);
    void usersGetUsersSignal(QList<OAIUserOutputModel> summary);
    void workContractsGetCurrentWorkContractForUserSignal(OAIWorkContractOutputModel summary);
    void workContractsGetWorkContractSignal(OAIWorkContractOutputModel summary);
    void workContractsGetWorkContractsForUserSignal(QList<OAIWorkContractOutputModel> summary);
    void workdaysGetWorkdaysSignal(QList<OAIWorkdayModel> summary);


    void flextimeAdjustmentsGetFlextimeAdjustmentSignalFull(OAIHttpRequestWorker *worker, OAIFlextimeAdjustmentOutputModel summary);
    void flextimeAdjustmentsGetFlextimeAdjustmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlextimeAdjustmentOutputModel> summary);
    void flextimeGetFlextimeSignalFull(OAIHttpRequestWorker *worker, OAIFlextimeModel summary);
    void keywordsGetUserKeywordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserKeywordModel> summary);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectMemberCostExceptionOutputModel> summary);
    void userCustomValuesGetUserCustomValueSignalFull(OAIHttpRequestWorker *worker, OAIUserCustomValueOutputModel summary);
    void userCustomValuesGetUserCustomValuesSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCustomValueOutputModel> summary);
    void usersGetUserSignalFull(OAIHttpRequestWorker *worker, OAIUserOutputModel summary);
    void usersGetUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserOutputModel> summary);
    void workContractsGetCurrentWorkContractForUserSignalFull(OAIHttpRequestWorker *worker, OAIWorkContractOutputModel summary);
    void workContractsGetWorkContractSignalFull(OAIHttpRequestWorker *worker, OAIWorkContractOutputModel summary);
    void workContractsGetWorkContractsForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkContractOutputModel> summary);
    void workdaysGetWorkdaysSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkdayModel> summary);

    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsGetFlextimeAdjustmentSignalError() instead")
    void flextimeAdjustmentsGetFlextimeAdjustmentSignalE(OAIFlextimeAdjustmentOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsGetFlextimeAdjustmentSignalError(OAIFlextimeAdjustmentOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsGetFlextimeAdjustmentsSignalError() instead")
    void flextimeAdjustmentsGetFlextimeAdjustmentsSignalE(QList<OAIFlextimeAdjustmentOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsGetFlextimeAdjustmentsSignalError(QList<OAIFlextimeAdjustmentOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeGetFlextimeSignalError() instead")
    void flextimeGetFlextimeSignalE(OAIFlextimeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeGetFlextimeSignalError(OAIFlextimeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetUserKeywordsSignalError() instead")
    void keywordsGetUserKeywordsSignalE(QList<OAIUserKeywordModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetUserKeywordsSignalError(QList<OAIUserKeywordModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalError() instead")
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalE(QList<OAIProjectMemberCostExceptionOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalError(QList<OAIProjectMemberCostExceptionOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesGetUserCustomValueSignalError() instead")
    void userCustomValuesGetUserCustomValueSignalE(OAIUserCustomValueOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesGetUserCustomValueSignalError(OAIUserCustomValueOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesGetUserCustomValuesSignalError() instead")
    void userCustomValuesGetUserCustomValuesSignalE(QList<OAIUserCustomValueOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesGetUserCustomValuesSignalError(QList<OAIUserCustomValueOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetUserSignalError() instead")
    void usersGetUserSignalE(OAIUserOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUserSignalError(OAIUserOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetUsersSignalError() instead")
    void usersGetUsersSignalE(QList<OAIUserOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUsersSignalError(QList<OAIUserOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetCurrentWorkContractForUserSignalError() instead")
    void workContractsGetCurrentWorkContractForUserSignalE(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetCurrentWorkContractForUserSignalError(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetWorkContractSignalError() instead")
    void workContractsGetWorkContractSignalE(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetWorkContractSignalError(OAIWorkContractOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetWorkContractsForUserSignalError() instead")
    void workContractsGetWorkContractsForUserSignalE(QList<OAIWorkContractOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetWorkContractsForUserSignalError(QList<OAIWorkContractOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workdaysGetWorkdaysSignalError() instead")
    void workdaysGetWorkdaysSignalE(QList<OAIWorkdayModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workdaysGetWorkdaysSignalError(QList<OAIWorkdayModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsGetFlextimeAdjustmentSignalErrorFull() instead")
    void flextimeAdjustmentsGetFlextimeAdjustmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsGetFlextimeAdjustmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeAdjustmentsGetFlextimeAdjustmentsSignalErrorFull() instead")
    void flextimeAdjustmentsGetFlextimeAdjustmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeAdjustmentsGetFlextimeAdjustmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flextimeGetFlextimeSignalErrorFull() instead")
    void flextimeGetFlextimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flextimeGetFlextimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetUserKeywordsSignalErrorFull() instead")
    void keywordsGetUserKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetUserKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalErrorFull() instead")
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesGetUserCustomValueSignalErrorFull() instead")
    void userCustomValuesGetUserCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesGetUserCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCustomValuesGetUserCustomValuesSignalErrorFull() instead")
    void userCustomValuesGetUserCustomValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCustomValuesGetUserCustomValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetUserSignalErrorFull() instead")
    void usersGetUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetUsersSignalErrorFull() instead")
    void usersGetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetCurrentWorkContractForUserSignalErrorFull() instead")
    void workContractsGetCurrentWorkContractForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetCurrentWorkContractForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetWorkContractSignalErrorFull() instead")
    void workContractsGetWorkContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetWorkContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workContractsGetWorkContractsForUserSignalErrorFull() instead")
    void workContractsGetWorkContractsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workContractsGetWorkContractsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workdaysGetWorkdaysSignalErrorFull() instead")
    void workdaysGetWorkdaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workdaysGetWorkdaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
