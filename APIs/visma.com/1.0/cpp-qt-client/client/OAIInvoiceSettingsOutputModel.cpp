/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceSettingsOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceSettingsOutputModel::OAIInvoiceSettingsOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceSettingsOutputModel::OAIInvoiceSettingsOutputModel() {
    this->initializeModel();
}

OAIInvoiceSettingsOutputModel::~OAIInvoiceSettingsOutputModel() {}

void OAIInvoiceSettingsOutputModel::initializeModel() {

    m_category_sort_order_isSet = false;
    m_category_sort_order_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_reverse_charged_isSet = false;
    m_is_reverse_charged_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_project_fee_description_format_isSet = false;
    m_project_fee_description_format_isValid = false;

    m_project_fee_grouping_isSet = false;
    m_project_fee_grouping_isValid = false;

    m_project_fee_primary_group_by_isSet = false;
    m_project_fee_primary_group_by_isValid = false;

    m_project_fee_secondary_group_by_isSet = false;
    m_project_fee_secondary_group_by_isValid = false;

    m_project_travel_expense_description_format_isSet = false;
    m_project_travel_expense_description_format_isValid = false;

    m_project_travel_expense_grouping_isSet = false;
    m_project_travel_expense_grouping_isValid = false;

    m_project_travel_expense_primary_group_by_isSet = false;
    m_project_travel_expense_primary_group_by_isValid = false;

    m_project_travel_expense_secondary_group_by_isSet = false;
    m_project_travel_expense_secondary_group_by_isValid = false;

    m_reverse_charge_description_isSet = false;
    m_reverse_charge_description_isValid = false;

    m_show_attachment_price_excluding_value_added_tax_isSet = false;
    m_show_attachment_price_excluding_value_added_tax_isValid = false;

    m_show_attachment_quantity_isSet = false;
    m_show_attachment_quantity_isValid = false;

    m_show_attachment_unit_isSet = false;
    m_show_attachment_unit_isValid = false;

    m_show_attachment_unit_price_isSet = false;
    m_show_attachment_unit_price_isValid = false;

    m_show_attachment_value_added_tax_isSet = false;
    m_show_attachment_value_added_tax_isValid = false;

    m_show_categories_isSet = false;
    m_show_categories_isValid = false;

    m_show_footer_isSet = false;
    m_show_footer_isValid = false;

    m_show_logo_and_title_isSet = false;
    m_show_logo_and_title_isValid = false;

    m_show_price_excluding_value_added_tax_isSet = false;
    m_show_price_excluding_value_added_tax_isValid = false;

    m_show_quantity_isSet = false;
    m_show_quantity_isValid = false;

    m_show_reference_number_isSet = false;
    m_show_reference_number_isValid = false;

    m_show_unit_isSet = false;
    m_show_unit_isValid = false;

    m_show_unit_price_isSet = false;
    m_show_unit_price_isValid = false;

    m_show_value_added_tax_isSet = false;
    m_show_value_added_tax_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_work_hour_description_format_isSet = false;
    m_work_hour_description_format_isValid = false;

    m_work_hour_grouping_isSet = false;
    m_work_hour_grouping_isValid = false;

    m_work_hour_primary_group_by_isSet = false;
    m_work_hour_primary_group_by_isValid = false;

    m_work_hour_secondary_group_by_isSet = false;
    m_work_hour_secondary_group_by_isValid = false;
}

void OAIInvoiceSettingsOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceSettingsOutputModel::fromJsonObject(QJsonObject json) {

    m_category_sort_order_isValid = ::OpenAPI::fromJsonValue(m_category_sort_order, json[QString("categorySortOrder")]);
    m_category_sort_order_isSet = !json[QString("categorySortOrder")].isNull() && m_category_sort_order_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("entryDate")]);
    m_entry_date_isSet = !json[QString("entryDate")].isNull() && m_entry_date_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_reverse_charged_isValid = ::OpenAPI::fromJsonValue(m_is_reverse_charged, json[QString("isReverseCharged")]);
    m_is_reverse_charged_isSet = !json[QString("isReverseCharged")].isNull() && m_is_reverse_charged_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("paymentDate")]);
    m_payment_date_isSet = !json[QString("paymentDate")].isNull() && m_payment_date_isValid;

    m_project_fee_description_format_isValid = ::OpenAPI::fromJsonValue(m_project_fee_description_format, json[QString("projectFeeDescriptionFormat")]);
    m_project_fee_description_format_isSet = !json[QString("projectFeeDescriptionFormat")].isNull() && m_project_fee_description_format_isValid;

    m_project_fee_grouping_isValid = ::OpenAPI::fromJsonValue(m_project_fee_grouping, json[QString("projectFeeGrouping")]);
    m_project_fee_grouping_isSet = !json[QString("projectFeeGrouping")].isNull() && m_project_fee_grouping_isValid;

    m_project_fee_primary_group_by_isValid = ::OpenAPI::fromJsonValue(m_project_fee_primary_group_by, json[QString("projectFeePrimaryGroupBy")]);
    m_project_fee_primary_group_by_isSet = !json[QString("projectFeePrimaryGroupBy")].isNull() && m_project_fee_primary_group_by_isValid;

    m_project_fee_secondary_group_by_isValid = ::OpenAPI::fromJsonValue(m_project_fee_secondary_group_by, json[QString("projectFeeSecondaryGroupBy")]);
    m_project_fee_secondary_group_by_isSet = !json[QString("projectFeeSecondaryGroupBy")].isNull() && m_project_fee_secondary_group_by_isValid;

    m_project_travel_expense_description_format_isValid = ::OpenAPI::fromJsonValue(m_project_travel_expense_description_format, json[QString("projectTravelExpenseDescriptionFormat")]);
    m_project_travel_expense_description_format_isSet = !json[QString("projectTravelExpenseDescriptionFormat")].isNull() && m_project_travel_expense_description_format_isValid;

    m_project_travel_expense_grouping_isValid = ::OpenAPI::fromJsonValue(m_project_travel_expense_grouping, json[QString("projectTravelExpenseGrouping")]);
    m_project_travel_expense_grouping_isSet = !json[QString("projectTravelExpenseGrouping")].isNull() && m_project_travel_expense_grouping_isValid;

    m_project_travel_expense_primary_group_by_isValid = ::OpenAPI::fromJsonValue(m_project_travel_expense_primary_group_by, json[QString("projectTravelExpensePrimaryGroupBy")]);
    m_project_travel_expense_primary_group_by_isSet = !json[QString("projectTravelExpensePrimaryGroupBy")].isNull() && m_project_travel_expense_primary_group_by_isValid;

    m_project_travel_expense_secondary_group_by_isValid = ::OpenAPI::fromJsonValue(m_project_travel_expense_secondary_group_by, json[QString("projectTravelExpenseSecondaryGroupBy")]);
    m_project_travel_expense_secondary_group_by_isSet = !json[QString("projectTravelExpenseSecondaryGroupBy")].isNull() && m_project_travel_expense_secondary_group_by_isValid;

    m_reverse_charge_description_isValid = ::OpenAPI::fromJsonValue(m_reverse_charge_description, json[QString("reverseChargeDescription")]);
    m_reverse_charge_description_isSet = !json[QString("reverseChargeDescription")].isNull() && m_reverse_charge_description_isValid;

    m_show_attachment_price_excluding_value_added_tax_isValid = ::OpenAPI::fromJsonValue(m_show_attachment_price_excluding_value_added_tax, json[QString("showAttachmentPriceExcludingValueAddedTax")]);
    m_show_attachment_price_excluding_value_added_tax_isSet = !json[QString("showAttachmentPriceExcludingValueAddedTax")].isNull() && m_show_attachment_price_excluding_value_added_tax_isValid;

    m_show_attachment_quantity_isValid = ::OpenAPI::fromJsonValue(m_show_attachment_quantity, json[QString("showAttachmentQuantity")]);
    m_show_attachment_quantity_isSet = !json[QString("showAttachmentQuantity")].isNull() && m_show_attachment_quantity_isValid;

    m_show_attachment_unit_isValid = ::OpenAPI::fromJsonValue(m_show_attachment_unit, json[QString("showAttachmentUnit")]);
    m_show_attachment_unit_isSet = !json[QString("showAttachmentUnit")].isNull() && m_show_attachment_unit_isValid;

    m_show_attachment_unit_price_isValid = ::OpenAPI::fromJsonValue(m_show_attachment_unit_price, json[QString("showAttachmentUnitPrice")]);
    m_show_attachment_unit_price_isSet = !json[QString("showAttachmentUnitPrice")].isNull() && m_show_attachment_unit_price_isValid;

    m_show_attachment_value_added_tax_isValid = ::OpenAPI::fromJsonValue(m_show_attachment_value_added_tax, json[QString("showAttachmentValueAddedTax")]);
    m_show_attachment_value_added_tax_isSet = !json[QString("showAttachmentValueAddedTax")].isNull() && m_show_attachment_value_added_tax_isValid;

    m_show_categories_isValid = ::OpenAPI::fromJsonValue(m_show_categories, json[QString("showCategories")]);
    m_show_categories_isSet = !json[QString("showCategories")].isNull() && m_show_categories_isValid;

    m_show_footer_isValid = ::OpenAPI::fromJsonValue(m_show_footer, json[QString("showFooter")]);
    m_show_footer_isSet = !json[QString("showFooter")].isNull() && m_show_footer_isValid;

    m_show_logo_and_title_isValid = ::OpenAPI::fromJsonValue(m_show_logo_and_title, json[QString("showLogoAndTitle")]);
    m_show_logo_and_title_isSet = !json[QString("showLogoAndTitle")].isNull() && m_show_logo_and_title_isValid;

    m_show_price_excluding_value_added_tax_isValid = ::OpenAPI::fromJsonValue(m_show_price_excluding_value_added_tax, json[QString("showPriceExcludingValueAddedTax")]);
    m_show_price_excluding_value_added_tax_isSet = !json[QString("showPriceExcludingValueAddedTax")].isNull() && m_show_price_excluding_value_added_tax_isValid;

    m_show_quantity_isValid = ::OpenAPI::fromJsonValue(m_show_quantity, json[QString("showQuantity")]);
    m_show_quantity_isSet = !json[QString("showQuantity")].isNull() && m_show_quantity_isValid;

    m_show_reference_number_isValid = ::OpenAPI::fromJsonValue(m_show_reference_number, json[QString("showReferenceNumber")]);
    m_show_reference_number_isSet = !json[QString("showReferenceNumber")].isNull() && m_show_reference_number_isValid;

    m_show_unit_isValid = ::OpenAPI::fromJsonValue(m_show_unit, json[QString("showUnit")]);
    m_show_unit_isSet = !json[QString("showUnit")].isNull() && m_show_unit_isValid;

    m_show_unit_price_isValid = ::OpenAPI::fromJsonValue(m_show_unit_price, json[QString("showUnitPrice")]);
    m_show_unit_price_isSet = !json[QString("showUnitPrice")].isNull() && m_show_unit_price_isValid;

    m_show_value_added_tax_isValid = ::OpenAPI::fromJsonValue(m_show_value_added_tax, json[QString("showValueAddedTax")]);
    m_show_value_added_tax_isSet = !json[QString("showValueAddedTax")].isNull() && m_show_value_added_tax_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_work_hour_description_format_isValid = ::OpenAPI::fromJsonValue(m_work_hour_description_format, json[QString("workHourDescriptionFormat")]);
    m_work_hour_description_format_isSet = !json[QString("workHourDescriptionFormat")].isNull() && m_work_hour_description_format_isValid;

    m_work_hour_grouping_isValid = ::OpenAPI::fromJsonValue(m_work_hour_grouping, json[QString("workHourGrouping")]);
    m_work_hour_grouping_isSet = !json[QString("workHourGrouping")].isNull() && m_work_hour_grouping_isValid;

    m_work_hour_primary_group_by_isValid = ::OpenAPI::fromJsonValue(m_work_hour_primary_group_by, json[QString("workHourPrimaryGroupBy")]);
    m_work_hour_primary_group_by_isSet = !json[QString("workHourPrimaryGroupBy")].isNull() && m_work_hour_primary_group_by_isValid;

    m_work_hour_secondary_group_by_isValid = ::OpenAPI::fromJsonValue(m_work_hour_secondary_group_by, json[QString("workHourSecondaryGroupBy")]);
    m_work_hour_secondary_group_by_isSet = !json[QString("workHourSecondaryGroupBy")].isNull() && m_work_hour_secondary_group_by_isValid;
}

QString OAIInvoiceSettingsOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceSettingsOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort_order_isSet) {
        obj.insert(QString("categorySortOrder"), ::OpenAPI::toJsonValue(m_category_sort_order));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("entryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_reverse_charged_isSet) {
        obj.insert(QString("isReverseCharged"), ::OpenAPI::toJsonValue(m_is_reverse_charged));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("paymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_project_fee_description_format_isSet) {
        obj.insert(QString("projectFeeDescriptionFormat"), ::OpenAPI::toJsonValue(m_project_fee_description_format));
    }
    if (m_project_fee_grouping.isSet()) {
        obj.insert(QString("projectFeeGrouping"), ::OpenAPI::toJsonValue(m_project_fee_grouping));
    }
    if (m_project_fee_primary_group_by_isSet) {
        obj.insert(QString("projectFeePrimaryGroupBy"), ::OpenAPI::toJsonValue(m_project_fee_primary_group_by));
    }
    if (m_project_fee_secondary_group_by_isSet) {
        obj.insert(QString("projectFeeSecondaryGroupBy"), ::OpenAPI::toJsonValue(m_project_fee_secondary_group_by));
    }
    if (m_project_travel_expense_description_format_isSet) {
        obj.insert(QString("projectTravelExpenseDescriptionFormat"), ::OpenAPI::toJsonValue(m_project_travel_expense_description_format));
    }
    if (m_project_travel_expense_grouping.isSet()) {
        obj.insert(QString("projectTravelExpenseGrouping"), ::OpenAPI::toJsonValue(m_project_travel_expense_grouping));
    }
    if (m_project_travel_expense_primary_group_by_isSet) {
        obj.insert(QString("projectTravelExpensePrimaryGroupBy"), ::OpenAPI::toJsonValue(m_project_travel_expense_primary_group_by));
    }
    if (m_project_travel_expense_secondary_group_by_isSet) {
        obj.insert(QString("projectTravelExpenseSecondaryGroupBy"), ::OpenAPI::toJsonValue(m_project_travel_expense_secondary_group_by));
    }
    if (m_reverse_charge_description_isSet) {
        obj.insert(QString("reverseChargeDescription"), ::OpenAPI::toJsonValue(m_reverse_charge_description));
    }
    if (m_show_attachment_price_excluding_value_added_tax_isSet) {
        obj.insert(QString("showAttachmentPriceExcludingValueAddedTax"), ::OpenAPI::toJsonValue(m_show_attachment_price_excluding_value_added_tax));
    }
    if (m_show_attachment_quantity_isSet) {
        obj.insert(QString("showAttachmentQuantity"), ::OpenAPI::toJsonValue(m_show_attachment_quantity));
    }
    if (m_show_attachment_unit_isSet) {
        obj.insert(QString("showAttachmentUnit"), ::OpenAPI::toJsonValue(m_show_attachment_unit));
    }
    if (m_show_attachment_unit_price_isSet) {
        obj.insert(QString("showAttachmentUnitPrice"), ::OpenAPI::toJsonValue(m_show_attachment_unit_price));
    }
    if (m_show_attachment_value_added_tax_isSet) {
        obj.insert(QString("showAttachmentValueAddedTax"), ::OpenAPI::toJsonValue(m_show_attachment_value_added_tax));
    }
    if (m_show_categories_isSet) {
        obj.insert(QString("showCategories"), ::OpenAPI::toJsonValue(m_show_categories));
    }
    if (m_show_footer_isSet) {
        obj.insert(QString("showFooter"), ::OpenAPI::toJsonValue(m_show_footer));
    }
    if (m_show_logo_and_title_isSet) {
        obj.insert(QString("showLogoAndTitle"), ::OpenAPI::toJsonValue(m_show_logo_and_title));
    }
    if (m_show_price_excluding_value_added_tax_isSet) {
        obj.insert(QString("showPriceExcludingValueAddedTax"), ::OpenAPI::toJsonValue(m_show_price_excluding_value_added_tax));
    }
    if (m_show_quantity_isSet) {
        obj.insert(QString("showQuantity"), ::OpenAPI::toJsonValue(m_show_quantity));
    }
    if (m_show_reference_number_isSet) {
        obj.insert(QString("showReferenceNumber"), ::OpenAPI::toJsonValue(m_show_reference_number));
    }
    if (m_show_unit_isSet) {
        obj.insert(QString("showUnit"), ::OpenAPI::toJsonValue(m_show_unit));
    }
    if (m_show_unit_price_isSet) {
        obj.insert(QString("showUnitPrice"), ::OpenAPI::toJsonValue(m_show_unit_price));
    }
    if (m_show_value_added_tax_isSet) {
        obj.insert(QString("showValueAddedTax"), ::OpenAPI::toJsonValue(m_show_value_added_tax));
    }
    if (m_style.isSet()) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_work_hour_description_format_isSet) {
        obj.insert(QString("workHourDescriptionFormat"), ::OpenAPI::toJsonValue(m_work_hour_description_format));
    }
    if (m_work_hour_grouping.isSet()) {
        obj.insert(QString("workHourGrouping"), ::OpenAPI::toJsonValue(m_work_hour_grouping));
    }
    if (m_work_hour_primary_group_by_isSet) {
        obj.insert(QString("workHourPrimaryGroupBy"), ::OpenAPI::toJsonValue(m_work_hour_primary_group_by));
    }
    if (m_work_hour_secondary_group_by_isSet) {
        obj.insert(QString("workHourSecondaryGroupBy"), ::OpenAPI::toJsonValue(m_work_hour_secondary_group_by));
    }
    return obj;
}

QString OAIInvoiceSettingsOutputModel::getCategorySortOrder() const {
    return m_category_sort_order;
}
void OAIInvoiceSettingsOutputModel::setCategorySortOrder(const QString &category_sort_order) {
    m_category_sort_order = category_sort_order;
    m_category_sort_order_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_category_sort_order_Set() const{
    return m_category_sort_order_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_category_sort_order_Valid() const{
    return m_category_sort_order_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIInvoiceSettingsOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIInvoiceSettingsOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIInvoiceSettingsOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIInvoiceSettingsOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QDate OAIInvoiceSettingsOutputModel::getEntryDate() const {
    return m_entry_date;
}
void OAIInvoiceSettingsOutputModel::setEntryDate(const QDate &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

QString OAIInvoiceSettingsOutputModel::getGuid() const {
    return m_guid;
}
void OAIInvoiceSettingsOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIInvoiceSettingsOutputModel::isIsReverseCharged() const {
    return m_is_reverse_charged;
}
void OAIInvoiceSettingsOutputModel::setIsReverseCharged(const bool &is_reverse_charged) {
    m_is_reverse_charged = is_reverse_charged;
    m_is_reverse_charged_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_is_reverse_charged_Set() const{
    return m_is_reverse_charged_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_is_reverse_charged_Valid() const{
    return m_is_reverse_charged_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIInvoiceSettingsOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIInvoiceSettingsOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIInvoiceSettingsOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIInvoiceSettingsOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QDate OAIInvoiceSettingsOutputModel::getPaymentDate() const {
    return m_payment_date;
}
void OAIInvoiceSettingsOutputModel::setPaymentDate(const QDate &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QString OAIInvoiceSettingsOutputModel::getProjectFeeDescriptionFormat() const {
    return m_project_fee_description_format;
}
void OAIInvoiceSettingsOutputModel::setProjectFeeDescriptionFormat(const QString &project_fee_description_format) {
    m_project_fee_description_format = project_fee_description_format;
    m_project_fee_description_format_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_description_format_Set() const{
    return m_project_fee_description_format_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_description_format_Valid() const{
    return m_project_fee_description_format_isValid;
}

OAIInvoiceGrouping OAIInvoiceSettingsOutputModel::getProjectFeeGrouping() const {
    return m_project_fee_grouping;
}
void OAIInvoiceSettingsOutputModel::setProjectFeeGrouping(const OAIInvoiceGrouping &project_fee_grouping) {
    m_project_fee_grouping = project_fee_grouping;
    m_project_fee_grouping_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_grouping_Set() const{
    return m_project_fee_grouping_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_grouping_Valid() const{
    return m_project_fee_grouping_isValid;
}

QString OAIInvoiceSettingsOutputModel::getProjectFeePrimaryGroupBy() const {
    return m_project_fee_primary_group_by;
}
void OAIInvoiceSettingsOutputModel::setProjectFeePrimaryGroupBy(const QString &project_fee_primary_group_by) {
    m_project_fee_primary_group_by = project_fee_primary_group_by;
    m_project_fee_primary_group_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_primary_group_by_Set() const{
    return m_project_fee_primary_group_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_primary_group_by_Valid() const{
    return m_project_fee_primary_group_by_isValid;
}

QString OAIInvoiceSettingsOutputModel::getProjectFeeSecondaryGroupBy() const {
    return m_project_fee_secondary_group_by;
}
void OAIInvoiceSettingsOutputModel::setProjectFeeSecondaryGroupBy(const QString &project_fee_secondary_group_by) {
    m_project_fee_secondary_group_by = project_fee_secondary_group_by;
    m_project_fee_secondary_group_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_secondary_group_by_Set() const{
    return m_project_fee_secondary_group_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_fee_secondary_group_by_Valid() const{
    return m_project_fee_secondary_group_by_isValid;
}

QString OAIInvoiceSettingsOutputModel::getProjectTravelExpenseDescriptionFormat() const {
    return m_project_travel_expense_description_format;
}
void OAIInvoiceSettingsOutputModel::setProjectTravelExpenseDescriptionFormat(const QString &project_travel_expense_description_format) {
    m_project_travel_expense_description_format = project_travel_expense_description_format;
    m_project_travel_expense_description_format_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_description_format_Set() const{
    return m_project_travel_expense_description_format_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_description_format_Valid() const{
    return m_project_travel_expense_description_format_isValid;
}

OAIInvoiceGrouping OAIInvoiceSettingsOutputModel::getProjectTravelExpenseGrouping() const {
    return m_project_travel_expense_grouping;
}
void OAIInvoiceSettingsOutputModel::setProjectTravelExpenseGrouping(const OAIInvoiceGrouping &project_travel_expense_grouping) {
    m_project_travel_expense_grouping = project_travel_expense_grouping;
    m_project_travel_expense_grouping_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_grouping_Set() const{
    return m_project_travel_expense_grouping_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_grouping_Valid() const{
    return m_project_travel_expense_grouping_isValid;
}

QString OAIInvoiceSettingsOutputModel::getProjectTravelExpensePrimaryGroupBy() const {
    return m_project_travel_expense_primary_group_by;
}
void OAIInvoiceSettingsOutputModel::setProjectTravelExpensePrimaryGroupBy(const QString &project_travel_expense_primary_group_by) {
    m_project_travel_expense_primary_group_by = project_travel_expense_primary_group_by;
    m_project_travel_expense_primary_group_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_primary_group_by_Set() const{
    return m_project_travel_expense_primary_group_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_primary_group_by_Valid() const{
    return m_project_travel_expense_primary_group_by_isValid;
}

QString OAIInvoiceSettingsOutputModel::getProjectTravelExpenseSecondaryGroupBy() const {
    return m_project_travel_expense_secondary_group_by;
}
void OAIInvoiceSettingsOutputModel::setProjectTravelExpenseSecondaryGroupBy(const QString &project_travel_expense_secondary_group_by) {
    m_project_travel_expense_secondary_group_by = project_travel_expense_secondary_group_by;
    m_project_travel_expense_secondary_group_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_secondary_group_by_Set() const{
    return m_project_travel_expense_secondary_group_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_project_travel_expense_secondary_group_by_Valid() const{
    return m_project_travel_expense_secondary_group_by_isValid;
}

QString OAIInvoiceSettingsOutputModel::getReverseChargeDescription() const {
    return m_reverse_charge_description;
}
void OAIInvoiceSettingsOutputModel::setReverseChargeDescription(const QString &reverse_charge_description) {
    m_reverse_charge_description = reverse_charge_description;
    m_reverse_charge_description_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_reverse_charge_description_Set() const{
    return m_reverse_charge_description_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_reverse_charge_description_Valid() const{
    return m_reverse_charge_description_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowAttachmentPriceExcludingValueAddedTax() const {
    return m_show_attachment_price_excluding_value_added_tax;
}
void OAIInvoiceSettingsOutputModel::setShowAttachmentPriceExcludingValueAddedTax(const bool &show_attachment_price_excluding_value_added_tax) {
    m_show_attachment_price_excluding_value_added_tax = show_attachment_price_excluding_value_added_tax;
    m_show_attachment_price_excluding_value_added_tax_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_price_excluding_value_added_tax_Set() const{
    return m_show_attachment_price_excluding_value_added_tax_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_price_excluding_value_added_tax_Valid() const{
    return m_show_attachment_price_excluding_value_added_tax_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowAttachmentQuantity() const {
    return m_show_attachment_quantity;
}
void OAIInvoiceSettingsOutputModel::setShowAttachmentQuantity(const bool &show_attachment_quantity) {
    m_show_attachment_quantity = show_attachment_quantity;
    m_show_attachment_quantity_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_quantity_Set() const{
    return m_show_attachment_quantity_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_quantity_Valid() const{
    return m_show_attachment_quantity_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowAttachmentUnit() const {
    return m_show_attachment_unit;
}
void OAIInvoiceSettingsOutputModel::setShowAttachmentUnit(const bool &show_attachment_unit) {
    m_show_attachment_unit = show_attachment_unit;
    m_show_attachment_unit_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_unit_Set() const{
    return m_show_attachment_unit_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_unit_Valid() const{
    return m_show_attachment_unit_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowAttachmentUnitPrice() const {
    return m_show_attachment_unit_price;
}
void OAIInvoiceSettingsOutputModel::setShowAttachmentUnitPrice(const bool &show_attachment_unit_price) {
    m_show_attachment_unit_price = show_attachment_unit_price;
    m_show_attachment_unit_price_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_unit_price_Set() const{
    return m_show_attachment_unit_price_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_unit_price_Valid() const{
    return m_show_attachment_unit_price_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowAttachmentValueAddedTax() const {
    return m_show_attachment_value_added_tax;
}
void OAIInvoiceSettingsOutputModel::setShowAttachmentValueAddedTax(const bool &show_attachment_value_added_tax) {
    m_show_attachment_value_added_tax = show_attachment_value_added_tax;
    m_show_attachment_value_added_tax_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_value_added_tax_Set() const{
    return m_show_attachment_value_added_tax_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_attachment_value_added_tax_Valid() const{
    return m_show_attachment_value_added_tax_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowCategories() const {
    return m_show_categories;
}
void OAIInvoiceSettingsOutputModel::setShowCategories(const bool &show_categories) {
    m_show_categories = show_categories;
    m_show_categories_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_categories_Set() const{
    return m_show_categories_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_categories_Valid() const{
    return m_show_categories_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowFooter() const {
    return m_show_footer;
}
void OAIInvoiceSettingsOutputModel::setShowFooter(const bool &show_footer) {
    m_show_footer = show_footer;
    m_show_footer_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_footer_Set() const{
    return m_show_footer_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_footer_Valid() const{
    return m_show_footer_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowLogoAndTitle() const {
    return m_show_logo_and_title;
}
void OAIInvoiceSettingsOutputModel::setShowLogoAndTitle(const bool &show_logo_and_title) {
    m_show_logo_and_title = show_logo_and_title;
    m_show_logo_and_title_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_logo_and_title_Set() const{
    return m_show_logo_and_title_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_logo_and_title_Valid() const{
    return m_show_logo_and_title_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowPriceExcludingValueAddedTax() const {
    return m_show_price_excluding_value_added_tax;
}
void OAIInvoiceSettingsOutputModel::setShowPriceExcludingValueAddedTax(const bool &show_price_excluding_value_added_tax) {
    m_show_price_excluding_value_added_tax = show_price_excluding_value_added_tax;
    m_show_price_excluding_value_added_tax_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_price_excluding_value_added_tax_Set() const{
    return m_show_price_excluding_value_added_tax_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_price_excluding_value_added_tax_Valid() const{
    return m_show_price_excluding_value_added_tax_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowQuantity() const {
    return m_show_quantity;
}
void OAIInvoiceSettingsOutputModel::setShowQuantity(const bool &show_quantity) {
    m_show_quantity = show_quantity;
    m_show_quantity_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_quantity_Set() const{
    return m_show_quantity_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_quantity_Valid() const{
    return m_show_quantity_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowReferenceNumber() const {
    return m_show_reference_number;
}
void OAIInvoiceSettingsOutputModel::setShowReferenceNumber(const bool &show_reference_number) {
    m_show_reference_number = show_reference_number;
    m_show_reference_number_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_reference_number_Set() const{
    return m_show_reference_number_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_reference_number_Valid() const{
    return m_show_reference_number_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowUnit() const {
    return m_show_unit;
}
void OAIInvoiceSettingsOutputModel::setShowUnit(const bool &show_unit) {
    m_show_unit = show_unit;
    m_show_unit_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_unit_Set() const{
    return m_show_unit_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_unit_Valid() const{
    return m_show_unit_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowUnitPrice() const {
    return m_show_unit_price;
}
void OAIInvoiceSettingsOutputModel::setShowUnitPrice(const bool &show_unit_price) {
    m_show_unit_price = show_unit_price;
    m_show_unit_price_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_unit_price_Set() const{
    return m_show_unit_price_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_unit_price_Valid() const{
    return m_show_unit_price_isValid;
}

bool OAIInvoiceSettingsOutputModel::isShowValueAddedTax() const {
    return m_show_value_added_tax;
}
void OAIInvoiceSettingsOutputModel::setShowValueAddedTax(const bool &show_value_added_tax) {
    m_show_value_added_tax = show_value_added_tax;
    m_show_value_added_tax_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_show_value_added_tax_Set() const{
    return m_show_value_added_tax_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_show_value_added_tax_Valid() const{
    return m_show_value_added_tax_isValid;
}

OAIInvoiceSkin OAIInvoiceSettingsOutputModel::getStyle() const {
    return m_style;
}
void OAIInvoiceSettingsOutputModel::setStyle(const OAIInvoiceSkin &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_style_Set() const{
    return m_style_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIInvoiceSettingsOutputModel::getWorkHourDescriptionFormat() const {
    return m_work_hour_description_format;
}
void OAIInvoiceSettingsOutputModel::setWorkHourDescriptionFormat(const QString &work_hour_description_format) {
    m_work_hour_description_format = work_hour_description_format;
    m_work_hour_description_format_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_description_format_Set() const{
    return m_work_hour_description_format_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_description_format_Valid() const{
    return m_work_hour_description_format_isValid;
}

OAIInvoiceGrouping OAIInvoiceSettingsOutputModel::getWorkHourGrouping() const {
    return m_work_hour_grouping;
}
void OAIInvoiceSettingsOutputModel::setWorkHourGrouping(const OAIInvoiceGrouping &work_hour_grouping) {
    m_work_hour_grouping = work_hour_grouping;
    m_work_hour_grouping_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_grouping_Set() const{
    return m_work_hour_grouping_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_grouping_Valid() const{
    return m_work_hour_grouping_isValid;
}

QString OAIInvoiceSettingsOutputModel::getWorkHourPrimaryGroupBy() const {
    return m_work_hour_primary_group_by;
}
void OAIInvoiceSettingsOutputModel::setWorkHourPrimaryGroupBy(const QString &work_hour_primary_group_by) {
    m_work_hour_primary_group_by = work_hour_primary_group_by;
    m_work_hour_primary_group_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_primary_group_by_Set() const{
    return m_work_hour_primary_group_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_primary_group_by_Valid() const{
    return m_work_hour_primary_group_by_isValid;
}

QString OAIInvoiceSettingsOutputModel::getWorkHourSecondaryGroupBy() const {
    return m_work_hour_secondary_group_by;
}
void OAIInvoiceSettingsOutputModel::setWorkHourSecondaryGroupBy(const QString &work_hour_secondary_group_by) {
    m_work_hour_secondary_group_by = work_hour_secondary_group_by;
    m_work_hour_secondary_group_by_isSet = true;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_secondary_group_by_Set() const{
    return m_work_hour_secondary_group_by_isSet;
}

bool OAIInvoiceSettingsOutputModel::is_work_hour_secondary_group_by_Valid() const{
    return m_work_hour_secondary_group_by_isValid;
}

bool OAIInvoiceSettingsOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reverse_charged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_fee_description_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_fee_grouping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_fee_primary_group_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_fee_secondary_group_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_travel_expense_description_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_travel_expense_grouping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_travel_expense_primary_group_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_travel_expense_secondary_group_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_charge_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_attachment_price_excluding_value_added_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_attachment_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_attachment_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_attachment_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_attachment_value_added_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_logo_and_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_price_excluding_value_added_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_value_added_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hour_description_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hour_grouping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hour_primary_group_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_hour_secondary_group_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceSettingsOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
