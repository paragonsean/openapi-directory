/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserOutputModel::OAIUserOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserOutputModel::OAIUserOutputModel() {
    this->initializeModel();
}

OAIUserOutputModel::~OAIUserOutputModel() {}

void OAIUserOutputModel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_business_unit_isSet = false;
    m_business_unit_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_region_isSet = false;
    m_country_region_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_default_activity_type_isSet = false;
    m_default_activity_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_permission_profile_isSet = false;
    m_permission_profile_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_salutation_isSet = false;
    m_salutation_isValid = false;

    m_satisfaction_isSet = false;
    m_satisfaction_isValid = false;

    m_social_security_number_isSet = false;
    m_social_security_number_isValid = false;

    m_superior_user_isSet = false;
    m_superior_user_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_work_contract_isSet = false;
    m_work_contract_isValid = false;

    m_work_type_isSet = false;
    m_work_type_isValid = false;
}

void OAIUserOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserOutputModel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("bankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("bankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birthDate")]);
    m_birth_date_isSet = !json[QString("birthDate")].isNull() && m_birth_date_isValid;

    m_business_unit_isValid = ::OpenAPI::fromJsonValue(m_business_unit, json[QString("businessUnit")]);
    m_business_unit_isSet = !json[QString("businessUnit")].isNull() && m_business_unit_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_region_isValid = ::OpenAPI::fromJsonValue(m_country_region, json[QString("countryRegion")]);
    m_country_region_isSet = !json[QString("countryRegion")].isNull() && m_country_region_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_default_activity_type_isValid = ::OpenAPI::fromJsonValue(m_default_activity_type, json[QString("defaultActivityType")]);
    m_default_activity_type_isSet = !json[QString("defaultActivityType")].isNull() && m_default_activity_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("lastLogin")]);
    m_last_login_isSet = !json[QString("lastLogin")].isNull() && m_last_login_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_permission_profile_isValid = ::OpenAPI::fromJsonValue(m_permission_profile, json[QString("permissionProfile")]);
    m_permission_profile_isSet = !json[QString("permissionProfile")].isNull() && m_permission_profile_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_salutation_isValid = ::OpenAPI::fromJsonValue(m_salutation, json[QString("salutation")]);
    m_salutation_isSet = !json[QString("salutation")].isNull() && m_salutation_isValid;

    m_satisfaction_isValid = ::OpenAPI::fromJsonValue(m_satisfaction, json[QString("satisfaction")]);
    m_satisfaction_isSet = !json[QString("satisfaction")].isNull() && m_satisfaction_isValid;

    m_social_security_number_isValid = ::OpenAPI::fromJsonValue(m_social_security_number, json[QString("socialSecurityNumber")]);
    m_social_security_number_isSet = !json[QString("socialSecurityNumber")].isNull() && m_social_security_number_isValid;

    m_superior_user_isValid = ::OpenAPI::fromJsonValue(m_superior_user, json[QString("superiorUser")]);
    m_superior_user_isSet = !json[QString("superiorUser")].isNull() && m_superior_user_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;

    m_work_contract_isValid = ::OpenAPI::fromJsonValue(m_work_contract, json[QString("workContract")]);
    m_work_contract_isSet = !json[QString("workContract")].isNull() && m_work_contract_isValid;

    m_work_type_isValid = ::OpenAPI::fromJsonValue(m_work_type, json[QString("workType")]);
    m_work_type_isSet = !json[QString("workType")].isNull() && m_work_type_isValid;
}

QString OAIUserOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_bank_account_number_isSet) {
        obj.insert(QString("bankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("birthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_business_unit.isSet()) {
        obj.insert(QString("businessUnit"), ::OpenAPI::toJsonValue(m_business_unit));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_region.isSet()) {
        obj.insert(QString("countryRegion"), ::OpenAPI::toJsonValue(m_country_region));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_culture.isSet()) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_default_activity_type.isSet()) {
        obj.insert(QString("defaultActivityType"), ::OpenAPI::toJsonValue(m_default_activity_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("lastLogin"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_updated_by.isSet()) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_permission_profile.isSet()) {
        obj.insert(QString("permissionProfile"), ::OpenAPI::toJsonValue(m_permission_profile));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_salutation.isSet()) {
        obj.insert(QString("salutation"), ::OpenAPI::toJsonValue(m_salutation));
    }
    if (m_satisfaction.isSet()) {
        obj.insert(QString("satisfaction"), ::OpenAPI::toJsonValue(m_satisfaction));
    }
    if (m_social_security_number_isSet) {
        obj.insert(QString("socialSecurityNumber"), ::OpenAPI::toJsonValue(m_social_security_number));
    }
    if (m_superior_user.isSet()) {
        obj.insert(QString("superiorUser"), ::OpenAPI::toJsonValue(m_superior_user));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_type.isSet()) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_work_contract.isSet()) {
        obj.insert(QString("workContract"), ::OpenAPI::toJsonValue(m_work_contract));
    }
    if (m_work_type.isSet()) {
        obj.insert(QString("workType"), ::OpenAPI::toJsonValue(m_work_type));
    }
    return obj;
}

QString OAIUserOutputModel::getAddress() const {
    return m_address;
}
void OAIUserOutputModel::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUserOutputModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUserOutputModel::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIUserOutputModel::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIUserOutputModel::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIUserOutputModel::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIUserOutputModel::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QDateTime OAIUserOutputModel::getBirthDate() const {
    return m_birth_date;
}
void OAIUserOutputModel::setBirthDate(const QDateTime &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIUserOutputModel::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIUserOutputModel::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

OAIBusinessUnitSubModel OAIUserOutputModel::getBusinessUnit() const {
    return m_business_unit;
}
void OAIUserOutputModel::setBusinessUnit(const OAIBusinessUnitSubModel &business_unit) {
    m_business_unit = business_unit;
    m_business_unit_isSet = true;
}

bool OAIUserOutputModel::is_business_unit_Set() const{
    return m_business_unit_isSet;
}

bool OAIUserOutputModel::is_business_unit_Valid() const{
    return m_business_unit_isValid;
}

QString OAIUserOutputModel::getCity() const {
    return m_city;
}
void OAIUserOutputModel::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUserOutputModel::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUserOutputModel::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUserOutputModel::getCode() const {
    return m_code;
}
void OAIUserOutputModel::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIUserOutputModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIUserOutputModel::is_code_Valid() const{
    return m_code_isValid;
}

OAIUserCountrySubModel OAIUserOutputModel::getCountry() const {
    return m_country;
}
void OAIUserOutputModel::setCountry(const OAIUserCountrySubModel &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUserOutputModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUserOutputModel::is_country_Valid() const{
    return m_country_isValid;
}

OAIModelWithName OAIUserOutputModel::getCountryRegion() const {
    return m_country_region;
}
void OAIUserOutputModel::setCountryRegion(const OAIModelWithName &country_region) {
    m_country_region = country_region;
    m_country_region_isSet = true;
}

bool OAIUserOutputModel::is_country_region_Set() const{
    return m_country_region_isSet;
}

bool OAIUserOutputModel::is_country_region_Valid() const{
    return m_country_region_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIUserOutputModel::getCreatedBy() const {
    return m_created_by;
}
void OAIUserOutputModel::setCreatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIUserOutputModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIUserOutputModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIUserOutputModel::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIUserOutputModel::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIUserOutputModel::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIUserOutputModel::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIUserCultureSubModel OAIUserOutputModel::getCulture() const {
    return m_culture;
}
void OAIUserOutputModel::setCulture(const OAIUserCultureSubModel &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIUserOutputModel::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIUserOutputModel::is_culture_Valid() const{
    return m_culture_isValid;
}

OAIModelWithName OAIUserOutputModel::getDefaultActivityType() const {
    return m_default_activity_type;
}
void OAIUserOutputModel::setDefaultActivityType(const OAIModelWithName &default_activity_type) {
    m_default_activity_type = default_activity_type;
    m_default_activity_type_isSet = true;
}

bool OAIUserOutputModel::is_default_activity_type_Set() const{
    return m_default_activity_type_isSet;
}

bool OAIUserOutputModel::is_default_activity_type_Valid() const{
    return m_default_activity_type_isValid;
}

QString OAIUserOutputModel::getEmail() const {
    return m_email;
}
void OAIUserOutputModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserOutputModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserOutputModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserOutputModel::getFirstName() const {
    return m_first_name;
}
void OAIUserOutputModel::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserOutputModel::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserOutputModel::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserOutputModel::getGuid() const {
    return m_guid;
}
void OAIUserOutputModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIUserOutputModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIUserOutputModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIUserOutputModel::isIsActive() const {
    return m_is_active;
}
void OAIUserOutputModel::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIUserOutputModel::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIUserOutputModel::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QList<OAIUserKeywordSubModel> OAIUserOutputModel::getKeywords() const {
    return m_keywords;
}
void OAIUserOutputModel::setKeywords(const QList<OAIUserKeywordSubModel> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIUserOutputModel::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIUserOutputModel::is_keywords_Valid() const{
    return m_keywords_isValid;
}

OAIUserLanguageSubModel OAIUserOutputModel::getLanguage() const {
    return m_language;
}
void OAIUserOutputModel::setLanguage(const OAIUserLanguageSubModel &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUserOutputModel::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUserOutputModel::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAIUserOutputModel::getLastLogin() const {
    return m_last_login;
}
void OAIUserOutputModel::setLastLogin(const QDateTime &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIUserOutputModel::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIUserOutputModel::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QString OAIUserOutputModel::getLastName() const {
    return m_last_name;
}
void OAIUserOutputModel::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserOutputModel::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserOutputModel::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIUserWithFirstNameLastNameAndPhotoFileModel OAIUserOutputModel::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIUserOutputModel::setLastUpdatedBy(const OAIUserWithFirstNameLastNameAndPhotoFileModel &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIUserOutputModel::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIUserOutputModel::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QDateTime OAIUserOutputModel::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIUserOutputModel::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIUserOutputModel::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIUserOutputModel::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QString OAIUserOutputModel::getNotes() const {
    return m_notes;
}
void OAIUserOutputModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUserOutputModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUserOutputModel::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIModelWithName OAIUserOutputModel::getPermissionProfile() const {
    return m_permission_profile;
}
void OAIUserOutputModel::setPermissionProfile(const OAIModelWithName &permission_profile) {
    m_permission_profile = permission_profile;
    m_permission_profile_isSet = true;
}

bool OAIUserOutputModel::is_permission_profile_Set() const{
    return m_permission_profile_isSet;
}

bool OAIUserOutputModel::is_permission_profile_Valid() const{
    return m_permission_profile_isValid;
}

QString OAIUserOutputModel::getPhone() const {
    return m_phone;
}
void OAIUserOutputModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUserOutputModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUserOutputModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUserOutputModel::getPostalCode() const {
    return m_postal_code;
}
void OAIUserOutputModel::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIUserOutputModel::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIUserOutputModel::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

OAISalutationType OAIUserOutputModel::getSalutation() const {
    return m_salutation;
}
void OAIUserOutputModel::setSalutation(const OAISalutationType &salutation) {
    m_salutation = salutation;
    m_salutation_isSet = true;
}

bool OAIUserOutputModel::is_salutation_Set() const{
    return m_salutation_isSet;
}

bool OAIUserOutputModel::is_salutation_Valid() const{
    return m_salutation_isValid;
}

OAISatisfactionLevelType OAIUserOutputModel::getSatisfaction() const {
    return m_satisfaction;
}
void OAIUserOutputModel::setSatisfaction(const OAISatisfactionLevelType &satisfaction) {
    m_satisfaction = satisfaction;
    m_satisfaction_isSet = true;
}

bool OAIUserOutputModel::is_satisfaction_Set() const{
    return m_satisfaction_isSet;
}

bool OAIUserOutputModel::is_satisfaction_Valid() const{
    return m_satisfaction_isValid;
}

QString OAIUserOutputModel::getSocialSecurityNumber() const {
    return m_social_security_number;
}
void OAIUserOutputModel::setSocialSecurityNumber(const QString &social_security_number) {
    m_social_security_number = social_security_number;
    m_social_security_number_isSet = true;
}

bool OAIUserOutputModel::is_social_security_number_Set() const{
    return m_social_security_number_isSet;
}

bool OAIUserOutputModel::is_social_security_number_Valid() const{
    return m_social_security_number_isValid;
}

OAIModelBaseWithRequiredGuid OAIUserOutputModel::getSuperiorUser() const {
    return m_superior_user;
}
void OAIUserOutputModel::setSuperiorUser(const OAIModelBaseWithRequiredGuid &superior_user) {
    m_superior_user = superior_user;
    m_superior_user_isSet = true;
}

bool OAIUserOutputModel::is_superior_user_Set() const{
    return m_superior_user_isSet;
}

bool OAIUserOutputModel::is_superior_user_Valid() const{
    return m_superior_user_isValid;
}

OAITimezoneModel OAIUserOutputModel::getTimezone() const {
    return m_timezone;
}
void OAIUserOutputModel::setTimezone(const OAITimezoneModel &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIUserOutputModel::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIUserOutputModel::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIUserOutputModel::getTitle() const {
    return m_title;
}
void OAIUserOutputModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUserOutputModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUserOutputModel::is_title_Valid() const{
    return m_title_isValid;
}

OAILicenseUserType OAIUserOutputModel::getUserType() const {
    return m_user_type;
}
void OAIUserOutputModel::setUserType(const OAILicenseUserType &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUserOutputModel::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUserOutputModel::is_user_type_Valid() const{
    return m_user_type_isValid;
}

OAIUserWorkContractSubModel OAIUserOutputModel::getWorkContract() const {
    return m_work_contract;
}
void OAIUserOutputModel::setWorkContract(const OAIUserWorkContractSubModel &work_contract) {
    m_work_contract = work_contract;
    m_work_contract_isSet = true;
}

bool OAIUserOutputModel::is_work_contract_Set() const{
    return m_work_contract_isSet;
}

bool OAIUserOutputModel::is_work_contract_Valid() const{
    return m_work_contract_isValid;
}

OAIModelBaseWithRequiredGuid OAIUserOutputModel::getWorkType() const {
    return m_work_type;
}
void OAIUserOutputModel::setWorkType(const OAIModelBaseWithRequiredGuid &work_type) {
    m_work_type = work_type;
    m_work_type_isSet = true;
}

bool OAIUserOutputModel::is_work_type_Set() const{
    return m_work_type_isSet;
}

bool OAIUserOutputModel::is_work_type_Valid() const{
    return m_work_type_isValid;
}

bool OAIUserOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_activity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superior_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_contract.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_name_isValid && m_last_name_isValid && true;
}

} // namespace OpenAPI
