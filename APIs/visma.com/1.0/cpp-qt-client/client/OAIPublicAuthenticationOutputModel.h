/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublicAuthenticationOutputModel.h
 *
 * 
 */

#ifndef OAIPublicAuthenticationOutputModel_H
#define OAIPublicAuthenticationOutputModel_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPublicAuthenticationOutputModel : public OAIObject {
public:
    OAIPublicAuthenticationOutputModel();
    OAIPublicAuthenticationOutputModel(QString json);
    ~OAIPublicAuthenticationOutputModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessToken() const;
    void setAccessToken(const QString &access_token);
    bool is_access_token_Set() const;
    bool is_access_token_Valid() const;

    qint64 getAccessTokenExpiresIn() const;
    void setAccessTokenExpiresIn(const qint64 &access_token_expires_in);
    bool is_access_token_expires_in_Set() const;
    bool is_access_token_expires_in_Valid() const;

    QDateTime getAccessTokenExpiresUtc() const;
    void setAccessTokenExpiresUtc(const QDateTime &access_token_expires_utc);
    bool is_access_token_expires_utc_Set() const;
    bool is_access_token_expires_utc_Valid() const;

    QString getAccessTokenType() const;
    void setAccessTokenType(const QString &access_token_type);
    bool is_access_token_type_Set() const;
    bool is_access_token_type_Valid() const;

    QString getRefreshToken() const;
    void setRefreshToken(const QString &refresh_token);
    bool is_refresh_token_Set() const;
    bool is_refresh_token_Valid() const;

    qint64 getRefreshTokenExpiresIn() const;
    void setRefreshTokenExpiresIn(const qint64 &refresh_token_expires_in);
    bool is_refresh_token_expires_in_Set() const;
    bool is_refresh_token_expires_in_Valid() const;

    QDateTime getRefreshTokenExpiresUtc() const;
    void setRefreshTokenExpiresUtc(const QDateTime &refresh_token_expires_utc);
    bool is_refresh_token_expires_utc_Set() const;
    bool is_refresh_token_expires_utc_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_token;
    bool m_access_token_isSet;
    bool m_access_token_isValid;

    qint64 m_access_token_expires_in;
    bool m_access_token_expires_in_isSet;
    bool m_access_token_expires_in_isValid;

    QDateTime m_access_token_expires_utc;
    bool m_access_token_expires_utc_isSet;
    bool m_access_token_expires_utc_isValid;

    QString m_access_token_type;
    bool m_access_token_type_isSet;
    bool m_access_token_type_isValid;

    QString m_refresh_token;
    bool m_refresh_token_isSet;
    bool m_refresh_token_isValid;

    qint64 m_refresh_token_expires_in;
    bool m_refresh_token_expires_in_isSet;
    bool m_refresh_token_expires_in_isValid;

    QDateTime m_refresh_token_expires_utc;
    bool m_refresh_token_expires_utc_isSet;
    bool m_refresh_token_expires_utc_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublicAuthenticationOutputModel)

#endif // OAIPublicAuthenticationOutputModel_H
