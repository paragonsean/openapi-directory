/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActivitiesReadApi_H
#define OAI_OAIActivitiesReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivityCategory.h"
#include "OAIActivityModel.h"
#include "OAIActivityParticipantModel.h"
#include "OAIExceptionModel.h"
#include "OAIRecurrenceType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActivitiesReadApi : public QObject {
    Q_OBJECT

public:
    OAIActivitiesReadApi(const int timeOut = 0);
    ~OAIActivitiesReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  closed bool [optional]
    * @param[in]  activity_categories QList<OAIActivityCategory> [optional]
    * @param[in]  customer_guids QList<QString> [optional]
    * @param[in]  include_tasks_with_no_customer bool [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  include_tasks_with_no_project bool [optional]
    * @param[in]  project_business_unit_guids QList<QString> [optional]
    * @param[in]  project_owner_guids QList<QString> [optional]
    * @param[in]  user_guids QList<QString> [optional]
    * @param[in]  include_as_member bool [optional]
    * @param[in]  user_keyword_guids QList<QString> [optional]
    * @param[in]  start_date_time QDateTime [optional]
    * @param[in]  end_date_time QDateTime [optional]
    * @param[in]  project_task_status_guids QList<QString> [optional]
    * @param[in]  phase_guids QList<QString> [optional]
    * @param[in]  include_sub_phases bool [optional]
    * @param[in]  contact_guids QList<QString> [optional]
    * @param[in]  has_duration bool [optional]
    * @param[in]  has_hours bool [optional]
    * @param[in]  is_unassigned bool [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  use_strict_start_and_end_date_time bool [optional]
    * @param[in]  activity_type_guids QList<QString> [optional]
    * @param[in]  recurrence_type OAIRecurrenceType [optional]
    */
    virtual void activitiesGetActivities(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIActivityCategory>> &activity_categories = ::OpenAPI::OptionalParam<QList<OAIActivityCategory>>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_tasks_with_no_customer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_tasks_with_no_project = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_as_member = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_keyword_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_task_status_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &phase_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_sub_phases = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &contact_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &has_duration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_hours = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_unassigned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &use_strict_start_and_end_date_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &activity_type_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIRecurrenceType> &recurrence_type = ::OpenAPI::OptionalParam<OAIRecurrenceType>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void activitiesGetActivity(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void activityParticipantsGetActivityParticipant(const QString &guid);

    /**
    * @param[in]  activity_guid QString [required]
    */
    virtual void activityParticipantsGetActivityParticipants(const QString &activity_guid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activitiesGetActivitiesCallback(OAIHttpRequestWorker *worker);
    void activitiesGetActivityCallback(OAIHttpRequestWorker *worker);
    void activityParticipantsGetActivityParticipantCallback(OAIHttpRequestWorker *worker);
    void activityParticipantsGetActivityParticipantsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activitiesGetActivitiesSignal(QList<OAIActivityModel> summary);
    void activitiesGetActivitySignal(OAIActivityModel summary);
    void activityParticipantsGetActivityParticipantSignal(OAIActivityParticipantModel summary);
    void activityParticipantsGetActivityParticipantsSignal(QList<OAIActivityParticipantModel> summary);


    void activitiesGetActivitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivityModel> summary);
    void activitiesGetActivitySignalFull(OAIHttpRequestWorker *worker, OAIActivityModel summary);
    void activityParticipantsGetActivityParticipantSignalFull(OAIHttpRequestWorker *worker, OAIActivityParticipantModel summary);
    void activityParticipantsGetActivityParticipantsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivityParticipantModel> summary);

    Q_DECL_DEPRECATED_X("Use activitiesGetActivitiesSignalError() instead")
    void activitiesGetActivitiesSignalE(QList<OAIActivityModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activitiesGetActivitiesSignalError(QList<OAIActivityModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activitiesGetActivitySignalError() instead")
    void activitiesGetActivitySignalE(OAIActivityModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activitiesGetActivitySignalError(OAIActivityModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityParticipantsGetActivityParticipantSignalError() instead")
    void activityParticipantsGetActivityParticipantSignalE(OAIActivityParticipantModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityParticipantsGetActivityParticipantSignalError(OAIActivityParticipantModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityParticipantsGetActivityParticipantsSignalError() instead")
    void activityParticipantsGetActivityParticipantsSignalE(QList<OAIActivityParticipantModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityParticipantsGetActivityParticipantsSignalError(QList<OAIActivityParticipantModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activitiesGetActivitiesSignalErrorFull() instead")
    void activitiesGetActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activitiesGetActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activitiesGetActivitySignalErrorFull() instead")
    void activitiesGetActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activitiesGetActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityParticipantsGetActivityParticipantSignalErrorFull() instead")
    void activityParticipantsGetActivityParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityParticipantsGetActivityParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityParticipantsGetActivityParticipantsSignalErrorFull() instead")
    void activityParticipantsGetActivityParticipantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityParticipantsGetActivityParticipantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
