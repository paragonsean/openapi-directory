/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductForProjectOutputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductForProjectOutputModel::OAIProductForProjectOutputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductForProjectOutputModel::OAIProductForProjectOutputModel() {
    this->initializeModel();
}

OAIProductForProjectOutputModel::~OAIProductForProjectOutputModel() {}

void OAIProductForProjectOutputModel::initializeModel() {

    m_is_volume_priced_isSet = false;
    m_is_volume_priced_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;
}

void OAIProductForProjectOutputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductForProjectOutputModel::fromJsonObject(QJsonObject json) {

    m_is_volume_priced_isValid = ::OpenAPI::fromJsonValue(m_is_volume_priced, json[QString("isVolumePriced")]);
    m_is_volume_priced_isSet = !json[QString("isVolumePriced")].isNull() && m_is_volume_priced_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;
}

QString OAIProductForProjectOutputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductForProjectOutputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_is_volume_priced_isSet) {
        obj.insert(QString("isVolumePriced"), ::OpenAPI::toJsonValue(m_is_volume_priced));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    return obj;
}

bool OAIProductForProjectOutputModel::isIsVolumePriced() const {
    return m_is_volume_priced;
}
void OAIProductForProjectOutputModel::setIsVolumePriced(const bool &is_volume_priced) {
    m_is_volume_priced = is_volume_priced;
    m_is_volume_priced_isSet = true;
}

bool OAIProductForProjectOutputModel::is_is_volume_priced_Set() const{
    return m_is_volume_priced_isSet;
}

bool OAIProductForProjectOutputModel::is_is_volume_priced_Valid() const{
    return m_is_volume_priced_isValid;
}

OAIProductOutputModel OAIProductForProjectOutputModel::getProduct() const {
    return m_product;
}
void OAIProductForProjectOutputModel::setProduct(const OAIProductOutputModel &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIProductForProjectOutputModel::is_product_Set() const{
    return m_product_isSet;
}

bool OAIProductForProjectOutputModel::is_product_Valid() const{
    return m_product_isValid;
}

bool OAIProductForProjectOutputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_volume_priced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductForProjectOutputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
