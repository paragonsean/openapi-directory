/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoicesReadApi_H
#define OAI_OAIInvoicesReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include "OAIExpensesClass.h"
#include "OAIHttpFileElement.h"
#include "OAIInvoiceOutputModel.h"
#include "OAIInvoiceRowOutputModel.h"
#include "OAIInvoiceRowType.h"
#include "OAIInvoiceSettingsOutputModel.h"
#include "OAIKeyValuePairOfStringAndSortDirection.h"
#include "OAIProductType.h"
#include "OAIProjectFeeOutputModel.h"
#include "OAIProjectInvoiceSettingsOutputModel.h"
#include "OAIProjectTravelExpenseOutputModel.h"
#include "OAIReimbursedProjectFeeOutputModel.h"
#include "OAIReimbursedProjectTravelExpenseOutputModel.h"
#include "OAIReimbursedWorkHourOutputModel.h"
#include "OAIWorkHourOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoicesReadApi : public QObject {
    Q_OBJECT

public:
    OAIInvoicesReadApi(const int timeOut = 0);
    ~OAIInvoicesReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  invoice_guid QString [required]
    */
    virtual void finvoicesGetFinvoiceByInvoiceGuid(const QString &invoice_guid);

    /**
    * @param[in]  invoice_status_guid QString [required]
    */
    virtual void finvoicesGetFinvoicesByInvoiceStatus(const QString &invoice_status_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void invoiceRowsGetInvoiceRow(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void invoiceRowsGetInvoiceRows(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  row_type OAIInvoiceRowType [optional]
    */
    virtual void invoiceRowsGetInvoiceRowsForInvoice(const QString &invoice_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIInvoiceRowType> &row_type = ::OpenAPI::OptionalParam<OAIInvoiceRowType>());

    /**
    * @param[in]  invoice_guid QString [required]
    */
    virtual void invoiceSettingsGetInvoiceSettings(const QString &invoice_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void invoicesGetInvoice(const QString &guid);

    /**
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  payment_date_start QDateTime [optional]
    * @param[in]  invoice_status_guids QList<QString> [optional]
    * @param[in]  project_guids QList<QString> [optional]
    * @param[in]  project_owner_guids QList<QString> [optional]
    * @param[in]  project_business_unit_guids QList<QString> [optional]
    * @param[in]  customer_guids QList<QString> [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  minimum_total_excluding_tax double [optional]
    * @param[in]  maximum_total_excluding_tax double [optional]
    * @param[in]  reference_numbers QList<QString> [optional]
    * @param[in]  numbers QList<qint32> [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  sales_person_guids QList<QString> [optional]
    * @param[in]  created_by_user_guids QList<QString> [optional]
    */
    virtual void invoicesGetInvoices(const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &payment_date_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &invoice_status_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_business_unit_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<double> &minimum_total_excluding_tax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &maximum_total_excluding_tax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &reference_numbers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &numbers = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &sales_person_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &created_by_user_guids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  product_type OAIProductType [optional]
    */
    virtual void projectFeesGetInvoiceProjectFees(const QString &invoice_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductType> &product_type = ::OpenAPI::OptionalParam<OAIProductType>());

    /**
    * @param[in]  invoice_row_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  product_type OAIProductType [optional]
    */
    virtual void projectFeesGetInvoiceRowProjectFees(const QString &invoice_row_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductType> &product_type = ::OpenAPI::OptionalParam<OAIProductType>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_billable bool [optional]
    */
    virtual void projectFeesGetUninvoicedProjectFeesForInvoice(const QString &invoice_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectInvoiceSettingsGetProjectInvoiceSetting(const QString &guid);

    /**
    * @param[in]  project_guid QString [required]
    */
    virtual void projectInvoiceSettingsGetProjectInvoiceSettings(const QString &project_guid);

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    */
    virtual void projectTravelExpensesGetInvoiceProjectTravelExpenses(const QString &invoice_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>());

    /**
    * @param[in]  invoice_row_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    */
    virtual void projectTravelExpensesGetInvoiceRowProjectTravelExpenses(const QString &invoice_row_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  is_billable bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    */
    virtual void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice(const QString &invoice_guid, const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void reimbursedProjectFeesGetInvoiceReimbursedProjectFees(const QString &invoice_guid, const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invoice_row_guid QString [required]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees(const QString &invoice_row_guid, const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses(const QString &invoice_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  invoice_row_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses(const QString &invoice_row_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void reimbursedWorkHoursGetInvoiceReimbursedWorkHours(const QString &invoice_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  invoice_row_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours(const QString &invoice_row_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  invoice_row_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void workHoursGetInvoiceRowWorkHours(const QString &invoice_row_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void workHoursGetInvoiceWorkHours(const QString &invoice_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  invoice_guid QString [required]
    * @param[in]  is_billable bool [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    */
    virtual void workHoursGetUninvoicedWorkHoursForInvoice(const QString &invoice_guid, const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void finvoicesGetFinvoiceByInvoiceGuidCallback(OAIHttpRequestWorker *worker);
    void finvoicesGetFinvoicesByInvoiceStatusCallback(OAIHttpRequestWorker *worker);
    void invoiceRowsGetInvoiceRowCallback(OAIHttpRequestWorker *worker);
    void invoiceRowsGetInvoiceRowsCallback(OAIHttpRequestWorker *worker);
    void invoiceRowsGetInvoiceRowsForInvoiceCallback(OAIHttpRequestWorker *worker);
    void invoiceSettingsGetInvoiceSettingsCallback(OAIHttpRequestWorker *worker);
    void invoicesGetInvoiceCallback(OAIHttpRequestWorker *worker);
    void invoicesGetInvoicesCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetInvoiceProjectFeesCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetInvoiceRowProjectFeesCallback(OAIHttpRequestWorker *worker);
    void projectFeesGetUninvoicedProjectFeesForInvoiceCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsGetProjectInvoiceSettingCallback(OAIHttpRequestWorker *worker);
    void projectInvoiceSettingsGetProjectInvoiceSettingsCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetInvoiceProjectTravelExpensesCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceCallback(OAIHttpRequestWorker *worker);
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesCallback(OAIHttpRequestWorker *worker);
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesCallback(OAIHttpRequestWorker *worker);
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesCallback(OAIHttpRequestWorker *worker);
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesCallback(OAIHttpRequestWorker *worker);
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursCallback(OAIHttpRequestWorker *worker);
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursCallback(OAIHttpRequestWorker *worker);
    void workHoursGetInvoiceRowWorkHoursCallback(OAIHttpRequestWorker *worker);
    void workHoursGetInvoiceWorkHoursCallback(OAIHttpRequestWorker *worker);
    void workHoursGetUninvoicedWorkHoursForInvoiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void finvoicesGetFinvoiceByInvoiceGuidSignal(OAIHttpFileElement summary);
    void finvoicesGetFinvoicesByInvoiceStatusSignal(OAIHttpFileElement summary);
    void invoiceRowsGetInvoiceRowSignal(OAIInvoiceRowOutputModel summary);
    void invoiceRowsGetInvoiceRowsSignal(QList<OAIInvoiceRowOutputModel> summary);
    void invoiceRowsGetInvoiceRowsForInvoiceSignal(QList<OAIInvoiceRowOutputModel> summary);
    void invoiceSettingsGetInvoiceSettingsSignal(OAIInvoiceSettingsOutputModel summary);
    void invoicesGetInvoiceSignal(OAIInvoiceOutputModel summary);
    void invoicesGetInvoicesSignal(QList<OAIInvoiceOutputModel> summary);
    void projectFeesGetInvoiceProjectFeesSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetInvoiceRowProjectFeesSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetUninvoicedProjectFeesForInvoiceSignal(QList<OAIProjectFeeOutputModel> summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignal(OAIProjectInvoiceSettingsOutputModel summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignal(QList<OAIProjectInvoiceSettingsOutputModel> summary);
    void projectTravelExpensesGetInvoiceProjectTravelExpensesSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignal(QList<OAIReimbursedProjectFeeOutputModel> summary);
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignal(QList<OAIReimbursedProjectFeeOutputModel> summary);
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignal(QList<OAIReimbursedProjectTravelExpenseOutputModel> summary);
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignal(QList<OAIReimbursedProjectTravelExpenseOutputModel> summary);
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignal(QList<OAIReimbursedWorkHourOutputModel> summary);
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignal(QList<OAIReimbursedWorkHourOutputModel> summary);
    void workHoursGetInvoiceRowWorkHoursSignal(QList<OAIWorkHourOutputModel> summary);
    void workHoursGetInvoiceWorkHoursSignal(QList<OAIWorkHourOutputModel> summary);
    void workHoursGetUninvoicedWorkHoursForInvoiceSignal(QList<OAIWorkHourOutputModel> summary);


    void finvoicesGetFinvoiceByInvoiceGuidSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void finvoicesGetFinvoicesByInvoiceStatusSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void invoiceRowsGetInvoiceRowSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceRowOutputModel summary);
    void invoiceRowsGetInvoiceRowsSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceRowOutputModel> summary);
    void invoiceRowsGetInvoiceRowsForInvoiceSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceRowOutputModel> summary);
    void invoiceSettingsGetInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceSettingsOutputModel summary);
    void invoicesGetInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceOutputModel summary);
    void invoicesGetInvoicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceOutputModel> summary);
    void projectFeesGetInvoiceProjectFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetInvoiceRowProjectFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectFeesGetUninvoicedProjectFeesForInvoiceSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFeeOutputModel> summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalFull(OAIHttpRequestWorker *worker, OAIProjectInvoiceSettingsOutputModel summary);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectInvoiceSettingsOutputModel> summary);
    void projectTravelExpensesGetInvoiceProjectTravelExpensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIReimbursedProjectFeeOutputModel> summary);
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIReimbursedProjectFeeOutputModel> summary);
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIReimbursedProjectTravelExpenseOutputModel> summary);
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIReimbursedProjectTravelExpenseOutputModel> summary);
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIReimbursedWorkHourOutputModel> summary);
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIReimbursedWorkHourOutputModel> summary);
    void workHoursGetInvoiceRowWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkHourOutputModel> summary);
    void workHoursGetInvoiceWorkHoursSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkHourOutputModel> summary);
    void workHoursGetUninvoicedWorkHoursForInvoiceSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkHourOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use finvoicesGetFinvoiceByInvoiceGuidSignalError() instead")
    void finvoicesGetFinvoiceByInvoiceGuidSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void finvoicesGetFinvoiceByInvoiceGuidSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use finvoicesGetFinvoicesByInvoiceStatusSignalError() instead")
    void finvoicesGetFinvoicesByInvoiceStatusSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void finvoicesGetFinvoicesByInvoiceStatusSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceRowsGetInvoiceRowSignalError() instead")
    void invoiceRowsGetInvoiceRowSignalE(OAIInvoiceRowOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsGetInvoiceRowSignalError(OAIInvoiceRowOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceRowsGetInvoiceRowsSignalError() instead")
    void invoiceRowsGetInvoiceRowsSignalE(QList<OAIInvoiceRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsGetInvoiceRowsSignalError(QList<OAIInvoiceRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceRowsGetInvoiceRowsForInvoiceSignalError() instead")
    void invoiceRowsGetInvoiceRowsForInvoiceSignalE(QList<OAIInvoiceRowOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsGetInvoiceRowsForInvoiceSignalError(QList<OAIInvoiceRowOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceSettingsGetInvoiceSettingsSignalError() instead")
    void invoiceSettingsGetInvoiceSettingsSignalE(OAIInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceSettingsGetInvoiceSettingsSignalError(OAIInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesGetInvoiceSignalError() instead")
    void invoicesGetInvoiceSignalE(OAIInvoiceOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesGetInvoiceSignalError(OAIInvoiceOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesGetInvoicesSignalError() instead")
    void invoicesGetInvoicesSignalE(QList<OAIInvoiceOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesGetInvoicesSignalError(QList<OAIInvoiceOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetInvoiceProjectFeesSignalError() instead")
    void projectFeesGetInvoiceProjectFeesSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetInvoiceProjectFeesSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetInvoiceRowProjectFeesSignalError() instead")
    void projectFeesGetInvoiceRowProjectFeesSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetInvoiceRowProjectFeesSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetUninvoicedProjectFeesForInvoiceSignalError() instead")
    void projectFeesGetUninvoicedProjectFeesForInvoiceSignalE(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetUninvoicedProjectFeesForInvoiceSignalError(QList<OAIProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingSignalError() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalE(OAIProjectInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalError(OAIProjectInvoiceSettingsOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingsSignalError() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalE(QList<OAIProjectInvoiceSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalError(QList<OAIProjectInvoiceSettingsOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetInvoiceProjectTravelExpensesSignalError() instead")
    void projectTravelExpensesGetInvoiceProjectTravelExpensesSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetInvoiceProjectTravelExpensesSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalError() instead")
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalError() instead")
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalError() instead")
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalE(QList<OAIReimbursedProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalError(QList<OAIReimbursedProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalError() instead")
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalE(QList<OAIReimbursedProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalError(QList<OAIReimbursedProjectFeeOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalError() instead")
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalE(QList<OAIReimbursedProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalError(QList<OAIReimbursedProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalError() instead")
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalE(QList<OAIReimbursedProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalError(QList<OAIReimbursedProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalError() instead")
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalE(QList<OAIReimbursedWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalError(QList<OAIReimbursedWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalError() instead")
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalE(QList<OAIReimbursedWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalError(QList<OAIReimbursedWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetInvoiceRowWorkHoursSignalError() instead")
    void workHoursGetInvoiceRowWorkHoursSignalE(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetInvoiceRowWorkHoursSignalError(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetInvoiceWorkHoursSignalError() instead")
    void workHoursGetInvoiceWorkHoursSignalE(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetInvoiceWorkHoursSignalError(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetUninvoicedWorkHoursForInvoiceSignalError() instead")
    void workHoursGetUninvoicedWorkHoursForInvoiceSignalE(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetUninvoicedWorkHoursForInvoiceSignalError(QList<OAIWorkHourOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use finvoicesGetFinvoiceByInvoiceGuidSignalErrorFull() instead")
    void finvoicesGetFinvoiceByInvoiceGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void finvoicesGetFinvoiceByInvoiceGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use finvoicesGetFinvoicesByInvoiceStatusSignalErrorFull() instead")
    void finvoicesGetFinvoicesByInvoiceStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void finvoicesGetFinvoicesByInvoiceStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceRowsGetInvoiceRowSignalErrorFull() instead")
    void invoiceRowsGetInvoiceRowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsGetInvoiceRowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceRowsGetInvoiceRowsSignalErrorFull() instead")
    void invoiceRowsGetInvoiceRowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsGetInvoiceRowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceRowsGetInvoiceRowsForInvoiceSignalErrorFull() instead")
    void invoiceRowsGetInvoiceRowsForInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceRowsGetInvoiceRowsForInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceSettingsGetInvoiceSettingsSignalErrorFull() instead")
    void invoiceSettingsGetInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceSettingsGetInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesGetInvoiceSignalErrorFull() instead")
    void invoicesGetInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesGetInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoicesGetInvoicesSignalErrorFull() instead")
    void invoicesGetInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoicesGetInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetInvoiceProjectFeesSignalErrorFull() instead")
    void projectFeesGetInvoiceProjectFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetInvoiceProjectFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetInvoiceRowProjectFeesSignalErrorFull() instead")
    void projectFeesGetInvoiceRowProjectFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetInvoiceRowProjectFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectFeesGetUninvoicedProjectFeesForInvoiceSignalErrorFull() instead")
    void projectFeesGetUninvoicedProjectFeesForInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectFeesGetUninvoicedProjectFeesForInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingSignalErrorFull() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectInvoiceSettingsGetProjectInvoiceSettingsSignalErrorFull() instead")
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectInvoiceSettingsGetProjectInvoiceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetInvoiceProjectTravelExpensesSignalErrorFull() instead")
    void projectTravelExpensesGetInvoiceProjectTravelExpensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetInvoiceProjectTravelExpensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalErrorFull() instead")
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalErrorFull() instead")
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalErrorFull() instead")
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalErrorFull() instead")
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalErrorFull() instead")
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalErrorFull() instead")
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalErrorFull() instead")
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalErrorFull() instead")
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetInvoiceRowWorkHoursSignalErrorFull() instead")
    void workHoursGetInvoiceRowWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetInvoiceRowWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetInvoiceWorkHoursSignalErrorFull() instead")
    void workHoursGetInvoiceWorkHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetInvoiceWorkHoursSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workHoursGetUninvoicedWorkHoursForInvoiceSignalErrorFull() instead")
    void workHoursGetUninvoicedWorkHoursForInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workHoursGetUninvoicedWorkHoursForInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
