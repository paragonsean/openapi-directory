/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchFieldDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchFieldDataType::OAISearchFieldDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchFieldDataType::OAISearchFieldDataType() {
    this->initializeModel();
}

OAISearchFieldDataType::~OAISearchFieldDataType() {}

void OAISearchFieldDataType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISearchFieldDataType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISearchFieldDataType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("String", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Boolean", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Integer", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Percentage", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::PERCENTAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Numeric", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::NUMERIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Money", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::MONEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Date", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DateTime", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::DATETIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Time", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::TIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Object", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ObjectCollection", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::OBJECTCOLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IpAddress", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchFieldDataType::IPADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISearchFieldDataType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISearchFieldDataType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISearchFieldDataType::STRING:
            val = "String";
            break;
        case eOAISearchFieldDataType::BOOLEAN:
            val = "Boolean";
            break;
        case eOAISearchFieldDataType::INTEGER:
            val = "Integer";
            break;
        case eOAISearchFieldDataType::PERCENTAGE:
            val = "Percentage";
            break;
        case eOAISearchFieldDataType::NUMERIC:
            val = "Numeric";
            break;
        case eOAISearchFieldDataType::MONEY:
            val = "Money";
            break;
        case eOAISearchFieldDataType::DATE:
            val = "Date";
            break;
        case eOAISearchFieldDataType::DATETIME:
            val = "DateTime";
            break;
        case eOAISearchFieldDataType::TIME:
            val = "Time";
            break;
        case eOAISearchFieldDataType::OBJECT:
            val = "Object";
            break;
        case eOAISearchFieldDataType::OBJECTCOLLECTION:
            val = "ObjectCollection";
            break;
        case eOAISearchFieldDataType::IPADDRESS:
            val = "IpAddress";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISearchFieldDataType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISearchFieldDataType::eOAISearchFieldDataType OAISearchFieldDataType::getValue() const {
    return m_value;
}

void OAISearchFieldDataType::setValue(const OAISearchFieldDataType::eOAISearchFieldDataType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISearchFieldDataType::isSet() const {
    
    return m_value_isSet;
}

bool OAISearchFieldDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
