/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersDeleteApi_H
#define OAI_OAICustomersDeleteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExceptionModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersDeleteApi : public QObject {
    Q_OBJECT

public:
    OAICustomersDeleteApi(const int timeOut = 0);
    ~OAICustomersDeleteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void addressesDeleteAddress(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void contactCommunicationsDeleteContactCommunication(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void contactsDeleteContact(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCountrySettingsDeleteCustomerCountrySetting(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCustomValuesDeleteCustomerCustomValue(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerMarketSegmentsDeleteCustomerMarketSegment(const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customersDeleteCustomer(const QString &guid);

    /**
    * @param[in]  contact_guid QString [required]
    * @param[in]  guid QString [required]
    */
    virtual void keywordsDeleteContactKeyword(const QString &contact_guid, const QString &guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesNotesDeleteCustomerSalesNote(const QString &guid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addressesDeleteAddressCallback(OAIHttpRequestWorker *worker);
    void contactCommunicationsDeleteContactCommunicationCallback(OAIHttpRequestWorker *worker);
    void contactsDeleteContactCallback(OAIHttpRequestWorker *worker);
    void customerCountrySettingsDeleteCustomerCountrySettingCallback(OAIHttpRequestWorker *worker);
    void customerCustomValuesDeleteCustomerCustomValueCallback(OAIHttpRequestWorker *worker);
    void customerMarketSegmentsDeleteCustomerMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void customersDeleteCustomerCallback(OAIHttpRequestWorker *worker);
    void keywordsDeleteContactKeywordCallback(OAIHttpRequestWorker *worker);
    void salesNotesDeleteCustomerSalesNoteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addressesDeleteAddressSignal();
    void contactCommunicationsDeleteContactCommunicationSignal();
    void contactsDeleteContactSignal();
    void customerCountrySettingsDeleteCustomerCountrySettingSignal();
    void customerCustomValuesDeleteCustomerCustomValueSignal();
    void customerMarketSegmentsDeleteCustomerMarketSegmentSignal();
    void customersDeleteCustomerSignal();
    void keywordsDeleteContactKeywordSignal();
    void salesNotesDeleteCustomerSalesNoteSignal();


    void addressesDeleteAddressSignalFull(OAIHttpRequestWorker *worker);
    void contactCommunicationsDeleteContactCommunicationSignalFull(OAIHttpRequestWorker *worker);
    void contactsDeleteContactSignalFull(OAIHttpRequestWorker *worker);
    void customerCountrySettingsDeleteCustomerCountrySettingSignalFull(OAIHttpRequestWorker *worker);
    void customerCustomValuesDeleteCustomerCustomValueSignalFull(OAIHttpRequestWorker *worker);
    void customerMarketSegmentsDeleteCustomerMarketSegmentSignalFull(OAIHttpRequestWorker *worker);
    void customersDeleteCustomerSignalFull(OAIHttpRequestWorker *worker);
    void keywordsDeleteContactKeywordSignalFull(OAIHttpRequestWorker *worker);
    void salesNotesDeleteCustomerSalesNoteSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addressesDeleteAddressSignalError() instead")
    void addressesDeleteAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addressesDeleteAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsDeleteContactCommunicationSignalError() instead")
    void contactCommunicationsDeleteContactCommunicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsDeleteContactCommunicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsDeleteContactSignalError() instead")
    void contactsDeleteContactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contactsDeleteContactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsDeleteCustomerCountrySettingSignalError() instead")
    void customerCountrySettingsDeleteCustomerCountrySettingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsDeleteCustomerCountrySettingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesDeleteCustomerCustomValueSignalError() instead")
    void customerCustomValuesDeleteCustomerCustomValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesDeleteCustomerCustomValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsDeleteCustomerMarketSegmentSignalError() instead")
    void customerMarketSegmentsDeleteCustomerMarketSegmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsDeleteCustomerMarketSegmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersDeleteCustomerSignalError() instead")
    void customersDeleteCustomerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customersDeleteCustomerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsDeleteContactKeywordSignalError() instead")
    void keywordsDeleteContactKeywordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsDeleteContactKeywordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesDeleteCustomerSalesNoteSignalError() instead")
    void salesNotesDeleteCustomerSalesNoteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesDeleteCustomerSalesNoteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addressesDeleteAddressSignalErrorFull() instead")
    void addressesDeleteAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesDeleteAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsDeleteContactCommunicationSignalErrorFull() instead")
    void contactCommunicationsDeleteContactCommunicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsDeleteContactCommunicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsDeleteContactSignalErrorFull() instead")
    void contactsDeleteContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsDeleteContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsDeleteCustomerCountrySettingSignalErrorFull() instead")
    void customerCountrySettingsDeleteCustomerCountrySettingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsDeleteCustomerCountrySettingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesDeleteCustomerCustomValueSignalErrorFull() instead")
    void customerCustomValuesDeleteCustomerCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesDeleteCustomerCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsDeleteCustomerMarketSegmentSignalErrorFull() instead")
    void customerMarketSegmentsDeleteCustomerMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsDeleteCustomerMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersDeleteCustomerSignalErrorFull() instead")
    void customersDeleteCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersDeleteCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsDeleteContactKeywordSignalErrorFull() instead")
    void keywordsDeleteContactKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsDeleteContactKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesDeleteCustomerSalesNoteSignalErrorFull() instead")
    void salesNotesDeleteCustomerSalesNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesDeleteCustomerSalesNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
