/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITravelsReadApi_H
#define OAI_OAITravelsReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeletedProjectTravelExpenseModel.h"
#include "OAIExceptionModel.h"
#include "OAIExpensesClass.h"
#include "OAIProjectTravelExpenseOutputModel.h"
#include "OAITravelReimbursementOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITravelsReadApi : public QObject {
    Q_OBJECT

public:
    OAITravelsReadApi(const int timeOut = 0);
    ~OAITravelsReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  project_guid QList<QString> [optional]
    * @param[in]  user_guid QList<QString> [optional]
    * @param[in]  deleted_since QDateTime [optional]
    */
    virtual void projectTravelExpensesGetDeletedProjectTravelExpenses(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &deleted_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void projectTravelExpensesGetProjectTravelExpense(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void projectTravelExpensesGetProjectTravelExpenses(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_guid QString [required]
    * @param[in]  is_billable bool [optional]
    * @param[in]  is_billed bool [optional]
    * @param[in]  invoiceable_date QDateTime [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_billable_period_in_future bool [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    */
    virtual void projectTravelExpensesGetProjectTravelExpensesForProject(const QString &project_guid, const ::OpenAPI::OptionalParam<bool> &is_billable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_billed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &invoiceable_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_billable_period_in_future = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>());

    /**
    * @param[in]  travel_reimbursement_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    */
    virtual void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement(const QString &travel_reimbursement_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>());

    /**
    * @param[in]  user_guid QString [required]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  expense_class OAIExpensesClass [optional]
    * @param[in]  is_reimbursed bool [optional]
    * @param[in]  is_travel_reimbursement_required bool [optional]
    * @param[in]  travel_reimbursement_guid QString [optional]
    * @param[in]  cost_currency_guid QString [optional]
    */
    virtual void projectTravelExpensesGetProjectTravelExpensesForUser(const QString &user_guid, const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIExpensesClass> &expense_class = ::OpenAPI::OptionalParam<OAIExpensesClass>(), const ::OpenAPI::OptionalParam<bool> &is_reimbursed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_travel_reimbursement_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &travel_reimbursement_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cost_currency_guid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void travelReimbursementsGetTravelReimbursement(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  travel_reimbursement_status_guids QList<QString> [optional]
    */
    virtual void travelReimbursementsGetTravelReimbursements(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &travel_reimbursement_status_guids = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projectTravelExpensesGetDeletedProjectTravelExpensesCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetProjectTravelExpenseCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetProjectTravelExpensesCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetProjectTravelExpensesForProjectCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementCallback(OAIHttpRequestWorker *worker);
    void projectTravelExpensesGetProjectTravelExpensesForUserCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementsGetTravelReimbursementCallback(OAIHttpRequestWorker *worker);
    void travelReimbursementsGetTravelReimbursementsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projectTravelExpensesGetDeletedProjectTravelExpensesSignal(QList<OAIDeletedProjectTravelExpenseModel> summary);
    void projectTravelExpensesGetProjectTravelExpenseSignal(OAIProjectTravelExpenseOutputModel summary);
    void projectTravelExpensesGetProjectTravelExpensesSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetProjectTravelExpensesForProjectSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetProjectTravelExpensesForUserSignal(QList<OAIProjectTravelExpenseOutputModel> summary);
    void travelReimbursementsGetTravelReimbursementSignal(OAITravelReimbursementOutputModel summary);
    void travelReimbursementsGetTravelReimbursementsSignal(QList<OAITravelReimbursementOutputModel> summary);


    void projectTravelExpensesGetDeletedProjectTravelExpensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeletedProjectTravelExpenseModel> summary);
    void projectTravelExpensesGetProjectTravelExpenseSignalFull(OAIHttpRequestWorker *worker, OAIProjectTravelExpenseOutputModel summary);
    void projectTravelExpensesGetProjectTravelExpensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetProjectTravelExpensesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void projectTravelExpensesGetProjectTravelExpensesForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTravelExpenseOutputModel> summary);
    void travelReimbursementsGetTravelReimbursementSignalFull(OAIHttpRequestWorker *worker, OAITravelReimbursementOutputModel summary);
    void travelReimbursementsGetTravelReimbursementsSignalFull(OAIHttpRequestWorker *worker, QList<OAITravelReimbursementOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetDeletedProjectTravelExpensesSignalError() instead")
    void projectTravelExpensesGetDeletedProjectTravelExpensesSignalE(QList<OAIDeletedProjectTravelExpenseModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetDeletedProjectTravelExpensesSignalError(QList<OAIDeletedProjectTravelExpenseModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpenseSignalError() instead")
    void projectTravelExpensesGetProjectTravelExpenseSignalE(OAIProjectTravelExpenseOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpenseSignalError(OAIProjectTravelExpenseOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesSignalError() instead")
    void projectTravelExpensesGetProjectTravelExpensesSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesForProjectSignalError() instead")
    void projectTravelExpensesGetProjectTravelExpensesForProjectSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesForProjectSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalError() instead")
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesForUserSignalError() instead")
    void projectTravelExpensesGetProjectTravelExpensesForUserSignalE(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesForUserSignalError(QList<OAIProjectTravelExpenseOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementsGetTravelReimbursementSignalError() instead")
    void travelReimbursementsGetTravelReimbursementSignalE(OAITravelReimbursementOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementsGetTravelReimbursementSignalError(OAITravelReimbursementOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementsGetTravelReimbursementsSignalError() instead")
    void travelReimbursementsGetTravelReimbursementsSignalE(QList<OAITravelReimbursementOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementsGetTravelReimbursementsSignalError(QList<OAITravelReimbursementOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetDeletedProjectTravelExpensesSignalErrorFull() instead")
    void projectTravelExpensesGetDeletedProjectTravelExpensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetDeletedProjectTravelExpensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpenseSignalErrorFull() instead")
    void projectTravelExpensesGetProjectTravelExpenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesSignalErrorFull() instead")
    void projectTravelExpensesGetProjectTravelExpensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesForProjectSignalErrorFull() instead")
    void projectTravelExpensesGetProjectTravelExpensesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalErrorFull() instead")
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTravelExpensesGetProjectTravelExpensesForUserSignalErrorFull() instead")
    void projectTravelExpensesGetProjectTravelExpensesForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTravelExpensesGetProjectTravelExpensesForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementsGetTravelReimbursementSignalErrorFull() instead")
    void travelReimbursementsGetTravelReimbursementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementsGetTravelReimbursementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelReimbursementsGetTravelReimbursementsSignalErrorFull() instead")
    void travelReimbursementsGetTravelReimbursementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelReimbursementsGetTravelReimbursementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
