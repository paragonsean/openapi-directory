/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersReadApi_H
#define OAI_OAICustomersReadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddressModel.h"
#include "OAIContactCommunicationModel.h"
#include "OAIContactModel.h"
#include "OAICustomerCountrySettingsOutputModel.h"
#include "OAICustomerCustomValueModel.h"
#include "OAICustomerMarketSegmentModel.h"
#include "OAICustomerModel.h"
#include "OAICustomerSalesNoteOutputModel.h"
#include "OAIExceptionModel.h"
#include "OAIKeyValuePairOfStringAndObject.h"
#include "OAIKeyValuePairOfStringAndSortDirection.h"
#include "OAIKeywordModel.h"
#include "OAISalesNoteOutputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersReadApi : public QObject {
    Q_OBJECT

public:
    OAICustomersReadApi(const int timeOut = 0);
    ~OAICustomersReadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void addressesGetAddress(const QString &guid);

    /**
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void addressesGetAddresses(const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  contact_guid QString [required]
    */
    virtual void addressesGetContactAddress(const QString &contact_guid);

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  calculate_row_count bool [optional]
    */
    virtual void addressesGetCustomerAddresses(const QString &customer_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void contactCommunicationsGetCommunication(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void contactCommunicationsGetCommunications(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  contact_guid QString [required]
    * @param[in]  active bool [optional]
    */
    virtual void contactCommunicationsGetCommunications2(const QString &contact_guid, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void contactsGetContact(const QString &guid);

    /**
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  search_criterias QList<OAIKeyValuePairOfStringAndObject> [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void contactsGetContacts(const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndObject>> &search_criterias = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndObject>>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    */
    virtual void contactsGetCustomerContacts(const QString &customer_guid, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_guid QString [required]
    */
    virtual void customerCountrySettingsGetCustomerCountrySettings(const QString &customer_guid);

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerCustomValuesGetCustomerCustomValue(const QString &guid);

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  active bool [optional]
    * @param[in]  target QList<QString> [optional]
    * @param[in]  calculate_row_count bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void customerCustomValuesGetCustomerCustomValues(const QString &customer_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &target = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &calculate_row_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  text_to_search QString [optional]
    * @param[in]  parent_market_segment_guid QString [optional]
    * @param[in]  include_parent_level bool [optional]
    */
    virtual void customerMarketSegmentsGetAllCustomerMarketSegments(const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_to_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_market_segment_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_parent_level = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customerMarketSegmentsGetCustomerMarketSegment(const QString &guid);

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  first_row qint32 [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  include_market_segments_from_registry bool [optional]
    */
    virtual void customerMarketSegmentsGetCustomerMarketSegments(const QString &customer_guid, const ::OpenAPI::OptionalParam<qint32> &first_row = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_market_segments_from_registry = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void customersGetCustomer(const QString &guid);

    /**
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  customer_owner_guids QList<QString> [optional]
    * @param[in]  is_internal bool [optional]
    * @param[in]  numbers QList<qint64> [optional]
    * @param[in]  changed_since QDateTime [optional]
    * @param[in]  email_addresses QList<QString> [optional]
    * @param[in]  customer_names QList<QString> [optional]
    */
    virtual void customersGetCustomers(const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_owner_guids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_internal = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint64>> &numbers = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &email_addresses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &customer_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  contact_guid QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  sortings QList<OAIKeyValuePairOfStringAndSortDirection> [optional]
    */
    virtual void keywordsGetContactKeywords(const QString &contact_guid, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>> &sortings = ::OpenAPI::OptionalParam<QList<OAIKeyValuePairOfStringAndSortDirection>>());

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void salesNotesGetAllCustomerSalesNotes(const QString &customer_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void salesNotesGetCustomerSalesNote(const QString &guid);

    /**
    * @param[in]  customer_guid QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  row_count qint32 [optional]
    * @param[in]  changed_since QDateTime [optional]
    */
    virtual void salesNotesGetCustomerSalesNotes(const QString &customer_guid, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &row_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &changed_since = ::OpenAPI::OptionalParam<QDateTime>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addressesGetAddressCallback(OAIHttpRequestWorker *worker);
    void addressesGetAddressesCallback(OAIHttpRequestWorker *worker);
    void addressesGetContactAddressCallback(OAIHttpRequestWorker *worker);
    void addressesGetCustomerAddressesCallback(OAIHttpRequestWorker *worker);
    void contactCommunicationsGetCommunicationCallback(OAIHttpRequestWorker *worker);
    void contactCommunicationsGetCommunicationsCallback(OAIHttpRequestWorker *worker);
    void contactCommunicationsGetCommunications2Callback(OAIHttpRequestWorker *worker);
    void contactsGetContactCallback(OAIHttpRequestWorker *worker);
    void contactsGetContactsCallback(OAIHttpRequestWorker *worker);
    void contactsGetCustomerContactsCallback(OAIHttpRequestWorker *worker);
    void customerCountrySettingsGetCustomerCountrySettingsCallback(OAIHttpRequestWorker *worker);
    void customerCustomValuesGetCustomerCustomValueCallback(OAIHttpRequestWorker *worker);
    void customerCustomValuesGetCustomerCustomValuesCallback(OAIHttpRequestWorker *worker);
    void customerMarketSegmentsGetAllCustomerMarketSegmentsCallback(OAIHttpRequestWorker *worker);
    void customerMarketSegmentsGetCustomerMarketSegmentCallback(OAIHttpRequestWorker *worker);
    void customerMarketSegmentsGetCustomerMarketSegmentsCallback(OAIHttpRequestWorker *worker);
    void customersGetCustomerCallback(OAIHttpRequestWorker *worker);
    void customersGetCustomersCallback(OAIHttpRequestWorker *worker);
    void keywordsGetContactKeywordsCallback(OAIHttpRequestWorker *worker);
    void salesNotesGetAllCustomerSalesNotesCallback(OAIHttpRequestWorker *worker);
    void salesNotesGetCustomerSalesNoteCallback(OAIHttpRequestWorker *worker);
    void salesNotesGetCustomerSalesNotesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addressesGetAddressSignal(OAIAddressModel summary);
    void addressesGetAddressesSignal(QList<OAIAddressModel> summary);
    void addressesGetContactAddressSignal(QList<OAIAddressModel> summary);
    void addressesGetCustomerAddressesSignal(QList<OAIAddressModel> summary);
    void contactCommunicationsGetCommunicationSignal(OAIContactCommunicationModel summary);
    void contactCommunicationsGetCommunicationsSignal(QList<OAIContactCommunicationModel> summary);
    void contactCommunicationsGetCommunications2Signal(QList<OAIContactCommunicationModel> summary);
    void contactsGetContactSignal(OAIContactModel summary);
    void contactsGetContactsSignal(QList<OAIContactModel> summary);
    void contactsGetCustomerContactsSignal(QList<OAIContactModel> summary);
    void customerCountrySettingsGetCustomerCountrySettingsSignal(QList<OAICustomerCountrySettingsOutputModel> summary);
    void customerCustomValuesGetCustomerCustomValueSignal(OAICustomerCustomValueModel summary);
    void customerCustomValuesGetCustomerCustomValuesSignal(QList<OAICustomerCustomValueModel> summary);
    void customerMarketSegmentsGetAllCustomerMarketSegmentsSignal(QList<OAICustomerMarketSegmentModel> summary);
    void customerMarketSegmentsGetCustomerMarketSegmentSignal(OAICustomerMarketSegmentModel summary);
    void customerMarketSegmentsGetCustomerMarketSegmentsSignal(QList<OAICustomerMarketSegmentModel> summary);
    void customersGetCustomerSignal(OAICustomerModel summary);
    void customersGetCustomersSignal(QList<OAICustomerModel> summary);
    void keywordsGetContactKeywordsSignal(QList<OAIKeywordModel> summary);
    void salesNotesGetAllCustomerSalesNotesSignal(QList<OAISalesNoteOutputModel> summary);
    void salesNotesGetCustomerSalesNoteSignal(OAICustomerSalesNoteOutputModel summary);
    void salesNotesGetCustomerSalesNotesSignal(QList<OAICustomerSalesNoteOutputModel> summary);


    void addressesGetAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddressModel summary);
    void addressesGetAddressesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddressModel> summary);
    void addressesGetContactAddressSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddressModel> summary);
    void addressesGetCustomerAddressesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddressModel> summary);
    void contactCommunicationsGetCommunicationSignalFull(OAIHttpRequestWorker *worker, OAIContactCommunicationModel summary);
    void contactCommunicationsGetCommunicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactCommunicationModel> summary);
    void contactCommunicationsGetCommunications2SignalFull(OAIHttpRequestWorker *worker, QList<OAIContactCommunicationModel> summary);
    void contactsGetContactSignalFull(OAIHttpRequestWorker *worker, OAIContactModel summary);
    void contactsGetContactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactModel> summary);
    void contactsGetCustomerContactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactModel> summary);
    void customerCountrySettingsGetCustomerCountrySettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCountrySettingsOutputModel> summary);
    void customerCustomValuesGetCustomerCustomValueSignalFull(OAIHttpRequestWorker *worker, OAICustomerCustomValueModel summary);
    void customerCustomValuesGetCustomerCustomValuesSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCustomValueModel> summary);
    void customerMarketSegmentsGetAllCustomerMarketSegmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerMarketSegmentModel> summary);
    void customerMarketSegmentsGetCustomerMarketSegmentSignalFull(OAIHttpRequestWorker *worker, OAICustomerMarketSegmentModel summary);
    void customerMarketSegmentsGetCustomerMarketSegmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerMarketSegmentModel> summary);
    void customersGetCustomerSignalFull(OAIHttpRequestWorker *worker, OAICustomerModel summary);
    void customersGetCustomersSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerModel> summary);
    void keywordsGetContactKeywordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIKeywordModel> summary);
    void salesNotesGetAllCustomerSalesNotesSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesNoteOutputModel> summary);
    void salesNotesGetCustomerSalesNoteSignalFull(OAIHttpRequestWorker *worker, OAICustomerSalesNoteOutputModel summary);
    void salesNotesGetCustomerSalesNotesSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerSalesNoteOutputModel> summary);

    Q_DECL_DEPRECATED_X("Use addressesGetAddressSignalError() instead")
    void addressesGetAddressSignalE(OAIAddressModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetAddressSignalError(OAIAddressModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesGetAddressesSignalError() instead")
    void addressesGetAddressesSignalE(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetAddressesSignalError(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesGetContactAddressSignalError() instead")
    void addressesGetContactAddressSignalE(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetContactAddressSignalError(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesGetCustomerAddressesSignalError() instead")
    void addressesGetCustomerAddressesSignalE(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetCustomerAddressesSignalError(QList<OAIAddressModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsGetCommunicationSignalError() instead")
    void contactCommunicationsGetCommunicationSignalE(OAIContactCommunicationModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsGetCommunicationSignalError(OAIContactCommunicationModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsGetCommunicationsSignalError() instead")
    void contactCommunicationsGetCommunicationsSignalE(QList<OAIContactCommunicationModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsGetCommunicationsSignalError(QList<OAIContactCommunicationModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsGetCommunications2SignalError() instead")
    void contactCommunicationsGetCommunications2SignalE(QList<OAIContactCommunicationModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsGetCommunications2SignalError(QList<OAIContactCommunicationModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsGetContactSignalError() instead")
    void contactsGetContactSignalE(OAIContactModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsGetContactSignalError(OAIContactModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsGetContactsSignalError() instead")
    void contactsGetContactsSignalE(QList<OAIContactModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsGetContactsSignalError(QList<OAIContactModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsGetCustomerContactsSignalError() instead")
    void contactsGetCustomerContactsSignalE(QList<OAIContactModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsGetCustomerContactsSignalError(QList<OAIContactModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsGetCustomerCountrySettingsSignalError() instead")
    void customerCountrySettingsGetCustomerCountrySettingsSignalE(QList<OAICustomerCountrySettingsOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsGetCustomerCountrySettingsSignalError(QList<OAICustomerCountrySettingsOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesGetCustomerCustomValueSignalError() instead")
    void customerCustomValuesGetCustomerCustomValueSignalE(OAICustomerCustomValueModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesGetCustomerCustomValueSignalError(OAICustomerCustomValueModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesGetCustomerCustomValuesSignalError() instead")
    void customerCustomValuesGetCustomerCustomValuesSignalE(QList<OAICustomerCustomValueModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesGetCustomerCustomValuesSignalError(QList<OAICustomerCustomValueModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsGetAllCustomerMarketSegmentsSignalError() instead")
    void customerMarketSegmentsGetAllCustomerMarketSegmentsSignalE(QList<OAICustomerMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsGetAllCustomerMarketSegmentsSignalError(QList<OAICustomerMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsGetCustomerMarketSegmentSignalError() instead")
    void customerMarketSegmentsGetCustomerMarketSegmentSignalE(OAICustomerMarketSegmentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsGetCustomerMarketSegmentSignalError(OAICustomerMarketSegmentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsGetCustomerMarketSegmentsSignalError() instead")
    void customerMarketSegmentsGetCustomerMarketSegmentsSignalE(QList<OAICustomerMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsGetCustomerMarketSegmentsSignalError(QList<OAICustomerMarketSegmentModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetCustomerSignalError() instead")
    void customersGetCustomerSignalE(OAICustomerModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetCustomerSignalError(OAICustomerModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetCustomersSignalError() instead")
    void customersGetCustomersSignalE(QList<OAICustomerModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetCustomersSignalError(QList<OAICustomerModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetContactKeywordsSignalError() instead")
    void keywordsGetContactKeywordsSignalE(QList<OAIKeywordModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetContactKeywordsSignalError(QList<OAIKeywordModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetAllCustomerSalesNotesSignalError() instead")
    void salesNotesGetAllCustomerSalesNotesSignalE(QList<OAISalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetAllCustomerSalesNotesSignalError(QList<OAISalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetCustomerSalesNoteSignalError() instead")
    void salesNotesGetCustomerSalesNoteSignalE(OAICustomerSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetCustomerSalesNoteSignalError(OAICustomerSalesNoteOutputModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetCustomerSalesNotesSignalError() instead")
    void salesNotesGetCustomerSalesNotesSignalE(QList<OAICustomerSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetCustomerSalesNotesSignalError(QList<OAICustomerSalesNoteOutputModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addressesGetAddressSignalErrorFull() instead")
    void addressesGetAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesGetAddressesSignalErrorFull() instead")
    void addressesGetAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesGetContactAddressSignalErrorFull() instead")
    void addressesGetContactAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetContactAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addressesGetCustomerAddressesSignalErrorFull() instead")
    void addressesGetCustomerAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesGetCustomerAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsGetCommunicationSignalErrorFull() instead")
    void contactCommunicationsGetCommunicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsGetCommunicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsGetCommunicationsSignalErrorFull() instead")
    void contactCommunicationsGetCommunicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsGetCommunicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactCommunicationsGetCommunications2SignalErrorFull() instead")
    void contactCommunicationsGetCommunications2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactCommunicationsGetCommunications2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsGetContactSignalErrorFull() instead")
    void contactsGetContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsGetContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsGetContactsSignalErrorFull() instead")
    void contactsGetContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsGetContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactsGetCustomerContactsSignalErrorFull() instead")
    void contactsGetCustomerContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactsGetCustomerContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountrySettingsGetCustomerCountrySettingsSignalErrorFull() instead")
    void customerCountrySettingsGetCustomerCountrySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountrySettingsGetCustomerCountrySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesGetCustomerCustomValueSignalErrorFull() instead")
    void customerCustomValuesGetCustomerCustomValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesGetCustomerCustomValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCustomValuesGetCustomerCustomValuesSignalErrorFull() instead")
    void customerCustomValuesGetCustomerCustomValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCustomValuesGetCustomerCustomValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsGetAllCustomerMarketSegmentsSignalErrorFull() instead")
    void customerMarketSegmentsGetAllCustomerMarketSegmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsGetAllCustomerMarketSegmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsGetCustomerMarketSegmentSignalErrorFull() instead")
    void customerMarketSegmentsGetCustomerMarketSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsGetCustomerMarketSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerMarketSegmentsGetCustomerMarketSegmentsSignalErrorFull() instead")
    void customerMarketSegmentsGetCustomerMarketSegmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerMarketSegmentsGetCustomerMarketSegmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetCustomerSignalErrorFull() instead")
    void customersGetCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetCustomersSignalErrorFull() instead")
    void customersGetCustomersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetCustomersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywordsGetContactKeywordsSignalErrorFull() instead")
    void keywordsGetContactKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywordsGetContactKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetAllCustomerSalesNotesSignalErrorFull() instead")
    void salesNotesGetAllCustomerSalesNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetAllCustomerSalesNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetCustomerSalesNoteSignalErrorFull() instead")
    void salesNotesGetCustomerSalesNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetCustomerSalesNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesNotesGetCustomerSalesNotesSignalErrorFull() instead")
    void salesNotesGetCustomerSalesNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesNotesGetCustomerSalesNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
