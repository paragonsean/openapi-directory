/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceStatusSubModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceStatusSubModel::OAIInvoiceStatusSubModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceStatusSubModel::OAIInvoiceStatusSubModel() {
    this->initializeModel();
}

OAIInvoiceStatusSubModel::~OAIInvoiceStatusSubModel() {}

void OAIInvoiceStatusSubModel::initializeModel() {

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_paid_isSet = false;
    m_is_paid_isValid = false;

    m_is_sent_isSet = false;
    m_is_sent_isValid = false;

    m_is_waiting_payment_isSet = false;
    m_is_waiting_payment_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIInvoiceStatusSubModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceStatusSubModel::fromJsonObject(QJsonObject json) {

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_is_paid_isValid = ::OpenAPI::fromJsonValue(m_is_paid, json[QString("isPaid")]);
    m_is_paid_isSet = !json[QString("isPaid")].isNull() && m_is_paid_isValid;

    m_is_sent_isValid = ::OpenAPI::fromJsonValue(m_is_sent, json[QString("isSent")]);
    m_is_sent_isSet = !json[QString("isSent")].isNull() && m_is_sent_isValid;

    m_is_waiting_payment_isValid = ::OpenAPI::fromJsonValue(m_is_waiting_payment, json[QString("isWaitingPayment")]);
    m_is_waiting_payment_isSet = !json[QString("isWaitingPayment")].isNull() && m_is_waiting_payment_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIInvoiceStatusSubModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceStatusSubModel::asJsonObject() const {
    QJsonObject obj;
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_paid_isSet) {
        obj.insert(QString("isPaid"), ::OpenAPI::toJsonValue(m_is_paid));
    }
    if (m_is_sent_isSet) {
        obj.insert(QString("isSent"), ::OpenAPI::toJsonValue(m_is_sent));
    }
    if (m_is_waiting_payment_isSet) {
        obj.insert(QString("isWaitingPayment"), ::OpenAPI::toJsonValue(m_is_waiting_payment));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIInvoiceStatusSubModel::getGuid() const {
    return m_guid;
}
void OAIInvoiceStatusSubModel::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIInvoiceStatusSubModel::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIInvoiceStatusSubModel::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIInvoiceStatusSubModel::isIsPaid() const {
    return m_is_paid;
}
void OAIInvoiceStatusSubModel::setIsPaid(const bool &is_paid) {
    m_is_paid = is_paid;
    m_is_paid_isSet = true;
}

bool OAIInvoiceStatusSubModel::is_is_paid_Set() const{
    return m_is_paid_isSet;
}

bool OAIInvoiceStatusSubModel::is_is_paid_Valid() const{
    return m_is_paid_isValid;
}

bool OAIInvoiceStatusSubModel::isIsSent() const {
    return m_is_sent;
}
void OAIInvoiceStatusSubModel::setIsSent(const bool &is_sent) {
    m_is_sent = is_sent;
    m_is_sent_isSet = true;
}

bool OAIInvoiceStatusSubModel::is_is_sent_Set() const{
    return m_is_sent_isSet;
}

bool OAIInvoiceStatusSubModel::is_is_sent_Valid() const{
    return m_is_sent_isValid;
}

bool OAIInvoiceStatusSubModel::isIsWaitingPayment() const {
    return m_is_waiting_payment;
}
void OAIInvoiceStatusSubModel::setIsWaitingPayment(const bool &is_waiting_payment) {
    m_is_waiting_payment = is_waiting_payment;
    m_is_waiting_payment_isSet = true;
}

bool OAIInvoiceStatusSubModel::is_is_waiting_payment_Set() const{
    return m_is_waiting_payment_isSet;
}

bool OAIInvoiceStatusSubModel::is_is_waiting_payment_Valid() const{
    return m_is_waiting_payment_isValid;
}

QString OAIInvoiceStatusSubModel::getName() const {
    return m_name;
}
void OAIInvoiceStatusSubModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvoiceStatusSubModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvoiceStatusSubModel::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInvoiceStatusSubModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_waiting_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceStatusSubModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_guid_isValid && true;
}

} // namespace OpenAPI
