/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITravelReimbursementInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITravelReimbursementInputModel::OAITravelReimbursementInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITravelReimbursementInputModel::OAITravelReimbursementInputModel() {
    this->initializeModel();
}

OAITravelReimbursementInputModel::~OAITravelReimbursementInputModel() {}

void OAITravelReimbursementInputModel::initializeModel() {

    m_advance_payment_isSet = false;
    m_advance_payment_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_travel_reimbursement_status_isSet = false;
    m_travel_reimbursement_status_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAITravelReimbursementInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITravelReimbursementInputModel::fromJsonObject(QJsonObject json) {

    m_advance_payment_isValid = ::OpenAPI::fromJsonValue(m_advance_payment, json[QString("advancePayment")]);
    m_advance_payment_isSet = !json[QString("advancePayment")].isNull() && m_advance_payment_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("groupBy")]);
    m_group_by_isSet = !json[QString("groupBy")].isNull() && m_group_by_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_travel_reimbursement_status_isValid = ::OpenAPI::fromJsonValue(m_travel_reimbursement_status, json[QString("travelReimbursementStatus")]);
    m_travel_reimbursement_status_isSet = !json[QString("travelReimbursementStatus")].isNull() && m_travel_reimbursement_status_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAITravelReimbursementInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITravelReimbursementInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_advance_payment.isSet()) {
        obj.insert(QString("advancePayment"), ::OpenAPI::toJsonValue(m_advance_payment));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("groupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_travel_reimbursement_status.isSet()) {
        obj.insert(QString("travelReimbursementStatus"), ::OpenAPI::toJsonValue(m_travel_reimbursement_status));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIMoneyInputModelWithNullableAmount OAITravelReimbursementInputModel::getAdvancePayment() const {
    return m_advance_payment;
}
void OAITravelReimbursementInputModel::setAdvancePayment(const OAIMoneyInputModelWithNullableAmount &advance_payment) {
    m_advance_payment = advance_payment;
    m_advance_payment_isSet = true;
}

bool OAITravelReimbursementInputModel::is_advance_payment_Set() const{
    return m_advance_payment_isSet;
}

bool OAITravelReimbursementInputModel::is_advance_payment_Valid() const{
    return m_advance_payment_isValid;
}

OAIGroupByType OAITravelReimbursementInputModel::getGroupBy() const {
    return m_group_by;
}
void OAITravelReimbursementInputModel::setGroupBy(const OAIGroupByType &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAITravelReimbursementInputModel::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAITravelReimbursementInputModel::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QString OAITravelReimbursementInputModel::getTitle() const {
    return m_title;
}
void OAITravelReimbursementInputModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITravelReimbursementInputModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAITravelReimbursementInputModel::is_title_Valid() const{
    return m_title_isValid;
}

OAISimpleInputModel OAITravelReimbursementInputModel::getTravelReimbursementStatus() const {
    return m_travel_reimbursement_status;
}
void OAITravelReimbursementInputModel::setTravelReimbursementStatus(const OAISimpleInputModel &travel_reimbursement_status) {
    m_travel_reimbursement_status = travel_reimbursement_status;
    m_travel_reimbursement_status_isSet = true;
}

bool OAITravelReimbursementInputModel::is_travel_reimbursement_status_Set() const{
    return m_travel_reimbursement_status_isSet;
}

bool OAITravelReimbursementInputModel::is_travel_reimbursement_status_Valid() const{
    return m_travel_reimbursement_status_isValid;
}

OAIModelBaseWithRequiredGuid OAITravelReimbursementInputModel::getUser() const {
    return m_user;
}
void OAITravelReimbursementInputModel::setUser(const OAIModelBaseWithRequiredGuid &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITravelReimbursementInputModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAITravelReimbursementInputModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITravelReimbursementInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advance_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_reimbursement_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITravelReimbursementInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_isValid && true;
}

} // namespace OpenAPI
