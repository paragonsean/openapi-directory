/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceAllocationInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceAllocationInputModel {
  public static final String SERIALIZED_NAME_ALLOCATION_HOURS = "allocationHours";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_HOURS)
  private Double allocationHours;

  public static final String SERIALIZED_NAME_ALLOCATION_PERCENTAGE = "allocationPercentage";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_PERCENTAGE)
  private Integer allocationPercentage;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputModel phase;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private SimpleInputRequiredModel project;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleInputRequiredModel user;

  public ResourceAllocationInputModel() {
  }

  public ResourceAllocationInputModel allocationHours(Double allocationHours) {
    this.allocationHours = allocationHours;
    return this;
  }

  /**
   * Get allocationHours
   * @return allocationHours
   */
  @javax.annotation.Nullable
  public Double getAllocationHours() {
    return allocationHours;
  }

  public void setAllocationHours(Double allocationHours) {
    this.allocationHours = allocationHours;
  }


  public ResourceAllocationInputModel allocationPercentage(Integer allocationPercentage) {
    this.allocationPercentage = allocationPercentage;
    return this;
  }

  /**
   * Get allocationPercentage
   * @return allocationPercentage
   */
  @javax.annotation.Nullable
  public Integer getAllocationPercentage() {
    return allocationPercentage;
  }

  public void setAllocationPercentage(Integer allocationPercentage) {
    this.allocationPercentage = allocationPercentage;
  }


  public ResourceAllocationInputModel endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public ResourceAllocationInputModel phase(SimpleInputModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public SimpleInputModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputModel phase) {
    this.phase = phase;
  }


  public ResourceAllocationInputModel project(SimpleInputRequiredModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getProject() {
    return project;
  }

  public void setProject(SimpleInputRequiredModel project) {
    this.project = project;
  }


  public ResourceAllocationInputModel startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public ResourceAllocationInputModel user(SimpleInputRequiredModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getUser() {
    return user;
  }

  public void setUser(SimpleInputRequiredModel user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceAllocationInputModel resourceAllocationInputModel = (ResourceAllocationInputModel) o;
    return Objects.equals(this.allocationHours, resourceAllocationInputModel.allocationHours) &&
        Objects.equals(this.allocationPercentage, resourceAllocationInputModel.allocationPercentage) &&
        Objects.equals(this.endDate, resourceAllocationInputModel.endDate) &&
        Objects.equals(this.phase, resourceAllocationInputModel.phase) &&
        Objects.equals(this.project, resourceAllocationInputModel.project) &&
        Objects.equals(this.startDate, resourceAllocationInputModel.startDate) &&
        Objects.equals(this.user, resourceAllocationInputModel.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationHours, allocationPercentage, endDate, phase, project, startDate, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceAllocationInputModel {\n");
    sb.append("    allocationHours: ").append(toIndentedString(allocationHours)).append("\n");
    sb.append("    allocationPercentage: ").append(toIndentedString(allocationPercentage)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocationHours");
    openapiFields.add("allocationPercentage");
    openapiFields.add("endDate");
    openapiFields.add("phase");
    openapiFields.add("project");
    openapiFields.add("startDate");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceAllocationInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceAllocationInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceAllocationInputModel is not found in the empty JSON string", ResourceAllocationInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceAllocationInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceAllocationInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceAllocationInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the required field `project`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("project"));
      // validate the required field `user`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceAllocationInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceAllocationInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceAllocationInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceAllocationInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceAllocationInputModel>() {
           @Override
           public void write(JsonWriter out, ResourceAllocationInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceAllocationInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceAllocationInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceAllocationInputModel
   * @throws IOException if the JSON string is invalid with respect to ResourceAllocationInputModel
   */
  public static ResourceAllocationInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceAllocationInputModel.class);
  }

  /**
   * Convert an instance of ResourceAllocationInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

