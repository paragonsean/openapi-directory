/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ActivityActivityType;
import org.openapitools.client.model.ActivityCustomer;
import org.openapitools.client.model.ActivityOwnerModel;
import org.openapitools.client.model.ActivityPhase;
import org.openapitools.client.model.ActivityRecurrenceModel;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.RecurrenceType;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityModel {
  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private ActivityActivityType activityType;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private ActivityCustomer customer;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "endDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private OffsetDateTime endDateTime;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_HAS_DURATION = "hasDuration";
  @SerializedName(SERIALIZED_NAME_HAS_DURATION)
  private Boolean hasDuration;

  public static final String SERIALIZED_NAME_HAS_HOURS = "hasHours";
  @SerializedName(SERIALIZED_NAME_HAS_HOURS)
  private Boolean hasHours;

  public static final String SERIALIZED_NAME_IS_ALL_DAY = "isAllDay";
  @SerializedName(SERIALIZED_NAME_IS_ALL_DAY)
  private Boolean isAllDay;

  public static final String SERIALIZED_NAME_IS_CLOSED = "isClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_IS_UNASSIGNED = "isUnassigned";
  @SerializedName(SERIALIZED_NAME_IS_UNASSIGNED)
  private Boolean isUnassigned;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OWNER_USER = "ownerUser";
  @SerializedName(SERIALIZED_NAME_OWNER_USER)
  private ActivityOwnerModel ownerUser;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private ActivityPhase phase;

  public static final String SERIALIZED_NAME_PROJECT_TASK_STATUS = "projectTaskStatus";
  @SerializedName(SERIALIZED_NAME_PROJECT_TASK_STATUS)
  private ModelWithName projectTaskStatus;

  public static final String SERIALIZED_NAME_RECURRENCE = "recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private ActivityRecurrenceModel recurrence;

  public static final String SERIALIZED_NAME_RECURRENCE_PARENT_ACTIVITY_GUID = "recurrenceParentActivityGuid";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_PARENT_ACTIVITY_GUID)
  private String recurrenceParentActivityGuid;

  public static final String SERIALIZED_NAME_RECURRENCE_RULE = "recurrenceRule";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_RULE)
  private String recurrenceRule;

  public static final String SERIALIZED_NAME_RECURRENCE_TYPE = "recurrenceType";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_TYPE)
  private RecurrenceType recurrenceType;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private OffsetDateTime startDateTime;

  public ActivityModel() {
  }

  public ActivityModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     Boolean hasHours, 
     OffsetDateTime lastUpdatedDateTime, 
     String recurrenceRule
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.hasHours = hasHours;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    this.recurrenceRule = recurrenceRule;
  }

  public ActivityModel activityType(ActivityActivityType activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * Get activityType
   * @return activityType
   */
  @javax.annotation.Nonnull
  public ActivityActivityType getActivityType() {
    return activityType;
  }

  public void setActivityType(ActivityActivityType activityType) {
    this.activityType = activityType;
  }


  public ActivityModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public ActivityModel customer(ActivityCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public ActivityCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(ActivityCustomer customer) {
    this.customer = customer;
  }


  public ActivityModel endDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * Get endDateTime
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public ActivityModel hasDuration(Boolean hasDuration) {
    this.hasDuration = hasDuration;
    return this;
  }

  /**
   * Get hasDuration
   * @return hasDuration
   */
  @javax.annotation.Nullable
  public Boolean getHasDuration() {
    return hasDuration;
  }

  public void setHasDuration(Boolean hasDuration) {
    this.hasDuration = hasDuration;
  }


  /**
   * Get hasHours
   * @return hasHours
   */
  @javax.annotation.Nullable
  public Boolean getHasHours() {
    return hasHours;
  }



  public ActivityModel isAllDay(Boolean isAllDay) {
    this.isAllDay = isAllDay;
    return this;
  }

  /**
   * Get isAllDay
   * @return isAllDay
   */
  @javax.annotation.Nullable
  public Boolean getIsAllDay() {
    return isAllDay;
  }

  public void setIsAllDay(Boolean isAllDay) {
    this.isAllDay = isAllDay;
  }


  public ActivityModel isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public ActivityModel isUnassigned(Boolean isUnassigned) {
    this.isUnassigned = isUnassigned;
    return this;
  }

  /**
   * Get isUnassigned
   * @return isUnassigned
   */
  @javax.annotation.Nullable
  public Boolean getIsUnassigned() {
    return isUnassigned;
  }

  public void setIsUnassigned(Boolean isUnassigned) {
    this.isUnassigned = isUnassigned;
  }


  public ActivityModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ActivityModel location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public ActivityModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ActivityModel notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ActivityModel ownerUser(ActivityOwnerModel ownerUser) {
    this.ownerUser = ownerUser;
    return this;
  }

  /**
   * Get ownerUser
   * @return ownerUser
   */
  @javax.annotation.Nonnull
  public ActivityOwnerModel getOwnerUser() {
    return ownerUser;
  }

  public void setOwnerUser(ActivityOwnerModel ownerUser) {
    this.ownerUser = ownerUser;
  }


  public ActivityModel phase(ActivityPhase phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public ActivityPhase getPhase() {
    return phase;
  }

  public void setPhase(ActivityPhase phase) {
    this.phase = phase;
  }


  public ActivityModel projectTaskStatus(ModelWithName projectTaskStatus) {
    this.projectTaskStatus = projectTaskStatus;
    return this;
  }

  /**
   * Get projectTaskStatus
   * @return projectTaskStatus
   */
  @javax.annotation.Nullable
  public ModelWithName getProjectTaskStatus() {
    return projectTaskStatus;
  }

  public void setProjectTaskStatus(ModelWithName projectTaskStatus) {
    this.projectTaskStatus = projectTaskStatus;
  }


  public ActivityModel recurrence(ActivityRecurrenceModel recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * Get recurrence
   * @return recurrence
   */
  @javax.annotation.Nullable
  public ActivityRecurrenceModel getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(ActivityRecurrenceModel recurrence) {
    this.recurrence = recurrence;
  }


  public ActivityModel recurrenceParentActivityGuid(String recurrenceParentActivityGuid) {
    this.recurrenceParentActivityGuid = recurrenceParentActivityGuid;
    return this;
  }

  /**
   * Get recurrenceParentActivityGuid
   * @return recurrenceParentActivityGuid
   */
  @javax.annotation.Nullable
  public String getRecurrenceParentActivityGuid() {
    return recurrenceParentActivityGuid;
  }

  public void setRecurrenceParentActivityGuid(String recurrenceParentActivityGuid) {
    this.recurrenceParentActivityGuid = recurrenceParentActivityGuid;
  }


  /**
   * Get recurrenceRule
   * @return recurrenceRule
   */
  @javax.annotation.Nullable
  public String getRecurrenceRule() {
    return recurrenceRule;
  }



  public ActivityModel recurrenceType(RecurrenceType recurrenceType) {
    this.recurrenceType = recurrenceType;
    return this;
  }

  /**
   * Get recurrenceType
   * @return recurrenceType
   */
  @javax.annotation.Nullable
  public RecurrenceType getRecurrenceType() {
    return recurrenceType;
  }

  public void setRecurrenceType(RecurrenceType recurrenceType) {
    this.recurrenceType = recurrenceType;
  }


  public ActivityModel startDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * Get startDateTime
   * @return startDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityModel activityModel = (ActivityModel) o;
    return Objects.equals(this.activityType, activityModel.activityType) &&
        Objects.equals(this.createdBy, activityModel.createdBy) &&
        Objects.equals(this.createdDateTime, activityModel.createdDateTime) &&
        Objects.equals(this.customer, activityModel.customer) &&
        Objects.equals(this.endDateTime, activityModel.endDateTime) &&
        Objects.equals(this.guid, activityModel.guid) &&
        Objects.equals(this.hasDuration, activityModel.hasDuration) &&
        Objects.equals(this.hasHours, activityModel.hasHours) &&
        Objects.equals(this.isAllDay, activityModel.isAllDay) &&
        Objects.equals(this.isClosed, activityModel.isClosed) &&
        Objects.equals(this.isUnassigned, activityModel.isUnassigned) &&
        Objects.equals(this.lastUpdatedBy, activityModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, activityModel.lastUpdatedDateTime) &&
        Objects.equals(this.location, activityModel.location) &&
        Objects.equals(this.name, activityModel.name) &&
        Objects.equals(this.notes, activityModel.notes) &&
        Objects.equals(this.ownerUser, activityModel.ownerUser) &&
        Objects.equals(this.phase, activityModel.phase) &&
        Objects.equals(this.projectTaskStatus, activityModel.projectTaskStatus) &&
        Objects.equals(this.recurrence, activityModel.recurrence) &&
        Objects.equals(this.recurrenceParentActivityGuid, activityModel.recurrenceParentActivityGuid) &&
        Objects.equals(this.recurrenceRule, activityModel.recurrenceRule) &&
        Objects.equals(this.recurrenceType, activityModel.recurrenceType) &&
        Objects.equals(this.startDateTime, activityModel.startDateTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, createdBy, createdDateTime, customer, endDateTime, guid, hasDuration, hasHours, isAllDay, isClosed, isUnassigned, lastUpdatedBy, lastUpdatedDateTime, location, name, notes, ownerUser, phase, projectTaskStatus, recurrence, recurrenceParentActivityGuid, recurrenceRule, recurrenceType, startDateTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityModel {\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hasDuration: ").append(toIndentedString(hasDuration)).append("\n");
    sb.append("    hasHours: ").append(toIndentedString(hasHours)).append("\n");
    sb.append("    isAllDay: ").append(toIndentedString(isAllDay)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    isUnassigned: ").append(toIndentedString(isUnassigned)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    ownerUser: ").append(toIndentedString(ownerUser)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    projectTaskStatus: ").append(toIndentedString(projectTaskStatus)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    recurrenceParentActivityGuid: ").append(toIndentedString(recurrenceParentActivityGuid)).append("\n");
    sb.append("    recurrenceRule: ").append(toIndentedString(recurrenceRule)).append("\n");
    sb.append("    recurrenceType: ").append(toIndentedString(recurrenceType)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityType");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("customer");
    openapiFields.add("endDateTime");
    openapiFields.add("guid");
    openapiFields.add("hasDuration");
    openapiFields.add("hasHours");
    openapiFields.add("isAllDay");
    openapiFields.add("isClosed");
    openapiFields.add("isUnassigned");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("ownerUser");
    openapiFields.add("phase");
    openapiFields.add("projectTaskStatus");
    openapiFields.add("recurrence");
    openapiFields.add("recurrenceParentActivityGuid");
    openapiFields.add("recurrenceRule");
    openapiFields.add("recurrenceType");
    openapiFields.add("startDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activityType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("ownerUser");
    openapiRequiredFields.add("startDateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityModel is not found in the empty JSON string", ActivityModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivityModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `activityType`
      ActivityActivityType.validateJsonElement(jsonObj.get("activityType"));
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        ActivityCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the required field `ownerUser`
      ActivityOwnerModel.validateJsonElement(jsonObj.get("ownerUser"));
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        ActivityPhase.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `projectTaskStatus`
      if (jsonObj.get("projectTaskStatus") != null && !jsonObj.get("projectTaskStatus").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("projectTaskStatus"));
      }
      // validate the optional field `recurrence`
      if (jsonObj.get("recurrence") != null && !jsonObj.get("recurrence").isJsonNull()) {
        ActivityRecurrenceModel.validateJsonElement(jsonObj.get("recurrence"));
      }
      if ((jsonObj.get("recurrenceParentActivityGuid") != null && !jsonObj.get("recurrenceParentActivityGuid").isJsonNull()) && !jsonObj.get("recurrenceParentActivityGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrenceParentActivityGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrenceParentActivityGuid").toString()));
      }
      if ((jsonObj.get("recurrenceRule") != null && !jsonObj.get("recurrenceRule").isJsonNull()) && !jsonObj.get("recurrenceRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrenceRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrenceRule").toString()));
      }
      // validate the optional field `recurrenceType`
      if (jsonObj.get("recurrenceType") != null && !jsonObj.get("recurrenceType").isJsonNull()) {
        RecurrenceType.validateJsonElement(jsonObj.get("recurrenceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityModel>() {
           @Override
           public void write(JsonWriter out, ActivityModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityModel
   * @throws IOException if the JSON string is invalid with respect to ActivityModel
   */
  public static ActivityModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityModel.class);
  }

  /**
   * Convert an instance of ActivityModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

