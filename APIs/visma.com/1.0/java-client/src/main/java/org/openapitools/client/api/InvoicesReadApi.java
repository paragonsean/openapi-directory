/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import java.io.File;
import org.openapitools.client.model.InvoiceOutputModel;
import org.openapitools.client.model.InvoiceRowOutputModel;
import org.openapitools.client.model.InvoiceRowType;
import org.openapitools.client.model.InvoiceSettingsOutputModel;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectFeeOutputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;
import org.openapitools.client.model.ProjectTravelExpenseOutputModel;
import org.openapitools.client.model.ReimbursedProjectFeeOutputModel;
import org.openapitools.client.model.ReimbursedProjectTravelExpenseOutputModel;
import org.openapitools.client.model.ReimbursedWorkHourOutputModel;
import org.openapitools.client.model.WorkHourOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for finvoicesGetFinvoiceByInvoiceGuid
     * @param invoiceGuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports single invoice as Finvoice </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finvoicesGetFinvoiceByInvoiceGuidCall(String invoiceGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/finvoice"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/soap+xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finvoicesGetFinvoiceByInvoiceGuidValidateBeforeCall(String invoiceGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling finvoicesGetFinvoiceByInvoiceGuid(Async)");
        }

        return finvoicesGetFinvoiceByInvoiceGuidCall(invoiceGuid, _callback);

    }

    /**
     * 
     * 
     * @param invoiceGuid  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports single invoice as Finvoice </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public File finvoicesGetFinvoiceByInvoiceGuid(String invoiceGuid) throws ApiException {
        ApiResponse<File> localVarResp = finvoicesGetFinvoiceByInvoiceGuidWithHttpInfo(invoiceGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param invoiceGuid  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports single invoice as Finvoice </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> finvoicesGetFinvoiceByInvoiceGuidWithHttpInfo(String invoiceGuid) throws ApiException {
        okhttp3.Call localVarCall = finvoicesGetFinvoiceByInvoiceGuidValidateBeforeCall(invoiceGuid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param invoiceGuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports single invoice as Finvoice </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finvoicesGetFinvoiceByInvoiceGuidAsync(String invoiceGuid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = finvoicesGetFinvoiceByInvoiceGuidValidateBeforeCall(invoiceGuid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for finvoicesGetFinvoicesByInvoiceStatus
     * @param invoiceStatusGuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports all invoices by invoice status as stream of multiple Finvoices </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finvoicesGetFinvoicesByInvoiceStatusCall(String invoiceStatusGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicestatuses/{invoiceStatusGuid}/finvoices"
            .replace("{" + "invoiceStatusGuid" + "}", localVarApiClient.escapeString(invoiceStatusGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finvoicesGetFinvoicesByInvoiceStatusValidateBeforeCall(String invoiceStatusGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceStatusGuid' is set
        if (invoiceStatusGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceStatusGuid' when calling finvoicesGetFinvoicesByInvoiceStatus(Async)");
        }

        return finvoicesGetFinvoicesByInvoiceStatusCall(invoiceStatusGuid, _callback);

    }

    /**
     * 
     * 
     * @param invoiceStatusGuid  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports all invoices by invoice status as stream of multiple Finvoices </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public File finvoicesGetFinvoicesByInvoiceStatus(String invoiceStatusGuid) throws ApiException {
        ApiResponse<File> localVarResp = finvoicesGetFinvoicesByInvoiceStatusWithHttpInfo(invoiceStatusGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param invoiceStatusGuid  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports all invoices by invoice status as stream of multiple Finvoices </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> finvoicesGetFinvoicesByInvoiceStatusWithHttpInfo(String invoiceStatusGuid) throws ApiException {
        okhttp3.Call localVarCall = finvoicesGetFinvoicesByInvoiceStatusValidateBeforeCall(invoiceStatusGuid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param invoiceStatusGuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exports all invoices by invoice status as stream of multiple Finvoices </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finvoicesGetFinvoicesByInvoiceStatusAsync(String invoiceStatusGuid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = finvoicesGetFinvoicesByInvoiceStatusValidateBeforeCall(invoiceStatusGuid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceRowsGetInvoiceRow
     * @param guid GUID of the invoice row. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice row </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsGetInvoiceRowCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceRowsGetInvoiceRowValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoiceRowsGetInvoiceRow(Async)");
        }

        return invoiceRowsGetInvoiceRowCall(guid, _callback);

    }

    /**
     * Get invoice row by ID
     * 
     * @param guid GUID of the invoice row. (required)
     * @return InvoiceRowOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice row </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceRowOutputModel invoiceRowsGetInvoiceRow(String guid) throws ApiException {
        ApiResponse<InvoiceRowOutputModel> localVarResp = invoiceRowsGetInvoiceRowWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get invoice row by ID
     * 
     * @param guid GUID of the invoice row. (required)
     * @return ApiResponse&lt;InvoiceRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice row </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceRowOutputModel> invoiceRowsGetInvoiceRowWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = invoiceRowsGetInvoiceRowValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<InvoiceRowOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice row by ID (asynchronously)
     * 
     * @param guid GUID of the invoice row. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice row </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsGetInvoiceRowAsync(String guid, final ApiCallback<InvoiceRowOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceRowsGetInvoiceRowValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceRowOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceRowsGetInvoiceRows
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get invoice rows that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsGetInvoiceRowsCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceRowsGetInvoiceRowsValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return invoiceRowsGetInvoiceRowsCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get invoice rows
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get invoice rows that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;InvoiceRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceRowOutputModel> invoiceRowsGetInvoiceRows(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<InvoiceRowOutputModel>> localVarResp = invoiceRowsGetInvoiceRowsWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get invoice rows
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get invoice rows that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;InvoiceRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceRowOutputModel>> invoiceRowsGetInvoiceRowsWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = invoiceRowsGetInvoiceRowsValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<InvoiceRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice rows (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get invoice rows that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsGetInvoiceRowsAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<InvoiceRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceRowsGetInvoiceRowsValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceRowsGetInvoiceRowsForInvoice
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param rowType Optional: Type of the row. Either Hours or ProjectFees, Default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoice rows  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsGetInvoiceRowsForInvoiceCall(String invoiceGuid, String pageToken, Integer rowCount, InvoiceRowType rowType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/invoicerows"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (rowType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowType", rowType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceRowsGetInvoiceRowsForInvoiceValidateBeforeCall(String invoiceGuid, String pageToken, Integer rowCount, InvoiceRowType rowType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling invoiceRowsGetInvoiceRowsForInvoice(Async)");
        }

        return invoiceRowsGetInvoiceRowsForInvoiceCall(invoiceGuid, pageToken, rowCount, rowType, _callback);

    }

    /**
     * Get Invoice rows for an invoice.
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param rowType Optional: Type of the row. Either Hours or ProjectFees, Default all. (optional)
     * @return List&lt;InvoiceRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoice rows  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceRowOutputModel> invoiceRowsGetInvoiceRowsForInvoice(String invoiceGuid, String pageToken, Integer rowCount, InvoiceRowType rowType) throws ApiException {
        ApiResponse<List<InvoiceRowOutputModel>> localVarResp = invoiceRowsGetInvoiceRowsForInvoiceWithHttpInfo(invoiceGuid, pageToken, rowCount, rowType);
        return localVarResp.getData();
    }

    /**
     * Get Invoice rows for an invoice.
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param rowType Optional: Type of the row. Either Hours or ProjectFees, Default all. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoice rows  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceRowOutputModel>> invoiceRowsGetInvoiceRowsForInvoiceWithHttpInfo(String invoiceGuid, String pageToken, Integer rowCount, InvoiceRowType rowType) throws ApiException {
        okhttp3.Call localVarCall = invoiceRowsGetInvoiceRowsForInvoiceValidateBeforeCall(invoiceGuid, pageToken, rowCount, rowType, null);
        Type localVarReturnType = new TypeToken<List<InvoiceRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Invoice rows for an invoice. (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param rowType Optional: Type of the row. Either Hours or ProjectFees, Default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoice rows  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsGetInvoiceRowsForInvoiceAsync(String invoiceGuid, String pageToken, Integer rowCount, InvoiceRowType rowType, final ApiCallback<List<InvoiceRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceRowsGetInvoiceRowsForInvoiceValidateBeforeCall(invoiceGuid, pageToken, rowCount, rowType, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceSettingsGetInvoiceSettings
     * @param invoiceGuid Invoice GUID used to get the invoice settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceSettingsGetInvoiceSettingsCall(String invoiceGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/invoicesettings"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceSettingsGetInvoiceSettingsValidateBeforeCall(String invoiceGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling invoiceSettingsGetInvoiceSettings(Async)");
        }

        return invoiceSettingsGetInvoiceSettingsCall(invoiceGuid, _callback);

    }

    /**
     * Get invoice settings by invoice GUID
     * 
     * @param invoiceGuid Invoice GUID used to get the invoice settings. (required)
     * @return InvoiceSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceSettingsOutputModel invoiceSettingsGetInvoiceSettings(String invoiceGuid) throws ApiException {
        ApiResponse<InvoiceSettingsOutputModel> localVarResp = invoiceSettingsGetInvoiceSettingsWithHttpInfo(invoiceGuid);
        return localVarResp.getData();
    }

    /**
     * Get invoice settings by invoice GUID
     * 
     * @param invoiceGuid Invoice GUID used to get the invoice settings. (required)
     * @return ApiResponse&lt;InvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceSettingsOutputModel> invoiceSettingsGetInvoiceSettingsWithHttpInfo(String invoiceGuid) throws ApiException {
        okhttp3.Call localVarCall = invoiceSettingsGetInvoiceSettingsValidateBeforeCall(invoiceGuid, null);
        Type localVarReturnType = new TypeToken<InvoiceSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice settings by invoice GUID (asynchronously)
     * 
     * @param invoiceGuid Invoice GUID used to get the invoice settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceSettingsGetInvoiceSettingsAsync(String invoiceGuid, final ApiCallback<InvoiceSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceSettingsGetInvoiceSettingsValidateBeforeCall(invoiceGuid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoicesGetInvoice
     * @param guid GUID of the invoice. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesGetInvoiceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoicesGetInvoiceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoicesGetInvoice(Async)");
        }

        return invoicesGetInvoiceCall(guid, _callback);

    }

    /**
     * Get invoice by ID
     * 
     * @param guid GUID of the invoice. (required)
     * @return InvoiceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceOutputModel invoicesGetInvoice(String guid) throws ApiException {
        ApiResponse<InvoiceOutputModel> localVarResp = invoicesGetInvoiceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get invoice by ID
     * 
     * @param guid GUID of the invoice. (required)
     * @return ApiResponse&lt;InvoiceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceOutputModel> invoicesGetInvoiceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = invoicesGetInvoiceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<InvoiceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice by ID (asynchronously)
     * 
     * @param guid GUID of the invoice. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesGetInvoiceAsync(String guid, final ApiCallback<InvoiceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoicesGetInvoiceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoicesGetInvoices
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param paymentDateStart Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date. (optional)
     * @param invoiceStatusGuids Optional: Get invoices with this status only. Default: all statuses. (optional)
     * @param projectGuids Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all. (optional)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all. (optional)
     * @param customerGuids Optional: List of customer IDs. Get invoices for these customers. (optional)
     * @param startDate Optional: starting date from which to get the invoices. Default all. (optional)
     * @param endDate Optional: end date from which to get the invoices. Default all. (optional)
     * @param minimumTotalExcludingTax Optional: specifies minimum value for invoice total in organization currency. (optional)
     * @param maximumTotalExcludingTax Optional: specifies maximum value for invoice total in organization currency. (optional)
     * @param referenceNumbers Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number. (optional)
     * @param numbers Optional: Invoice number. If not provided, returns invoices with any invoice number. (optional)
     * @param changedSince Optional: Get invoices that have been added or changed after this date time (greater or equal). (optional)
     * @param salesPersonGuids Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons. (optional)
     * @param createdByUserGuids Optional: ID of the user who created the invoice. If not provided, returns for all users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoices  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesGetInvoicesCall(Integer rowCount, String pageToken, OffsetDateTime paymentDateStart, List<String> invoiceStatusGuids, List<String> projectGuids, List<String> projectOwnerGuids, List<String> projectBusinessUnitGuids, List<String> customerGuids, OffsetDateTime startDate, OffsetDateTime endDate, Double minimumTotalExcludingTax, Double maximumTotalExcludingTax, List<String> referenceNumbers, List<Integer> numbers, OffsetDateTime changedSince, List<String> salesPersonGuids, List<String> createdByUserGuids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (paymentDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentDateStart", paymentDateStart));
        }

        if (invoiceStatusGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "invoiceStatusGuids", invoiceStatusGuids));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (projectOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectOwnerGuids", projectOwnerGuids));
        }

        if (projectBusinessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectBusinessUnitGuids", projectBusinessUnitGuids));
        }

        if (customerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerGuids", customerGuids));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (minimumTotalExcludingTax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumTotalExcludingTax", minimumTotalExcludingTax));
        }

        if (maximumTotalExcludingTax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximumTotalExcludingTax", maximumTotalExcludingTax));
        }

        if (referenceNumbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "referenceNumbers", referenceNumbers));
        }

        if (numbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "numbers", numbers));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (salesPersonGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesPersonGuids", salesPersonGuids));
        }

        if (createdByUserGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "createdByUserGuids", createdByUserGuids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoicesGetInvoicesValidateBeforeCall(Integer rowCount, String pageToken, OffsetDateTime paymentDateStart, List<String> invoiceStatusGuids, List<String> projectGuids, List<String> projectOwnerGuids, List<String> projectBusinessUnitGuids, List<String> customerGuids, OffsetDateTime startDate, OffsetDateTime endDate, Double minimumTotalExcludingTax, Double maximumTotalExcludingTax, List<String> referenceNumbers, List<Integer> numbers, OffsetDateTime changedSince, List<String> salesPersonGuids, List<String> createdByUserGuids, final ApiCallback _callback) throws ApiException {
        return invoicesGetInvoicesCall(rowCount, pageToken, paymentDateStart, invoiceStatusGuids, projectGuids, projectOwnerGuids, projectBusinessUnitGuids, customerGuids, startDate, endDate, minimumTotalExcludingTax, maximumTotalExcludingTax, referenceNumbers, numbers, changedSince, salesPersonGuids, createdByUserGuids, _callback);

    }

    /**
     * Get Invoices
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param paymentDateStart Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date. (optional)
     * @param invoiceStatusGuids Optional: Get invoices with this status only. Default: all statuses. (optional)
     * @param projectGuids Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all. (optional)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all. (optional)
     * @param customerGuids Optional: List of customer IDs. Get invoices for these customers. (optional)
     * @param startDate Optional: starting date from which to get the invoices. Default all. (optional)
     * @param endDate Optional: end date from which to get the invoices. Default all. (optional)
     * @param minimumTotalExcludingTax Optional: specifies minimum value for invoice total in organization currency. (optional)
     * @param maximumTotalExcludingTax Optional: specifies maximum value for invoice total in organization currency. (optional)
     * @param referenceNumbers Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number. (optional)
     * @param numbers Optional: Invoice number. If not provided, returns invoices with any invoice number. (optional)
     * @param changedSince Optional: Get invoices that have been added or changed after this date time (greater or equal). (optional)
     * @param salesPersonGuids Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons. (optional)
     * @param createdByUserGuids Optional: ID of the user who created the invoice. If not provided, returns for all users. (optional)
     * @return List&lt;InvoiceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoices  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceOutputModel> invoicesGetInvoices(Integer rowCount, String pageToken, OffsetDateTime paymentDateStart, List<String> invoiceStatusGuids, List<String> projectGuids, List<String> projectOwnerGuids, List<String> projectBusinessUnitGuids, List<String> customerGuids, OffsetDateTime startDate, OffsetDateTime endDate, Double minimumTotalExcludingTax, Double maximumTotalExcludingTax, List<String> referenceNumbers, List<Integer> numbers, OffsetDateTime changedSince, List<String> salesPersonGuids, List<String> createdByUserGuids) throws ApiException {
        ApiResponse<List<InvoiceOutputModel>> localVarResp = invoicesGetInvoicesWithHttpInfo(rowCount, pageToken, paymentDateStart, invoiceStatusGuids, projectGuids, projectOwnerGuids, projectBusinessUnitGuids, customerGuids, startDate, endDate, minimumTotalExcludingTax, maximumTotalExcludingTax, referenceNumbers, numbers, changedSince, salesPersonGuids, createdByUserGuids);
        return localVarResp.getData();
    }

    /**
     * Get Invoices
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param paymentDateStart Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date. (optional)
     * @param invoiceStatusGuids Optional: Get invoices with this status only. Default: all statuses. (optional)
     * @param projectGuids Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all. (optional)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all. (optional)
     * @param customerGuids Optional: List of customer IDs. Get invoices for these customers. (optional)
     * @param startDate Optional: starting date from which to get the invoices. Default all. (optional)
     * @param endDate Optional: end date from which to get the invoices. Default all. (optional)
     * @param minimumTotalExcludingTax Optional: specifies minimum value for invoice total in organization currency. (optional)
     * @param maximumTotalExcludingTax Optional: specifies maximum value for invoice total in organization currency. (optional)
     * @param referenceNumbers Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number. (optional)
     * @param numbers Optional: Invoice number. If not provided, returns invoices with any invoice number. (optional)
     * @param changedSince Optional: Get invoices that have been added or changed after this date time (greater or equal). (optional)
     * @param salesPersonGuids Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons. (optional)
     * @param createdByUserGuids Optional: ID of the user who created the invoice. If not provided, returns for all users. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoices  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceOutputModel>> invoicesGetInvoicesWithHttpInfo(Integer rowCount, String pageToken, OffsetDateTime paymentDateStart, List<String> invoiceStatusGuids, List<String> projectGuids, List<String> projectOwnerGuids, List<String> projectBusinessUnitGuids, List<String> customerGuids, OffsetDateTime startDate, OffsetDateTime endDate, Double minimumTotalExcludingTax, Double maximumTotalExcludingTax, List<String> referenceNumbers, List<Integer> numbers, OffsetDateTime changedSince, List<String> salesPersonGuids, List<String> createdByUserGuids) throws ApiException {
        okhttp3.Call localVarCall = invoicesGetInvoicesValidateBeforeCall(rowCount, pageToken, paymentDateStart, invoiceStatusGuids, projectGuids, projectOwnerGuids, projectBusinessUnitGuids, customerGuids, startDate, endDate, minimumTotalExcludingTax, maximumTotalExcludingTax, referenceNumbers, numbers, changedSince, salesPersonGuids, createdByUserGuids, null);
        Type localVarReturnType = new TypeToken<List<InvoiceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Invoices (asynchronously)
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param paymentDateStart Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date. (optional)
     * @param invoiceStatusGuids Optional: Get invoices with this status only. Default: all statuses. (optional)
     * @param projectGuids Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all. (optional)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all. (optional)
     * @param customerGuids Optional: List of customer IDs. Get invoices for these customers. (optional)
     * @param startDate Optional: starting date from which to get the invoices. Default all. (optional)
     * @param endDate Optional: end date from which to get the invoices. Default all. (optional)
     * @param minimumTotalExcludingTax Optional: specifies minimum value for invoice total in organization currency. (optional)
     * @param maximumTotalExcludingTax Optional: specifies maximum value for invoice total in organization currency. (optional)
     * @param referenceNumbers Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number. (optional)
     * @param numbers Optional: Invoice number. If not provided, returns invoices with any invoice number. (optional)
     * @param changedSince Optional: Get invoices that have been added or changed after this date time (greater or equal). (optional)
     * @param salesPersonGuids Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons. (optional)
     * @param createdByUserGuids Optional: ID of the user who created the invoice. If not provided, returns for all users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Invoices  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesGetInvoicesAsync(Integer rowCount, String pageToken, OffsetDateTime paymentDateStart, List<String> invoiceStatusGuids, List<String> projectGuids, List<String> projectOwnerGuids, List<String> projectBusinessUnitGuids, List<String> customerGuids, OffsetDateTime startDate, OffsetDateTime endDate, Double minimumTotalExcludingTax, Double maximumTotalExcludingTax, List<String> referenceNumbers, List<Integer> numbers, OffsetDateTime changedSince, List<String> salesPersonGuids, List<String> createdByUserGuids, final ApiCallback<List<InvoiceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoicesGetInvoicesValidateBeforeCall(rowCount, pageToken, paymentDateStart, invoiceStatusGuids, projectGuids, projectOwnerGuids, projectBusinessUnitGuids, customerGuids, startDate, endDate, minimumTotalExcludingTax, maximumTotalExcludingTax, referenceNumbers, numbers, changedSince, salesPersonGuids, createdByUserGuids, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetInvoiceProjectFees
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetInvoiceProjectFeesCall(String invoiceGuid, String pageToken, Integer rowCount, ProductType productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/projectfees"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetInvoiceProjectFeesValidateBeforeCall(String invoiceGuid, String pageToken, Integer rowCount, ProductType productType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling projectFeesGetInvoiceProjectFees(Async)");
        }

        return projectFeesGetInvoiceProjectFeesCall(invoiceGuid, pageToken, rowCount, productType, _callback);

    }

    /**
     * Get all the project fees on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @return List&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFeeOutputModel> projectFeesGetInvoiceProjectFees(String invoiceGuid, String pageToken, Integer rowCount, ProductType productType) throws ApiException {
        ApiResponse<List<ProjectFeeOutputModel>> localVarResp = projectFeesGetInvoiceProjectFeesWithHttpInfo(invoiceGuid, pageToken, rowCount, productType);
        return localVarResp.getData();
    }

    /**
     * Get all the project fees on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @return ApiResponse&lt;List&lt;ProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFeeOutputModel>> projectFeesGetInvoiceProjectFeesWithHttpInfo(String invoiceGuid, String pageToken, Integer rowCount, ProductType productType) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetInvoiceProjectFeesValidateBeforeCall(invoiceGuid, pageToken, rowCount, productType, null);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project fees on an invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetInvoiceProjectFeesAsync(String invoiceGuid, String pageToken, Integer rowCount, ProductType productType, final ApiCallback<List<ProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetInvoiceProjectFeesValidateBeforeCall(invoiceGuid, pageToken, rowCount, productType, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetInvoiceRowProjectFees
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetInvoiceRowProjectFeesCall(String invoiceRowGuid, String pageToken, Integer rowCount, ProductType productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{invoiceRowGuid}/projectfees"
            .replace("{" + "invoiceRowGuid" + "}", localVarApiClient.escapeString(invoiceRowGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetInvoiceRowProjectFeesValidateBeforeCall(String invoiceRowGuid, String pageToken, Integer rowCount, ProductType productType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRowGuid' is set
        if (invoiceRowGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceRowGuid' when calling projectFeesGetInvoiceRowProjectFees(Async)");
        }

        return projectFeesGetInvoiceRowProjectFeesCall(invoiceRowGuid, pageToken, rowCount, productType, _callback);

    }

    /**
     * Get all the project fees on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @return List&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFeeOutputModel> projectFeesGetInvoiceRowProjectFees(String invoiceRowGuid, String pageToken, Integer rowCount, ProductType productType) throws ApiException {
        ApiResponse<List<ProjectFeeOutputModel>> localVarResp = projectFeesGetInvoiceRowProjectFeesWithHttpInfo(invoiceRowGuid, pageToken, rowCount, productType);
        return localVarResp.getData();
    }

    /**
     * Get all the project fees on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @return ApiResponse&lt;List&lt;ProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFeeOutputModel>> projectFeesGetInvoiceRowProjectFeesWithHttpInfo(String invoiceRowGuid, String pageToken, Integer rowCount, ProductType productType) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetInvoiceRowProjectFeesValidateBeforeCall(invoiceRowGuid, pageToken, rowCount, productType, null);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project fees on an invoice row (asynchronously)
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetInvoiceRowProjectFeesAsync(String invoiceRowGuid, String pageToken, Integer rowCount, ProductType productType, final ApiCallback<List<ProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetInvoiceRowProjectFeesValidateBeforeCall(invoiceRowGuid, pageToken, rowCount, productType, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetUninvoicedProjectFeesForInvoice
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetUninvoicedProjectFeesForInvoiceCall(String invoiceGuid, String pageToken, Integer rowCount, Boolean isBillable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/uninvoicedprojectfees"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetUninvoicedProjectFeesForInvoiceValidateBeforeCall(String invoiceGuid, String pageToken, Integer rowCount, Boolean isBillable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling projectFeesGetUninvoicedProjectFeesForInvoice(Async)");
        }

        return projectFeesGetUninvoicedProjectFeesForInvoiceCall(invoiceGuid, pageToken, rowCount, isBillable, _callback);

    }

    /**
     * Get uninvoiced project fees available for invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @return List&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFeeOutputModel> projectFeesGetUninvoicedProjectFeesForInvoice(String invoiceGuid, String pageToken, Integer rowCount, Boolean isBillable) throws ApiException {
        ApiResponse<List<ProjectFeeOutputModel>> localVarResp = projectFeesGetUninvoicedProjectFeesForInvoiceWithHttpInfo(invoiceGuid, pageToken, rowCount, isBillable);
        return localVarResp.getData();
    }

    /**
     * Get uninvoiced project fees available for invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @return ApiResponse&lt;List&lt;ProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFeeOutputModel>> projectFeesGetUninvoicedProjectFeesForInvoiceWithHttpInfo(String invoiceGuid, String pageToken, Integer rowCount, Boolean isBillable) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetUninvoicedProjectFeesForInvoiceValidateBeforeCall(invoiceGuid, pageToken, rowCount, isBillable, null);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get uninvoiced project fees available for invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetUninvoicedProjectFeesForInvoiceAsync(String invoiceGuid, String pageToken, Integer rowCount, Boolean isBillable, final ApiCallback<List<ProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetUninvoicedProjectFeesForInvoiceValidateBeforeCall(invoiceGuid, pageToken, rowCount, isBillable, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsGetProjectInvoiceSetting
     * @param guid ID of the project invoice settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettingCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectinvoicesettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettingValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectInvoiceSettingsGetProjectInvoiceSetting(Async)");
        }

        return projectInvoiceSettingsGetProjectInvoiceSettingCall(guid, _callback);

    }

    /**
     * Get project invoice settings by ID.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @return ProjectInvoiceSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectInvoiceSettingsOutputModel projectInvoiceSettingsGetProjectInvoiceSetting(String guid) throws ApiException {
        ApiResponse<ProjectInvoiceSettingsOutputModel> localVarResp = projectInvoiceSettingsGetProjectInvoiceSettingWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project invoice settings by ID.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @return ApiResponse&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsGetProjectInvoiceSettingWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSettingValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project invoice settings by ID. (asynchronously)
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettingAsync(String guid, final ApiCallback<ProjectInvoiceSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSettingValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsGetProjectInvoiceSettings
     * @param projectGuid ID of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettingsCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectinvoicesettings"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettingsValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectInvoiceSettingsGetProjectInvoiceSettings(Async)");
        }

        return projectInvoiceSettingsGetProjectInvoiceSettingsCall(projectGuid, _callback);

    }

    /**
     * Get project invoice settings by project ID.
     * 
     * @param projectGuid ID of the project. (required)
     * @return List&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsGetProjectInvoiceSettings(String projectGuid) throws ApiException {
        ApiResponse<List<ProjectInvoiceSettingsOutputModel>> localVarResp = projectInvoiceSettingsGetProjectInvoiceSettingsWithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get project invoice settings by project ID.
     * 
     * @param projectGuid ID of the project. (required)
     * @return ApiResponse&lt;List&lt;ProjectInvoiceSettingsOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectInvoiceSettingsOutputModel>> projectInvoiceSettingsGetProjectInvoiceSettingsWithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSettingsValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project invoice settings by project ID. (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettingsAsync(String projectGuid, final ApiCallback<List<ProjectInvoiceSettingsOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSettingsValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetInvoiceProjectTravelExpenses
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetInvoiceProjectTravelExpensesCall(String invoiceGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/projecttravelexpenses"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetInvoiceProjectTravelExpensesValidateBeforeCall(String invoiceGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling projectTravelExpensesGetInvoiceProjectTravelExpenses(Async)");
        }

        return projectTravelExpensesGetInvoiceProjectTravelExpensesCall(invoiceGuid, pageToken, rowCount, expenseClass, _callback);

    }

    /**
     * Get all the project travel expenses on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetInvoiceProjectTravelExpenses(String invoiceGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetInvoiceProjectTravelExpensesWithHttpInfo(invoiceGuid, pageToken, rowCount, expenseClass);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetInvoiceProjectTravelExpensesWithHttpInfo(String invoiceGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetInvoiceProjectTravelExpensesValidateBeforeCall(invoiceGuid, pageToken, rowCount, expenseClass, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses on an invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetInvoiceProjectTravelExpensesAsync(String invoiceGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetInvoiceProjectTravelExpensesValidateBeforeCall(invoiceGuid, pageToken, rowCount, expenseClass, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetInvoiceRowProjectTravelExpenses
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetInvoiceRowProjectTravelExpensesCall(String invoiceRowGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{invoiceRowGuid}/projecttravelexpenses"
            .replace("{" + "invoiceRowGuid" + "}", localVarApiClient.escapeString(invoiceRowGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetInvoiceRowProjectTravelExpensesValidateBeforeCall(String invoiceRowGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRowGuid' is set
        if (invoiceRowGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceRowGuid' when calling projectTravelExpensesGetInvoiceRowProjectTravelExpenses(Async)");
        }

        return projectTravelExpensesGetInvoiceRowProjectTravelExpensesCall(invoiceRowGuid, pageToken, rowCount, expenseClass, _callback);

    }

    /**
     * Get all the project travel expenses on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetInvoiceRowProjectTravelExpenses(String invoiceRowGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetInvoiceRowProjectTravelExpensesWithHttpInfo(invoiceRowGuid, pageToken, rowCount, expenseClass);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetInvoiceRowProjectTravelExpensesWithHttpInfo(String invoiceRowGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetInvoiceRowProjectTravelExpensesValidateBeforeCall(invoiceRowGuid, pageToken, rowCount, expenseClass, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses on an invoice row (asynchronously)
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetInvoiceRowProjectTravelExpensesAsync(String invoiceRowGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetInvoiceRowProjectTravelExpensesValidateBeforeCall(invoiceRowGuid, pageToken, rowCount, expenseClass, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceCall(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/uninvoicedprojecttravelexpenses"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceValidateBeforeCall(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice(Async)");
        }

        return projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceCall(invoiceGuid, isBillable, pageToken, rowCount, expenseClass, _callback);

    }

    /**
     * Get uninvoiced project travel expenses available for invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceWithHttpInfo(invoiceGuid, isBillable, pageToken, rowCount, expenseClass);
        return localVarResp.getData();
    }

    /**
     * Get uninvoiced project travel expenses available for invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceWithHttpInfo(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceValidateBeforeCall(invoiceGuid, isBillable, pageToken, rowCount, expenseClass, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get uninvoiced project travel expenses available for invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceAsync(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceValidateBeforeCall(invoiceGuid, isBillable, pageToken, rowCount, expenseClass, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimbursedProjectFeesGetInvoiceReimbursedProjectFees
     * @param invoiceGuid ID of the invoice. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectFeesGetInvoiceReimbursedProjectFeesCall(String invoiceGuid, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/reimbursedprojectfees"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimbursedProjectFeesGetInvoiceReimbursedProjectFeesValidateBeforeCall(String invoiceGuid, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling reimbursedProjectFeesGetInvoiceReimbursedProjectFees(Async)");
        }

        return reimbursedProjectFeesGetInvoiceReimbursedProjectFeesCall(invoiceGuid, rowCount, pageToken, _callback);

    }

    /**
     * Get all the project fees on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return List&lt;ReimbursedProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ReimbursedProjectFeeOutputModel> reimbursedProjectFeesGetInvoiceReimbursedProjectFees(String invoiceGuid, Integer rowCount, String pageToken) throws ApiException {
        ApiResponse<List<ReimbursedProjectFeeOutputModel>> localVarResp = reimbursedProjectFeesGetInvoiceReimbursedProjectFeesWithHttpInfo(invoiceGuid, rowCount, pageToken);
        return localVarResp.getData();
    }

    /**
     * Get all the project fees on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ApiResponse&lt;List&lt;ReimbursedProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReimbursedProjectFeeOutputModel>> reimbursedProjectFeesGetInvoiceReimbursedProjectFeesWithHttpInfo(String invoiceGuid, Integer rowCount, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = reimbursedProjectFeesGetInvoiceReimbursedProjectFeesValidateBeforeCall(invoiceGuid, rowCount, pageToken, null);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project fees on an invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectFeesGetInvoiceReimbursedProjectFeesAsync(String invoiceGuid, Integer rowCount, String pageToken, final ApiCallback<List<ReimbursedProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimbursedProjectFeesGetInvoiceReimbursedProjectFeesValidateBeforeCall(invoiceGuid, rowCount, pageToken, _callback);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesCall(String invoiceRowGuid, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{invoiceRowGuid}/reimbursedprojectfees"
            .replace("{" + "invoiceRowGuid" + "}", localVarApiClient.escapeString(invoiceRowGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesValidateBeforeCall(String invoiceRowGuid, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRowGuid' is set
        if (invoiceRowGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceRowGuid' when calling reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees(Async)");
        }

        return reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesCall(invoiceRowGuid, rowCount, pageToken, _callback);

    }

    /**
     * Get all the project fees on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return List&lt;ReimbursedProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ReimbursedProjectFeeOutputModel> reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees(String invoiceRowGuid, Integer rowCount, String pageToken) throws ApiException {
        ApiResponse<List<ReimbursedProjectFeeOutputModel>> localVarResp = reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesWithHttpInfo(invoiceRowGuid, rowCount, pageToken);
        return localVarResp.getData();
    }

    /**
     * Get all the project fees on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ApiResponse&lt;List&lt;ReimbursedProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReimbursedProjectFeeOutputModel>> reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesWithHttpInfo(String invoiceRowGuid, Integer rowCount, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesValidateBeforeCall(invoiceRowGuid, rowCount, pageToken, null);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project fees on an invoice row (asynchronously)
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesAsync(String invoiceRowGuid, Integer rowCount, String pageToken, final ApiCallback<List<ReimbursedProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesValidateBeforeCall(invoiceRowGuid, rowCount, pageToken, _callback);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesCall(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/reimbursedprojecttravelexpenses"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesValidateBeforeCall(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses(Async)");
        }

        return reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesCall(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all the project travel expenses on an invoice.
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;ReimbursedProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ReimbursedProjectTravelExpenseOutputModel> reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ReimbursedProjectTravelExpenseOutputModel>> localVarResp = reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesWithHttpInfo(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses on an invoice.
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ReimbursedProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReimbursedProjectTravelExpenseOutputModel>> reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesWithHttpInfo(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesValidateBeforeCall(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses on an invoice. (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesAsync(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ReimbursedProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesValidateBeforeCall(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesCall(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{invoiceRowGuid}/reimbursedprojecttravelexpenses"
            .replace("{" + "invoiceRowGuid" + "}", localVarApiClient.escapeString(invoiceRowGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesValidateBeforeCall(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRowGuid' is set
        if (invoiceRowGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceRowGuid' when calling reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses(Async)");
        }

        return reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesCall(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all the project travel expenses on an invoice row.
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;ReimbursedProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ReimbursedProjectTravelExpenseOutputModel> reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ReimbursedProjectTravelExpenseOutputModel>> localVarResp = reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesWithHttpInfo(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses on an invoice row.
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ReimbursedProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReimbursedProjectTravelExpenseOutputModel>> reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesWithHttpInfo(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesValidateBeforeCall(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses on an invoice row. (asynchronously)
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or description. (optional, default to )
     * @param calculateRowCount Optional. If true, calculates the total count of project fees. Default false. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedProjectTravelExpenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesAsync(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ReimbursedProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesValidateBeforeCall(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ReimbursedProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimbursedWorkHoursGetInvoiceReimbursedWorkHours
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedWorkHoursGetInvoiceReimbursedWorkHoursCall(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/reimbursedworkhours"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimbursedWorkHoursGetInvoiceReimbursedWorkHoursValidateBeforeCall(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling reimbursedWorkHoursGetInvoiceReimbursedWorkHours(Async)");
        }

        return reimbursedWorkHoursGetInvoiceReimbursedWorkHoursCall(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all reimbursed hours on an invoice.
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;ReimbursedWorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ReimbursedWorkHourOutputModel> reimbursedWorkHoursGetInvoiceReimbursedWorkHours(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ReimbursedWorkHourOutputModel>> localVarResp = reimbursedWorkHoursGetInvoiceReimbursedWorkHoursWithHttpInfo(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all reimbursed hours on an invoice.
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ReimbursedWorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReimbursedWorkHourOutputModel>> reimbursedWorkHoursGetInvoiceReimbursedWorkHoursWithHttpInfo(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = reimbursedWorkHoursGetInvoiceReimbursedWorkHoursValidateBeforeCall(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ReimbursedWorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all reimbursed hours on an invoice. (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedWorkHoursGetInvoiceReimbursedWorkHoursAsync(String invoiceGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ReimbursedWorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimbursedWorkHoursGetInvoiceReimbursedWorkHoursValidateBeforeCall(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ReimbursedWorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursCall(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{invoiceRowGuid}/reimbursedworkhours"
            .replace("{" + "invoiceRowGuid" + "}", localVarApiClient.escapeString(invoiceRowGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursValidateBeforeCall(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRowGuid' is set
        if (invoiceRowGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceRowGuid' when calling reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours(Async)");
        }

        return reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursCall(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all reimbursed hours on an invoice row.
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;ReimbursedWorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ReimbursedWorkHourOutputModel> reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ReimbursedWorkHourOutputModel>> localVarResp = reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursWithHttpInfo(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all reimbursed hours on an invoice row.
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ReimbursedWorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReimbursedWorkHourOutputModel>> reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursWithHttpInfo(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursValidateBeforeCall(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ReimbursedWorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all reimbursed hours on an invoice row. (asynchronously)
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from description or invoice description. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;DueDate&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;TotalIncludingTax&amp;sortings[1].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReimbursedWorkHour. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursAsync(String invoiceRowGuid, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ReimbursedWorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursValidateBeforeCall(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ReimbursedWorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetInvoiceRowWorkHours
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetInvoiceRowWorkHoursCall(String invoiceRowGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{invoiceRowGuid}/workhours"
            .replace("{" + "invoiceRowGuid" + "}", localVarApiClient.escapeString(invoiceRowGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetInvoiceRowWorkHoursValidateBeforeCall(String invoiceRowGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRowGuid' is set
        if (invoiceRowGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceRowGuid' when calling workHoursGetInvoiceRowWorkHours(Async)");
        }

        return workHoursGetInvoiceRowWorkHoursCall(invoiceRowGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get all the work hours on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkHourOutputModel> workHoursGetInvoiceRowWorkHours(String invoiceRowGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<WorkHourOutputModel>> localVarResp = workHoursGetInvoiceRowWorkHoursWithHttpInfo(invoiceRowGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the work hours on an invoice row
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;WorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkHourOutputModel>> workHoursGetInvoiceRowWorkHoursWithHttpInfo(String invoiceRowGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetInvoiceRowWorkHoursValidateBeforeCall(invoiceRowGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the work hours on an invoice row (asynchronously)
     * 
     * @param invoiceRowGuid ID of the invoice row. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetInvoiceRowWorkHoursAsync(String invoiceRowGuid, String pageToken, Integer rowCount, final ApiCallback<List<WorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetInvoiceRowWorkHoursValidateBeforeCall(invoiceRowGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetInvoiceWorkHours
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetInvoiceWorkHoursCall(String invoiceGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/workhours"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetInvoiceWorkHoursValidateBeforeCall(String invoiceGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling workHoursGetInvoiceWorkHours(Async)");
        }

        return workHoursGetInvoiceWorkHoursCall(invoiceGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get all the work hours on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkHourOutputModel> workHoursGetInvoiceWorkHours(String invoiceGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<WorkHourOutputModel>> localVarResp = workHoursGetInvoiceWorkHoursWithHttpInfo(invoiceGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the work hours on an invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;WorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkHourOutputModel>> workHoursGetInvoiceWorkHoursWithHttpInfo(String invoiceGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetInvoiceWorkHoursValidateBeforeCall(invoiceGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the work hours on an invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetInvoiceWorkHoursAsync(String invoiceGuid, String pageToken, Integer rowCount, final ApiCallback<List<WorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetInvoiceWorkHoursValidateBeforeCall(invoiceGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetUninvoicedWorkHoursForInvoice
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetUninvoicedWorkHoursForInvoiceCall(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/uninvoicedworkhours"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetUninvoicedWorkHoursForInvoiceValidateBeforeCall(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling workHoursGetUninvoicedWorkHoursForInvoice(Async)");
        }

        return workHoursGetUninvoicedWorkHoursForInvoiceCall(invoiceGuid, isBillable, pageToken, rowCount, _callback);

    }

    /**
     * Get uninvoiced work hours available for invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkHourOutputModel> workHoursGetUninvoicedWorkHoursForInvoice(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<WorkHourOutputModel>> localVarResp = workHoursGetUninvoicedWorkHoursForInvoiceWithHttpInfo(invoiceGuid, isBillable, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get uninvoiced work hours available for invoice
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;WorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkHourOutputModel>> workHoursGetUninvoicedWorkHoursForInvoiceWithHttpInfo(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetUninvoicedWorkHoursForInvoiceValidateBeforeCall(invoiceGuid, isBillable, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get uninvoiced work hours available for invoice (asynchronously)
     * 
     * @param invoiceGuid ID of the invoice. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetUninvoicedWorkHoursForInvoiceAsync(String invoiceGuid, Boolean isBillable, String pageToken, Integer rowCount, final ApiCallback<List<WorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetUninvoicedWorkHoursForInvoiceValidateBeforeCall(invoiceGuid, isBillable, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
