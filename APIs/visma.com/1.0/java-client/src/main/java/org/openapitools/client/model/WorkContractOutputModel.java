/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.client.model.UserWithPhotoFileModelAndRequiredGuid;
import org.openapitools.client.model.Workweek;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkContractOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkContractOutputModel {
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_DAILY_HOURS = "dailyHours";
  @SerializedName(SERIALIZED_NAME_DAILY_HOURS)
  private Double dailyHours;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_FLEXTIME_LIMIT_PER_DAY = "flextimeLimitPerDay";
  @SerializedName(SERIALIZED_NAME_FLEXTIME_LIMIT_PER_DAY)
  private Double flextimeLimitPerDay;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_HOUR_COST = "hourCost";
  @SerializedName(SERIALIZED_NAME_HOUR_COST)
  private MoneyOutputModel hourCost;

  public static final String SERIALIZED_NAME_IS_FLEXTIME_ACTIVE = "isFlextimeActive";
  @SerializedName(SERIALIZED_NAME_IS_FLEXTIME_ACTIVE)
  private Boolean isFlextimeActive = true;

  public static final String SERIALIZED_NAME_IS_OVERTIME_ALLOWED = "isOvertimeAllowed";
  @SerializedName(SERIALIZED_NAME_IS_OVERTIME_ALLOWED)
  private Boolean isOvertimeAllowed;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private ModelWithName role;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserWithPhotoFileModelAndRequiredGuid user;

  public static final String SERIALIZED_NAME_WORK_WEEK = "workWeek";
  @SerializedName(SERIALIZED_NAME_WORK_WEEK)
  private List<Workweek> workWeek;

  public WorkContractOutputModel() {
  }

  public WorkContractOutputModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public WorkContractOutputModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public WorkContractOutputModel dailyHours(Double dailyHours) {
    this.dailyHours = dailyHours;
    return this;
  }

  /**
   * Get dailyHours
   * @return dailyHours
   */
  @javax.annotation.Nullable
  public Double getDailyHours() {
    return dailyHours;
  }

  public void setDailyHours(Double dailyHours) {
    this.dailyHours = dailyHours;
  }


  public WorkContractOutputModel endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public WorkContractOutputModel flextimeLimitPerDay(Double flextimeLimitPerDay) {
    this.flextimeLimitPerDay = flextimeLimitPerDay;
    return this;
  }

  /**
   * Get flextimeLimitPerDay
   * @return flextimeLimitPerDay
   */
  @javax.annotation.Nullable
  public Double getFlextimeLimitPerDay() {
    return flextimeLimitPerDay;
  }

  public void setFlextimeLimitPerDay(Double flextimeLimitPerDay) {
    this.flextimeLimitPerDay = flextimeLimitPerDay;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public WorkContractOutputModel hourCost(MoneyOutputModel hourCost) {
    this.hourCost = hourCost;
    return this;
  }

  /**
   * Get hourCost
   * @return hourCost
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getHourCost() {
    return hourCost;
  }

  public void setHourCost(MoneyOutputModel hourCost) {
    this.hourCost = hourCost;
  }


  public WorkContractOutputModel isFlextimeActive(Boolean isFlextimeActive) {
    this.isFlextimeActive = isFlextimeActive;
    return this;
  }

  /**
   * Get isFlextimeActive
   * @return isFlextimeActive
   */
  @javax.annotation.Nullable
  public Boolean getIsFlextimeActive() {
    return isFlextimeActive;
  }

  public void setIsFlextimeActive(Boolean isFlextimeActive) {
    this.isFlextimeActive = isFlextimeActive;
  }


  public WorkContractOutputModel isOvertimeAllowed(Boolean isOvertimeAllowed) {
    this.isOvertimeAllowed = isOvertimeAllowed;
    return this;
  }

  /**
   * Get isOvertimeAllowed
   * @return isOvertimeAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsOvertimeAllowed() {
    return isOvertimeAllowed;
  }

  public void setIsOvertimeAllowed(Boolean isOvertimeAllowed) {
    this.isOvertimeAllowed = isOvertimeAllowed;
  }


  public WorkContractOutputModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public WorkContractOutputModel role(ModelWithName role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public ModelWithName getRole() {
    return role;
  }

  public void setRole(ModelWithName role) {
    this.role = role;
  }


  public WorkContractOutputModel startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public WorkContractOutputModel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public WorkContractOutputModel user(UserWithPhotoFileModelAndRequiredGuid user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserWithPhotoFileModelAndRequiredGuid getUser() {
    return user;
  }

  public void setUser(UserWithPhotoFileModelAndRequiredGuid user) {
    this.user = user;
  }


  public WorkContractOutputModel workWeek(List<Workweek> workWeek) {
    this.workWeek = workWeek;
    return this;
  }

  public WorkContractOutputModel addWorkWeekItem(Workweek workWeekItem) {
    if (this.workWeek == null) {
      this.workWeek = new ArrayList<>();
    }
    this.workWeek.add(workWeekItem);
    return this;
  }

  /**
   * Get workWeek
   * @return workWeek
   */
  @javax.annotation.Nullable
  public List<Workweek> getWorkWeek() {
    return workWeek;
  }

  public void setWorkWeek(List<Workweek> workWeek) {
    this.workWeek = workWeek;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkContractOutputModel workContractOutputModel = (WorkContractOutputModel) o;
    return Objects.equals(this.createdBy, workContractOutputModel.createdBy) &&
        Objects.equals(this.createdDateTime, workContractOutputModel.createdDateTime) &&
        Objects.equals(this.dailyHours, workContractOutputModel.dailyHours) &&
        Objects.equals(this.endDate, workContractOutputModel.endDate) &&
        Objects.equals(this.flextimeLimitPerDay, workContractOutputModel.flextimeLimitPerDay) &&
        Objects.equals(this.guid, workContractOutputModel.guid) &&
        Objects.equals(this.hourCost, workContractOutputModel.hourCost) &&
        Objects.equals(this.isFlextimeActive, workContractOutputModel.isFlextimeActive) &&
        Objects.equals(this.isOvertimeAllowed, workContractOutputModel.isOvertimeAllowed) &&
        Objects.equals(this.lastUpdatedBy, workContractOutputModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, workContractOutputModel.lastUpdatedDateTime) &&
        Objects.equals(this.role, workContractOutputModel.role) &&
        Objects.equals(this.startDate, workContractOutputModel.startDate) &&
        Objects.equals(this.title, workContractOutputModel.title) &&
        Objects.equals(this.user, workContractOutputModel.user) &&
        Objects.equals(this.workWeek, workContractOutputModel.workWeek);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBy, createdDateTime, dailyHours, endDate, flextimeLimitPerDay, guid, hourCost, isFlextimeActive, isOvertimeAllowed, lastUpdatedBy, lastUpdatedDateTime, role, startDate, title, user, workWeek);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkContractOutputModel {\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    dailyHours: ").append(toIndentedString(dailyHours)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    flextimeLimitPerDay: ").append(toIndentedString(flextimeLimitPerDay)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hourCost: ").append(toIndentedString(hourCost)).append("\n");
    sb.append("    isFlextimeActive: ").append(toIndentedString(isFlextimeActive)).append("\n");
    sb.append("    isOvertimeAllowed: ").append(toIndentedString(isOvertimeAllowed)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workWeek: ").append(toIndentedString(workWeek)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("dailyHours");
    openapiFields.add("endDate");
    openapiFields.add("flextimeLimitPerDay");
    openapiFields.add("guid");
    openapiFields.add("hourCost");
    openapiFields.add("isFlextimeActive");
    openapiFields.add("isOvertimeAllowed");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("role");
    openapiFields.add("startDate");
    openapiFields.add("title");
    openapiFields.add("user");
    openapiFields.add("workWeek");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkContractOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkContractOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkContractOutputModel is not found in the empty JSON string", WorkContractOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkContractOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkContractOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkContractOutputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `hourCost`
      if (jsonObj.get("hourCost") != null && !jsonObj.get("hourCost").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("hourCost"));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("role"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserWithPhotoFileModelAndRequiredGuid.validateJsonElement(jsonObj.get("user"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workWeek") != null && !jsonObj.get("workWeek").isJsonNull() && !jsonObj.get("workWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workWeek` to be an array in the JSON string but got `%s`", jsonObj.get("workWeek").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkContractOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkContractOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkContractOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkContractOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkContractOutputModel>() {
           @Override
           public void write(JsonWriter out, WorkContractOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkContractOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkContractOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkContractOutputModel
   * @throws IOException if the JSON string is invalid with respect to WorkContractOutputModel
   */
  public static WorkContractOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkContractOutputModel.class);
  }

  /**
   * Convert an instance of WorkContractOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

