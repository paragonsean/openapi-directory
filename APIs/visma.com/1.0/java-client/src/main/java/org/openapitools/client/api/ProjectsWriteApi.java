/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomPriceListOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.PhaseInputModel;
import org.openapitools.client.model.PhaseMemberModel;
import org.openapitools.client.model.PhaseMembersFromBusinessUnitUsersModel;
import org.openapitools.client.model.PhaseOutputModel;
import org.openapitools.client.model.ProjectCustomValueModel;
import org.openapitools.client.model.ProjectFileModel;
import org.openapitools.client.model.ProjectForecastInputModel;
import org.openapitools.client.model.ProjectForecastOutputModel;
import org.openapitools.client.model.ProjectInputModelBase;
import org.openapitools.client.model.ProjectInvoiceSettingsInputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;
import org.openapitools.client.model.ProjectKeywordModel;
import org.openapitools.client.model.ProjectOutputModel;
import org.openapitools.client.model.ProjectProductInputModel;
import org.openapitools.client.model.ProjectProductOutputModel;
import org.openapitools.client.model.ProjectSalesNoteInputModel;
import org.openapitools.client.model.ProjectSalesNoteOutputModel;
import org.openapitools.client.model.ProjectWorkHourPriceInputModel;
import org.openapitools.client.model.ProjectWorkHourPriceOutputModel;
import org.openapitools.client.model.ProjectWorkTypeModel;
import org.openapitools.client.model.ProposalFeeRowInputModel;
import org.openapitools.client.model.ProposalFeeRowOutputModel;
import org.openapitools.client.model.ProposalInputModel;
import org.openapitools.client.model.ProposalOutputModel;
import org.openapitools.client.model.ProposalSettingsOutputModel;
import org.openapitools.client.model.ProposalSubtotalInputModel;
import org.openapitools.client.model.ProposalSubtotalOutputModel;
import org.openapitools.client.model.ProposalWorkhourRowInputModel;
import org.openapitools.client.model.ProposalWorkhourRowOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsWriteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsWriteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsWriteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for filesPostProjectLink
     * @param projectFileModel ProjectFileModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesPostProjectLinkCall(ProjectFileModel projectFileModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectFileModel;

        // create path and map variables
        String localVarPath = "/v1/projectlinks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesPostProjectLinkValidateBeforeCall(ProjectFileModel projectFileModel, final ApiCallback _callback) throws ApiException {
        return filesPostProjectLinkCall(projectFileModel, _callback);

    }

    /**
     * Add a link to a project.
     * 
     * @param projectFileModel ProjectFileModel. (optional)
     * @return ProjectFileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFileModel filesPostProjectLink(ProjectFileModel projectFileModel) throws ApiException {
        ApiResponse<ProjectFileModel> localVarResp = filesPostProjectLinkWithHttpInfo(projectFileModel);
        return localVarResp.getData();
    }

    /**
     * Add a link to a project.
     * 
     * @param projectFileModel ProjectFileModel. (optional)
     * @return ApiResponse&lt;ProjectFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFileModel> filesPostProjectLinkWithHttpInfo(ProjectFileModel projectFileModel) throws ApiException {
        okhttp3.Call localVarCall = filesPostProjectLinkValidateBeforeCall(projectFileModel, null);
        Type localVarReturnType = new TypeToken<ProjectFileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a link to a project. (asynchronously)
     * 
     * @param projectFileModel ProjectFileModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesPostProjectLinkAsync(ProjectFileModel projectFileModel, final ApiCallback<ProjectFileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesPostProjectLinkValidateBeforeCall(projectFileModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectFileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsLinkKeywordToProject
     * @param projectGuid  (required)
     * @param guid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsLinkKeywordToProjectCall(String projectGuid, String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/keywords/{guid}"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()))
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsLinkKeywordToProjectValidateBeforeCall(String projectGuid, String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling keywordsLinkKeywordToProject(Async)");
        }

        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling keywordsLinkKeywordToProject(Async)");
        }

        return keywordsLinkKeywordToProjectCall(projectGuid, guid, _callback);

    }

    /**
     * Link existing keyword to project
     * 
     * @param projectGuid  (required)
     * @param guid  (required)
     * @return ProjectKeywordModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectKeywordModel keywordsLinkKeywordToProject(String projectGuid, String guid) throws ApiException {
        ApiResponse<ProjectKeywordModel> localVarResp = keywordsLinkKeywordToProjectWithHttpInfo(projectGuid, guid);
        return localVarResp.getData();
    }

    /**
     * Link existing keyword to project
     * 
     * @param projectGuid  (required)
     * @param guid  (required)
     * @return ApiResponse&lt;ProjectKeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectKeywordModel> keywordsLinkKeywordToProjectWithHttpInfo(String projectGuid, String guid) throws ApiException {
        okhttp3.Call localVarCall = keywordsLinkKeywordToProjectValidateBeforeCall(projectGuid, guid, null);
        Type localVarReturnType = new TypeToken<ProjectKeywordModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link existing keyword to project (asynchronously)
     * 
     * @param projectGuid  (required)
     * @param guid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsLinkKeywordToProjectAsync(String projectGuid, String guid, final ApiCallback<ProjectKeywordModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsLinkKeywordToProjectValidateBeforeCall(projectGuid, guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectKeywordModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseMembersPostPhaseMember
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMemberModel PhaseMemberModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added member. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersPostPhaseMemberCall(Boolean addToAllSubPhases, PhaseMemberModel phaseMemberModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phaseMemberModel;

        // create path and map variables
        String localVarPath = "/v1/phasemembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addToAllSubPhases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addToAllSubPhases", addToAllSubPhases));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseMembersPostPhaseMemberValidateBeforeCall(Boolean addToAllSubPhases, PhaseMemberModel phaseMemberModel, final ApiCallback _callback) throws ApiException {
        return phaseMembersPostPhaseMemberCall(addToAllSubPhases, phaseMemberModel, _callback);

    }

    /**
     * Adds a phase member.
     * User is always added as a root phase (project) member also.
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMemberModel PhaseMemberModel. (optional)
     * @return PhaseMemberModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added member. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PhaseMemberModel phaseMembersPostPhaseMember(Boolean addToAllSubPhases, PhaseMemberModel phaseMemberModel) throws ApiException {
        ApiResponse<PhaseMemberModel> localVarResp = phaseMembersPostPhaseMemberWithHttpInfo(addToAllSubPhases, phaseMemberModel);
        return localVarResp.getData();
    }

    /**
     * Adds a phase member.
     * User is always added as a root phase (project) member also.
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMemberModel PhaseMemberModel. (optional)
     * @return ApiResponse&lt;PhaseMemberModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added member. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhaseMemberModel> phaseMembersPostPhaseMemberWithHttpInfo(Boolean addToAllSubPhases, PhaseMemberModel phaseMemberModel) throws ApiException {
        okhttp3.Call localVarCall = phaseMembersPostPhaseMemberValidateBeforeCall(addToAllSubPhases, phaseMemberModel, null);
        Type localVarReturnType = new TypeToken<PhaseMemberModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a phase member. (asynchronously)
     * User is always added as a root phase (project) member also.
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMemberModel PhaseMemberModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added member. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersPostPhaseMemberAsync(Boolean addToAllSubPhases, PhaseMemberModel phaseMemberModel, final ApiCallback<PhaseMemberModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseMembersPostPhaseMemberValidateBeforeCall(addToAllSubPhases, phaseMemberModel, _callback);
        Type localVarReturnType = new TypeToken<PhaseMemberModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseMembersPostPhaseMembersFromBusinessUnitUsers
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMembersFromBusinessUnitUsersModel PhaseMemberModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of added members. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersPostPhaseMembersFromBusinessUnitUsersCall(Boolean addToAllSubPhases, PhaseMembersFromBusinessUnitUsersModel phaseMembersFromBusinessUnitUsersModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phaseMembersFromBusinessUnitUsersModel;

        // create path and map variables
        String localVarPath = "/v1/phasemembersfrombusinessunitusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addToAllSubPhases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addToAllSubPhases", addToAllSubPhases));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseMembersPostPhaseMembersFromBusinessUnitUsersValidateBeforeCall(Boolean addToAllSubPhases, PhaseMembersFromBusinessUnitUsersModel phaseMembersFromBusinessUnitUsersModel, final ApiCallback _callback) throws ApiException {
        return phaseMembersPostPhaseMembersFromBusinessUnitUsersCall(addToAllSubPhases, phaseMembersFromBusinessUnitUsersModel, _callback);

    }

    /**
     * Adds business unit users to phase members.
     * Users are always added as a root phase (project) member also.
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMembersFromBusinessUnitUsersModel PhaseMemberModel. (optional)
     * @return List&lt;PhaseMemberModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of added members. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseMemberModel> phaseMembersPostPhaseMembersFromBusinessUnitUsers(Boolean addToAllSubPhases, PhaseMembersFromBusinessUnitUsersModel phaseMembersFromBusinessUnitUsersModel) throws ApiException {
        ApiResponse<List<PhaseMemberModel>> localVarResp = phaseMembersPostPhaseMembersFromBusinessUnitUsersWithHttpInfo(addToAllSubPhases, phaseMembersFromBusinessUnitUsersModel);
        return localVarResp.getData();
    }

    /**
     * Adds business unit users to phase members.
     * Users are always added as a root phase (project) member also.
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMembersFromBusinessUnitUsersModel PhaseMemberModel. (optional)
     * @return ApiResponse&lt;List&lt;PhaseMemberModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of added members. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseMemberModel>> phaseMembersPostPhaseMembersFromBusinessUnitUsersWithHttpInfo(Boolean addToAllSubPhases, PhaseMembersFromBusinessUnitUsersModel phaseMembersFromBusinessUnitUsersModel) throws ApiException {
        okhttp3.Call localVarCall = phaseMembersPostPhaseMembersFromBusinessUnitUsersValidateBeforeCall(addToAllSubPhases, phaseMembersFromBusinessUnitUsersModel, null);
        Type localVarReturnType = new TypeToken<List<PhaseMemberModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds business unit users to phase members. (asynchronously)
     * Users are always added as a root phase (project) member also.
     * @param addToAllSubPhases Optional: Add member to all sub phases. Default true. (optional, default to true)
     * @param phaseMembersFromBusinessUnitUsersModel PhaseMemberModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of added members. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersPostPhaseMembersFromBusinessUnitUsersAsync(Boolean addToAllSubPhases, PhaseMembersFromBusinessUnitUsersModel phaseMembersFromBusinessUnitUsersModel, final ApiCallback<List<PhaseMemberModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseMembersPostPhaseMembersFromBusinessUnitUsersValidateBeforeCall(addToAllSubPhases, phaseMembersFromBusinessUnitUsersModel, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseMemberModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phasesPatchPhase
     * @param guid ID of the phase (required)
     * @param patchOperation JSON Patch document of PhaseInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesPatchPhaseCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/phases/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phasesPatchPhaseValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling phasesPatchPhase(Async)");
        }

        return phasesPatchPhaseCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a phase or a part of it
     * 
     * @param guid ID of the phase (required)
     * @param patchOperation JSON Patch document of PhaseInputModel (optional)
     * @return List&lt;PhaseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseOutputModel> phasesPatchPhase(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<PhaseOutputModel>> localVarResp = phasesPatchPhaseWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a phase or a part of it
     * 
     * @param guid ID of the phase (required)
     * @param patchOperation JSON Patch document of PhaseInputModel (optional)
     * @return ApiResponse&lt;List&lt;PhaseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseOutputModel>> phasesPatchPhaseWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = phasesPatchPhaseValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<PhaseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a phase or a part of it (asynchronously)
     * 
     * @param guid ID of the phase (required)
     * @param patchOperation JSON Patch document of PhaseInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesPatchPhaseAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<PhaseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phasesPatchPhaseValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phasesPostPhase
     * @param phaseInputModel PhaseOutputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesPostPhaseCall(PhaseInputModel phaseInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phaseInputModel;

        // create path and map variables
        String localVarPath = "/v1/phases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phasesPostPhaseValidateBeforeCall(PhaseInputModel phaseInputModel, final ApiCallback _callback) throws ApiException {
        return phasesPostPhaseCall(phaseInputModel, _callback);

    }

    /**
     * Insert a phase
     * 
     * @param phaseInputModel PhaseOutputModel (optional)
     * @return PhaseOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PhaseOutputModel phasesPostPhase(PhaseInputModel phaseInputModel) throws ApiException {
        ApiResponse<PhaseOutputModel> localVarResp = phasesPostPhaseWithHttpInfo(phaseInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a phase
     * 
     * @param phaseInputModel PhaseOutputModel (optional)
     * @return ApiResponse&lt;PhaseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhaseOutputModel> phasesPostPhaseWithHttpInfo(PhaseInputModel phaseInputModel) throws ApiException {
        okhttp3.Call localVarCall = phasesPostPhaseValidateBeforeCall(phaseInputModel, null);
        Type localVarReturnType = new TypeToken<PhaseOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a phase (asynchronously)
     * 
     * @param phaseInputModel PhaseOutputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesPostPhaseAsync(PhaseInputModel phaseInputModel, final ApiCallback<PhaseOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = phasesPostPhaseValidateBeforeCall(phaseInputModel, _callback);
        Type localVarReturnType = new TypeToken<PhaseOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceListsPostCustomPricelist
     * @param projectGuid ID of the project. (required)
     * @param isVolumePricing Get the custom volume pricing price list or regular custom price list. Default is false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListsPostCustomPricelistCall(String projectGuid, Boolean isVolumePricing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/pricelists/custom"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isVolumePricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVolumePricing", isVolumePricing));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceListsPostCustomPricelistValidateBeforeCall(String projectGuid, Boolean isVolumePricing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling priceListsPostCustomPricelist(Async)");
        }

        return priceListsPostCustomPricelistCall(projectGuid, isVolumePricing, _callback);

    }

    /**
     * Create custom price list for a project. If project already has a custom price list returns existing price list. Creates a new price list if project doesn&#39;t have a custom price list. Project can only have one custom price list. Note that project&#39;s price list will be changed to the custom price list created here and also existing prices are copied to the new price list.
     * 
     * @param projectGuid ID of the project. (required)
     * @param isVolumePricing Get the custom volume pricing price list or regular custom price list. Default is false. (optional, default to false)
     * @return CustomPriceListOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomPriceListOutputModel priceListsPostCustomPricelist(String projectGuid, Boolean isVolumePricing) throws ApiException {
        ApiResponse<CustomPriceListOutputModel> localVarResp = priceListsPostCustomPricelistWithHttpInfo(projectGuid, isVolumePricing);
        return localVarResp.getData();
    }

    /**
     * Create custom price list for a project. If project already has a custom price list returns existing price list. Creates a new price list if project doesn&#39;t have a custom price list. Project can only have one custom price list. Note that project&#39;s price list will be changed to the custom price list created here and also existing prices are copied to the new price list.
     * 
     * @param projectGuid ID of the project. (required)
     * @param isVolumePricing Get the custom volume pricing price list or regular custom price list. Default is false. (optional, default to false)
     * @return ApiResponse&lt;CustomPriceListOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomPriceListOutputModel> priceListsPostCustomPricelistWithHttpInfo(String projectGuid, Boolean isVolumePricing) throws ApiException {
        okhttp3.Call localVarCall = priceListsPostCustomPricelistValidateBeforeCall(projectGuid, isVolumePricing, null);
        Type localVarReturnType = new TypeToken<CustomPriceListOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create custom price list for a project. If project already has a custom price list returns existing price list. Creates a new price list if project doesn&#39;t have a custom price list. Project can only have one custom price list. Note that project&#39;s price list will be changed to the custom price list created here and also existing prices are copied to the new price list. (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param isVolumePricing Get the custom volume pricing price list or regular custom price list. Default is false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListsPostCustomPricelistAsync(String projectGuid, Boolean isVolumePricing, final ApiCallback<CustomPriceListOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceListsPostCustomPricelistValidateBeforeCall(projectGuid, isVolumePricing, _callback);
        Type localVarReturnType = new TypeToken<CustomPriceListOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomValuesPatchProjectCustomValue
     * @param guid ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomValueModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesPatchProjectCustomValueCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projects/customvalues/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomValuesPatchProjectCustomValueValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectCustomValuesPatchProjectCustomValue(Async)");
        }

        return projectCustomValuesPatchProjectCustomValueCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project custom value or a part of it.
     * 
     * @param guid ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomValueModel. (optional)
     * @return List&lt;ProjectCustomValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectCustomValueModel> projectCustomValuesPatchProjectCustomValue(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectCustomValueModel>> localVarResp = projectCustomValuesPatchProjectCustomValueWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project custom value or a part of it.
     * 
     * @param guid ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomValueModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectCustomValueModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectCustomValueModel>> projectCustomValuesPatchProjectCustomValueWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectCustomValuesPatchProjectCustomValueValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectCustomValueModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project custom value or a part of it. (asynchronously)
     * 
     * @param guid ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomValueModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesPatchProjectCustomValueAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectCustomValueModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomValuesPatchProjectCustomValueValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectCustomValueModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomValuesPostProjectCustomValue
     * @param projectCustomValueModel ProjectCustomValueModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesPostProjectCustomValueCall(ProjectCustomValueModel projectCustomValueModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCustomValueModel;

        // create path and map variables
        String localVarPath = "/v1/projects/customvalues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomValuesPostProjectCustomValueValidateBeforeCall(ProjectCustomValueModel projectCustomValueModel, final ApiCallback _callback) throws ApiException {
        return projectCustomValuesPostProjectCustomValueCall(projectCustomValueModel, _callback);

    }

    /**
     * Insert a project custom value.
     * 
     * @param projectCustomValueModel ProjectCustomValueModel. (optional)
     * @return List&lt;ProjectCustomValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectCustomValueModel> projectCustomValuesPostProjectCustomValue(ProjectCustomValueModel projectCustomValueModel) throws ApiException {
        ApiResponse<List<ProjectCustomValueModel>> localVarResp = projectCustomValuesPostProjectCustomValueWithHttpInfo(projectCustomValueModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project custom value.
     * 
     * @param projectCustomValueModel ProjectCustomValueModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectCustomValueModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectCustomValueModel>> projectCustomValuesPostProjectCustomValueWithHttpInfo(ProjectCustomValueModel projectCustomValueModel) throws ApiException {
        okhttp3.Call localVarCall = projectCustomValuesPostProjectCustomValueValidateBeforeCall(projectCustomValueModel, null);
        Type localVarReturnType = new TypeToken<List<ProjectCustomValueModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project custom value. (asynchronously)
     * 
     * @param projectCustomValueModel ProjectCustomValueModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesPostProjectCustomValueAsync(ProjectCustomValueModel projectCustomValueModel, final ApiCallback<List<ProjectCustomValueModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomValuesPostProjectCustomValueValidateBeforeCall(projectCustomValueModel, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectCustomValueModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectForecastsPatchForecast
     * @param guid ID of the project forecast (required)
     * @param patchOperation JSON patch document of ProjectForecastInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsPatchForecastCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectforecasts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectForecastsPatchForecastValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectForecastsPatchForecast(Async)");
        }

        return projectForecastsPatchForecastCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an project forecast or a part of it
     * 
     * @param guid ID of the project forecast (required)
     * @param patchOperation JSON patch document of ProjectForecastInputModel (optional)
     * @return List&lt;ProjectForecastOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectForecastOutputModel> projectForecastsPatchForecast(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectForecastOutputModel>> localVarResp = projectForecastsPatchForecastWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an project forecast or a part of it
     * 
     * @param guid ID of the project forecast (required)
     * @param patchOperation JSON patch document of ProjectForecastInputModel (optional)
     * @return ApiResponse&lt;List&lt;ProjectForecastOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectForecastOutputModel>> projectForecastsPatchForecastWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectForecastsPatchForecastValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectForecastOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an project forecast or a part of it (asynchronously)
     * 
     * @param guid ID of the project forecast (required)
     * @param patchOperation JSON patch document of ProjectForecastInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsPatchForecastAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectForecastOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectForecastsPatchForecastValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectForecastOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectForecastsPostForecast
     * @param projectForecastInputModel ProjectForecastOutputInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsPostForecastCall(ProjectForecastInputModel projectForecastInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectForecastInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectforecasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectForecastsPostForecastValidateBeforeCall(ProjectForecastInputModel projectForecastInputModel, final ApiCallback _callback) throws ApiException {
        return projectForecastsPostForecastCall(projectForecastInputModel, _callback);

    }

    /**
     * Insert a project forecast
     * 
     * @param projectForecastInputModel ProjectForecastOutputInputModel (optional)
     * @return ProjectForecastOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectForecastOutputModel projectForecastsPostForecast(ProjectForecastInputModel projectForecastInputModel) throws ApiException {
        ApiResponse<ProjectForecastOutputModel> localVarResp = projectForecastsPostForecastWithHttpInfo(projectForecastInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project forecast
     * 
     * @param projectForecastInputModel ProjectForecastOutputInputModel (optional)
     * @return ApiResponse&lt;ProjectForecastOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectForecastOutputModel> projectForecastsPostForecastWithHttpInfo(ProjectForecastInputModel projectForecastInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectForecastsPostForecastValidateBeforeCall(projectForecastInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectForecastOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project forecast (asynchronously)
     * 
     * @param projectForecastInputModel ProjectForecastOutputInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsPostForecastAsync(ProjectForecastInputModel projectForecastInputModel, final ApiCallback<ProjectForecastOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectForecastsPostForecastValidateBeforeCall(projectForecastInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectForecastOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsPatchProjectInvoiceSettings_0
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPatchProjectInvoiceSettings_0Call(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectinvoicesettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsPatchProjectInvoiceSettings_0ValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectInvoiceSettingsPatchProjectInvoiceSettings_0(Async)");
        }

        return projectInvoiceSettingsPatchProjectInvoiceSettings_0Call(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) project invoice settings.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @return List&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsPatchProjectInvoiceSettings_0(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectInvoiceSettingsOutputModel>> localVarResp = projectInvoiceSettingsPatchProjectInvoiceSettings_0WithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) project invoice settings.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectInvoiceSettingsOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectInvoiceSettingsOutputModel>> projectInvoiceSettingsPatchProjectInvoiceSettings_0WithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsPatchProjectInvoiceSettings_0ValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) project invoice settings. (asynchronously)
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPatchProjectInvoiceSettings_0Async(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectInvoiceSettingsOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsPatchProjectInvoiceSettings_0ValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsPostProjectInvoiceSettings_0
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPostProjectInvoiceSettings_0Call(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectInvoiceSettingsInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectinvoicesettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsPostProjectInvoiceSettings_0ValidateBeforeCall(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel, final ApiCallback _callback) throws ApiException {
        return projectInvoiceSettingsPostProjectInvoiceSettings_0Call(projectInvoiceSettingsInputModel, _callback);

    }

    /**
     * Create a new project invoice settings.
     * 
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @return ProjectInvoiceSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectInvoiceSettingsOutputModel projectInvoiceSettingsPostProjectInvoiceSettings_0(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel) throws ApiException {
        ApiResponse<ProjectInvoiceSettingsOutputModel> localVarResp = projectInvoiceSettingsPostProjectInvoiceSettings_0WithHttpInfo(projectInvoiceSettingsInputModel);
        return localVarResp.getData();
    }

    /**
     * Create a new project invoice settings.
     * 
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @return ApiResponse&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsPostProjectInvoiceSettings_0WithHttpInfo(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsPostProjectInvoiceSettings_0ValidateBeforeCall(projectInvoiceSettingsInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project invoice settings. (asynchronously)
     * 
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPostProjectInvoiceSettings_0Async(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel, final ApiCallback<ProjectInvoiceSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsPostProjectInvoiceSettings_0ValidateBeforeCall(projectInvoiceSettingsInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProductsPostProjectProduct
     * @param projectProductInputModel projectProductModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProductsPostProjectProductCall(ProjectProductInputModel projectProductInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectProductInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectproducts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProductsPostProjectProductValidateBeforeCall(ProjectProductInputModel projectProductInputModel, final ApiCallback _callback) throws ApiException {
        return projectProductsPostProjectProductCall(projectProductInputModel, _callback);

    }

    /**
     * Adds a product to a project.
     * 
     * @param projectProductInputModel projectProductModel (optional)
     * @return ProjectProductOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectProductOutputModel projectProductsPostProjectProduct(ProjectProductInputModel projectProductInputModel) throws ApiException {
        ApiResponse<ProjectProductOutputModel> localVarResp = projectProductsPostProjectProductWithHttpInfo(projectProductInputModel);
        return localVarResp.getData();
    }

    /**
     * Adds a product to a project.
     * 
     * @param projectProductInputModel projectProductModel (optional)
     * @return ApiResponse&lt;ProjectProductOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectProductOutputModel> projectProductsPostProjectProductWithHttpInfo(ProjectProductInputModel projectProductInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectProductsPostProjectProductValidateBeforeCall(projectProductInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectProductOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a product to a project. (asynchronously)
     * 
     * @param projectProductInputModel projectProductModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProductsPostProjectProductAsync(ProjectProductInputModel projectProductInputModel, final ApiCallback<ProjectProductOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProductsPostProjectProductValidateBeforeCall(projectProductInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectProductOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkHourPricesPatchProjectWorkHourPrice
     * @param guid ID of the work hour price (required)
     * @param patchOperation JSON patch document of ProjectWorkHourPriceInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesPatchProjectWorkHourPriceCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectworkhourprices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkHourPricesPatchProjectWorkHourPriceValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectWorkHourPricesPatchProjectWorkHourPrice(Async)");
        }

        return projectWorkHourPricesPatchProjectWorkHourPriceCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a work hour price or a part of it
     * 
     * @param guid ID of the work hour price (required)
     * @param patchOperation JSON patch document of ProjectWorkHourPriceInputModel (optional)
     * @return List&lt;ProjectWorkHourPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectWorkHourPriceOutputModel> projectWorkHourPricesPatchProjectWorkHourPrice(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectWorkHourPriceOutputModel>> localVarResp = projectWorkHourPricesPatchProjectWorkHourPriceWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a work hour price or a part of it
     * 
     * @param guid ID of the work hour price (required)
     * @param patchOperation JSON patch document of ProjectWorkHourPriceInputModel (optional)
     * @return ApiResponse&lt;List&lt;ProjectWorkHourPriceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectWorkHourPriceOutputModel>> projectWorkHourPricesPatchProjectWorkHourPriceWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectWorkHourPricesPatchProjectWorkHourPriceValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectWorkHourPriceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a work hour price or a part of it (asynchronously)
     * 
     * @param guid ID of the work hour price (required)
     * @param patchOperation JSON patch document of ProjectWorkHourPriceInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesPatchProjectWorkHourPriceAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectWorkHourPriceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkHourPricesPatchProjectWorkHourPriceValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectWorkHourPriceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkHourPricesPostProjectWorkHourPrice
     * @param projectWorkHourPriceInputModel ProjectWorkHourPriceInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesPostProjectWorkHourPriceCall(ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectWorkHourPriceInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectworkhourprices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkHourPricesPostProjectWorkHourPriceValidateBeforeCall(ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel, final ApiCallback _callback) throws ApiException {
        return projectWorkHourPricesPostProjectWorkHourPriceCall(projectWorkHourPriceInputModel, _callback);

    }

    /**
     * Insert a work hour price
     * 
     * @param projectWorkHourPriceInputModel ProjectWorkHourPriceInputModel (optional)
     * @return ProjectWorkHourPriceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectWorkHourPriceOutputModel projectWorkHourPricesPostProjectWorkHourPrice(ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel) throws ApiException {
        ApiResponse<ProjectWorkHourPriceOutputModel> localVarResp = projectWorkHourPricesPostProjectWorkHourPriceWithHttpInfo(projectWorkHourPriceInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a work hour price
     * 
     * @param projectWorkHourPriceInputModel ProjectWorkHourPriceInputModel (optional)
     * @return ApiResponse&lt;ProjectWorkHourPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectWorkHourPriceOutputModel> projectWorkHourPricesPostProjectWorkHourPriceWithHttpInfo(ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectWorkHourPricesPostProjectWorkHourPriceValidateBeforeCall(projectWorkHourPriceInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectWorkHourPriceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a work hour price (asynchronously)
     * 
     * @param projectWorkHourPriceInputModel ProjectWorkHourPriceInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work hour prices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesPostProjectWorkHourPriceAsync(ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel, final ApiCallback<ProjectWorkHourPriceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkHourPricesPostProjectWorkHourPriceValidateBeforeCall(projectWorkHourPriceInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectWorkHourPriceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkTypesPatchProjectWorktype
     * @param guid ID of the project work type. (required)
     * @param patchOperation JSON patch document of ProjectWorkTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkTypesPatchProjectWorktypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectworktypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkTypesPatchProjectWorktypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectWorkTypesPatchProjectWorktype(Async)");
        }

        return projectWorkTypesPatchProjectWorktypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (patch) a project work type.
     * This currently can be used only to change the default work type in a project. The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     * @param guid ID of the project work type. (required)
     * @param patchOperation JSON patch document of ProjectWorkTypeModel. (optional)
     * @return List&lt;ProjectWorkTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectWorkTypeModel> projectWorkTypesPatchProjectWorktype(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectWorkTypeModel>> localVarResp = projectWorkTypesPatchProjectWorktypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (patch) a project work type.
     * This currently can be used only to change the default work type in a project. The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     * @param guid ID of the project work type. (required)
     * @param patchOperation JSON patch document of ProjectWorkTypeModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectWorkTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectWorkTypeModel>> projectWorkTypesPatchProjectWorktypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectWorkTypesPatchProjectWorktypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectWorkTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (patch) a project work type. (asynchronously)
     * This currently can be used only to change the default work type in a project. The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     * @param guid ID of the project work type. (required)
     * @param patchOperation JSON patch document of ProjectWorkTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkTypesPatchProjectWorktypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectWorkTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkTypesPatchProjectWorktypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectWorkTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkTypesPostProjectWorktype
     * @param projectWorkTypeModel ProjectWorkTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkTypesPostProjectWorktypeCall(ProjectWorkTypeModel projectWorkTypeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectWorkTypeModel;

        // create path and map variables
        String localVarPath = "/v1/projectworktypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkTypesPostProjectWorktypeValidateBeforeCall(ProjectWorkTypeModel projectWorkTypeModel, final ApiCallback _callback) throws ApiException {
        return projectWorkTypesPostProjectWorktypeCall(projectWorkTypeModel, _callback);

    }

    /**
     * Adds a work type to a project.
     * The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     * @param projectWorkTypeModel ProjectWorkTypeModel. (optional)
     * @return ProjectWorkTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectWorkTypeModel projectWorkTypesPostProjectWorktype(ProjectWorkTypeModel projectWorkTypeModel) throws ApiException {
        ApiResponse<ProjectWorkTypeModel> localVarResp = projectWorkTypesPostProjectWorktypeWithHttpInfo(projectWorkTypeModel);
        return localVarResp.getData();
    }

    /**
     * Adds a work type to a project.
     * The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     * @param projectWorkTypeModel ProjectWorkTypeModel. (optional)
     * @return ApiResponse&lt;ProjectWorkTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectWorkTypeModel> projectWorkTypesPostProjectWorktypeWithHttpInfo(ProjectWorkTypeModel projectWorkTypeModel) throws ApiException {
        okhttp3.Call localVarCall = projectWorkTypesPostProjectWorktypeValidateBeforeCall(projectWorkTypeModel, null);
        Type localVarReturnType = new TypeToken<ProjectWorkTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a work type to a project. (asynchronously)
     * The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     * @param projectWorkTypeModel ProjectWorkTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added project work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkTypesPostProjectWorktypeAsync(ProjectWorkTypeModel projectWorkTypeModel, final ApiCallback<ProjectWorkTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkTypesPostProjectWorktypeValidateBeforeCall(projectWorkTypeModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectWorkTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsPatchProject
     * @param guid ID of the project (required)
     * @param patchOperation JSON Patch document of ProjectInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsPatchProjectCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projects/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsPatchProjectValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectsPatchProject(Async)");
        }

        return projectsPatchProjectCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project or a part of it
     * To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
     * @param guid ID of the project (required)
     * @param patchOperation JSON Patch document of ProjectInputModel (optional)
     * @return List&lt;ProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectOutputModel> projectsPatchProject(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectOutputModel>> localVarResp = projectsPatchProjectWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project or a part of it
     * To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
     * @param guid ID of the project (required)
     * @param patchOperation JSON Patch document of ProjectInputModel (optional)
     * @return ApiResponse&lt;List&lt;ProjectOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectOutputModel>> projectsPatchProjectWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectsPatchProjectValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project or a part of it (asynchronously)
     * To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
     * @param guid ID of the project (required)
     * @param patchOperation JSON Patch document of ProjectInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsPatchProjectAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsPatchProjectValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsPostProject
     * @param projectInputModelBase ProjectInputModelBase (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsPostProjectCall(ProjectInputModelBase projectInputModelBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectInputModelBase;

        // create path and map variables
        String localVarPath = "/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsPostProjectValidateBeforeCall(ProjectInputModelBase projectInputModelBase, final ApiCallback _callback) throws ApiException {
        return projectsPostProjectCall(projectInputModelBase, _callback);

    }

    /**
     * Insert a project
     * When creating a new project, the price list property will be ignored, as it is chosen by default.
     * @param projectInputModelBase ProjectInputModelBase (optional)
     * @return ProjectOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectOutputModel projectsPostProject(ProjectInputModelBase projectInputModelBase) throws ApiException {
        ApiResponse<ProjectOutputModel> localVarResp = projectsPostProjectWithHttpInfo(projectInputModelBase);
        return localVarResp.getData();
    }

    /**
     * Insert a project
     * When creating a new project, the price list property will be ignored, as it is chosen by default.
     * @param projectInputModelBase ProjectInputModelBase (optional)
     * @return ApiResponse&lt;ProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectOutputModel> projectsPostProjectWithHttpInfo(ProjectInputModelBase projectInputModelBase) throws ApiException {
        okhttp3.Call localVarCall = projectsPostProjectValidateBeforeCall(projectInputModelBase, null);
        Type localVarReturnType = new TypeToken<ProjectOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project (asynchronously)
     * When creating a new project, the price list property will be ignored, as it is chosen by default.
     * @param projectInputModelBase ProjectInputModelBase (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsPostProjectAsync(ProjectInputModelBase projectInputModelBase, final ApiCallback<ProjectOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsPostProjectValidateBeforeCall(projectInputModelBase, _callback);
        Type localVarReturnType = new TypeToken<ProjectOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalFeesPatchProposalFee
     * @param guid ID of the proposal fee row (required)
     * @param patchOperation JSON patch document of ProposalFeeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated proposal fee rows </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesPatchProposalFeeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/proposalfeerows/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalFeesPatchProposalFeeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalFeesPatchProposalFee(Async)");
        }

        return proposalFeesPatchProposalFeeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a proposal fee row or a part of it
     * 
     * @param guid ID of the proposal fee row (required)
     * @param patchOperation JSON patch document of ProposalFeeModel (optional)
     * @return List&lt;ProposalFeeRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated proposal fee rows </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalFeeRowOutputModel> proposalFeesPatchProposalFee(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProposalFeeRowOutputModel>> localVarResp = proposalFeesPatchProposalFeeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a proposal fee row or a part of it
     * 
     * @param guid ID of the proposal fee row (required)
     * @param patchOperation JSON patch document of ProposalFeeModel (optional)
     * @return ApiResponse&lt;List&lt;ProposalFeeRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated proposal fee rows </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalFeeRowOutputModel>> proposalFeesPatchProposalFeeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = proposalFeesPatchProposalFeeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProposalFeeRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a proposal fee row or a part of it (asynchronously)
     * 
     * @param guid ID of the proposal fee row (required)
     * @param patchOperation JSON patch document of ProposalFeeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated proposal fee rows </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesPatchProposalFeeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProposalFeeRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalFeesPatchProposalFeeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalFeeRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalFeesPostProposalFee
     * @param proposalFeeRowInputModel ProposalFeeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal fee row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesPostProposalFeeCall(ProposalFeeRowInputModel proposalFeeRowInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proposalFeeRowInputModel;

        // create path and map variables
        String localVarPath = "/v1/proposalfeerows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalFeesPostProposalFeeValidateBeforeCall(ProposalFeeRowInputModel proposalFeeRowInputModel, final ApiCallback _callback) throws ApiException {
        return proposalFeesPostProposalFeeCall(proposalFeeRowInputModel, _callback);

    }

    /**
     * Insert a proposal fee row.
     * 
     * @param proposalFeeRowInputModel ProposalFeeModel (optional)
     * @return ProposalFeeRowOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal fee row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalFeeRowOutputModel proposalFeesPostProposalFee(ProposalFeeRowInputModel proposalFeeRowInputModel) throws ApiException {
        ApiResponse<ProposalFeeRowOutputModel> localVarResp = proposalFeesPostProposalFeeWithHttpInfo(proposalFeeRowInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a proposal fee row.
     * 
     * @param proposalFeeRowInputModel ProposalFeeModel (optional)
     * @return ApiResponse&lt;ProposalFeeRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal fee row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalFeeRowOutputModel> proposalFeesPostProposalFeeWithHttpInfo(ProposalFeeRowInputModel proposalFeeRowInputModel) throws ApiException {
        okhttp3.Call localVarCall = proposalFeesPostProposalFeeValidateBeforeCall(proposalFeeRowInputModel, null);
        Type localVarReturnType = new TypeToken<ProposalFeeRowOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a proposal fee row. (asynchronously)
     * 
     * @param proposalFeeRowInputModel ProposalFeeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal fee row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesPostProposalFeeAsync(ProposalFeeRowInputModel proposalFeeRowInputModel, final ApiCallback<ProposalFeeRowOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalFeesPostProposalFeeValidateBeforeCall(proposalFeeRowInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProposalFeeRowOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSettingsPatchProposalSettings
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalSettingsInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSettingsPatchProposalSettingsCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/proposals/{guid}/proposalsettings"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSettingsPatchProposalSettingsValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalSettingsPatchProposalSettings(Async)");
        }

        return proposalSettingsPatchProposalSettingsCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) proposal settings
     * 
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalSettingsInputModel (optional)
     * @return List&lt;ProposalSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalSettingsOutputModel> proposalSettingsPatchProposalSettings(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProposalSettingsOutputModel>> localVarResp = proposalSettingsPatchProposalSettingsWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) proposal settings
     * 
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalSettingsInputModel (optional)
     * @return ApiResponse&lt;List&lt;ProposalSettingsOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalSettingsOutputModel>> proposalSettingsPatchProposalSettingsWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = proposalSettingsPatchProposalSettingsValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProposalSettingsOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) proposal settings (asynchronously)
     * 
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalSettingsInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSettingsPatchProposalSettingsAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProposalSettingsOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSettingsPatchProposalSettingsValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalSettingsOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSubtotalsPatchProposalSubtotal
     * @param guid ID of the Proposal subtotal (required)
     * @param patchOperation JSON patch document of ProposalSubtotalModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal subtotals </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsPatchProposalSubtotalCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/proposalsubtotals/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSubtotalsPatchProposalSubtotalValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalSubtotalsPatchProposalSubtotal(Async)");
        }

        return proposalSubtotalsPatchProposalSubtotalCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a Proposal subtotal or a part of it
     * It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
     * @param guid ID of the Proposal subtotal (required)
     * @param patchOperation JSON patch document of ProposalSubtotalModel (optional)
     * @return List&lt;ProposalSubtotalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal subtotals </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalSubtotalOutputModel> proposalSubtotalsPatchProposalSubtotal(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProposalSubtotalOutputModel>> localVarResp = proposalSubtotalsPatchProposalSubtotalWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a Proposal subtotal or a part of it
     * It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
     * @param guid ID of the Proposal subtotal (required)
     * @param patchOperation JSON patch document of ProposalSubtotalModel (optional)
     * @return ApiResponse&lt;List&lt;ProposalSubtotalOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal subtotals </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalSubtotalOutputModel>> proposalSubtotalsPatchProposalSubtotalWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = proposalSubtotalsPatchProposalSubtotalValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProposalSubtotalOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a Proposal subtotal or a part of it (asynchronously)
     * It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
     * @param guid ID of the Proposal subtotal (required)
     * @param patchOperation JSON patch document of ProposalSubtotalModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal subtotals </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsPatchProposalSubtotalAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProposalSubtotalOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSubtotalsPatchProposalSubtotalValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalSubtotalOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSubtotalsPostProposalSubtotal
     * @param proposalSubtotalInputModel ProposalSubtotalModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal subtotal. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsPostProposalSubtotalCall(ProposalSubtotalInputModel proposalSubtotalInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proposalSubtotalInputModel;

        // create path and map variables
        String localVarPath = "/v1/proposalsubtotals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSubtotalsPostProposalSubtotalValidateBeforeCall(ProposalSubtotalInputModel proposalSubtotalInputModel, final ApiCallback _callback) throws ApiException {
        return proposalSubtotalsPostProposalSubtotalCall(proposalSubtotalInputModel, _callback);

    }

    /**
     * Insert a proposal subtotal
     * 
     * @param proposalSubtotalInputModel ProposalSubtotalModel (optional)
     * @return ProposalSubtotalOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal subtotal. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalSubtotalOutputModel proposalSubtotalsPostProposalSubtotal(ProposalSubtotalInputModel proposalSubtotalInputModel) throws ApiException {
        ApiResponse<ProposalSubtotalOutputModel> localVarResp = proposalSubtotalsPostProposalSubtotalWithHttpInfo(proposalSubtotalInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a proposal subtotal
     * 
     * @param proposalSubtotalInputModel ProposalSubtotalModel (optional)
     * @return ApiResponse&lt;ProposalSubtotalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal subtotal. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalSubtotalOutputModel> proposalSubtotalsPostProposalSubtotalWithHttpInfo(ProposalSubtotalInputModel proposalSubtotalInputModel) throws ApiException {
        okhttp3.Call localVarCall = proposalSubtotalsPostProposalSubtotalValidateBeforeCall(proposalSubtotalInputModel, null);
        Type localVarReturnType = new TypeToken<ProposalSubtotalOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a proposal subtotal (asynchronously)
     * 
     * @param proposalSubtotalInputModel ProposalSubtotalModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal subtotal. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsPostProposalSubtotalAsync(ProposalSubtotalInputModel proposalSubtotalInputModel, final ApiCallback<ProposalSubtotalOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSubtotalsPostProposalSubtotalValidateBeforeCall(proposalSubtotalInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProposalSubtotalOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalWorkhoursPatchProposalWorkhour
     * @param guid ID of the proposal work row. (required)
     * @param patchOperation JSON patch document of ProposalWorkhourModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursPatchProposalWorkhourCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/proposalworkrows/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalWorkhoursPatchProposalWorkhourValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalWorkhoursPatchProposalWorkhour(Async)");
        }

        return proposalWorkhoursPatchProposalWorkhourCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a proposal work row or a part of it.
     * 
     * @param guid ID of the proposal work row. (required)
     * @param patchOperation JSON patch document of ProposalWorkhourModel. (optional)
     * @return List&lt;ProposalWorkhourRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalWorkhourRowOutputModel> proposalWorkhoursPatchProposalWorkhour(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProposalWorkhourRowOutputModel>> localVarResp = proposalWorkhoursPatchProposalWorkhourWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a proposal work row or a part of it.
     * 
     * @param guid ID of the proposal work row. (required)
     * @param patchOperation JSON patch document of ProposalWorkhourModel. (optional)
     * @return ApiResponse&lt;List&lt;ProposalWorkhourRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalWorkhourRowOutputModel>> proposalWorkhoursPatchProposalWorkhourWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = proposalWorkhoursPatchProposalWorkhourValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProposalWorkhourRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a proposal work row or a part of it. (asynchronously)
     * 
     * @param guid ID of the proposal work row. (required)
     * @param patchOperation JSON patch document of ProposalWorkhourModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursPatchProposalWorkhourAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProposalWorkhourRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalWorkhoursPatchProposalWorkhourValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalWorkhourRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalWorkhoursPostProposalWorkhour
     * @param proposalWorkhourRowInputModel ProposalWorkhourModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursPostProposalWorkhourCall(ProposalWorkhourRowInputModel proposalWorkhourRowInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proposalWorkhourRowInputModel;

        // create path and map variables
        String localVarPath = "/v1/proposalworkrows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalWorkhoursPostProposalWorkhourValidateBeforeCall(ProposalWorkhourRowInputModel proposalWorkhourRowInputModel, final ApiCallback _callback) throws ApiException {
        return proposalWorkhoursPostProposalWorkhourCall(proposalWorkhourRowInputModel, _callback);

    }

    /**
     * Insert a proposal work row.
     * 
     * @param proposalWorkhourRowInputModel ProposalWorkhourModel (optional)
     * @return ProposalWorkhourRowOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalWorkhourRowOutputModel proposalWorkhoursPostProposalWorkhour(ProposalWorkhourRowInputModel proposalWorkhourRowInputModel) throws ApiException {
        ApiResponse<ProposalWorkhourRowOutputModel> localVarResp = proposalWorkhoursPostProposalWorkhourWithHttpInfo(proposalWorkhourRowInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a proposal work row.
     * 
     * @param proposalWorkhourRowInputModel ProposalWorkhourModel (optional)
     * @return ApiResponse&lt;ProposalWorkhourRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalWorkhourRowOutputModel> proposalWorkhoursPostProposalWorkhourWithHttpInfo(ProposalWorkhourRowInputModel proposalWorkhourRowInputModel) throws ApiException {
        okhttp3.Call localVarCall = proposalWorkhoursPostProposalWorkhourValidateBeforeCall(proposalWorkhourRowInputModel, null);
        Type localVarReturnType = new TypeToken<ProposalWorkhourRowOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a proposal work row. (asynchronously)
     * 
     * @param proposalWorkhourRowInputModel ProposalWorkhourModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursPostProposalWorkhourAsync(ProposalWorkhourRowInputModel proposalWorkhourRowInputModel, final ApiCallback<ProposalWorkhourRowOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalWorkhoursPostProposalWorkhourValidateBeforeCall(proposalWorkhourRowInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProposalWorkhourRowOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalsPatchProposal
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposals </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsPatchProposalCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/proposals/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalsPatchProposalValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalsPatchProposal(Async)");
        }

        return proposalsPatchProposalCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a Proposal or a part of it
     * 
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalInputModel (optional)
     * @return List&lt;ProposalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposals </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalOutputModel> proposalsPatchProposal(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProposalOutputModel>> localVarResp = proposalsPatchProposalWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a Proposal or a part of it
     * 
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalInputModel (optional)
     * @return ApiResponse&lt;List&lt;ProposalOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposals </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalOutputModel>> proposalsPatchProposalWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = proposalsPatchProposalValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProposalOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a Proposal or a part of it (asynchronously)
     * 
     * @param guid Guid of the Proposal (required)
     * @param patchOperation JSON patch document of ProposalInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposals </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsPatchProposalAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProposalOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalsPatchProposalValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalsPostProposal
     * @param proposalInputModel ProposalInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsPostProposalCall(ProposalInputModel proposalInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proposalInputModel;

        // create path and map variables
        String localVarPath = "/v1/proposals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalsPostProposalValidateBeforeCall(ProposalInputModel proposalInputModel, final ApiCallback _callback) throws ApiException {
        return proposalsPostProposalCall(proposalInputModel, _callback);

    }

    /**
     * Insert a proposal.
     * 
     * @param proposalInputModel ProposalInputModel (optional)
     * @return ProposalOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalOutputModel proposalsPostProposal(ProposalInputModel proposalInputModel) throws ApiException {
        ApiResponse<ProposalOutputModel> localVarResp = proposalsPostProposalWithHttpInfo(proposalInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a proposal.
     * 
     * @param proposalInputModel ProposalInputModel (optional)
     * @return ApiResponse&lt;ProposalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalOutputModel> proposalsPostProposalWithHttpInfo(ProposalInputModel proposalInputModel) throws ApiException {
        okhttp3.Call localVarCall = proposalsPostProposalValidateBeforeCall(proposalInputModel, null);
        Type localVarReturnType = new TypeToken<ProposalOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a proposal. (asynchronously)
     * 
     * @param proposalInputModel ProposalInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created proposal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsPostProposalAsync(ProposalInputModel proposalInputModel, final ApiCallback<ProposalOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalsPostProposalValidateBeforeCall(proposalInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProposalOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesPatchProjectSalesNote
     * @param guid ID of the project sales note. (required)
     * @param patchOperation JSON patch document of project sales note model. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales notes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesPatchProjectSalesNoteCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectsalesnotes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesPatchProjectSalesNoteValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesNotesPatchProjectSalesNote(Async)");
        }

        return salesNotesPatchProjectSalesNoteCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project sales note or a part of it.
     * 
     * @param guid ID of the project sales note. (required)
     * @param patchOperation JSON patch document of project sales note model. (optional)
     * @return List&lt;ProjectSalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales notes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectSalesNoteOutputModel> salesNotesPatchProjectSalesNote(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectSalesNoteOutputModel>> localVarResp = salesNotesPatchProjectSalesNoteWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project sales note or a part of it.
     * 
     * @param guid ID of the project sales note. (required)
     * @param patchOperation JSON patch document of project sales note model. (optional)
     * @return ApiResponse&lt;List&lt;ProjectSalesNoteOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales notes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectSalesNoteOutputModel>> salesNotesPatchProjectSalesNoteWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = salesNotesPatchProjectSalesNoteValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectSalesNoteOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project sales note or a part of it. (asynchronously)
     * 
     * @param guid ID of the project sales note. (required)
     * @param patchOperation JSON patch document of project sales note model. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales notes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesPatchProjectSalesNoteAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectSalesNoteOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesPatchProjectSalesNoteValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectSalesNoteOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesPostProjectSalesNotes
     * @param projectSalesNoteInputModel SalesNoteOutputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project sales note. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesPostProjectSalesNotesCall(ProjectSalesNoteInputModel projectSalesNoteInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectSalesNoteInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectsalesnotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesPostProjectSalesNotesValidateBeforeCall(ProjectSalesNoteInputModel projectSalesNoteInputModel, final ApiCallback _callback) throws ApiException {
        return salesNotesPostProjectSalesNotesCall(projectSalesNoteInputModel, _callback);

    }

    /**
     * Insert a project sales note.
     * 
     * @param projectSalesNoteInputModel SalesNoteOutputModel (optional)
     * @return ProjectSalesNoteOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project sales note. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSalesNoteOutputModel salesNotesPostProjectSalesNotes(ProjectSalesNoteInputModel projectSalesNoteInputModel) throws ApiException {
        ApiResponse<ProjectSalesNoteOutputModel> localVarResp = salesNotesPostProjectSalesNotesWithHttpInfo(projectSalesNoteInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project sales note.
     * 
     * @param projectSalesNoteInputModel SalesNoteOutputModel (optional)
     * @return ApiResponse&lt;ProjectSalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project sales note. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSalesNoteOutputModel> salesNotesPostProjectSalesNotesWithHttpInfo(ProjectSalesNoteInputModel projectSalesNoteInputModel) throws ApiException {
        okhttp3.Call localVarCall = salesNotesPostProjectSalesNotesValidateBeforeCall(projectSalesNoteInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectSalesNoteOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project sales note. (asynchronously)
     * 
     * @param projectSalesNoteInputModel SalesNoteOutputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project sales note. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesPostProjectSalesNotesAsync(ProjectSalesNoteInputModel projectSalesNoteInputModel, final ApiCallback<ProjectSalesNoteOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesPostProjectSalesNotesValidateBeforeCall(projectSalesNoteInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectSalesNoteOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
