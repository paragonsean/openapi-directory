/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.LicenseUserType;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceAllocationCriteriaModel;
import org.openapitools.client.model.ResourceAllocationOutputModel;
import org.openapitools.client.model.RoleAllocationOutputModel;
import org.openapitools.client.model.SalesProgress;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourceallocationsReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourceallocationsReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourceallocationsReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resourceAllocationsGetResourceAllocation
     * @param guid GUID used to get the resource allocation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resourceallocations/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceAllocationsGetResourceAllocationValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling resourceAllocationsGetResourceAllocation(Async)");
        }

        return resourceAllocationsGetResourceAllocationCall(guid, _callback);

    }

    /**
     * Get resource allocation by ID
     * 
     * @param guid GUID used to get the resource allocation. (required)
     * @return ResourceAllocationOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationOutputModel resourceAllocationsGetResourceAllocation(String guid) throws ApiException {
        ApiResponse<ResourceAllocationOutputModel> localVarResp = resourceAllocationsGetResourceAllocationWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get resource allocation by ID
     * 
     * @param guid GUID used to get the resource allocation. (required)
     * @return ApiResponse&lt;ResourceAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationOutputModel> resourceAllocationsGetResourceAllocationWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource allocation by ID (asynchronously)
     * 
     * @param guid GUID used to get the resource allocation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationAsync(String guid, final ApiCallback<ResourceAllocationOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceAllocationsGetResourceAllocations
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsCall(Integer rowCount, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resourceallocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceAllocationsGetResourceAllocationsValidateBeforeCall(Integer rowCount, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return resourceAllocationsGetResourceAllocationsCall(rowCount, pageToken, changedSince, _callback);

    }

    /**
     * Get resource allocations
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @return ResourceAllocationOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationOutputModel resourceAllocationsGetResourceAllocations(Integer rowCount, String pageToken, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<ResourceAllocationOutputModel> localVarResp = resourceAllocationsGetResourceAllocationsWithHttpInfo(rowCount, pageToken, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get resource allocations
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;ResourceAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationOutputModel> resourceAllocationsGetResourceAllocationsWithHttpInfo(Integer rowCount, String pageToken, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsValidateBeforeCall(rowCount, pageToken, changedSince, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource allocations (asynchronously)
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocation </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsAsync(Integer rowCount, String pageToken, OffsetDateTime changedSince, final ApiCallback<ResourceAllocationOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsValidateBeforeCall(rowCount, pageToken, changedSince, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceAllocationsGetResourceAllocationsByPhaseGuid
     * @param phaseGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param projectGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsByPhaseGuidCall(String phaseGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String projectGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phases/{phaseGuid}/resourceallocations/allocations"
            .replace("{" + "phaseGuid" + "}", localVarApiClient.escapeString(phaseGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (userLicenseTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userLicenseTypes", userLicenseTypes));
        }

        if (projectGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectGuid", projectGuid));
        }

        if (userGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userGuid", userGuid));
        }

        if (projectBusinessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectBusinessUnitGuid", projectBusinessUnitGuid));
        }

        if (userBusinessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userBusinessUnitGuid", userBusinessUnitGuid));
        }

        if (projectManagerUserGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManagerUserGuid", projectManagerUserGuid));
        }

        if (userTagGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userTagGuid", userTagGuid));
        }

        if (useSalesProbability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSalesProbability", useSalesProbability));
        }

        if (projectStatusTypeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectStatusTypeGuid", projectStatusTypeGuid));
        }

        if (projectTagGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectTagGuid", projectTagGuid));
        }

        if (superiorUserGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("superiorUserGuid", superiorUserGuid));
        }

        if (salesStatusTypeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesStatusTypeGuid", salesStatusTypeGuid));
        }

        if (resourceAllocationGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceAllocationGuid", resourceAllocationGuid));
        }

        if (salesProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesProgress", salesProgress));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceAllocationsGetResourceAllocationsByPhaseGuidValidateBeforeCall(String phaseGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String projectGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phaseGuid' is set
        if (phaseGuid == null) {
            throw new ApiException("Missing the required parameter 'phaseGuid' when calling resourceAllocationsGetResourceAllocationsByPhaseGuid(Async)");
        }

        return resourceAllocationsGetResourceAllocationsByPhaseGuidCall(phaseGuid, startDate, endDate, changedSince, userLicenseTypes, projectGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, _callback);

    }

    /**
     * Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * 
     * @param phaseGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param projectGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ResourceAllocationOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationOutputModel resourceAllocationsGetResourceAllocationsByPhaseGuid(String phaseGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String projectGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken) throws ApiException {
        ApiResponse<ResourceAllocationOutputModel> localVarResp = resourceAllocationsGetResourceAllocationsByPhaseGuidWithHttpInfo(phaseGuid, startDate, endDate, changedSince, userLicenseTypes, projectGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken);
        return localVarResp.getData();
    }

    /**
     * Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * 
     * @param phaseGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param projectGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ApiResponse&lt;ResourceAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationOutputModel> resourceAllocationsGetResourceAllocationsByPhaseGuidWithHttpInfo(String phaseGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String projectGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsByPhaseGuidValidateBeforeCall(phaseGuid, startDate, endDate, changedSince, userLicenseTypes, projectGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once) (asynchronously)
     * 
     * @param phaseGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param projectGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsByPhaseGuidAsync(String phaseGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String projectGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback<ResourceAllocationOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsByPhaseGuidValidateBeforeCall(phaseGuid, startDate, endDate, changedSince, userLicenseTypes, projectGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceAllocationsGetResourceAllocationsByProjectGuid
     * @param projectGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsByProjectGuidCall(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/resourceallocations/allocations"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (userLicenseTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userLicenseTypes", userLicenseTypes));
        }

        if (phaseGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phaseGuid", phaseGuid));
        }

        if (userGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userGuid", userGuid));
        }

        if (projectBusinessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectBusinessUnitGuid", projectBusinessUnitGuid));
        }

        if (userBusinessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userBusinessUnitGuid", userBusinessUnitGuid));
        }

        if (projectManagerUserGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManagerUserGuid", projectManagerUserGuid));
        }

        if (userTagGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userTagGuid", userTagGuid));
        }

        if (useSalesProbability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSalesProbability", useSalesProbability));
        }

        if (projectStatusTypeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectStatusTypeGuid", projectStatusTypeGuid));
        }

        if (projectTagGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectTagGuid", projectTagGuid));
        }

        if (superiorUserGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("superiorUserGuid", superiorUserGuid));
        }

        if (salesStatusTypeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesStatusTypeGuid", salesStatusTypeGuid));
        }

        if (resourceAllocationGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceAllocationGuid", resourceAllocationGuid));
        }

        if (salesProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesProgress", salesProgress));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceAllocationsGetResourceAllocationsByProjectGuidValidateBeforeCall(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling resourceAllocationsGetResourceAllocationsByProjectGuid(Async)");
        }

        return resourceAllocationsGetResourceAllocationsByProjectGuidCall(projectGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, _callback);

    }

    /**
     * Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * 
     * @param projectGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ResourceAllocationOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationOutputModel resourceAllocationsGetResourceAllocationsByProjectGuid(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken) throws ApiException {
        ApiResponse<ResourceAllocationOutputModel> localVarResp = resourceAllocationsGetResourceAllocationsByProjectGuidWithHttpInfo(projectGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken);
        return localVarResp.getData();
    }

    /**
     * Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * 
     * @param projectGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ApiResponse&lt;ResourceAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationOutputModel> resourceAllocationsGetResourceAllocationsByProjectGuidWithHttpInfo(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsByProjectGuidValidateBeforeCall(projectGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once) (asynchronously)
     * 
     * @param projectGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param userGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsByProjectGuidAsync(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String userGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback<ResourceAllocationOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsByProjectGuidValidateBeforeCall(projectGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceAllocationsGetResourceAllocationsByUserGuid
     * @param userGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param projectGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsByUserGuidCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String projectGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/resourceallocations/allocations"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (userLicenseTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userLicenseTypes", userLicenseTypes));
        }

        if (phaseGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phaseGuid", phaseGuid));
        }

        if (projectGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectGuid", projectGuid));
        }

        if (projectBusinessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectBusinessUnitGuid", projectBusinessUnitGuid));
        }

        if (userBusinessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userBusinessUnitGuid", userBusinessUnitGuid));
        }

        if (projectManagerUserGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManagerUserGuid", projectManagerUserGuid));
        }

        if (userTagGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userTagGuid", userTagGuid));
        }

        if (useSalesProbability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSalesProbability", useSalesProbability));
        }

        if (projectStatusTypeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectStatusTypeGuid", projectStatusTypeGuid));
        }

        if (projectTagGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectTagGuid", projectTagGuid));
        }

        if (superiorUserGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("superiorUserGuid", superiorUserGuid));
        }

        if (salesStatusTypeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesStatusTypeGuid", salesStatusTypeGuid));
        }

        if (resourceAllocationGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceAllocationGuid", resourceAllocationGuid));
        }

        if (salesProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesProgress", salesProgress));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceAllocationsGetResourceAllocationsByUserGuidValidateBeforeCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String projectGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling resourceAllocationsGetResourceAllocationsByUserGuid(Async)");
        }

        return resourceAllocationsGetResourceAllocationsByUserGuidCall(userGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, projectGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, _callback);

    }

    /**
     * Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * 
     * @param userGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param projectGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ResourceAllocationOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationOutputModel resourceAllocationsGetResourceAllocationsByUserGuid(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String projectGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken) throws ApiException {
        ApiResponse<ResourceAllocationOutputModel> localVarResp = resourceAllocationsGetResourceAllocationsByUserGuidWithHttpInfo(userGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, projectGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken);
        return localVarResp.getData();
    }

    /**
     * Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * 
     * @param userGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param projectGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @return ApiResponse&lt;ResourceAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationOutputModel> resourceAllocationsGetResourceAllocationsByUserGuidWithHttpInfo(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String projectGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsByUserGuidValidateBeforeCall(userGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, projectGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once) (asynchronously)
     * 
     * @param userGuid  (required)
     * @param startDate Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param endDate Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param userLicenseTypes  (optional)
     * @param phaseGuid  (optional)
     * @param projectGuid  (optional)
     * @param projectBusinessUnitGuid  (optional)
     * @param userBusinessUnitGuid  (optional)
     * @param projectManagerUserGuid  (optional)
     * @param userTagGuid  (optional)
     * @param useSalesProbability  (optional, default to true)
     * @param projectStatusTypeGuid  (optional)
     * @param projectTagGuid  (optional)
     * @param superiorUserGuid  (optional)
     * @param salesStatusTypeGuid  (optional)
     * @param resourceAllocationGuid  (optional)
     * @param salesProgress  (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsGetResourceAllocationsByUserGuidAsync(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime changedSince, List<LicenseUserType> userLicenseTypes, String phaseGuid, String projectGuid, String projectBusinessUnitGuid, String userBusinessUnitGuid, String projectManagerUserGuid, String userTagGuid, Boolean useSalesProbability, String projectStatusTypeGuid, String projectTagGuid, String superiorUserGuid, String salesStatusTypeGuid, String resourceAllocationGuid, SalesProgress salesProgress, Integer rowCount, String pageToken, final ApiCallback<ResourceAllocationOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceAllocationsGetResourceAllocationsByUserGuidValidateBeforeCall(userGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, projectGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceAllocationsPostResourceAllocations
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param resourceAllocationCriteriaModel resourceAllocationCriteriaModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocationModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsPostResourceAllocationsCall(Integer rowCount, String pageToken, OffsetDateTime changedSince, ResourceAllocationCriteriaModel resourceAllocationCriteriaModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceAllocationCriteriaModel;

        // create path and map variables
        String localVarPath = "/v1/resourceallocations/allocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceAllocationsPostResourceAllocationsValidateBeforeCall(Integer rowCount, String pageToken, OffsetDateTime changedSince, ResourceAllocationCriteriaModel resourceAllocationCriteriaModel, final ApiCallback _callback) throws ApiException {
        return resourceAllocationsPostResourceAllocationsCall(rowCount, pageToken, changedSince, resourceAllocationCriteriaModel, _callback);

    }

    /**
     * Get resource allocations (its POST because of being able to accommodate more filters)
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param resourceAllocationCriteriaModel resourceAllocationCriteriaModel (optional)
     * @return List&lt;ResourceAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocationModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceAllocationOutputModel> resourceAllocationsPostResourceAllocations(Integer rowCount, String pageToken, OffsetDateTime changedSince, ResourceAllocationCriteriaModel resourceAllocationCriteriaModel) throws ApiException {
        ApiResponse<List<ResourceAllocationOutputModel>> localVarResp = resourceAllocationsPostResourceAllocationsWithHttpInfo(rowCount, pageToken, changedSince, resourceAllocationCriteriaModel);
        return localVarResp.getData();
    }

    /**
     * Get resource allocations (its POST because of being able to accommodate more filters)
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param resourceAllocationCriteriaModel resourceAllocationCriteriaModel (optional)
     * @return ApiResponse&lt;List&lt;ResourceAllocationOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocationModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceAllocationOutputModel>> resourceAllocationsPostResourceAllocationsWithHttpInfo(Integer rowCount, String pageToken, OffsetDateTime changedSince, ResourceAllocationCriteriaModel resourceAllocationCriteriaModel) throws ApiException {
        okhttp3.Call localVarCall = resourceAllocationsPostResourceAllocationsValidateBeforeCall(rowCount, pageToken, changedSince, resourceAllocationCriteriaModel, null);
        Type localVarReturnType = new TypeToken<List<ResourceAllocationOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource allocations (its POST because of being able to accommodate more filters) (asynchronously)
     * 
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get resource allocations that have been added or changed after this date time (greater or equal). (optional)
     * @param resourceAllocationCriteriaModel resourceAllocationCriteriaModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResourceAllocationModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceAllocationsPostResourceAllocationsAsync(Integer rowCount, String pageToken, OffsetDateTime changedSince, ResourceAllocationCriteriaModel resourceAllocationCriteriaModel, final ApiCallback<List<ResourceAllocationOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceAllocationsPostResourceAllocationsValidateBeforeCall(rowCount, pageToken, changedSince, resourceAllocationCriteriaModel, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceAllocationOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAllocationsGetRoleAllocation
     * @param guid ID used to get the role allocation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAllocationsGetRoleAllocationCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/roleallocations/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAllocationsGetRoleAllocationValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling roleAllocationsGetRoleAllocation(Async)");
        }

        return roleAllocationsGetRoleAllocationCall(guid, _callback);

    }

    /**
     * Get role allocation by GUID.
     * 
     * @param guid ID used to get the role allocation. (required)
     * @return RoleAllocationOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleAllocationOutputModel roleAllocationsGetRoleAllocation(String guid) throws ApiException {
        ApiResponse<RoleAllocationOutputModel> localVarResp = roleAllocationsGetRoleAllocationWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get role allocation by GUID.
     * 
     * @param guid ID used to get the role allocation. (required)
     * @return ApiResponse&lt;RoleAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAllocationOutputModel> roleAllocationsGetRoleAllocationWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = roleAllocationsGetRoleAllocationValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<RoleAllocationOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role allocation by GUID. (asynchronously)
     * 
     * @param guid ID used to get the role allocation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAllocationsGetRoleAllocationAsync(String guid, final ApiCallback<RoleAllocationOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAllocationsGetRoleAllocationValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<RoleAllocationOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAllocationsGetRoleAllocations
     * @param startDate Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date. (required)
     * @param endDate Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param useSalesProbability Optional: Calculates the hours based on sales probability set for the project. Default is true. (optional, default to true)
     * @param roleGuids Optional: Role IDs. (optional)
     * @param phaseGuids Optional: Phase IDs. (optional)
     * @param projectGuids Optional: Project IDs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAllocationsGetRoleAllocationsCall(OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, Boolean useSalesProbability, List<String> roleGuids, List<String> phaseGuids, List<String> projectGuids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/roleallocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (useSalesProbability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSalesProbability", useSalesProbability));
        }

        if (roleGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "roleGuids", roleGuids));
        }

        if (phaseGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "phaseGuids", phaseGuids));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAllocationsGetRoleAllocationsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, Boolean useSalesProbability, List<String> roleGuids, List<String> phaseGuids, List<String> projectGuids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling roleAllocationsGetRoleAllocations(Async)");
        }

        return roleAllocationsGetRoleAllocationsCall(startDate, endDate, pageToken, rowCount, useSalesProbability, roleGuids, phaseGuids, projectGuids, _callback);

    }

    /**
     * Get role allocations.
     * 
     * @param startDate Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date. (required)
     * @param endDate Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param useSalesProbability Optional: Calculates the hours based on sales probability set for the project. Default is true. (optional, default to true)
     * @param roleGuids Optional: Role IDs. (optional)
     * @param phaseGuids Optional: Phase IDs. (optional)
     * @param projectGuids Optional: Project IDs. (optional)
     * @return List&lt;RoleAllocationOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleAllocationOutputModel> roleAllocationsGetRoleAllocations(OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, Boolean useSalesProbability, List<String> roleGuids, List<String> phaseGuids, List<String> projectGuids) throws ApiException {
        ApiResponse<List<RoleAllocationOutputModel>> localVarResp = roleAllocationsGetRoleAllocationsWithHttpInfo(startDate, endDate, pageToken, rowCount, useSalesProbability, roleGuids, phaseGuids, projectGuids);
        return localVarResp.getData();
    }

    /**
     * Get role allocations.
     * 
     * @param startDate Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date. (required)
     * @param endDate Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param useSalesProbability Optional: Calculates the hours based on sales probability set for the project. Default is true. (optional, default to true)
     * @param roleGuids Optional: Role IDs. (optional)
     * @param phaseGuids Optional: Phase IDs. (optional)
     * @param projectGuids Optional: Project IDs. (optional)
     * @return ApiResponse&lt;List&lt;RoleAllocationOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleAllocationOutputModel>> roleAllocationsGetRoleAllocationsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, Boolean useSalesProbability, List<String> roleGuids, List<String> phaseGuids, List<String> projectGuids) throws ApiException {
        okhttp3.Call localVarCall = roleAllocationsGetRoleAllocationsValidateBeforeCall(startDate, endDate, pageToken, rowCount, useSalesProbability, roleGuids, phaseGuids, projectGuids, null);
        Type localVarReturnType = new TypeToken<List<RoleAllocationOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role allocations. (asynchronously)
     * 
     * @param startDate Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date. (required)
     * @param endDate Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param useSalesProbability Optional: Calculates the hours based on sales probability set for the project. Default is true. (optional, default to true)
     * @param roleGuids Optional: Role IDs. (optional)
     * @param phaseGuids Optional: Phase IDs. (optional)
     * @param projectGuids Optional: Project IDs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleAllocationModel. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAllocationsGetRoleAllocationsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, Boolean useSalesProbability, List<String> roleGuids, List<String> phaseGuids, List<String> projectGuids, final ApiCallback<List<RoleAllocationOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAllocationsGetRoleAllocationsValidateBeforeCall(startDate, endDate, pageToken, rowCount, useSalesProbability, roleGuids, phaseGuids, projectGuids, _callback);
        Type localVarReturnType = new TypeToken<List<RoleAllocationOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
