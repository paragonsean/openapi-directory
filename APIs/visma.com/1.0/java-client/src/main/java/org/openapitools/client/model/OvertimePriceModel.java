/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModelBaseWithRequiredGuid;
import org.openapitools.client.model.PriceSource;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OvertimePriceModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OvertimePriceModel {
  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_OVERTIME = "overtime";
  @SerializedName(SERIALIZED_NAME_OVERTIME)
  private ModelBaseWithRequiredGuid overtime;

  public static final String SERIALIZED_NAME_PRICE_SOURCE = "priceSource";
  @SerializedName(SERIALIZED_NAME_PRICE_SOURCE)
  private PriceSource priceSource;

  public static final String SERIALIZED_NAME_PRICELIST_VERSION_GUID = "pricelistVersionGuid";
  @SerializedName(SERIALIZED_NAME_PRICELIST_VERSION_GUID)
  private String pricelistVersionGuid;

  public static final String SERIALIZED_NAME_PRICING_MULTIPLIER = "pricingMultiplier";
  @SerializedName(SERIALIZED_NAME_PRICING_MULTIPLIER)
  private Double pricingMultiplier;

  public static final String SERIALIZED_NAME_PROJECT_GUID = "projectGuid";
  @SerializedName(SERIALIZED_NAME_PROJECT_GUID)
  private String projectGuid;

  public OvertimePriceModel() {
  }

  public OvertimePriceModel guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public OvertimePriceModel overtime(ModelBaseWithRequiredGuid overtime) {
    this.overtime = overtime;
    return this;
  }

  /**
   * Get overtime
   * @return overtime
   */
  @javax.annotation.Nonnull
  public ModelBaseWithRequiredGuid getOvertime() {
    return overtime;
  }

  public void setOvertime(ModelBaseWithRequiredGuid overtime) {
    this.overtime = overtime;
  }


  public OvertimePriceModel priceSource(PriceSource priceSource) {
    this.priceSource = priceSource;
    return this;
  }

  /**
   * Get priceSource
   * @return priceSource
   */
  @javax.annotation.Nullable
  public PriceSource getPriceSource() {
    return priceSource;
  }

  public void setPriceSource(PriceSource priceSource) {
    this.priceSource = priceSource;
  }


  public OvertimePriceModel pricelistVersionGuid(String pricelistVersionGuid) {
    this.pricelistVersionGuid = pricelistVersionGuid;
    return this;
  }

  /**
   * Get pricelistVersionGuid
   * @return pricelistVersionGuid
   */
  @javax.annotation.Nullable
  public String getPricelistVersionGuid() {
    return pricelistVersionGuid;
  }

  public void setPricelistVersionGuid(String pricelistVersionGuid) {
    this.pricelistVersionGuid = pricelistVersionGuid;
  }


  public OvertimePriceModel pricingMultiplier(Double pricingMultiplier) {
    this.pricingMultiplier = pricingMultiplier;
    return this;
  }

  /**
   * Get pricingMultiplier
   * @return pricingMultiplier
   */
  @javax.annotation.Nullable
  public Double getPricingMultiplier() {
    return pricingMultiplier;
  }

  public void setPricingMultiplier(Double pricingMultiplier) {
    this.pricingMultiplier = pricingMultiplier;
  }


  public OvertimePriceModel projectGuid(String projectGuid) {
    this.projectGuid = projectGuid;
    return this;
  }

  /**
   * Get projectGuid
   * @return projectGuid
   */
  @javax.annotation.Nullable
  public String getProjectGuid() {
    return projectGuid;
  }

  public void setProjectGuid(String projectGuid) {
    this.projectGuid = projectGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OvertimePriceModel overtimePriceModel = (OvertimePriceModel) o;
    return Objects.equals(this.guid, overtimePriceModel.guid) &&
        Objects.equals(this.overtime, overtimePriceModel.overtime) &&
        Objects.equals(this.priceSource, overtimePriceModel.priceSource) &&
        Objects.equals(this.pricelistVersionGuid, overtimePriceModel.pricelistVersionGuid) &&
        Objects.equals(this.pricingMultiplier, overtimePriceModel.pricingMultiplier) &&
        Objects.equals(this.projectGuid, overtimePriceModel.projectGuid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(guid, overtime, priceSource, pricelistVersionGuid, pricingMultiplier, projectGuid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OvertimePriceModel {\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    overtime: ").append(toIndentedString(overtime)).append("\n");
    sb.append("    priceSource: ").append(toIndentedString(priceSource)).append("\n");
    sb.append("    pricelistVersionGuid: ").append(toIndentedString(pricelistVersionGuid)).append("\n");
    sb.append("    pricingMultiplier: ").append(toIndentedString(pricingMultiplier)).append("\n");
    sb.append("    projectGuid: ").append(toIndentedString(projectGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guid");
    openapiFields.add("overtime");
    openapiFields.add("priceSource");
    openapiFields.add("pricelistVersionGuid");
    openapiFields.add("pricingMultiplier");
    openapiFields.add("projectGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("overtime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OvertimePriceModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OvertimePriceModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OvertimePriceModel is not found in the empty JSON string", OvertimePriceModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OvertimePriceModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OvertimePriceModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OvertimePriceModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the required field `overtime`
      ModelBaseWithRequiredGuid.validateJsonElement(jsonObj.get("overtime"));
      // validate the optional field `priceSource`
      if (jsonObj.get("priceSource") != null && !jsonObj.get("priceSource").isJsonNull()) {
        PriceSource.validateJsonElement(jsonObj.get("priceSource"));
      }
      if ((jsonObj.get("pricelistVersionGuid") != null && !jsonObj.get("pricelistVersionGuid").isJsonNull()) && !jsonObj.get("pricelistVersionGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricelistVersionGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricelistVersionGuid").toString()));
      }
      if ((jsonObj.get("projectGuid") != null && !jsonObj.get("projectGuid").isJsonNull()) && !jsonObj.get("projectGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OvertimePriceModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OvertimePriceModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OvertimePriceModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OvertimePriceModel.class));

       return (TypeAdapter<T>) new TypeAdapter<OvertimePriceModel>() {
           @Override
           public void write(JsonWriter out, OvertimePriceModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OvertimePriceModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OvertimePriceModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OvertimePriceModel
   * @throws IOException if the JSON string is invalid with respect to OvertimePriceModel
   */
  public static OvertimePriceModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OvertimePriceModel.class);
  }

  /**
   * Convert an instance of OvertimePriceModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

