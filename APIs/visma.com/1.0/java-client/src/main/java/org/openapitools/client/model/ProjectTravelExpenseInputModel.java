/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MoneyInputModel;
import org.openapitools.client.model.ProjectTravelExpenseBillingScheduleType;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectTravelExpenseInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectTravelExpenseInputModel {
  public static final String SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE = "billingDependencyPhase";
  @SerializedName(SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE)
  private SimpleInputModel billingDependencyPhase;

  public static final String SERIALIZED_NAME_BILLING_SCHEDULE = "billingSchedule";
  @SerializedName(SERIALIZED_NAME_BILLING_SCHEDULE)
  private ProjectTravelExpenseBillingScheduleType billingSchedule;

  public static final String SERIALIZED_NAME_COST_ACCOUNT = "costAccount";
  @SerializedName(SERIALIZED_NAME_COST_ACCOUNT)
  private SimpleInputModel costAccount;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private SimpleInputModel costCenter;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private LocalDate eventDate;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private SimpleInputModel invoice;

  public static final String SERIALIZED_NAME_INVOICE_QUANTITY = "invoiceQuantity";
  @SerializedName(SERIALIZED_NAME_INVOICE_QUANTITY)
  private Double invoiceQuantity;

  public static final String SERIALIZED_NAME_INVOICE_ROW_COMMENT = "invoiceRowComment";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_COMMENT)
  private String invoiceRowComment;

  public static final String SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION = "invoiceRowDescription";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION)
  private String invoiceRowDescription;

  public static final String SERIALIZED_NAME_IS_BILLABLE = "isBillable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputRequiredModel phase;

  public static final String SERIALIZED_NAME_PLANNED_BILLING_DATE = "plannedBillingDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_BILLING_DATE)
  private LocalDate plannedBillingDate;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private SimpleInputRequiredModel project;

  public static final String SERIALIZED_NAME_PURCHASE_VAT_RATE = "purchaseVatRate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_VAT_RATE)
  private Double purchaseVatRate;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT = "salesAccount";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT)
  private SimpleInputModel salesAccount;

  public static final String SERIALIZED_NAME_TRAVEL_END_TIME = "travelEndTime";
  @SerializedName(SERIALIZED_NAME_TRAVEL_END_TIME)
  private OffsetDateTime travelEndTime;

  public static final String SERIALIZED_NAME_TRAVEL_EXPENSE = "travelExpense";
  @SerializedName(SERIALIZED_NAME_TRAVEL_EXPENSE)
  private SimpleInputRequiredModel travelExpense;

  public static final String SERIALIZED_NAME_TRAVEL_REIMBURSEMENT = "travelReimbursement";
  @SerializedName(SERIALIZED_NAME_TRAVEL_REIMBURSEMENT)
  private SimpleInputModel travelReimbursement;

  public static final String SERIALIZED_NAME_TRAVEL_REIMBURSEMENT_REQUIRED = "travelReimbursementRequired";
  @SerializedName(SERIALIZED_NAME_TRAVEL_REIMBURSEMENT_REQUIRED)
  private Boolean travelReimbursementRequired = true;

  public static final String SERIALIZED_NAME_TRAVEL_START_TIME = "travelStartTime";
  @SerializedName(SERIALIZED_NAME_TRAVEL_START_TIME)
  private OffsetDateTime travelStartTime;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyInputModel unitCost;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyInputModel unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleInputRequiredModel user;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProjectTravelExpenseInputModel() {
  }

  public ProjectTravelExpenseInputModel billingDependencyPhase(SimpleInputModel billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
    return this;
  }

  /**
   * Get billingDependencyPhase
   * @return billingDependencyPhase
   */
  @javax.annotation.Nullable
  public SimpleInputModel getBillingDependencyPhase() {
    return billingDependencyPhase;
  }

  public void setBillingDependencyPhase(SimpleInputModel billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
  }


  public ProjectTravelExpenseInputModel billingSchedule(ProjectTravelExpenseBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
    return this;
  }

  /**
   * Get billingSchedule
   * @return billingSchedule
   */
  @javax.annotation.Nullable
  public ProjectTravelExpenseBillingScheduleType getBillingSchedule() {
    return billingSchedule;
  }

  public void setBillingSchedule(ProjectTravelExpenseBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
  }


  public ProjectTravelExpenseInputModel costAccount(SimpleInputModel costAccount) {
    this.costAccount = costAccount;
    return this;
  }

  /**
   * Get costAccount
   * @return costAccount
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCostAccount() {
    return costAccount;
  }

  public void setCostAccount(SimpleInputModel costAccount) {
    this.costAccount = costAccount;
  }


  public ProjectTravelExpenseInputModel costCenter(SimpleInputModel costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Get costCenter
   * @return costCenter
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(SimpleInputModel costCenter) {
    this.costCenter = costCenter;
  }


  public ProjectTravelExpenseInputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectTravelExpenseInputModel eventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventDate() {
    return eventDate;
  }

  public void setEventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
  }


  public ProjectTravelExpenseInputModel invoice(SimpleInputModel invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public SimpleInputModel getInvoice() {
    return invoice;
  }

  public void setInvoice(SimpleInputModel invoice) {
    this.invoice = invoice;
  }


  public ProjectTravelExpenseInputModel invoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
    return this;
  }

  /**
   * Get invoiceQuantity
   * @return invoiceQuantity
   */
  @javax.annotation.Nullable
  public Double getInvoiceQuantity() {
    return invoiceQuantity;
  }

  public void setInvoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
  }


  public ProjectTravelExpenseInputModel invoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
    return this;
  }

  /**
   * Get invoiceRowComment
   * @return invoiceRowComment
   */
  @javax.annotation.Nullable
  public String getInvoiceRowComment() {
    return invoiceRowComment;
  }

  public void setInvoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
  }


  public ProjectTravelExpenseInputModel invoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
    return this;
  }

  /**
   * Get invoiceRowDescription
   * @return invoiceRowDescription
   */
  @javax.annotation.Nullable
  public String getInvoiceRowDescription() {
    return invoiceRowDescription;
  }

  public void setInvoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
  }


  public ProjectTravelExpenseInputModel isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * Get isBillable
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public ProjectTravelExpenseInputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProjectTravelExpenseInputModel phase(SimpleInputRequiredModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputRequiredModel phase) {
    this.phase = phase;
  }


  public ProjectTravelExpenseInputModel plannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
    return this;
  }

  /**
   * Get plannedBillingDate
   * @return plannedBillingDate
   */
  @javax.annotation.Nullable
  public LocalDate getPlannedBillingDate() {
    return plannedBillingDate;
  }

  public void setPlannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
  }


  public ProjectTravelExpenseInputModel project(SimpleInputRequiredModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getProject() {
    return project;
  }

  public void setProject(SimpleInputRequiredModel project) {
    this.project = project;
  }


  public ProjectTravelExpenseInputModel purchaseVatRate(Double purchaseVatRate) {
    this.purchaseVatRate = purchaseVatRate;
    return this;
  }

  /**
   * Get purchaseVatRate
   * @return purchaseVatRate
   */
  @javax.annotation.Nullable
  public Double getPurchaseVatRate() {
    return purchaseVatRate;
  }

  public void setPurchaseVatRate(Double purchaseVatRate) {
    this.purchaseVatRate = purchaseVatRate;
  }


  public ProjectTravelExpenseInputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProjectTravelExpenseInputModel salesAccount(SimpleInputModel salesAccount) {
    this.salesAccount = salesAccount;
    return this;
  }

  /**
   * Get salesAccount
   * @return salesAccount
   */
  @javax.annotation.Nullable
  public SimpleInputModel getSalesAccount() {
    return salesAccount;
  }

  public void setSalesAccount(SimpleInputModel salesAccount) {
    this.salesAccount = salesAccount;
  }


  public ProjectTravelExpenseInputModel travelEndTime(OffsetDateTime travelEndTime) {
    this.travelEndTime = travelEndTime;
    return this;
  }

  /**
   * Get travelEndTime
   * @return travelEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTravelEndTime() {
    return travelEndTime;
  }

  public void setTravelEndTime(OffsetDateTime travelEndTime) {
    this.travelEndTime = travelEndTime;
  }


  public ProjectTravelExpenseInputModel travelExpense(SimpleInputRequiredModel travelExpense) {
    this.travelExpense = travelExpense;
    return this;
  }

  /**
   * Get travelExpense
   * @return travelExpense
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getTravelExpense() {
    return travelExpense;
  }

  public void setTravelExpense(SimpleInputRequiredModel travelExpense) {
    this.travelExpense = travelExpense;
  }


  public ProjectTravelExpenseInputModel travelReimbursement(SimpleInputModel travelReimbursement) {
    this.travelReimbursement = travelReimbursement;
    return this;
  }

  /**
   * Get travelReimbursement
   * @return travelReimbursement
   */
  @javax.annotation.Nullable
  public SimpleInputModel getTravelReimbursement() {
    return travelReimbursement;
  }

  public void setTravelReimbursement(SimpleInputModel travelReimbursement) {
    this.travelReimbursement = travelReimbursement;
  }


  public ProjectTravelExpenseInputModel travelReimbursementRequired(Boolean travelReimbursementRequired) {
    this.travelReimbursementRequired = travelReimbursementRequired;
    return this;
  }

  /**
   * Get travelReimbursementRequired
   * @return travelReimbursementRequired
   */
  @javax.annotation.Nullable
  public Boolean getTravelReimbursementRequired() {
    return travelReimbursementRequired;
  }

  public void setTravelReimbursementRequired(Boolean travelReimbursementRequired) {
    this.travelReimbursementRequired = travelReimbursementRequired;
  }


  public ProjectTravelExpenseInputModel travelStartTime(OffsetDateTime travelStartTime) {
    this.travelStartTime = travelStartTime;
    return this;
  }

  /**
   * Get travelStartTime
   * @return travelStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTravelStartTime() {
    return travelStartTime;
  }

  public void setTravelStartTime(OffsetDateTime travelStartTime) {
    this.travelStartTime = travelStartTime;
  }


  public ProjectTravelExpenseInputModel unitCost(MoneyInputModel unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyInputModel getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyInputModel unitCost) {
    this.unitCost = unitCost;
  }


  public ProjectTravelExpenseInputModel unitPrice(MoneyInputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyInputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyInputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProjectTravelExpenseInputModel user(SimpleInputRequiredModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getUser() {
    return user;
  }

  public void setUser(SimpleInputRequiredModel user) {
    this.user = user;
  }


  public ProjectTravelExpenseInputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectTravelExpenseInputModel projectTravelExpenseInputModel = (ProjectTravelExpenseInputModel) o;
    return Objects.equals(this.billingDependencyPhase, projectTravelExpenseInputModel.billingDependencyPhase) &&
        Objects.equals(this.billingSchedule, projectTravelExpenseInputModel.billingSchedule) &&
        Objects.equals(this.costAccount, projectTravelExpenseInputModel.costAccount) &&
        Objects.equals(this.costCenter, projectTravelExpenseInputModel.costCenter) &&
        Objects.equals(this.description, projectTravelExpenseInputModel.description) &&
        Objects.equals(this.eventDate, projectTravelExpenseInputModel.eventDate) &&
        Objects.equals(this.invoice, projectTravelExpenseInputModel.invoice) &&
        Objects.equals(this.invoiceQuantity, projectTravelExpenseInputModel.invoiceQuantity) &&
        Objects.equals(this.invoiceRowComment, projectTravelExpenseInputModel.invoiceRowComment) &&
        Objects.equals(this.invoiceRowDescription, projectTravelExpenseInputModel.invoiceRowDescription) &&
        Objects.equals(this.isBillable, projectTravelExpenseInputModel.isBillable) &&
        Objects.equals(this.measurementUnit, projectTravelExpenseInputModel.measurementUnit) &&
        Objects.equals(this.phase, projectTravelExpenseInputModel.phase) &&
        Objects.equals(this.plannedBillingDate, projectTravelExpenseInputModel.plannedBillingDate) &&
        Objects.equals(this.project, projectTravelExpenseInputModel.project) &&
        Objects.equals(this.purchaseVatRate, projectTravelExpenseInputModel.purchaseVatRate) &&
        Objects.equals(this.quantity, projectTravelExpenseInputModel.quantity) &&
        Objects.equals(this.salesAccount, projectTravelExpenseInputModel.salesAccount) &&
        Objects.equals(this.travelEndTime, projectTravelExpenseInputModel.travelEndTime) &&
        Objects.equals(this.travelExpense, projectTravelExpenseInputModel.travelExpense) &&
        Objects.equals(this.travelReimbursement, projectTravelExpenseInputModel.travelReimbursement) &&
        Objects.equals(this.travelReimbursementRequired, projectTravelExpenseInputModel.travelReimbursementRequired) &&
        Objects.equals(this.travelStartTime, projectTravelExpenseInputModel.travelStartTime) &&
        Objects.equals(this.unitCost, projectTravelExpenseInputModel.unitCost) &&
        Objects.equals(this.unitPrice, projectTravelExpenseInputModel.unitPrice) &&
        Objects.equals(this.user, projectTravelExpenseInputModel.user) &&
        Objects.equals(this.vatRate, projectTravelExpenseInputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDependencyPhase, billingSchedule, costAccount, costCenter, description, eventDate, invoice, invoiceQuantity, invoiceRowComment, invoiceRowDescription, isBillable, measurementUnit, phase, plannedBillingDate, project, purchaseVatRate, quantity, salesAccount, travelEndTime, travelExpense, travelReimbursement, travelReimbursementRequired, travelStartTime, unitCost, unitPrice, user, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectTravelExpenseInputModel {\n");
    sb.append("    billingDependencyPhase: ").append(toIndentedString(billingDependencyPhase)).append("\n");
    sb.append("    billingSchedule: ").append(toIndentedString(billingSchedule)).append("\n");
    sb.append("    costAccount: ").append(toIndentedString(costAccount)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceQuantity: ").append(toIndentedString(invoiceQuantity)).append("\n");
    sb.append("    invoiceRowComment: ").append(toIndentedString(invoiceRowComment)).append("\n");
    sb.append("    invoiceRowDescription: ").append(toIndentedString(invoiceRowDescription)).append("\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    plannedBillingDate: ").append(toIndentedString(plannedBillingDate)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    purchaseVatRate: ").append(toIndentedString(purchaseVatRate)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    salesAccount: ").append(toIndentedString(salesAccount)).append("\n");
    sb.append("    travelEndTime: ").append(toIndentedString(travelEndTime)).append("\n");
    sb.append("    travelExpense: ").append(toIndentedString(travelExpense)).append("\n");
    sb.append("    travelReimbursement: ").append(toIndentedString(travelReimbursement)).append("\n");
    sb.append("    travelReimbursementRequired: ").append(toIndentedString(travelReimbursementRequired)).append("\n");
    sb.append("    travelStartTime: ").append(toIndentedString(travelStartTime)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingDependencyPhase");
    openapiFields.add("billingSchedule");
    openapiFields.add("costAccount");
    openapiFields.add("costCenter");
    openapiFields.add("description");
    openapiFields.add("eventDate");
    openapiFields.add("invoice");
    openapiFields.add("invoiceQuantity");
    openapiFields.add("invoiceRowComment");
    openapiFields.add("invoiceRowDescription");
    openapiFields.add("isBillable");
    openapiFields.add("measurementUnit");
    openapiFields.add("phase");
    openapiFields.add("plannedBillingDate");
    openapiFields.add("project");
    openapiFields.add("purchaseVatRate");
    openapiFields.add("quantity");
    openapiFields.add("salesAccount");
    openapiFields.add("travelEndTime");
    openapiFields.add("travelExpense");
    openapiFields.add("travelReimbursement");
    openapiFields.add("travelReimbursementRequired");
    openapiFields.add("travelStartTime");
    openapiFields.add("unitCost");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phase");
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("travelExpense");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectTravelExpenseInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectTravelExpenseInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectTravelExpenseInputModel is not found in the empty JSON string", ProjectTravelExpenseInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectTravelExpenseInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectTravelExpenseInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectTravelExpenseInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingDependencyPhase`
      if (jsonObj.get("billingDependencyPhase") != null && !jsonObj.get("billingDependencyPhase").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("billingDependencyPhase"));
      }
      // validate the optional field `billingSchedule`
      if (jsonObj.get("billingSchedule") != null && !jsonObj.get("billingSchedule").isJsonNull()) {
        ProjectTravelExpenseBillingScheduleType.validateJsonElement(jsonObj.get("billingSchedule"));
      }
      // validate the optional field `costAccount`
      if (jsonObj.get("costAccount") != null && !jsonObj.get("costAccount").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("costAccount"));
      }
      // validate the optional field `costCenter`
      if (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("costCenter"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("invoice"));
      }
      if ((jsonObj.get("invoiceRowComment") != null && !jsonObj.get("invoiceRowComment").isJsonNull()) && !jsonObj.get("invoiceRowComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowComment").toString()));
      }
      if ((jsonObj.get("invoiceRowDescription") != null && !jsonObj.get("invoiceRowDescription").isJsonNull()) && !jsonObj.get("invoiceRowDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowDescription").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      // validate the required field `phase`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("phase"));
      // validate the required field `project`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("project"));
      // validate the optional field `salesAccount`
      if (jsonObj.get("salesAccount") != null && !jsonObj.get("salesAccount").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("salesAccount"));
      }
      // validate the required field `travelExpense`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("travelExpense"));
      // validate the optional field `travelReimbursement`
      if (jsonObj.get("travelReimbursement") != null && !jsonObj.get("travelReimbursement").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("travelReimbursement"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyInputModel.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyInputModel.validateJsonElement(jsonObj.get("unitPrice"));
      }
      // validate the required field `user`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectTravelExpenseInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectTravelExpenseInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectTravelExpenseInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectTravelExpenseInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectTravelExpenseInputModel>() {
           @Override
           public void write(JsonWriter out, ProjectTravelExpenseInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectTravelExpenseInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectTravelExpenseInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectTravelExpenseInputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectTravelExpenseInputModel
   */
  public static ProjectTravelExpenseInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectTravelExpenseInputModel.class);
  }

  /**
   * Convert an instance of ProjectTravelExpenseInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

