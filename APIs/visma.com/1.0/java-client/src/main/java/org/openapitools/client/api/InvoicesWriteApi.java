/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateInvoiceModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.InvoiceOutputModel;
import org.openapitools.client.model.InvoiceRowOutputModel;
import org.openapitools.client.model.InvoiceSettingsOutputModel;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.ProjectInvoiceSettingsInputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesWriteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesWriteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesWriteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invoiceRowsPatchInvoiceRow
     * @param guid ID of the invoice row (required)
     * @param patchOperation JSON Patch document of InvoiceRowModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated invoice rows </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsPatchInvoiceRowCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/invoicerows/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceRowsPatchInvoiceRowValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoiceRowsPatchInvoiceRow(Async)");
        }

        return invoiceRowsPatchInvoiceRowCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a invoice row or a part of it
     * If CostCenterNumber, SalesAccountNumber or RecurringSalesAccountNumber are changed and the invoice row is related to one or many ProjectFees or ProjectTravelExpenses, the values for those will also be updated.
     * @param guid ID of the invoice row (required)
     * @param patchOperation JSON Patch document of InvoiceRowModel (optional)
     * @return List&lt;InvoiceRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated invoice rows </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceRowOutputModel> invoiceRowsPatchInvoiceRow(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<InvoiceRowOutputModel>> localVarResp = invoiceRowsPatchInvoiceRowWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a invoice row or a part of it
     * If CostCenterNumber, SalesAccountNumber or RecurringSalesAccountNumber are changed and the invoice row is related to one or many ProjectFees or ProjectTravelExpenses, the values for those will also be updated.
     * @param guid ID of the invoice row (required)
     * @param patchOperation JSON Patch document of InvoiceRowModel (optional)
     * @return ApiResponse&lt;List&lt;InvoiceRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated invoice rows </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceRowOutputModel>> invoiceRowsPatchInvoiceRowWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = invoiceRowsPatchInvoiceRowValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<InvoiceRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a invoice row or a part of it (asynchronously)
     * If CostCenterNumber, SalesAccountNumber or RecurringSalesAccountNumber are changed and the invoice row is related to one or many ProjectFees or ProjectTravelExpenses, the values for those will also be updated.
     * @param guid ID of the invoice row (required)
     * @param patchOperation JSON Patch document of InvoiceRowModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated invoice rows </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceRowsPatchInvoiceRowAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<InvoiceRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceRowsPatchInvoiceRowValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceSettingsPatchInvoiceSettings
     * @param guid ID of the invoice settings (required)
     * @param patchOperation JSON patch document of InvoiceSettingsModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceSettingsPatchInvoiceSettingsCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/invoicesettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceSettingsPatchInvoiceSettingsValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoiceSettingsPatchInvoiceSettings(Async)");
        }

        return invoiceSettingsPatchInvoiceSettingsCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) invoice setting
     * 
     * @param guid ID of the invoice settings (required)
     * @param patchOperation JSON patch document of InvoiceSettingsModel (optional)
     * @return InvoiceSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceSettingsOutputModel invoiceSettingsPatchInvoiceSettings(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<InvoiceSettingsOutputModel> localVarResp = invoiceSettingsPatchInvoiceSettingsWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) invoice setting
     * 
     * @param guid ID of the invoice settings (required)
     * @param patchOperation JSON patch document of InvoiceSettingsModel (optional)
     * @return ApiResponse&lt;InvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceSettingsOutputModel> invoiceSettingsPatchInvoiceSettingsWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = invoiceSettingsPatchInvoiceSettingsValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<InvoiceSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) invoice setting (asynchronously)
     * 
     * @param guid ID of the invoice settings (required)
     * @param patchOperation JSON patch document of InvoiceSettingsModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceSettingsOutputModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceSettingsPatchInvoiceSettingsAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<InvoiceSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceSettingsPatchInvoiceSettingsValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<InvoiceSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoicesPatchInvoice
     * @param guid GUID of the invoice (required)
     * @param patchOperation JSON patch document of InvoiceInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of invoices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesPatchInvoiceCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/invoices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoicesPatchInvoiceValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoicesPatchInvoice(Async)");
        }

        return invoicesPatchInvoiceCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an invoice or a part of it
     * 
     * @param guid GUID of the invoice (required)
     * @param patchOperation JSON patch document of InvoiceInputModel (optional)
     * @return List&lt;InvoiceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of invoices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceOutputModel> invoicesPatchInvoice(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<InvoiceOutputModel>> localVarResp = invoicesPatchInvoiceWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an invoice or a part of it
     * 
     * @param guid GUID of the invoice (required)
     * @param patchOperation JSON patch document of InvoiceInputModel (optional)
     * @return ApiResponse&lt;List&lt;InvoiceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of invoices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceOutputModel>> invoicesPatchInvoiceWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = invoicesPatchInvoiceValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<InvoiceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an invoice or a part of it (asynchronously)
     * 
     * @param guid GUID of the invoice (required)
     * @param patchOperation JSON patch document of InvoiceInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of invoices </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesPatchInvoiceAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<InvoiceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoicesPatchInvoiceValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoicesPostInvoiceCreation
     * @param createInvoiceModel CreateInvoiceModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created invoice(s) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesPostInvoiceCreationCall(CreateInvoiceModel createInvoiceModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvoiceModel;

        // create path and map variables
        String localVarPath = "/v1/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoicesPostInvoiceCreationValidateBeforeCall(CreateInvoiceModel createInvoiceModel, final ApiCallback _callback) throws ApiException {
        return invoicesPostInvoiceCreationCall(createInvoiceModel, _callback);

    }

    /**
     * Add an invoice to project(s)
     * 
     * @param createInvoiceModel CreateInvoiceModel (optional)
     * @return List&lt;InvoiceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created invoice(s) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceOutputModel> invoicesPostInvoiceCreation(CreateInvoiceModel createInvoiceModel) throws ApiException {
        ApiResponse<List<InvoiceOutputModel>> localVarResp = invoicesPostInvoiceCreationWithHttpInfo(createInvoiceModel);
        return localVarResp.getData();
    }

    /**
     * Add an invoice to project(s)
     * 
     * @param createInvoiceModel CreateInvoiceModel (optional)
     * @return ApiResponse&lt;List&lt;InvoiceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created invoice(s) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceOutputModel>> invoicesPostInvoiceCreationWithHttpInfo(CreateInvoiceModel createInvoiceModel) throws ApiException {
        okhttp3.Call localVarCall = invoicesPostInvoiceCreationValidateBeforeCall(createInvoiceModel, null);
        Type localVarReturnType = new TypeToken<List<InvoiceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice to project(s) (asynchronously)
     * 
     * @param createInvoiceModel CreateInvoiceModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created invoice(s) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesPostInvoiceCreationAsync(CreateInvoiceModel createInvoiceModel, final ApiCallback<List<InvoiceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoicesPostInvoiceCreationValidateBeforeCall(createInvoiceModel, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsPatchProjectInvoiceSettings
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPatchProjectInvoiceSettingsCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectinvoicesettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsPatchProjectInvoiceSettingsValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectInvoiceSettingsPatchProjectInvoiceSettings(Async)");
        }

        return projectInvoiceSettingsPatchProjectInvoiceSettingsCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) project invoice settings.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @return List&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsPatchProjectInvoiceSettings(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectInvoiceSettingsOutputModel>> localVarResp = projectInvoiceSettingsPatchProjectInvoiceSettingsWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) project invoice settings.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectInvoiceSettingsOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectInvoiceSettingsOutputModel>> projectInvoiceSettingsPatchProjectInvoiceSettingsWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsPatchProjectInvoiceSettingsValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) project invoice settings. (asynchronously)
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param patchOperation JSON patch document of ProjectInvoiceSettingsInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPatchProjectInvoiceSettingsAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectInvoiceSettingsOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsPatchProjectInvoiceSettingsValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsPostProjectInvoiceSettings
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPostProjectInvoiceSettingsCall(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectInvoiceSettingsInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectinvoicesettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsPostProjectInvoiceSettingsValidateBeforeCall(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel, final ApiCallback _callback) throws ApiException {
        return projectInvoiceSettingsPostProjectInvoiceSettingsCall(projectInvoiceSettingsInputModel, _callback);

    }

    /**
     * Create a new project invoice settings.
     * 
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @return ProjectInvoiceSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectInvoiceSettingsOutputModel projectInvoiceSettingsPostProjectInvoiceSettings(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel) throws ApiException {
        ApiResponse<ProjectInvoiceSettingsOutputModel> localVarResp = projectInvoiceSettingsPostProjectInvoiceSettingsWithHttpInfo(projectInvoiceSettingsInputModel);
        return localVarResp.getData();
    }

    /**
     * Create a new project invoice settings.
     * 
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @return ApiResponse&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsPostProjectInvoiceSettingsWithHttpInfo(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsPostProjectInvoiceSettingsValidateBeforeCall(projectInvoiceSettingsInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project invoice settings. (asynchronously)
     * 
     * @param projectInvoiceSettingsInputModel Project invoice settings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsPostProjectInvoiceSettingsAsync(ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel, final ApiCallback<ProjectInvoiceSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsPostProjectInvoiceSettingsValidateBeforeCall(projectInvoiceSettingsInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
