/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillablePeriod;
import org.openapitools.client.model.DeletedProjectFeeModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.FlatRateOutputModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectFeeOutputModel;
import org.openapitools.client.model.ProjectRecurringFeeRuleOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeesReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeesReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeesReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for flatRatesGetAllFlatRates
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get flat rates that have been added or changed after this date time (greater or equal). (optional)
     * @param invoiceGuid Optional: Get flat rates by invoice guid. Default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flatRatesGetAllFlatRatesCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, String invoiceGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/flatrates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (invoiceGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceGuid", invoiceGuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flatRatesGetAllFlatRatesValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, String invoiceGuid, final ApiCallback _callback) throws ApiException {
        return flatRatesGetAllFlatRatesCall(pageToken, rowCount, changedSince, invoiceGuid, _callback);

    }

    /**
     * Get all flat rates
     * 
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get flat rates that have been added or changed after this date time (greater or equal). (optional)
     * @param invoiceGuid Optional: Get flat rates by invoice guid. Default all. (optional)
     * @return List&lt;FlatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FlatRateOutputModel> flatRatesGetAllFlatRates(String pageToken, Integer rowCount, OffsetDateTime changedSince, String invoiceGuid) throws ApiException {
        ApiResponse<List<FlatRateOutputModel>> localVarResp = flatRatesGetAllFlatRatesWithHttpInfo(pageToken, rowCount, changedSince, invoiceGuid);
        return localVarResp.getData();
    }

    /**
     * Get all flat rates
     * 
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get flat rates that have been added or changed after this date time (greater or equal). (optional)
     * @param invoiceGuid Optional: Get flat rates by invoice guid. Default all. (optional)
     * @return ApiResponse&lt;List&lt;FlatRateOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlatRateOutputModel>> flatRatesGetAllFlatRatesWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince, String invoiceGuid) throws ApiException {
        okhttp3.Call localVarCall = flatRatesGetAllFlatRatesValidateBeforeCall(pageToken, rowCount, changedSince, invoiceGuid, null);
        Type localVarReturnType = new TypeToken<List<FlatRateOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all flat rates (asynchronously)
     * 
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get flat rates that have been added or changed after this date time (greater or equal). (optional)
     * @param invoiceGuid Optional: Get flat rates by invoice guid. Default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flatRatesGetAllFlatRatesAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, String invoiceGuid, final ApiCallback<List<FlatRateOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = flatRatesGetAllFlatRatesValidateBeforeCall(pageToken, rowCount, changedSince, invoiceGuid, _callback);
        Type localVarReturnType = new TypeToken<List<FlatRateOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flatRatesGetFlatrate
     * @param guid Id of the flat rate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlatRateModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flatRatesGetFlatrateCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/flatrates/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flatRatesGetFlatrateValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling flatRatesGetFlatrate(Async)");
        }

        return flatRatesGetFlatrateCall(guid, _callback);

    }

    /**
     * Get flat rate.
     * 
     * @param guid Id of the flat rate. (required)
     * @return List&lt;FlatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlatRateModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FlatRateOutputModel> flatRatesGetFlatrate(String guid) throws ApiException {
        ApiResponse<List<FlatRateOutputModel>> localVarResp = flatRatesGetFlatrateWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get flat rate.
     * 
     * @param guid Id of the flat rate. (required)
     * @return ApiResponse&lt;List&lt;FlatRateOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlatRateModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlatRateOutputModel>> flatRatesGetFlatrateWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = flatRatesGetFlatrateValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<List<FlatRateOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get flat rate. (asynchronously)
     * 
     * @param guid Id of the flat rate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlatRateModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flatRatesGetFlatrateAsync(String guid, final ApiCallback<List<FlatRateOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = flatRatesGetFlatrateValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<List<FlatRateOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flatRatesGetFlatratesForProject
     * @param projectGuid Id of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flatRatesGetFlatratesForProjectCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/flatrates"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flatRatesGetFlatratesForProjectValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling flatRatesGetFlatratesForProject(Async)");
        }

        return flatRatesGetFlatratesForProjectCall(projectGuid, _callback);

    }

    /**
     * Get project&#39;s flat rates.
     * 
     * @param projectGuid Id of the project. (required)
     * @return List&lt;FlatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FlatRateOutputModel> flatRatesGetFlatratesForProject(String projectGuid) throws ApiException {
        ApiResponse<List<FlatRateOutputModel>> localVarResp = flatRatesGetFlatratesForProjectWithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get project&#39;s flat rates.
     * 
     * @param projectGuid Id of the project. (required)
     * @return ApiResponse&lt;List&lt;FlatRateOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlatRateOutputModel>> flatRatesGetFlatratesForProjectWithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = flatRatesGetFlatratesForProjectValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<FlatRateOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project&#39;s flat rates. (asynchronously)
     * 
     * @param projectGuid Id of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the flat rates for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flatRatesGetFlatratesForProjectAsync(String projectGuid, final ApiCallback<List<FlatRateOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = flatRatesGetFlatratesForProjectValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<FlatRateOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetDeletedProjectFees
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project fees that have been deleted after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetDeletedProjectFeesCall(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/deletedprojectfees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (userGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userGuids", userGuids));
        }

        if (deletedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletedSince", deletedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetDeletedProjectFeesValidateBeforeCall(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince, final ApiCallback _callback) throws ApiException {
        return projectFeesGetDeletedProjectFeesCall(pageToken, rowCount, projectGuids, userGuids, deletedSince, _callback);

    }

    /**
     * Get the deleted project fees.
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project fees that have been deleted after this date time (greater or equal). (optional)
     * @return List&lt;DeletedProjectFeeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<DeletedProjectFeeModel> projectFeesGetDeletedProjectFees(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince) throws ApiException {
        ApiResponse<List<DeletedProjectFeeModel>> localVarResp = projectFeesGetDeletedProjectFeesWithHttpInfo(pageToken, rowCount, projectGuids, userGuids, deletedSince);
        return localVarResp.getData();
    }

    /**
     * Get the deleted project fees.
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project fees that have been deleted after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;DeletedProjectFeeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeletedProjectFeeModel>> projectFeesGetDeletedProjectFeesWithHttpInfo(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetDeletedProjectFeesValidateBeforeCall(pageToken, rowCount, projectGuids, userGuids, deletedSince, null);
        Type localVarReturnType = new TypeToken<List<DeletedProjectFeeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deleted project fees. (asynchronously)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project fees that have been deleted after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetDeletedProjectFeesAsync(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince, final ApiCallback<List<DeletedProjectFeeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetDeletedProjectFeesValidateBeforeCall(pageToken, rowCount, projectGuids, userGuids, deletedSince, _callback);
        Type localVarReturnType = new TypeToken<List<DeletedProjectFeeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetProjectFee
     * @param guid Id used to get the projectFee. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetProjectFeeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectfees/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetProjectFeeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectFeesGetProjectFee(Async)");
        }

        return projectFeesGetProjectFeeCall(guid, _callback);

    }

    /**
     * Get projectFee by ID.
     * 
     * @param guid Id used to get the projectFee. (required)
     * @return ProjectFeeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFeeOutputModel projectFeesGetProjectFee(String guid) throws ApiException {
        ApiResponse<ProjectFeeOutputModel> localVarResp = projectFeesGetProjectFeeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get projectFee by ID.
     * 
     * @param guid Id used to get the projectFee. (required)
     * @return ApiResponse&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFeeOutputModel> projectFeesGetProjectFeeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetProjectFeeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectFeeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projectFee by ID. (asynchronously)
     * 
     * @param guid Id used to get the projectFee. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetProjectFeeAsync(String guid, final ApiCallback<ProjectFeeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetProjectFeeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectFeeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetProjectFeesByToken
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param changedSince Optional: Get project fees that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetProjectFeesByTokenCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectfees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetProjectFeesByTokenValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return projectFeesGetProjectFeesByTokenCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the project fees.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param changedSince Optional: Get project fees that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFeeOutputModel> projectFeesGetProjectFeesByToken(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectFeeOutputModel>> localVarResp = projectFeesGetProjectFeesByTokenWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the project fees.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param changedSince Optional: Get project fees that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFeeOutputModel>> projectFeesGetProjectFeesByTokenWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetProjectFeesByTokenValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project fees. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param changedSince Optional: Get project fees that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFee </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetProjectFeesByTokenAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetProjectFeesByTokenValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetProjectFeesForProject
     * @param projectGuid ID of the project. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param includeRecurringRules Optional: Also fetches recurring rules along with project fees. Default is false. (optional, default to false)
     * @param isBillablePeriodInFuture Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetProjectFeesForProjectCall(String projectGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean includeRecurringRules, Boolean isBillablePeriodInFuture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectfees"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (isBilled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBilled", isBilled));
        }

        if (invoiceableDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceableDate", invoiceableDate));
        }

        if (includeRecurringRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRecurringRules", includeRecurringRules));
        }

        if (isBillablePeriodInFuture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillablePeriodInFuture", isBillablePeriodInFuture));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetProjectFeesForProjectValidateBeforeCall(String projectGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean includeRecurringRules, Boolean isBillablePeriodInFuture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectFeesGetProjectFeesForProject(Async)");
        }

        return projectFeesGetProjectFeesForProjectCall(projectGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, includeRecurringRules, isBillablePeriodInFuture, _callback);

    }

    /**
     * Get all the project fees for a project
     * 
     * @param projectGuid ID of the project. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param includeRecurringRules Optional: Also fetches recurring rules along with project fees. Default is false. (optional, default to false)
     * @param isBillablePeriodInFuture Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @return List&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFeeOutputModel> projectFeesGetProjectFeesForProject(String projectGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean includeRecurringRules, Boolean isBillablePeriodInFuture) throws ApiException {
        ApiResponse<List<ProjectFeeOutputModel>> localVarResp = projectFeesGetProjectFeesForProjectWithHttpInfo(projectGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, includeRecurringRules, isBillablePeriodInFuture);
        return localVarResp.getData();
    }

    /**
     * Get all the project fees for a project
     * 
     * @param projectGuid ID of the project. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param includeRecurringRules Optional: Also fetches recurring rules along with project fees. Default is false. (optional, default to false)
     * @param isBillablePeriodInFuture Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @return ApiResponse&lt;List&lt;ProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFeeOutputModel>> projectFeesGetProjectFeesForProjectWithHttpInfo(String projectGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean includeRecurringRules, Boolean isBillablePeriodInFuture) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetProjectFeesForProjectValidateBeforeCall(projectGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, includeRecurringRules, isBillablePeriodInFuture, null);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project fees for a project (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param includeRecurringRules Optional: Also fetches recurring rules along with project fees. Default is false. (optional, default to false)
     * @param isBillablePeriodInFuture Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetProjectFeesForProjectAsync(String projectGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean includeRecurringRules, Boolean isBillablePeriodInFuture, final ApiCallback<List<ProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetProjectFeesForProjectValidateBeforeCall(projectGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, includeRecurringRules, isBillablePeriodInFuture, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectFeesGetUserProjectFees
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param hasPhase Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Start date search criteria. Only get project fees that have event date from this date. (optional)
     * @param endDate End date search criteria. Only get project fees that have event date until this date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetUserProjectFeesCall(String userGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean hasPhase, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/projectfees"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (isBilled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBilled", isBilled));
        }

        if (invoiceableDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceableDate", invoiceableDate));
        }

        if (hasPhase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasPhase", hasPhase));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectFeesGetUserProjectFeesValidateBeforeCall(String userGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean hasPhase, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling projectFeesGetUserProjectFees(Async)");
        }

        return projectFeesGetUserProjectFeesCall(userGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, hasPhase, startDate, endDate, _callback);

    }

    /**
     * Get all the projectFees for a user
     * 
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param hasPhase Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Start date search criteria. Only get project fees that have event date from this date. (optional)
     * @param endDate End date search criteria. Only get project fees that have event date until this date. (optional)
     * @return List&lt;ProjectFeeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFeeOutputModel> projectFeesGetUserProjectFees(String userGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean hasPhase, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<ProjectFeeOutputModel>> localVarResp = projectFeesGetUserProjectFeesWithHttpInfo(userGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, hasPhase, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get all the projectFees for a user
     * 
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param hasPhase Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Start date search criteria. Only get project fees that have event date from this date. (optional)
     * @param endDate End date search criteria. Only get project fees that have event date until this date. (optional)
     * @return ApiResponse&lt;List&lt;ProjectFeeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFeeOutputModel>> projectFeesGetUserProjectFeesWithHttpInfo(String userGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean hasPhase, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = projectFeesGetUserProjectFeesValidateBeforeCall(userGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, hasPhase, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the projectFees for a user (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: Number of rows to fetch. (optional)
     * @param productType Optional: ProjectFee&#39;s product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting. (optional)
     * @param isBillable Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param hasPhase Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Start date search criteria. Only get project fees that have event date from this date. (optional)
     * @param endDate End date search criteria. Only get project fees that have event date until this date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFees </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectFeesGetUserProjectFeesAsync(String userGuid, String pageToken, Integer rowCount, ProductType productType, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, Boolean hasPhase, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<ProjectFeeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectFeesGetUserProjectFeesValidateBeforeCall(userGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, hasPhase, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFeeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectRecurringFeeRulesGetProjectRecurringFeeRule
     * @param guid Id used to get the ProjectRecurringFeeRule. (required)
     * @param includeInactive Indicates the rule should be returned even if it is not active. Default is false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRuleCall(String guid, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectrecurringfeerules/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRuleValidateBeforeCall(String guid, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectRecurringFeeRulesGetProjectRecurringFeeRule(Async)");
        }

        return projectRecurringFeeRulesGetProjectRecurringFeeRuleCall(guid, includeInactive, _callback);

    }

    /**
     * Get project&#39;s RecurringFeeRule by ID.
     * 
     * @param guid Id used to get the ProjectRecurringFeeRule. (required)
     * @param includeInactive Indicates the rule should be returned even if it is not active. Default is false. (optional, default to false)
     * @return ProjectRecurringFeeRuleOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRecurringFeeRuleOutputModel projectRecurringFeeRulesGetProjectRecurringFeeRule(String guid, Boolean includeInactive) throws ApiException {
        ApiResponse<ProjectRecurringFeeRuleOutputModel> localVarResp = projectRecurringFeeRulesGetProjectRecurringFeeRuleWithHttpInfo(guid, includeInactive);
        return localVarResp.getData();
    }

    /**
     * Get project&#39;s RecurringFeeRule by ID.
     * 
     * @param guid Id used to get the ProjectRecurringFeeRule. (required)
     * @param includeInactive Indicates the rule should be returned even if it is not active. Default is false. (optional, default to false)
     * @return ApiResponse&lt;ProjectRecurringFeeRuleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectRecurringFeeRuleOutputModel> projectRecurringFeeRulesGetProjectRecurringFeeRuleWithHttpInfo(String guid, Boolean includeInactive) throws ApiException {
        okhttp3.Call localVarCall = projectRecurringFeeRulesGetProjectRecurringFeeRuleValidateBeforeCall(guid, includeInactive, null);
        Type localVarReturnType = new TypeToken<ProjectRecurringFeeRuleOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project&#39;s RecurringFeeRule by ID. (asynchronously)
     * 
     * @param guid Id used to get the ProjectRecurringFeeRule. (required)
     * @param includeInactive Indicates the rule should be returned even if it is not active. Default is false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRuleAsync(String guid, Boolean includeInactive, final ApiCallback<ProjectRecurringFeeRuleOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectRecurringFeeRulesGetProjectRecurringFeeRuleValidateBeforeCall(guid, includeInactive, _callback);
        Type localVarReturnType = new TypeToken<ProjectRecurringFeeRuleOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectRecurringFeeRulesGetProjectRecurringFeeRules
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param changedSince Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRulesCall(Integer firstRow, Integer rowCount, ProductType productType, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectrecurringfeerules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRulesValidateBeforeCall(Integer firstRow, Integer rowCount, ProductType productType, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return projectRecurringFeeRulesGetProjectRecurringFeeRulesCall(firstRow, rowCount, productType, changedSince, _callback);

    }

    /**
     * Get the recurring fee rules.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param changedSince Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectRecurringFeeRuleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectRecurringFeeRuleOutputModel> projectRecurringFeeRulesGetProjectRecurringFeeRules(Integer firstRow, Integer rowCount, ProductType productType, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectRecurringFeeRuleOutputModel>> localVarResp = projectRecurringFeeRulesGetProjectRecurringFeeRulesWithHttpInfo(firstRow, rowCount, productType, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the recurring fee rules.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param changedSince Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectRecurringFeeRuleOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectRecurringFeeRuleOutputModel>> projectRecurringFeeRulesGetProjectRecurringFeeRulesWithHttpInfo(Integer firstRow, Integer rowCount, ProductType productType, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = projectRecurringFeeRulesGetProjectRecurringFeeRulesValidateBeforeCall(firstRow, rowCount, productType, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectRecurringFeeRuleOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the recurring fee rules. (asynchronously)
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param changedSince Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRulesAsync(Integer firstRow, Integer rowCount, ProductType productType, OffsetDateTime changedSince, final ApiCallback<List<ProjectRecurringFeeRuleOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectRecurringFeeRulesGetProjectRecurringFeeRulesValidateBeforeCall(firstRow, rowCount, productType, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectRecurringFeeRuleOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject
     * @param projectGuid ID of the project to get the recurring fee rules. (required)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param billableTimePeriod the time period for any uninvoiced recurring rules. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectCall(String projectGuid, ProductType productType, Integer firstRow, Integer rowCount, Boolean isBillablePeriodInFuture, BillablePeriod billableTimePeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectrecurringfeerules"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isBillablePeriodInFuture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillablePeriodInFuture", isBillablePeriodInFuture));
        }

        if (billableTimePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billableTimePeriod", billableTimePeriod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectValidateBeforeCall(String projectGuid, ProductType productType, Integer firstRow, Integer rowCount, Boolean isBillablePeriodInFuture, BillablePeriod billableTimePeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject(Async)");
        }

        return projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectCall(projectGuid, productType, firstRow, rowCount, isBillablePeriodInFuture, billableTimePeriod, _callback);

    }

    /**
     * Get all the Recurring Fee Rules for a project
     * 
     * @param projectGuid ID of the project to get the recurring fee rules. (required)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param billableTimePeriod the time period for any uninvoiced recurring rules. (optional)
     * @return List&lt;ProjectRecurringFeeRuleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectRecurringFeeRuleOutputModel> projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject(String projectGuid, ProductType productType, Integer firstRow, Integer rowCount, Boolean isBillablePeriodInFuture, BillablePeriod billableTimePeriod) throws ApiException {
        ApiResponse<List<ProjectRecurringFeeRuleOutputModel>> localVarResp = projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectWithHttpInfo(projectGuid, productType, firstRow, rowCount, isBillablePeriodInFuture, billableTimePeriod);
        return localVarResp.getData();
    }

    /**
     * Get all the Recurring Fee Rules for a project
     * 
     * @param projectGuid ID of the project to get the recurring fee rules. (required)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param billableTimePeriod the time period for any uninvoiced recurring rules. (optional)
     * @return ApiResponse&lt;List&lt;ProjectRecurringFeeRuleOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectRecurringFeeRuleOutputModel>> projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectWithHttpInfo(String projectGuid, ProductType productType, Integer firstRow, Integer rowCount, Boolean isBillablePeriodInFuture, BillablePeriod billableTimePeriod) throws ApiException {
        okhttp3.Call localVarCall = projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectValidateBeforeCall(projectGuid, productType, firstRow, rowCount, isBillablePeriodInFuture, billableTimePeriod, null);
        Type localVarReturnType = new TypeToken<List<ProjectRecurringFeeRuleOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Recurring Fee Rules for a project (asynchronously)
     * 
     * @param projectGuid ID of the project to get the recurring fee rules. (required)
     * @param productType projectRecurringFeeRule&#39;s product type. if given, it filters the projectRecurringFeeRules by the given type. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param billableTimePeriod the time period for any uninvoiced recurring rules. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project recurring fee rules </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectAsync(String projectGuid, ProductType productType, Integer firstRow, Integer rowCount, Boolean isBillablePeriodInFuture, BillablePeriod billableTimePeriod, final ApiCallback<List<ProjectRecurringFeeRuleOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectValidateBeforeCall(projectGuid, productType, firstRow, rowCount, isBillablePeriodInFuture, billableTimePeriod, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectRecurringFeeRuleOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
