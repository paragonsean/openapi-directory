/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MoneyInputModel;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectWorkHourPriceInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectWorkHourPriceInputModel {
  public static final String SERIALIZED_NAME_IS_BILLABLE = "isBillable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable = true;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputRequiredModel phase;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private SimpleInputModel project;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyInputModel unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleInputModel user;

  public static final String SERIALIZED_NAME_WORK_TYPE = "workType";
  @SerializedName(SERIALIZED_NAME_WORK_TYPE)
  private SimpleInputModel workType;

  public ProjectWorkHourPriceInputModel() {
  }

  public ProjectWorkHourPriceInputModel isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * Get isBillable
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public ProjectWorkHourPriceInputModel phase(SimpleInputRequiredModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public SimpleInputRequiredModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputRequiredModel phase) {
    this.phase = phase;
  }


  public ProjectWorkHourPriceInputModel project(SimpleInputModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public SimpleInputModel getProject() {
    return project;
  }

  public void setProject(SimpleInputModel project) {
    this.project = project;
  }


  public ProjectWorkHourPriceInputModel unitPrice(MoneyInputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nonnull
  public MoneyInputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyInputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProjectWorkHourPriceInputModel user(SimpleInputModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public SimpleInputModel getUser() {
    return user;
  }

  public void setUser(SimpleInputModel user) {
    this.user = user;
  }


  public ProjectWorkHourPriceInputModel workType(SimpleInputModel workType) {
    this.workType = workType;
    return this;
  }

  /**
   * Get workType
   * @return workType
   */
  @javax.annotation.Nullable
  public SimpleInputModel getWorkType() {
    return workType;
  }

  public void setWorkType(SimpleInputModel workType) {
    this.workType = workType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel = (ProjectWorkHourPriceInputModel) o;
    return Objects.equals(this.isBillable, projectWorkHourPriceInputModel.isBillable) &&
        Objects.equals(this.phase, projectWorkHourPriceInputModel.phase) &&
        Objects.equals(this.project, projectWorkHourPriceInputModel.project) &&
        Objects.equals(this.unitPrice, projectWorkHourPriceInputModel.unitPrice) &&
        Objects.equals(this.user, projectWorkHourPriceInputModel.user) &&
        Objects.equals(this.workType, projectWorkHourPriceInputModel.workType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isBillable, phase, project, unitPrice, user, workType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectWorkHourPriceInputModel {\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workType: ").append(toIndentedString(workType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isBillable");
    openapiFields.add("phase");
    openapiFields.add("project");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("workType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("unitPrice");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectWorkHourPriceInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectWorkHourPriceInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectWorkHourPriceInputModel is not found in the empty JSON string", ProjectWorkHourPriceInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectWorkHourPriceInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectWorkHourPriceInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectWorkHourPriceInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        SimpleInputRequiredModel.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the required field `project`
      SimpleInputModel.validateJsonElement(jsonObj.get("project"));
      // validate the required field `unitPrice`
      MoneyInputModel.validateJsonElement(jsonObj.get("unitPrice"));
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `workType`
      if (jsonObj.get("workType") != null && !jsonObj.get("workType").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("workType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectWorkHourPriceInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectWorkHourPriceInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectWorkHourPriceInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectWorkHourPriceInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectWorkHourPriceInputModel>() {
           @Override
           public void write(JsonWriter out, ProjectWorkHourPriceInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectWorkHourPriceInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectWorkHourPriceInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectWorkHourPriceInputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectWorkHourPriceInputModel
   */
  public static ProjectWorkHourPriceInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectWorkHourPriceInputModel.class);
  }

  /**
   * Convert an instance of ProjectWorkHourPriceInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

