/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BusinessUnitSubModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessUnitSubModel {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY_BUSINESS_UNIT_GUID = "companyBusinessUnitGuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_BUSINESS_UNIT_GUID)
  private String companyBusinessUnitGuid;

  public static final String SERIALIZED_NAME_COMPANY_COUNTRY_GUID = "companyCountryGuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_COUNTRY_GUID)
  private String companyCountryGuid;

  public static final String SERIALIZED_NAME_COMPANY_CURRENCY_GUID = "companyCurrencyGuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_CURRENCY_GUID)
  private String companyCurrencyGuid;

  public static final String SERIALIZED_NAME_COMPANY_GUID = "companyGuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_GUID)
  private String companyGuid;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public BusinessUnitSubModel() {
  }

  public BusinessUnitSubModel(
     String name
  ) {
    this();
    this.name = name;
  }

  public BusinessUnitSubModel code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public BusinessUnitSubModel companyBusinessUnitGuid(String companyBusinessUnitGuid) {
    this.companyBusinessUnitGuid = companyBusinessUnitGuid;
    return this;
  }

  /**
   * Get companyBusinessUnitGuid
   * @return companyBusinessUnitGuid
   */
  @javax.annotation.Nullable
  public String getCompanyBusinessUnitGuid() {
    return companyBusinessUnitGuid;
  }

  public void setCompanyBusinessUnitGuid(String companyBusinessUnitGuid) {
    this.companyBusinessUnitGuid = companyBusinessUnitGuid;
  }


  public BusinessUnitSubModel companyCountryGuid(String companyCountryGuid) {
    this.companyCountryGuid = companyCountryGuid;
    return this;
  }

  /**
   * Get companyCountryGuid
   * @return companyCountryGuid
   */
  @javax.annotation.Nullable
  public String getCompanyCountryGuid() {
    return companyCountryGuid;
  }

  public void setCompanyCountryGuid(String companyCountryGuid) {
    this.companyCountryGuid = companyCountryGuid;
  }


  public BusinessUnitSubModel companyCurrencyGuid(String companyCurrencyGuid) {
    this.companyCurrencyGuid = companyCurrencyGuid;
    return this;
  }

  /**
   * Get companyCurrencyGuid
   * @return companyCurrencyGuid
   */
  @javax.annotation.Nullable
  public String getCompanyCurrencyGuid() {
    return companyCurrencyGuid;
  }

  public void setCompanyCurrencyGuid(String companyCurrencyGuid) {
    this.companyCurrencyGuid = companyCurrencyGuid;
  }


  public BusinessUnitSubModel companyGuid(String companyGuid) {
    this.companyGuid = companyGuid;
    return this;
  }

  /**
   * Get companyGuid
   * @return companyGuid
   */
  @javax.annotation.Nullable
  public String getCompanyGuid() {
    return companyGuid;
  }

  public void setCompanyGuid(String companyGuid) {
    this.companyGuid = companyGuid;
  }


  public BusinessUnitSubModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public BusinessUnitSubModel guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nonnull
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessUnitSubModel businessUnitSubModel = (BusinessUnitSubModel) o;
    return Objects.equals(this.code, businessUnitSubModel.code) &&
        Objects.equals(this.companyBusinessUnitGuid, businessUnitSubModel.companyBusinessUnitGuid) &&
        Objects.equals(this.companyCountryGuid, businessUnitSubModel.companyCountryGuid) &&
        Objects.equals(this.companyCurrencyGuid, businessUnitSubModel.companyCurrencyGuid) &&
        Objects.equals(this.companyGuid, businessUnitSubModel.companyGuid) &&
        Objects.equals(this.companyName, businessUnitSubModel.companyName) &&
        Objects.equals(this.guid, businessUnitSubModel.guid) &&
        Objects.equals(this.name, businessUnitSubModel.name);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, companyBusinessUnitGuid, companyCountryGuid, companyCurrencyGuid, companyGuid, companyName, guid, name);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessUnitSubModel {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    companyBusinessUnitGuid: ").append(toIndentedString(companyBusinessUnitGuid)).append("\n");
    sb.append("    companyCountryGuid: ").append(toIndentedString(companyCountryGuid)).append("\n");
    sb.append("    companyCurrencyGuid: ").append(toIndentedString(companyCurrencyGuid)).append("\n");
    sb.append("    companyGuid: ").append(toIndentedString(companyGuid)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("companyBusinessUnitGuid");
    openapiFields.add("companyCountryGuid");
    openapiFields.add("companyCurrencyGuid");
    openapiFields.add("companyGuid");
    openapiFields.add("companyName");
    openapiFields.add("guid");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("guid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessUnitSubModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessUnitSubModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessUnitSubModel is not found in the empty JSON string", BusinessUnitSubModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessUnitSubModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessUnitSubModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BusinessUnitSubModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("companyBusinessUnitGuid") != null && !jsonObj.get("companyBusinessUnitGuid").isJsonNull()) && !jsonObj.get("companyBusinessUnitGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyBusinessUnitGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyBusinessUnitGuid").toString()));
      }
      if ((jsonObj.get("companyCountryGuid") != null && !jsonObj.get("companyCountryGuid").isJsonNull()) && !jsonObj.get("companyCountryGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyCountryGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyCountryGuid").toString()));
      }
      if ((jsonObj.get("companyCurrencyGuid") != null && !jsonObj.get("companyCurrencyGuid").isJsonNull()) && !jsonObj.get("companyCurrencyGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyCurrencyGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyCurrencyGuid").toString()));
      }
      if ((jsonObj.get("companyGuid") != null && !jsonObj.get("companyGuid").isJsonNull()) && !jsonObj.get("companyGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyGuid").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessUnitSubModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessUnitSubModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessUnitSubModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessUnitSubModel.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessUnitSubModel>() {
           @Override
           public void write(JsonWriter out, BusinessUnitSubModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessUnitSubModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessUnitSubModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessUnitSubModel
   * @throws IOException if the JSON string is invalid with respect to BusinessUnitSubModel
   */
  public static BusinessUnitSubModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessUnitSubModel.class);
  }

  /**
   * Convert an instance of BusinessUnitSubModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

