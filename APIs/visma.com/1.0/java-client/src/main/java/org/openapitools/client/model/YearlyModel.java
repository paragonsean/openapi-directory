/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DayOrdinal;
import org.openapitools.client.model.DayOrdinalOption;
import org.openapitools.client.model.Months;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * YearlyModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class YearlyModel {
  public static final String SERIALIZED_NAME_DAY_OF_MONTH = "dayOfMonth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH)
  private Integer dayOfMonth;

  public static final String SERIALIZED_NAME_DAY_ORDINAL = "dayOrdinal";
  @SerializedName(SERIALIZED_NAME_DAY_ORDINAL)
  private DayOrdinal dayOrdinal;

  public static final String SERIALIZED_NAME_DAY_ORDINAL_OPTION = "dayOrdinalOption";
  @SerializedName(SERIALIZED_NAME_DAY_ORDINAL_OPTION)
  private DayOrdinalOption dayOrdinalOption;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private Months month;

  public YearlyModel() {
  }

  public YearlyModel dayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

  /**
   * Get dayOfMonth
   * @return dayOfMonth
   */
  @javax.annotation.Nullable
  public Integer getDayOfMonth() {
    return dayOfMonth;
  }

  public void setDayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }


  public YearlyModel dayOrdinal(DayOrdinal dayOrdinal) {
    this.dayOrdinal = dayOrdinal;
    return this;
  }

  /**
   * Get dayOrdinal
   * @return dayOrdinal
   */
  @javax.annotation.Nullable
  public DayOrdinal getDayOrdinal() {
    return dayOrdinal;
  }

  public void setDayOrdinal(DayOrdinal dayOrdinal) {
    this.dayOrdinal = dayOrdinal;
  }


  public YearlyModel dayOrdinalOption(DayOrdinalOption dayOrdinalOption) {
    this.dayOrdinalOption = dayOrdinalOption;
    return this;
  }

  /**
   * Get dayOrdinalOption
   * @return dayOrdinalOption
   */
  @javax.annotation.Nullable
  public DayOrdinalOption getDayOrdinalOption() {
    return dayOrdinalOption;
  }

  public void setDayOrdinalOption(DayOrdinalOption dayOrdinalOption) {
    this.dayOrdinalOption = dayOrdinalOption;
  }


  public YearlyModel month(Months month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nullable
  public Months getMonth() {
    return month;
  }

  public void setMonth(Months month) {
    this.month = month;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    YearlyModel yearlyModel = (YearlyModel) o;
    return Objects.equals(this.dayOfMonth, yearlyModel.dayOfMonth) &&
        Objects.equals(this.dayOrdinal, yearlyModel.dayOrdinal) &&
        Objects.equals(this.dayOrdinalOption, yearlyModel.dayOrdinalOption) &&
        Objects.equals(this.month, yearlyModel.month);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfMonth, dayOrdinal, dayOrdinalOption, month);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class YearlyModel {\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    dayOrdinal: ").append(toIndentedString(dayOrdinal)).append("\n");
    sb.append("    dayOrdinalOption: ").append(toIndentedString(dayOrdinalOption)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfMonth");
    openapiFields.add("dayOrdinal");
    openapiFields.add("dayOrdinalOption");
    openapiFields.add("month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to YearlyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!YearlyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in YearlyModel is not found in the empty JSON string", YearlyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!YearlyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `YearlyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dayOrdinal`
      if (jsonObj.get("dayOrdinal") != null && !jsonObj.get("dayOrdinal").isJsonNull()) {
        DayOrdinal.validateJsonElement(jsonObj.get("dayOrdinal"));
      }
      // validate the optional field `dayOrdinalOption`
      if (jsonObj.get("dayOrdinalOption") != null && !jsonObj.get("dayOrdinalOption").isJsonNull()) {
        DayOrdinalOption.validateJsonElement(jsonObj.get("dayOrdinalOption"));
      }
      // validate the optional field `month`
      if (jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) {
        Months.validateJsonElement(jsonObj.get("month"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!YearlyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'YearlyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<YearlyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(YearlyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<YearlyModel>() {
           @Override
           public void write(JsonWriter out, YearlyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public YearlyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of YearlyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of YearlyModel
   * @throws IOException if the JSON string is invalid with respect to YearlyModel
   */
  public static YearlyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, YearlyModel.class);
  }

  /**
   * Convert an instance of YearlyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

