/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProposalWorkhourRowInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProposalWorkhourRowInputModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_SHOWN_ON_PROPOSAL = "isShownOnProposal";
  @SerializedName(SERIALIZED_NAME_IS_SHOWN_ON_PROPOSAL)
  private Boolean isShownOnProposal = true;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputModel phase;

  public static final String SERIALIZED_NAME_PROPOSAL = "proposal";
  @SerializedName(SERIALIZED_NAME_PROPOSAL)
  private SimpleInputRequiredModel proposal;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private SimpleInputModel subtotal;

  public static final String SERIALIZED_NAME_WORK_TYPE = "workType";
  @SerializedName(SERIALIZED_NAME_WORK_TYPE)
  private SimpleInputRequiredModel workType;

  public ProposalWorkhourRowInputModel() {
  }

  public ProposalWorkhourRowInputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProposalWorkhourRowInputModel isShownOnProposal(Boolean isShownOnProposal) {
    this.isShownOnProposal = isShownOnProposal;
    return this;
  }

  /**
   * Get isShownOnProposal
   * @return isShownOnProposal
   */
  @javax.annotation.Nullable
  public Boolean getIsShownOnProposal() {
    return isShownOnProposal;
  }

  public void setIsShownOnProposal(Boolean isShownOnProposal) {
    this.isShownOnProposal = isShownOnProposal;
  }


  public ProposalWorkhourRowInputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProposalWorkhourRowInputModel phase(SimpleInputModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public SimpleInputModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputModel phase) {
    this.phase = phase;
  }


  public ProposalWorkhourRowInputModel proposal(SimpleInputRequiredModel proposal) {
    this.proposal = proposal;
    return this;
  }

  /**
   * Get proposal
   * @return proposal
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getProposal() {
    return proposal;
  }

  public void setProposal(SimpleInputRequiredModel proposal) {
    this.proposal = proposal;
  }


  public ProposalWorkhourRowInputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProposalWorkhourRowInputModel sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public ProposalWorkhourRowInputModel subtotal(SimpleInputModel subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Get subtotal
   * @return subtotal
   */
  @javax.annotation.Nullable
  public SimpleInputModel getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(SimpleInputModel subtotal) {
    this.subtotal = subtotal;
  }


  public ProposalWorkhourRowInputModel workType(SimpleInputRequiredModel workType) {
    this.workType = workType;
    return this;
  }

  /**
   * Get workType
   * @return workType
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getWorkType() {
    return workType;
  }

  public void setWorkType(SimpleInputRequiredModel workType) {
    this.workType = workType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProposalWorkhourRowInputModel proposalWorkhourRowInputModel = (ProposalWorkhourRowInputModel) o;
    return Objects.equals(this.description, proposalWorkhourRowInputModel.description) &&
        Objects.equals(this.isShownOnProposal, proposalWorkhourRowInputModel.isShownOnProposal) &&
        Objects.equals(this.name, proposalWorkhourRowInputModel.name) &&
        Objects.equals(this.phase, proposalWorkhourRowInputModel.phase) &&
        Objects.equals(this.proposal, proposalWorkhourRowInputModel.proposal) &&
        Objects.equals(this.quantity, proposalWorkhourRowInputModel.quantity) &&
        Objects.equals(this.sortOrder, proposalWorkhourRowInputModel.sortOrder) &&
        Objects.equals(this.subtotal, proposalWorkhourRowInputModel.subtotal) &&
        Objects.equals(this.workType, proposalWorkhourRowInputModel.workType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isShownOnProposal, name, phase, proposal, quantity, sortOrder, subtotal, workType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProposalWorkhourRowInputModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isShownOnProposal: ").append(toIndentedString(isShownOnProposal)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    proposal: ").append(toIndentedString(proposal)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    workType: ").append(toIndentedString(workType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("isShownOnProposal");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("proposal");
    openapiFields.add("quantity");
    openapiFields.add("sortOrder");
    openapiFields.add("subtotal");
    openapiFields.add("workType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("proposal");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("workType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProposalWorkhourRowInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProposalWorkhourRowInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProposalWorkhourRowInputModel is not found in the empty JSON string", ProposalWorkhourRowInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProposalWorkhourRowInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProposalWorkhourRowInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProposalWorkhourRowInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the required field `proposal`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("proposal"));
      // validate the optional field `subtotal`
      if (jsonObj.get("subtotal") != null && !jsonObj.get("subtotal").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("subtotal"));
      }
      // validate the required field `workType`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("workType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProposalWorkhourRowInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProposalWorkhourRowInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProposalWorkhourRowInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProposalWorkhourRowInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProposalWorkhourRowInputModel>() {
           @Override
           public void write(JsonWriter out, ProposalWorkhourRowInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProposalWorkhourRowInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProposalWorkhourRowInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProposalWorkhourRowInputModel
   * @throws IOException if the JSON string is invalid with respect to ProposalWorkhourRowInputModel
   */
  public static ProposalWorkhourRowInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProposalWorkhourRowInputModel.class);
  }

  /**
   * Convert an instance of ProposalWorkhourRowInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

