/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModelBase;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProposalFeeRowOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProposalFeeRowOutputModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_IS_SHOWN_ON_PROPOSAL = "isShownOnProposal";
  @SerializedName(SERIALIZED_NAME_IS_SHOWN_ON_PROPOSAL)
  private Boolean isShownOnProposal;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ModelBase product;

  public static final String SERIALIZED_NAME_PROJECT_FEE = "projectFee";
  @SerializedName(SERIALIZED_NAME_PROJECT_FEE)
  private ModelBase projectFee;

  public static final String SERIALIZED_NAME_PROPOSAL = "proposal";
  @SerializedName(SERIALIZED_NAME_PROPOSAL)
  private ModelBase proposal;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private ModelBase subtotal;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyOutputModel unitCost;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyOutputModel unitPrice;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProposalFeeRowOutputModel() {
  }

  public ProposalFeeRowOutputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProposalFeeRowOutputModel guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public ProposalFeeRowOutputModel isShownOnProposal(Boolean isShownOnProposal) {
    this.isShownOnProposal = isShownOnProposal;
    return this;
  }

  /**
   * Get isShownOnProposal
   * @return isShownOnProposal
   */
  @javax.annotation.Nullable
  public Boolean getIsShownOnProposal() {
    return isShownOnProposal;
  }

  public void setIsShownOnProposal(Boolean isShownOnProposal) {
    this.isShownOnProposal = isShownOnProposal;
  }


  public ProposalFeeRowOutputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProposalFeeRowOutputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProposalFeeRowOutputModel product(ModelBase product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public ModelBase getProduct() {
    return product;
  }

  public void setProduct(ModelBase product) {
    this.product = product;
  }


  public ProposalFeeRowOutputModel projectFee(ModelBase projectFee) {
    this.projectFee = projectFee;
    return this;
  }

  /**
   * Get projectFee
   * @return projectFee
   */
  @javax.annotation.Nullable
  public ModelBase getProjectFee() {
    return projectFee;
  }

  public void setProjectFee(ModelBase projectFee) {
    this.projectFee = projectFee;
  }


  public ProposalFeeRowOutputModel proposal(ModelBase proposal) {
    this.proposal = proposal;
    return this;
  }

  /**
   * Get proposal
   * @return proposal
   */
  @javax.annotation.Nullable
  public ModelBase getProposal() {
    return proposal;
  }

  public void setProposal(ModelBase proposal) {
    this.proposal = proposal;
  }


  public ProposalFeeRowOutputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProposalFeeRowOutputModel sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public ProposalFeeRowOutputModel subtotal(ModelBase subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Get subtotal
   * @return subtotal
   */
  @javax.annotation.Nullable
  public ModelBase getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(ModelBase subtotal) {
    this.subtotal = subtotal;
  }


  public ProposalFeeRowOutputModel unitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
  }


  public ProposalFeeRowOutputModel unitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProposalFeeRowOutputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProposalFeeRowOutputModel proposalFeeRowOutputModel = (ProposalFeeRowOutputModel) o;
    return Objects.equals(this.description, proposalFeeRowOutputModel.description) &&
        Objects.equals(this.guid, proposalFeeRowOutputModel.guid) &&
        Objects.equals(this.isShownOnProposal, proposalFeeRowOutputModel.isShownOnProposal) &&
        Objects.equals(this.measurementUnit, proposalFeeRowOutputModel.measurementUnit) &&
        Objects.equals(this.name, proposalFeeRowOutputModel.name) &&
        Objects.equals(this.product, proposalFeeRowOutputModel.product) &&
        Objects.equals(this.projectFee, proposalFeeRowOutputModel.projectFee) &&
        Objects.equals(this.proposal, proposalFeeRowOutputModel.proposal) &&
        Objects.equals(this.quantity, proposalFeeRowOutputModel.quantity) &&
        Objects.equals(this.sortOrder, proposalFeeRowOutputModel.sortOrder) &&
        Objects.equals(this.subtotal, proposalFeeRowOutputModel.subtotal) &&
        Objects.equals(this.unitCost, proposalFeeRowOutputModel.unitCost) &&
        Objects.equals(this.unitPrice, proposalFeeRowOutputModel.unitPrice) &&
        Objects.equals(this.vatRate, proposalFeeRowOutputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, guid, isShownOnProposal, measurementUnit, name, product, projectFee, proposal, quantity, sortOrder, subtotal, unitCost, unitPrice, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProposalFeeRowOutputModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    isShownOnProposal: ").append(toIndentedString(isShownOnProposal)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    projectFee: ").append(toIndentedString(projectFee)).append("\n");
    sb.append("    proposal: ").append(toIndentedString(proposal)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("guid");
    openapiFields.add("isShownOnProposal");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("product");
    openapiFields.add("projectFee");
    openapiFields.add("proposal");
    openapiFields.add("quantity");
    openapiFields.add("sortOrder");
    openapiFields.add("subtotal");
    openapiFields.add("unitCost");
    openapiFields.add("unitPrice");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProposalFeeRowOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProposalFeeRowOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProposalFeeRowOutputModel is not found in the empty JSON string", ProposalFeeRowOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProposalFeeRowOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProposalFeeRowOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ModelBase.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `projectFee`
      if (jsonObj.get("projectFee") != null && !jsonObj.get("projectFee").isJsonNull()) {
        ModelBase.validateJsonElement(jsonObj.get("projectFee"));
      }
      // validate the optional field `proposal`
      if (jsonObj.get("proposal") != null && !jsonObj.get("proposal").isJsonNull()) {
        ModelBase.validateJsonElement(jsonObj.get("proposal"));
      }
      // validate the optional field `subtotal`
      if (jsonObj.get("subtotal") != null && !jsonObj.get("subtotal").isJsonNull()) {
        ModelBase.validateJsonElement(jsonObj.get("subtotal"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProposalFeeRowOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProposalFeeRowOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProposalFeeRowOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProposalFeeRowOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProposalFeeRowOutputModel>() {
           @Override
           public void write(JsonWriter out, ProposalFeeRowOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProposalFeeRowOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProposalFeeRowOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProposalFeeRowOutputModel
   * @throws IOException if the JSON string is invalid with respect to ProposalFeeRowOutputModel
   */
  public static ProposalFeeRowOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProposalFeeRowOutputModel.class);
  }

  /**
   * Convert an instance of ProposalFeeRowOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

