/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletedPhaseMemberOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OvertimePriceModel;
import org.openapitools.client.model.PhaseMemberOutputModel;
import org.openapitools.client.model.PhaseModelWithHierarchyInfo;
import org.openapitools.client.model.PhaseOutputModel;
import org.openapitools.client.model.ProductForProjectOutputModel;
import org.openapitools.client.model.ProductPriceOutputModel;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectBillingCustomerModel;
import org.openapitools.client.model.ProjectCustomValueModel;
import org.openapitools.client.model.ProjectForecastOutputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;
import org.openapitools.client.model.ProjectKeywordModel;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.ProjectOutputModel;
import org.openapitools.client.model.ProjectProductOutputModel;
import org.openapitools.client.model.ProjectSalesNoteOutputModel;
import org.openapitools.client.model.ProjectWorkHourPriceOutputModel;
import org.openapitools.client.model.ProjectWorkTypeModel;
import org.openapitools.client.model.ProposalFeeRowOutputModel;
import org.openapitools.client.model.ProposalOutputModel;
import org.openapitools.client.model.ProposalSettingsOutputModel;
import org.openapitools.client.model.ProposalSubtotalOutputModel;
import org.openapitools.client.model.ProposalWorkhourRowOutputModel;
import org.openapitools.client.model.SalesNoteOutputModel;
import org.openapitools.client.model.SalesStatusHistoryOutputModel;
import org.openapitools.client.model.TeamProductivityOutputModel;
import org.openapitools.client.model.TravelExpenseTypeOutputModel;
import org.openapitools.client.model.TravelPriceOutputModel;
import org.openapitools.client.model.WorkTypeOutputModel;
import org.openapitools.client.model.WorktypeForProjectOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keywordsGetProjectKeywords
     * @param projectGuid ID of the project for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetProjectKeywordsCall(String projectGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/keywords"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsGetProjectKeywordsValidateBeforeCall(String projectGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling keywordsGetProjectKeywords(Async)");
        }

        return keywordsGetProjectKeywordsCall(projectGuid, active, sortings, _callback);

    }

    /**
     * Get all the keywords for project.
     * 
     * @param projectGuid ID of the project for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;ProjectKeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectKeywordModel> keywordsGetProjectKeywords(String projectGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ProjectKeywordModel>> localVarResp = keywordsGetProjectKeywordsWithHttpInfo(projectGuid, active, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the keywords for project.
     * 
     * @param projectGuid ID of the project for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ProjectKeywordModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectKeywordModel>> keywordsGetProjectKeywordsWithHttpInfo(String projectGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = keywordsGetProjectKeywordsValidateBeforeCall(projectGuid, active, sortings, null);
        Type localVarReturnType = new TypeToken<List<ProjectKeywordModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the keywords for project. (asynchronously)
     * 
     * @param projectGuid ID of the project for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetProjectKeywordsAsync(String projectGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ProjectKeywordModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsGetProjectKeywordsValidateBeforeCall(projectGuid, active, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectKeywordModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimePricesGetOvertimePricesForProject
     * @param projectGuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimePricesGetOvertimePricesForProjectCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/overtimeprices"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimePricesGetOvertimePricesForProjectValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling overtimePricesGetOvertimePricesForProject(Async)");
        }

        return overtimePricesGetOvertimePricesForProjectCall(projectGuid, _callback);

    }

    /**
     * Get all the overtimePrices for a project.
     * 
     * @param projectGuid  (required)
     * @return List&lt;OvertimePriceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<OvertimePriceModel> overtimePricesGetOvertimePricesForProject(String projectGuid) throws ApiException {
        ApiResponse<List<OvertimePriceModel>> localVarResp = overtimePricesGetOvertimePricesForProjectWithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the overtimePrices for a project.
     * 
     * @param projectGuid  (required)
     * @return ApiResponse&lt;List&lt;OvertimePriceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OvertimePriceModel>> overtimePricesGetOvertimePricesForProjectWithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = overtimePricesGetOvertimePricesForProjectValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<OvertimePriceModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the overtimePrices for a project. (asynchronously)
     * 
     * @param projectGuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimePricesGetOvertimePricesForProjectAsync(String projectGuid, final ApiCallback<List<OvertimePriceModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimePricesGetOvertimePricesForProjectValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<OvertimePriceModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseMembersGetAllDeletedPhaseMembers
     * @param deletedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersGetAllDeletedPhaseMembersCall(OffsetDateTime deletedSince, String pageToken, Integer rowCount, Boolean isUserActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/deletedphasemembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deletedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletedSince", deletedSince));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isUserActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUserActive", isUserActive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseMembersGetAllDeletedPhaseMembersValidateBeforeCall(OffsetDateTime deletedSince, String pageToken, Integer rowCount, Boolean isUserActive, final ApiCallback _callback) throws ApiException {
        return phaseMembersGetAllDeletedPhaseMembersCall(deletedSince, pageToken, rowCount, isUserActive, _callback);

    }

    /**
     * Get all deleted phase members
     * Use root phase to get project members.
     * @param deletedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @return List&lt;DeletedPhaseMemberOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<DeletedPhaseMemberOutputModel> phaseMembersGetAllDeletedPhaseMembers(OffsetDateTime deletedSince, String pageToken, Integer rowCount, Boolean isUserActive) throws ApiException {
        ApiResponse<List<DeletedPhaseMemberOutputModel>> localVarResp = phaseMembersGetAllDeletedPhaseMembersWithHttpInfo(deletedSince, pageToken, rowCount, isUserActive);
        return localVarResp.getData();
    }

    /**
     * Get all deleted phase members
     * Use root phase to get project members.
     * @param deletedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @return ApiResponse&lt;List&lt;DeletedPhaseMemberOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeletedPhaseMemberOutputModel>> phaseMembersGetAllDeletedPhaseMembersWithHttpInfo(OffsetDateTime deletedSince, String pageToken, Integer rowCount, Boolean isUserActive) throws ApiException {
        okhttp3.Call localVarCall = phaseMembersGetAllDeletedPhaseMembersValidateBeforeCall(deletedSince, pageToken, rowCount, isUserActive, null);
        Type localVarReturnType = new TypeToken<List<DeletedPhaseMemberOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all deleted phase members (asynchronously)
     * Use root phase to get project members.
     * @param deletedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersGetAllDeletedPhaseMembersAsync(OffsetDateTime deletedSince, String pageToken, Integer rowCount, Boolean isUserActive, final ApiCallback<List<DeletedPhaseMemberOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseMembersGetAllDeletedPhaseMembersValidateBeforeCall(deletedSince, pageToken, rowCount, isUserActive, _callback);
        Type localVarReturnType = new TypeToken<List<DeletedPhaseMemberOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseMembersGetAllPhaseMembers
     * @param changedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersGetAllPhaseMembersCall(OffsetDateTime changedSince, String pageToken, Integer rowCount, Boolean isUserActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phasemembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isUserActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUserActive", isUserActive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseMembersGetAllPhaseMembersValidateBeforeCall(OffsetDateTime changedSince, String pageToken, Integer rowCount, Boolean isUserActive, final ApiCallback _callback) throws ApiException {
        return phaseMembersGetAllPhaseMembersCall(changedSince, pageToken, rowCount, isUserActive, _callback);

    }

    /**
     * Get all active phase members
     * Use root phase to get project members.
     * @param changedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @return List&lt;PhaseMemberOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseMemberOutputModel> phaseMembersGetAllPhaseMembers(OffsetDateTime changedSince, String pageToken, Integer rowCount, Boolean isUserActive) throws ApiException {
        ApiResponse<List<PhaseMemberOutputModel>> localVarResp = phaseMembersGetAllPhaseMembersWithHttpInfo(changedSince, pageToken, rowCount, isUserActive);
        return localVarResp.getData();
    }

    /**
     * Get all active phase members
     * Use root phase to get project members.
     * @param changedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @return ApiResponse&lt;List&lt;PhaseMemberOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseMemberOutputModel>> phaseMembersGetAllPhaseMembersWithHttpInfo(OffsetDateTime changedSince, String pageToken, Integer rowCount, Boolean isUserActive) throws ApiException {
        okhttp3.Call localVarCall = phaseMembersGetAllPhaseMembersValidateBeforeCall(changedSince, pageToken, rowCount, isUserActive, null);
        Type localVarReturnType = new TypeToken<List<PhaseMemberOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all active phase members (asynchronously)
     * Use root phase to get project members.
     * @param changedSince Optional: Get phase members that have been added or changed after this date time (greater or equal). (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersGetAllPhaseMembersAsync(OffsetDateTime changedSince, String pageToken, Integer rowCount, Boolean isUserActive, final ApiCallback<List<PhaseMemberOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseMembersGetAllPhaseMembersValidateBeforeCall(changedSince, pageToken, rowCount, isUserActive, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseMemberOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseMembersGetPhaseMembers
     * @param phaseGuid GUID of the phase. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive Optional: Is the member active on the phase. Filters only root phase members. Default nothing &#x3D; all. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersGetPhaseMembersCall(String phaseGuid, String pageToken, Integer rowCount, Boolean isActive, Boolean isUserActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phases/{phaseGuid}/phasemembers"
            .replace("{" + "phaseGuid" + "}", localVarApiClient.escapeString(phaseGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (isUserActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUserActive", isUserActive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseMembersGetPhaseMembersValidateBeforeCall(String phaseGuid, String pageToken, Integer rowCount, Boolean isActive, Boolean isUserActive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phaseGuid' is set
        if (phaseGuid == null) {
            throw new ApiException("Missing the required parameter 'phaseGuid' when calling phaseMembersGetPhaseMembers(Async)");
        }

        return phaseMembersGetPhaseMembersCall(phaseGuid, pageToken, rowCount, isActive, isUserActive, _callback);

    }

    /**
     * Get phase members
     * Use root phase to get project members.
     * @param phaseGuid GUID of the phase. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive Optional: Is the member active on the phase. Filters only root phase members. Default nothing &#x3D; all. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @return List&lt;PhaseMemberOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseMemberOutputModel> phaseMembersGetPhaseMembers(String phaseGuid, String pageToken, Integer rowCount, Boolean isActive, Boolean isUserActive) throws ApiException {
        ApiResponse<List<PhaseMemberOutputModel>> localVarResp = phaseMembersGetPhaseMembersWithHttpInfo(phaseGuid, pageToken, rowCount, isActive, isUserActive);
        return localVarResp.getData();
    }

    /**
     * Get phase members
     * Use root phase to get project members.
     * @param phaseGuid GUID of the phase. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive Optional: Is the member active on the phase. Filters only root phase members. Default nothing &#x3D; all. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @return ApiResponse&lt;List&lt;PhaseMemberOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseMemberOutputModel>> phaseMembersGetPhaseMembersWithHttpInfo(String phaseGuid, String pageToken, Integer rowCount, Boolean isActive, Boolean isUserActive) throws ApiException {
        okhttp3.Call localVarCall = phaseMembersGetPhaseMembersValidateBeforeCall(phaseGuid, pageToken, rowCount, isActive, isUserActive, null);
        Type localVarReturnType = new TypeToken<List<PhaseMemberOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get phase members (asynchronously)
     * Use root phase to get project members.
     * @param phaseGuid GUID of the phase. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive Optional: Is the member active on the phase. Filters only root phase members. Default nothing &#x3D; all. (optional)
     * @param isUserActive Optional: Is the user active. Default nothing &#x3D; all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase members </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseMembersGetPhaseMembersAsync(String phaseGuid, String pageToken, Integer rowCount, Boolean isActive, Boolean isUserActive, final ApiCallback<List<PhaseMemberOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseMembersGetPhaseMembersValidateBeforeCall(phaseGuid, pageToken, rowCount, isActive, isUserActive, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseMemberOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phasesGetPhase
     * @param guid Id used to get the phase. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetPhaseCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phases/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phasesGetPhaseValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling phasesGetPhase(Async)");
        }

        return phasesGetPhaseCall(guid, _callback);

    }

    /**
     * Get phase by ID
     * 
     * @param guid Id used to get the phase. (required)
     * @return PhaseOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PhaseOutputModel phasesGetPhase(String guid) throws ApiException {
        ApiResponse<PhaseOutputModel> localVarResp = phasesGetPhaseWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get phase by ID
     * 
     * @param guid Id used to get the phase. (required)
     * @return ApiResponse&lt;PhaseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhaseOutputModel> phasesGetPhaseWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = phasesGetPhaseValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<PhaseOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get phase by ID (asynchronously)
     * 
     * @param guid Id used to get the phase. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetPhaseAsync(String guid, final ApiCallback<PhaseOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = phasesGetPhaseValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<PhaseOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phasesGetPhases
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get phases that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the phase. (optional, default to )
     * @param projectGuids Optional: List of project ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetPhasesCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, String code, List<String> projectGuids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phasesGetPhasesValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, String code, List<String> projectGuids, final ApiCallback _callback) throws ApiException {
        return phasesGetPhasesCall(pageToken, rowCount, changedSince, code, projectGuids, _callback);

    }

    /**
     * Get the phases.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get phases that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the phase. (optional, default to )
     * @param projectGuids Optional: List of project ids. (optional)
     * @return List&lt;PhaseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseOutputModel> phasesGetPhases(String pageToken, Integer rowCount, OffsetDateTime changedSince, String code, List<String> projectGuids) throws ApiException {
        ApiResponse<List<PhaseOutputModel>> localVarResp = phasesGetPhasesWithHttpInfo(pageToken, rowCount, changedSince, code, projectGuids);
        return localVarResp.getData();
    }

    /**
     * Get the phases.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get phases that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the phase. (optional, default to )
     * @param projectGuids Optional: List of project ids. (optional)
     * @return ApiResponse&lt;List&lt;PhaseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseOutputModel>> phasesGetPhasesWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince, String code, List<String> projectGuids) throws ApiException {
        okhttp3.Call localVarCall = phasesGetPhasesValidateBeforeCall(pageToken, rowCount, changedSince, code, projectGuids, null);
        Type localVarReturnType = new TypeToken<List<PhaseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the phases. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get phases that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the phase. (optional, default to )
     * @param projectGuids Optional: List of project ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetPhasesAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, String code, List<String> projectGuids, final ApiCallback<List<PhaseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phasesGetPhasesValidateBeforeCall(pageToken, rowCount, changedSince, code, projectGuids, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phasesGetProjectPhases
     * @param guid Id of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phases for the project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetProjectPhasesCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{guid}/phaseswithhierarchy"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phasesGetProjectPhasesValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling phasesGetProjectPhases(Async)");
        }

        return phasesGetProjectPhasesCall(guid, _callback);

    }

    /**
     * Get project&#39;s phases as flat list
     * 
     * @param guid Id of the project. (required)
     * @return List&lt;PhaseModelWithHierarchyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phases for the project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseModelWithHierarchyInfo> phasesGetProjectPhases(String guid) throws ApiException {
        ApiResponse<List<PhaseModelWithHierarchyInfo>> localVarResp = phasesGetProjectPhasesWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project&#39;s phases as flat list
     * 
     * @param guid Id of the project. (required)
     * @return ApiResponse&lt;List&lt;PhaseModelWithHierarchyInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phases for the project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseModelWithHierarchyInfo>> phasesGetProjectPhasesWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = phasesGetProjectPhasesValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<List<PhaseModelWithHierarchyInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project&#39;s phases as flat list (asynchronously)
     * 
     * @param guid Id of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phases for the project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetProjectPhasesAsync(String guid, final ApiCallback<List<PhaseModelWithHierarchyInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phasesGetProjectPhasesValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseModelWithHierarchyInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phasesGetRootPhases
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param customerOwnerGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param openProjects  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetRootPhasesCall(String pageToken, Integer rowCount, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, List<String> customerOwnerGuids, List<String> salesStatusTypeGuids, Boolean openProjects, List<String> projectMemberUserGuids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rootphaseswithhierarchy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (customerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerGuids", customerGuids));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (projectKeywordGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectKeywordGuids", projectKeywordGuids));
        }

        if (projectStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectStatusTypeGuids", projectStatusTypeGuids));
        }

        if (salesPersonGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesPersonGuids", salesPersonGuids));
        }

        if (projectOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectOwnerGuids", projectOwnerGuids));
        }

        if (businessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "businessUnitGuids", businessUnitGuids));
        }

        if (customerOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerOwnerGuids", customerOwnerGuids));
        }

        if (salesStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesStatusTypeGuids", salesStatusTypeGuids));
        }

        if (openProjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("openProjects", openProjects));
        }

        if (projectMemberUserGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectMemberUserGuids", projectMemberUserGuids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phasesGetRootPhasesValidateBeforeCall(String pageToken, Integer rowCount, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, List<String> customerOwnerGuids, List<String> salesStatusTypeGuids, Boolean openProjects, List<String> projectMemberUserGuids, final ApiCallback _callback) throws ApiException {
        return phasesGetRootPhasesCall(pageToken, rowCount, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, customerOwnerGuids, salesStatusTypeGuids, openProjects, projectMemberUserGuids, _callback);

    }

    /**
     * Get a list of root phases with information about hierarchy.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param customerOwnerGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param openProjects  (optional)
     * @param projectMemberUserGuids  (optional)
     * @return List&lt;PhaseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseOutputModel> phasesGetRootPhases(String pageToken, Integer rowCount, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, List<String> customerOwnerGuids, List<String> salesStatusTypeGuids, Boolean openProjects, List<String> projectMemberUserGuids) throws ApiException {
        ApiResponse<List<PhaseOutputModel>> localVarResp = phasesGetRootPhasesWithHttpInfo(pageToken, rowCount, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, customerOwnerGuids, salesStatusTypeGuids, openProjects, projectMemberUserGuids);
        return localVarResp.getData();
    }

    /**
     * Get a list of root phases with information about hierarchy.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param customerOwnerGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param openProjects  (optional)
     * @param projectMemberUserGuids  (optional)
     * @return ApiResponse&lt;List&lt;PhaseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseOutputModel>> phasesGetRootPhasesWithHttpInfo(String pageToken, Integer rowCount, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, List<String> customerOwnerGuids, List<String> salesStatusTypeGuids, Boolean openProjects, List<String> projectMemberUserGuids) throws ApiException {
        okhttp3.Call localVarCall = phasesGetRootPhasesValidateBeforeCall(pageToken, rowCount, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, customerOwnerGuids, salesStatusTypeGuids, openProjects, projectMemberUserGuids, null);
        Type localVarReturnType = new TypeToken<List<PhaseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of root phases with information about hierarchy. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param customerOwnerGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param openProjects  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phasesGetRootPhasesAsync(String pageToken, Integer rowCount, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, List<String> customerOwnerGuids, List<String> salesStatusTypeGuids, Boolean openProjects, List<String> projectMemberUserGuids, final ApiCallback<List<PhaseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phasesGetRootPhasesValidateBeforeCall(pageToken, rowCount, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, customerOwnerGuids, salesStatusTypeGuids, openProjects, projectMemberUserGuids, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPricesGetProductPricesForProject
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPricesGetProductPricesForProjectCall(String projectGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean isAvailable, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/productprices"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPricelistOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPricelistOnly", fromPricelistOnly));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (isAvailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAvailable", isAvailable));
        }

        if (productCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productCode", productCode));
        }

        if (productGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productGuids", productGuids));
        }

        if (isVolumePriced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVolumePriced", isVolumePriced));
        }

        if (productCategoryGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productCategoryGuids", productCategoryGuids));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productTypes", productTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPricesGetProductPricesForProjectValidateBeforeCall(String projectGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean isAvailable, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling productPricesGetProductPricesForProject(Async)");
        }

        return productPricesGetProductPricesForProjectCall(projectGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, isAvailable, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes, _callback);

    }

    /**
     * Get all the productPrices for a project.
     * 
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @return List&lt;ProductPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductPriceOutputModel> productPricesGetProductPricesForProject(String projectGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean isAvailable, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes) throws ApiException {
        ApiResponse<List<ProductPriceOutputModel>> localVarResp = productPricesGetProductPricesForProjectWithHttpInfo(projectGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, isAvailable, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes);
        return localVarResp.getData();
    }

    /**
     * Get all the productPrices for a project.
     * 
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @return ApiResponse&lt;List&lt;ProductPriceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductPriceOutputModel>> productPricesGetProductPricesForProjectWithHttpInfo(String projectGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean isAvailable, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes) throws ApiException {
        okhttp3.Call localVarCall = productPricesGetProductPricesForProjectValidateBeforeCall(projectGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, isAvailable, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes, null);
        Type localVarReturnType = new TypeToken<List<ProductPriceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the productPrices for a project. (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPricesGetProductPricesForProjectAsync(String projectGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean isAvailable, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes, final ApiCallback<List<ProductPriceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPricesGetProductPricesForProjectValidateBeforeCall(projectGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, isAvailable, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes, _callback);
        Type localVarReturnType = new TypeToken<List<ProductPriceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGetSearchedProducts
     * @param projectGuid Id of the project (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type (optional)
     * @param includeProductsFromRegistry Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetSearchedProductsCall(String projectGuid, Integer rowCount, String pageToken, ProductType type, Boolean includeProductsFromRegistry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/productsforproject"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (includeProductsFromRegistry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeProductsFromRegistry", includeProductsFromRegistry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetSearchedProductsValidateBeforeCall(String projectGuid, Integer rowCount, String pageToken, ProductType type, Boolean includeProductsFromRegistry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling productsGetSearchedProducts(Async)");
        }

        return productsGetSearchedProductsCall(projectGuid, rowCount, pageToken, type, includeProductsFromRegistry, _callback);

    }

    /**
     * Gets available products for the given project where price information comes from projects price list
     * 
     * @param projectGuid Id of the project (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type (optional)
     * @param includeProductsFromRegistry Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false. (optional, default to false)
     * @return List&lt;ProductForProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductForProjectOutputModel> productsGetSearchedProducts(String projectGuid, Integer rowCount, String pageToken, ProductType type, Boolean includeProductsFromRegistry) throws ApiException {
        ApiResponse<List<ProductForProjectOutputModel>> localVarResp = productsGetSearchedProductsWithHttpInfo(projectGuid, rowCount, pageToken, type, includeProductsFromRegistry);
        return localVarResp.getData();
    }

    /**
     * Gets available products for the given project where price information comes from projects price list
     * 
     * @param projectGuid Id of the project (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type (optional)
     * @param includeProductsFromRegistry Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false. (optional, default to false)
     * @return ApiResponse&lt;List&lt;ProductForProjectOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductForProjectOutputModel>> productsGetSearchedProductsWithHttpInfo(String projectGuid, Integer rowCount, String pageToken, ProductType type, Boolean includeProductsFromRegistry) throws ApiException {
        okhttp3.Call localVarCall = productsGetSearchedProductsValidateBeforeCall(projectGuid, rowCount, pageToken, type, includeProductsFromRegistry, null);
        Type localVarReturnType = new TypeToken<List<ProductForProjectOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets available products for the given project where price information comes from projects price list (asynchronously)
     * 
     * @param projectGuid Id of the project (required)
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type (optional)
     * @param includeProductsFromRegistry Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetSearchedProductsAsync(String projectGuid, Integer rowCount, String pageToken, ProductType type, Boolean includeProductsFromRegistry, final ApiCallback<List<ProductForProjectOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetSearchedProductsValidateBeforeCall(projectGuid, rowCount, pageToken, type, includeProductsFromRegistry, _callback);
        Type localVarReturnType = new TypeToken<List<ProductForProjectOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectBillingCustomersGetWorkHourPricesForProject
     * @param projectGuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project&#39;s billing customers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersGetWorkHourPricesForProjectCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectbillingcustomers"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectBillingCustomersGetWorkHourPricesForProjectValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectBillingCustomersGetWorkHourPricesForProject(Async)");
        }

        return projectBillingCustomersGetWorkHourPricesForProjectCall(projectGuid, _callback);

    }

    /**
     * Get all the billing customers for a project
     * 
     * @param projectGuid  (required)
     * @return List&lt;ProjectBillingCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project&#39;s billing customers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectBillingCustomerModel> projectBillingCustomersGetWorkHourPricesForProject(String projectGuid) throws ApiException {
        ApiResponse<List<ProjectBillingCustomerModel>> localVarResp = projectBillingCustomersGetWorkHourPricesForProjectWithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the billing customers for a project
     * 
     * @param projectGuid  (required)
     * @return ApiResponse&lt;List&lt;ProjectBillingCustomerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project&#39;s billing customers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectBillingCustomerModel>> projectBillingCustomersGetWorkHourPricesForProjectWithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = projectBillingCustomersGetWorkHourPricesForProjectValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<ProjectBillingCustomerModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the billing customers for a project (asynchronously)
     * 
     * @param projectGuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project&#39;s billing customers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersGetWorkHourPricesForProjectAsync(String projectGuid, final ApiCallback<List<ProjectBillingCustomerModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectBillingCustomersGetWorkHourPricesForProjectValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectBillingCustomerModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomValuesGetProjectCustomValue
     * @param guid Id used to get the project custom value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesGetProjectCustomValueCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/customvalues/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomValuesGetProjectCustomValueValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectCustomValuesGetProjectCustomValue(Async)");
        }

        return projectCustomValuesGetProjectCustomValueCall(guid, _callback);

    }

    /**
     * Get project custom value by ID.
     * 
     * @param guid Id used to get the project custom value. (required)
     * @return ProjectCustomValueModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectCustomValueModel projectCustomValuesGetProjectCustomValue(String guid) throws ApiException {
        ApiResponse<ProjectCustomValueModel> localVarResp = projectCustomValuesGetProjectCustomValueWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project custom value by ID.
     * 
     * @param guid Id used to get the project custom value. (required)
     * @return ApiResponse&lt;ProjectCustomValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectCustomValueModel> projectCustomValuesGetProjectCustomValueWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectCustomValuesGetProjectCustomValueValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectCustomValueModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project custom value by ID. (asynchronously)
     * 
     * @param guid Id used to get the project custom value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesGetProjectCustomValueAsync(String guid, final ApiCallback<ProjectCustomValueModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomValuesGetProjectCustomValueValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectCustomValueModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomValuesGetProjectCustomValues
     * @param projectGuid ID of the project. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive project custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesGetProjectCustomValuesCall(String projectGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/customvalues"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (target != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target", target));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomValuesGetProjectCustomValuesValidateBeforeCall(String projectGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectCustomValuesGetProjectCustomValues(Async)");
        }

        return projectCustomValuesGetProjectCustomValuesCall(projectGuid, firstRow, rowCount, active, target, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the project custom values.
     * 
     * @param projectGuid ID of the project. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive project custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;ProjectCustomValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectCustomValueModel> projectCustomValuesGetProjectCustomValues(String projectGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ProjectCustomValueModel>> localVarResp = projectCustomValuesGetProjectCustomValuesWithHttpInfo(projectGuid, firstRow, rowCount, active, target, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the project custom values.
     * 
     * @param projectGuid ID of the project. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive project custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ProjectCustomValueModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectCustomValueModel>> projectCustomValuesGetProjectCustomValuesWithHttpInfo(String projectGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = projectCustomValuesGetProjectCustomValuesValidateBeforeCall(projectGuid, firstRow, rowCount, active, target, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ProjectCustomValueModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project custom values. (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive project custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomValuesGetProjectCustomValuesAsync(String projectGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ProjectCustomValueModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomValuesGetProjectCustomValuesValidateBeforeCall(projectGuid, firstRow, rowCount, active, target, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectCustomValueModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectForecastsGetForecast
     * @param guid GUID used to get the project forecast. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsGetForecastCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectforecasts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectForecastsGetForecastValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectForecastsGetForecast(Async)");
        }

        return projectForecastsGetForecastCall(guid, _callback);

    }

    /**
     * Get project forecast by ID
     * 
     * @param guid GUID used to get the project forecast. (required)
     * @return ProjectForecastOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectForecastOutputModel projectForecastsGetForecast(String guid) throws ApiException {
        ApiResponse<ProjectForecastOutputModel> localVarResp = projectForecastsGetForecastWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project forecast by ID
     * 
     * @param guid GUID used to get the project forecast. (required)
     * @return ApiResponse&lt;ProjectForecastOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectForecastOutputModel> projectForecastsGetForecastWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectForecastsGetForecastValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectForecastOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project forecast by ID (asynchronously)
     * 
     * @param guid GUID used to get the project forecast. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project forecast </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsGetForecastAsync(String guid, final ApiCallback<ProjectForecastOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectForecastsGetForecastValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectForecastOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectForecastsGetForecasts
     * @param projectGuid project for the forecasts (required)
     * @param startDate Start date of the date range for the forecasts (optional)
     * @param endDate End date of the date range for the forecasts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project forecasts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsGetForecastsCall(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectforecasts"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectForecastsGetForecastsValidateBeforeCall(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectForecastsGetForecasts(Async)");
        }

        return projectForecastsGetForecastsCall(projectGuid, startDate, endDate, _callback);

    }

    /**
     * Get the project forecasts
     * 
     * @param projectGuid project for the forecasts (required)
     * @param startDate Start date of the date range for the forecasts (optional)
     * @param endDate End date of the date range for the forecasts (optional)
     * @return List&lt;ProjectForecastOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project forecasts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectForecastOutputModel> projectForecastsGetForecasts(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<ProjectForecastOutputModel>> localVarResp = projectForecastsGetForecastsWithHttpInfo(projectGuid, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get the project forecasts
     * 
     * @param projectGuid project for the forecasts (required)
     * @param startDate Start date of the date range for the forecasts (optional)
     * @param endDate End date of the date range for the forecasts (optional)
     * @return ApiResponse&lt;List&lt;ProjectForecastOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project forecasts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectForecastOutputModel>> projectForecastsGetForecastsWithHttpInfo(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = projectForecastsGetForecastsValidateBeforeCall(projectGuid, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<ProjectForecastOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project forecasts (asynchronously)
     * 
     * @param projectGuid project for the forecasts (required)
     * @param startDate Start date of the date range for the forecasts (optional)
     * @param endDate End date of the date range for the forecasts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project forecasts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectForecastsGetForecastsAsync(String projectGuid, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<ProjectForecastOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectForecastsGetForecastsValidateBeforeCall(projectGuid, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectForecastOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsGetProjectInvoiceSetting_0
     * @param guid ID of the project invoice settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSetting_0Call(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectinvoicesettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSetting_0ValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectInvoiceSettingsGetProjectInvoiceSetting_0(Async)");
        }

        return projectInvoiceSettingsGetProjectInvoiceSetting_0Call(guid, _callback);

    }

    /**
     * Get project invoice settings by ID.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @return ProjectInvoiceSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectInvoiceSettingsOutputModel projectInvoiceSettingsGetProjectInvoiceSetting_0(String guid) throws ApiException {
        ApiResponse<ProjectInvoiceSettingsOutputModel> localVarResp = projectInvoiceSettingsGetProjectInvoiceSetting_0WithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project invoice settings by ID.
     * 
     * @param guid ID of the project invoice settings. (required)
     * @return ApiResponse&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsGetProjectInvoiceSetting_0WithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSetting_0ValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project invoice settings by ID. (asynchronously)
     * 
     * @param guid ID of the project invoice settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSetting_0Async(String guid, final ApiCallback<ProjectInvoiceSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSetting_0ValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectInvoiceSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectInvoiceSettingsGetProjectInvoiceSettings_0
     * @param projectGuid ID of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettings_0Call(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectinvoicesettings"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettings_0ValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectInvoiceSettingsGetProjectInvoiceSettings_0(Async)");
        }

        return projectInvoiceSettingsGetProjectInvoiceSettings_0Call(projectGuid, _callback);

    }

    /**
     * Get project invoice settings by project ID.
     * 
     * @param projectGuid ID of the project. (required)
     * @return List&lt;ProjectInvoiceSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectInvoiceSettingsOutputModel> projectInvoiceSettingsGetProjectInvoiceSettings_0(String projectGuid) throws ApiException {
        ApiResponse<List<ProjectInvoiceSettingsOutputModel>> localVarResp = projectInvoiceSettingsGetProjectInvoiceSettings_0WithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get project invoice settings by project ID.
     * 
     * @param projectGuid ID of the project. (required)
     * @return ApiResponse&lt;List&lt;ProjectInvoiceSettingsOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectInvoiceSettingsOutputModel>> projectInvoiceSettingsGetProjectInvoiceSettings_0WithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSettings_0ValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project invoice settings by project ID. (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project invoice settings. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectInvoiceSettingsGetProjectInvoiceSettings_0Async(String projectGuid, final ApiCallback<List<ProjectInvoiceSettingsOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectInvoiceSettingsGetProjectInvoiceSettings_0ValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectInvoiceSettingsOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject
     * @param projectGuid Guid of the project. (required)
     * @param userGuid Optional: Guid of the user. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectCall(String projectGuid, String userGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectmembercostexceptions"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userGuid", userGuid));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectValidateBeforeCall(String projectGuid, String userGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject(Async)");
        }

        return projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectCall(projectGuid, userGuid, firstRow, rowCount, _callback);

    }

    /**
     * Get all cost exceptions of project members for a project.
     * 
     * @param projectGuid Guid of the project. (required)
     * @param userGuid Optional: Guid of the user. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;ProjectMemberCostExceptionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectMemberCostExceptionOutputModel> projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject(String projectGuid, String userGuid, Integer firstRow, Integer rowCount) throws ApiException {
        ApiResponse<List<ProjectMemberCostExceptionOutputModel>> localVarResp = projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectWithHttpInfo(projectGuid, userGuid, firstRow, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all cost exceptions of project members for a project.
     * 
     * @param projectGuid Guid of the project. (required)
     * @param userGuid Optional: Guid of the user. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;ProjectMemberCostExceptionOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectMemberCostExceptionOutputModel>> projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectWithHttpInfo(String projectGuid, String userGuid, Integer firstRow, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectValidateBeforeCall(projectGuid, userGuid, firstRow, rowCount, null);
        Type localVarReturnType = new TypeToken<List<ProjectMemberCostExceptionOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cost exceptions of project members for a project. (asynchronously)
     * 
     * @param projectGuid Guid of the project. (required)
     * @param userGuid Optional: Guid of the user. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectAsync(String projectGuid, String userGuid, Integer firstRow, Integer rowCount, final ApiCallback<List<ProjectMemberCostExceptionOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectValidateBeforeCall(projectGuid, userGuid, firstRow, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectMemberCostExceptionOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProductsGetProjectProducts
     * @param projectGuid GUID of the project. (required)
     * @param includeProductsFromRegistry Optional: Includes products available from product registry (optional, default to false)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param active Fetch only active (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products for the project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProductsGetProjectProductsCall(String projectGuid, Boolean includeProductsFromRegistry, String pageToken, Integer rowCount, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectproducts"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeProductsFromRegistry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeProductsFromRegistry", includeProductsFromRegistry));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProductsGetProjectProductsValidateBeforeCall(String projectGuid, Boolean includeProductsFromRegistry, String pageToken, Integer rowCount, Boolean active, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectProductsGetProjectProducts(Async)");
        }

        return projectProductsGetProjectProductsCall(projectGuid, includeProductsFromRegistry, pageToken, rowCount, active, _callback);

    }

    /**
     * Get project products
     * This is the same as organization&#39;s list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
     * @param projectGuid GUID of the project. (required)
     * @param includeProductsFromRegistry Optional: Includes products available from product registry (optional, default to false)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param active Fetch only active (optional)
     * @return List&lt;ProjectProductOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products for the project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectProductOutputModel> projectProductsGetProjectProducts(String projectGuid, Boolean includeProductsFromRegistry, String pageToken, Integer rowCount, Boolean active) throws ApiException {
        ApiResponse<List<ProjectProductOutputModel>> localVarResp = projectProductsGetProjectProductsWithHttpInfo(projectGuid, includeProductsFromRegistry, pageToken, rowCount, active);
        return localVarResp.getData();
    }

    /**
     * Get project products
     * This is the same as organization&#39;s list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
     * @param projectGuid GUID of the project. (required)
     * @param includeProductsFromRegistry Optional: Includes products available from product registry (optional, default to false)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param active Fetch only active (optional)
     * @return ApiResponse&lt;List&lt;ProjectProductOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products for the project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectProductOutputModel>> projectProductsGetProjectProductsWithHttpInfo(String projectGuid, Boolean includeProductsFromRegistry, String pageToken, Integer rowCount, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = projectProductsGetProjectProductsValidateBeforeCall(projectGuid, includeProductsFromRegistry, pageToken, rowCount, active, null);
        Type localVarReturnType = new TypeToken<List<ProjectProductOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project products (asynchronously)
     * This is the same as organization&#39;s list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
     * @param projectGuid GUID of the project. (required)
     * @param includeProductsFromRegistry Optional: Includes products available from product registry (optional, default to false)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param active Fetch only active (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products for the project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProductsGetProjectProductsAsync(String projectGuid, Boolean includeProductsFromRegistry, String pageToken, Integer rowCount, Boolean active, final ApiCallback<List<ProjectProductOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProductsGetProjectProductsValidateBeforeCall(projectGuid, includeProductsFromRegistry, pageToken, rowCount, active, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectProductOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkHourPricesGetProjectWorkHourPrice
     * @param guid Id used to get the work hour price. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesGetProjectWorkHourPriceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectworkhourprices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkHourPricesGetProjectWorkHourPriceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectWorkHourPricesGetProjectWorkHourPrice(Async)");
        }

        return projectWorkHourPricesGetProjectWorkHourPriceCall(guid, _callback);

    }

    /**
     * Get project work hour price by ID
     * 
     * @param guid Id used to get the work hour price. (required)
     * @return ProjectWorkHourPriceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectWorkHourPriceOutputModel projectWorkHourPricesGetProjectWorkHourPrice(String guid) throws ApiException {
        ApiResponse<ProjectWorkHourPriceOutputModel> localVarResp = projectWorkHourPricesGetProjectWorkHourPriceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project work hour price by ID
     * 
     * @param guid Id used to get the work hour price. (required)
     * @return ApiResponse&lt;ProjectWorkHourPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectWorkHourPriceOutputModel> projectWorkHourPricesGetProjectWorkHourPriceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectWorkHourPricesGetProjectWorkHourPriceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectWorkHourPriceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project work hour price by ID (asynchronously)
     * 
     * @param guid Id used to get the work hour price. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesGetProjectWorkHourPriceAsync(String guid, final ApiCallback<ProjectWorkHourPriceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkHourPricesGetProjectWorkHourPriceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectWorkHourPriceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkHourPricesGetWorkHourPricesForProject
     * @param projectGuid Guid of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param changedSince Optional: Get project work hour prices that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesGetWorkHourPricesForProjectCall(String projectGuid, Boolean fromPricelistOnly, Boolean isAvailable, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectworkhourprices"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPricelistOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPricelistOnly", fromPricelistOnly));
        }

        if (isAvailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAvailable", isAvailable));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkHourPricesGetWorkHourPricesForProjectValidateBeforeCall(String projectGuid, Boolean fromPricelistOnly, Boolean isAvailable, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectWorkHourPricesGetWorkHourPricesForProject(Async)");
        }

        return projectWorkHourPricesGetWorkHourPricesForProjectCall(projectGuid, fromPricelistOnly, isAvailable, changedSince, _callback);

    }

    /**
     * Get all the work hour prices for a project
     * 
     * @param projectGuid Guid of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param changedSince Optional: Get project work hour prices that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectWorkHourPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectWorkHourPriceOutputModel> projectWorkHourPricesGetWorkHourPricesForProject(String projectGuid, Boolean fromPricelistOnly, Boolean isAvailable, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectWorkHourPriceOutputModel>> localVarResp = projectWorkHourPricesGetWorkHourPricesForProjectWithHttpInfo(projectGuid, fromPricelistOnly, isAvailable, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all the work hour prices for a project
     * 
     * @param projectGuid Guid of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param changedSince Optional: Get project work hour prices that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectWorkHourPriceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectWorkHourPriceOutputModel>> projectWorkHourPricesGetWorkHourPricesForProjectWithHttpInfo(String projectGuid, Boolean fromPricelistOnly, Boolean isAvailable, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = projectWorkHourPricesGetWorkHourPricesForProjectValidateBeforeCall(projectGuid, fromPricelistOnly, isAvailable, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectWorkHourPriceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the work hour prices for a project (asynchronously)
     * 
     * @param projectGuid Guid of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param isAvailable Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all. (optional)
     * @param changedSince Optional: Get project work hour prices that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkHourPricesGetWorkHourPricesForProjectAsync(String projectGuid, Boolean fromPricelistOnly, Boolean isAvailable, OffsetDateTime changedSince, final ApiCallback<List<ProjectWorkHourPriceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkHourPricesGetWorkHourPricesForProjectValidateBeforeCall(projectGuid, fromPricelistOnly, isAvailable, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectWorkHourPriceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWorkTypesGetProjectWorktypes
     * @param projectGuid GUID of the project. (required)
     * @param includeWorktypesFromRegistry Include work types also from registry. If false, returns only project specific work types. Default false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types. (optional)
     * @param textToSearch Optional: Text to search from work type name. (optional, default to )
     * @param changedSince Optional: Get project work types that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of work types for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkTypesGetProjectWorktypesCall(String projectGuid, Boolean includeWorktypesFromRegistry, Integer firstRow, Integer rowCount, Boolean active, String textToSearch, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectworktypes"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeWorktypesFromRegistry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeWorktypesFromRegistry", includeWorktypesFromRegistry));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWorkTypesGetProjectWorktypesValidateBeforeCall(String projectGuid, Boolean includeWorktypesFromRegistry, Integer firstRow, Integer rowCount, Boolean active, String textToSearch, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectWorkTypesGetProjectWorktypes(Async)");
        }

        return projectWorkTypesGetProjectWorktypesCall(projectGuid, includeWorktypesFromRegistry, firstRow, rowCount, active, textToSearch, changedSince, _callback);

    }

    /**
     * Get project work types.
     * This is the same as organization&#39;s list of work types, unless the project has some specific work types and \&quot;UseWorktypesFromSetting\&quot; in project model is set to false.
     * @param projectGuid GUID of the project. (required)
     * @param includeWorktypesFromRegistry Include work types also from registry. If false, returns only project specific work types. Default false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types. (optional)
     * @param textToSearch Optional: Text to search from work type name. (optional, default to )
     * @param changedSince Optional: Get project work types that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectWorkTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of work types for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectWorkTypeModel> projectWorkTypesGetProjectWorktypes(String projectGuid, Boolean includeWorktypesFromRegistry, Integer firstRow, Integer rowCount, Boolean active, String textToSearch, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectWorkTypeModel>> localVarResp = projectWorkTypesGetProjectWorktypesWithHttpInfo(projectGuid, includeWorktypesFromRegistry, firstRow, rowCount, active, textToSearch, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get project work types.
     * This is the same as organization&#39;s list of work types, unless the project has some specific work types and \&quot;UseWorktypesFromSetting\&quot; in project model is set to false.
     * @param projectGuid GUID of the project. (required)
     * @param includeWorktypesFromRegistry Include work types also from registry. If false, returns only project specific work types. Default false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types. (optional)
     * @param textToSearch Optional: Text to search from work type name. (optional, default to )
     * @param changedSince Optional: Get project work types that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectWorkTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of work types for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectWorkTypeModel>> projectWorkTypesGetProjectWorktypesWithHttpInfo(String projectGuid, Boolean includeWorktypesFromRegistry, Integer firstRow, Integer rowCount, Boolean active, String textToSearch, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = projectWorkTypesGetProjectWorktypesValidateBeforeCall(projectGuid, includeWorktypesFromRegistry, firstRow, rowCount, active, textToSearch, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectWorkTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project work types. (asynchronously)
     * This is the same as organization&#39;s list of work types, unless the project has some specific work types and \&quot;UseWorktypesFromSetting\&quot; in project model is set to false.
     * @param projectGuid GUID of the project. (required)
     * @param includeWorktypesFromRegistry Include work types also from registry. If false, returns only project specific work types. Default false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types. (optional)
     * @param textToSearch Optional: Text to search from work type name. (optional, default to )
     * @param changedSince Optional: Get project work types that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of work types for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWorkTypesGetProjectWorktypesAsync(String projectGuid, Boolean includeWorktypesFromRegistry, Integer firstRow, Integer rowCount, Boolean active, String textToSearch, OffsetDateTime changedSince, final ApiCallback<List<ProjectWorkTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWorkTypesGetProjectWorktypesValidateBeforeCall(projectGuid, includeWorktypesFromRegistry, firstRow, rowCount, active, textToSearch, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectWorkTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetCustomerProjects
     * @param customerGuid Id of the customer. (required)
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the projects for the customer </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetCustomerProjectsCall(String customerGuid, String pageToken, Integer rowCount, Boolean isBillable, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/projects"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (currencyGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currencyGuids", currencyGuids));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (projectKeywordGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectKeywordGuids", projectKeywordGuids));
        }

        if (projectStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectStatusTypeGuids", projectStatusTypeGuids));
        }

        if (salesPersonGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesPersonGuids", salesPersonGuids));
        }

        if (projectOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectOwnerGuids", projectOwnerGuids));
        }

        if (businessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "businessUnitGuids", businessUnitGuids));
        }

        if (minimumBillableAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumBillableAmount", minimumBillableAmount));
        }

        if (customerOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerOwnerGuids", customerOwnerGuids));
        }

        if (invoiceableDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceableDate", invoiceableDate));
        }

        if (marketSegmentationGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketSegmentationGuids", marketSegmentationGuids));
        }

        if (salesStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesStatusTypeGuids", salesStatusTypeGuids));
        }

        if (isClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isClosed", isClosed));
        }

        if (hasRecurringFees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasRecurringFees", hasRecurringFees));
        }

        if (companyCurrencyGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "companyCurrencyGuids", companyCurrencyGuids));
        }

        if (projectMemberUserGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectMemberUserGuids", projectMemberUserGuids));
        }

        if (numbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "numbers", numbers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetCustomerProjectsValidateBeforeCall(String customerGuid, String pageToken, Integer rowCount, Boolean isBillable, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling projectsGetCustomerProjects(Async)");
        }

        return projectsGetCustomerProjectsCall(customerGuid, pageToken, rowCount, isBillable, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, _callback);

    }

    /**
     * Get customer&#39;s projects
     * 
     * @param customerGuid Id of the customer. (required)
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @return List&lt;ProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the projects for the customer </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectOutputModel> projectsGetCustomerProjects(String customerGuid, String pageToken, Integer rowCount, Boolean isBillable, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers) throws ApiException {
        ApiResponse<List<ProjectOutputModel>> localVarResp = projectsGetCustomerProjectsWithHttpInfo(customerGuid, pageToken, rowCount, isBillable, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s projects
     * 
     * @param customerGuid Id of the customer. (required)
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @return ApiResponse&lt;List&lt;ProjectOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the projects for the customer </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectOutputModel>> projectsGetCustomerProjectsWithHttpInfo(String customerGuid, String pageToken, Integer rowCount, Boolean isBillable, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers) throws ApiException {
        okhttp3.Call localVarCall = projectsGetCustomerProjectsValidateBeforeCall(customerGuid, pageToken, rowCount, isBillable, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, null);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s projects (asynchronously)
     * 
     * @param customerGuid Id of the customer. (required)
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the projects for the customer </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetCustomerProjectsAsync(String customerGuid, String pageToken, Integer rowCount, Boolean isBillable, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, final ApiCallback<List<ProjectOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetCustomerProjectsValidateBeforeCall(customerGuid, pageToken, rowCount, isBillable, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetProject
     * @param guid Id used to get the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetProjectCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetProjectValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectsGetProject(Async)");
        }

        return projectsGetProjectCall(guid, _callback);

    }

    /**
     * Get project by ID
     * 
     * @param guid Id used to get the project. (required)
     * @return ProjectOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectOutputModel projectsGetProject(String guid) throws ApiException {
        ApiResponse<ProjectOutputModel> localVarResp = projectsGetProjectWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project by ID
     * 
     * @param guid Id used to get the project. (required)
     * @return ApiResponse&lt;ProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectOutputModel> projectsGetProjectWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectsGetProjectValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project by ID (asynchronously)
     * 
     * @param guid Id used to get the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetProjectAsync(String guid, final ApiCallback<ProjectOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetProjectValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetProjects
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param currencyGuid Optional: ID of project currency. (optional)
     * @param changedSince Optional: Get projects that have been added or changed after this date time (greater or equal). (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param internal Optional: Get internal / non-internal projects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetProjectsCall(String pageToken, Integer rowCount, String currencyGuid, OffsetDateTime changedSince, Boolean isBillable, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, Boolean internal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (currencyGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyGuid", currencyGuid));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (customerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerGuids", customerGuids));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (projectKeywordGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectKeywordGuids", projectKeywordGuids));
        }

        if (projectStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectStatusTypeGuids", projectStatusTypeGuids));
        }

        if (salesPersonGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesPersonGuids", salesPersonGuids));
        }

        if (projectOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectOwnerGuids", projectOwnerGuids));
        }

        if (businessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "businessUnitGuids", businessUnitGuids));
        }

        if (minimumBillableAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumBillableAmount", minimumBillableAmount));
        }

        if (customerOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerOwnerGuids", customerOwnerGuids));
        }

        if (invoiceableDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceableDate", invoiceableDate));
        }

        if (marketSegmentationGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketSegmentationGuids", marketSegmentationGuids));
        }

        if (salesStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesStatusTypeGuids", salesStatusTypeGuids));
        }

        if (isClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isClosed", isClosed));
        }

        if (hasRecurringFees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasRecurringFees", hasRecurringFees));
        }

        if (companyCurrencyGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "companyCurrencyGuids", companyCurrencyGuids));
        }

        if (projectMemberUserGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectMemberUserGuids", projectMemberUserGuids));
        }

        if (numbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "numbers", numbers));
        }

        if (internal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internal", internal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetProjectsValidateBeforeCall(String pageToken, Integer rowCount, String currencyGuid, OffsetDateTime changedSince, Boolean isBillable, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, Boolean internal, final ApiCallback _callback) throws ApiException {
        return projectsGetProjectsCall(pageToken, rowCount, currencyGuid, changedSince, isBillable, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, internal, _callback);

    }

    /**
     * Get all the projects
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param currencyGuid Optional: ID of project currency. (optional)
     * @param changedSince Optional: Get projects that have been added or changed after this date time (greater or equal). (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param internal Optional: Get internal / non-internal projects. (optional)
     * @return List&lt;ProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectOutputModel> projectsGetProjects(String pageToken, Integer rowCount, String currencyGuid, OffsetDateTime changedSince, Boolean isBillable, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, Boolean internal) throws ApiException {
        ApiResponse<List<ProjectOutputModel>> localVarResp = projectsGetProjectsWithHttpInfo(pageToken, rowCount, currencyGuid, changedSince, isBillable, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, internal);
        return localVarResp.getData();
    }

    /**
     * Get all the projects
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param currencyGuid Optional: ID of project currency. (optional)
     * @param changedSince Optional: Get projects that have been added or changed after this date time (greater or equal). (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param internal Optional: Get internal / non-internal projects. (optional)
     * @return ApiResponse&lt;List&lt;ProjectOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectOutputModel>> projectsGetProjectsWithHttpInfo(String pageToken, Integer rowCount, String currencyGuid, OffsetDateTime changedSince, Boolean isBillable, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, Boolean internal) throws ApiException {
        okhttp3.Call localVarCall = projectsGetProjectsValidateBeforeCall(pageToken, rowCount, currencyGuid, changedSince, isBillable, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, internal, null);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the projects (asynchronously)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param currencyGuid Optional: ID of project currency. (optional)
     * @param changedSince Optional: Get projects that have been added or changed after this date time (greater or equal). (optional)
     * @param isBillable Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing &#x3D; all. (optional)
     * @param customerGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param internal Optional: Get internal / non-internal projects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetProjectsAsync(String pageToken, Integer rowCount, String currencyGuid, OffsetDateTime changedSince, Boolean isBillable, List<String> customerGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, Boolean internal, final ApiCallback<List<ProjectOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetProjectsValidateBeforeCall(pageToken, rowCount, currencyGuid, changedSince, isBillable, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, internal, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetSalesCases
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetSalesCasesCall(String pageToken, Integer rowCount, List<String> customerGuids, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salescases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (customerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerGuids", customerGuids));
        }

        if (currencyGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currencyGuids", currencyGuids));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (projectKeywordGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectKeywordGuids", projectKeywordGuids));
        }

        if (projectStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectStatusTypeGuids", projectStatusTypeGuids));
        }

        if (salesPersonGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesPersonGuids", salesPersonGuids));
        }

        if (projectOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectOwnerGuids", projectOwnerGuids));
        }

        if (businessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "businessUnitGuids", businessUnitGuids));
        }

        if (minimumBillableAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumBillableAmount", minimumBillableAmount));
        }

        if (customerOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerOwnerGuids", customerOwnerGuids));
        }

        if (invoiceableDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceableDate", invoiceableDate));
        }

        if (marketSegmentationGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketSegmentationGuids", marketSegmentationGuids));
        }

        if (salesStatusTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "salesStatusTypeGuids", salesStatusTypeGuids));
        }

        if (isClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isClosed", isClosed));
        }

        if (hasRecurringFees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasRecurringFees", hasRecurringFees));
        }

        if (companyCurrencyGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "companyCurrencyGuids", companyCurrencyGuids));
        }

        if (projectMemberUserGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectMemberUserGuids", projectMemberUserGuids));
        }

        if (numbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "numbers", numbers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetSalesCasesValidateBeforeCall(String pageToken, Integer rowCount, List<String> customerGuids, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, final ApiCallback _callback) throws ApiException {
        return projectsGetSalesCasesCall(pageToken, rowCount, customerGuids, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, _callback);

    }

    /**
     * Gets the sales cases (sales status is in progress)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @return List&lt;ProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectOutputModel> projectsGetSalesCases(String pageToken, Integer rowCount, List<String> customerGuids, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers) throws ApiException {
        ApiResponse<List<ProjectOutputModel>> localVarResp = projectsGetSalesCasesWithHttpInfo(pageToken, rowCount, customerGuids, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers);
        return localVarResp.getData();
    }

    /**
     * Gets the sales cases (sales status is in progress)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @return ApiResponse&lt;List&lt;ProjectOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectOutputModel>> projectsGetSalesCasesWithHttpInfo(String pageToken, Integer rowCount, List<String> customerGuids, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers) throws ApiException {
        okhttp3.Call localVarCall = projectsGetSalesCasesValidateBeforeCall(pageToken, rowCount, customerGuids, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, null);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the sales cases (sales status is in progress) (asynchronously)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param customerGuids  (optional)
     * @param currencyGuids  (optional)
     * @param projectGuids  (optional)
     * @param projectKeywordGuids  (optional)
     * @param projectStatusTypeGuids  (optional)
     * @param salesPersonGuids  (optional)
     * @param projectOwnerGuids  (optional)
     * @param businessUnitGuids  (optional)
     * @param minimumBillableAmount  (optional)
     * @param customerOwnerGuids  (optional)
     * @param invoiceableDate  (optional)
     * @param marketSegmentationGuids  (optional)
     * @param salesStatusTypeGuids  (optional)
     * @param isClosed  (optional)
     * @param hasRecurringFees  (optional)
     * @param companyCurrencyGuids  (optional)
     * @param projectMemberUserGuids  (optional)
     * @param numbers  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetSalesCasesAsync(String pageToken, Integer rowCount, List<String> customerGuids, List<String> currencyGuids, List<String> projectGuids, List<String> projectKeywordGuids, List<String> projectStatusTypeGuids, List<String> salesPersonGuids, List<String> projectOwnerGuids, List<String> businessUnitGuids, Double minimumBillableAmount, List<String> customerOwnerGuids, OffsetDateTime invoiceableDate, List<String> marketSegmentationGuids, List<String> salesStatusTypeGuids, Boolean isClosed, Boolean hasRecurringFees, List<String> companyCurrencyGuids, List<String> projectMemberUserGuids, List<Long> numbers, final ApiCallback<List<ProjectOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetSalesCasesValidateBeforeCall(pageToken, rowCount, customerGuids, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalFeesGetProposalFee
     * @param guid proposal fee row id to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesGetProposalFeeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalfeerows/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalFeesGetProposalFeeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalFeesGetProposalFee(Async)");
        }

        return proposalFeesGetProposalFeeCall(guid, _callback);

    }

    /**
     * Get the proposal fee rows by guid
     * 
     * @param guid proposal fee row id to get (required)
     * @return ProposalFeeRowOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalFeeRowOutputModel proposalFeesGetProposalFee(String guid) throws ApiException {
        ApiResponse<ProposalFeeRowOutputModel> localVarResp = proposalFeesGetProposalFeeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get the proposal fee rows by guid
     * 
     * @param guid proposal fee row id to get (required)
     * @return ApiResponse&lt;ProposalFeeRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalFeeRowOutputModel> proposalFeesGetProposalFeeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalFeesGetProposalFeeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProposalFeeRowOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proposal fee rows by guid (asynchronously)
     * 
     * @param guid proposal fee row id to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesGetProposalFeeAsync(String guid, final ApiCallback<ProposalFeeRowOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalFeesGetProposalFeeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProposalFeeRowOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalFeesGetProposalFees
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesGetProposalFeesCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalfeerows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalFeesGetProposalFeesValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return proposalFeesGetProposalFeesCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the proposal fee rows.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProposalFeeRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalFeeRowOutputModel> proposalFeesGetProposalFees(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProposalFeeRowOutputModel>> localVarResp = proposalFeesGetProposalFeesWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the proposal fee rows.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProposalFeeRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalFeeRowOutputModel>> proposalFeesGetProposalFeesWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = proposalFeesGetProposalFeesValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProposalFeeRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proposal fee rows. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesGetProposalFeesAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProposalFeeRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalFeesGetProposalFeesValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalFeeRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalFeesGetProposalFeesForProposal
     * @param proposalGuid proposal id for which to get proposal fees rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesGetProposalFeesForProposalCall(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposals/{proposalGuid}/proposalfeerows"
            .replace("{" + "proposalGuid" + "}", localVarApiClient.escapeString(proposalGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalFeesGetProposalFeesForProposalValidateBeforeCall(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'proposalGuid' is set
        if (proposalGuid == null) {
            throw new ApiException("Missing the required parameter 'proposalGuid' when calling proposalFeesGetProposalFeesForProposal(Async)");
        }

        return proposalFeesGetProposalFeesForProposalCall(proposalGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get all the proposal fee rows for a proposal
     * 
     * @param proposalGuid proposal id for which to get proposal fees rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @return List&lt;ProposalFeeRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalFeeRowOutputModel> proposalFeesGetProposalFeesForProposal(String proposalGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<ProposalFeeRowOutputModel>> localVarResp = proposalFeesGetProposalFeesForProposalWithHttpInfo(proposalGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the proposal fee rows for a proposal
     * 
     * @param proposalGuid proposal id for which to get proposal fees rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @return ApiResponse&lt;List&lt;ProposalFeeRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalFeeRowOutputModel>> proposalFeesGetProposalFeesForProposalWithHttpInfo(String proposalGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = proposalFeesGetProposalFeesForProposalValidateBeforeCall(proposalGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<ProposalFeeRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the proposal fee rows for a proposal (asynchronously)
     * 
     * @param proposalGuid proposal id for which to get proposal fees rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal fee rows </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalFeesGetProposalFeesForProposalAsync(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback<List<ProposalFeeRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalFeesGetProposalFeesForProposalValidateBeforeCall(proposalGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalFeeRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSettingsGetProposalSettings
     * @param guid GUID used to get the Proposal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSettingsGetProposalSettingsCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposals/{guid}/proposalsettings"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSettingsGetProposalSettingsValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalSettingsGetProposalSettings(Async)");
        }

        return proposalSettingsGetProposalSettingsCall(guid, _callback);

    }

    /**
     * Get settings for a proposal
     * 
     * @param guid GUID used to get the Proposal. (required)
     * @return ProposalSettingsOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalSettingsOutputModel proposalSettingsGetProposalSettings(String guid) throws ApiException {
        ApiResponse<ProposalSettingsOutputModel> localVarResp = proposalSettingsGetProposalSettingsWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get settings for a proposal
     * 
     * @param guid GUID used to get the Proposal. (required)
     * @return ApiResponse&lt;ProposalSettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalSettingsOutputModel> proposalSettingsGetProposalSettingsWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalSettingsGetProposalSettingsValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProposalSettingsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get settings for a proposal (asynchronously)
     * 
     * @param guid GUID used to get the Proposal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSettingsGetProposalSettingsAsync(String guid, final ApiCallback<ProposalSettingsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSettingsGetProposalSettingsValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProposalSettingsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSubtotalsGetProposalSubtotal
     * @param guid GUID used to get the Proposal subtotal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal subtotal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsGetProposalSubtotalCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalsubtotals/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSubtotalsGetProposalSubtotalValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalSubtotalsGetProposalSubtotal(Async)");
        }

        return proposalSubtotalsGetProposalSubtotalCall(guid, _callback);

    }

    /**
     * Get Proposal subtotal by ID
     * 
     * @param guid GUID used to get the Proposal subtotal. (required)
     * @return ProposalSubtotalOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal subtotal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalSubtotalOutputModel proposalSubtotalsGetProposalSubtotal(String guid) throws ApiException {
        ApiResponse<ProposalSubtotalOutputModel> localVarResp = proposalSubtotalsGetProposalSubtotalWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Proposal subtotal by ID
     * 
     * @param guid GUID used to get the Proposal subtotal. (required)
     * @return ApiResponse&lt;ProposalSubtotalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal subtotal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalSubtotalOutputModel> proposalSubtotalsGetProposalSubtotalWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalSubtotalsGetProposalSubtotalValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProposalSubtotalOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Proposal subtotal by ID (asynchronously)
     * 
     * @param guid GUID used to get the Proposal subtotal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal subtotal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsGetProposalSubtotalAsync(String guid, final ApiCallback<ProposalSubtotalOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSubtotalsGetProposalSubtotalValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProposalSubtotalOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSubtotalsGetProposalSubtotals
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsGetProposalSubtotalsCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalsubtotals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSubtotalsGetProposalSubtotalsValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return proposalSubtotalsGetProposalSubtotalsCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the proposal subtotals.
     * 
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProposalSubtotalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalSubtotalOutputModel> proposalSubtotalsGetProposalSubtotals(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProposalSubtotalOutputModel>> localVarResp = proposalSubtotalsGetProposalSubtotalsWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the proposal subtotals.
     * 
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProposalSubtotalOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalSubtotalOutputModel>> proposalSubtotalsGetProposalSubtotalsWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = proposalSubtotalsGetProposalSubtotalsValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProposalSubtotalOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proposal subtotals. (asynchronously)
     * 
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsGetProposalSubtotalsAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProposalSubtotalOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSubtotalsGetProposalSubtotalsValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalSubtotalOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalSubtotalsGetProposalSubtotalsForProposal
     * @param proposalGuid proposal id for which to get proposal subtotals. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsGetProposalSubtotalsForProposalCall(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposals/{proposalGuid}/proposalsubtotals"
            .replace("{" + "proposalGuid" + "}", localVarApiClient.escapeString(proposalGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalSubtotalsGetProposalSubtotalsForProposalValidateBeforeCall(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'proposalGuid' is set
        if (proposalGuid == null) {
            throw new ApiException("Missing the required parameter 'proposalGuid' when calling proposalSubtotalsGetProposalSubtotalsForProposal(Async)");
        }

        return proposalSubtotalsGetProposalSubtotalsForProposalCall(proposalGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get all the proposal subtotals for a proposal
     * 
     * @param proposalGuid proposal id for which to get proposal subtotals. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @return List&lt;ProposalSubtotalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalSubtotalOutputModel> proposalSubtotalsGetProposalSubtotalsForProposal(String proposalGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<ProposalSubtotalOutputModel>> localVarResp = proposalSubtotalsGetProposalSubtotalsForProposalWithHttpInfo(proposalGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the proposal subtotals for a proposal
     * 
     * @param proposalGuid proposal id for which to get proposal subtotals. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @return ApiResponse&lt;List&lt;ProposalSubtotalOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalSubtotalOutputModel>> proposalSubtotalsGetProposalSubtotalsForProposalWithHttpInfo(String proposalGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = proposalSubtotalsGetProposalSubtotalsForProposalValidateBeforeCall(proposalGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<ProposalSubtotalOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the proposal subtotals for a proposal (asynchronously)
     * 
     * @param proposalGuid proposal id for which to get proposal subtotals. (required)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalSubtotalsGetProposalSubtotalsForProposalAsync(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback<List<ProposalSubtotalOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalSubtotalsGetProposalSubtotalsForProposalValidateBeforeCall(proposalGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalSubtotalOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalWorkhoursGetProposalWorkHours
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal work rows that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursGetProposalWorkHoursCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalworkrows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalWorkhoursGetProposalWorkHoursValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return proposalWorkhoursGetProposalWorkHoursCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the proposal work rows.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal work rows that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProposalWorkhourRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalWorkhourRowOutputModel> proposalWorkhoursGetProposalWorkHours(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProposalWorkhourRowOutputModel>> localVarResp = proposalWorkhoursGetProposalWorkHoursWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the proposal work rows.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal work rows that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProposalWorkhourRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalWorkhourRowOutputModel>> proposalWorkhoursGetProposalWorkHoursWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = proposalWorkhoursGetProposalWorkHoursValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProposalWorkhourRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proposal work rows. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposal work rows that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursGetProposalWorkHoursAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProposalWorkhourRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalWorkhoursGetProposalWorkHoursValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalWorkhourRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalWorkhoursGetProposalWorkHoursForProposal
     * @param proposalGuid proposal id for which to get proposal work rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work rows. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursGetProposalWorkHoursForProposalCall(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposals/{proposalGuid}/proposalworkrows"
            .replace("{" + "proposalGuid" + "}", localVarApiClient.escapeString(proposalGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalWorkhoursGetProposalWorkHoursForProposalValidateBeforeCall(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'proposalGuid' is set
        if (proposalGuid == null) {
            throw new ApiException("Missing the required parameter 'proposalGuid' when calling proposalWorkhoursGetProposalWorkHoursForProposal(Async)");
        }

        return proposalWorkhoursGetProposalWorkHoursForProposalCall(proposalGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get all the proposal work rows.
     * 
     * @param proposalGuid proposal id for which to get proposal work rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @return List&lt;ProposalWorkhourRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work rows. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalWorkhourRowOutputModel> proposalWorkhoursGetProposalWorkHoursForProposal(String proposalGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<ProposalWorkhourRowOutputModel>> localVarResp = proposalWorkhoursGetProposalWorkHoursForProposalWithHttpInfo(proposalGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the proposal work rows.
     * 
     * @param proposalGuid proposal id for which to get proposal work rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @return ApiResponse&lt;List&lt;ProposalWorkhourRowOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work rows. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalWorkhourRowOutputModel>> proposalWorkhoursGetProposalWorkHoursForProposalWithHttpInfo(String proposalGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = proposalWorkhoursGetProposalWorkHoursForProposalValidateBeforeCall(proposalGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<ProposalWorkhourRowOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the proposal work rows. (asynchronously)
     * 
     * @param proposalGuid proposal id for which to get proposal work rows. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work rows. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursGetProposalWorkHoursForProposalAsync(String proposalGuid, String pageToken, Integer rowCount, final ApiCallback<List<ProposalWorkhourRowOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalWorkhoursGetProposalWorkHoursForProposalValidateBeforeCall(proposalGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalWorkhourRowOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalWorkhoursGetProposalWorkhour
     * @param guid proposal work row id to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursGetProposalWorkhourCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalworkrows/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalWorkhoursGetProposalWorkhourValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalWorkhoursGetProposalWorkhour(Async)");
        }

        return proposalWorkhoursGetProposalWorkhourCall(guid, _callback);

    }

    /**
     * Get the proposal work row by guid.
     * 
     * @param guid proposal work row id to get. (required)
     * @return ProposalWorkhourRowOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalWorkhourRowOutputModel proposalWorkhoursGetProposalWorkhour(String guid) throws ApiException {
        ApiResponse<ProposalWorkhourRowOutputModel> localVarResp = proposalWorkhoursGetProposalWorkhourWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get the proposal work row by guid.
     * 
     * @param guid proposal work row id to get. (required)
     * @return ApiResponse&lt;ProposalWorkhourRowOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalWorkhourRowOutputModel> proposalWorkhoursGetProposalWorkhourWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalWorkhoursGetProposalWorkhourValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProposalWorkhourRowOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proposal work row by guid. (asynchronously)
     * 
     * @param guid proposal work row id to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal work row. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalWorkhoursGetProposalWorkhourAsync(String guid, final ApiCallback<ProposalWorkhourRowOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalWorkhoursGetProposalWorkhourValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProposalWorkhourRowOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalsGetProposal
     * @param guid GUID used to get the Proposal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsGetProposalCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposals/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalsGetProposalValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalsGetProposal(Async)");
        }

        return proposalsGetProposalCall(guid, _callback);

    }

    /**
     * Get Proposal by ID
     * 
     * @param guid GUID used to get the Proposal. (required)
     * @return ProposalOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalOutputModel proposalsGetProposal(String guid) throws ApiException {
        ApiResponse<ProposalOutputModel> localVarResp = proposalsGetProposalWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Proposal by ID
     * 
     * @param guid GUID used to get the Proposal. (required)
     * @return ApiResponse&lt;ProposalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalOutputModel> proposalsGetProposalWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalsGetProposalValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProposalOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Proposal by ID (asynchronously)
     * 
     * @param guid GUID used to get the Proposal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsGetProposalAsync(String guid, final ApiCallback<ProposalOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalsGetProposalValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProposalOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalsGetProposals
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsGetProposalsCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalsGetProposalsValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return proposalsGetProposalsCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get all the proposals
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProposalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalOutputModel> proposalsGetProposals(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProposalOutputModel>> localVarResp = proposalsGetProposalsWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all the proposals
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProposalOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalOutputModel>> proposalsGetProposalsWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = proposalsGetProposalsValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProposalOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the proposals (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsGetProposalsAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProposalOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalsGetProposalsValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalsGetProposalsForProject
     * @param projectGuid Project id for which to get proposals. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsGetProposalsForProjectCall(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/proposals"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalsGetProposalsForProjectValidateBeforeCall(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling proposalsGetProposalsForProject(Async)");
        }

        return proposalsGetProposalsForProjectCall(projectGuid, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get all the proposals for a project
     * 
     * @param projectGuid Project id for which to get proposals. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProposalOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalOutputModel> proposalsGetProposalsForProject(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProposalOutputModel>> localVarResp = proposalsGetProposalsForProjectWithHttpInfo(projectGuid, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all the proposals for a project
     * 
     * @param projectGuid Project id for which to get proposals. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProposalOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalOutputModel>> proposalsGetProposalsForProjectWithHttpInfo(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = proposalsGetProposalsForProjectValidateBeforeCall(projectGuid, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProposalOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the proposals for a project (asynchronously)
     * 
     * @param projectGuid Project id for which to get proposals. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get proposals that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsGetProposalsForProjectAsync(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProposalOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalsGetProposalsForProjectValidateBeforeCall(projectGuid, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesGetAllCustomerSalesNotes
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetAllCustomerSalesNotesCall(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/salesnotes"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesGetAllCustomerSalesNotesValidateBeforeCall(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling salesNotesGetAllCustomerSalesNotes(Async)");
        }

        return salesNotesGetAllCustomerSalesNotesCall(customerGuid, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the sales notes by customer guid.
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;SalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesNoteOutputModel> salesNotesGetAllCustomerSalesNotes(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<SalesNoteOutputModel>> localVarResp = salesNotesGetAllCustomerSalesNotesWithHttpInfo(customerGuid, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the sales notes by customer guid.
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;SalesNoteOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesNoteOutputModel>> salesNotesGetAllCustomerSalesNotesWithHttpInfo(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = salesNotesGetAllCustomerSalesNotesValidateBeforeCall(customerGuid, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<SalesNoteOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the sales notes by customer guid. (asynchronously)
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetAllCustomerSalesNotesAsync(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<SalesNoteOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesGetAllCustomerSalesNotesValidateBeforeCall(customerGuid, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<SalesNoteOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesGetProjectSalesNote
     * @param guid GUID used to get the project sales note. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetProjectSalesNoteCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectsalesnotes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesGetProjectSalesNoteValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesNotesGetProjectSalesNote(Async)");
        }

        return salesNotesGetProjectSalesNoteCall(guid, _callback);

    }

    /**
     * Get project sales note by ID.
     * 
     * @param guid GUID used to get the project sales note. (required)
     * @return ProjectSalesNoteOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSalesNoteOutputModel salesNotesGetProjectSalesNote(String guid) throws ApiException {
        ApiResponse<ProjectSalesNoteOutputModel> localVarResp = salesNotesGetProjectSalesNoteWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project sales note by ID.
     * 
     * @param guid GUID used to get the project sales note. (required)
     * @return ApiResponse&lt;ProjectSalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSalesNoteOutputModel> salesNotesGetProjectSalesNoteWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = salesNotesGetProjectSalesNoteValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectSalesNoteOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project sales note by ID. (asynchronously)
     * 
     * @param guid GUID used to get the project sales note. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetProjectSalesNoteAsync(String guid, final ApiCallback<ProjectSalesNoteOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesGetProjectSalesNoteValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectSalesNoteOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesGetProjectSalesNotes
     * @param projectGuid Project guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetProjectSalesNotesCall(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projectsalesnotes"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesGetProjectSalesNotesValidateBeforeCall(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling salesNotesGetProjectSalesNotes(Async)");
        }

        return salesNotesGetProjectSalesNotesCall(projectGuid, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the sales notes of a case.
     * 
     * @param projectGuid Project guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectSalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectSalesNoteOutputModel> salesNotesGetProjectSalesNotes(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectSalesNoteOutputModel>> localVarResp = salesNotesGetProjectSalesNotesWithHttpInfo(projectGuid, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the sales notes of a case.
     * 
     * @param projectGuid Project guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectSalesNoteOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectSalesNoteOutputModel>> salesNotesGetProjectSalesNotesWithHttpInfo(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = salesNotesGetProjectSalesNotesValidateBeforeCall(projectGuid, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectSalesNoteOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the sales notes of a case. (asynchronously)
     * 
     * @param projectGuid Project guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a project. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetProjectSalesNotesAsync(String projectGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProjectSalesNoteOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesGetProjectSalesNotesValidateBeforeCall(projectGuid, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectSalesNoteOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesStatusHistoryGetSalesStatusHistory
     * @param projectGuid The project for which the sales status history is fetched. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status history </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusHistoryGetSalesStatusHistoryCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/salesstatushistory"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesStatusHistoryGetSalesStatusHistoryValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling salesStatusHistoryGetSalesStatusHistory(Async)");
        }

        return salesStatusHistoryGetSalesStatusHistoryCall(projectGuid, _callback);

    }

    /**
     * Get the sales status history for a project
     * 
     * @param projectGuid The project for which the sales status history is fetched. (required)
     * @return List&lt;SalesStatusHistoryOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status history </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesStatusHistoryOutputModel> salesStatusHistoryGetSalesStatusHistory(String projectGuid) throws ApiException {
        ApiResponse<List<SalesStatusHistoryOutputModel>> localVarResp = salesStatusHistoryGetSalesStatusHistoryWithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get the sales status history for a project
     * 
     * @param projectGuid The project for which the sales status history is fetched. (required)
     * @return ApiResponse&lt;List&lt;SalesStatusHistoryOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status history </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesStatusHistoryOutputModel>> salesStatusHistoryGetSalesStatusHistoryWithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = salesStatusHistoryGetSalesStatusHistoryValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<SalesStatusHistoryOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the sales status history for a project (asynchronously)
     * 
     * @param projectGuid The project for which the sales status history is fetched. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status history </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusHistoryGetSalesStatusHistoryAsync(String projectGuid, final ApiCallback<List<SalesStatusHistoryOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesStatusHistoryGetSalesStatusHistoryValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<SalesStatusHistoryOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamProductivityGetTeamProductivity
     * @param projectGuid GUID of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project members with team productivity information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamProductivityGetTeamProductivityCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/teamproductivity"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamProductivityGetTeamProductivityValidateBeforeCall(String projectGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling teamProductivityGetTeamProductivity(Async)");
        }

        return teamProductivityGetTeamProductivityCall(projectGuid, _callback);

    }

    /**
     * Get team productivity of a project.
     * 
     * @param projectGuid GUID of the project. (required)
     * @return List&lt;TeamProductivityOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project members with team productivity information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamProductivityOutputModel> teamProductivityGetTeamProductivity(String projectGuid) throws ApiException {
        ApiResponse<List<TeamProductivityOutputModel>> localVarResp = teamProductivityGetTeamProductivityWithHttpInfo(projectGuid);
        return localVarResp.getData();
    }

    /**
     * Get team productivity of a project.
     * 
     * @param projectGuid GUID of the project. (required)
     * @return ApiResponse&lt;List&lt;TeamProductivityOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project members with team productivity information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamProductivityOutputModel>> teamProductivityGetTeamProductivityWithHttpInfo(String projectGuid) throws ApiException {
        okhttp3.Call localVarCall = teamProductivityGetTeamProductivityValidateBeforeCall(projectGuid, null);
        Type localVarReturnType = new TypeToken<List<TeamProductivityOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team productivity of a project. (asynchronously)
     * 
     * @param projectGuid GUID of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of project members with team productivity information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamProductivityGetTeamProductivityAsync(String projectGuid, final ApiCallback<List<TeamProductivityOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamProductivityGetTeamProductivityValidateBeforeCall(projectGuid, _callback);
        Type localVarReturnType = new TypeToken<List<TeamProductivityOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypesGetSearchedTravelExpenseTypes
     * @param projectGuid Id of the project. (required)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param userGuid Optional: Id of the user to fetch travels for. (optional)
     * @param expenseClass Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Travel expense types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesGetSearchedTravelExpenseTypesCall(String projectGuid, String textToSearch, Integer firstRow, Integer rowCount, String userGuid, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/travelexpensetypes"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (userGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userGuid", userGuid));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypesGetSearchedTravelExpenseTypesValidateBeforeCall(String projectGuid, String textToSearch, Integer firstRow, Integer rowCount, String userGuid, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling travelExpenseTypesGetSearchedTravelExpenseTypes(Async)");
        }

        return travelExpenseTypesGetSearchedTravelExpenseTypesCall(projectGuid, textToSearch, firstRow, rowCount, userGuid, expenseClass, _callback);

    }

    /**
     * Search active travel expense types of project by part of the name or code.
     * 
     * @param projectGuid Id of the project. (required)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param userGuid Optional: Id of the user to fetch travels for. (optional)
     * @param expenseClass Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense. (optional)
     * @return List&lt;TravelExpenseTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Travel expense types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelExpenseTypeOutputModel> travelExpenseTypesGetSearchedTravelExpenseTypes(String projectGuid, String textToSearch, Integer firstRow, Integer rowCount, String userGuid, ExpensesClass expenseClass) throws ApiException {
        ApiResponse<List<TravelExpenseTypeOutputModel>> localVarResp = travelExpenseTypesGetSearchedTravelExpenseTypesWithHttpInfo(projectGuid, textToSearch, firstRow, rowCount, userGuid, expenseClass);
        return localVarResp.getData();
    }

    /**
     * Search active travel expense types of project by part of the name or code.
     * 
     * @param projectGuid Id of the project. (required)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param userGuid Optional: Id of the user to fetch travels for. (optional)
     * @param expenseClass Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense. (optional)
     * @return ApiResponse&lt;List&lt;TravelExpenseTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Travel expense types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelExpenseTypeOutputModel>> travelExpenseTypesGetSearchedTravelExpenseTypesWithHttpInfo(String projectGuid, String textToSearch, Integer firstRow, Integer rowCount, String userGuid, ExpensesClass expenseClass) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypesGetSearchedTravelExpenseTypesValidateBeforeCall(projectGuid, textToSearch, firstRow, rowCount, userGuid, expenseClass, null);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search active travel expense types of project by part of the name or code. (asynchronously)
     * 
     * @param projectGuid Id of the project. (required)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param userGuid Optional: Id of the user to fetch travels for. (optional)
     * @param expenseClass Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Travel expense types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesGetSearchedTravelExpenseTypesAsync(String projectGuid, String textToSearch, Integer firstRow, Integer rowCount, String userGuid, ExpensesClass expenseClass, final ApiCallback<List<TravelExpenseTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypesGetSearchedTravelExpenseTypesValidateBeforeCall(projectGuid, textToSearch, firstRow, rowCount, userGuid, expenseClass, _callback);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelPricesGetTravelPricesForProject
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the settings. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelPricesGetTravelPricesForProjectCall(String projectGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/travelprices"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPricelistOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPricelistOnly", fromPricelistOnly));
        }

        if (expenseClasses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expenseClasses", expenseClasses));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelPricesGetTravelPricesForProjectValidateBeforeCall(String projectGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling travelPricesGetTravelPricesForProject(Async)");
        }

        return travelPricesGetTravelPricesForProjectCall(projectGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount, _callback);

    }

    /**
     * Get all the travel prices for a project.
     * 
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the settings. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @return List&lt;TravelPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelPriceOutputModel> travelPricesGetTravelPricesForProject(String projectGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        ApiResponse<List<TravelPriceOutputModel>> localVarResp = travelPricesGetTravelPricesForProjectWithHttpInfo(projectGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the travel prices for a project.
     * 
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the settings. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @return ApiResponse&lt;List&lt;TravelPriceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelPriceOutputModel>> travelPricesGetTravelPricesForProjectWithHttpInfo(String projectGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        okhttp3.Call localVarCall = travelPricesGetTravelPricesForProjectValidateBeforeCall(projectGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount, null);
        Type localVarReturnType = new TypeToken<List<TravelPriceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the travel prices for a project. (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the settings. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelPricesGetTravelPricesForProjectAsync(String projectGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback<List<TravelPriceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelPricesGetTravelPricesForProjectValidateBeforeCall(projectGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount, _callback);
        Type localVarReturnType = new TypeToken<List<TravelPriceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypesGetPhaseWorkTypes
     * @param phaseGuid Id of the phase. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: number of rows to fetch (optional)
     * @param userGuid Id of the user for whom the work types are retrieved. Default is current user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetPhaseWorkTypesCall(String phaseGuid, String pageToken, Integer rowCount, String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phases/{phaseGuid}/worktypes"
            .replace("{" + "phaseGuid" + "}", localVarApiClient.escapeString(phaseGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (userGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userGuid", userGuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypesGetPhaseWorkTypesValidateBeforeCall(String phaseGuid, String pageToken, Integer rowCount, String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phaseGuid' is set
        if (phaseGuid == null) {
            throw new ApiException("Missing the required parameter 'phaseGuid' when calling workTypesGetPhaseWorkTypes(Async)");
        }

        return workTypesGetPhaseWorkTypesCall(phaseGuid, pageToken, rowCount, userGuid, _callback);

    }

    /**
     * Get all work types that are available for a phase (for work hour entry)
     * Only the active work types are included in the list, whether they come from organization settings or project specific work types.
     * @param phaseGuid Id of the phase. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: number of rows to fetch (optional)
     * @param userGuid Id of the user for whom the work types are retrieved. Default is current user. (optional)
     * @return List&lt;WorkTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkTypeOutputModel> workTypesGetPhaseWorkTypes(String phaseGuid, String pageToken, Integer rowCount, String userGuid) throws ApiException {
        ApiResponse<List<WorkTypeOutputModel>> localVarResp = workTypesGetPhaseWorkTypesWithHttpInfo(phaseGuid, pageToken, rowCount, userGuid);
        return localVarResp.getData();
    }

    /**
     * Get all work types that are available for a phase (for work hour entry)
     * Only the active work types are included in the list, whether they come from organization settings or project specific work types.
     * @param phaseGuid Id of the phase. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: number of rows to fetch (optional)
     * @param userGuid Id of the user for whom the work types are retrieved. Default is current user. (optional)
     * @return ApiResponse&lt;List&lt;WorkTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkTypeOutputModel>> workTypesGetPhaseWorkTypesWithHttpInfo(String phaseGuid, String pageToken, Integer rowCount, String userGuid) throws ApiException {
        okhttp3.Call localVarCall = workTypesGetPhaseWorkTypesValidateBeforeCall(phaseGuid, pageToken, rowCount, userGuid, null);
        Type localVarReturnType = new TypeToken<List<WorkTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all work types that are available for a phase (for work hour entry) (asynchronously)
     * Only the active work types are included in the list, whether they come from organization settings or project specific work types.
     * @param phaseGuid Id of the phase. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: number of rows to fetch (optional)
     * @param userGuid Id of the user for whom the work types are retrieved. Default is current user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetPhaseWorkTypesAsync(String phaseGuid, String pageToken, Integer rowCount, String userGuid, final ApiCallback<List<WorkTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypesGetPhaseWorkTypesValidateBeforeCall(phaseGuid, pageToken, rowCount, userGuid, _callback);
        Type localVarReturnType = new TypeToken<List<WorkTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypesGetSearchedWorktypes
     * @param projectGuid Id of the case to which proposal is connected. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetSearchedWorktypesCall(String projectGuid, Integer firstRow, Integer rowCount, String textToSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/worktypesforproject"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypesGetSearchedWorktypesValidateBeforeCall(String projectGuid, Integer firstRow, Integer rowCount, String textToSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling workTypesGetSearchedWorktypes(Async)");
        }

        return workTypesGetSearchedWorktypesCall(projectGuid, firstRow, rowCount, textToSearch, _callback);

    }

    /**
     * Search active work types by part of the name or code.
     * 
     * @param projectGuid Id of the case to which proposal is connected. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @return List&lt;WorktypeForProjectOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorktypeForProjectOutputModel> workTypesGetSearchedWorktypes(String projectGuid, Integer firstRow, Integer rowCount, String textToSearch) throws ApiException {
        ApiResponse<List<WorktypeForProjectOutputModel>> localVarResp = workTypesGetSearchedWorktypesWithHttpInfo(projectGuid, firstRow, rowCount, textToSearch);
        return localVarResp.getData();
    }

    /**
     * Search active work types by part of the name or code.
     * 
     * @param projectGuid Id of the case to which proposal is connected. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @return ApiResponse&lt;List&lt;WorktypeForProjectOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorktypeForProjectOutputModel>> workTypesGetSearchedWorktypesWithHttpInfo(String projectGuid, Integer firstRow, Integer rowCount, String textToSearch) throws ApiException {
        okhttp3.Call localVarCall = workTypesGetSearchedWorktypesValidateBeforeCall(projectGuid, firstRow, rowCount, textToSearch, null);
        Type localVarReturnType = new TypeToken<List<WorktypeForProjectOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search active work types by part of the name or code. (asynchronously)
     * 
     * @param projectGuid Id of the case to which proposal is connected. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Searched string: part of name or code. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetSearchedWorktypesAsync(String projectGuid, Integer firstRow, Integer rowCount, String textToSearch, final ApiCallback<List<WorktypeForProjectOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypesGetSearchedWorktypesValidateBeforeCall(projectGuid, firstRow, rowCount, textToSearch, _callback);
        Type localVarReturnType = new TypeToken<List<WorktypeForProjectOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
