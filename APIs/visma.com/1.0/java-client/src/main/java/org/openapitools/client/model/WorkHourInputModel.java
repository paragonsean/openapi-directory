/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MoneyInputModel;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkHourInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkHourInputModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private LocalDate eventDate;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private SimpleInputModel invoice;

  public static final String SERIALIZED_NAME_INVOICE_QUANTITY = "invoiceQuantity";
  @SerializedName(SERIALIZED_NAME_INVOICE_QUANTITY)
  private Double invoiceQuantity;

  public static final String SERIALIZED_NAME_INVOICE_ROW_COMMENT = "invoiceRowComment";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_COMMENT)
  private String invoiceRowComment;

  public static final String SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION = "invoiceRowDescription";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION)
  private String invoiceRowDescription;

  public static final String SERIALIZED_NAME_IS_APPROVED = "isApproved";
  @SerializedName(SERIALIZED_NAME_IS_APPROVED)
  private Boolean isApproved;

  public static final String SERIALIZED_NAME_IS_BILLABLE = "isBillable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable;

  public static final String SERIALIZED_NAME_OVERTIME = "overtime";
  @SerializedName(SERIALIZED_NAME_OVERTIME)
  private SimpleInputModel overtime;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputRequiredModel phase;

  public static final String SERIALIZED_NAME_PLANNED_INVOICE_QUANTITY = "plannedInvoiceQuantity";
  @SerializedName(SERIALIZED_NAME_PLANNED_INVOICE_QUANTITY)
  private Double plannedInvoiceQuantity;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyInputModel unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleInputRequiredModel user;

  public static final String SERIALIZED_NAME_WORK_TYPE = "workType";
  @SerializedName(SERIALIZED_NAME_WORK_TYPE)
  private SimpleInputRequiredModel workType;

  public WorkHourInputModel() {
  }

  public WorkHourInputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WorkHourInputModel endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public WorkHourInputModel eventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nonnull
  public LocalDate getEventDate() {
    return eventDate;
  }

  public void setEventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
  }


  public WorkHourInputModel invoice(SimpleInputModel invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public SimpleInputModel getInvoice() {
    return invoice;
  }

  public void setInvoice(SimpleInputModel invoice) {
    this.invoice = invoice;
  }


  public WorkHourInputModel invoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
    return this;
  }

  /**
   * Get invoiceQuantity
   * @return invoiceQuantity
   */
  @javax.annotation.Nullable
  public Double getInvoiceQuantity() {
    return invoiceQuantity;
  }

  public void setInvoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
  }


  public WorkHourInputModel invoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
    return this;
  }

  /**
   * Get invoiceRowComment
   * @return invoiceRowComment
   */
  @javax.annotation.Nullable
  public String getInvoiceRowComment() {
    return invoiceRowComment;
  }

  public void setInvoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
  }


  public WorkHourInputModel invoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
    return this;
  }

  /**
   * Get invoiceRowDescription
   * @return invoiceRowDescription
   */
  @javax.annotation.Nullable
  public String getInvoiceRowDescription() {
    return invoiceRowDescription;
  }

  public void setInvoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
  }


  public WorkHourInputModel isApproved(Boolean isApproved) {
    this.isApproved = isApproved;
    return this;
  }

  /**
   * Get isApproved
   * @return isApproved
   */
  @javax.annotation.Nullable
  public Boolean getIsApproved() {
    return isApproved;
  }

  public void setIsApproved(Boolean isApproved) {
    this.isApproved = isApproved;
  }


  public WorkHourInputModel isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * Get isBillable
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public WorkHourInputModel overtime(SimpleInputModel overtime) {
    this.overtime = overtime;
    return this;
  }

  /**
   * Get overtime
   * @return overtime
   */
  @javax.annotation.Nullable
  public SimpleInputModel getOvertime() {
    return overtime;
  }

  public void setOvertime(SimpleInputModel overtime) {
    this.overtime = overtime;
  }


  public WorkHourInputModel phase(SimpleInputRequiredModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputRequiredModel phase) {
    this.phase = phase;
  }


  public WorkHourInputModel plannedInvoiceQuantity(Double plannedInvoiceQuantity) {
    this.plannedInvoiceQuantity = plannedInvoiceQuantity;
    return this;
  }

  /**
   * Get plannedInvoiceQuantity
   * @return plannedInvoiceQuantity
   */
  @javax.annotation.Nullable
  public Double getPlannedInvoiceQuantity() {
    return plannedInvoiceQuantity;
  }

  public void setPlannedInvoiceQuantity(Double plannedInvoiceQuantity) {
    this.plannedInvoiceQuantity = plannedInvoiceQuantity;
  }


  public WorkHourInputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public WorkHourInputModel startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public WorkHourInputModel unitPrice(MoneyInputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyInputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyInputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public WorkHourInputModel user(SimpleInputRequiredModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getUser() {
    return user;
  }

  public void setUser(SimpleInputRequiredModel user) {
    this.user = user;
  }


  public WorkHourInputModel workType(SimpleInputRequiredModel workType) {
    this.workType = workType;
    return this;
  }

  /**
   * Get workType
   * @return workType
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getWorkType() {
    return workType;
  }

  public void setWorkType(SimpleInputRequiredModel workType) {
    this.workType = workType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkHourInputModel workHourInputModel = (WorkHourInputModel) o;
    return Objects.equals(this.description, workHourInputModel.description) &&
        Objects.equals(this.endTime, workHourInputModel.endTime) &&
        Objects.equals(this.eventDate, workHourInputModel.eventDate) &&
        Objects.equals(this.invoice, workHourInputModel.invoice) &&
        Objects.equals(this.invoiceQuantity, workHourInputModel.invoiceQuantity) &&
        Objects.equals(this.invoiceRowComment, workHourInputModel.invoiceRowComment) &&
        Objects.equals(this.invoiceRowDescription, workHourInputModel.invoiceRowDescription) &&
        Objects.equals(this.isApproved, workHourInputModel.isApproved) &&
        Objects.equals(this.isBillable, workHourInputModel.isBillable) &&
        Objects.equals(this.overtime, workHourInputModel.overtime) &&
        Objects.equals(this.phase, workHourInputModel.phase) &&
        Objects.equals(this.plannedInvoiceQuantity, workHourInputModel.plannedInvoiceQuantity) &&
        Objects.equals(this.quantity, workHourInputModel.quantity) &&
        Objects.equals(this.startTime, workHourInputModel.startTime) &&
        Objects.equals(this.unitPrice, workHourInputModel.unitPrice) &&
        Objects.equals(this.user, workHourInputModel.user) &&
        Objects.equals(this.workType, workHourInputModel.workType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, endTime, eventDate, invoice, invoiceQuantity, invoiceRowComment, invoiceRowDescription, isApproved, isBillable, overtime, phase, plannedInvoiceQuantity, quantity, startTime, unitPrice, user, workType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkHourInputModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceQuantity: ").append(toIndentedString(invoiceQuantity)).append("\n");
    sb.append("    invoiceRowComment: ").append(toIndentedString(invoiceRowComment)).append("\n");
    sb.append("    invoiceRowDescription: ").append(toIndentedString(invoiceRowDescription)).append("\n");
    sb.append("    isApproved: ").append(toIndentedString(isApproved)).append("\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    overtime: ").append(toIndentedString(overtime)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    plannedInvoiceQuantity: ").append(toIndentedString(plannedInvoiceQuantity)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workType: ").append(toIndentedString(workType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("endTime");
    openapiFields.add("eventDate");
    openapiFields.add("invoice");
    openapiFields.add("invoiceQuantity");
    openapiFields.add("invoiceRowComment");
    openapiFields.add("invoiceRowDescription");
    openapiFields.add("isApproved");
    openapiFields.add("isBillable");
    openapiFields.add("overtime");
    openapiFields.add("phase");
    openapiFields.add("plannedInvoiceQuantity");
    openapiFields.add("quantity");
    openapiFields.add("startTime");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("workType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventDate");
    openapiRequiredFields.add("phase");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("workType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkHourInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkHourInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkHourInputModel is not found in the empty JSON string", WorkHourInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkHourInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkHourInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkHourInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("invoice"));
      }
      if ((jsonObj.get("invoiceRowComment") != null && !jsonObj.get("invoiceRowComment").isJsonNull()) && !jsonObj.get("invoiceRowComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowComment").toString()));
      }
      if ((jsonObj.get("invoiceRowDescription") != null && !jsonObj.get("invoiceRowDescription").isJsonNull()) && !jsonObj.get("invoiceRowDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowDescription").toString()));
      }
      // validate the optional field `overtime`
      if (jsonObj.get("overtime") != null && !jsonObj.get("overtime").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("overtime"));
      }
      // validate the required field `phase`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("phase"));
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyInputModel.validateJsonElement(jsonObj.get("unitPrice"));
      }
      // validate the required field `user`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("user"));
      // validate the required field `workType`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("workType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkHourInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkHourInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkHourInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkHourInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkHourInputModel>() {
           @Override
           public void write(JsonWriter out, WorkHourInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkHourInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkHourInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkHourInputModel
   * @throws IOException if the JSON string is invalid with respect to WorkHourInputModel
   */
  public static WorkHourInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkHourInputModel.class);
  }

  /**
   * Convert an instance of WorkHourInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

