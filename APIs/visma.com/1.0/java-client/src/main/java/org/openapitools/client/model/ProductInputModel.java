/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MoneyInputModelWithNullableAmount;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductInputModel {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORY = "productCategory";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORY)
  private SimpleInputModel productCategory;

  public static final String SERIALIZED_NAME_PROPOSAL_DESCRIPTION = "proposalDescription";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_DESCRIPTION)
  private String proposalDescription;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT = "salesAccount";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT)
  private SimpleInputModel salesAccount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ProductType type;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyInputModelWithNullableAmount unitCost;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyInputModelWithNullableAmount unitPrice;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProductInputModel() {
  }

  public ProductInputModel code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ProductInputModel isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ProductInputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProductInputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProductInputModel productCategory(SimpleInputModel productCategory) {
    this.productCategory = productCategory;
    return this;
  }

  /**
   * Get productCategory
   * @return productCategory
   */
  @javax.annotation.Nullable
  public SimpleInputModel getProductCategory() {
    return productCategory;
  }

  public void setProductCategory(SimpleInputModel productCategory) {
    this.productCategory = productCategory;
  }


  public ProductInputModel proposalDescription(String proposalDescription) {
    this.proposalDescription = proposalDescription;
    return this;
  }

  /**
   * Get proposalDescription
   * @return proposalDescription
   */
  @javax.annotation.Nullable
  public String getProposalDescription() {
    return proposalDescription;
  }

  public void setProposalDescription(String proposalDescription) {
    this.proposalDescription = proposalDescription;
  }


  public ProductInputModel salesAccount(SimpleInputModel salesAccount) {
    this.salesAccount = salesAccount;
    return this;
  }

  /**
   * Get salesAccount
   * @return salesAccount
   */
  @javax.annotation.Nullable
  public SimpleInputModel getSalesAccount() {
    return salesAccount;
  }

  public void setSalesAccount(SimpleInputModel salesAccount) {
    this.salesAccount = salesAccount;
  }


  public ProductInputModel type(ProductType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ProductType getType() {
    return type;
  }

  public void setType(ProductType type) {
    this.type = type;
  }


  public ProductInputModel unitCost(MoneyInputModelWithNullableAmount unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyInputModelWithNullableAmount unitCost) {
    this.unitCost = unitCost;
  }


  public ProductInputModel unitPrice(MoneyInputModelWithNullableAmount unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyInputModelWithNullableAmount unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProductInputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductInputModel productInputModel = (ProductInputModel) o;
    return Objects.equals(this.code, productInputModel.code) &&
        Objects.equals(this.isActive, productInputModel.isActive) &&
        Objects.equals(this.measurementUnit, productInputModel.measurementUnit) &&
        Objects.equals(this.name, productInputModel.name) &&
        Objects.equals(this.productCategory, productInputModel.productCategory) &&
        Objects.equals(this.proposalDescription, productInputModel.proposalDescription) &&
        Objects.equals(this.salesAccount, productInputModel.salesAccount) &&
        Objects.equals(this.type, productInputModel.type) &&
        Objects.equals(this.unitCost, productInputModel.unitCost) &&
        Objects.equals(this.unitPrice, productInputModel.unitPrice) &&
        Objects.equals(this.vatRate, productInputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, isActive, measurementUnit, name, productCategory, proposalDescription, salesAccount, type, unitCost, unitPrice, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductInputModel {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productCategory: ").append(toIndentedString(productCategory)).append("\n");
    sb.append("    proposalDescription: ").append(toIndentedString(proposalDescription)).append("\n");
    sb.append("    salesAccount: ").append(toIndentedString(salesAccount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("isActive");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("productCategory");
    openapiFields.add("proposalDescription");
    openapiFields.add("salesAccount");
    openapiFields.add("type");
    openapiFields.add("unitCost");
    openapiFields.add("unitPrice");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductInputModel is not found in the empty JSON string", ProductInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `productCategory`
      if (jsonObj.get("productCategory") != null && !jsonObj.get("productCategory").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("productCategory"));
      }
      if ((jsonObj.get("proposalDescription") != null && !jsonObj.get("proposalDescription").isJsonNull()) && !jsonObj.get("proposalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalDescription").toString()));
      }
      // validate the optional field `salesAccount`
      if (jsonObj.get("salesAccount") != null && !jsonObj.get("salesAccount").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("salesAccount"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ProductType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("unitPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductInputModel>() {
           @Override
           public void write(JsonWriter out, ProductInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductInputModel
   * @throws IOException if the JSON string is invalid with respect to ProductInputModel
   */
  public static ProductInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductInputModel.class);
  }

  /**
   * Convert an instance of ProductInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

