/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.client.model.UserWithNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamProductivityOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamProductivityOutputModel {
  public static final String SERIALIZED_NAME_ADJUSTED_SHARE_OF_BILLING = "adjustedShareOfBilling";
  @SerializedName(SERIALIZED_NAME_ADJUSTED_SHARE_OF_BILLING)
  private MoneyOutputModel adjustedShareOfBilling;

  public static final String SERIALIZED_NAME_ADJUSTED_SHARE_OF_BILLING_PERCENTAGE = "adjustedShareOfBillingPercentage";
  @SerializedName(SERIALIZED_NAME_ADJUSTED_SHARE_OF_BILLING_PERCENTAGE)
  private Double adjustedShareOfBillingPercentage;

  public static final String SERIALIZED_NAME_BILLABLE_HOURS_PERCENTAGE = "billableHoursPercentage";
  @SerializedName(SERIALIZED_NAME_BILLABLE_HOURS_PERCENTAGE)
  private Double billableHoursPercentage;

  public static final String SERIALIZED_NAME_CALCULATED_SHARE_OF_BILLING = "calculatedShareOfBilling";
  @SerializedName(SERIALIZED_NAME_CALCULATED_SHARE_OF_BILLING)
  private MoneyOutputModel calculatedShareOfBilling;

  public static final String SERIALIZED_NAME_CALCULATED_SHARE_OF_BILLING_PERCENTAGE = "calculatedShareOfBillingPercentage";
  @SerializedName(SERIALIZED_NAME_CALCULATED_SHARE_OF_BILLING_PERCENTAGE)
  private Double calculatedShareOfBillingPercentage;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_PROJECT_GUID = "projectGuid";
  @SerializedName(SERIALIZED_NAME_PROJECT_GUID)
  private String projectGuid;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserWithNameAndPhotoFileModel user;

  public static final String SERIALIZED_NAME_WORK_HOURS = "workHours";
  @SerializedName(SERIALIZED_NAME_WORK_HOURS)
  private Double workHours;

  public static final String SERIALIZED_NAME_WORK_HOURS_BILLABLE = "workHoursBillable";
  @SerializedName(SERIALIZED_NAME_WORK_HOURS_BILLABLE)
  private Double workHoursBillable;

  public static final String SERIALIZED_NAME_WORK_HOURS_COST = "workHoursCost";
  @SerializedName(SERIALIZED_NAME_WORK_HOURS_COST)
  private MoneyOutputModel workHoursCost;

  public static final String SERIALIZED_NAME_WORK_HOURS_VALUE = "workHoursValue";
  @SerializedName(SERIALIZED_NAME_WORK_HOURS_VALUE)
  private MoneyOutputModel workHoursValue;

  public TeamProductivityOutputModel() {
  }

  public TeamProductivityOutputModel adjustedShareOfBilling(MoneyOutputModel adjustedShareOfBilling) {
    this.adjustedShareOfBilling = adjustedShareOfBilling;
    return this;
  }

  /**
   * Get adjustedShareOfBilling
   * @return adjustedShareOfBilling
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getAdjustedShareOfBilling() {
    return adjustedShareOfBilling;
  }

  public void setAdjustedShareOfBilling(MoneyOutputModel adjustedShareOfBilling) {
    this.adjustedShareOfBilling = adjustedShareOfBilling;
  }


  public TeamProductivityOutputModel adjustedShareOfBillingPercentage(Double adjustedShareOfBillingPercentage) {
    this.adjustedShareOfBillingPercentage = adjustedShareOfBillingPercentage;
    return this;
  }

  /**
   * Get adjustedShareOfBillingPercentage
   * @return adjustedShareOfBillingPercentage
   */
  @javax.annotation.Nullable
  public Double getAdjustedShareOfBillingPercentage() {
    return adjustedShareOfBillingPercentage;
  }

  public void setAdjustedShareOfBillingPercentage(Double adjustedShareOfBillingPercentage) {
    this.adjustedShareOfBillingPercentage = adjustedShareOfBillingPercentage;
  }


  public TeamProductivityOutputModel billableHoursPercentage(Double billableHoursPercentage) {
    this.billableHoursPercentage = billableHoursPercentage;
    return this;
  }

  /**
   * Get billableHoursPercentage
   * @return billableHoursPercentage
   */
  @javax.annotation.Nullable
  public Double getBillableHoursPercentage() {
    return billableHoursPercentage;
  }

  public void setBillableHoursPercentage(Double billableHoursPercentage) {
    this.billableHoursPercentage = billableHoursPercentage;
  }


  public TeamProductivityOutputModel calculatedShareOfBilling(MoneyOutputModel calculatedShareOfBilling) {
    this.calculatedShareOfBilling = calculatedShareOfBilling;
    return this;
  }

  /**
   * Get calculatedShareOfBilling
   * @return calculatedShareOfBilling
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getCalculatedShareOfBilling() {
    return calculatedShareOfBilling;
  }

  public void setCalculatedShareOfBilling(MoneyOutputModel calculatedShareOfBilling) {
    this.calculatedShareOfBilling = calculatedShareOfBilling;
  }


  public TeamProductivityOutputModel calculatedShareOfBillingPercentage(Double calculatedShareOfBillingPercentage) {
    this.calculatedShareOfBillingPercentage = calculatedShareOfBillingPercentage;
    return this;
  }

  /**
   * Get calculatedShareOfBillingPercentage
   * @return calculatedShareOfBillingPercentage
   */
  @javax.annotation.Nullable
  public Double getCalculatedShareOfBillingPercentage() {
    return calculatedShareOfBillingPercentage;
  }

  public void setCalculatedShareOfBillingPercentage(Double calculatedShareOfBillingPercentage) {
    this.calculatedShareOfBillingPercentage = calculatedShareOfBillingPercentage;
  }


  public TeamProductivityOutputModel guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public TeamProductivityOutputModel projectGuid(String projectGuid) {
    this.projectGuid = projectGuid;
    return this;
  }

  /**
   * Get projectGuid
   * @return projectGuid
   */
  @javax.annotation.Nullable
  public String getProjectGuid() {
    return projectGuid;
  }

  public void setProjectGuid(String projectGuid) {
    this.projectGuid = projectGuid;
  }


  public TeamProductivityOutputModel user(UserWithNameAndPhotoFileModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserWithNameAndPhotoFileModel getUser() {
    return user;
  }

  public void setUser(UserWithNameAndPhotoFileModel user) {
    this.user = user;
  }


  public TeamProductivityOutputModel workHours(Double workHours) {
    this.workHours = workHours;
    return this;
  }

  /**
   * Get workHours
   * @return workHours
   */
  @javax.annotation.Nullable
  public Double getWorkHours() {
    return workHours;
  }

  public void setWorkHours(Double workHours) {
    this.workHours = workHours;
  }


  public TeamProductivityOutputModel workHoursBillable(Double workHoursBillable) {
    this.workHoursBillable = workHoursBillable;
    return this;
  }

  /**
   * Get workHoursBillable
   * @return workHoursBillable
   */
  @javax.annotation.Nullable
  public Double getWorkHoursBillable() {
    return workHoursBillable;
  }

  public void setWorkHoursBillable(Double workHoursBillable) {
    this.workHoursBillable = workHoursBillable;
  }


  public TeamProductivityOutputModel workHoursCost(MoneyOutputModel workHoursCost) {
    this.workHoursCost = workHoursCost;
    return this;
  }

  /**
   * Get workHoursCost
   * @return workHoursCost
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getWorkHoursCost() {
    return workHoursCost;
  }

  public void setWorkHoursCost(MoneyOutputModel workHoursCost) {
    this.workHoursCost = workHoursCost;
  }


  public TeamProductivityOutputModel workHoursValue(MoneyOutputModel workHoursValue) {
    this.workHoursValue = workHoursValue;
    return this;
  }

  /**
   * Get workHoursValue
   * @return workHoursValue
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getWorkHoursValue() {
    return workHoursValue;
  }

  public void setWorkHoursValue(MoneyOutputModel workHoursValue) {
    this.workHoursValue = workHoursValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamProductivityOutputModel teamProductivityOutputModel = (TeamProductivityOutputModel) o;
    return Objects.equals(this.adjustedShareOfBilling, teamProductivityOutputModel.adjustedShareOfBilling) &&
        Objects.equals(this.adjustedShareOfBillingPercentage, teamProductivityOutputModel.adjustedShareOfBillingPercentage) &&
        Objects.equals(this.billableHoursPercentage, teamProductivityOutputModel.billableHoursPercentage) &&
        Objects.equals(this.calculatedShareOfBilling, teamProductivityOutputModel.calculatedShareOfBilling) &&
        Objects.equals(this.calculatedShareOfBillingPercentage, teamProductivityOutputModel.calculatedShareOfBillingPercentage) &&
        Objects.equals(this.guid, teamProductivityOutputModel.guid) &&
        Objects.equals(this.projectGuid, teamProductivityOutputModel.projectGuid) &&
        Objects.equals(this.user, teamProductivityOutputModel.user) &&
        Objects.equals(this.workHours, teamProductivityOutputModel.workHours) &&
        Objects.equals(this.workHoursBillable, teamProductivityOutputModel.workHoursBillable) &&
        Objects.equals(this.workHoursCost, teamProductivityOutputModel.workHoursCost) &&
        Objects.equals(this.workHoursValue, teamProductivityOutputModel.workHoursValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustedShareOfBilling, adjustedShareOfBillingPercentage, billableHoursPercentage, calculatedShareOfBilling, calculatedShareOfBillingPercentage, guid, projectGuid, user, workHours, workHoursBillable, workHoursCost, workHoursValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamProductivityOutputModel {\n");
    sb.append("    adjustedShareOfBilling: ").append(toIndentedString(adjustedShareOfBilling)).append("\n");
    sb.append("    adjustedShareOfBillingPercentage: ").append(toIndentedString(adjustedShareOfBillingPercentage)).append("\n");
    sb.append("    billableHoursPercentage: ").append(toIndentedString(billableHoursPercentage)).append("\n");
    sb.append("    calculatedShareOfBilling: ").append(toIndentedString(calculatedShareOfBilling)).append("\n");
    sb.append("    calculatedShareOfBillingPercentage: ").append(toIndentedString(calculatedShareOfBillingPercentage)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    projectGuid: ").append(toIndentedString(projectGuid)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workHours: ").append(toIndentedString(workHours)).append("\n");
    sb.append("    workHoursBillable: ").append(toIndentedString(workHoursBillable)).append("\n");
    sb.append("    workHoursCost: ").append(toIndentedString(workHoursCost)).append("\n");
    sb.append("    workHoursValue: ").append(toIndentedString(workHoursValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustedShareOfBilling");
    openapiFields.add("adjustedShareOfBillingPercentage");
    openapiFields.add("billableHoursPercentage");
    openapiFields.add("calculatedShareOfBilling");
    openapiFields.add("calculatedShareOfBillingPercentage");
    openapiFields.add("guid");
    openapiFields.add("projectGuid");
    openapiFields.add("user");
    openapiFields.add("workHours");
    openapiFields.add("workHoursBillable");
    openapiFields.add("workHoursCost");
    openapiFields.add("workHoursValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamProductivityOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamProductivityOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamProductivityOutputModel is not found in the empty JSON string", TeamProductivityOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamProductivityOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamProductivityOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustedShareOfBilling`
      if (jsonObj.get("adjustedShareOfBilling") != null && !jsonObj.get("adjustedShareOfBilling").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("adjustedShareOfBilling"));
      }
      // validate the optional field `calculatedShareOfBilling`
      if (jsonObj.get("calculatedShareOfBilling") != null && !jsonObj.get("calculatedShareOfBilling").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("calculatedShareOfBilling"));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("projectGuid") != null && !jsonObj.get("projectGuid").isJsonNull()) && !jsonObj.get("projectGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectGuid").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserWithNameAndPhotoFileModel.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `workHoursCost`
      if (jsonObj.get("workHoursCost") != null && !jsonObj.get("workHoursCost").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("workHoursCost"));
      }
      // validate the optional field `workHoursValue`
      if (jsonObj.get("workHoursValue") != null && !jsonObj.get("workHoursValue").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("workHoursValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamProductivityOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamProductivityOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamProductivityOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamProductivityOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamProductivityOutputModel>() {
           @Override
           public void write(JsonWriter out, TeamProductivityOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamProductivityOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamProductivityOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamProductivityOutputModel
   * @throws IOException if the JSON string is invalid with respect to TeamProductivityOutputModel
   */
  public static TeamProductivityOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamProductivityOutputModel.class);
  }

  /**
   * Convert an instance of TeamProductivityOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

