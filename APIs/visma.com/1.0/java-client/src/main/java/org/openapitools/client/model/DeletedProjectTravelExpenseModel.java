/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ModelBaseReadOnly;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeletedProjectTravelExpenseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeletedProjectTravelExpenseModel {
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private ModelBaseReadOnly createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private ModelBaseReadOnly customer;

  public static final String SERIALIZED_NAME_DELETED_DATE_TIME = "deletedDateTime";
  @SerializedName(SERIALIZED_NAME_DELETED_DATE_TIME)
  private OffsetDateTime deletedDateTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private LocalDate eventDate;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private ModelBaseReadOnly lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private ModelBaseReadOnly phase;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ModelBaseReadOnly project;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_TRAVEL_END_TIME = "travelEndTime";
  @SerializedName(SERIALIZED_NAME_TRAVEL_END_TIME)
  private OffsetDateTime travelEndTime;

  public static final String SERIALIZED_NAME_TRAVEL_EXPENSE = "travelExpense";
  @SerializedName(SERIALIZED_NAME_TRAVEL_EXPENSE)
  private ModelBaseReadOnly travelExpense;

  public static final String SERIALIZED_NAME_TRAVEL_START_TIME = "travelStartTime";
  @SerializedName(SERIALIZED_NAME_TRAVEL_START_TIME)
  private OffsetDateTime travelStartTime;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private ModelBaseReadOnly user;

  public DeletedProjectTravelExpenseModel() {
  }

  public DeletedProjectTravelExpenseModel(
     OffsetDateTime createdDateTime, 
     OffsetDateTime deletedDateTime, 
     String description, 
     LocalDate eventDate, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime, 
     String measurementUnit, 
     Double quantity, 
     OffsetDateTime travelEndTime, 
     OffsetDateTime travelStartTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.deletedDateTime = deletedDateTime;
    this.description = description;
    this.eventDate = eventDate;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    this.measurementUnit = measurementUnit;
    this.quantity = quantity;
    this.travelEndTime = travelEndTime;
    this.travelStartTime = travelStartTime;
  }

  public DeletedProjectTravelExpenseModel createdBy(ModelBaseReadOnly createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(ModelBaseReadOnly createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public DeletedProjectTravelExpenseModel customer(ModelBaseReadOnly customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getCustomer() {
    return customer;
  }

  public void setCustomer(ModelBaseReadOnly customer) {
    this.customer = customer;
  }


  /**
   * Get deletedDateTime
   * @return deletedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedDateTime() {
    return deletedDateTime;
  }



  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventDate() {
    return eventDate;
  }



  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public DeletedProjectTravelExpenseModel lastUpdatedBy(ModelBaseReadOnly lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(ModelBaseReadOnly lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }



  public DeletedProjectTravelExpenseModel phase(ModelBaseReadOnly phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getPhase() {
    return phase;
  }

  public void setPhase(ModelBaseReadOnly phase) {
    this.phase = phase;
  }


  public DeletedProjectTravelExpenseModel project(ModelBaseReadOnly project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getProject() {
    return project;
  }

  public void setProject(ModelBaseReadOnly project) {
    this.project = project;
  }


  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }



  /**
   * Get travelEndTime
   * @return travelEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTravelEndTime() {
    return travelEndTime;
  }



  public DeletedProjectTravelExpenseModel travelExpense(ModelBaseReadOnly travelExpense) {
    this.travelExpense = travelExpense;
    return this;
  }

  /**
   * Get travelExpense
   * @return travelExpense
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getTravelExpense() {
    return travelExpense;
  }

  public void setTravelExpense(ModelBaseReadOnly travelExpense) {
    this.travelExpense = travelExpense;
  }


  /**
   * Get travelStartTime
   * @return travelStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTravelStartTime() {
    return travelStartTime;
  }



  public DeletedProjectTravelExpenseModel user(ModelBaseReadOnly user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public ModelBaseReadOnly getUser() {
    return user;
  }

  public void setUser(ModelBaseReadOnly user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletedProjectTravelExpenseModel deletedProjectTravelExpenseModel = (DeletedProjectTravelExpenseModel) o;
    return Objects.equals(this.createdBy, deletedProjectTravelExpenseModel.createdBy) &&
        Objects.equals(this.createdDateTime, deletedProjectTravelExpenseModel.createdDateTime) &&
        Objects.equals(this.customer, deletedProjectTravelExpenseModel.customer) &&
        Objects.equals(this.deletedDateTime, deletedProjectTravelExpenseModel.deletedDateTime) &&
        Objects.equals(this.description, deletedProjectTravelExpenseModel.description) &&
        Objects.equals(this.eventDate, deletedProjectTravelExpenseModel.eventDate) &&
        Objects.equals(this.guid, deletedProjectTravelExpenseModel.guid) &&
        Objects.equals(this.lastUpdatedBy, deletedProjectTravelExpenseModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, deletedProjectTravelExpenseModel.lastUpdatedDateTime) &&
        Objects.equals(this.measurementUnit, deletedProjectTravelExpenseModel.measurementUnit) &&
        Objects.equals(this.phase, deletedProjectTravelExpenseModel.phase) &&
        Objects.equals(this.project, deletedProjectTravelExpenseModel.project) &&
        Objects.equals(this.quantity, deletedProjectTravelExpenseModel.quantity) &&
        Objects.equals(this.travelEndTime, deletedProjectTravelExpenseModel.travelEndTime) &&
        Objects.equals(this.travelExpense, deletedProjectTravelExpenseModel.travelExpense) &&
        Objects.equals(this.travelStartTime, deletedProjectTravelExpenseModel.travelStartTime) &&
        Objects.equals(this.user, deletedProjectTravelExpenseModel.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBy, createdDateTime, customer, deletedDateTime, description, eventDate, guid, lastUpdatedBy, lastUpdatedDateTime, measurementUnit, phase, project, quantity, travelEndTime, travelExpense, travelStartTime, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletedProjectTravelExpenseModel {\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    deletedDateTime: ").append(toIndentedString(deletedDateTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    travelEndTime: ").append(toIndentedString(travelEndTime)).append("\n");
    sb.append("    travelExpense: ").append(toIndentedString(travelExpense)).append("\n");
    sb.append("    travelStartTime: ").append(toIndentedString(travelStartTime)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("customer");
    openapiFields.add("deletedDateTime");
    openapiFields.add("description");
    openapiFields.add("eventDate");
    openapiFields.add("guid");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("measurementUnit");
    openapiFields.add("phase");
    openapiFields.add("project");
    openapiFields.add("quantity");
    openapiFields.add("travelEndTime");
    openapiFields.add("travelExpense");
    openapiFields.add("travelStartTime");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletedProjectTravelExpenseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletedProjectTravelExpenseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletedProjectTravelExpenseModel is not found in the empty JSON string", DeletedProjectTravelExpenseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletedProjectTravelExpenseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletedProjectTravelExpenseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `travelExpense`
      if (jsonObj.get("travelExpense") != null && !jsonObj.get("travelExpense").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("travelExpense"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        ModelBaseReadOnly.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletedProjectTravelExpenseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletedProjectTravelExpenseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletedProjectTravelExpenseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletedProjectTravelExpenseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletedProjectTravelExpenseModel>() {
           @Override
           public void write(JsonWriter out, DeletedProjectTravelExpenseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletedProjectTravelExpenseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletedProjectTravelExpenseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletedProjectTravelExpenseModel
   * @throws IOException if the JSON string is invalid with respect to DeletedProjectTravelExpenseModel
   */
  public static DeletedProjectTravelExpenseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletedProjectTravelExpenseModel.class);
  }

  /**
   * Convert an instance of DeletedProjectTravelExpenseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

