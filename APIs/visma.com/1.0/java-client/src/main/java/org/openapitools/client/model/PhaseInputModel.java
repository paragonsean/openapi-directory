/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.ModelBaseWithRequiredGuid;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.PhaseStatusInputModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PhaseInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhaseInputModel {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEADLINE = "deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private LocalDate deadline;

  public static final String SERIALIZED_NAME_DEFAULT_WORK_TYPE = "defaultWorkType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_WORK_TYPE)
  private ModelWithName defaultWorkType;

  public static final String SERIALIZED_NAME_IS_CLOSED = "isClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed = false;

  public static final String SERIALIZED_NAME_IS_COMPLETED = "isCompleted";
  @SerializedName(SERIALIZED_NAME_IS_COMPLETED)
  private Boolean isCompleted = false;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_DEADLINE = "originalDeadline";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DEADLINE)
  private LocalDate originalDeadline;

  public static final String SERIALIZED_NAME_ORIGINAL_START_DATE = "originalStartDate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_START_DATE)
  private LocalDate originalStartDate;

  public static final String SERIALIZED_NAME_ORIGINAL_WORK_HOURS_ESTIMATE = "originalWorkHoursEstimate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_WORK_HOURS_ESTIMATE)
  private Double originalWorkHoursEstimate;

  public static final String SERIALIZED_NAME_PARENT_PHASE = "parentPhase";
  @SerializedName(SERIALIZED_NAME_PARENT_PHASE)
  private ModelBaseWithRequiredGuid parentPhase;

  public static final String SERIALIZED_NAME_PHASE_STATUS = "phaseStatus";
  @SerializedName(SERIALIZED_NAME_PHASE_STATUS)
  private PhaseStatusInputModel phaseStatus;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ModelBaseWithRequiredGuid project;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_WORK_HOURS_ESTIMATE = "workHoursEstimate";
  @SerializedName(SERIALIZED_NAME_WORK_HOURS_ESTIMATE)
  private Double workHoursEstimate;

  public PhaseInputModel() {
  }

  public PhaseInputModel code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public PhaseInputModel deadline(LocalDate deadline) {
    this.deadline = deadline;
    return this;
  }

  /**
   * Get deadline
   * @return deadline
   */
  @javax.annotation.Nullable
  public LocalDate getDeadline() {
    return deadline;
  }

  public void setDeadline(LocalDate deadline) {
    this.deadline = deadline;
  }


  public PhaseInputModel defaultWorkType(ModelWithName defaultWorkType) {
    this.defaultWorkType = defaultWorkType;
    return this;
  }

  /**
   * Get defaultWorkType
   * @return defaultWorkType
   */
  @javax.annotation.Nullable
  public ModelWithName getDefaultWorkType() {
    return defaultWorkType;
  }

  public void setDefaultWorkType(ModelWithName defaultWorkType) {
    this.defaultWorkType = defaultWorkType;
  }


  public PhaseInputModel isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public PhaseInputModel isCompleted(Boolean isCompleted) {
    this.isCompleted = isCompleted;
    return this;
  }

  /**
   * Get isCompleted
   * @return isCompleted
   */
  @javax.annotation.Nullable
  public Boolean getIsCompleted() {
    return isCompleted;
  }

  public void setIsCompleted(Boolean isCompleted) {
    this.isCompleted = isCompleted;
  }


  public PhaseInputModel isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * Get isLocked
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public PhaseInputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PhaseInputModel originalDeadline(LocalDate originalDeadline) {
    this.originalDeadline = originalDeadline;
    return this;
  }

  /**
   * Get originalDeadline
   * @return originalDeadline
   */
  @javax.annotation.Nullable
  public LocalDate getOriginalDeadline() {
    return originalDeadline;
  }

  public void setOriginalDeadline(LocalDate originalDeadline) {
    this.originalDeadline = originalDeadline;
  }


  public PhaseInputModel originalStartDate(LocalDate originalStartDate) {
    this.originalStartDate = originalStartDate;
    return this;
  }

  /**
   * Get originalStartDate
   * @return originalStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getOriginalStartDate() {
    return originalStartDate;
  }

  public void setOriginalStartDate(LocalDate originalStartDate) {
    this.originalStartDate = originalStartDate;
  }


  public PhaseInputModel originalWorkHoursEstimate(Double originalWorkHoursEstimate) {
    this.originalWorkHoursEstimate = originalWorkHoursEstimate;
    return this;
  }

  /**
   * Get originalWorkHoursEstimate
   * @return originalWorkHoursEstimate
   */
  @javax.annotation.Nullable
  public Double getOriginalWorkHoursEstimate() {
    return originalWorkHoursEstimate;
  }

  public void setOriginalWorkHoursEstimate(Double originalWorkHoursEstimate) {
    this.originalWorkHoursEstimate = originalWorkHoursEstimate;
  }


  public PhaseInputModel parentPhase(ModelBaseWithRequiredGuid parentPhase) {
    this.parentPhase = parentPhase;
    return this;
  }

  /**
   * Get parentPhase
   * @return parentPhase
   */
  @javax.annotation.Nonnull
  public ModelBaseWithRequiredGuid getParentPhase() {
    return parentPhase;
  }

  public void setParentPhase(ModelBaseWithRequiredGuid parentPhase) {
    this.parentPhase = parentPhase;
  }


  public PhaseInputModel phaseStatus(PhaseStatusInputModel phaseStatus) {
    this.phaseStatus = phaseStatus;
    return this;
  }

  /**
   * Get phaseStatus
   * @return phaseStatus
   */
  @javax.annotation.Nullable
  public PhaseStatusInputModel getPhaseStatus() {
    return phaseStatus;
  }

  public void setPhaseStatus(PhaseStatusInputModel phaseStatus) {
    this.phaseStatus = phaseStatus;
  }


  public PhaseInputModel project(ModelBaseWithRequiredGuid project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ModelBaseWithRequiredGuid getProject() {
    return project;
  }

  public void setProject(ModelBaseWithRequiredGuid project) {
    this.project = project;
  }


  public PhaseInputModel sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public PhaseInputModel startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public PhaseInputModel workHoursEstimate(Double workHoursEstimate) {
    this.workHoursEstimate = workHoursEstimate;
    return this;
  }

  /**
   * Get workHoursEstimate
   * @return workHoursEstimate
   */
  @javax.annotation.Nullable
  public Double getWorkHoursEstimate() {
    return workHoursEstimate;
  }

  public void setWorkHoursEstimate(Double workHoursEstimate) {
    this.workHoursEstimate = workHoursEstimate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhaseInputModel phaseInputModel = (PhaseInputModel) o;
    return Objects.equals(this.code, phaseInputModel.code) &&
        Objects.equals(this.deadline, phaseInputModel.deadline) &&
        Objects.equals(this.defaultWorkType, phaseInputModel.defaultWorkType) &&
        Objects.equals(this.isClosed, phaseInputModel.isClosed) &&
        Objects.equals(this.isCompleted, phaseInputModel.isCompleted) &&
        Objects.equals(this.isLocked, phaseInputModel.isLocked) &&
        Objects.equals(this.name, phaseInputModel.name) &&
        Objects.equals(this.originalDeadline, phaseInputModel.originalDeadline) &&
        Objects.equals(this.originalStartDate, phaseInputModel.originalStartDate) &&
        Objects.equals(this.originalWorkHoursEstimate, phaseInputModel.originalWorkHoursEstimate) &&
        Objects.equals(this.parentPhase, phaseInputModel.parentPhase) &&
        Objects.equals(this.phaseStatus, phaseInputModel.phaseStatus) &&
        Objects.equals(this.project, phaseInputModel.project) &&
        Objects.equals(this.sortOrder, phaseInputModel.sortOrder) &&
        Objects.equals(this.startDate, phaseInputModel.startDate) &&
        Objects.equals(this.workHoursEstimate, phaseInputModel.workHoursEstimate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, deadline, defaultWorkType, isClosed, isCompleted, isLocked, name, originalDeadline, originalStartDate, originalWorkHoursEstimate, parentPhase, phaseStatus, project, sortOrder, startDate, workHoursEstimate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhaseInputModel {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    defaultWorkType: ").append(toIndentedString(defaultWorkType)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    isCompleted: ").append(toIndentedString(isCompleted)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalDeadline: ").append(toIndentedString(originalDeadline)).append("\n");
    sb.append("    originalStartDate: ").append(toIndentedString(originalStartDate)).append("\n");
    sb.append("    originalWorkHoursEstimate: ").append(toIndentedString(originalWorkHoursEstimate)).append("\n");
    sb.append("    parentPhase: ").append(toIndentedString(parentPhase)).append("\n");
    sb.append("    phaseStatus: ").append(toIndentedString(phaseStatus)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    workHoursEstimate: ").append(toIndentedString(workHoursEstimate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("deadline");
    openapiFields.add("defaultWorkType");
    openapiFields.add("isClosed");
    openapiFields.add("isCompleted");
    openapiFields.add("isLocked");
    openapiFields.add("name");
    openapiFields.add("originalDeadline");
    openapiFields.add("originalStartDate");
    openapiFields.add("originalWorkHoursEstimate");
    openapiFields.add("parentPhase");
    openapiFields.add("phaseStatus");
    openapiFields.add("project");
    openapiFields.add("sortOrder");
    openapiFields.add("startDate");
    openapiFields.add("workHoursEstimate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parentPhase");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhaseInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhaseInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhaseInputModel is not found in the empty JSON string", PhaseInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhaseInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhaseInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhaseInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `defaultWorkType`
      if (jsonObj.get("defaultWorkType") != null && !jsonObj.get("defaultWorkType").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("defaultWorkType"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `parentPhase`
      ModelBaseWithRequiredGuid.validateJsonElement(jsonObj.get("parentPhase"));
      // validate the optional field `phaseStatus`
      if (jsonObj.get("phaseStatus") != null && !jsonObj.get("phaseStatus").isJsonNull()) {
        PhaseStatusInputModel.validateJsonElement(jsonObj.get("phaseStatus"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ModelBaseWithRequiredGuid.validateJsonElement(jsonObj.get("project"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhaseInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhaseInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhaseInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhaseInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PhaseInputModel>() {
           @Override
           public void write(JsonWriter out, PhaseInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhaseInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhaseInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhaseInputModel
   * @throws IOException if the JSON string is invalid with respect to PhaseInputModel
   */
  public static PhaseInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhaseInputModel.class);
  }

  /**
   * Convert an instance of PhaseInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

