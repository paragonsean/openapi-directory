/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompanyCountry;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyModel {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private CompanyCountry country;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_GUID = "currencyGuid";
  @SerializedName(SERIALIZED_NAME_CURRENCY_GUID)
  private String currencyGuid;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "currencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_CURRENCY_SYMBOL = "currencySymbol";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SYMBOL)
  private String currencySymbol;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROOT_BUSINESS_UNIT_GUID = "rootBusinessUnitGuid";
  @SerializedName(SERIALIZED_NAME_ROOT_BUSINESS_UNIT_GUID)
  private String rootBusinessUnitGuid;

  public CompanyModel() {
  }

  public CompanyModel(
     String currencyCode, 
     String currencyGuid, 
     Double currencyRate, 
     String currencySymbol, 
     String rootBusinessUnitGuid
  ) {
    this();
    this.currencyCode = currencyCode;
    this.currencyGuid = currencyGuid;
    this.currencyRate = currencyRate;
    this.currencySymbol = currencySymbol;
    this.rootBusinessUnitGuid = rootBusinessUnitGuid;
  }

  public CompanyModel country(CompanyCountry country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public CompanyCountry getCountry() {
    return country;
  }

  public void setCountry(CompanyCountry country) {
    this.country = country;
  }


  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }



  /**
   * Get currencyGuid
   * @return currencyGuid
   */
  @javax.annotation.Nullable
  public String getCurrencyGuid() {
    return currencyGuid;
  }



  /**
   * Get currencyRate
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }



  /**
   * Get currencySymbol
   * @return currencySymbol
   */
  @javax.annotation.Nullable
  public String getCurrencySymbol() {
    return currencySymbol;
  }



  public CompanyModel guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public CompanyModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get rootBusinessUnitGuid
   * @return rootBusinessUnitGuid
   */
  @javax.annotation.Nullable
  public String getRootBusinessUnitGuid() {
    return rootBusinessUnitGuid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyModel companyModel = (CompanyModel) o;
    return Objects.equals(this.country, companyModel.country) &&
        Objects.equals(this.currencyCode, companyModel.currencyCode) &&
        Objects.equals(this.currencyGuid, companyModel.currencyGuid) &&
        Objects.equals(this.currencyRate, companyModel.currencyRate) &&
        Objects.equals(this.currencySymbol, companyModel.currencySymbol) &&
        Objects.equals(this.guid, companyModel.guid) &&
        Objects.equals(this.name, companyModel.name) &&
        Objects.equals(this.rootBusinessUnitGuid, companyModel.rootBusinessUnitGuid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, currencyCode, currencyGuid, currencyRate, currencySymbol, guid, name, rootBusinessUnitGuid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyModel {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyGuid: ").append(toIndentedString(currencyGuid)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rootBusinessUnitGuid: ").append(toIndentedString(rootBusinessUnitGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("currencyCode");
    openapiFields.add("currencyGuid");
    openapiFields.add("currencyRate");
    openapiFields.add("currencySymbol");
    openapiFields.add("guid");
    openapiFields.add("name");
    openapiFields.add("rootBusinessUnitGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyModel is not found in the empty JSON string", CompanyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        CompanyCountry.validateJsonElement(jsonObj.get("country"));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("currencyGuid") != null && !jsonObj.get("currencyGuid").isJsonNull()) && !jsonObj.get("currencyGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyGuid").toString()));
      }
      if ((jsonObj.get("currencySymbol") != null && !jsonObj.get("currencySymbol").isJsonNull()) && !jsonObj.get("currencySymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencySymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencySymbol").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rootBusinessUnitGuid") != null && !jsonObj.get("rootBusinessUnitGuid").isJsonNull()) && !jsonObj.get("rootBusinessUnitGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootBusinessUnitGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootBusinessUnitGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyModel>() {
           @Override
           public void write(JsonWriter out, CompanyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyModel
   * @throws IOException if the JSON string is invalid with respect to CompanyModel
   */
  public static CompanyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyModel.class);
  }

  /**
   * Convert an instance of CompanyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

