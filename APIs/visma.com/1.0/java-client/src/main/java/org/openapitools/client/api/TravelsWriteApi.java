/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.ProjectTravelExpenseInputModel;
import org.openapitools.client.model.ProjectTravelExpenseOutputModel;
import org.openapitools.client.model.TravelReimbursementInputModel;
import org.openapitools.client.model.TravelReimbursementOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TravelsWriteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TravelsWriteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TravelsWriteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectTravelExpensesPatchProjectTravelExpense
     * @param guid ID of the project travel expense. (required)
     * @param patchOperation JSON Patch document of ProjectTravelExpenseInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project travel expenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesPatchProjectTravelExpenseCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projecttravelexpenses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesPatchProjectTravelExpenseValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectTravelExpensesPatchProjectTravelExpense(Async)");
        }

        return projectTravelExpensesPatchProjectTravelExpenseCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project travel expense or a part of it.
     * 
     * @param guid ID of the project travel expense. (required)
     * @param patchOperation JSON Patch document of ProjectTravelExpenseInputModel. (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project travel expenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesPatchProjectTravelExpense(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesPatchProjectTravelExpenseWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project travel expense or a part of it.
     * 
     * @param guid ID of the project travel expense. (required)
     * @param patchOperation JSON Patch document of ProjectTravelExpenseInputModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project travel expenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesPatchProjectTravelExpenseWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesPatchProjectTravelExpenseValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project travel expense or a part of it. (asynchronously)
     * 
     * @param guid ID of the project travel expense. (required)
     * @param patchOperation JSON Patch document of ProjectTravelExpenseInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project travel expenses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesPatchProjectTravelExpenseAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesPatchProjectTravelExpenseValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesPostProjectTravelExpense
     * @param projectTravelExpenseInputModel ProjectTravelExpenseInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project travel expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesPostProjectTravelExpenseCall(ProjectTravelExpenseInputModel projectTravelExpenseInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectTravelExpenseInputModel;

        // create path and map variables
        String localVarPath = "/v1/projecttravelexpenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesPostProjectTravelExpenseValidateBeforeCall(ProjectTravelExpenseInputModel projectTravelExpenseInputModel, final ApiCallback _callback) throws ApiException {
        return projectTravelExpensesPostProjectTravelExpenseCall(projectTravelExpenseInputModel, _callback);

    }

    /**
     * Insert a project travel expense.
     * 
     * @param projectTravelExpenseInputModel ProjectTravelExpenseInputModel. (optional)
     * @return ProjectTravelExpenseOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project travel expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectTravelExpenseOutputModel projectTravelExpensesPostProjectTravelExpense(ProjectTravelExpenseInputModel projectTravelExpenseInputModel) throws ApiException {
        ApiResponse<ProjectTravelExpenseOutputModel> localVarResp = projectTravelExpensesPostProjectTravelExpenseWithHttpInfo(projectTravelExpenseInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project travel expense.
     * 
     * @param projectTravelExpenseInputModel ProjectTravelExpenseInputModel. (optional)
     * @return ApiResponse&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project travel expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectTravelExpenseOutputModel> projectTravelExpensesPostProjectTravelExpenseWithHttpInfo(ProjectTravelExpenseInputModel projectTravelExpenseInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesPostProjectTravelExpenseValidateBeforeCall(projectTravelExpenseInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectTravelExpenseOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project travel expense. (asynchronously)
     * 
     * @param projectTravelExpenseInputModel ProjectTravelExpenseInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project travel expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesPostProjectTravelExpenseAsync(ProjectTravelExpenseInputModel projectTravelExpenseInputModel, final ApiCallback<ProjectTravelExpenseOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesPostProjectTravelExpenseValidateBeforeCall(projectTravelExpenseInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectTravelExpenseOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementsPatchTravelReimbursement
     * @param guid ID of the travel reimbursement (required)
     * @param patchOperation JSON Patch document (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsPatchTravelReimbursementCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursements/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementsPatchTravelReimbursementValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelReimbursementsPatchTravelReimbursement(Async)");
        }

        return travelReimbursementsPatchTravelReimbursementCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a travel reimbursement
     * 
     * @param guid ID of the travel reimbursement (required)
     * @param patchOperation JSON Patch document (optional)
     * @return List&lt;TravelReimbursementOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelReimbursementOutputModel> travelReimbursementsPatchTravelReimbursement(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<TravelReimbursementOutputModel>> localVarResp = travelReimbursementsPatchTravelReimbursementWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a travel reimbursement
     * 
     * @param guid ID of the travel reimbursement (required)
     * @param patchOperation JSON Patch document (optional)
     * @return ApiResponse&lt;List&lt;TravelReimbursementOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelReimbursementOutputModel>> travelReimbursementsPatchTravelReimbursementWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementsPatchTravelReimbursementValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a travel reimbursement (asynchronously)
     * 
     * @param guid ID of the travel reimbursement (required)
     * @param patchOperation JSON Patch document (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsPatchTravelReimbursementAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<TravelReimbursementOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementsPatchTravelReimbursementValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementsPostTravelReimbursement
     * @param addAllUnreimbursedTravelExpenses Optional: Add all of user&#39;s unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added. (optional, default to true)
     * @param includedProjectTravelExpenses Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored. (optional)
     * @param travelReimbursementInputModel TravelReimbursementModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsPostTravelReimbursementCall(Boolean addAllUnreimbursedTravelExpenses, List<String> includedProjectTravelExpenses, TravelReimbursementInputModel travelReimbursementInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = travelReimbursementInputModel;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addAllUnreimbursedTravelExpenses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addAllUnreimbursedTravelExpenses", addAllUnreimbursedTravelExpenses));
        }

        if (includedProjectTravelExpenses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "includedProjectTravelExpenses", includedProjectTravelExpenses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementsPostTravelReimbursementValidateBeforeCall(Boolean addAllUnreimbursedTravelExpenses, List<String> includedProjectTravelExpenses, TravelReimbursementInputModel travelReimbursementInputModel, final ApiCallback _callback) throws ApiException {
        return travelReimbursementsPostTravelReimbursementCall(addAllUnreimbursedTravelExpenses, includedProjectTravelExpenses, travelReimbursementInputModel, _callback);

    }

    /**
     * Add a travel reimbursement
     * 
     * @param addAllUnreimbursedTravelExpenses Optional: Add all of user&#39;s unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added. (optional, default to true)
     * @param includedProjectTravelExpenses Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored. (optional)
     * @param travelReimbursementInputModel TravelReimbursementModel (optional)
     * @return TravelReimbursementOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelReimbursementOutputModel travelReimbursementsPostTravelReimbursement(Boolean addAllUnreimbursedTravelExpenses, List<String> includedProjectTravelExpenses, TravelReimbursementInputModel travelReimbursementInputModel) throws ApiException {
        ApiResponse<TravelReimbursementOutputModel> localVarResp = travelReimbursementsPostTravelReimbursementWithHttpInfo(addAllUnreimbursedTravelExpenses, includedProjectTravelExpenses, travelReimbursementInputModel);
        return localVarResp.getData();
    }

    /**
     * Add a travel reimbursement
     * 
     * @param addAllUnreimbursedTravelExpenses Optional: Add all of user&#39;s unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added. (optional, default to true)
     * @param includedProjectTravelExpenses Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored. (optional)
     * @param travelReimbursementInputModel TravelReimbursementModel (optional)
     * @return ApiResponse&lt;TravelReimbursementOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelReimbursementOutputModel> travelReimbursementsPostTravelReimbursementWithHttpInfo(Boolean addAllUnreimbursedTravelExpenses, List<String> includedProjectTravelExpenses, TravelReimbursementInputModel travelReimbursementInputModel) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementsPostTravelReimbursementValidateBeforeCall(addAllUnreimbursedTravelExpenses, includedProjectTravelExpenses, travelReimbursementInputModel, null);
        Type localVarReturnType = new TypeToken<TravelReimbursementOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a travel reimbursement (asynchronously)
     * 
     * @param addAllUnreimbursedTravelExpenses Optional: Add all of user&#39;s unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added. (optional, default to true)
     * @param includedProjectTravelExpenses Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored. (optional)
     * @param travelReimbursementInputModel TravelReimbursementModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel reimbursement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsPostTravelReimbursementAsync(Boolean addAllUnreimbursedTravelExpenses, List<String> includedProjectTravelExpenses, TravelReimbursementInputModel travelReimbursementInputModel, final ApiCallback<TravelReimbursementOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementsPostTravelReimbursementValidateBeforeCall(addAllUnreimbursedTravelExpenses, includedProjectTravelExpenses, travelReimbursementInputModel, _callback);
        Type localVarReturnType = new TypeToken<TravelReimbursementOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
