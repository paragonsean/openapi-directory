/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MoneyInputModelWithNullableAmount;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectForecastInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectForecastInputModel {
  public static final String SERIALIZED_NAME_BILLING_FORECAST = "billingForecast";
  @SerializedName(SERIALIZED_NAME_BILLING_FORECAST)
  private MoneyInputModelWithNullableAmount billingForecast;

  public static final String SERIALIZED_NAME_BILLING_FORECAST_NOTES = "billingForecastNotes";
  @SerializedName(SERIALIZED_NAME_BILLING_FORECAST_NOTES)
  private String billingForecastNotes;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_EXPENSE_FORECAST = "expenseForecast";
  @SerializedName(SERIALIZED_NAME_EXPENSE_FORECAST)
  private MoneyInputModelWithNullableAmount expenseForecast;

  public static final String SERIALIZED_NAME_EXPENSE_FORECAST_NOTES = "expenseForecastNotes";
  @SerializedName(SERIALIZED_NAME_EXPENSE_FORECAST_NOTES)
  private String expenseForecastNotes;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_LABOR_EXPENSE_FORECAST = "laborExpenseForecast";
  @SerializedName(SERIALIZED_NAME_LABOR_EXPENSE_FORECAST)
  private MoneyInputModelWithNullableAmount laborExpenseForecast;

  public static final String SERIALIZED_NAME_LABOR_EXPENSE_FORECAST_NOTES = "laborExpenseForecastNotes";
  @SerializedName(SERIALIZED_NAME_LABOR_EXPENSE_FORECAST_NOTES)
  private String laborExpenseForecastNotes;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private Integer month;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private SimpleInputRequiredModel project;

  public static final String SERIALIZED_NAME_REVENUE_FORECAST = "revenueForecast";
  @SerializedName(SERIALIZED_NAME_REVENUE_FORECAST)
  private MoneyInputModelWithNullableAmount revenueForecast;

  public static final String SERIALIZED_NAME_REVENUE_FORECAST_NOTES = "revenueForecastNotes";
  @SerializedName(SERIALIZED_NAME_REVENUE_FORECAST_NOTES)
  private String revenueForecastNotes;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public ProjectForecastInputModel() {
  }

  public ProjectForecastInputModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public ProjectForecastInputModel billingForecast(MoneyInputModelWithNullableAmount billingForecast) {
    this.billingForecast = billingForecast;
    return this;
  }

  /**
   * Get billingForecast
   * @return billingForecast
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getBillingForecast() {
    return billingForecast;
  }

  public void setBillingForecast(MoneyInputModelWithNullableAmount billingForecast) {
    this.billingForecast = billingForecast;
  }


  public ProjectForecastInputModel billingForecastNotes(String billingForecastNotes) {
    this.billingForecastNotes = billingForecastNotes;
    return this;
  }

  /**
   * Get billingForecastNotes
   * @return billingForecastNotes
   */
  @javax.annotation.Nullable
  public String getBillingForecastNotes() {
    return billingForecastNotes;
  }

  public void setBillingForecastNotes(String billingForecastNotes) {
    this.billingForecastNotes = billingForecastNotes;
  }


  public ProjectForecastInputModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public ProjectForecastInputModel expenseForecast(MoneyInputModelWithNullableAmount expenseForecast) {
    this.expenseForecast = expenseForecast;
    return this;
  }

  /**
   * Get expenseForecast
   * @return expenseForecast
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getExpenseForecast() {
    return expenseForecast;
  }

  public void setExpenseForecast(MoneyInputModelWithNullableAmount expenseForecast) {
    this.expenseForecast = expenseForecast;
  }


  public ProjectForecastInputModel expenseForecastNotes(String expenseForecastNotes) {
    this.expenseForecastNotes = expenseForecastNotes;
    return this;
  }

  /**
   * Get expenseForecastNotes
   * @return expenseForecastNotes
   */
  @javax.annotation.Nullable
  public String getExpenseForecastNotes() {
    return expenseForecastNotes;
  }

  public void setExpenseForecastNotes(String expenseForecastNotes) {
    this.expenseForecastNotes = expenseForecastNotes;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public ProjectForecastInputModel laborExpenseForecast(MoneyInputModelWithNullableAmount laborExpenseForecast) {
    this.laborExpenseForecast = laborExpenseForecast;
    return this;
  }

  /**
   * Get laborExpenseForecast
   * @return laborExpenseForecast
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getLaborExpenseForecast() {
    return laborExpenseForecast;
  }

  public void setLaborExpenseForecast(MoneyInputModelWithNullableAmount laborExpenseForecast) {
    this.laborExpenseForecast = laborExpenseForecast;
  }


  public ProjectForecastInputModel laborExpenseForecastNotes(String laborExpenseForecastNotes) {
    this.laborExpenseForecastNotes = laborExpenseForecastNotes;
    return this;
  }

  /**
   * Get laborExpenseForecastNotes
   * @return laborExpenseForecastNotes
   */
  @javax.annotation.Nullable
  public String getLaborExpenseForecastNotes() {
    return laborExpenseForecastNotes;
  }

  public void setLaborExpenseForecastNotes(String laborExpenseForecastNotes) {
    this.laborExpenseForecastNotes = laborExpenseForecastNotes;
  }


  public ProjectForecastInputModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ProjectForecastInputModel month(Integer month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * minimum: 1
   * maximum: 12
   * @return month
   */
  @javax.annotation.Nonnull
  public Integer getMonth() {
    return month;
  }

  public void setMonth(Integer month) {
    this.month = month;
  }


  public ProjectForecastInputModel project(SimpleInputRequiredModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getProject() {
    return project;
  }

  public void setProject(SimpleInputRequiredModel project) {
    this.project = project;
  }


  public ProjectForecastInputModel revenueForecast(MoneyInputModelWithNullableAmount revenueForecast) {
    this.revenueForecast = revenueForecast;
    return this;
  }

  /**
   * Get revenueForecast
   * @return revenueForecast
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getRevenueForecast() {
    return revenueForecast;
  }

  public void setRevenueForecast(MoneyInputModelWithNullableAmount revenueForecast) {
    this.revenueForecast = revenueForecast;
  }


  public ProjectForecastInputModel revenueForecastNotes(String revenueForecastNotes) {
    this.revenueForecastNotes = revenueForecastNotes;
    return this;
  }

  /**
   * Get revenueForecastNotes
   * @return revenueForecastNotes
   */
  @javax.annotation.Nullable
  public String getRevenueForecastNotes() {
    return revenueForecastNotes;
  }

  public void setRevenueForecastNotes(String revenueForecastNotes) {
    this.revenueForecastNotes = revenueForecastNotes;
  }


  public ProjectForecastInputModel year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * minimum: 1900
   * maximum: 2075
   * @return year
   */
  @javax.annotation.Nonnull
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectForecastInputModel projectForecastInputModel = (ProjectForecastInputModel) o;
    return Objects.equals(this.billingForecast, projectForecastInputModel.billingForecast) &&
        Objects.equals(this.billingForecastNotes, projectForecastInputModel.billingForecastNotes) &&
        Objects.equals(this.createdBy, projectForecastInputModel.createdBy) &&
        Objects.equals(this.createdDateTime, projectForecastInputModel.createdDateTime) &&
        Objects.equals(this.expenseForecast, projectForecastInputModel.expenseForecast) &&
        Objects.equals(this.expenseForecastNotes, projectForecastInputModel.expenseForecastNotes) &&
        Objects.equals(this.guid, projectForecastInputModel.guid) &&
        Objects.equals(this.laborExpenseForecast, projectForecastInputModel.laborExpenseForecast) &&
        Objects.equals(this.laborExpenseForecastNotes, projectForecastInputModel.laborExpenseForecastNotes) &&
        Objects.equals(this.lastUpdatedBy, projectForecastInputModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, projectForecastInputModel.lastUpdatedDateTime) &&
        Objects.equals(this.month, projectForecastInputModel.month) &&
        Objects.equals(this.project, projectForecastInputModel.project) &&
        Objects.equals(this.revenueForecast, projectForecastInputModel.revenueForecast) &&
        Objects.equals(this.revenueForecastNotes, projectForecastInputModel.revenueForecastNotes) &&
        Objects.equals(this.year, projectForecastInputModel.year);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingForecast, billingForecastNotes, createdBy, createdDateTime, expenseForecast, expenseForecastNotes, guid, laborExpenseForecast, laborExpenseForecastNotes, lastUpdatedBy, lastUpdatedDateTime, month, project, revenueForecast, revenueForecastNotes, year);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectForecastInputModel {\n");
    sb.append("    billingForecast: ").append(toIndentedString(billingForecast)).append("\n");
    sb.append("    billingForecastNotes: ").append(toIndentedString(billingForecastNotes)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    expenseForecast: ").append(toIndentedString(expenseForecast)).append("\n");
    sb.append("    expenseForecastNotes: ").append(toIndentedString(expenseForecastNotes)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    laborExpenseForecast: ").append(toIndentedString(laborExpenseForecast)).append("\n");
    sb.append("    laborExpenseForecastNotes: ").append(toIndentedString(laborExpenseForecastNotes)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    revenueForecast: ").append(toIndentedString(revenueForecast)).append("\n");
    sb.append("    revenueForecastNotes: ").append(toIndentedString(revenueForecastNotes)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingForecast");
    openapiFields.add("billingForecastNotes");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("expenseForecast");
    openapiFields.add("expenseForecastNotes");
    openapiFields.add("guid");
    openapiFields.add("laborExpenseForecast");
    openapiFields.add("laborExpenseForecastNotes");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("month");
    openapiFields.add("project");
    openapiFields.add("revenueForecast");
    openapiFields.add("revenueForecastNotes");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("month");
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("year");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectForecastInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectForecastInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectForecastInputModel is not found in the empty JSON string", ProjectForecastInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectForecastInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectForecastInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectForecastInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingForecast`
      if (jsonObj.get("billingForecast") != null && !jsonObj.get("billingForecast").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("billingForecast"));
      }
      if ((jsonObj.get("billingForecastNotes") != null && !jsonObj.get("billingForecastNotes").isJsonNull()) && !jsonObj.get("billingForecastNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingForecastNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingForecastNotes").toString()));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `expenseForecast`
      if (jsonObj.get("expenseForecast") != null && !jsonObj.get("expenseForecast").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("expenseForecast"));
      }
      if ((jsonObj.get("expenseForecastNotes") != null && !jsonObj.get("expenseForecastNotes").isJsonNull()) && !jsonObj.get("expenseForecastNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expenseForecastNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expenseForecastNotes").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `laborExpenseForecast`
      if (jsonObj.get("laborExpenseForecast") != null && !jsonObj.get("laborExpenseForecast").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("laborExpenseForecast"));
      }
      if ((jsonObj.get("laborExpenseForecastNotes") != null && !jsonObj.get("laborExpenseForecastNotes").isJsonNull()) && !jsonObj.get("laborExpenseForecastNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `laborExpenseForecastNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("laborExpenseForecastNotes").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      // validate the required field `project`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("project"));
      // validate the optional field `revenueForecast`
      if (jsonObj.get("revenueForecast") != null && !jsonObj.get("revenueForecast").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("revenueForecast"));
      }
      if ((jsonObj.get("revenueForecastNotes") != null && !jsonObj.get("revenueForecastNotes").isJsonNull()) && !jsonObj.get("revenueForecastNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenueForecastNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenueForecastNotes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectForecastInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectForecastInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectForecastInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectForecastInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectForecastInputModel>() {
           @Override
           public void write(JsonWriter out, ProjectForecastInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectForecastInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectForecastInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectForecastInputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectForecastInputModel
   */
  public static ProjectForecastInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectForecastInputModel.class);
  }

  /**
   * Convert an instance of ProjectForecastInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

