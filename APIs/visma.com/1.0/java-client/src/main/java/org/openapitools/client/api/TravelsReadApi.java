/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletedProjectTravelExpenseModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProjectTravelExpenseOutputModel;
import org.openapitools.client.model.TravelReimbursementOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TravelsReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TravelsReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TravelsReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectTravelExpensesGetDeletedProjectTravelExpenses
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuid Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuid Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project travel expenses that have been deleted after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetDeletedProjectTravelExpensesCall(String pageToken, Integer rowCount, List<String> projectGuid, List<String> userGuid, OffsetDateTime deletedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/deletedprojecttravelexpenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (projectGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuid", projectGuid));
        }

        if (userGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userGuid", userGuid));
        }

        if (deletedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletedSince", deletedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetDeletedProjectTravelExpensesValidateBeforeCall(String pageToken, Integer rowCount, List<String> projectGuid, List<String> userGuid, OffsetDateTime deletedSince, final ApiCallback _callback) throws ApiException {
        return projectTravelExpensesGetDeletedProjectTravelExpensesCall(pageToken, rowCount, projectGuid, userGuid, deletedSince, _callback);

    }

    /**
     * Get the deleted project travel expenses.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuid Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuid Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project travel expenses that have been deleted after this date time (greater or equal). (optional)
     * @return List&lt;DeletedProjectTravelExpenseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<DeletedProjectTravelExpenseModel> projectTravelExpensesGetDeletedProjectTravelExpenses(String pageToken, Integer rowCount, List<String> projectGuid, List<String> userGuid, OffsetDateTime deletedSince) throws ApiException {
        ApiResponse<List<DeletedProjectTravelExpenseModel>> localVarResp = projectTravelExpensesGetDeletedProjectTravelExpensesWithHttpInfo(pageToken, rowCount, projectGuid, userGuid, deletedSince);
        return localVarResp.getData();
    }

    /**
     * Get the deleted project travel expenses.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuid Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuid Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project travel expenses that have been deleted after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;DeletedProjectTravelExpenseModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeletedProjectTravelExpenseModel>> projectTravelExpensesGetDeletedProjectTravelExpensesWithHttpInfo(String pageToken, Integer rowCount, List<String> projectGuid, List<String> userGuid, OffsetDateTime deletedSince) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetDeletedProjectTravelExpensesValidateBeforeCall(pageToken, rowCount, projectGuid, userGuid, deletedSince, null);
        Type localVarReturnType = new TypeToken<List<DeletedProjectTravelExpenseModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deleted project travel expenses. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuid Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuid Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get project travel expenses that have been deleted after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetDeletedProjectTravelExpensesAsync(String pageToken, Integer rowCount, List<String> projectGuid, List<String> userGuid, OffsetDateTime deletedSince, final ApiCallback<List<DeletedProjectTravelExpenseModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetDeletedProjectTravelExpensesValidateBeforeCall(pageToken, rowCount, projectGuid, userGuid, deletedSince, _callback);
        Type localVarReturnType = new TypeToken<List<DeletedProjectTravelExpenseModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetProjectTravelExpense
     * @param guid Id used to get the project travel expense. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpenseCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projecttravelexpenses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetProjectTravelExpenseValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectTravelExpensesGetProjectTravelExpense(Async)");
        }

        return projectTravelExpensesGetProjectTravelExpenseCall(guid, _callback);

    }

    /**
     * Get project travel expense by ID.
     * 
     * @param guid Id used to get the project travel expense. (required)
     * @return ProjectTravelExpenseOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectTravelExpenseOutputModel projectTravelExpensesGetProjectTravelExpense(String guid) throws ApiException {
        ApiResponse<ProjectTravelExpenseOutputModel> localVarResp = projectTravelExpensesGetProjectTravelExpenseWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project travel expense by ID.
     * 
     * @param guid Id used to get the project travel expense. (required)
     * @return ApiResponse&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectTravelExpenseOutputModel> projectTravelExpensesGetProjectTravelExpenseWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpenseValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectTravelExpenseOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project travel expense by ID. (asynchronously)
     * 
     * @param guid Id used to get the project travel expense. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpenseAsync(String guid, final ApiCallback<ProjectTravelExpenseOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpenseValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectTravelExpenseOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetProjectTravelExpenses
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get project travel expenses that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projecttravelexpenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetProjectTravelExpensesValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return projectTravelExpensesGetProjectTravelExpensesCall(pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the project travel expenses.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get project travel expenses that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetProjectTravelExpenses(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetProjectTravelExpensesWithHttpInfo(pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the project travel expenses.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get project travel expenses that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetProjectTravelExpensesWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesValidateBeforeCall(pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project travel expenses. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get project travel expenses that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesValidateBeforeCall(pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetProjectTravelExpensesForProject
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForProjectCall(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, String pageToken, Integer rowCount, Boolean isBillablePeriodInFuture, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/projecttravelexpenses"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (isBilled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBilled", isBilled));
        }

        if (invoiceableDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceableDate", invoiceableDate));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isBillablePeriodInFuture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillablePeriodInFuture", isBillablePeriodInFuture));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForProjectValidateBeforeCall(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, String pageToken, Integer rowCount, Boolean isBillablePeriodInFuture, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling projectTravelExpensesGetProjectTravelExpensesForProject(Async)");
        }

        return projectTravelExpensesGetProjectTravelExpensesForProjectCall(projectGuid, isBillable, isBilled, invoiceableDate, pageToken, rowCount, isBillablePeriodInFuture, expenseClass, _callback);

    }

    /**
     * Get all the project travel expenses for a project
     * 
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetProjectTravelExpensesForProject(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, String pageToken, Integer rowCount, Boolean isBillablePeriodInFuture, ExpensesClass expenseClass) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetProjectTravelExpensesForProjectWithHttpInfo(projectGuid, isBillable, isBilled, invoiceableDate, pageToken, rowCount, isBillablePeriodInFuture, expenseClass);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses for a project
     * 
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetProjectTravelExpensesForProjectWithHttpInfo(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, String pageToken, Integer rowCount, Boolean isBillablePeriodInFuture, ExpensesClass expenseClass) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesForProjectValidateBeforeCall(projectGuid, isBillable, isBilled, invoiceableDate, pageToken, rowCount, isBillablePeriodInFuture, expenseClass, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses for a project (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param invoiceableDate Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isBillablePeriodInFuture Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForProjectAsync(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime invoiceableDate, String pageToken, Integer rowCount, Boolean isBillablePeriodInFuture, ExpensesClass expenseClass, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesForProjectValidateBeforeCall(projectGuid, isBillable, isBilled, invoiceableDate, pageToken, rowCount, isBillablePeriodInFuture, expenseClass, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementCall(String travelReimbursementGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursements/{travelReimbursementGuid}/projecttravelexpenses"
            .replace("{" + "travelReimbursementGuid" + "}", localVarApiClient.escapeString(travelReimbursementGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementValidateBeforeCall(String travelReimbursementGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'travelReimbursementGuid' is set
        if (travelReimbursementGuid == null) {
            throw new ApiException("Missing the required parameter 'travelReimbursementGuid' when calling projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement(Async)");
        }

        return projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementCall(travelReimbursementGuid, pageToken, rowCount, expenseClass, _callback);

    }

    /**
     * Get all the project travel expenses for a travel reimbursement
     * 
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement(String travelReimbursementGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementWithHttpInfo(travelReimbursementGuid, pageToken, rowCount, expenseClass);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses for a travel reimbursement
     * 
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementWithHttpInfo(String travelReimbursementGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementValidateBeforeCall(travelReimbursementGuid, pageToken, rowCount, expenseClass, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses for a travel reimbursement (asynchronously)
     * 
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementAsync(String travelReimbursementGuid, String pageToken, Integer rowCount, ExpensesClass expenseClass, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesForTravelReimbursementValidateBeforeCall(travelReimbursementGuid, pageToken, rowCount, expenseClass, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTravelExpensesGetProjectTravelExpensesForUser
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the travel expenses. Default all. (optional)
     * @param endDate Optional: starting date to which to get the travel expenses. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param isReimbursed Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null. (optional)
     * @param isTravelReimbursementRequired Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all. (optional)
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (optional)
     * @param costCurrencyGuid Optional: ID of the cost currency. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForUserCall(String userGuid, LocalDate startDate, LocalDate endDate, String pageToken, Integer rowCount, ExpensesClass expenseClass, Boolean isReimbursed, Boolean isTravelReimbursementRequired, String travelReimbursementGuid, String costCurrencyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/projecttravelexpenses"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (expenseClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseClass", expenseClass));
        }

        if (isReimbursed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isReimbursed", isReimbursed));
        }

        if (isTravelReimbursementRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isTravelReimbursementRequired", isTravelReimbursementRequired));
        }

        if (travelReimbursementGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelReimbursementGuid", travelReimbursementGuid));
        }

        if (costCurrencyGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("costCurrencyGuid", costCurrencyGuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForUserValidateBeforeCall(String userGuid, LocalDate startDate, LocalDate endDate, String pageToken, Integer rowCount, ExpensesClass expenseClass, Boolean isReimbursed, Boolean isTravelReimbursementRequired, String travelReimbursementGuid, String costCurrencyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling projectTravelExpensesGetProjectTravelExpensesForUser(Async)");
        }

        return projectTravelExpensesGetProjectTravelExpensesForUserCall(userGuid, startDate, endDate, pageToken, rowCount, expenseClass, isReimbursed, isTravelReimbursementRequired, travelReimbursementGuid, costCurrencyGuid, _callback);

    }

    /**
     * Get all the project travel expenses for a user
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the travel expenses. Default all. (optional)
     * @param endDate Optional: starting date to which to get the travel expenses. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param isReimbursed Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null. (optional)
     * @param isTravelReimbursementRequired Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all. (optional)
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (optional)
     * @param costCurrencyGuid Optional: ID of the cost currency. (optional)
     * @return List&lt;ProjectTravelExpenseOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseOutputModel> projectTravelExpensesGetProjectTravelExpensesForUser(String userGuid, LocalDate startDate, LocalDate endDate, String pageToken, Integer rowCount, ExpensesClass expenseClass, Boolean isReimbursed, Boolean isTravelReimbursementRequired, String travelReimbursementGuid, String costCurrencyGuid) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseOutputModel>> localVarResp = projectTravelExpensesGetProjectTravelExpensesForUserWithHttpInfo(userGuid, startDate, endDate, pageToken, rowCount, expenseClass, isReimbursed, isTravelReimbursementRequired, travelReimbursementGuid, costCurrencyGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the project travel expenses for a user
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the travel expenses. Default all. (optional)
     * @param endDate Optional: starting date to which to get the travel expenses. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param isReimbursed Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null. (optional)
     * @param isTravelReimbursementRequired Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all. (optional)
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (optional)
     * @param costCurrencyGuid Optional: ID of the cost currency. (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseOutputModel>> projectTravelExpensesGetProjectTravelExpensesForUserWithHttpInfo(String userGuid, LocalDate startDate, LocalDate endDate, String pageToken, Integer rowCount, ExpensesClass expenseClass, Boolean isReimbursed, Boolean isTravelReimbursementRequired, String travelReimbursementGuid, String costCurrencyGuid) throws ApiException {
        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesForUserValidateBeforeCall(userGuid, startDate, endDate, pageToken, rowCount, expenseClass, isReimbursed, isTravelReimbursementRequired, travelReimbursementGuid, costCurrencyGuid, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the project travel expenses for a user (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the travel expenses. Default all. (optional)
     * @param endDate Optional: starting date to which to get the travel expenses. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param expenseClass Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense (optional)
     * @param isReimbursed Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null. (optional)
     * @param isTravelReimbursementRequired Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all. (optional)
     * @param travelReimbursementGuid Optional: ID of the travel reimbursement (optional)
     * @param costCurrencyGuid Optional: ID of the cost currency. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectTravelExpenseOutputModel </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTravelExpensesGetProjectTravelExpensesForUserAsync(String userGuid, LocalDate startDate, LocalDate endDate, String pageToken, Integer rowCount, ExpensesClass expenseClass, Boolean isReimbursed, Boolean isTravelReimbursementRequired, String travelReimbursementGuid, String costCurrencyGuid, final ApiCallback<List<ProjectTravelExpenseOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTravelExpensesGetProjectTravelExpensesForUserValidateBeforeCall(userGuid, startDate, endDate, pageToken, rowCount, expenseClass, isReimbursed, isTravelReimbursementRequired, travelReimbursementGuid, costCurrencyGuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementsGetTravelReimbursement
     * @param guid ID of travel reimbursement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsGetTravelReimbursementCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursements/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementsGetTravelReimbursementValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelReimbursementsGetTravelReimbursement(Async)");
        }

        return travelReimbursementsGetTravelReimbursementCall(guid, _callback);

    }

    /**
     * Get travel reimbursement by ID
     * 
     * @param guid ID of travel reimbursement (required)
     * @return TravelReimbursementOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelReimbursementOutputModel travelReimbursementsGetTravelReimbursement(String guid) throws ApiException {
        ApiResponse<TravelReimbursementOutputModel> localVarResp = travelReimbursementsGetTravelReimbursementWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get travel reimbursement by ID
     * 
     * @param guid ID of travel reimbursement (required)
     * @return ApiResponse&lt;TravelReimbursementOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelReimbursementOutputModel> travelReimbursementsGetTravelReimbursementWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementsGetTravelReimbursementValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TravelReimbursementOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get travel reimbursement by ID (asynchronously)
     * 
     * @param guid ID of travel reimbursement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsGetTravelReimbursementAsync(String guid, final ApiCallback<TravelReimbursementOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementsGetTravelReimbursementValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TravelReimbursementOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementsGetTravelReimbursements
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param changedSince Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal). (optional)
     * @param travelReimbursementStatusGuids Optional: List of travel reimbursement status ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsGetTravelReimbursementsCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, List<String> travelReimbursementStatusGuids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (travelReimbursementStatusGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "travelReimbursementStatusGuids", travelReimbursementStatusGuids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementsGetTravelReimbursementsValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, List<String> travelReimbursementStatusGuids, final ApiCallback _callback) throws ApiException {
        return travelReimbursementsGetTravelReimbursementsCall(pageToken, rowCount, changedSince, travelReimbursementStatusGuids, _callback);

    }

    /**
     * Get travel reimbursements.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param changedSince Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal). (optional)
     * @param travelReimbursementStatusGuids Optional: List of travel reimbursement status ids. (optional)
     * @return List&lt;TravelReimbursementOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelReimbursementOutputModel> travelReimbursementsGetTravelReimbursements(String pageToken, Integer rowCount, OffsetDateTime changedSince, List<String> travelReimbursementStatusGuids) throws ApiException {
        ApiResponse<List<TravelReimbursementOutputModel>> localVarResp = travelReimbursementsGetTravelReimbursementsWithHttpInfo(pageToken, rowCount, changedSince, travelReimbursementStatusGuids);
        return localVarResp.getData();
    }

    /**
     * Get travel reimbursements.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param changedSince Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal). (optional)
     * @param travelReimbursementStatusGuids Optional: List of travel reimbursement status ids. (optional)
     * @return ApiResponse&lt;List&lt;TravelReimbursementOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelReimbursementOutputModel>> travelReimbursementsGetTravelReimbursementsWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince, List<String> travelReimbursementStatusGuids) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementsGetTravelReimbursementsValidateBeforeCall(pageToken, rowCount, changedSince, travelReimbursementStatusGuids, null);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get travel reimbursements. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param changedSince Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal). (optional)
     * @param travelReimbursementStatusGuids Optional: List of travel reimbursement status ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementsGetTravelReimbursementsAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, List<String> travelReimbursementStatusGuids, final ApiCallback<List<TravelReimbursementOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementsGetTravelReimbursementsValidateBeforeCall(pageToken, rowCount, changedSince, travelReimbursementStatusGuids, _callback);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
