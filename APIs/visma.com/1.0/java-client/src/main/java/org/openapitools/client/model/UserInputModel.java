/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LicenseUserType;
import org.openapitools.client.model.SalutationType;
import org.openapitools.client.model.SatisfactionLevelType;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.client.model.TimezoneModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserInputModel {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "bankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  public static final String SERIALIZED_NAME_BUSINESS_UNIT = "businessUnit";
  @SerializedName(SERIALIZED_NAME_BUSINESS_UNIT)
  private SimpleInputRequiredModel businessUnit;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private SimpleInputModel country;

  public static final String SERIALIZED_NAME_COUNTRY_REGION = "countryRegion";
  @SerializedName(SERIALIZED_NAME_COUNTRY_REGION)
  private SimpleInputModel countryRegion;

  public static final String SERIALIZED_NAME_CREATE_DEFAULT_WORK_CONTRACT = "createDefaultWorkContract";
  @SerializedName(SERIALIZED_NAME_CREATE_DEFAULT_WORK_CONTRACT)
  private Boolean createDefaultWorkContract = true;

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private SimpleInputModel culture;

  public static final String SERIALIZED_NAME_DEFAULT_ACTIVITY_TYPE = "defaultActivityType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTIVITY_TYPE)
  private SimpleInputModel defaultActivityType;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private SimpleInputModel language;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PERMISSION_PROFILE = "permissionProfile";
  @SerializedName(SERIALIZED_NAME_PERMISSION_PROFILE)
  private SimpleInputModel permissionProfile;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SALUTATION = "salutation";
  @SerializedName(SERIALIZED_NAME_SALUTATION)
  private SalutationType salutation;

  public static final String SERIALIZED_NAME_SATISFACTION = "satisfaction";
  @SerializedName(SERIALIZED_NAME_SATISFACTION)
  private SatisfactionLevelType satisfaction;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER = "socialSecurityNumber";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER)
  private String socialSecurityNumber;

  public static final String SERIALIZED_NAME_SUPERIOR_USER = "superiorUser";
  @SerializedName(SERIALIZED_NAME_SUPERIOR_USER)
  private SimpleInputRequiredModel superiorUser;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private TimezoneModel timezone;

  public static final String SERIALIZED_NAME_USER_TYPE = "userType";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private LicenseUserType userType;

  public static final String SERIALIZED_NAME_WORK_TYPE = "workType";
  @SerializedName(SERIALIZED_NAME_WORK_TYPE)
  private SimpleInputRequiredModel workType;

  public UserInputModel() {
  }

  public UserInputModel address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public UserInputModel bankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

  /**
   * Get bankAccountNumber
   * @return bankAccountNumber
   */
  @javax.annotation.Nullable
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }

  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }


  public UserInputModel birthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }


  public UserInputModel businessUnit(SimpleInputRequiredModel businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  /**
   * Get businessUnit
   * @return businessUnit
   */
  @javax.annotation.Nullable
  public SimpleInputRequiredModel getBusinessUnit() {
    return businessUnit;
  }

  public void setBusinessUnit(SimpleInputRequiredModel businessUnit) {
    this.businessUnit = businessUnit;
  }


  public UserInputModel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public UserInputModel code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public UserInputModel country(SimpleInputModel country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCountry() {
    return country;
  }

  public void setCountry(SimpleInputModel country) {
    this.country = country;
  }


  public UserInputModel countryRegion(SimpleInputModel countryRegion) {
    this.countryRegion = countryRegion;
    return this;
  }

  /**
   * Get countryRegion
   * @return countryRegion
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCountryRegion() {
    return countryRegion;
  }

  public void setCountryRegion(SimpleInputModel countryRegion) {
    this.countryRegion = countryRegion;
  }


  public UserInputModel createDefaultWorkContract(Boolean createDefaultWorkContract) {
    this.createDefaultWorkContract = createDefaultWorkContract;
    return this;
  }

  /**
   * Get createDefaultWorkContract
   * @return createDefaultWorkContract
   */
  @javax.annotation.Nullable
  public Boolean getCreateDefaultWorkContract() {
    return createDefaultWorkContract;
  }

  public void setCreateDefaultWorkContract(Boolean createDefaultWorkContract) {
    this.createDefaultWorkContract = createDefaultWorkContract;
  }


  public UserInputModel culture(SimpleInputModel culture) {
    this.culture = culture;
    return this;
  }

  /**
   * Get culture
   * @return culture
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCulture() {
    return culture;
  }

  public void setCulture(SimpleInputModel culture) {
    this.culture = culture;
  }


  public UserInputModel defaultActivityType(SimpleInputModel defaultActivityType) {
    this.defaultActivityType = defaultActivityType;
    return this;
  }

  /**
   * Get defaultActivityType
   * @return defaultActivityType
   */
  @javax.annotation.Nullable
  public SimpleInputModel getDefaultActivityType() {
    return defaultActivityType;
  }

  public void setDefaultActivityType(SimpleInputModel defaultActivityType) {
    this.defaultActivityType = defaultActivityType;
  }


  public UserInputModel email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserInputModel firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserInputModel isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public UserInputModel language(SimpleInputModel language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public SimpleInputModel getLanguage() {
    return language;
  }

  public void setLanguage(SimpleInputModel language) {
    this.language = language;
  }


  public UserInputModel lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserInputModel notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public UserInputModel permissionProfile(SimpleInputModel permissionProfile) {
    this.permissionProfile = permissionProfile;
    return this;
  }

  /**
   * Get permissionProfile
   * @return permissionProfile
   */
  @javax.annotation.Nullable
  public SimpleInputModel getPermissionProfile() {
    return permissionProfile;
  }

  public void setPermissionProfile(SimpleInputModel permissionProfile) {
    this.permissionProfile = permissionProfile;
  }


  public UserInputModel phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public UserInputModel postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public UserInputModel salutation(SalutationType salutation) {
    this.salutation = salutation;
    return this;
  }

  /**
   * Get salutation
   * @return salutation
   */
  @javax.annotation.Nullable
  public SalutationType getSalutation() {
    return salutation;
  }

  public void setSalutation(SalutationType salutation) {
    this.salutation = salutation;
  }


  public UserInputModel satisfaction(SatisfactionLevelType satisfaction) {
    this.satisfaction = satisfaction;
    return this;
  }

  /**
   * Get satisfaction
   * @return satisfaction
   */
  @javax.annotation.Nullable
  public SatisfactionLevelType getSatisfaction() {
    return satisfaction;
  }

  public void setSatisfaction(SatisfactionLevelType satisfaction) {
    this.satisfaction = satisfaction;
  }


  public UserInputModel socialSecurityNumber(String socialSecurityNumber) {
    this.socialSecurityNumber = socialSecurityNumber;
    return this;
  }

  /**
   * Get socialSecurityNumber
   * @return socialSecurityNumber
   */
  @javax.annotation.Nullable
  public String getSocialSecurityNumber() {
    return socialSecurityNumber;
  }

  public void setSocialSecurityNumber(String socialSecurityNumber) {
    this.socialSecurityNumber = socialSecurityNumber;
  }


  public UserInputModel superiorUser(SimpleInputRequiredModel superiorUser) {
    this.superiorUser = superiorUser;
    return this;
  }

  /**
   * Get superiorUser
   * @return superiorUser
   */
  @javax.annotation.Nullable
  public SimpleInputRequiredModel getSuperiorUser() {
    return superiorUser;
  }

  public void setSuperiorUser(SimpleInputRequiredModel superiorUser) {
    this.superiorUser = superiorUser;
  }


  public UserInputModel timezone(TimezoneModel timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public TimezoneModel getTimezone() {
    return timezone;
  }

  public void setTimezone(TimezoneModel timezone) {
    this.timezone = timezone;
  }


  public UserInputModel userType(LicenseUserType userType) {
    this.userType = userType;
    return this;
  }

  /**
   * Get userType
   * @return userType
   */
  @javax.annotation.Nullable
  public LicenseUserType getUserType() {
    return userType;
  }

  public void setUserType(LicenseUserType userType) {
    this.userType = userType;
  }


  public UserInputModel workType(SimpleInputRequiredModel workType) {
    this.workType = workType;
    return this;
  }

  /**
   * Get workType
   * @return workType
   */
  @javax.annotation.Nullable
  public SimpleInputRequiredModel getWorkType() {
    return workType;
  }

  public void setWorkType(SimpleInputRequiredModel workType) {
    this.workType = workType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInputModel userInputModel = (UserInputModel) o;
    return Objects.equals(this.address, userInputModel.address) &&
        Objects.equals(this.bankAccountNumber, userInputModel.bankAccountNumber) &&
        Objects.equals(this.birthDate, userInputModel.birthDate) &&
        Objects.equals(this.businessUnit, userInputModel.businessUnit) &&
        Objects.equals(this.city, userInputModel.city) &&
        Objects.equals(this.code, userInputModel.code) &&
        Objects.equals(this.country, userInputModel.country) &&
        Objects.equals(this.countryRegion, userInputModel.countryRegion) &&
        Objects.equals(this.createDefaultWorkContract, userInputModel.createDefaultWorkContract) &&
        Objects.equals(this.culture, userInputModel.culture) &&
        Objects.equals(this.defaultActivityType, userInputModel.defaultActivityType) &&
        Objects.equals(this.email, userInputModel.email) &&
        Objects.equals(this.firstName, userInputModel.firstName) &&
        Objects.equals(this.isActive, userInputModel.isActive) &&
        Objects.equals(this.language, userInputModel.language) &&
        Objects.equals(this.lastName, userInputModel.lastName) &&
        Objects.equals(this.notes, userInputModel.notes) &&
        Objects.equals(this.permissionProfile, userInputModel.permissionProfile) &&
        Objects.equals(this.phone, userInputModel.phone) &&
        Objects.equals(this.postalCode, userInputModel.postalCode) &&
        Objects.equals(this.salutation, userInputModel.salutation) &&
        Objects.equals(this.satisfaction, userInputModel.satisfaction) &&
        Objects.equals(this.socialSecurityNumber, userInputModel.socialSecurityNumber) &&
        Objects.equals(this.superiorUser, userInputModel.superiorUser) &&
        Objects.equals(this.timezone, userInputModel.timezone) &&
        Objects.equals(this.userType, userInputModel.userType) &&
        Objects.equals(this.workType, userInputModel.workType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, bankAccountNumber, birthDate, businessUnit, city, code, country, countryRegion, createDefaultWorkContract, culture, defaultActivityType, email, firstName, isActive, language, lastName, notes, permissionProfile, phone, postalCode, salutation, satisfaction, socialSecurityNumber, superiorUser, timezone, userType, workType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInputModel {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    businessUnit: ").append(toIndentedString(businessUnit)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryRegion: ").append(toIndentedString(countryRegion)).append("\n");
    sb.append("    createDefaultWorkContract: ").append(toIndentedString(createDefaultWorkContract)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    defaultActivityType: ").append(toIndentedString(defaultActivityType)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    permissionProfile: ").append(toIndentedString(permissionProfile)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    salutation: ").append(toIndentedString(salutation)).append("\n");
    sb.append("    satisfaction: ").append(toIndentedString(satisfaction)).append("\n");
    sb.append("    socialSecurityNumber: ").append(toIndentedString(socialSecurityNumber)).append("\n");
    sb.append("    superiorUser: ").append(toIndentedString(superiorUser)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    workType: ").append(toIndentedString(workType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("bankAccountNumber");
    openapiFields.add("birthDate");
    openapiFields.add("businessUnit");
    openapiFields.add("city");
    openapiFields.add("code");
    openapiFields.add("country");
    openapiFields.add("countryRegion");
    openapiFields.add("createDefaultWorkContract");
    openapiFields.add("culture");
    openapiFields.add("defaultActivityType");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("isActive");
    openapiFields.add("language");
    openapiFields.add("lastName");
    openapiFields.add("notes");
    openapiFields.add("permissionProfile");
    openapiFields.add("phone");
    openapiFields.add("postalCode");
    openapiFields.add("salutation");
    openapiFields.add("satisfaction");
    openapiFields.add("socialSecurityNumber");
    openapiFields.add("superiorUser");
    openapiFields.add("timezone");
    openapiFields.add("userType");
    openapiFields.add("workType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserInputModel is not found in the empty JSON string", UserInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("bankAccountNumber") != null && !jsonObj.get("bankAccountNumber").isJsonNull()) && !jsonObj.get("bankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountNumber").toString()));
      }
      // validate the optional field `businessUnit`
      if (jsonObj.get("businessUnit") != null && !jsonObj.get("businessUnit").isJsonNull()) {
        SimpleInputRequiredModel.validateJsonElement(jsonObj.get("businessUnit"));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("country"));
      }
      // validate the optional field `countryRegion`
      if (jsonObj.get("countryRegion") != null && !jsonObj.get("countryRegion").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("countryRegion"));
      }
      // validate the optional field `culture`
      if (jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("culture"));
      }
      // validate the optional field `defaultActivityType`
      if (jsonObj.get("defaultActivityType") != null && !jsonObj.get("defaultActivityType").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("defaultActivityType"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("language"));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `permissionProfile`
      if (jsonObj.get("permissionProfile") != null && !jsonObj.get("permissionProfile").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("permissionProfile"));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      // validate the optional field `salutation`
      if (jsonObj.get("salutation") != null && !jsonObj.get("salutation").isJsonNull()) {
        SalutationType.validateJsonElement(jsonObj.get("salutation"));
      }
      // validate the optional field `satisfaction`
      if (jsonObj.get("satisfaction") != null && !jsonObj.get("satisfaction").isJsonNull()) {
        SatisfactionLevelType.validateJsonElement(jsonObj.get("satisfaction"));
      }
      if ((jsonObj.get("socialSecurityNumber") != null && !jsonObj.get("socialSecurityNumber").isJsonNull()) && !jsonObj.get("socialSecurityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialSecurityNumber").toString()));
      }
      // validate the optional field `superiorUser`
      if (jsonObj.get("superiorUser") != null && !jsonObj.get("superiorUser").isJsonNull()) {
        SimpleInputRequiredModel.validateJsonElement(jsonObj.get("superiorUser"));
      }
      // validate the optional field `timezone`
      if (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) {
        TimezoneModel.validateJsonElement(jsonObj.get("timezone"));
      }
      // validate the optional field `userType`
      if (jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) {
        LicenseUserType.validateJsonElement(jsonObj.get("userType"));
      }
      // validate the optional field `workType`
      if (jsonObj.get("workType") != null && !jsonObj.get("workType").isJsonNull()) {
        SimpleInputRequiredModel.validateJsonElement(jsonObj.get("workType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<UserInputModel>() {
           @Override
           public void write(JsonWriter out, UserInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserInputModel
   * @throws IOException if the JSON string is invalid with respect to UserInputModel
   */
  public static UserInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserInputModel.class);
  }

  /**
   * Convert an instance of UserInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

