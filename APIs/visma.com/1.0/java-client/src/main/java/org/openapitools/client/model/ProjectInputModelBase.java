/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.InvoiceTemplateSubModel;
import org.openapitools.client.model.MoneyInputModelWithNullableAmount;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.client.model.SimpleProjectStatusInputModel;
import org.openapitools.client.model.SimpleSalesStatusInputModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectInputModelBase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectInputModelBase {
  public static final String SERIALIZED_NAME_BILLING_CONTACT = "billingContact";
  @SerializedName(SERIALIZED_NAME_BILLING_CONTACT)
  private SimpleInputModel billingContact;

  public static final String SERIALIZED_NAME_BUSINESS_UNIT = "businessUnit";
  @SerializedName(SERIALIZED_NAME_BUSINESS_UNIT)
  private SimpleInputRequiredModel businessUnit;

  public static final String SERIALIZED_NAME_COMPLETION_ESTIMATE_PERCENTAGE = "completionEstimatePercentage";
  @SerializedName(SERIALIZED_NAME_COMPLETION_ESTIMATE_PERCENTAGE)
  private Integer completionEstimatePercentage;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private SimpleInputModel costCenter;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private SimpleInputRequiredModel currency;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private SimpleInputRequiredModel customer;

  public static final String SERIALIZED_NAME_CUSTOMER_CONTACT = "customerContact";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CONTACT)
  private SimpleInputModel customerContact;

  public static final String SERIALIZED_NAME_DEADLINE = "deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private LocalDate deadline;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPECTED_ORDER_DATE = "expectedOrderDate";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ORDER_DATE)
  private LocalDate expectedOrderDate;

  public static final String SERIALIZED_NAME_EXPECTED_VALUE = "expectedValue";
  @SerializedName(SERIALIZED_NAME_EXPECTED_VALUE)
  private MoneyInputModelWithNullableAmount expectedValue;

  public static final String SERIALIZED_NAME_INTERNAL_NAME = "internalName";
  @SerializedName(SERIALIZED_NAME_INTERNAL_NAME)
  private String internalName;

  public static final String SERIALIZED_NAME_INVOICE_NOTES = "invoiceNotes";
  @SerializedName(SERIALIZED_NAME_INVOICE_NOTES)
  private String invoiceNotes;

  public static final String SERIALIZED_NAME_INVOICE_TEMPLATE = "invoiceTemplate";
  @SerializedName(SERIALIZED_NAME_INVOICE_TEMPLATE)
  private InvoiceTemplateSubModel invoiceTemplate;

  public static final String SERIALIZED_NAME_IS_CLOSED = "isClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_IS_INTERNAL = "isInternal";
  @SerializedName(SERIALIZED_NAME_IS_INTERNAL)
  private Boolean isInternal;

  public static final String SERIALIZED_NAME_IS_JOINING_ALLOWED = "isJoiningAllowed";
  @SerializedName(SERIALIZED_NAME_IS_JOINING_ALLOWED)
  private Boolean isJoiningAllowed = true;

  public static final String SERIALIZED_NAME_LEAD_SOURCE = "leadSource";
  @SerializedName(SERIALIZED_NAME_LEAD_SOURCE)
  private SimpleInputModel leadSource;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Long number;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_OUR_REFERENCE = "ourReference";
  @SerializedName(SERIALIZED_NAME_OUR_REFERENCE)
  private String ourReference;

  public static final String SERIALIZED_NAME_PAYMENT_TERM = "paymentTerm";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERM)
  private Integer paymentTerm;

  public static final String SERIALIZED_NAME_PROBABILITY = "probability";
  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  private Integer probability;

  public static final String SERIALIZED_NAME_PROJECT_OWNER = "projectOwner";
  @SerializedName(SERIALIZED_NAME_PROJECT_OWNER)
  private SimpleInputModel projectOwner;

  public static final String SERIALIZED_NAME_PROJECT_STATUS = "projectStatus";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS)
  private SimpleProjectStatusInputModel projectStatus;

  public static final String SERIALIZED_NAME_SALES_PERSON = "salesPerson";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON)
  private SimpleInputModel salesPerson;

  public static final String SERIALIZED_NAME_SALES_STATUS = "salesStatus";
  @SerializedName(SERIALIZED_NAME_SALES_STATUS)
  private SimpleSalesStatusInputModel salesStatus;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_USE_OVERTIME_MULTIPLIERS = "useOvertimeMultipliers";
  @SerializedName(SERIALIZED_NAME_USE_OVERTIME_MULTIPLIERS)
  private Boolean useOvertimeMultipliers = true;

  public static final String SERIALIZED_NAME_USE_PRODUCTS_FROM_SETTING = "useProductsFromSetting";
  @SerializedName(SERIALIZED_NAME_USE_PRODUCTS_FROM_SETTING)
  private Boolean useProductsFromSetting = true;

  public static final String SERIALIZED_NAME_USE_WORKTYPES_FROM_SETTING = "useWorktypesFromSetting";
  @SerializedName(SERIALIZED_NAME_USE_WORKTYPES_FROM_SETTING)
  private Boolean useWorktypesFromSetting = true;

  public static final String SERIALIZED_NAME_YOUR_REFERENCE = "yourReference";
  @SerializedName(SERIALIZED_NAME_YOUR_REFERENCE)
  private String yourReference;

  public ProjectInputModelBase() {
  }

  public ProjectInputModelBase billingContact(SimpleInputModel billingContact) {
    this.billingContact = billingContact;
    return this;
  }

  /**
   * Get billingContact
   * @return billingContact
   */
  @javax.annotation.Nullable
  public SimpleInputModel getBillingContact() {
    return billingContact;
  }

  public void setBillingContact(SimpleInputModel billingContact) {
    this.billingContact = billingContact;
  }


  public ProjectInputModelBase businessUnit(SimpleInputRequiredModel businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  /**
   * Get businessUnit
   * @return businessUnit
   */
  @javax.annotation.Nullable
  public SimpleInputRequiredModel getBusinessUnit() {
    return businessUnit;
  }

  public void setBusinessUnit(SimpleInputRequiredModel businessUnit) {
    this.businessUnit = businessUnit;
  }


  public ProjectInputModelBase completionEstimatePercentage(Integer completionEstimatePercentage) {
    this.completionEstimatePercentage = completionEstimatePercentage;
    return this;
  }

  /**
   * Get completionEstimatePercentage
   * @return completionEstimatePercentage
   */
  @javax.annotation.Nullable
  public Integer getCompletionEstimatePercentage() {
    return completionEstimatePercentage;
  }

  public void setCompletionEstimatePercentage(Integer completionEstimatePercentage) {
    this.completionEstimatePercentage = completionEstimatePercentage;
  }


  public ProjectInputModelBase costCenter(SimpleInputModel costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Get costCenter
   * @return costCenter
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(SimpleInputModel costCenter) {
    this.costCenter = costCenter;
  }


  public ProjectInputModelBase currency(SimpleInputRequiredModel currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public SimpleInputRequiredModel getCurrency() {
    return currency;
  }

  public void setCurrency(SimpleInputRequiredModel currency) {
    this.currency = currency;
  }


  public ProjectInputModelBase customer(SimpleInputRequiredModel customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getCustomer() {
    return customer;
  }

  public void setCustomer(SimpleInputRequiredModel customer) {
    this.customer = customer;
  }


  public ProjectInputModelBase customerContact(SimpleInputModel customerContact) {
    this.customerContact = customerContact;
    return this;
  }

  /**
   * Get customerContact
   * @return customerContact
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCustomerContact() {
    return customerContact;
  }

  public void setCustomerContact(SimpleInputModel customerContact) {
    this.customerContact = customerContact;
  }


  public ProjectInputModelBase deadline(LocalDate deadline) {
    this.deadline = deadline;
    return this;
  }

  /**
   * Get deadline
   * @return deadline
   */
  @javax.annotation.Nullable
  public LocalDate getDeadline() {
    return deadline;
  }

  public void setDeadline(LocalDate deadline) {
    this.deadline = deadline;
  }


  public ProjectInputModelBase description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectInputModelBase expectedOrderDate(LocalDate expectedOrderDate) {
    this.expectedOrderDate = expectedOrderDate;
    return this;
  }

  /**
   * Get expectedOrderDate
   * @return expectedOrderDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpectedOrderDate() {
    return expectedOrderDate;
  }

  public void setExpectedOrderDate(LocalDate expectedOrderDate) {
    this.expectedOrderDate = expectedOrderDate;
  }


  public ProjectInputModelBase expectedValue(MoneyInputModelWithNullableAmount expectedValue) {
    this.expectedValue = expectedValue;
    return this;
  }

  /**
   * Get expectedValue
   * @return expectedValue
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getExpectedValue() {
    return expectedValue;
  }

  public void setExpectedValue(MoneyInputModelWithNullableAmount expectedValue) {
    this.expectedValue = expectedValue;
  }


  public ProjectInputModelBase internalName(String internalName) {
    this.internalName = internalName;
    return this;
  }

  /**
   * Get internalName
   * @return internalName
   */
  @javax.annotation.Nullable
  public String getInternalName() {
    return internalName;
  }

  public void setInternalName(String internalName) {
    this.internalName = internalName;
  }


  public ProjectInputModelBase invoiceNotes(String invoiceNotes) {
    this.invoiceNotes = invoiceNotes;
    return this;
  }

  /**
   * Get invoiceNotes
   * @return invoiceNotes
   */
  @javax.annotation.Nullable
  public String getInvoiceNotes() {
    return invoiceNotes;
  }

  public void setInvoiceNotes(String invoiceNotes) {
    this.invoiceNotes = invoiceNotes;
  }


  public ProjectInputModelBase invoiceTemplate(InvoiceTemplateSubModel invoiceTemplate) {
    this.invoiceTemplate = invoiceTemplate;
    return this;
  }

  /**
   * Get invoiceTemplate
   * @return invoiceTemplate
   */
  @javax.annotation.Nullable
  public InvoiceTemplateSubModel getInvoiceTemplate() {
    return invoiceTemplate;
  }

  public void setInvoiceTemplate(InvoiceTemplateSubModel invoiceTemplate) {
    this.invoiceTemplate = invoiceTemplate;
  }


  public ProjectInputModelBase isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public ProjectInputModelBase isInternal(Boolean isInternal) {
    this.isInternal = isInternal;
    return this;
  }

  /**
   * Get isInternal
   * @return isInternal
   */
  @javax.annotation.Nullable
  public Boolean getIsInternal() {
    return isInternal;
  }

  public void setIsInternal(Boolean isInternal) {
    this.isInternal = isInternal;
  }


  public ProjectInputModelBase isJoiningAllowed(Boolean isJoiningAllowed) {
    this.isJoiningAllowed = isJoiningAllowed;
    return this;
  }

  /**
   * Get isJoiningAllowed
   * @return isJoiningAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsJoiningAllowed() {
    return isJoiningAllowed;
  }

  public void setIsJoiningAllowed(Boolean isJoiningAllowed) {
    this.isJoiningAllowed = isJoiningAllowed;
  }


  public ProjectInputModelBase leadSource(SimpleInputModel leadSource) {
    this.leadSource = leadSource;
    return this;
  }

  /**
   * Get leadSource
   * @return leadSource
   */
  @javax.annotation.Nullable
  public SimpleInputModel getLeadSource() {
    return leadSource;
  }

  public void setLeadSource(SimpleInputModel leadSource) {
    this.leadSource = leadSource;
  }


  public ProjectInputModelBase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectInputModelBase number(Long number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Long getNumber() {
    return number;
  }

  public void setNumber(Long number) {
    this.number = number;
  }


  public ProjectInputModelBase orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * Get orderNumber
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }


  public ProjectInputModelBase ourReference(String ourReference) {
    this.ourReference = ourReference;
    return this;
  }

  /**
   * Get ourReference
   * @return ourReference
   */
  @javax.annotation.Nullable
  public String getOurReference() {
    return ourReference;
  }

  public void setOurReference(String ourReference) {
    this.ourReference = ourReference;
  }


  public ProjectInputModelBase paymentTerm(Integer paymentTerm) {
    this.paymentTerm = paymentTerm;
    return this;
  }

  /**
   * Get paymentTerm
   * @return paymentTerm
   */
  @javax.annotation.Nullable
  public Integer getPaymentTerm() {
    return paymentTerm;
  }

  public void setPaymentTerm(Integer paymentTerm) {
    this.paymentTerm = paymentTerm;
  }


  public ProjectInputModelBase probability(Integer probability) {
    this.probability = probability;
    return this;
  }

  /**
   * Get probability
   * @return probability
   */
  @javax.annotation.Nullable
  public Integer getProbability() {
    return probability;
  }

  public void setProbability(Integer probability) {
    this.probability = probability;
  }


  public ProjectInputModelBase projectOwner(SimpleInputModel projectOwner) {
    this.projectOwner = projectOwner;
    return this;
  }

  /**
   * Get projectOwner
   * @return projectOwner
   */
  @javax.annotation.Nonnull
  public SimpleInputModel getProjectOwner() {
    return projectOwner;
  }

  public void setProjectOwner(SimpleInputModel projectOwner) {
    this.projectOwner = projectOwner;
  }


  public ProjectInputModelBase projectStatus(SimpleProjectStatusInputModel projectStatus) {
    this.projectStatus = projectStatus;
    return this;
  }

  /**
   * Get projectStatus
   * @return projectStatus
   */
  @javax.annotation.Nullable
  public SimpleProjectStatusInputModel getProjectStatus() {
    return projectStatus;
  }

  public void setProjectStatus(SimpleProjectStatusInputModel projectStatus) {
    this.projectStatus = projectStatus;
  }


  public ProjectInputModelBase salesPerson(SimpleInputModel salesPerson) {
    this.salesPerson = salesPerson;
    return this;
  }

  /**
   * Get salesPerson
   * @return salesPerson
   */
  @javax.annotation.Nullable
  public SimpleInputModel getSalesPerson() {
    return salesPerson;
  }

  public void setSalesPerson(SimpleInputModel salesPerson) {
    this.salesPerson = salesPerson;
  }


  public ProjectInputModelBase salesStatus(SimpleSalesStatusInputModel salesStatus) {
    this.salesStatus = salesStatus;
    return this;
  }

  /**
   * Get salesStatus
   * @return salesStatus
   */
  @javax.annotation.Nullable
  public SimpleSalesStatusInputModel getSalesStatus() {
    return salesStatus;
  }

  public void setSalesStatus(SimpleSalesStatusInputModel salesStatus) {
    this.salesStatus = salesStatus;
  }


  public ProjectInputModelBase startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public ProjectInputModelBase useOvertimeMultipliers(Boolean useOvertimeMultipliers) {
    this.useOvertimeMultipliers = useOvertimeMultipliers;
    return this;
  }

  /**
   * Get useOvertimeMultipliers
   * @return useOvertimeMultipliers
   */
  @javax.annotation.Nullable
  public Boolean getUseOvertimeMultipliers() {
    return useOvertimeMultipliers;
  }

  public void setUseOvertimeMultipliers(Boolean useOvertimeMultipliers) {
    this.useOvertimeMultipliers = useOvertimeMultipliers;
  }


  public ProjectInputModelBase useProductsFromSetting(Boolean useProductsFromSetting) {
    this.useProductsFromSetting = useProductsFromSetting;
    return this;
  }

  /**
   * Get useProductsFromSetting
   * @return useProductsFromSetting
   */
  @javax.annotation.Nullable
  public Boolean getUseProductsFromSetting() {
    return useProductsFromSetting;
  }

  public void setUseProductsFromSetting(Boolean useProductsFromSetting) {
    this.useProductsFromSetting = useProductsFromSetting;
  }


  public ProjectInputModelBase useWorktypesFromSetting(Boolean useWorktypesFromSetting) {
    this.useWorktypesFromSetting = useWorktypesFromSetting;
    return this;
  }

  /**
   * Get useWorktypesFromSetting
   * @return useWorktypesFromSetting
   */
  @javax.annotation.Nullable
  public Boolean getUseWorktypesFromSetting() {
    return useWorktypesFromSetting;
  }

  public void setUseWorktypesFromSetting(Boolean useWorktypesFromSetting) {
    this.useWorktypesFromSetting = useWorktypesFromSetting;
  }


  public ProjectInputModelBase yourReference(String yourReference) {
    this.yourReference = yourReference;
    return this;
  }

  /**
   * Get yourReference
   * @return yourReference
   */
  @javax.annotation.Nullable
  public String getYourReference() {
    return yourReference;
  }

  public void setYourReference(String yourReference) {
    this.yourReference = yourReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectInputModelBase projectInputModelBase = (ProjectInputModelBase) o;
    return Objects.equals(this.billingContact, projectInputModelBase.billingContact) &&
        Objects.equals(this.businessUnit, projectInputModelBase.businessUnit) &&
        Objects.equals(this.completionEstimatePercentage, projectInputModelBase.completionEstimatePercentage) &&
        Objects.equals(this.costCenter, projectInputModelBase.costCenter) &&
        Objects.equals(this.currency, projectInputModelBase.currency) &&
        Objects.equals(this.customer, projectInputModelBase.customer) &&
        Objects.equals(this.customerContact, projectInputModelBase.customerContact) &&
        Objects.equals(this.deadline, projectInputModelBase.deadline) &&
        Objects.equals(this.description, projectInputModelBase.description) &&
        Objects.equals(this.expectedOrderDate, projectInputModelBase.expectedOrderDate) &&
        Objects.equals(this.expectedValue, projectInputModelBase.expectedValue) &&
        Objects.equals(this.internalName, projectInputModelBase.internalName) &&
        Objects.equals(this.invoiceNotes, projectInputModelBase.invoiceNotes) &&
        Objects.equals(this.invoiceTemplate, projectInputModelBase.invoiceTemplate) &&
        Objects.equals(this.isClosed, projectInputModelBase.isClosed) &&
        Objects.equals(this.isInternal, projectInputModelBase.isInternal) &&
        Objects.equals(this.isJoiningAllowed, projectInputModelBase.isJoiningAllowed) &&
        Objects.equals(this.leadSource, projectInputModelBase.leadSource) &&
        Objects.equals(this.name, projectInputModelBase.name) &&
        Objects.equals(this.number, projectInputModelBase.number) &&
        Objects.equals(this.orderNumber, projectInputModelBase.orderNumber) &&
        Objects.equals(this.ourReference, projectInputModelBase.ourReference) &&
        Objects.equals(this.paymentTerm, projectInputModelBase.paymentTerm) &&
        Objects.equals(this.probability, projectInputModelBase.probability) &&
        Objects.equals(this.projectOwner, projectInputModelBase.projectOwner) &&
        Objects.equals(this.projectStatus, projectInputModelBase.projectStatus) &&
        Objects.equals(this.salesPerson, projectInputModelBase.salesPerson) &&
        Objects.equals(this.salesStatus, projectInputModelBase.salesStatus) &&
        Objects.equals(this.startDate, projectInputModelBase.startDate) &&
        Objects.equals(this.useOvertimeMultipliers, projectInputModelBase.useOvertimeMultipliers) &&
        Objects.equals(this.useProductsFromSetting, projectInputModelBase.useProductsFromSetting) &&
        Objects.equals(this.useWorktypesFromSetting, projectInputModelBase.useWorktypesFromSetting) &&
        Objects.equals(this.yourReference, projectInputModelBase.yourReference);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingContact, businessUnit, completionEstimatePercentage, costCenter, currency, customer, customerContact, deadline, description, expectedOrderDate, expectedValue, internalName, invoiceNotes, invoiceTemplate, isClosed, isInternal, isJoiningAllowed, leadSource, name, number, orderNumber, ourReference, paymentTerm, probability, projectOwner, projectStatus, salesPerson, salesStatus, startDate, useOvertimeMultipliers, useProductsFromSetting, useWorktypesFromSetting, yourReference);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectInputModelBase {\n");
    sb.append("    billingContact: ").append(toIndentedString(billingContact)).append("\n");
    sb.append("    businessUnit: ").append(toIndentedString(businessUnit)).append("\n");
    sb.append("    completionEstimatePercentage: ").append(toIndentedString(completionEstimatePercentage)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customerContact: ").append(toIndentedString(customerContact)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expectedOrderDate: ").append(toIndentedString(expectedOrderDate)).append("\n");
    sb.append("    expectedValue: ").append(toIndentedString(expectedValue)).append("\n");
    sb.append("    internalName: ").append(toIndentedString(internalName)).append("\n");
    sb.append("    invoiceNotes: ").append(toIndentedString(invoiceNotes)).append("\n");
    sb.append("    invoiceTemplate: ").append(toIndentedString(invoiceTemplate)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    isInternal: ").append(toIndentedString(isInternal)).append("\n");
    sb.append("    isJoiningAllowed: ").append(toIndentedString(isJoiningAllowed)).append("\n");
    sb.append("    leadSource: ").append(toIndentedString(leadSource)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    ourReference: ").append(toIndentedString(ourReference)).append("\n");
    sb.append("    paymentTerm: ").append(toIndentedString(paymentTerm)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    projectOwner: ").append(toIndentedString(projectOwner)).append("\n");
    sb.append("    projectStatus: ").append(toIndentedString(projectStatus)).append("\n");
    sb.append("    salesPerson: ").append(toIndentedString(salesPerson)).append("\n");
    sb.append("    salesStatus: ").append(toIndentedString(salesStatus)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    useOvertimeMultipliers: ").append(toIndentedString(useOvertimeMultipliers)).append("\n");
    sb.append("    useProductsFromSetting: ").append(toIndentedString(useProductsFromSetting)).append("\n");
    sb.append("    useWorktypesFromSetting: ").append(toIndentedString(useWorktypesFromSetting)).append("\n");
    sb.append("    yourReference: ").append(toIndentedString(yourReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingContact");
    openapiFields.add("businessUnit");
    openapiFields.add("completionEstimatePercentage");
    openapiFields.add("costCenter");
    openapiFields.add("currency");
    openapiFields.add("customer");
    openapiFields.add("customerContact");
    openapiFields.add("deadline");
    openapiFields.add("description");
    openapiFields.add("expectedOrderDate");
    openapiFields.add("expectedValue");
    openapiFields.add("internalName");
    openapiFields.add("invoiceNotes");
    openapiFields.add("invoiceTemplate");
    openapiFields.add("isClosed");
    openapiFields.add("isInternal");
    openapiFields.add("isJoiningAllowed");
    openapiFields.add("leadSource");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("orderNumber");
    openapiFields.add("ourReference");
    openapiFields.add("paymentTerm");
    openapiFields.add("probability");
    openapiFields.add("projectOwner");
    openapiFields.add("projectStatus");
    openapiFields.add("salesPerson");
    openapiFields.add("salesStatus");
    openapiFields.add("startDate");
    openapiFields.add("useOvertimeMultipliers");
    openapiFields.add("useProductsFromSetting");
    openapiFields.add("useWorktypesFromSetting");
    openapiFields.add("yourReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("projectOwner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectInputModelBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectInputModelBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectInputModelBase is not found in the empty JSON string", ProjectInputModelBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectInputModelBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectInputModelBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectInputModelBase.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingContact`
      if (jsonObj.get("billingContact") != null && !jsonObj.get("billingContact").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("billingContact"));
      }
      // validate the optional field `businessUnit`
      if (jsonObj.get("businessUnit") != null && !jsonObj.get("businessUnit").isJsonNull()) {
        SimpleInputRequiredModel.validateJsonElement(jsonObj.get("businessUnit"));
      }
      // validate the optional field `costCenter`
      if (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("costCenter"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        SimpleInputRequiredModel.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the required field `customer`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("customer"));
      // validate the optional field `customerContact`
      if (jsonObj.get("customerContact") != null && !jsonObj.get("customerContact").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("customerContact"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `expectedValue`
      if (jsonObj.get("expectedValue") != null && !jsonObj.get("expectedValue").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("expectedValue"));
      }
      if ((jsonObj.get("internalName") != null && !jsonObj.get("internalName").isJsonNull()) && !jsonObj.get("internalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalName").toString()));
      }
      if ((jsonObj.get("invoiceNotes") != null && !jsonObj.get("invoiceNotes").isJsonNull()) && !jsonObj.get("invoiceNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNotes").toString()));
      }
      // validate the optional field `invoiceTemplate`
      if (jsonObj.get("invoiceTemplate") != null && !jsonObj.get("invoiceTemplate").isJsonNull()) {
        InvoiceTemplateSubModel.validateJsonElement(jsonObj.get("invoiceTemplate"));
      }
      // validate the optional field `leadSource`
      if (jsonObj.get("leadSource") != null && !jsonObj.get("leadSource").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("leadSource"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
      if ((jsonObj.get("ourReference") != null && !jsonObj.get("ourReference").isJsonNull()) && !jsonObj.get("ourReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ourReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ourReference").toString()));
      }
      // validate the required field `projectOwner`
      SimpleInputModel.validateJsonElement(jsonObj.get("projectOwner"));
      // validate the optional field `projectStatus`
      if (jsonObj.get("projectStatus") != null && !jsonObj.get("projectStatus").isJsonNull()) {
        SimpleProjectStatusInputModel.validateJsonElement(jsonObj.get("projectStatus"));
      }
      // validate the optional field `salesPerson`
      if (jsonObj.get("salesPerson") != null && !jsonObj.get("salesPerson").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("salesPerson"));
      }
      // validate the optional field `salesStatus`
      if (jsonObj.get("salesStatus") != null && !jsonObj.get("salesStatus").isJsonNull()) {
        SimpleSalesStatusInputModel.validateJsonElement(jsonObj.get("salesStatus"));
      }
      if ((jsonObj.get("yourReference") != null && !jsonObj.get("yourReference").isJsonNull()) && !jsonObj.get("yourReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yourReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yourReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectInputModelBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectInputModelBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectInputModelBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectInputModelBase.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectInputModelBase>() {
           @Override
           public void write(JsonWriter out, ProjectInputModelBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectInputModelBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectInputModelBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectInputModelBase
   * @throws IOException if the JSON string is invalid with respect to ProjectInputModelBase
   */
  public static ProjectInputModelBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectInputModelBase.class);
  }

  /**
   * Convert an instance of ProjectInputModelBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

