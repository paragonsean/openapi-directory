/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.FreeTextInputModel;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProposalInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProposalInputModel {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private SimpleInputModel billingAddress;

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private SimpleInputModel culture;

  public static final String SERIALIZED_NAME_CUSTOMER_CONTACT_PERSON = "customerContactPerson";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CONTACT_PERSON)
  private SimpleInputModel customerContactPerson;

  public static final String SERIALIZED_NAME_FREE_TEXT1 = "freeText1";
  @SerializedName(SERIALIZED_NAME_FREE_TEXT1)
  private FreeTextInputModel freeText1;

  public static final String SERIALIZED_NAME_FREE_TEXT2 = "freeText2";
  @SerializedName(SERIALIZED_NAME_FREE_TEXT2)
  private FreeTextInputModel freeText2;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private SimpleInputModel language;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private SimpleInputRequiredModel project;

  public static final String SERIALIZED_NAME_PROPOSAL_DATE = "proposalDate";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_DATE)
  private LocalDate proposalDate;

  public static final String SERIALIZED_NAME_PROPOSAL_STATUS = "proposalStatus";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_STATUS)
  private SimpleInputModel proposalStatus;

  public ProposalInputModel() {
  }

  public ProposalInputModel billingAddress(SimpleInputModel billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public SimpleInputModel getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(SimpleInputModel billingAddress) {
    this.billingAddress = billingAddress;
  }


  public ProposalInputModel culture(SimpleInputModel culture) {
    this.culture = culture;
    return this;
  }

  /**
   * Get culture
   * @return culture
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCulture() {
    return culture;
  }

  public void setCulture(SimpleInputModel culture) {
    this.culture = culture;
  }


  public ProposalInputModel customerContactPerson(SimpleInputModel customerContactPerson) {
    this.customerContactPerson = customerContactPerson;
    return this;
  }

  /**
   * Get customerContactPerson
   * @return customerContactPerson
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCustomerContactPerson() {
    return customerContactPerson;
  }

  public void setCustomerContactPerson(SimpleInputModel customerContactPerson) {
    this.customerContactPerson = customerContactPerson;
  }


  public ProposalInputModel freeText1(FreeTextInputModel freeText1) {
    this.freeText1 = freeText1;
    return this;
  }

  /**
   * Get freeText1
   * @return freeText1
   */
  @javax.annotation.Nullable
  public FreeTextInputModel getFreeText1() {
    return freeText1;
  }

  public void setFreeText1(FreeTextInputModel freeText1) {
    this.freeText1 = freeText1;
  }


  public ProposalInputModel freeText2(FreeTextInputModel freeText2) {
    this.freeText2 = freeText2;
    return this;
  }

  /**
   * Get freeText2
   * @return freeText2
   */
  @javax.annotation.Nullable
  public FreeTextInputModel getFreeText2() {
    return freeText2;
  }

  public void setFreeText2(FreeTextInputModel freeText2) {
    this.freeText2 = freeText2;
  }


  public ProposalInputModel language(SimpleInputModel language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public SimpleInputModel getLanguage() {
    return language;
  }

  public void setLanguage(SimpleInputModel language) {
    this.language = language;
  }


  public ProposalInputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProposalInputModel project(SimpleInputRequiredModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getProject() {
    return project;
  }

  public void setProject(SimpleInputRequiredModel project) {
    this.project = project;
  }


  public ProposalInputModel proposalDate(LocalDate proposalDate) {
    this.proposalDate = proposalDate;
    return this;
  }

  /**
   * Get proposalDate
   * @return proposalDate
   */
  @javax.annotation.Nullable
  public LocalDate getProposalDate() {
    return proposalDate;
  }

  public void setProposalDate(LocalDate proposalDate) {
    this.proposalDate = proposalDate;
  }


  public ProposalInputModel proposalStatus(SimpleInputModel proposalStatus) {
    this.proposalStatus = proposalStatus;
    return this;
  }

  /**
   * Get proposalStatus
   * @return proposalStatus
   */
  @javax.annotation.Nullable
  public SimpleInputModel getProposalStatus() {
    return proposalStatus;
  }

  public void setProposalStatus(SimpleInputModel proposalStatus) {
    this.proposalStatus = proposalStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProposalInputModel proposalInputModel = (ProposalInputModel) o;
    return Objects.equals(this.billingAddress, proposalInputModel.billingAddress) &&
        Objects.equals(this.culture, proposalInputModel.culture) &&
        Objects.equals(this.customerContactPerson, proposalInputModel.customerContactPerson) &&
        Objects.equals(this.freeText1, proposalInputModel.freeText1) &&
        Objects.equals(this.freeText2, proposalInputModel.freeText2) &&
        Objects.equals(this.language, proposalInputModel.language) &&
        Objects.equals(this.name, proposalInputModel.name) &&
        Objects.equals(this.project, proposalInputModel.project) &&
        Objects.equals(this.proposalDate, proposalInputModel.proposalDate) &&
        Objects.equals(this.proposalStatus, proposalInputModel.proposalStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, culture, customerContactPerson, freeText1, freeText2, language, name, project, proposalDate, proposalStatus);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProposalInputModel {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    customerContactPerson: ").append(toIndentedString(customerContactPerson)).append("\n");
    sb.append("    freeText1: ").append(toIndentedString(freeText1)).append("\n");
    sb.append("    freeText2: ").append(toIndentedString(freeText2)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    proposalDate: ").append(toIndentedString(proposalDate)).append("\n");
    sb.append("    proposalStatus: ").append(toIndentedString(proposalStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAddress");
    openapiFields.add("culture");
    openapiFields.add("customerContactPerson");
    openapiFields.add("freeText1");
    openapiFields.add("freeText2");
    openapiFields.add("language");
    openapiFields.add("name");
    openapiFields.add("project");
    openapiFields.add("proposalDate");
    openapiFields.add("proposalStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("project");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProposalInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProposalInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProposalInputModel is not found in the empty JSON string", ProposalInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProposalInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProposalInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProposalInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `culture`
      if (jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("culture"));
      }
      // validate the optional field `customerContactPerson`
      if (jsonObj.get("customerContactPerson") != null && !jsonObj.get("customerContactPerson").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("customerContactPerson"));
      }
      // validate the optional field `freeText1`
      if (jsonObj.get("freeText1") != null && !jsonObj.get("freeText1").isJsonNull()) {
        FreeTextInputModel.validateJsonElement(jsonObj.get("freeText1"));
      }
      // validate the optional field `freeText2`
      if (jsonObj.get("freeText2") != null && !jsonObj.get("freeText2").isJsonNull()) {
        FreeTextInputModel.validateJsonElement(jsonObj.get("freeText2"));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("language"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `project`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("project"));
      // validate the optional field `proposalStatus`
      if (jsonObj.get("proposalStatus") != null && !jsonObj.get("proposalStatus").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("proposalStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProposalInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProposalInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProposalInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProposalInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProposalInputModel>() {
           @Override
           public void write(JsonWriter out, ProposalInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProposalInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProposalInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProposalInputModel
   * @throws IOException if the JSON string is invalid with respect to ProposalInputModel
   */
  public static ProposalInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProposalInputModel.class);
  }

  /**
   * Convert an instance of ProposalInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

