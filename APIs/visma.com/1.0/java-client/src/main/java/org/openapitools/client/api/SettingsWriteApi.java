/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityTypeModel;
import org.openapitools.client.model.BusinessUnitModel;
import org.openapitools.client.model.CommunicationTypeModel;
import org.openapitools.client.model.ContactRoleModel;
import org.openapitools.client.model.CostAccountModel;
import org.openapitools.client.model.CostCenterModel;
import org.openapitools.client.model.CurrencyOutputModel;
import org.openapitools.client.model.CustomPropertyModel;
import org.openapitools.client.model.CustomerCustomPropertySelectionItemInputModel;
import org.openapitools.client.model.CustomerCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.IndustryModel;
import org.openapitools.client.model.InvoiceStatusModel;
import org.openapitools.client.model.KeywordModel;
import org.openapitools.client.model.LeadSourceModel;
import org.openapitools.client.model.MarketSegmentModel;
import org.openapitools.client.model.OvertimeModel;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.PhaseStatusTypeModel;
import org.openapitools.client.model.ProductCategoryModel;
import org.openapitools.client.model.ProductCountrySettingsModel;
import org.openapitools.client.model.ProductInputModel;
import org.openapitools.client.model.ProductOutputModel;
import org.openapitools.client.model.ProjectBillingCustomerModel2;
import org.openapitools.client.model.ProjectCustomPropertySelectionItemInputModel;
import org.openapitools.client.model.ProjectCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ProjectMemberCostExceptionInputModel;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.ProjectStatusTypeModel;
import org.openapitools.client.model.ProjectTaskStatusModel;
import org.openapitools.client.model.ProposalStatusInputModel;
import org.openapitools.client.model.ProposalStatusOutputModel;
import org.openapitools.client.model.RoleInputModel;
import org.openapitools.client.model.RoleOutputModel;
import org.openapitools.client.model.SalesAccountModel;
import org.openapitools.client.model.SalesStatusTypeInputModel;
import org.openapitools.client.model.SalesStatusTypeOutputModel;
import org.openapitools.client.model.TimeEntryTypeModel;
import org.openapitools.client.model.TravelExpenseTypeCountrySettingsModel;
import org.openapitools.client.model.TravelExpenseTypeInputModel;
import org.openapitools.client.model.TravelExpenseTypeOutputModel;
import org.openapitools.client.model.TravelReimbursementStatusModel;
import org.openapitools.client.model.UserCustomPropertyInputModel;
import org.openapitools.client.model.UserCustomPropertyOutputModel;
import org.openapitools.client.model.UserCustomPropertySelectionItemInputModel;
import org.openapitools.client.model.UserCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.VatRateInputModel;
import org.openapitools.client.model.VatRateOutputModel;
import org.openapitools.client.model.WorkContractInputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkTypeInputModel;
import org.openapitools.client.model.WorkTypeOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SettingsWriteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SettingsWriteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SettingsWriteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activityTypesPatchActivityType
     * @param guid ID of the Activity Type (required)
     * @param patchOperation JSON patch document of ActivityTypeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Activity Types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesPatchActivityTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/activitytypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityTypesPatchActivityTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling activityTypesPatchActivityType(Async)");
        }

        return activityTypesPatchActivityTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an Activity Type or a part of it
     * 
     * @param guid ID of the Activity Type (required)
     * @param patchOperation JSON patch document of ActivityTypeModel (optional)
     * @return List&lt;ActivityTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Activity Types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ActivityTypeModel> activityTypesPatchActivityType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ActivityTypeModel>> localVarResp = activityTypesPatchActivityTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an Activity Type or a part of it
     * 
     * @param guid ID of the Activity Type (required)
     * @param patchOperation JSON patch document of ActivityTypeModel (optional)
     * @return ApiResponse&lt;List&lt;ActivityTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Activity Types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActivityTypeModel>> activityTypesPatchActivityTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = activityTypesPatchActivityTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ActivityTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an Activity Type or a part of it (asynchronously)
     * 
     * @param guid ID of the Activity Type (required)
     * @param patchOperation JSON patch document of ActivityTypeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Activity Types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesPatchActivityTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ActivityTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityTypesPatchActivityTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ActivityTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityTypesPostActivityType
     * @param activityTypeModel Activity type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted ActivityType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesPostActivityTypeCall(ActivityTypeModel activityTypeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activityTypeModel;

        // create path and map variables
        String localVarPath = "/v1/activitytypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityTypesPostActivityTypeValidateBeforeCall(ActivityTypeModel activityTypeModel, final ApiCallback _callback) throws ApiException {
        return activityTypesPostActivityTypeCall(activityTypeModel, _callback);

    }

    /**
     * Insert an Activity type.
     * 
     * @param activityTypeModel Activity type (optional)
     * @return ActivityTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted ActivityType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ActivityTypeModel activityTypesPostActivityType(ActivityTypeModel activityTypeModel) throws ApiException {
        ApiResponse<ActivityTypeModel> localVarResp = activityTypesPostActivityTypeWithHttpInfo(activityTypeModel);
        return localVarResp.getData();
    }

    /**
     * Insert an Activity type.
     * 
     * @param activityTypeModel Activity type (optional)
     * @return ApiResponse&lt;ActivityTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted ActivityType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityTypeModel> activityTypesPostActivityTypeWithHttpInfo(ActivityTypeModel activityTypeModel) throws ApiException {
        okhttp3.Call localVarCall = activityTypesPostActivityTypeValidateBeforeCall(activityTypeModel, null);
        Type localVarReturnType = new TypeToken<ActivityTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert an Activity type. (asynchronously)
     * 
     * @param activityTypeModel Activity type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted ActivityType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesPostActivityTypeAsync(ActivityTypeModel activityTypeModel, final ApiCallback<ActivityTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityTypesPostActivityTypeValidateBeforeCall(activityTypeModel, _callback);
        Type localVarReturnType = new TypeToken<ActivityTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessUnitsPatchBusinessUnit
     * @param guid ID of the businessUnit. (required)
     * @param patchOperation JSON patch document of BusinessUnitModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessUnitsPatchBusinessUnitCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/businessunits/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessUnitsPatchBusinessUnitValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling businessUnitsPatchBusinessUnit(Async)");
        }

        return businessUnitsPatchBusinessUnitCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an businessUnit or a part of it.
     * 
     * @param guid ID of the businessUnit. (required)
     * @param patchOperation JSON patch document of BusinessUnitModel. (optional)
     * @return List&lt;BusinessUnitModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<BusinessUnitModel> businessUnitsPatchBusinessUnit(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<BusinessUnitModel>> localVarResp = businessUnitsPatchBusinessUnitWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an businessUnit or a part of it.
     * 
     * @param guid ID of the businessUnit. (required)
     * @param patchOperation JSON patch document of BusinessUnitModel. (optional)
     * @return ApiResponse&lt;List&lt;BusinessUnitModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BusinessUnitModel>> businessUnitsPatchBusinessUnitWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = businessUnitsPatchBusinessUnitValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<BusinessUnitModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an businessUnit or a part of it. (asynchronously)
     * 
     * @param guid ID of the businessUnit. (required)
     * @param patchOperation JSON patch document of BusinessUnitModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessUnitsPatchBusinessUnitAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<BusinessUnitModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessUnitsPatchBusinessUnitValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<BusinessUnitModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationTypesPatchCommunicationType
     * @param guid ID of the communication type. (required)
     * @param patchOperation JSON Patch document of CommunicationTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated communication model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesPatchCommunicationTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/communicationtypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationTypesPatchCommunicationTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling communicationTypesPatchCommunicationType(Async)");
        }

        return communicationTypesPatchCommunicationTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a communication type or a part of it.
     * 
     * @param guid ID of the communication type. (required)
     * @param patchOperation JSON Patch document of CommunicationTypeModel. (optional)
     * @return List&lt;CommunicationTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated communication model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CommunicationTypeModel> communicationTypesPatchCommunicationType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CommunicationTypeModel>> localVarResp = communicationTypesPatchCommunicationTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a communication type or a part of it.
     * 
     * @param guid ID of the communication type. (required)
     * @param patchOperation JSON Patch document of CommunicationTypeModel. (optional)
     * @return ApiResponse&lt;List&lt;CommunicationTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated communication model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommunicationTypeModel>> communicationTypesPatchCommunicationTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = communicationTypesPatchCommunicationTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CommunicationTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a communication type or a part of it. (asynchronously)
     * 
     * @param guid ID of the communication type. (required)
     * @param patchOperation JSON Patch document of CommunicationTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated communication model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesPatchCommunicationTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CommunicationTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationTypesPatchCommunicationTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CommunicationTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationTypesPostCommunicationType
     * @param communicationTypeModel CommunicationTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created communication type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesPostCommunicationTypeCall(CommunicationTypeModel communicationTypeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = communicationTypeModel;

        // create path and map variables
        String localVarPath = "/v1/communicationtypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationTypesPostCommunicationTypeValidateBeforeCall(CommunicationTypeModel communicationTypeModel, final ApiCallback _callback) throws ApiException {
        return communicationTypesPostCommunicationTypeCall(communicationTypeModel, _callback);

    }

    /**
     * Insert a communication type.
     * 
     * @param communicationTypeModel CommunicationTypeModel. (optional)
     * @return CommunicationTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created communication type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationTypeModel communicationTypesPostCommunicationType(CommunicationTypeModel communicationTypeModel) throws ApiException {
        ApiResponse<CommunicationTypeModel> localVarResp = communicationTypesPostCommunicationTypeWithHttpInfo(communicationTypeModel);
        return localVarResp.getData();
    }

    /**
     * Insert a communication type.
     * 
     * @param communicationTypeModel CommunicationTypeModel. (optional)
     * @return ApiResponse&lt;CommunicationTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created communication type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationTypeModel> communicationTypesPostCommunicationTypeWithHttpInfo(CommunicationTypeModel communicationTypeModel) throws ApiException {
        okhttp3.Call localVarCall = communicationTypesPostCommunicationTypeValidateBeforeCall(communicationTypeModel, null);
        Type localVarReturnType = new TypeToken<CommunicationTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a communication type. (asynchronously)
     * 
     * @param communicationTypeModel CommunicationTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created communication type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesPostCommunicationTypeAsync(CommunicationTypeModel communicationTypeModel, final ApiCallback<CommunicationTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationTypesPostCommunicationTypeValidateBeforeCall(communicationTypeModel, _callback);
        Type localVarReturnType = new TypeToken<CommunicationTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactRolesPatchContactRole
     * @param guid ID of the contact role. (required)
     * @param patchOperation JSON patch document of ContactRoleModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesPatchContactRoleCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/contactroles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactRolesPatchContactRoleValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling contactRolesPatchContactRole(Async)");
        }

        return contactRolesPatchContactRoleCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a contact role or a part of it.
     * 
     * @param guid ID of the contact role. (required)
     * @param patchOperation JSON patch document of ContactRoleModel. (optional)
     * @return List&lt;ContactRoleModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactRoleModel> contactRolesPatchContactRole(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ContactRoleModel>> localVarResp = contactRolesPatchContactRoleWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a contact role or a part of it.
     * 
     * @param guid ID of the contact role. (required)
     * @param patchOperation JSON patch document of ContactRoleModel. (optional)
     * @return ApiResponse&lt;List&lt;ContactRoleModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactRoleModel>> contactRolesPatchContactRoleWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = contactRolesPatchContactRoleValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ContactRoleModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a contact role or a part of it. (asynchronously)
     * 
     * @param guid ID of the contact role. (required)
     * @param patchOperation JSON patch document of ContactRoleModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesPatchContactRoleAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ContactRoleModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactRolesPatchContactRoleValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ContactRoleModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactRolesPostContactRole
     * @param contactRoleModel ContactRoleModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesPostContactRoleCall(ContactRoleModel contactRoleModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactRoleModel;

        // create path and map variables
        String localVarPath = "/v1/contactroles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactRolesPostContactRoleValidateBeforeCall(ContactRoleModel contactRoleModel, final ApiCallback _callback) throws ApiException {
        return contactRolesPostContactRoleCall(contactRoleModel, _callback);

    }

    /**
     * Insert a contact role.
     * 
     * @param contactRoleModel ContactRoleModel. (optional)
     * @return ContactRoleModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ContactRoleModel contactRolesPostContactRole(ContactRoleModel contactRoleModel) throws ApiException {
        ApiResponse<ContactRoleModel> localVarResp = contactRolesPostContactRoleWithHttpInfo(contactRoleModel);
        return localVarResp.getData();
    }

    /**
     * Insert a contact role.
     * 
     * @param contactRoleModel ContactRoleModel. (optional)
     * @return ApiResponse&lt;ContactRoleModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactRoleModel> contactRolesPostContactRoleWithHttpInfo(ContactRoleModel contactRoleModel) throws ApiException {
        okhttp3.Call localVarCall = contactRolesPostContactRoleValidateBeforeCall(contactRoleModel, null);
        Type localVarReturnType = new TypeToken<ContactRoleModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a contact role. (asynchronously)
     * 
     * @param contactRoleModel ContactRoleModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesPostContactRoleAsync(ContactRoleModel contactRoleModel, final ApiCallback<ContactRoleModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactRolesPostContactRoleValidateBeforeCall(contactRoleModel, _callback);
        Type localVarReturnType = new TypeToken<ContactRoleModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costAccountsPatchCostAccount
     * @param guid ID of the cost account. (required)
     * @param patchOperation JSON patch document of CostAccountModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsPatchCostAccountCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/costaccounts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costAccountsPatchCostAccountValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling costAccountsPatchCostAccount(Async)");
        }

        return costAccountsPatchCostAccountCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a cost account or a part of it.
     * 
     * @param guid ID of the cost account. (required)
     * @param patchOperation JSON patch document of CostAccountModel. (optional)
     * @return List&lt;CostAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CostAccountModel> costAccountsPatchCostAccount(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CostAccountModel>> localVarResp = costAccountsPatchCostAccountWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a cost account or a part of it.
     * 
     * @param guid ID of the cost account. (required)
     * @param patchOperation JSON patch document of CostAccountModel. (optional)
     * @return ApiResponse&lt;List&lt;CostAccountModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CostAccountModel>> costAccountsPatchCostAccountWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = costAccountsPatchCostAccountValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CostAccountModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a cost account or a part of it. (asynchronously)
     * 
     * @param guid ID of the cost account. (required)
     * @param patchOperation JSON patch document of CostAccountModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsPatchCostAccountAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CostAccountModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = costAccountsPatchCostAccountValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CostAccountModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costAccountsPostCostAccount
     * @param costAccountModel CostAccountModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsPostCostAccountCall(CostAccountModel costAccountModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = costAccountModel;

        // create path and map variables
        String localVarPath = "/v1/costaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costAccountsPostCostAccountValidateBeforeCall(CostAccountModel costAccountModel, final ApiCallback _callback) throws ApiException {
        return costAccountsPostCostAccountCall(costAccountModel, _callback);

    }

    /**
     * Insert a cost account.
     * 
     * @param costAccountModel CostAccountModel. (optional)
     * @return CostAccountModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CostAccountModel costAccountsPostCostAccount(CostAccountModel costAccountModel) throws ApiException {
        ApiResponse<CostAccountModel> localVarResp = costAccountsPostCostAccountWithHttpInfo(costAccountModel);
        return localVarResp.getData();
    }

    /**
     * Insert a cost account.
     * 
     * @param costAccountModel CostAccountModel. (optional)
     * @return ApiResponse&lt;CostAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CostAccountModel> costAccountsPostCostAccountWithHttpInfo(CostAccountModel costAccountModel) throws ApiException {
        okhttp3.Call localVarCall = costAccountsPostCostAccountValidateBeforeCall(costAccountModel, null);
        Type localVarReturnType = new TypeToken<CostAccountModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a cost account. (asynchronously)
     * 
     * @param costAccountModel CostAccountModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsPostCostAccountAsync(CostAccountModel costAccountModel, final ApiCallback<CostAccountModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = costAccountsPostCostAccountValidateBeforeCall(costAccountModel, _callback);
        Type localVarReturnType = new TypeToken<CostAccountModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costCentersPatchCostCenter
     * @param guid ID of the cost center. (required)
     * @param patchOperation JSON patch document of CostCenterModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersPatchCostCenterCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/costcenters/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costCentersPatchCostCenterValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling costCentersPatchCostCenter(Async)");
        }

        return costCentersPatchCostCenterCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a cost center or a part of it.
     * 
     * @param guid ID of the cost center. (required)
     * @param patchOperation JSON patch document of CostCenterModel. (optional)
     * @return List&lt;CostCenterModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CostCenterModel> costCentersPatchCostCenter(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CostCenterModel>> localVarResp = costCentersPatchCostCenterWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a cost center or a part of it.
     * 
     * @param guid ID of the cost center. (required)
     * @param patchOperation JSON patch document of CostCenterModel. (optional)
     * @return ApiResponse&lt;List&lt;CostCenterModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CostCenterModel>> costCentersPatchCostCenterWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = costCentersPatchCostCenterValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CostCenterModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a cost center or a part of it. (asynchronously)
     * 
     * @param guid ID of the cost center. (required)
     * @param patchOperation JSON patch document of CostCenterModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersPatchCostCenterAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CostCenterModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = costCentersPatchCostCenterValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CostCenterModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costCentersPostCostCenter
     * @param costCenterModel CostCenterModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersPostCostCenterCall(CostCenterModel costCenterModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = costCenterModel;

        // create path and map variables
        String localVarPath = "/v1/costcenters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costCentersPostCostCenterValidateBeforeCall(CostCenterModel costCenterModel, final ApiCallback _callback) throws ApiException {
        return costCentersPostCostCenterCall(costCenterModel, _callback);

    }

    /**
     * Insert a cost center.
     * 
     * @param costCenterModel CostCenterModel. (optional)
     * @return CostCenterModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CostCenterModel costCentersPostCostCenter(CostCenterModel costCenterModel) throws ApiException {
        ApiResponse<CostCenterModel> localVarResp = costCentersPostCostCenterWithHttpInfo(costCenterModel);
        return localVarResp.getData();
    }

    /**
     * Insert a cost center.
     * 
     * @param costCenterModel CostCenterModel. (optional)
     * @return ApiResponse&lt;CostCenterModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CostCenterModel> costCentersPostCostCenterWithHttpInfo(CostCenterModel costCenterModel) throws ApiException {
        okhttp3.Call localVarCall = costCentersPostCostCenterValidateBeforeCall(costCenterModel, null);
        Type localVarReturnType = new TypeToken<CostCenterModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a cost center. (asynchronously)
     * 
     * @param costCenterModel CostCenterModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created cost center. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersPostCostCenterAsync(CostCenterModel costCenterModel, final ApiCallback<CostCenterModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = costCentersPostCostCenterValidateBeforeCall(costCenterModel, _callback);
        Type localVarReturnType = new TypeToken<CostCenterModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currenciesPatchCurrency
     * @param guid ID of the currency. (required)
     * @param patchOperation JSON patch document of CurrencyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currenciesPatchCurrencyCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/currencies/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currenciesPatchCurrencyValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling currenciesPatchCurrency(Async)");
        }

        return currenciesPatchCurrencyCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an currency or a part of it.
     * 
     * @param guid ID of the currency. (required)
     * @param patchOperation JSON patch document of CurrencyModel. (optional)
     * @return List&lt;CurrencyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CurrencyOutputModel> currenciesPatchCurrency(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CurrencyOutputModel>> localVarResp = currenciesPatchCurrencyWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an currency or a part of it.
     * 
     * @param guid ID of the currency. (required)
     * @param patchOperation JSON patch document of CurrencyModel. (optional)
     * @return ApiResponse&lt;List&lt;CurrencyOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CurrencyOutputModel>> currenciesPatchCurrencyWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = currenciesPatchCurrencyValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CurrencyOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an currency or a part of it. (asynchronously)
     * 
     * @param guid ID of the currency. (required)
     * @param patchOperation JSON patch document of CurrencyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currenciesPatchCurrencyAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CurrencyOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = currenciesPatchCurrencyValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CurrencyOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertiesPatchCustomerCustomProperty
     * @param guid ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesPatchCustomerCustomPropertyCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertiesPatchCustomerCustomPropertyValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customerCustomPropertiesPatchCustomerCustomProperty(Async)");
        }

        return customerCustomPropertiesPatchCustomerCustomPropertyCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a customer custom property or a part of it.
     * 
     * @param guid ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertyModel. (optional)
     * @return List&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPropertyModel> customerCustomPropertiesPatchCustomerCustomProperty(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CustomPropertyModel>> localVarResp = customerCustomPropertiesPatchCustomerCustomPropertyWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a customer custom property or a part of it.
     * 
     * @param guid ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertyModel. (optional)
     * @return ApiResponse&lt;List&lt;CustomPropertyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPropertyModel>> customerCustomPropertiesPatchCustomerCustomPropertyWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertiesPatchCustomerCustomPropertyValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a customer custom property or a part of it. (asynchronously)
     * 
     * @param guid ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesPatchCustomerCustomPropertyAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CustomPropertyModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertiesPatchCustomerCustomPropertyValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertiesPostCustomerCustomProperty
     * @param customPropertyModel CustomerCustomPropertyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesPostCustomerCustomPropertyCall(CustomPropertyModel customPropertyModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customPropertyModel;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertiesPostCustomerCustomPropertyValidateBeforeCall(CustomPropertyModel customPropertyModel, final ApiCallback _callback) throws ApiException {
        return customerCustomPropertiesPostCustomerCustomPropertyCall(customPropertyModel, _callback);

    }

    /**
     * Insert a customer custom property.
     * 
     * @param customPropertyModel CustomerCustomPropertyModel. (optional)
     * @return List&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPropertyModel> customerCustomPropertiesPostCustomerCustomProperty(CustomPropertyModel customPropertyModel) throws ApiException {
        ApiResponse<List<CustomPropertyModel>> localVarResp = customerCustomPropertiesPostCustomerCustomPropertyWithHttpInfo(customPropertyModel);
        return localVarResp.getData();
    }

    /**
     * Insert a customer custom property.
     * 
     * @param customPropertyModel CustomerCustomPropertyModel. (optional)
     * @return ApiResponse&lt;List&lt;CustomPropertyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPropertyModel>> customerCustomPropertiesPostCustomerCustomPropertyWithHttpInfo(CustomPropertyModel customPropertyModel) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertiesPostCustomerCustomPropertyValidateBeforeCall(customPropertyModel, null);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a customer custom property. (asynchronously)
     * 
     * @param customPropertyModel CustomerCustomPropertyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesPostCustomerCustomPropertyAsync(CustomPropertyModel customPropertyModel, final ApiCallback<List<CustomPropertyModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertiesPostCustomerCustomPropertyValidateBeforeCall(customPropertyModel, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem
     * @param guid ID of the customer custom property selection item. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertySelectionItemInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties/customercustompropertyselectionitems/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem(Async)");
        }

        return customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a customer custom property selection item or a part of it.
     * 
     * @param guid ID of the customer custom property selection item. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertySelectionItemInputModel. (optional)
     * @return List&lt;CustomerCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerCustomPropertySelectionItemOutputModel> customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CustomerCustomPropertySelectionItemOutputModel>> localVarResp = customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a customer custom property selection item or a part of it.
     * 
     * @param guid ID of the customer custom property selection item. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertySelectionItemInputModel. (optional)
     * @return ApiResponse&lt;List&lt;CustomerCustomPropertySelectionItemOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerCustomPropertySelectionItemOutputModel>> customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CustomerCustomPropertySelectionItemOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a customer custom property selection item or a part of it. (asynchronously)
     * 
     * @param guid ID of the customer custom property selection item. (required)
     * @param patchOperation JSON Patch document of CustomerCustomPropertySelectionItemInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated customer custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CustomerCustomPropertySelectionItemOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerCustomPropertySelectionItemOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem
     * @param customerCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemCall(CustomerCustomPropertySelectionItemInputModel customerCustomPropertySelectionItemInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerCustomPropertySelectionItemInputModel;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties/customercustompropertyselectionitems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemValidateBeforeCall(CustomerCustomPropertySelectionItemInputModel customerCustomPropertySelectionItemInputModel, final ApiCallback _callback) throws ApiException {
        return customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemCall(customerCustomPropertySelectionItemInputModel, _callback);

    }

    /**
     * Insert a customer custom property selection item.
     * 
     * @param customerCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @return CustomerCustomPropertySelectionItemOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerCustomPropertySelectionItemOutputModel customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem(CustomerCustomPropertySelectionItemInputModel customerCustomPropertySelectionItemInputModel) throws ApiException {
        ApiResponse<CustomerCustomPropertySelectionItemOutputModel> localVarResp = customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemWithHttpInfo(customerCustomPropertySelectionItemInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a customer custom property selection item.
     * 
     * @param customerCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @return ApiResponse&lt;CustomerCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerCustomPropertySelectionItemOutputModel> customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemWithHttpInfo(CustomerCustomPropertySelectionItemInputModel customerCustomPropertySelectionItemInputModel) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemValidateBeforeCall(customerCustomPropertySelectionItemInputModel, null);
        Type localVarReturnType = new TypeToken<CustomerCustomPropertySelectionItemOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a customer custom property selection item. (asynchronously)
     * 
     * @param customerCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created customer custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemAsync(CustomerCustomPropertySelectionItemInputModel customerCustomPropertySelectionItemInputModel, final ApiCallback<CustomerCustomPropertySelectionItemOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemValidateBeforeCall(customerCustomPropertySelectionItemInputModel, _callback);
        Type localVarReturnType = new TypeToken<CustomerCustomPropertySelectionItemOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for industriesPatchIndustry
     * @param guid ID of the industry. (required)
     * @param patchOperation JSON Patch document of IndustryModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesPatchIndustryCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/industries/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call industriesPatchIndustryValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling industriesPatchIndustry(Async)");
        }

        return industriesPatchIndustryCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an industry or a part of it.
     * 
     * @param guid ID of the industry. (required)
     * @param patchOperation JSON Patch document of IndustryModel. (optional)
     * @return List&lt;IndustryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<IndustryModel> industriesPatchIndustry(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<IndustryModel>> localVarResp = industriesPatchIndustryWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an industry or a part of it.
     * 
     * @param guid ID of the industry. (required)
     * @param patchOperation JSON Patch document of IndustryModel. (optional)
     * @return ApiResponse&lt;List&lt;IndustryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndustryModel>> industriesPatchIndustryWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = industriesPatchIndustryValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<IndustryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an industry or a part of it. (asynchronously)
     * 
     * @param guid ID of the industry. (required)
     * @param patchOperation JSON Patch document of IndustryModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesPatchIndustryAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<IndustryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = industriesPatchIndustryValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<IndustryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for industriesPostIndustry
     * @param industryModel IndustryModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesPostIndustryCall(IndustryModel industryModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = industryModel;

        // create path and map variables
        String localVarPath = "/v1/industries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call industriesPostIndustryValidateBeforeCall(IndustryModel industryModel, final ApiCallback _callback) throws ApiException {
        return industriesPostIndustryCall(industryModel, _callback);

    }

    /**
     * Insert an industry.
     * 
     * @param industryModel IndustryModel. (optional)
     * @return IndustryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public IndustryModel industriesPostIndustry(IndustryModel industryModel) throws ApiException {
        ApiResponse<IndustryModel> localVarResp = industriesPostIndustryWithHttpInfo(industryModel);
        return localVarResp.getData();
    }

    /**
     * Insert an industry.
     * 
     * @param industryModel IndustryModel. (optional)
     * @return ApiResponse&lt;IndustryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndustryModel> industriesPostIndustryWithHttpInfo(IndustryModel industryModel) throws ApiException {
        okhttp3.Call localVarCall = industriesPostIndustryValidateBeforeCall(industryModel, null);
        Type localVarReturnType = new TypeToken<IndustryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert an industry. (asynchronously)
     * 
     * @param industryModel IndustryModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesPostIndustryAsync(IndustryModel industryModel, final ApiCallback<IndustryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = industriesPostIndustryValidateBeforeCall(industryModel, _callback);
        Type localVarReturnType = new TypeToken<IndustryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceStatusesPatchInvoiceStatus
     * @param guid ID of the Invoice status. (required)
     * @param patchOperation JSON patch document of InvoiceStatusModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Invoice statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesPatchInvoiceStatusCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/invoicestatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceStatusesPatchInvoiceStatusValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoiceStatusesPatchInvoiceStatus(Async)");
        }

        return invoiceStatusesPatchInvoiceStatusCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an Invoice status or a part of it.
     * 
     * @param guid ID of the Invoice status. (required)
     * @param patchOperation JSON patch document of InvoiceStatusModel. (optional)
     * @return List&lt;InvoiceStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Invoice statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceStatusModel> invoiceStatusesPatchInvoiceStatus(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<InvoiceStatusModel>> localVarResp = invoiceStatusesPatchInvoiceStatusWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an Invoice status or a part of it.
     * 
     * @param guid ID of the Invoice status. (required)
     * @param patchOperation JSON patch document of InvoiceStatusModel. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Invoice statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceStatusModel>> invoiceStatusesPatchInvoiceStatusWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = invoiceStatusesPatchInvoiceStatusValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<InvoiceStatusModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an Invoice status or a part of it. (asynchronously)
     * 
     * @param guid ID of the Invoice status. (required)
     * @param patchOperation JSON patch document of InvoiceStatusModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Invoice statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesPatchInvoiceStatusAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<InvoiceStatusModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceStatusesPatchInvoiceStatusValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceStatusModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceStatusesPostInvoiceStatus
     * @param invoiceStatusModel InvoiceStatusModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesPostInvoiceStatusCall(InvoiceStatusModel invoiceStatusModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceStatusModel;

        // create path and map variables
        String localVarPath = "/v1/invoicestatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceStatusesPostInvoiceStatusValidateBeforeCall(InvoiceStatusModel invoiceStatusModel, final ApiCallback _callback) throws ApiException {
        return invoiceStatusesPostInvoiceStatusCall(invoiceStatusModel, _callback);

    }

    /**
     * Insert a invoice status.
     * 
     * @param invoiceStatusModel InvoiceStatusModel. (optional)
     * @return InvoiceStatusModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceStatusModel invoiceStatusesPostInvoiceStatus(InvoiceStatusModel invoiceStatusModel) throws ApiException {
        ApiResponse<InvoiceStatusModel> localVarResp = invoiceStatusesPostInvoiceStatusWithHttpInfo(invoiceStatusModel);
        return localVarResp.getData();
    }

    /**
     * Insert a invoice status.
     * 
     * @param invoiceStatusModel InvoiceStatusModel. (optional)
     * @return ApiResponse&lt;InvoiceStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceStatusModel> invoiceStatusesPostInvoiceStatusWithHttpInfo(InvoiceStatusModel invoiceStatusModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceStatusesPostInvoiceStatusValidateBeforeCall(invoiceStatusModel, null);
        Type localVarReturnType = new TypeToken<InvoiceStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a invoice status. (asynchronously)
     * 
     * @param invoiceStatusModel InvoiceStatusModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesPostInvoiceStatusAsync(InvoiceStatusModel invoiceStatusModel, final ApiCallback<InvoiceStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceStatusesPostInvoiceStatusValidateBeforeCall(invoiceStatusModel, _callback);
        Type localVarReturnType = new TypeToken<InvoiceStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsPatchKeyword
     * @param guid ID of the keyword. (required)
     * @param patchOperation JSON Patch document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsPatchKeywordCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/keywords/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsPatchKeywordValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling keywordsPatchKeyword(Async)");
        }

        return keywordsPatchKeywordCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a keyword or a part of it.
     * 
     * @param guid ID of the keyword. (required)
     * @param patchOperation JSON Patch document. (optional)
     * @return List&lt;KeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<KeywordModel> keywordsPatchKeyword(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<KeywordModel>> localVarResp = keywordsPatchKeywordWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a keyword or a part of it.
     * 
     * @param guid ID of the keyword. (required)
     * @param patchOperation JSON Patch document. (optional)
     * @return ApiResponse&lt;List&lt;KeywordModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeywordModel>> keywordsPatchKeywordWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = keywordsPatchKeywordValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<KeywordModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a keyword or a part of it. (asynchronously)
     * 
     * @param guid ID of the keyword. (required)
     * @param patchOperation JSON Patch document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsPatchKeywordAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<KeywordModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsPatchKeywordValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<KeywordModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsPostKeyword
     * @param keywordModel KeywordModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsPostKeywordCall(KeywordModel keywordModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordModel;

        // create path and map variables
        String localVarPath = "/v1/keywords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsPostKeywordValidateBeforeCall(KeywordModel keywordModel, final ApiCallback _callback) throws ApiException {
        return keywordsPostKeywordCall(keywordModel, _callback);

    }

    /**
     * Insert a keyword.
     * 
     * @param keywordModel KeywordModel. (optional)
     * @return KeywordModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public KeywordModel keywordsPostKeyword(KeywordModel keywordModel) throws ApiException {
        ApiResponse<KeywordModel> localVarResp = keywordsPostKeywordWithHttpInfo(keywordModel);
        return localVarResp.getData();
    }

    /**
     * Insert a keyword.
     * 
     * @param keywordModel KeywordModel. (optional)
     * @return ApiResponse&lt;KeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordModel> keywordsPostKeywordWithHttpInfo(KeywordModel keywordModel) throws ApiException {
        okhttp3.Call localVarCall = keywordsPostKeywordValidateBeforeCall(keywordModel, null);
        Type localVarReturnType = new TypeToken<KeywordModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a keyword. (asynchronously)
     * 
     * @param keywordModel KeywordModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created contact role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsPostKeywordAsync(KeywordModel keywordModel, final ApiCallback<KeywordModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsPostKeywordValidateBeforeCall(keywordModel, _callback);
        Type localVarReturnType = new TypeToken<KeywordModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leadSourcesPatchLeadSource
     * @param guid ID of the lead source. (required)
     * @param patchOperation JSON patch document of LeadSourceModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesPatchLeadSourceCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/leadsources/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leadSourcesPatchLeadSourceValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling leadSourcesPatchLeadSource(Async)");
        }

        return leadSourcesPatchLeadSourceCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an lead source or a part of it.
     * 
     * @param guid ID of the lead source. (required)
     * @param patchOperation JSON patch document of LeadSourceModel. (optional)
     * @return List&lt;LeadSourceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<LeadSourceModel> leadSourcesPatchLeadSource(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<LeadSourceModel>> localVarResp = leadSourcesPatchLeadSourceWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an lead source or a part of it.
     * 
     * @param guid ID of the lead source. (required)
     * @param patchOperation JSON patch document of LeadSourceModel. (optional)
     * @return ApiResponse&lt;List&lt;LeadSourceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LeadSourceModel>> leadSourcesPatchLeadSourceWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = leadSourcesPatchLeadSourceValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<LeadSourceModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an lead source or a part of it. (asynchronously)
     * 
     * @param guid ID of the lead source. (required)
     * @param patchOperation JSON patch document of LeadSourceModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesPatchLeadSourceAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<LeadSourceModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = leadSourcesPatchLeadSourceValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<LeadSourceModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leadSourcesPostLeadSource
     * @param leadSourceModel LeadSourceModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesPostLeadSourceCall(LeadSourceModel leadSourceModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leadSourceModel;

        // create path and map variables
        String localVarPath = "/v1/leadsources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leadSourcesPostLeadSourceValidateBeforeCall(LeadSourceModel leadSourceModel, final ApiCallback _callback) throws ApiException {
        return leadSourcesPostLeadSourceCall(leadSourceModel, _callback);

    }

    /**
     * Insert a lead source.
     * 
     * @param leadSourceModel LeadSourceModel. (optional)
     * @return LeadSourceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public LeadSourceModel leadSourcesPostLeadSource(LeadSourceModel leadSourceModel) throws ApiException {
        ApiResponse<LeadSourceModel> localVarResp = leadSourcesPostLeadSourceWithHttpInfo(leadSourceModel);
        return localVarResp.getData();
    }

    /**
     * Insert a lead source.
     * 
     * @param leadSourceModel LeadSourceModel. (optional)
     * @return ApiResponse&lt;LeadSourceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeadSourceModel> leadSourcesPostLeadSourceWithHttpInfo(LeadSourceModel leadSourceModel) throws ApiException {
        okhttp3.Call localVarCall = leadSourcesPostLeadSourceValidateBeforeCall(leadSourceModel, null);
        Type localVarReturnType = new TypeToken<LeadSourceModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a lead source. (asynchronously)
     * 
     * @param leadSourceModel LeadSourceModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesPostLeadSourceAsync(LeadSourceModel leadSourceModel, final ApiCallback<LeadSourceModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = leadSourcesPostLeadSourceValidateBeforeCall(leadSourceModel, _callback);
        Type localVarReturnType = new TypeToken<LeadSourceModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketSegmentsPatchMarketSegment
     * @param guid ID of the Market Segment. (required)
     * @param patchOperation JSON patch document of MarketSegmentModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsPatchMarketSegmentCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/marketsegments/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketSegmentsPatchMarketSegmentValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling marketSegmentsPatchMarketSegment(Async)");
        }

        return marketSegmentsPatchMarketSegmentCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an Market Segment or a part of it.
     * 
     * @param guid ID of the Market Segment. (required)
     * @param patchOperation JSON patch document of MarketSegmentModel. (optional)
     * @return List&lt;MarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<MarketSegmentModel> marketSegmentsPatchMarketSegment(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<MarketSegmentModel>> localVarResp = marketSegmentsPatchMarketSegmentWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an Market Segment or a part of it.
     * 
     * @param guid ID of the Market Segment. (required)
     * @param patchOperation JSON patch document of MarketSegmentModel. (optional)
     * @return ApiResponse&lt;List&lt;MarketSegmentModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MarketSegmentModel>> marketSegmentsPatchMarketSegmentWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = marketSegmentsPatchMarketSegmentValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<MarketSegmentModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an Market Segment or a part of it. (asynchronously)
     * 
     * @param guid ID of the Market Segment. (required)
     * @param patchOperation JSON patch document of MarketSegmentModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsPatchMarketSegmentAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<MarketSegmentModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketSegmentsPatchMarketSegmentValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<MarketSegmentModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketSegmentsPostMarketSegment
     * @param marketSegmentModel MarketSegmentModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created market segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsPostMarketSegmentCall(MarketSegmentModel marketSegmentModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marketSegmentModel;

        // create path and map variables
        String localVarPath = "/v1/marketsegments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketSegmentsPostMarketSegmentValidateBeforeCall(MarketSegmentModel marketSegmentModel, final ApiCallback _callback) throws ApiException {
        return marketSegmentsPostMarketSegmentCall(marketSegmentModel, _callback);

    }

    /**
     * Insert a market segment.
     * 
     * @param marketSegmentModel MarketSegmentModel. (optional)
     * @return MarketSegmentModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created market segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public MarketSegmentModel marketSegmentsPostMarketSegment(MarketSegmentModel marketSegmentModel) throws ApiException {
        ApiResponse<MarketSegmentModel> localVarResp = marketSegmentsPostMarketSegmentWithHttpInfo(marketSegmentModel);
        return localVarResp.getData();
    }

    /**
     * Insert a market segment.
     * 
     * @param marketSegmentModel MarketSegmentModel. (optional)
     * @return ApiResponse&lt;MarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created market segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketSegmentModel> marketSegmentsPostMarketSegmentWithHttpInfo(MarketSegmentModel marketSegmentModel) throws ApiException {
        okhttp3.Call localVarCall = marketSegmentsPostMarketSegmentValidateBeforeCall(marketSegmentModel, null);
        Type localVarReturnType = new TypeToken<MarketSegmentModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a market segment. (asynchronously)
     * 
     * @param marketSegmentModel MarketSegmentModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created market segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsPostMarketSegmentAsync(MarketSegmentModel marketSegmentModel, final ApiCallback<MarketSegmentModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketSegmentsPostMarketSegmentValidateBeforeCall(marketSegmentModel, _callback);
        Type localVarReturnType = new TypeToken<MarketSegmentModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimesPatchOvertime
     * @param guid ID of the overtime. (required)
     * @param patchOperation JSON patch document of OvertimeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of overtimes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesPatchOvertimeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/overtimes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimesPatchOvertimeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling overtimesPatchOvertime(Async)");
        }

        return overtimesPatchOvertimeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an overtime or a part of it.
     * 
     * @param guid ID of the overtime. (required)
     * @param patchOperation JSON patch document of OvertimeModel. (optional)
     * @return List&lt;OvertimeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of overtimes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<OvertimeModel> overtimesPatchOvertime(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<OvertimeModel>> localVarResp = overtimesPatchOvertimeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an overtime or a part of it.
     * 
     * @param guid ID of the overtime. (required)
     * @param patchOperation JSON patch document of OvertimeModel. (optional)
     * @return ApiResponse&lt;List&lt;OvertimeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of overtimes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OvertimeModel>> overtimesPatchOvertimeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = overtimesPatchOvertimeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<OvertimeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an overtime or a part of it. (asynchronously)
     * 
     * @param guid ID of the overtime. (required)
     * @param patchOperation JSON patch document of OvertimeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of overtimes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesPatchOvertimeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<OvertimeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimesPatchOvertimeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<OvertimeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimesPostOvertime
     * @param overtimeModel OvertimeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created overtime. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesPostOvertimeCall(OvertimeModel overtimeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = overtimeModel;

        // create path and map variables
        String localVarPath = "/v1/overtimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimesPostOvertimeValidateBeforeCall(OvertimeModel overtimeModel, final ApiCallback _callback) throws ApiException {
        return overtimesPostOvertimeCall(overtimeModel, _callback);

    }

    /**
     * Insert an overtime.
     * 
     * @param overtimeModel OvertimeModel. (optional)
     * @return OvertimeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created overtime. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public OvertimeModel overtimesPostOvertime(OvertimeModel overtimeModel) throws ApiException {
        ApiResponse<OvertimeModel> localVarResp = overtimesPostOvertimeWithHttpInfo(overtimeModel);
        return localVarResp.getData();
    }

    /**
     * Insert an overtime.
     * 
     * @param overtimeModel OvertimeModel. (optional)
     * @return ApiResponse&lt;OvertimeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created overtime. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OvertimeModel> overtimesPostOvertimeWithHttpInfo(OvertimeModel overtimeModel) throws ApiException {
        okhttp3.Call localVarCall = overtimesPostOvertimeValidateBeforeCall(overtimeModel, null);
        Type localVarReturnType = new TypeToken<OvertimeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert an overtime. (asynchronously)
     * 
     * @param overtimeModel OvertimeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created overtime. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesPostOvertimeAsync(OvertimeModel overtimeModel, final ApiCallback<OvertimeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimesPostOvertimeValidateBeforeCall(overtimeModel, _callback);
        Type localVarReturnType = new TypeToken<OvertimeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseStatusTypesPatchPhaseStatusType
     * @param guid ID of the phase status type (required)
     * @param patchOperation JSON patch document of TaskStatusTypeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesPatchPhaseStatusTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/phasestatustypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseStatusTypesPatchPhaseStatusTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling phaseStatusTypesPatchPhaseStatusType(Async)");
        }

        return phaseStatusTypesPatchPhaseStatusTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a phase status type or a part of it
     * 
     * @param guid ID of the phase status type (required)
     * @param patchOperation JSON patch document of TaskStatusTypeModel (optional)
     * @return List&lt;PhaseStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseStatusTypeModel> phaseStatusTypesPatchPhaseStatusType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<PhaseStatusTypeModel>> localVarResp = phaseStatusTypesPatchPhaseStatusTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a phase status type or a part of it
     * 
     * @param guid ID of the phase status type (required)
     * @param patchOperation JSON patch document of TaskStatusTypeModel (optional)
     * @return ApiResponse&lt;List&lt;PhaseStatusTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseStatusTypeModel>> phaseStatusTypesPatchPhaseStatusTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = phaseStatusTypesPatchPhaseStatusTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<PhaseStatusTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a phase status type or a part of it (asynchronously)
     * 
     * @param guid ID of the phase status type (required)
     * @param patchOperation JSON patch document of TaskStatusTypeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesPatchPhaseStatusTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<PhaseStatusTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseStatusTypesPatchPhaseStatusTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseStatusTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseStatusTypesPostPhaseStatusType
     * @param phaseStatusTypeModel PhaseStatusTypeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesPostPhaseStatusTypeCall(PhaseStatusTypeModel phaseStatusTypeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phaseStatusTypeModel;

        // create path and map variables
        String localVarPath = "/v1/phasestatustypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseStatusTypesPostPhaseStatusTypeValidateBeforeCall(PhaseStatusTypeModel phaseStatusTypeModel, final ApiCallback _callback) throws ApiException {
        return phaseStatusTypesPostPhaseStatusTypeCall(phaseStatusTypeModel, _callback);

    }

    /**
     * Insert a phase status type
     * 
     * @param phaseStatusTypeModel PhaseStatusTypeModel (optional)
     * @return PhaseStatusTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PhaseStatusTypeModel phaseStatusTypesPostPhaseStatusType(PhaseStatusTypeModel phaseStatusTypeModel) throws ApiException {
        ApiResponse<PhaseStatusTypeModel> localVarResp = phaseStatusTypesPostPhaseStatusTypeWithHttpInfo(phaseStatusTypeModel);
        return localVarResp.getData();
    }

    /**
     * Insert a phase status type
     * 
     * @param phaseStatusTypeModel PhaseStatusTypeModel (optional)
     * @return ApiResponse&lt;PhaseStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhaseStatusTypeModel> phaseStatusTypesPostPhaseStatusTypeWithHttpInfo(PhaseStatusTypeModel phaseStatusTypeModel) throws ApiException {
        okhttp3.Call localVarCall = phaseStatusTypesPostPhaseStatusTypeValidateBeforeCall(phaseStatusTypeModel, null);
        Type localVarReturnType = new TypeToken<PhaseStatusTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a phase status type (asynchronously)
     * 
     * @param phaseStatusTypeModel PhaseStatusTypeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created phase status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesPostPhaseStatusTypeAsync(PhaseStatusTypeModel phaseStatusTypeModel, final ApiCallback<PhaseStatusTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseStatusTypesPostPhaseStatusTypeValidateBeforeCall(phaseStatusTypeModel, _callback);
        Type localVarReturnType = new TypeToken<PhaseStatusTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCategoriesPatchProductCategory
     * @param guid ID of the product category. (required)
     * @param patchOperation JSON patch document of ProductCategoryModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesPatchProductCategoryCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/productcategories/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCategoriesPatchProductCategoryValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling productCategoriesPatchProductCategory(Async)");
        }

        return productCategoriesPatchProductCategoryCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a product category or a part of it.
     * 
     * @param guid ID of the product category. (required)
     * @param patchOperation JSON patch document of ProductCategoryModel. (optional)
     * @return List&lt;ProductCategoryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCategoryModel> productCategoriesPatchProductCategory(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProductCategoryModel>> localVarResp = productCategoriesPatchProductCategoryWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a product category or a part of it.
     * 
     * @param guid ID of the product category. (required)
     * @param patchOperation JSON patch document of ProductCategoryModel. (optional)
     * @return ApiResponse&lt;List&lt;ProductCategoryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCategoryModel>> productCategoriesPatchProductCategoryWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = productCategoriesPatchProductCategoryValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProductCategoryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a product category or a part of it. (asynchronously)
     * 
     * @param guid ID of the product category. (required)
     * @param patchOperation JSON patch document of ProductCategoryModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesPatchProductCategoryAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProductCategoryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCategoriesPatchProductCategoryValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCategoryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCategoriesPostProductCategory
     * @param productCategoryModel ProductCategoryModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesPostProductCategoryCall(ProductCategoryModel productCategoryModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCategoryModel;

        // create path and map variables
        String localVarPath = "/v1/productcategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCategoriesPostProductCategoryValidateBeforeCall(ProductCategoryModel productCategoryModel, final ApiCallback _callback) throws ApiException {
        return productCategoriesPostProductCategoryCall(productCategoryModel, _callback);

    }

    /**
     * Insert a product category.
     * 
     * @param productCategoryModel ProductCategoryModel. (optional)
     * @return ProductCategoryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProductCategoryModel productCategoriesPostProductCategory(ProductCategoryModel productCategoryModel) throws ApiException {
        ApiResponse<ProductCategoryModel> localVarResp = productCategoriesPostProductCategoryWithHttpInfo(productCategoryModel);
        return localVarResp.getData();
    }

    /**
     * Insert a product category.
     * 
     * @param productCategoryModel ProductCategoryModel. (optional)
     * @return ApiResponse&lt;ProductCategoryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCategoryModel> productCategoriesPostProductCategoryWithHttpInfo(ProductCategoryModel productCategoryModel) throws ApiException {
        okhttp3.Call localVarCall = productCategoriesPostProductCategoryValidateBeforeCall(productCategoryModel, null);
        Type localVarReturnType = new TypeToken<ProductCategoryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a product category. (asynchronously)
     * 
     * @param productCategoryModel ProductCategoryModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesPostProductCategoryAsync(ProductCategoryModel productCategoryModel, final ApiCallback<ProductCategoryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCategoriesPostProductCategoryValidateBeforeCall(productCategoryModel, _callback);
        Type localVarReturnType = new TypeToken<ProductCategoryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCountrySettingsPatchProductCountrySettings
     * @param guid ID of the product country setting (required)
     * @param patchOperation JSON patch document of ProductCountrySettingsModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated product country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountrySettingsPatchProductCountrySettingsCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/productcountrysettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCountrySettingsPatchProductCountrySettingsValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling productCountrySettingsPatchProductCountrySettings(Async)");
        }

        return productCountrySettingsPatchProductCountrySettingsCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a product country setting
     * 
     * @param guid ID of the product country setting (required)
     * @param patchOperation JSON patch document of ProductCountrySettingsModel (optional)
     * @return List&lt;ProductCountrySettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated product country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCountrySettingsModel> productCountrySettingsPatchProductCountrySettings(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProductCountrySettingsModel>> localVarResp = productCountrySettingsPatchProductCountrySettingsWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a product country setting
     * 
     * @param guid ID of the product country setting (required)
     * @param patchOperation JSON patch document of ProductCountrySettingsModel (optional)
     * @return ApiResponse&lt;List&lt;ProductCountrySettingsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated product country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCountrySettingsModel>> productCountrySettingsPatchProductCountrySettingsWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = productCountrySettingsPatchProductCountrySettingsValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProductCountrySettingsModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a product country setting (asynchronously)
     * 
     * @param guid ID of the product country setting (required)
     * @param patchOperation JSON patch document of ProductCountrySettingsModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated product country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountrySettingsPatchProductCountrySettingsAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProductCountrySettingsModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCountrySettingsPatchProductCountrySettingsValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCountrySettingsModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCountrySettingsPostProductCountrySettings
     * @param productCountrySettingsModel ProductCountrySettingsModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted product country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountrySettingsPostProductCountrySettingsCall(ProductCountrySettingsModel productCountrySettingsModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCountrySettingsModel;

        // create path and map variables
        String localVarPath = "/v1/productcountrysettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCountrySettingsPostProductCountrySettingsValidateBeforeCall(ProductCountrySettingsModel productCountrySettingsModel, final ApiCallback _callback) throws ApiException {
        return productCountrySettingsPostProductCountrySettingsCall(productCountrySettingsModel, _callback);

    }

    /**
     * Insert a product country setting
     * 
     * @param productCountrySettingsModel ProductCountrySettingsModel (optional)
     * @return ProductCountrySettingsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted product country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProductCountrySettingsModel productCountrySettingsPostProductCountrySettings(ProductCountrySettingsModel productCountrySettingsModel) throws ApiException {
        ApiResponse<ProductCountrySettingsModel> localVarResp = productCountrySettingsPostProductCountrySettingsWithHttpInfo(productCountrySettingsModel);
        return localVarResp.getData();
    }

    /**
     * Insert a product country setting
     * 
     * @param productCountrySettingsModel ProductCountrySettingsModel (optional)
     * @return ApiResponse&lt;ProductCountrySettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted product country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCountrySettingsModel> productCountrySettingsPostProductCountrySettingsWithHttpInfo(ProductCountrySettingsModel productCountrySettingsModel) throws ApiException {
        okhttp3.Call localVarCall = productCountrySettingsPostProductCountrySettingsValidateBeforeCall(productCountrySettingsModel, null);
        Type localVarReturnType = new TypeToken<ProductCountrySettingsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a product country setting (asynchronously)
     * 
     * @param productCountrySettingsModel ProductCountrySettingsModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted product country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountrySettingsPostProductCountrySettingsAsync(ProductCountrySettingsModel productCountrySettingsModel, final ApiCallback<ProductCountrySettingsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCountrySettingsPostProductCountrySettingsValidateBeforeCall(productCountrySettingsModel, _callback);
        Type localVarReturnType = new TypeToken<ProductCountrySettingsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsPatchProduct
     * @param guid ID of the product. (required)
     * @param patchOperation JSON patch document of ProductModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated products. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPatchProductCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/products/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsPatchProductValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling productsPatchProduct(Async)");
        }

        return productsPatchProductCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an product or a part of it.
     * 
     * @param guid ID of the product. (required)
     * @param patchOperation JSON patch document of ProductModel. (optional)
     * @return List&lt;ProductOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated products. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductOutputModel> productsPatchProduct(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProductOutputModel>> localVarResp = productsPatchProductWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an product or a part of it.
     * 
     * @param guid ID of the product. (required)
     * @param patchOperation JSON patch document of ProductModel. (optional)
     * @return ApiResponse&lt;List&lt;ProductOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated products. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductOutputModel>> productsPatchProductWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = productsPatchProductValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProductOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an product or a part of it. (asynchronously)
     * 
     * @param guid ID of the product. (required)
     * @param patchOperation JSON patch document of ProductModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated products. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPatchProductAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProductOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsPatchProductValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProductOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsPostProduct
     * @param productInputModel ProductModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPostProductCall(ProductInputModel productInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productInputModel;

        // create path and map variables
        String localVarPath = "/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsPostProductValidateBeforeCall(ProductInputModel productInputModel, final ApiCallback _callback) throws ApiException {
        return productsPostProductCall(productInputModel, _callback);

    }

    /**
     * Insert a product.
     * 
     * @param productInputModel ProductModel. (optional)
     * @return ProductOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProductOutputModel productsPostProduct(ProductInputModel productInputModel) throws ApiException {
        ApiResponse<ProductOutputModel> localVarResp = productsPostProductWithHttpInfo(productInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a product.
     * 
     * @param productInputModel ProductModel. (optional)
     * @return ApiResponse&lt;ProductOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOutputModel> productsPostProductWithHttpInfo(ProductInputModel productInputModel) throws ApiException {
        okhttp3.Call localVarCall = productsPostProductValidateBeforeCall(productInputModel, null);
        Type localVarReturnType = new TypeToken<ProductOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a product. (asynchronously)
     * 
     * @param productInputModel ProductModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPostProductAsync(ProductInputModel productInputModel, final ApiCallback<ProductOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsPostProductValidateBeforeCall(productInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProductOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectBillingCustomersPatchProjectBillingCustomer
     * @param guid ID of the project billing customer. (required)
     * @param patchOperation JSON patch document of ProjectBillingCustomerModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersPatchProjectBillingCustomerCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectbillingcustomers/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectBillingCustomersPatchProjectBillingCustomerValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectBillingCustomersPatchProjectBillingCustomer(Async)");
        }

        return projectBillingCustomersPatchProjectBillingCustomerCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project billing customer.
     * 
     * @param guid ID of the project billing customer. (required)
     * @param patchOperation JSON patch document of ProjectBillingCustomerModel. (optional)
     * @return List&lt;ProjectBillingCustomerModel2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectBillingCustomerModel2> projectBillingCustomersPatchProjectBillingCustomer(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectBillingCustomerModel2>> localVarResp = projectBillingCustomersPatchProjectBillingCustomerWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project billing customer.
     * 
     * @param guid ID of the project billing customer. (required)
     * @param patchOperation JSON patch document of ProjectBillingCustomerModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectBillingCustomerModel2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectBillingCustomerModel2>> projectBillingCustomersPatchProjectBillingCustomerWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectBillingCustomersPatchProjectBillingCustomerValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectBillingCustomerModel2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project billing customer. (asynchronously)
     * 
     * @param guid ID of the project billing customer. (required)
     * @param patchOperation JSON patch document of ProjectBillingCustomerModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersPatchProjectBillingCustomerAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectBillingCustomerModel2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectBillingCustomersPatchProjectBillingCustomerValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectBillingCustomerModel2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectBillingCustomersPostProjectBillingCustomer
     * @param projectBillingCustomerModel2 ProjectBillingCustomerModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersPostProjectBillingCustomerCall(ProjectBillingCustomerModel2 projectBillingCustomerModel2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectBillingCustomerModel2;

        // create path and map variables
        String localVarPath = "/v1/projectbillingcustomers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectBillingCustomersPostProjectBillingCustomerValidateBeforeCall(ProjectBillingCustomerModel2 projectBillingCustomerModel2, final ApiCallback _callback) throws ApiException {
        return projectBillingCustomersPostProjectBillingCustomerCall(projectBillingCustomerModel2, _callback);

    }

    /**
     * Insert a billing customer for a project.
     * 
     * @param projectBillingCustomerModel2 ProjectBillingCustomerModel. (optional)
     * @return ProjectBillingCustomerModel2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectBillingCustomerModel2 projectBillingCustomersPostProjectBillingCustomer(ProjectBillingCustomerModel2 projectBillingCustomerModel2) throws ApiException {
        ApiResponse<ProjectBillingCustomerModel2> localVarResp = projectBillingCustomersPostProjectBillingCustomerWithHttpInfo(projectBillingCustomerModel2);
        return localVarResp.getData();
    }

    /**
     * Insert a billing customer for a project.
     * 
     * @param projectBillingCustomerModel2 ProjectBillingCustomerModel. (optional)
     * @return ApiResponse&lt;ProjectBillingCustomerModel2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectBillingCustomerModel2> projectBillingCustomersPostProjectBillingCustomerWithHttpInfo(ProjectBillingCustomerModel2 projectBillingCustomerModel2) throws ApiException {
        okhttp3.Call localVarCall = projectBillingCustomersPostProjectBillingCustomerValidateBeforeCall(projectBillingCustomerModel2, null);
        Type localVarReturnType = new TypeToken<ProjectBillingCustomerModel2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a billing customer for a project. (asynchronously)
     * 
     * @param projectBillingCustomerModel2 ProjectBillingCustomerModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersPostProjectBillingCustomerAsync(ProjectBillingCustomerModel2 projectBillingCustomerModel2, final ApiCallback<ProjectBillingCustomerModel2> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectBillingCustomersPostProjectBillingCustomerValidateBeforeCall(projectBillingCustomerModel2, _callback);
        Type localVarReturnType = new TypeToken<ProjectBillingCustomerModel2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertiesPatchProjectCustomProperty
     * @param guid ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesPatchProjectCustomPropertyCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertiesPatchProjectCustomPropertyValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectCustomPropertiesPatchProjectCustomProperty(Async)");
        }

        return projectCustomPropertiesPatchProjectCustomPropertyCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project custom property or a part of it.
     * 
     * @param guid ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertyModel. (optional)
     * @return List&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPropertyModel> projectCustomPropertiesPatchProjectCustomProperty(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<CustomPropertyModel>> localVarResp = projectCustomPropertiesPatchProjectCustomPropertyWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project custom property or a part of it.
     * 
     * @param guid ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertyModel. (optional)
     * @return ApiResponse&lt;List&lt;CustomPropertyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPropertyModel>> projectCustomPropertiesPatchProjectCustomPropertyWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertiesPatchProjectCustomPropertyValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project custom property or a part of it. (asynchronously)
     * 
     * @param guid ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesPatchProjectCustomPropertyAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<CustomPropertyModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertiesPatchProjectCustomPropertyValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertiesPostProjectCustomProperty
     * @param customPropertyModel ProjectCustomPropertyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesPostProjectCustomPropertyCall(CustomPropertyModel customPropertyModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customPropertyModel;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertiesPostProjectCustomPropertyValidateBeforeCall(CustomPropertyModel customPropertyModel, final ApiCallback _callback) throws ApiException {
        return projectCustomPropertiesPostProjectCustomPropertyCall(customPropertyModel, _callback);

    }

    /**
     * Insert a project custom property.
     * 
     * @param customPropertyModel ProjectCustomPropertyModel. (optional)
     * @return List&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPropertyModel> projectCustomPropertiesPostProjectCustomProperty(CustomPropertyModel customPropertyModel) throws ApiException {
        ApiResponse<List<CustomPropertyModel>> localVarResp = projectCustomPropertiesPostProjectCustomPropertyWithHttpInfo(customPropertyModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project custom property.
     * 
     * @param customPropertyModel ProjectCustomPropertyModel. (optional)
     * @return ApiResponse&lt;List&lt;CustomPropertyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPropertyModel>> projectCustomPropertiesPostProjectCustomPropertyWithHttpInfo(CustomPropertyModel customPropertyModel) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertiesPostProjectCustomPropertyValidateBeforeCall(customPropertyModel, null);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project custom property. (asynchronously)
     * 
     * @param customPropertyModel ProjectCustomPropertyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesPostProjectCustomPropertyAsync(CustomPropertyModel customPropertyModel, final ApiCallback<List<CustomPropertyModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertiesPostProjectCustomPropertyValidateBeforeCall(customPropertyModel, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem
     * @param guid ID of the project custom property selection item. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertySelectionItemInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem(Async)");
        }

        return projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a project custom property selection item or a part of it.
     * 
     * @param guid ID of the project custom property selection item. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertySelectionItemInputModel. (optional)
     * @return List&lt;ProjectCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectCustomPropertySelectionItemOutputModel> projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectCustomPropertySelectionItemOutputModel>> localVarResp = projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a project custom property selection item or a part of it.
     * 
     * @param guid ID of the project custom property selection item. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertySelectionItemInputModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectCustomPropertySelectionItemOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectCustomPropertySelectionItemOutputModel>> projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectCustomPropertySelectionItemOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a project custom property selection item or a part of it. (asynchronously)
     * 
     * @param guid ID of the project custom property selection item. (required)
     * @param patchOperation JSON Patch document of ProjectCustomPropertySelectionItemInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated project custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectCustomPropertySelectionItemOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectCustomPropertySelectionItemOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem
     * @param projectCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemCall(ProjectCustomPropertySelectionItemInputModel projectCustomPropertySelectionItemInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCustomPropertySelectionItemInputModel;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties/projectcustompropertyselectionitems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemValidateBeforeCall(ProjectCustomPropertySelectionItemInputModel projectCustomPropertySelectionItemInputModel, final ApiCallback _callback) throws ApiException {
        return projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemCall(projectCustomPropertySelectionItemInputModel, _callback);

    }

    /**
     * Insert a project custom property selection item.
     * 
     * @param projectCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @return ProjectCustomPropertySelectionItemOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectCustomPropertySelectionItemOutputModel projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem(ProjectCustomPropertySelectionItemInputModel projectCustomPropertySelectionItemInputModel) throws ApiException {
        ApiResponse<ProjectCustomPropertySelectionItemOutputModel> localVarResp = projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemWithHttpInfo(projectCustomPropertySelectionItemInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project custom property selection item.
     * 
     * @param projectCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @return ApiResponse&lt;ProjectCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectCustomPropertySelectionItemOutputModel> projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemWithHttpInfo(ProjectCustomPropertySelectionItemInputModel projectCustomPropertySelectionItemInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemValidateBeforeCall(projectCustomPropertySelectionItemInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectCustomPropertySelectionItemOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project custom property selection item. (asynchronously)
     * 
     * @param projectCustomPropertySelectionItemInputModel CustomPropertySelectionItemInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created project custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemAsync(ProjectCustomPropertySelectionItemInputModel projectCustomPropertySelectionItemInputModel, final ApiCallback<ProjectCustomPropertySelectionItemOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemValidateBeforeCall(projectCustomPropertySelectionItemInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectCustomPropertySelectionItemOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectMemberCostExceptionsPatch
     * @param guid ID of the project member cost exception. (required)
     * @param patchOperation JSON Patch document of ProjectMemberCostExceptionModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated links. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsPatchCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectmembercostexceptions/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectMemberCostExceptionsPatchValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectMemberCostExceptionsPatch(Async)");
        }

        return projectMemberCostExceptionsPatchCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) project member cost exception.
     * 
     * @param guid ID of the project member cost exception. (required)
     * @param patchOperation JSON Patch document of ProjectMemberCostExceptionModel. (optional)
     * @return List&lt;ProjectMemberCostExceptionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated links. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectMemberCostExceptionOutputModel> projectMemberCostExceptionsPatch(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectMemberCostExceptionOutputModel>> localVarResp = projectMemberCostExceptionsPatchWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) project member cost exception.
     * 
     * @param guid ID of the project member cost exception. (required)
     * @param patchOperation JSON Patch document of ProjectMemberCostExceptionModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectMemberCostExceptionOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated links. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectMemberCostExceptionOutputModel>> projectMemberCostExceptionsPatchWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectMemberCostExceptionsPatchValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectMemberCostExceptionOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) project member cost exception. (asynchronously)
     * 
     * @param guid ID of the project member cost exception. (required)
     * @param patchOperation JSON Patch document of ProjectMemberCostExceptionModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated links. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsPatchAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectMemberCostExceptionOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectMemberCostExceptionsPatchValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectMemberCostExceptionOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectMemberCostExceptionsPost
     * @param projectMemberCostExceptionInputModel ProjectMemberCostExceptionModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsPostCall(ProjectMemberCostExceptionInputModel projectMemberCostExceptionInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectMemberCostExceptionInputModel;

        // create path and map variables
        String localVarPath = "/v1/projectmembercostexceptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectMemberCostExceptionsPostValidateBeforeCall(ProjectMemberCostExceptionInputModel projectMemberCostExceptionInputModel, final ApiCallback _callback) throws ApiException {
        return projectMemberCostExceptionsPostCall(projectMemberCostExceptionInputModel, _callback);

    }

    /**
     * Add a cost exception to a project member.
     * 
     * @param projectMemberCostExceptionInputModel ProjectMemberCostExceptionModel. (optional)
     * @return ProjectMemberCostExceptionOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectMemberCostExceptionOutputModel projectMemberCostExceptionsPost(ProjectMemberCostExceptionInputModel projectMemberCostExceptionInputModel) throws ApiException {
        ApiResponse<ProjectMemberCostExceptionOutputModel> localVarResp = projectMemberCostExceptionsPostWithHttpInfo(projectMemberCostExceptionInputModel);
        return localVarResp.getData();
    }

    /**
     * Add a cost exception to a project member.
     * 
     * @param projectMemberCostExceptionInputModel ProjectMemberCostExceptionModel. (optional)
     * @return ApiResponse&lt;ProjectMemberCostExceptionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectMemberCostExceptionOutputModel> projectMemberCostExceptionsPostWithHttpInfo(ProjectMemberCostExceptionInputModel projectMemberCostExceptionInputModel) throws ApiException {
        okhttp3.Call localVarCall = projectMemberCostExceptionsPostValidateBeforeCall(projectMemberCostExceptionInputModel, null);
        Type localVarReturnType = new TypeToken<ProjectMemberCostExceptionOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a cost exception to a project member. (asynchronously)
     * 
     * @param projectMemberCostExceptionInputModel ProjectMemberCostExceptionModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsPostAsync(ProjectMemberCostExceptionInputModel projectMemberCostExceptionInputModel, final ApiCallback<ProjectMemberCostExceptionOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectMemberCostExceptionsPostValidateBeforeCall(projectMemberCostExceptionInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectMemberCostExceptionOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectStatusTypesPatchProjectStatusType
     * @param guid ID of the projectStatusType (required)
     * @param patchOperation JSON patch document of ProjectStatusTypeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesPatchProjectStatusTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projectstatustypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectStatusTypesPatchProjectStatusTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectStatusTypesPatchProjectStatusType(Async)");
        }

        return projectStatusTypesPatchProjectStatusTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a projectStatusType or a part of it
     * 
     * @param guid ID of the projectStatusType (required)
     * @param patchOperation JSON patch document of ProjectStatusTypeModel (optional)
     * @return List&lt;ProjectStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectStatusTypeModel> projectStatusTypesPatchProjectStatusType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectStatusTypeModel>> localVarResp = projectStatusTypesPatchProjectStatusTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a projectStatusType or a part of it
     * 
     * @param guid ID of the projectStatusType (required)
     * @param patchOperation JSON patch document of ProjectStatusTypeModel (optional)
     * @return ApiResponse&lt;List&lt;ProjectStatusTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectStatusTypeModel>> projectStatusTypesPatchProjectStatusTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectStatusTypesPatchProjectStatusTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectStatusTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a projectStatusType or a part of it (asynchronously)
     * 
     * @param guid ID of the projectStatusType (required)
     * @param patchOperation JSON patch document of ProjectStatusTypeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated business units </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesPatchProjectStatusTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectStatusTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectStatusTypesPatchProjectStatusTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectStatusTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectStatusTypesPostProjectStatusType
     * @param projectStatusTypeModel ProjectStatusTypeModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesPostProjectStatusTypeCall(ProjectStatusTypeModel projectStatusTypeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectStatusTypeModel;

        // create path and map variables
        String localVarPath = "/v1/projectstatustypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectStatusTypesPostProjectStatusTypeValidateBeforeCall(ProjectStatusTypeModel projectStatusTypeModel, final ApiCallback _callback) throws ApiException {
        return projectStatusTypesPostProjectStatusTypeCall(projectStatusTypeModel, _callback);

    }

    /**
     * Insert a project status type
     * 
     * @param projectStatusTypeModel ProjectStatusTypeModel (optional)
     * @return ProjectStatusTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectStatusTypeModel projectStatusTypesPostProjectStatusType(ProjectStatusTypeModel projectStatusTypeModel) throws ApiException {
        ApiResponse<ProjectStatusTypeModel> localVarResp = projectStatusTypesPostProjectStatusTypeWithHttpInfo(projectStatusTypeModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project status type
     * 
     * @param projectStatusTypeModel ProjectStatusTypeModel (optional)
     * @return ApiResponse&lt;ProjectStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectStatusTypeModel> projectStatusTypesPostProjectStatusTypeWithHttpInfo(ProjectStatusTypeModel projectStatusTypeModel) throws ApiException {
        okhttp3.Call localVarCall = projectStatusTypesPostProjectStatusTypeValidateBeforeCall(projectStatusTypeModel, null);
        Type localVarReturnType = new TypeToken<ProjectStatusTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project status type (asynchronously)
     * 
     * @param projectStatusTypeModel ProjectStatusTypeModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesPostProjectStatusTypeAsync(ProjectStatusTypeModel projectStatusTypeModel, final ApiCallback<ProjectStatusTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectStatusTypesPostProjectStatusTypeValidateBeforeCall(projectStatusTypeModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectStatusTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskStatusesPatchProjectTaskStatus
     * @param guid ID of the Project task status. (required)
     * @param patchOperation JSON patch document of ProjectTaskStatusModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesPatchProjectTaskStatusCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/projecttaskstatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskStatusesPatchProjectTaskStatusValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectTaskStatusesPatchProjectTaskStatus(Async)");
        }

        return projectTaskStatusesPatchProjectTaskStatusCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an Project task status or a part of it.
     * 
     * @param guid ID of the Project task status. (required)
     * @param patchOperation JSON patch document of ProjectTaskStatusModel. (optional)
     * @return List&lt;ProjectTaskStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTaskStatusModel> projectTaskStatusesPatchProjectTaskStatus(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProjectTaskStatusModel>> localVarResp = projectTaskStatusesPatchProjectTaskStatusWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an Project task status or a part of it.
     * 
     * @param guid ID of the Project task status. (required)
     * @param patchOperation JSON patch document of ProjectTaskStatusModel. (optional)
     * @return ApiResponse&lt;List&lt;ProjectTaskStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTaskStatusModel>> projectTaskStatusesPatchProjectTaskStatusWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = projectTaskStatusesPatchProjectTaskStatusValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProjectTaskStatusModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an Project task status or a part of it. (asynchronously)
     * 
     * @param guid ID of the Project task status. (required)
     * @param patchOperation JSON patch document of ProjectTaskStatusModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesPatchProjectTaskStatusAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProjectTaskStatusModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskStatusesPatchProjectTaskStatusValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTaskStatusModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskStatusesPostProjectTaskStatus
     * @param projectTaskStatusModel ProjectTaskStatusModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project task status.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesPostProjectTaskStatusCall(ProjectTaskStatusModel projectTaskStatusModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectTaskStatusModel;

        // create path and map variables
        String localVarPath = "/v1/projecttaskstatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskStatusesPostProjectTaskStatusValidateBeforeCall(ProjectTaskStatusModel projectTaskStatusModel, final ApiCallback _callback) throws ApiException {
        return projectTaskStatusesPostProjectTaskStatusCall(projectTaskStatusModel, _callback);

    }

    /**
     * Insert a project task status.
     * 
     * @param projectTaskStatusModel ProjectTaskStatusModel. (optional)
     * @return ProjectTaskStatusModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project task status.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectTaskStatusModel projectTaskStatusesPostProjectTaskStatus(ProjectTaskStatusModel projectTaskStatusModel) throws ApiException {
        ApiResponse<ProjectTaskStatusModel> localVarResp = projectTaskStatusesPostProjectTaskStatusWithHttpInfo(projectTaskStatusModel);
        return localVarResp.getData();
    }

    /**
     * Insert a project task status.
     * 
     * @param projectTaskStatusModel ProjectTaskStatusModel. (optional)
     * @return ApiResponse&lt;ProjectTaskStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project task status.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectTaskStatusModel> projectTaskStatusesPostProjectTaskStatusWithHttpInfo(ProjectTaskStatusModel projectTaskStatusModel) throws ApiException {
        okhttp3.Call localVarCall = projectTaskStatusesPostProjectTaskStatusValidateBeforeCall(projectTaskStatusModel, null);
        Type localVarReturnType = new TypeToken<ProjectTaskStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a project task status. (asynchronously)
     * 
     * @param projectTaskStatusModel ProjectTaskStatusModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project task status.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesPostProjectTaskStatusAsync(ProjectTaskStatusModel projectTaskStatusModel, final ApiCallback<ProjectTaskStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskStatusesPostProjectTaskStatusValidateBeforeCall(projectTaskStatusModel, _callback);
        Type localVarReturnType = new TypeToken<ProjectTaskStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalStatusesPatchProposalStatus
     * @param guid ID of the Proposal status (required)
     * @param patchOperation JSON patch document of ProposalStatusModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal statuses </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesPatchProposalStatusCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/proposalstatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalStatusesPatchProposalStatusValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalStatusesPatchProposalStatus(Async)");
        }

        return proposalStatusesPatchProposalStatusCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an Proposal status or a part of it
     * 
     * @param guid ID of the Proposal status (required)
     * @param patchOperation JSON patch document of ProposalStatusModel (optional)
     * @return List&lt;ProposalStatusOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal statuses </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalStatusOutputModel> proposalStatusesPatchProposalStatus(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<ProposalStatusOutputModel>> localVarResp = proposalStatusesPatchProposalStatusWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an Proposal status or a part of it
     * 
     * @param guid ID of the Proposal status (required)
     * @param patchOperation JSON patch document of ProposalStatusModel (optional)
     * @return ApiResponse&lt;List&lt;ProposalStatusOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal statuses </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalStatusOutputModel>> proposalStatusesPatchProposalStatusWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = proposalStatusesPatchProposalStatusValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<ProposalStatusOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an Proposal status or a part of it (asynchronously)
     * 
     * @param guid ID of the Proposal status (required)
     * @param patchOperation JSON patch document of ProposalStatusModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Proposal statuses </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesPatchProposalStatusAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<ProposalStatusOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalStatusesPatchProposalStatusValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalStatusOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalStatusesPostProposalStatus
     * @param proposalStatusInputModel ProposalStatusModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesPostProposalStatusCall(ProposalStatusInputModel proposalStatusInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proposalStatusInputModel;

        // create path and map variables
        String localVarPath = "/v1/proposalstatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalStatusesPostProposalStatusValidateBeforeCall(ProposalStatusInputModel proposalStatusInputModel, final ApiCallback _callback) throws ApiException {
        return proposalStatusesPostProposalStatusCall(proposalStatusInputModel, _callback);

    }

    /**
     * Insert a proposal status
     * 
     * @param proposalStatusInputModel ProposalStatusModel (optional)
     * @return ProposalStatusOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalStatusOutputModel proposalStatusesPostProposalStatus(ProposalStatusInputModel proposalStatusInputModel) throws ApiException {
        ApiResponse<ProposalStatusOutputModel> localVarResp = proposalStatusesPostProposalStatusWithHttpInfo(proposalStatusInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a proposal status
     * 
     * @param proposalStatusInputModel ProposalStatusModel (optional)
     * @return ApiResponse&lt;ProposalStatusOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalStatusOutputModel> proposalStatusesPostProposalStatusWithHttpInfo(ProposalStatusInputModel proposalStatusInputModel) throws ApiException {
        okhttp3.Call localVarCall = proposalStatusesPostProposalStatusValidateBeforeCall(proposalStatusInputModel, null);
        Type localVarReturnType = new TypeToken<ProposalStatusOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a proposal status (asynchronously)
     * 
     * @param proposalStatusInputModel ProposalStatusModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesPostProposalStatusAsync(ProposalStatusInputModel proposalStatusInputModel, final ApiCallback<ProposalStatusOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalStatusesPostProposalStatusValidateBeforeCall(proposalStatusInputModel, _callback);
        Type localVarReturnType = new TypeToken<ProposalStatusOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesPatchRole
     * @param guid ID of the role. (required)
     * @param patchOperation JSON patch document of RoleInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated roles. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesPatchRoleCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/roles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesPatchRoleValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling rolesPatchRole(Async)");
        }

        return rolesPatchRoleCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a role or a part of it.
     * 
     * @param guid ID of the role. (required)
     * @param patchOperation JSON patch document of RoleInputModel. (optional)
     * @return List&lt;RoleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated roles. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleOutputModel> rolesPatchRole(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<RoleOutputModel>> localVarResp = rolesPatchRoleWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a role or a part of it.
     * 
     * @param guid ID of the role. (required)
     * @param patchOperation JSON patch document of RoleInputModel. (optional)
     * @return ApiResponse&lt;List&lt;RoleOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated roles. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleOutputModel>> rolesPatchRoleWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = rolesPatchRoleValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<RoleOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a role or a part of it. (asynchronously)
     * 
     * @param guid ID of the role. (required)
     * @param patchOperation JSON patch document of RoleInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated roles. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesPatchRoleAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<RoleOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesPatchRoleValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesPostRole
     * @param roleInputModel RoleInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created role. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesPostRoleCall(RoleInputModel roleInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleInputModel;

        // create path and map variables
        String localVarPath = "/v1/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesPostRoleValidateBeforeCall(RoleInputModel roleInputModel, final ApiCallback _callback) throws ApiException {
        return rolesPostRoleCall(roleInputModel, _callback);

    }

    /**
     * Insert a role.
     * 
     * @param roleInputModel RoleInputModel. (optional)
     * @return RoleOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created role. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleOutputModel rolesPostRole(RoleInputModel roleInputModel) throws ApiException {
        ApiResponse<RoleOutputModel> localVarResp = rolesPostRoleWithHttpInfo(roleInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a role.
     * 
     * @param roleInputModel RoleInputModel. (optional)
     * @return ApiResponse&lt;RoleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created role. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleOutputModel> rolesPostRoleWithHttpInfo(RoleInputModel roleInputModel) throws ApiException {
        okhttp3.Call localVarCall = rolesPostRoleValidateBeforeCall(roleInputModel, null);
        Type localVarReturnType = new TypeToken<RoleOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a role. (asynchronously)
     * 
     * @param roleInputModel RoleInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created role. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesPostRoleAsync(RoleInputModel roleInputModel, final ApiCallback<RoleOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesPostRoleValidateBeforeCall(roleInputModel, _callback);
        Type localVarReturnType = new TypeToken<RoleOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesAccountsPatchSalesAccount
     * @param guid ID of the sales account. (required)
     * @param patchOperation JSON patch document of SalesAccountModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsPatchSalesAccountCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/salesaccounts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesAccountsPatchSalesAccountValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesAccountsPatchSalesAccount(Async)");
        }

        return salesAccountsPatchSalesAccountCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a sales account or a part of it.
     * 
     * @param guid ID of the sales account. (required)
     * @param patchOperation JSON patch document of SalesAccountModel. (optional)
     * @return List&lt;SalesAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesAccountModel> salesAccountsPatchSalesAccount(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<SalesAccountModel>> localVarResp = salesAccountsPatchSalesAccountWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a sales account or a part of it.
     * 
     * @param guid ID of the sales account. (required)
     * @param patchOperation JSON patch document of SalesAccountModel. (optional)
     * @return ApiResponse&lt;List&lt;SalesAccountModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesAccountModel>> salesAccountsPatchSalesAccountWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = salesAccountsPatchSalesAccountValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<SalesAccountModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a sales account or a part of it. (asynchronously)
     * 
     * @param guid ID of the sales account. (required)
     * @param patchOperation JSON patch document of SalesAccountModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsPatchSalesAccountAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<SalesAccountModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesAccountsPatchSalesAccountValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<SalesAccountModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesAccountsPostSalesAccount
     * @param salesAccountModel SalesAccountModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsPostSalesAccountCall(SalesAccountModel salesAccountModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salesAccountModel;

        // create path and map variables
        String localVarPath = "/v1/salesaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesAccountsPostSalesAccountValidateBeforeCall(SalesAccountModel salesAccountModel, final ApiCallback _callback) throws ApiException {
        return salesAccountsPostSalesAccountCall(salesAccountModel, _callback);

    }

    /**
     * Insert a sales account.
     * 
     * @param salesAccountModel SalesAccountModel. (optional)
     * @return SalesAccountModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SalesAccountModel salesAccountsPostSalesAccount(SalesAccountModel salesAccountModel) throws ApiException {
        ApiResponse<SalesAccountModel> localVarResp = salesAccountsPostSalesAccountWithHttpInfo(salesAccountModel);
        return localVarResp.getData();
    }

    /**
     * Insert a sales account.
     * 
     * @param salesAccountModel SalesAccountModel. (optional)
     * @return ApiResponse&lt;SalesAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesAccountModel> salesAccountsPostSalesAccountWithHttpInfo(SalesAccountModel salesAccountModel) throws ApiException {
        okhttp3.Call localVarCall = salesAccountsPostSalesAccountValidateBeforeCall(salesAccountModel, null);
        Type localVarReturnType = new TypeToken<SalesAccountModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a sales account. (asynchronously)
     * 
     * @param salesAccountModel SalesAccountModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sales account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsPostSalesAccountAsync(SalesAccountModel salesAccountModel, final ApiCallback<SalesAccountModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesAccountsPostSalesAccountValidateBeforeCall(salesAccountModel, _callback);
        Type localVarReturnType = new TypeToken<SalesAccountModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesStatusTypesPatchSalesStatusType
     * @param guid ID of the sales status type (required)
     * @param patchOperation JSON patch document of salesStatusType (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesPatchSalesStatusTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/salesstatustypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesStatusTypesPatchSalesStatusTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesStatusTypesPatchSalesStatusType(Async)");
        }

        return salesStatusTypesPatchSalesStatusTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an sales status type or a part of it
     * 
     * @param guid ID of the sales status type (required)
     * @param patchOperation JSON patch document of salesStatusType (optional)
     * @return List&lt;SalesStatusTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesStatusTypeOutputModel> salesStatusTypesPatchSalesStatusType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<SalesStatusTypeOutputModel>> localVarResp = salesStatusTypesPatchSalesStatusTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an sales status type or a part of it
     * 
     * @param guid ID of the sales status type (required)
     * @param patchOperation JSON patch document of salesStatusType (optional)
     * @return ApiResponse&lt;List&lt;SalesStatusTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesStatusTypeOutputModel>> salesStatusTypesPatchSalesStatusTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = salesStatusTypesPatchSalesStatusTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<SalesStatusTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an sales status type or a part of it (asynchronously)
     * 
     * @param guid ID of the sales status type (required)
     * @param patchOperation JSON patch document of salesStatusType (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesPatchSalesStatusTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<SalesStatusTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesStatusTypesPatchSalesStatusTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<SalesStatusTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesStatusTypesPostSalesStatusType
     * @param salesStatusTypeInputModel salesStatusType (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesPostSalesStatusTypeCall(SalesStatusTypeInputModel salesStatusTypeInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salesStatusTypeInputModel;

        // create path and map variables
        String localVarPath = "/v1/salesstatustypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesStatusTypesPostSalesStatusTypeValidateBeforeCall(SalesStatusTypeInputModel salesStatusTypeInputModel, final ApiCallback _callback) throws ApiException {
        return salesStatusTypesPostSalesStatusTypeCall(salesStatusTypeInputModel, _callback);

    }

    /**
     * Insert a sales status type
     * 
     * @param salesStatusTypeInputModel salesStatusType (optional)
     * @return SalesStatusTypeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SalesStatusTypeOutputModel salesStatusTypesPostSalesStatusType(SalesStatusTypeInputModel salesStatusTypeInputModel) throws ApiException {
        ApiResponse<SalesStatusTypeOutputModel> localVarResp = salesStatusTypesPostSalesStatusTypeWithHttpInfo(salesStatusTypeInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a sales status type
     * 
     * @param salesStatusTypeInputModel salesStatusType (optional)
     * @return ApiResponse&lt;SalesStatusTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesStatusTypeOutputModel> salesStatusTypesPostSalesStatusTypeWithHttpInfo(SalesStatusTypeInputModel salesStatusTypeInputModel) throws ApiException {
        okhttp3.Call localVarCall = salesStatusTypesPostSalesStatusTypeValidateBeforeCall(salesStatusTypeInputModel, null);
        Type localVarReturnType = new TypeToken<SalesStatusTypeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a sales status type (asynchronously)
     * 
     * @param salesStatusTypeInputModel salesStatusType (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesPostSalesStatusTypeAsync(SalesStatusTypeInputModel salesStatusTypeInputModel, final ApiCallback<SalesStatusTypeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesStatusTypesPostSalesStatusTypeValidateBeforeCall(salesStatusTypeInputModel, _callback);
        Type localVarReturnType = new TypeToken<SalesStatusTypeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeEntryTypesPatchTimeEntryType
     * @param guid ID of the time entry type. (required)
     * @param patchOperation JSON Patch document of TimeEntryTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated time entry type model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesPatchTimeEntryTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/timeentrytypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntryTypesPatchTimeEntryTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling timeEntryTypesPatchTimeEntryType(Async)");
        }

        return timeEntryTypesPatchTimeEntryTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a time entry type or a part of it.
     * 
     * @param guid ID of the time entry type. (required)
     * @param patchOperation JSON Patch document of TimeEntryTypeModel. (optional)
     * @return List&lt;TimeEntryTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated time entry type model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TimeEntryTypeModel> timeEntryTypesPatchTimeEntryType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<TimeEntryTypeModel>> localVarResp = timeEntryTypesPatchTimeEntryTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a time entry type or a part of it.
     * 
     * @param guid ID of the time entry type. (required)
     * @param patchOperation JSON Patch document of TimeEntryTypeModel. (optional)
     * @return ApiResponse&lt;List&lt;TimeEntryTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated time entry type model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimeEntryTypeModel>> timeEntryTypesPatchTimeEntryTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = timeEntryTypesPatchTimeEntryTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<TimeEntryTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a time entry type or a part of it. (asynchronously)
     * 
     * @param guid ID of the time entry type. (required)
     * @param patchOperation JSON Patch document of TimeEntryTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated time entry type model. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesPatchTimeEntryTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<TimeEntryTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntryTypesPatchTimeEntryTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<TimeEntryTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeEntryTypesPostTimeEntryType
     * @param timeEntryTypeModel TimeEntryTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created time entry type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesPostTimeEntryTypeCall(TimeEntryTypeModel timeEntryTypeModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntryTypeModel;

        // create path and map variables
        String localVarPath = "/v1/timeentrytypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntryTypesPostTimeEntryTypeValidateBeforeCall(TimeEntryTypeModel timeEntryTypeModel, final ApiCallback _callback) throws ApiException {
        return timeEntryTypesPostTimeEntryTypeCall(timeEntryTypeModel, _callback);

    }

    /**
     * Insert a time entry type.
     * 
     * @param timeEntryTypeModel TimeEntryTypeModel. (optional)
     * @return TimeEntryTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created time entry type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TimeEntryTypeModel timeEntryTypesPostTimeEntryType(TimeEntryTypeModel timeEntryTypeModel) throws ApiException {
        ApiResponse<TimeEntryTypeModel> localVarResp = timeEntryTypesPostTimeEntryTypeWithHttpInfo(timeEntryTypeModel);
        return localVarResp.getData();
    }

    /**
     * Insert a time entry type.
     * 
     * @param timeEntryTypeModel TimeEntryTypeModel. (optional)
     * @return ApiResponse&lt;TimeEntryTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created time entry type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimeEntryTypeModel> timeEntryTypesPostTimeEntryTypeWithHttpInfo(TimeEntryTypeModel timeEntryTypeModel) throws ApiException {
        okhttp3.Call localVarCall = timeEntryTypesPostTimeEntryTypeValidateBeforeCall(timeEntryTypeModel, null);
        Type localVarReturnType = new TypeToken<TimeEntryTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a time entry type. (asynchronously)
     * 
     * @param timeEntryTypeModel TimeEntryTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created time entry type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesPostTimeEntryTypeAsync(TimeEntryTypeModel timeEntryTypeModel, final ApiCallback<TimeEntryTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntryTypesPostTimeEntryTypeValidateBeforeCall(timeEntryTypeModel, _callback);
        Type localVarReturnType = new TypeToken<TimeEntryTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings
     * @param guid ID of the travel expense type country setting (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeCountrySettingsModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense type country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypecountrysettings/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings(Async)");
        }

        return travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a travel expense type country setting
     * 
     * @param guid ID of the travel expense type country setting (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeCountrySettingsModel (optional)
     * @return List&lt;TravelExpenseTypeCountrySettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense type country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelExpenseTypeCountrySettingsModel> travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<TravelExpenseTypeCountrySettingsModel>> localVarResp = travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a travel expense type country setting
     * 
     * @param guid ID of the travel expense type country setting (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeCountrySettingsModel (optional)
     * @return ApiResponse&lt;List&lt;TravelExpenseTypeCountrySettingsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense type country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelExpenseTypeCountrySettingsModel>> travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeCountrySettingsModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a travel expense type country setting (asynchronously)
     * 
     * @param guid ID of the travel expense type country setting (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeCountrySettingsModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense type country settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<TravelExpenseTypeCountrySettingsModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeCountrySettingsModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings
     * @param travelExpenseTypeCountrySettingsModel Travel expense type country setting model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel expense type country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsCall(TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = travelExpenseTypeCountrySettingsModel;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypecountrysettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsValidateBeforeCall(TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsModel, final ApiCallback _callback) throws ApiException {
        return travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsCall(travelExpenseTypeCountrySettingsModel, _callback);

    }

    /**
     * Insert a travel expense type country setting
     * 
     * @param travelExpenseTypeCountrySettingsModel Travel expense type country setting model (optional)
     * @return TravelExpenseTypeCountrySettingsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel expense type country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings(TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsModel) throws ApiException {
        ApiResponse<TravelExpenseTypeCountrySettingsModel> localVarResp = travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsWithHttpInfo(travelExpenseTypeCountrySettingsModel);
        return localVarResp.getData();
    }

    /**
     * Insert a travel expense type country setting
     * 
     * @param travelExpenseTypeCountrySettingsModel Travel expense type country setting model (optional)
     * @return ApiResponse&lt;TravelExpenseTypeCountrySettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel expense type country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelExpenseTypeCountrySettingsModel> travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsWithHttpInfo(TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsModel) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsValidateBeforeCall(travelExpenseTypeCountrySettingsModel, null);
        Type localVarReturnType = new TypeToken<TravelExpenseTypeCountrySettingsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a travel expense type country setting (asynchronously)
     * 
     * @param travelExpenseTypeCountrySettingsModel Travel expense type country setting model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added travel expense type country setting </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsAsync(TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsModel, final ApiCallback<TravelExpenseTypeCountrySettingsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsValidateBeforeCall(travelExpenseTypeCountrySettingsModel, _callback);
        Type localVarReturnType = new TypeToken<TravelExpenseTypeCountrySettingsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypesPatchTravelExpenseType
     * @param guid Guid of the travel expense type. (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesPatchTravelExpenseTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypesPatchTravelExpenseTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelExpenseTypesPatchTravelExpenseType(Async)");
        }

        return travelExpenseTypesPatchTravelExpenseTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an travel expense type or a part of it.
     * 
     * @param guid Guid of the travel expense type. (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeInputModel. (optional)
     * @return List&lt;TravelExpenseTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelExpenseTypeOutputModel> travelExpenseTypesPatchTravelExpenseType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<TravelExpenseTypeOutputModel>> localVarResp = travelExpenseTypesPatchTravelExpenseTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an travel expense type or a part of it.
     * 
     * @param guid Guid of the travel expense type. (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeInputModel. (optional)
     * @return ApiResponse&lt;List&lt;TravelExpenseTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelExpenseTypeOutputModel>> travelExpenseTypesPatchTravelExpenseTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypesPatchTravelExpenseTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an travel expense type or a part of it. (asynchronously)
     * 
     * @param guid Guid of the travel expense type. (required)
     * @param patchOperation JSON patch document of TravelExpenseTypeInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesPatchTravelExpenseTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<TravelExpenseTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypesPatchTravelExpenseTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypesPostTravelExpenseType
     * @param travelExpenseTypeInputModel TravelExpenseTypeInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesPostTravelExpenseTypeCall(TravelExpenseTypeInputModel travelExpenseTypeInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = travelExpenseTypeInputModel;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypesPostTravelExpenseTypeValidateBeforeCall(TravelExpenseTypeInputModel travelExpenseTypeInputModel, final ApiCallback _callback) throws ApiException {
        return travelExpenseTypesPostTravelExpenseTypeCall(travelExpenseTypeInputModel, _callback);

    }

    /**
     * Insert a new travel expense type.
     * 
     * @param travelExpenseTypeInputModel TravelExpenseTypeInputModel. (optional)
     * @return TravelExpenseTypeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelExpenseTypeOutputModel travelExpenseTypesPostTravelExpenseType(TravelExpenseTypeInputModel travelExpenseTypeInputModel) throws ApiException {
        ApiResponse<TravelExpenseTypeOutputModel> localVarResp = travelExpenseTypesPostTravelExpenseTypeWithHttpInfo(travelExpenseTypeInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a new travel expense type.
     * 
     * @param travelExpenseTypeInputModel TravelExpenseTypeInputModel. (optional)
     * @return ApiResponse&lt;TravelExpenseTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelExpenseTypeOutputModel> travelExpenseTypesPostTravelExpenseTypeWithHttpInfo(TravelExpenseTypeInputModel travelExpenseTypeInputModel) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypesPostTravelExpenseTypeValidateBeforeCall(travelExpenseTypeInputModel, null);
        Type localVarReturnType = new TypeToken<TravelExpenseTypeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a new travel expense type. (asynchronously)
     * 
     * @param travelExpenseTypeInputModel TravelExpenseTypeInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesPostTravelExpenseTypeAsync(TravelExpenseTypeInputModel travelExpenseTypeInputModel, final ApiCallback<TravelExpenseTypeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypesPostTravelExpenseTypeValidateBeforeCall(travelExpenseTypeInputModel, _callback);
        Type localVarReturnType = new TypeToken<TravelExpenseTypeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementStatusPatchTravelReimbursementStatus
     * @param guid ID of the travel reimbursement status. (required)
     * @param patchOperation JSON patch document of TravelReimbursementStatusModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated travel reimbursement statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusPatchTravelReimbursementStatusCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursementstatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementStatusPatchTravelReimbursementStatusValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelReimbursementStatusPatchTravelReimbursementStatus(Async)");
        }

        return travelReimbursementStatusPatchTravelReimbursementStatusCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a travel reimbursement status or a part of it.
     * 
     * @param guid ID of the travel reimbursement status. (required)
     * @param patchOperation JSON patch document of TravelReimbursementStatusModel. (optional)
     * @return List&lt;TravelReimbursementStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated travel reimbursement statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelReimbursementStatusModel> travelReimbursementStatusPatchTravelReimbursementStatus(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<TravelReimbursementStatusModel>> localVarResp = travelReimbursementStatusPatchTravelReimbursementStatusWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a travel reimbursement status or a part of it.
     * 
     * @param guid ID of the travel reimbursement status. (required)
     * @param patchOperation JSON patch document of TravelReimbursementStatusModel. (optional)
     * @return ApiResponse&lt;List&lt;TravelReimbursementStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated travel reimbursement statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelReimbursementStatusModel>> travelReimbursementStatusPatchTravelReimbursementStatusWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementStatusPatchTravelReimbursementStatusValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementStatusModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a travel reimbursement status or a part of it. (asynchronously)
     * 
     * @param guid ID of the travel reimbursement status. (required)
     * @param patchOperation JSON patch document of TravelReimbursementStatusModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated travel reimbursement statuses. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusPatchTravelReimbursementStatusAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<TravelReimbursementStatusModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementStatusPatchTravelReimbursementStatusValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementStatusModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementStatusPostTravelReimbursementStatus
     * @param travelReimbursementStatusModel TravelReimbursementStatusModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel reimbursement status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusPostTravelReimbursementStatusCall(TravelReimbursementStatusModel travelReimbursementStatusModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = travelReimbursementStatusModel;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursementstatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementStatusPostTravelReimbursementStatusValidateBeforeCall(TravelReimbursementStatusModel travelReimbursementStatusModel, final ApiCallback _callback) throws ApiException {
        return travelReimbursementStatusPostTravelReimbursementStatusCall(travelReimbursementStatusModel, _callback);

    }

    /**
     * Insert a travel reimbursement status.
     * 
     * @param travelReimbursementStatusModel TravelReimbursementStatusModel. (optional)
     * @return TravelReimbursementStatusModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel reimbursement status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelReimbursementStatusModel travelReimbursementStatusPostTravelReimbursementStatus(TravelReimbursementStatusModel travelReimbursementStatusModel) throws ApiException {
        ApiResponse<TravelReimbursementStatusModel> localVarResp = travelReimbursementStatusPostTravelReimbursementStatusWithHttpInfo(travelReimbursementStatusModel);
        return localVarResp.getData();
    }

    /**
     * Insert a travel reimbursement status.
     * 
     * @param travelReimbursementStatusModel TravelReimbursementStatusModel. (optional)
     * @return ApiResponse&lt;TravelReimbursementStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel reimbursement status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelReimbursementStatusModel> travelReimbursementStatusPostTravelReimbursementStatusWithHttpInfo(TravelReimbursementStatusModel travelReimbursementStatusModel) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementStatusPostTravelReimbursementStatusValidateBeforeCall(travelReimbursementStatusModel, null);
        Type localVarReturnType = new TypeToken<TravelReimbursementStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a travel reimbursement status. (asynchronously)
     * 
     * @param travelReimbursementStatusModel TravelReimbursementStatusModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created travel reimbursement status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusPostTravelReimbursementStatusAsync(TravelReimbursementStatusModel travelReimbursementStatusModel, final ApiCallback<TravelReimbursementStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementStatusPostTravelReimbursementStatusValidateBeforeCall(travelReimbursementStatusModel, _callback);
        Type localVarReturnType = new TypeToken<TravelReimbursementStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertiesPatchUserCustomProperty
     * @param guid ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesPatchUserCustomPropertyCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertiesPatchUserCustomPropertyValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling userCustomPropertiesPatchUserCustomProperty(Async)");
        }

        return userCustomPropertiesPatchUserCustomPropertyCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a user custom property or a part of it.
     * 
     * @param guid ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertyModel. (optional)
     * @return List&lt;UserCustomPropertyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomPropertyOutputModel> userCustomPropertiesPatchUserCustomProperty(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<UserCustomPropertyOutputModel>> localVarResp = userCustomPropertiesPatchUserCustomPropertyWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a user custom property or a part of it.
     * 
     * @param guid ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertyModel. (optional)
     * @return ApiResponse&lt;List&lt;UserCustomPropertyOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomPropertyOutputModel>> userCustomPropertiesPatchUserCustomPropertyWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertiesPatchUserCustomPropertyValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertyOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a user custom property or a part of it. (asynchronously)
     * 
     * @param guid ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesPatchUserCustomPropertyAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<UserCustomPropertyOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertiesPatchUserCustomPropertyValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertyOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertiesPostUserCustomProperty
     * @param userCustomPropertyInputModel UserCustomPropertyModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesPostUserCustomPropertyCall(UserCustomPropertyInputModel userCustomPropertyInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCustomPropertyInputModel;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertiesPostUserCustomPropertyValidateBeforeCall(UserCustomPropertyInputModel userCustomPropertyInputModel, final ApiCallback _callback) throws ApiException {
        return userCustomPropertiesPostUserCustomPropertyCall(userCustomPropertyInputModel, _callback);

    }

    /**
     * Insert a user custom property.
     * 
     * @param userCustomPropertyInputModel UserCustomPropertyModel. (optional)
     * @return UserCustomPropertyOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserCustomPropertyOutputModel userCustomPropertiesPostUserCustomProperty(UserCustomPropertyInputModel userCustomPropertyInputModel) throws ApiException {
        ApiResponse<UserCustomPropertyOutputModel> localVarResp = userCustomPropertiesPostUserCustomPropertyWithHttpInfo(userCustomPropertyInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a user custom property.
     * 
     * @param userCustomPropertyInputModel UserCustomPropertyModel. (optional)
     * @return ApiResponse&lt;UserCustomPropertyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCustomPropertyOutputModel> userCustomPropertiesPostUserCustomPropertyWithHttpInfo(UserCustomPropertyInputModel userCustomPropertyInputModel) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertiesPostUserCustomPropertyValidateBeforeCall(userCustomPropertyInputModel, null);
        Type localVarReturnType = new TypeToken<UserCustomPropertyOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a user custom property. (asynchronously)
     * 
     * @param userCustomPropertyInputModel UserCustomPropertyModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesPostUserCustomPropertyAsync(UserCustomPropertyInputModel userCustomPropertyInputModel, final ApiCallback<UserCustomPropertyOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertiesPostUserCustomPropertyValidateBeforeCall(userCustomPropertyInputModel, _callback);
        Type localVarReturnType = new TypeToken<UserCustomPropertyOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem
     * @param guid ID of the user custom property selection item. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertySelectionItemInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties/usercustompropertyselectionitems/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem(Async)");
        }

        return userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a user custom property selection item or a part of it.
     * 
     * @param guid ID of the user custom property selection item. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertySelectionItemInputModel. (optional)
     * @return List&lt;UserCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomPropertySelectionItemOutputModel> userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<UserCustomPropertySelectionItemOutputModel>> localVarResp = userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a user custom property selection item or a part of it.
     * 
     * @param guid ID of the user custom property selection item. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertySelectionItemInputModel. (optional)
     * @return ApiResponse&lt;List&lt;UserCustomPropertySelectionItemOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomPropertySelectionItemOutputModel>> userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertySelectionItemOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a user custom property selection item or a part of it. (asynchronously)
     * 
     * @param guid ID of the user custom property selection item. (required)
     * @param patchOperation JSON Patch document of UserCustomPropertySelectionItemInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom properties. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<UserCustomPropertySelectionItemOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertySelectionItemOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem
     * @param userCustomPropertySelectionItemInputModel UserPropertySelectionItemInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemCall(UserCustomPropertySelectionItemInputModel userCustomPropertySelectionItemInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCustomPropertySelectionItemInputModel;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties/usercustompropertyselectionitems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemValidateBeforeCall(UserCustomPropertySelectionItemInputModel userCustomPropertySelectionItemInputModel, final ApiCallback _callback) throws ApiException {
        return userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemCall(userCustomPropertySelectionItemInputModel, _callback);

    }

    /**
     * Insert a user custom property selection item.
     * 
     * @param userCustomPropertySelectionItemInputModel UserPropertySelectionItemInputModel. (optional)
     * @return UserCustomPropertySelectionItemOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserCustomPropertySelectionItemOutputModel userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem(UserCustomPropertySelectionItemInputModel userCustomPropertySelectionItemInputModel) throws ApiException {
        ApiResponse<UserCustomPropertySelectionItemOutputModel> localVarResp = userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemWithHttpInfo(userCustomPropertySelectionItemInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a user custom property selection item.
     * 
     * @param userCustomPropertySelectionItemInputModel UserPropertySelectionItemInputModel. (optional)
     * @return ApiResponse&lt;UserCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCustomPropertySelectionItemOutputModel> userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemWithHttpInfo(UserCustomPropertySelectionItemInputModel userCustomPropertySelectionItemInputModel) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemValidateBeforeCall(userCustomPropertySelectionItemInputModel, null);
        Type localVarReturnType = new TypeToken<UserCustomPropertySelectionItemOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a user custom property selection item. (asynchronously)
     * 
     * @param userCustomPropertySelectionItemInputModel UserPropertySelectionItemInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom property. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemAsync(UserCustomPropertySelectionItemInputModel userCustomPropertySelectionItemInputModel, final ApiCallback<UserCustomPropertySelectionItemOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemValidateBeforeCall(userCustomPropertySelectionItemInputModel, _callback);
        Type localVarReturnType = new TypeToken<UserCustomPropertySelectionItemOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatRatesPatchVatRate
     * @param guid GUID of the vat rate (required)
     * @param patchOperation JSON Patch document of ValueAddedTaxModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesPatchVatRateCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/vatrates/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatRatesPatchVatRateValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling vatRatesPatchVatRate(Async)");
        }

        return vatRatesPatchVatRateCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a vat rate or a part of it
     * 
     * @param guid GUID of the vat rate (required)
     * @param patchOperation JSON Patch document of ValueAddedTaxModel (optional)
     * @return List&lt;VatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<VatRateOutputModel> vatRatesPatchVatRate(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<VatRateOutputModel>> localVarResp = vatRatesPatchVatRateWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a vat rate or a part of it
     * 
     * @param guid GUID of the vat rate (required)
     * @param patchOperation JSON Patch document of ValueAddedTaxModel (optional)
     * @return ApiResponse&lt;List&lt;VatRateOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VatRateOutputModel>> vatRatesPatchVatRateWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = vatRatesPatchVatRateValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<VatRateOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a vat rate or a part of it (asynchronously)
     * 
     * @param guid GUID of the vat rate (required)
     * @param patchOperation JSON Patch document of ValueAddedTaxModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesPatchVatRateAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<VatRateOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatRatesPatchVatRateValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<VatRateOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatRatesPostVatRate
     * @param vatRateInputModel VatRateInputModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesPostVatRateCall(VatRateInputModel vatRateInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vatRateInputModel;

        // create path and map variables
        String localVarPath = "/v1/vatrates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatRatesPostVatRateValidateBeforeCall(VatRateInputModel vatRateInputModel, final ApiCallback _callback) throws ApiException {
        return vatRatesPostVatRateCall(vatRateInputModel, _callback);

    }

    /**
     * Insert a vat rate
     * 
     * @param vatRateInputModel VatRateInputModel (optional)
     * @return VatRateOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public VatRateOutputModel vatRatesPostVatRate(VatRateInputModel vatRateInputModel) throws ApiException {
        ApiResponse<VatRateOutputModel> localVarResp = vatRatesPostVatRateWithHttpInfo(vatRateInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a vat rate
     * 
     * @param vatRateInputModel VatRateInputModel (optional)
     * @return ApiResponse&lt;VatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VatRateOutputModel> vatRatesPostVatRateWithHttpInfo(VatRateInputModel vatRateInputModel) throws ApiException {
        okhttp3.Call localVarCall = vatRatesPostVatRateValidateBeforeCall(vatRateInputModel, null);
        Type localVarReturnType = new TypeToken<VatRateOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a vat rate (asynchronously)
     * 
     * @param vatRateInputModel VatRateInputModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesPostVatRateAsync(VatRateInputModel vatRateInputModel, final ApiCallback<VatRateOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatRatesPostVatRateValidateBeforeCall(vatRateInputModel, _callback);
        Type localVarReturnType = new TypeToken<VatRateOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsPatchWorkContract
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPatchWorkContractCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/workcontracts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsPatchWorkContractValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workContractsPatchWorkContract(Async)");
        }

        return workContractsPatchWorkContractCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a work contract or a part of it.
     * 
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @return List&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkContractOutputModel> workContractsPatchWorkContract(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<WorkContractOutputModel>> localVarResp = workContractsPatchWorkContractWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a work contract or a part of it.
     * 
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @return ApiResponse&lt;List&lt;WorkContractOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkContractOutputModel>> workContractsPatchWorkContractWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = workContractsPatchWorkContractValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<WorkContractOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a work contract or a part of it. (asynchronously)
     * 
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPatchWorkContractAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<WorkContractOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsPatchWorkContractValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<WorkContractOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsPostWorkContract
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPostWorkContractCall(Boolean resetFlextime, WorkContractInputModel workContractInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workContractInputModel;

        // create path and map variables
        String localVarPath = "/v1/workcontracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resetFlextime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resetFlextime", resetFlextime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsPostWorkContractValidateBeforeCall(Boolean resetFlextime, WorkContractInputModel workContractInputModel, final ApiCallback _callback) throws ApiException {
        return workContractsPostWorkContractCall(resetFlextime, workContractInputModel, _callback);

    }

    /**
     * Insert a work contract.
     * 
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @return WorkContractOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkContractOutputModel workContractsPostWorkContract(Boolean resetFlextime, WorkContractInputModel workContractInputModel) throws ApiException {
        ApiResponse<WorkContractOutputModel> localVarResp = workContractsPostWorkContractWithHttpInfo(resetFlextime, workContractInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a work contract.
     * 
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @return ApiResponse&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkContractOutputModel> workContractsPostWorkContractWithHttpInfo(Boolean resetFlextime, WorkContractInputModel workContractInputModel) throws ApiException {
        okhttp3.Call localVarCall = workContractsPostWorkContractValidateBeforeCall(resetFlextime, workContractInputModel, null);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a work contract. (asynchronously)
     * 
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPostWorkContractAsync(Boolean resetFlextime, WorkContractInputModel workContractInputModel, final ApiCallback<WorkContractOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsPostWorkContractValidateBeforeCall(resetFlextime, workContractInputModel, _callback);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypesPatchWorkType
     * @param guid ID of the work type. (required)
     * @param patchOperation JSON Patch document of WorkTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesPatchWorkTypeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/worktypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypesPatchWorkTypeValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workTypesPatchWorkType(Async)");
        }

        return workTypesPatchWorkTypeCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a work type or a part of it.
     * 
     * @param guid ID of the work type. (required)
     * @param patchOperation JSON Patch document of WorkTypeModel. (optional)
     * @return List&lt;WorkTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkTypeOutputModel> workTypesPatchWorkType(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<WorkTypeOutputModel>> localVarResp = workTypesPatchWorkTypeWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a work type or a part of it.
     * 
     * @param guid ID of the work type. (required)
     * @param patchOperation JSON Patch document of WorkTypeModel. (optional)
     * @return ApiResponse&lt;List&lt;WorkTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkTypeOutputModel>> workTypesPatchWorkTypeWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = workTypesPatchWorkTypeValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<WorkTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a work type or a part of it. (asynchronously)
     * 
     * @param guid ID of the work type. (required)
     * @param patchOperation JSON Patch document of WorkTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated work types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesPatchWorkTypeAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<WorkTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypesPatchWorkTypeValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<WorkTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypesPostWorkType
     * @param workTypeInputModel WorkTypeModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesPostWorkTypeCall(WorkTypeInputModel workTypeInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workTypeInputModel;

        // create path and map variables
        String localVarPath = "/v1/worktypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypesPostWorkTypeValidateBeforeCall(WorkTypeInputModel workTypeInputModel, final ApiCallback _callback) throws ApiException {
        return workTypesPostWorkTypeCall(workTypeInputModel, _callback);

    }

    /**
     * Insert a work type.
     * 
     * @param workTypeInputModel WorkTypeModel. (optional)
     * @return WorkTypeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkTypeOutputModel workTypesPostWorkType(WorkTypeInputModel workTypeInputModel) throws ApiException {
        ApiResponse<WorkTypeOutputModel> localVarResp = workTypesPostWorkTypeWithHttpInfo(workTypeInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a work type.
     * 
     * @param workTypeInputModel WorkTypeModel. (optional)
     * @return ApiResponse&lt;WorkTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkTypeOutputModel> workTypesPostWorkTypeWithHttpInfo(WorkTypeInputModel workTypeInputModel) throws ApiException {
        okhttp3.Call localVarCall = workTypesPostWorkTypeValidateBeforeCall(workTypeInputModel, null);
        Type localVarReturnType = new TypeToken<WorkTypeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a work type. (asynchronously)
     * 
     * @param workTypeInputModel WorkTypeModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesPostWorkTypeAsync(WorkTypeInputModel workTypeInputModel, final ApiCallback<WorkTypeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypesPostWorkTypeValidateBeforeCall(workTypeInputModel, _callback);
        Type localVarReturnType = new TypeToken<WorkTypeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
