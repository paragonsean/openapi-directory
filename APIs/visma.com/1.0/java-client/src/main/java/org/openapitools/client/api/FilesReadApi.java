/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExceptionModel;
import java.io.File;
import org.openapitools.client.model.FileKeywordModel;
import org.openapitools.client.model.FileModel;
import org.openapitools.client.model.InvoiceFileModel;
import org.openapitools.client.model.InvoicePdfGetOptions;
import org.openapitools.client.model.InvoiceType;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProjectFileModel;
import org.openapitools.client.model.ProjectTravelExpenseFileModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileDataGetDataForFile
     * @param guid GUID used to get the file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get file data by ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileDataGetDataForFileCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/files/{guid}/filedata"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileDataGetDataForFileValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling fileDataGetDataForFile(Async)");
        }

        return fileDataGetDataForFileCall(guid, _callback);

    }

    /**
     * Get file data by ID.
     * Returns binary data, which contains content with type given in Content-Type header.
     * @param guid GUID used to get the file. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get file data by ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public File fileDataGetDataForFile(String guid) throws ApiException {
        ApiResponse<File> localVarResp = fileDataGetDataForFileWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get file data by ID.
     * Returns binary data, which contains content with type given in Content-Type header.
     * @param guid GUID used to get the file. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get file data by ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> fileDataGetDataForFileWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = fileDataGetDataForFileValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file data by ID. (asynchronously)
     * Returns binary data, which contains content with type given in Content-Type header.
     * @param guid GUID used to get the file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get file data by ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileDataGetDataForFileAsync(String guid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileDataGetDataForFileValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetFile
     * @param guid GUID used to get the file. (required)
     * @param includeDataInResponse Is data included in response as base64 string. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetFileCall(String guid, Boolean includeDataInResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/files/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDataInResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDataInResponse", includeDataInResponse));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetFileValidateBeforeCall(String guid, Boolean includeDataInResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling filesGetFile(Async)");
        }

        return filesGetFileCall(guid, includeDataInResponse, _callback);

    }

    /**
     * Get file by ID.
     * 
     * @param guid GUID used to get the file. (required)
     * @param includeDataInResponse Is data included in response as base64 string. (optional, default to false)
     * @return FileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public FileModel filesGetFile(String guid, Boolean includeDataInResponse) throws ApiException {
        ApiResponse<FileModel> localVarResp = filesGetFileWithHttpInfo(guid, includeDataInResponse);
        return localVarResp.getData();
    }

    /**
     * Get file by ID.
     * 
     * @param guid GUID used to get the file. (required)
     * @param includeDataInResponse Is data included in response as base64 string. (optional, default to false)
     * @return ApiResponse&lt;FileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileModel> filesGetFileWithHttpInfo(String guid, Boolean includeDataInResponse) throws ApiException {
        okhttp3.Call localVarCall = filesGetFileValidateBeforeCall(guid, includeDataInResponse, null);
        Type localVarReturnType = new TypeToken<FileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file by ID. (asynchronously)
     * 
     * @param guid GUID used to get the file. (required)
     * @param includeDataInResponse Is data included in response as base64 string. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetFileAsync(String guid, Boolean includeDataInResponse, final ApiCallback<FileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetFileValidateBeforeCall(guid, includeDataInResponse, _callback);
        Type localVarReturnType = new TypeToken<FileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetInvoiceFile
     * @param guid GUID used to get the invoice file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetInvoiceFileCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicefiles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetInvoiceFileValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling filesGetInvoiceFile(Async)");
        }

        return filesGetInvoiceFileCall(guid, _callback);

    }

    /**
     * Get invoice file by ID.
     * 
     * @param guid GUID used to get the invoice file. (required)
     * @return InvoiceFileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceFileModel filesGetInvoiceFile(String guid) throws ApiException {
        ApiResponse<InvoiceFileModel> localVarResp = filesGetInvoiceFileWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get invoice file by ID.
     * 
     * @param guid GUID used to get the invoice file. (required)
     * @return ApiResponse&lt;InvoiceFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceFileModel> filesGetInvoiceFileWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = filesGetInvoiceFileValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<InvoiceFileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice file by ID. (asynchronously)
     * 
     * @param guid GUID used to get the invoice file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetInvoiceFileAsync(String guid, final ApiCallback<InvoiceFileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetInvoiceFileValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceFileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetInvoiceFiles
     * @param invoiceGuid GUID of the invoice used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetInvoiceFilesCall(String invoiceGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoiceGuid}/files"
            .replace("{" + "invoiceGuid" + "}", localVarApiClient.escapeString(invoiceGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetInvoiceFilesValidateBeforeCall(String invoiceGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceGuid' is set
        if (invoiceGuid == null) {
            throw new ApiException("Missing the required parameter 'invoiceGuid' when calling filesGetInvoiceFiles(Async)");
        }

        return filesGetInvoiceFilesCall(invoiceGuid, firstRow, rowCount, _callback);

    }

    /**
     * Get all files of a invoice by its id.
     * 
     * @param invoiceGuid GUID of the invoice used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @return List&lt;InvoiceFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceFileModel> filesGetInvoiceFiles(String invoiceGuid, Integer firstRow, Integer rowCount) throws ApiException {
        ApiResponse<List<InvoiceFileModel>> localVarResp = filesGetInvoiceFilesWithHttpInfo(invoiceGuid, firstRow, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all files of a invoice by its id.
     * 
     * @param invoiceGuid GUID of the invoice used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceFileModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceFileModel>> filesGetInvoiceFilesWithHttpInfo(String invoiceGuid, Integer firstRow, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = filesGetInvoiceFilesValidateBeforeCall(invoiceGuid, firstRow, rowCount, null);
        Type localVarReturnType = new TypeToken<List<InvoiceFileModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all files of a invoice by its id. (asynchronously)
     * 
     * @param invoiceGuid GUID of the invoice used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetInvoiceFilesAsync(String invoiceGuid, Integer firstRow, Integer rowCount, final ApiCallback<List<InvoiceFileModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetInvoiceFilesValidateBeforeCall(invoiceGuid, firstRow, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceFileModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetProjectFile
     * @param guid GUID used to get the project file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProposalFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetProjectFileCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectfiles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetProjectFileValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling filesGetProjectFile(Async)");
        }

        return filesGetProjectFileCall(guid, _callback);

    }

    /**
     * Get project file by ID.
     * 
     * @param guid GUID used to get the project file. (required)
     * @return ProjectFileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProposalFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFileModel filesGetProjectFile(String guid) throws ApiException {
        ApiResponse<ProjectFileModel> localVarResp = filesGetProjectFileWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project file by ID.
     * 
     * @param guid GUID used to get the project file. (required)
     * @return ApiResponse&lt;ProjectFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProposalFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFileModel> filesGetProjectFileWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = filesGetProjectFileValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectFileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project file by ID. (asynchronously)
     * 
     * @param guid GUID used to get the project file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProposalFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetProjectFileAsync(String guid, final ApiCallback<ProjectFileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetProjectFileValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectFileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetProjectFiles
     * @param projectGuid GUID of the project used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetProjectFilesCall(String projectGuid, Integer firstRow, Integer rowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/files"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetProjectFilesValidateBeforeCall(String projectGuid, Integer firstRow, Integer rowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling filesGetProjectFiles(Async)");
        }

        return filesGetProjectFilesCall(projectGuid, firstRow, rowCount, sortings, _callback);

    }

    /**
     * Get all files of a project by its id.
     * 
     * @param projectGuid GUID of the project used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;ProjectFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFileModel> filesGetProjectFiles(String projectGuid, Integer firstRow, Integer rowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ProjectFileModel>> localVarResp = filesGetProjectFilesWithHttpInfo(projectGuid, firstRow, rowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all files of a project by its id.
     * 
     * @param projectGuid GUID of the project used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ProjectFileModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFileModel>> filesGetProjectFilesWithHttpInfo(String projectGuid, Integer firstRow, Integer rowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = filesGetProjectFilesValidateBeforeCall(projectGuid, firstRow, rowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ProjectFileModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all files of a project by its id. (asynchronously)
     * 
     * @param projectGuid GUID of the project used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetProjectFilesAsync(String projectGuid, Integer firstRow, Integer rowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ProjectFileModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetProjectFilesValidateBeforeCall(projectGuid, firstRow, rowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFileModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetTravelExpenseFile
     * @param guid GUID used to get the travel expense file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetTravelExpenseFileCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projecttravelexpensefiles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetTravelExpenseFileValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling filesGetTravelExpenseFile(Async)");
        }

        return filesGetTravelExpenseFileCall(guid, _callback);

    }

    /**
     * Get travel expense file by ID.
     * 
     * @param guid GUID used to get the travel expense file. (required)
     * @return ProjectTravelExpenseFileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectTravelExpenseFileModel filesGetTravelExpenseFile(String guid) throws ApiException {
        ApiResponse<ProjectTravelExpenseFileModel> localVarResp = filesGetTravelExpenseFileWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get travel expense file by ID.
     * 
     * @param guid GUID used to get the travel expense file. (required)
     * @return ApiResponse&lt;ProjectTravelExpenseFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectTravelExpenseFileModel> filesGetTravelExpenseFileWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = filesGetTravelExpenseFileValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectTravelExpenseFileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get travel expense file by ID. (asynchronously)
     * 
     * @param guid GUID used to get the travel expense file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetTravelExpenseFileAsync(String guid, final ApiCallback<ProjectTravelExpenseFileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetTravelExpenseFileValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectTravelExpenseFileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetTravelExpenseFiles
     * @param projectTravelExpenseGuid GUID of the travel expense used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetTravelExpenseFilesCall(String projectTravelExpenseGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projecttravelexpenses/{projectTravelExpenseGuid}/files"
            .replace("{" + "projectTravelExpenseGuid" + "}", localVarApiClient.escapeString(projectTravelExpenseGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetTravelExpenseFilesValidateBeforeCall(String projectTravelExpenseGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectTravelExpenseGuid' is set
        if (projectTravelExpenseGuid == null) {
            throw new ApiException("Missing the required parameter 'projectTravelExpenseGuid' when calling filesGetTravelExpenseFiles(Async)");
        }

        return filesGetTravelExpenseFilesCall(projectTravelExpenseGuid, firstRow, rowCount, _callback);

    }

    /**
     * Get all files of a travel expense by its id.
     * 
     * @param projectTravelExpenseGuid GUID of the travel expense used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @return List&lt;ProjectTravelExpenseFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseFileModel> filesGetTravelExpenseFiles(String projectTravelExpenseGuid, Integer firstRow, Integer rowCount) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseFileModel>> localVarResp = filesGetTravelExpenseFilesWithHttpInfo(projectTravelExpenseGuid, firstRow, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all files of a travel expense by its id.
     * 
     * @param projectTravelExpenseGuid GUID of the travel expense used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseFileModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseFileModel>> filesGetTravelExpenseFilesWithHttpInfo(String projectTravelExpenseGuid, Integer firstRow, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = filesGetTravelExpenseFilesValidateBeforeCall(projectTravelExpenseGuid, firstRow, rowCount, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseFileModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all files of a travel expense by its id. (asynchronously)
     * 
     * @param projectTravelExpenseGuid GUID of the travel expense used to get the files. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetTravelExpenseFilesAsync(String projectTravelExpenseGuid, Integer firstRow, Integer rowCount, final ApiCallback<List<ProjectTravelExpenseFileModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetTravelExpenseFilesValidateBeforeCall(projectTravelExpenseGuid, firstRow, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseFileModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesGetUsersTravelExpensesFiles
     * @param userGuid GUID of the user used to get the files attached to travel expenses. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param startDate Optional: Start date to from which to check travel expenses. (optional)
     * @param endDate Optional: End date to check for availability until travel expenses. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetUsersTravelExpensesFilesCall(String userGuid, Integer firstRow, Integer rowCount, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/travelexpensesfiles"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesGetUsersTravelExpensesFilesValidateBeforeCall(String userGuid, Integer firstRow, Integer rowCount, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling filesGetUsersTravelExpensesFiles(Async)");
        }

        return filesGetUsersTravelExpensesFilesCall(userGuid, firstRow, rowCount, startDate, endDate, _callback);

    }

    /**
     * Get all files of all travel expenses of the user.
     * 
     * @param userGuid GUID of the user used to get the files attached to travel expenses. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param startDate Optional: Start date to from which to check travel expenses. (optional)
     * @param endDate Optional: End date to check for availability until travel expenses. (optional)
     * @return List&lt;ProjectTravelExpenseFileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTravelExpenseFileModel> filesGetUsersTravelExpensesFiles(String userGuid, Integer firstRow, Integer rowCount, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<ProjectTravelExpenseFileModel>> localVarResp = filesGetUsersTravelExpensesFilesWithHttpInfo(userGuid, firstRow, rowCount, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get all files of all travel expenses of the user.
     * 
     * @param userGuid GUID of the user used to get the files attached to travel expenses. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param startDate Optional: Start date to from which to check travel expenses. (optional)
     * @param endDate Optional: End date to check for availability until travel expenses. (optional)
     * @return ApiResponse&lt;List&lt;ProjectTravelExpenseFileModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTravelExpenseFileModel>> filesGetUsersTravelExpensesFilesWithHttpInfo(String userGuid, Integer firstRow, Integer rowCount, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = filesGetUsersTravelExpensesFilesValidateBeforeCall(userGuid, firstRow, rowCount, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseFileModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all files of all travel expenses of the user. (asynchronously)
     * 
     * @param userGuid GUID of the user used to get the files attached to travel expenses. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param startDate Optional: Start date to from which to check travel expenses. (optional)
     * @param endDate Optional: End date to check for availability until travel expenses. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelExpenseFile. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesGetUsersTravelExpensesFilesAsync(String userGuid, Integer firstRow, Integer rowCount, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<ProjectTravelExpenseFileModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesGetUsersTravelExpensesFilesValidateBeforeCall(userGuid, firstRow, rowCount, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTravelExpenseFileModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsGetFileKeywords
     * @param fileGuid ID of the file for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetFileKeywordsCall(String fileGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/files/{fileGuid}/keywords"
            .replace("{" + "fileGuid" + "}", localVarApiClient.escapeString(fileGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsGetFileKeywordsValidateBeforeCall(String fileGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileGuid' is set
        if (fileGuid == null) {
            throw new ApiException("Missing the required parameter 'fileGuid' when calling keywordsGetFileKeywords(Async)");
        }

        return keywordsGetFileKeywordsCall(fileGuid, active, sortings, _callback);

    }

    /**
     * Get all the keywords for file.
     * 
     * @param fileGuid ID of the file for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;FileKeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FileKeywordModel> keywordsGetFileKeywords(String fileGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<FileKeywordModel>> localVarResp = keywordsGetFileKeywordsWithHttpInfo(fileGuid, active, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the keywords for file.
     * 
     * @param fileGuid ID of the file for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;FileKeywordModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileKeywordModel>> keywordsGetFileKeywordsWithHttpInfo(String fileGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = keywordsGetFileKeywordsValidateBeforeCall(fileGuid, active, sortings, null);
        Type localVarReturnType = new TypeToken<List<FileKeywordModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the keywords for file. (asynchronously)
     * 
     * @param fileGuid ID of the file for which keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetFileKeywordsAsync(String fileGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<FileKeywordModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsGetFileKeywordsValidateBeforeCall(fileGuid, active, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<FileKeywordModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pdfGetInvoicePdf
     * @param guid The invoice GUID. (required)
     * @param invoiceType Optional: type of invoice. (optional)
     * @param pdfGetOptions Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfGetInvoicePdfCall(String guid, InvoiceType invoiceType, InvoicePdfGetOptions pdfGetOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{guid}/pdf"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invoiceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceType", invoiceType));
        }

        if (pdfGetOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdfGetOptions", pdfGetOptions));
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pdfGetInvoicePdfValidateBeforeCall(String guid, InvoiceType invoiceType, InvoicePdfGetOptions pdfGetOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling pdfGetInvoicePdf(Async)");
        }

        return pdfGetInvoicePdfCall(guid, invoiceType, pdfGetOptions, _callback);

    }

    /**
     * Get an invoice PDF.
     * 
     * @param guid The invoice GUID. (required)
     * @param invoiceType Optional: type of invoice. (optional)
     * @param pdfGetOptions Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public File pdfGetInvoicePdf(String guid, InvoiceType invoiceType, InvoicePdfGetOptions pdfGetOptions) throws ApiException {
        ApiResponse<File> localVarResp = pdfGetInvoicePdfWithHttpInfo(guid, invoiceType, pdfGetOptions);
        return localVarResp.getData();
    }

    /**
     * Get an invoice PDF.
     * 
     * @param guid The invoice GUID. (required)
     * @param invoiceType Optional: type of invoice. (optional)
     * @param pdfGetOptions Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> pdfGetInvoicePdfWithHttpInfo(String guid, InvoiceType invoiceType, InvoicePdfGetOptions pdfGetOptions) throws ApiException {
        okhttp3.Call localVarCall = pdfGetInvoicePdfValidateBeforeCall(guid, invoiceType, pdfGetOptions, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an invoice PDF. (asynchronously)
     * 
     * @param guid The invoice GUID. (required)
     * @param invoiceType Optional: type of invoice. (optional)
     * @param pdfGetOptions Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfGetInvoicePdfAsync(String guid, InvoiceType invoiceType, InvoicePdfGetOptions pdfGetOptions, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = pdfGetInvoicePdfValidateBeforeCall(guid, invoiceType, pdfGetOptions, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pdfGetTravelReimbursementPdf
     * @param guid The travel reimbursement GUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a travel reimbursement PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfGetTravelReimbursementPdfCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursements/{guid}/pdf"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pdfGetTravelReimbursementPdfValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling pdfGetTravelReimbursementPdf(Async)");
        }

        return pdfGetTravelReimbursementPdfCall(guid, _callback);

    }

    /**
     * Get a travel reimbursement PDF.
     * 
     * @param guid The travel reimbursement GUID. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a travel reimbursement PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public File pdfGetTravelReimbursementPdf(String guid) throws ApiException {
        ApiResponse<File> localVarResp = pdfGetTravelReimbursementPdfWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get a travel reimbursement PDF.
     * 
     * @param guid The travel reimbursement GUID. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a travel reimbursement PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> pdfGetTravelReimbursementPdfWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = pdfGetTravelReimbursementPdfValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a travel reimbursement PDF. (asynchronously)
     * 
     * @param guid The travel reimbursement GUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a travel reimbursement PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfGetTravelReimbursementPdfAsync(String guid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = pdfGetTravelReimbursementPdfValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
