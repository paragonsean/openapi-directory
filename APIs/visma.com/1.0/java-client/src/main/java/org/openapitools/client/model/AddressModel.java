/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressCountry;
import org.openapitools.client.model.AddressCustomer;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddressModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddressModel {
  public static final String SERIALIZED_NAME_ADDRESSLINE = "addressline";
  @SerializedName(SERIALIZED_NAME_ADDRESSLINE)
  private String addressline;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<ModelWithName> contacts;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private AddressCountry country;

  public static final String SERIALIZED_NAME_COUNTRY_REGION = "countryRegion";
  @SerializedName(SERIALIZED_NAME_COUNTRY_REGION)
  private ModelWithName countryRegion;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private AddressCustomer customer;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_IS_BILLING_ADDRESS = "isBillingAddress";
  @SerializedName(SERIALIZED_NAME_IS_BILLING_ADDRESS)
  private Boolean isBillingAddress;

  public static final String SERIALIZED_NAME_IS_POSTAL_ADDRESS = "isPostalAddress";
  @SerializedName(SERIALIZED_NAME_IS_POSTAL_ADDRESS)
  private Boolean isPostalAddress;

  public static final String SERIALIZED_NAME_IS_VISIT_ADDRESS = "isVisitAddress";
  @SerializedName(SERIALIZED_NAME_IS_VISIT_ADDRESS)
  private Boolean isVisitAddress;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public AddressModel() {
  }

  public AddressModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public AddressModel addressline(String addressline) {
    this.addressline = addressline;
    return this;
  }

  /**
   * Get addressline
   * @return addressline
   */
  @javax.annotation.Nullable
  public String getAddressline() {
    return addressline;
  }

  public void setAddressline(String addressline) {
    this.addressline = addressline;
  }


  public AddressModel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AddressModel contacts(List<ModelWithName> contacts) {
    this.contacts = contacts;
    return this;
  }

  public AddressModel addContactsItem(ModelWithName contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<ModelWithName> getContacts() {
    return contacts;
  }

  public void setContacts(List<ModelWithName> contacts) {
    this.contacts = contacts;
  }


  public AddressModel country(AddressCountry country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public AddressCountry getCountry() {
    return country;
  }

  public void setCountry(AddressCountry country) {
    this.country = country;
  }


  public AddressModel countryRegion(ModelWithName countryRegion) {
    this.countryRegion = countryRegion;
    return this;
  }

  /**
   * Get countryRegion
   * @return countryRegion
   */
  @javax.annotation.Nullable
  public ModelWithName getCountryRegion() {
    return countryRegion;
  }

  public void setCountryRegion(ModelWithName countryRegion) {
    this.countryRegion = countryRegion;
  }


  public AddressModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public AddressModel customer(AddressCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public AddressCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(AddressCustomer customer) {
    this.customer = customer;
  }


  public AddressModel fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * Get fax
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public AddressModel isBillingAddress(Boolean isBillingAddress) {
    this.isBillingAddress = isBillingAddress;
    return this;
  }

  /**
   * Get isBillingAddress
   * @return isBillingAddress
   */
  @javax.annotation.Nullable
  public Boolean getIsBillingAddress() {
    return isBillingAddress;
  }

  public void setIsBillingAddress(Boolean isBillingAddress) {
    this.isBillingAddress = isBillingAddress;
  }


  public AddressModel isPostalAddress(Boolean isPostalAddress) {
    this.isPostalAddress = isPostalAddress;
    return this;
  }

  /**
   * Get isPostalAddress
   * @return isPostalAddress
   */
  @javax.annotation.Nullable
  public Boolean getIsPostalAddress() {
    return isPostalAddress;
  }

  public void setIsPostalAddress(Boolean isPostalAddress) {
    this.isPostalAddress = isPostalAddress;
  }


  public AddressModel isVisitAddress(Boolean isVisitAddress) {
    this.isVisitAddress = isVisitAddress;
    return this;
  }

  /**
   * Get isVisitAddress
   * @return isVisitAddress
   */
  @javax.annotation.Nullable
  public Boolean getIsVisitAddress() {
    return isVisitAddress;
  }

  public void setIsVisitAddress(Boolean isVisitAddress) {
    this.isVisitAddress = isVisitAddress;
  }


  public AddressModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public AddressModel phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public AddressModel postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressModel addressModel = (AddressModel) o;
    return Objects.equals(this.addressline, addressModel.addressline) &&
        Objects.equals(this.city, addressModel.city) &&
        Objects.equals(this.contacts, addressModel.contacts) &&
        Objects.equals(this.country, addressModel.country) &&
        Objects.equals(this.countryRegion, addressModel.countryRegion) &&
        Objects.equals(this.createdBy, addressModel.createdBy) &&
        Objects.equals(this.createdDateTime, addressModel.createdDateTime) &&
        Objects.equals(this.customer, addressModel.customer) &&
        Objects.equals(this.fax, addressModel.fax) &&
        Objects.equals(this.guid, addressModel.guid) &&
        Objects.equals(this.isBillingAddress, addressModel.isBillingAddress) &&
        Objects.equals(this.isPostalAddress, addressModel.isPostalAddress) &&
        Objects.equals(this.isVisitAddress, addressModel.isVisitAddress) &&
        Objects.equals(this.lastUpdatedBy, addressModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, addressModel.lastUpdatedDateTime) &&
        Objects.equals(this.phone, addressModel.phone) &&
        Objects.equals(this.postalCode, addressModel.postalCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressline, city, contacts, country, countryRegion, createdBy, createdDateTime, customer, fax, guid, isBillingAddress, isPostalAddress, isVisitAddress, lastUpdatedBy, lastUpdatedDateTime, phone, postalCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressModel {\n");
    sb.append("    addressline: ").append(toIndentedString(addressline)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryRegion: ").append(toIndentedString(countryRegion)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    isBillingAddress: ").append(toIndentedString(isBillingAddress)).append("\n");
    sb.append("    isPostalAddress: ").append(toIndentedString(isPostalAddress)).append("\n");
    sb.append("    isVisitAddress: ").append(toIndentedString(isVisitAddress)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressline");
    openapiFields.add("city");
    openapiFields.add("contacts");
    openapiFields.add("country");
    openapiFields.add("countryRegion");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("customer");
    openapiFields.add("fax");
    openapiFields.add("guid");
    openapiFields.add("isBillingAddress");
    openapiFields.add("isPostalAddress");
    openapiFields.add("isVisitAddress");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("phone");
    openapiFields.add("postalCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressModel is not found in the empty JSON string", AddressModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressline") != null && !jsonObj.get("addressline").isJsonNull()) && !jsonObj.get("addressline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressline").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            ModelWithName.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        AddressCountry.validateJsonElement(jsonObj.get("country"));
      }
      // validate the optional field `countryRegion`
      if (jsonObj.get("countryRegion") != null && !jsonObj.get("countryRegion").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("countryRegion"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        AddressCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressModel>() {
           @Override
           public void write(JsonWriter out, AddressModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressModel
   * @throws IOException if the JSON string is invalid with respect to AddressModel
   */
  public static AddressModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressModel.class);
  }

  /**
   * Convert an instance of AddressModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

