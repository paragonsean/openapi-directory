/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.BillingScheduleType;
import org.openapitools.client.model.MoneyInputModelWithNullableAmount;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlatRateInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlatRateInputModel {
  public static final String SERIALIZED_NAME_BILL_ADDITIONAL_HOURS = "billAdditionalHours";
  @SerializedName(SERIALIZED_NAME_BILL_ADDITIONAL_HOURS)
  private Boolean billAdditionalHours = true;

  public static final String SERIALIZED_NAME_BILLING_SCHEDULE = "billingSchedule";
  @SerializedName(SERIALIZED_NAME_BILLING_SCHEDULE)
  private BillingScheduleType billingSchedule;

  public static final String SERIALIZED_NAME_INCLUDES_HOURS = "includesHours";
  @SerializedName(SERIALIZED_NAME_INCLUDES_HOURS)
  private Double includesHours = 0d;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputRequiredModel phase;

  public static final String SERIALIZED_NAME_PLANNED_BILLING_DATE = "plannedBillingDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_BILLING_DATE)
  private LocalDate plannedBillingDate;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private MoneyInputModelWithNullableAmount price;

  public static final String SERIALIZED_NAME_PRICE_PER_ADDITIONAL_HOUR = "pricePerAdditionalHour";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_ADDITIONAL_HOUR)
  private MoneyInputModelWithNullableAmount pricePerAdditionalHour;

  public FlatRateInputModel() {
  }

  public FlatRateInputModel billAdditionalHours(Boolean billAdditionalHours) {
    this.billAdditionalHours = billAdditionalHours;
    return this;
  }

  /**
   * Get billAdditionalHours
   * @return billAdditionalHours
   */
  @javax.annotation.Nullable
  public Boolean getBillAdditionalHours() {
    return billAdditionalHours;
  }

  public void setBillAdditionalHours(Boolean billAdditionalHours) {
    this.billAdditionalHours = billAdditionalHours;
  }


  public FlatRateInputModel billingSchedule(BillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
    return this;
  }

  /**
   * Get billingSchedule
   * @return billingSchedule
   */
  @javax.annotation.Nonnull
  public BillingScheduleType getBillingSchedule() {
    return billingSchedule;
  }

  public void setBillingSchedule(BillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
  }


  public FlatRateInputModel includesHours(Double includesHours) {
    this.includesHours = includesHours;
    return this;
  }

  /**
   * Get includesHours
   * @return includesHours
   */
  @javax.annotation.Nullable
  public Double getIncludesHours() {
    return includesHours;
  }

  public void setIncludesHours(Double includesHours) {
    this.includesHours = includesHours;
  }


  public FlatRateInputModel phase(SimpleInputRequiredModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputRequiredModel phase) {
    this.phase = phase;
  }


  public FlatRateInputModel plannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
    return this;
  }

  /**
   * Get plannedBillingDate
   * @return plannedBillingDate
   */
  @javax.annotation.Nullable
  public LocalDate getPlannedBillingDate() {
    return plannedBillingDate;
  }

  public void setPlannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
  }


  public FlatRateInputModel price(MoneyInputModelWithNullableAmount price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getPrice() {
    return price;
  }

  public void setPrice(MoneyInputModelWithNullableAmount price) {
    this.price = price;
  }


  public FlatRateInputModel pricePerAdditionalHour(MoneyInputModelWithNullableAmount pricePerAdditionalHour) {
    this.pricePerAdditionalHour = pricePerAdditionalHour;
    return this;
  }

  /**
   * Get pricePerAdditionalHour
   * @return pricePerAdditionalHour
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getPricePerAdditionalHour() {
    return pricePerAdditionalHour;
  }

  public void setPricePerAdditionalHour(MoneyInputModelWithNullableAmount pricePerAdditionalHour) {
    this.pricePerAdditionalHour = pricePerAdditionalHour;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlatRateInputModel flatRateInputModel = (FlatRateInputModel) o;
    return Objects.equals(this.billAdditionalHours, flatRateInputModel.billAdditionalHours) &&
        Objects.equals(this.billingSchedule, flatRateInputModel.billingSchedule) &&
        Objects.equals(this.includesHours, flatRateInputModel.includesHours) &&
        Objects.equals(this.phase, flatRateInputModel.phase) &&
        Objects.equals(this.plannedBillingDate, flatRateInputModel.plannedBillingDate) &&
        Objects.equals(this.price, flatRateInputModel.price) &&
        Objects.equals(this.pricePerAdditionalHour, flatRateInputModel.pricePerAdditionalHour);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billAdditionalHours, billingSchedule, includesHours, phase, plannedBillingDate, price, pricePerAdditionalHour);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlatRateInputModel {\n");
    sb.append("    billAdditionalHours: ").append(toIndentedString(billAdditionalHours)).append("\n");
    sb.append("    billingSchedule: ").append(toIndentedString(billingSchedule)).append("\n");
    sb.append("    includesHours: ").append(toIndentedString(includesHours)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    plannedBillingDate: ").append(toIndentedString(plannedBillingDate)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    pricePerAdditionalHour: ").append(toIndentedString(pricePerAdditionalHour)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billAdditionalHours");
    openapiFields.add("billingSchedule");
    openapiFields.add("includesHours");
    openapiFields.add("phase");
    openapiFields.add("plannedBillingDate");
    openapiFields.add("price");
    openapiFields.add("pricePerAdditionalHour");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billingSchedule");
    openapiRequiredFields.add("phase");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlatRateInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlatRateInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlatRateInputModel is not found in the empty JSON string", FlatRateInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlatRateInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlatRateInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlatRateInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `billingSchedule`
      BillingScheduleType.validateJsonElement(jsonObj.get("billingSchedule"));
      // validate the required field `phase`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("phase"));
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `pricePerAdditionalHour`
      if (jsonObj.get("pricePerAdditionalHour") != null && !jsonObj.get("pricePerAdditionalHour").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("pricePerAdditionalHour"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlatRateInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlatRateInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlatRateInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlatRateInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FlatRateInputModel>() {
           @Override
           public void write(JsonWriter out, FlatRateInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlatRateInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlatRateInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlatRateInputModel
   * @throws IOException if the JSON string is invalid with respect to FlatRateInputModel
   */
  public static FlatRateInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlatRateInputModel.class);
  }

  /**
   * Convert an instance of FlatRateInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

