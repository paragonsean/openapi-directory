/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectCostCenterSubModel;
import org.openapitools.client.model.ProjectFeeCustomerSubModel;
import org.openapitools.client.model.ProjectFeeProductSubModel;
import org.openapitools.client.model.ProjectFeeProjectSubModel;
import org.openapitools.client.model.ProjectSalesAccountSubModel;
import org.openapitools.client.model.RecurrenceEndTypes;
import org.openapitools.client.model.UserSubModel;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectRecurringFeeRuleOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectRecurringFeeRuleOutputModel {
  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private ProjectCostCenterSubModel costCenter;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private ProjectFeeCustomerSubModel customer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_PERIOD_START_DATE = "displayPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PERIOD_START_DATE)
  private LocalDate displayPeriodStartDate;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency;

  public static final String SERIALIZED_NAME_GENERATED_TIMES = "generatedTimes";
  @SerializedName(SERIALIZED_NAME_GENERATED_TIMES)
  private Integer generatedTimes;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_HAS_VOLUME_PRICING = "hasVolumePricing";
  @SerializedName(SERIALIZED_NAME_HAS_VOLUME_PRICING)
  private Boolean hasVolumePricing;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private ModelWithName phase;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProjectFeeProductSubModel product;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductType productType;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectFeeProjectSubModel project;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_RECURRENCE_END_DATE = "recurrenceEndDate";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_END_DATE)
  private LocalDate recurrenceEndDate;

  public static final String SERIALIZED_NAME_RECURRENCE_END_TYPE = "recurrenceEndType";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_END_TYPE)
  private RecurrenceEndTypes recurrenceEndType;

  public static final String SERIALIZED_NAME_RECURRENCE_START_DATE = "recurrenceStartDate";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_START_DATE)
  private LocalDate recurrenceStartDate;

  public static final String SERIALIZED_NAME_RECURRENCE_TIMES = "recurrenceTimes";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_TIMES)
  private Integer recurrenceTimes;

  public static final String SERIALIZED_NAME_RECURRING_SALES_ACCOUNT = "recurringSalesAccount";
  @SerializedName(SERIALIZED_NAME_RECURRING_SALES_ACCOUNT)
  private ProjectSalesAccountSubModel recurringSalesAccount;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT = "salesAccount";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT)
  private ProjectSalesAccountSubModel salesAccount;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyOutputModel unitCost;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyOutputModel unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserSubModel user;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProjectRecurringFeeRuleOutputModel() {
  }

  public ProjectRecurringFeeRuleOutputModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public ProjectRecurringFeeRuleOutputModel costCenter(ProjectCostCenterSubModel costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Get costCenter
   * @return costCenter
   */
  @javax.annotation.Nullable
  public ProjectCostCenterSubModel getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(ProjectCostCenterSubModel costCenter) {
    this.costCenter = costCenter;
  }


  public ProjectRecurringFeeRuleOutputModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public ProjectRecurringFeeRuleOutputModel customer(ProjectFeeCustomerSubModel customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public ProjectFeeCustomerSubModel getCustomer() {
    return customer;
  }

  public void setCustomer(ProjectFeeCustomerSubModel customer) {
    this.customer = customer;
  }


  public ProjectRecurringFeeRuleOutputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectRecurringFeeRuleOutputModel displayPeriodStartDate(LocalDate displayPeriodStartDate) {
    this.displayPeriodStartDate = displayPeriodStartDate;
    return this;
  }

  /**
   * Get displayPeriodStartDate
   * @return displayPeriodStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getDisplayPeriodStartDate() {
    return displayPeriodStartDate;
  }

  public void setDisplayPeriodStartDate(LocalDate displayPeriodStartDate) {
    this.displayPeriodStartDate = displayPeriodStartDate;
  }


  public ProjectRecurringFeeRuleOutputModel frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }


  public ProjectRecurringFeeRuleOutputModel generatedTimes(Integer generatedTimes) {
    this.generatedTimes = generatedTimes;
    return this;
  }

  /**
   * Get generatedTimes
   * @return generatedTimes
   */
  @javax.annotation.Nullable
  public Integer getGeneratedTimes() {
    return generatedTimes;
  }

  public void setGeneratedTimes(Integer generatedTimes) {
    this.generatedTimes = generatedTimes;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public ProjectRecurringFeeRuleOutputModel hasVolumePricing(Boolean hasVolumePricing) {
    this.hasVolumePricing = hasVolumePricing;
    return this;
  }

  /**
   * Get hasVolumePricing
   * @return hasVolumePricing
   */
  @javax.annotation.Nullable
  public Boolean getHasVolumePricing() {
    return hasVolumePricing;
  }

  public void setHasVolumePricing(Boolean hasVolumePricing) {
    this.hasVolumePricing = hasVolumePricing;
  }


  public ProjectRecurringFeeRuleOutputModel isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ProjectRecurringFeeRuleOutputModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ProjectRecurringFeeRuleOutputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProjectRecurringFeeRuleOutputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectRecurringFeeRuleOutputModel phase(ModelWithName phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public ModelWithName getPhase() {
    return phase;
  }

  public void setPhase(ModelWithName phase) {
    this.phase = phase;
  }


  public ProjectRecurringFeeRuleOutputModel product(ProjectFeeProductSubModel product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public ProjectFeeProductSubModel getProduct() {
    return product;
  }

  public void setProduct(ProjectFeeProductSubModel product) {
    this.product = product;
  }


  public ProjectRecurringFeeRuleOutputModel productType(ProductType productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Get productType
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductType getProductType() {
    return productType;
  }

  public void setProductType(ProductType productType) {
    this.productType = productType;
  }


  public ProjectRecurringFeeRuleOutputModel project(ProjectFeeProjectSubModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ProjectFeeProjectSubModel getProject() {
    return project;
  }

  public void setProject(ProjectFeeProjectSubModel project) {
    this.project = project;
  }


  public ProjectRecurringFeeRuleOutputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProjectRecurringFeeRuleOutputModel recurrenceEndDate(LocalDate recurrenceEndDate) {
    this.recurrenceEndDate = recurrenceEndDate;
    return this;
  }

  /**
   * Get recurrenceEndDate
   * @return recurrenceEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getRecurrenceEndDate() {
    return recurrenceEndDate;
  }

  public void setRecurrenceEndDate(LocalDate recurrenceEndDate) {
    this.recurrenceEndDate = recurrenceEndDate;
  }


  public ProjectRecurringFeeRuleOutputModel recurrenceEndType(RecurrenceEndTypes recurrenceEndType) {
    this.recurrenceEndType = recurrenceEndType;
    return this;
  }

  /**
   * Get recurrenceEndType
   * @return recurrenceEndType
   */
  @javax.annotation.Nullable
  public RecurrenceEndTypes getRecurrenceEndType() {
    return recurrenceEndType;
  }

  public void setRecurrenceEndType(RecurrenceEndTypes recurrenceEndType) {
    this.recurrenceEndType = recurrenceEndType;
  }


  public ProjectRecurringFeeRuleOutputModel recurrenceStartDate(LocalDate recurrenceStartDate) {
    this.recurrenceStartDate = recurrenceStartDate;
    return this;
  }

  /**
   * Get recurrenceStartDate
   * @return recurrenceStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getRecurrenceStartDate() {
    return recurrenceStartDate;
  }

  public void setRecurrenceStartDate(LocalDate recurrenceStartDate) {
    this.recurrenceStartDate = recurrenceStartDate;
  }


  public ProjectRecurringFeeRuleOutputModel recurrenceTimes(Integer recurrenceTimes) {
    this.recurrenceTimes = recurrenceTimes;
    return this;
  }

  /**
   * Get recurrenceTimes
   * @return recurrenceTimes
   */
  @javax.annotation.Nullable
  public Integer getRecurrenceTimes() {
    return recurrenceTimes;
  }

  public void setRecurrenceTimes(Integer recurrenceTimes) {
    this.recurrenceTimes = recurrenceTimes;
  }


  public ProjectRecurringFeeRuleOutputModel recurringSalesAccount(ProjectSalesAccountSubModel recurringSalesAccount) {
    this.recurringSalesAccount = recurringSalesAccount;
    return this;
  }

  /**
   * Get recurringSalesAccount
   * @return recurringSalesAccount
   */
  @javax.annotation.Nullable
  public ProjectSalesAccountSubModel getRecurringSalesAccount() {
    return recurringSalesAccount;
  }

  public void setRecurringSalesAccount(ProjectSalesAccountSubModel recurringSalesAccount) {
    this.recurringSalesAccount = recurringSalesAccount;
  }


  public ProjectRecurringFeeRuleOutputModel salesAccount(ProjectSalesAccountSubModel salesAccount) {
    this.salesAccount = salesAccount;
    return this;
  }

  /**
   * Get salesAccount
   * @return salesAccount
   */
  @javax.annotation.Nullable
  public ProjectSalesAccountSubModel getSalesAccount() {
    return salesAccount;
  }

  public void setSalesAccount(ProjectSalesAccountSubModel salesAccount) {
    this.salesAccount = salesAccount;
  }


  public ProjectRecurringFeeRuleOutputModel unitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
  }


  public ProjectRecurringFeeRuleOutputModel unitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProjectRecurringFeeRuleOutputModel user(UserSubModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserSubModel getUser() {
    return user;
  }

  public void setUser(UserSubModel user) {
    this.user = user;
  }


  public ProjectRecurringFeeRuleOutputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectRecurringFeeRuleOutputModel projectRecurringFeeRuleOutputModel = (ProjectRecurringFeeRuleOutputModel) o;
    return Objects.equals(this.costCenter, projectRecurringFeeRuleOutputModel.costCenter) &&
        Objects.equals(this.createdBy, projectRecurringFeeRuleOutputModel.createdBy) &&
        Objects.equals(this.createdDateTime, projectRecurringFeeRuleOutputModel.createdDateTime) &&
        Objects.equals(this.customer, projectRecurringFeeRuleOutputModel.customer) &&
        Objects.equals(this.description, projectRecurringFeeRuleOutputModel.description) &&
        Objects.equals(this.displayPeriodStartDate, projectRecurringFeeRuleOutputModel.displayPeriodStartDate) &&
        Objects.equals(this.frequency, projectRecurringFeeRuleOutputModel.frequency) &&
        Objects.equals(this.generatedTimes, projectRecurringFeeRuleOutputModel.generatedTimes) &&
        Objects.equals(this.guid, projectRecurringFeeRuleOutputModel.guid) &&
        Objects.equals(this.hasVolumePricing, projectRecurringFeeRuleOutputModel.hasVolumePricing) &&
        Objects.equals(this.isActive, projectRecurringFeeRuleOutputModel.isActive) &&
        Objects.equals(this.lastUpdatedBy, projectRecurringFeeRuleOutputModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, projectRecurringFeeRuleOutputModel.lastUpdatedDateTime) &&
        Objects.equals(this.measurementUnit, projectRecurringFeeRuleOutputModel.measurementUnit) &&
        Objects.equals(this.name, projectRecurringFeeRuleOutputModel.name) &&
        Objects.equals(this.phase, projectRecurringFeeRuleOutputModel.phase) &&
        Objects.equals(this.product, projectRecurringFeeRuleOutputModel.product) &&
        Objects.equals(this.productType, projectRecurringFeeRuleOutputModel.productType) &&
        Objects.equals(this.project, projectRecurringFeeRuleOutputModel.project) &&
        Objects.equals(this.quantity, projectRecurringFeeRuleOutputModel.quantity) &&
        Objects.equals(this.recurrenceEndDate, projectRecurringFeeRuleOutputModel.recurrenceEndDate) &&
        Objects.equals(this.recurrenceEndType, projectRecurringFeeRuleOutputModel.recurrenceEndType) &&
        Objects.equals(this.recurrenceStartDate, projectRecurringFeeRuleOutputModel.recurrenceStartDate) &&
        Objects.equals(this.recurrenceTimes, projectRecurringFeeRuleOutputModel.recurrenceTimes) &&
        Objects.equals(this.recurringSalesAccount, projectRecurringFeeRuleOutputModel.recurringSalesAccount) &&
        Objects.equals(this.salesAccount, projectRecurringFeeRuleOutputModel.salesAccount) &&
        Objects.equals(this.unitCost, projectRecurringFeeRuleOutputModel.unitCost) &&
        Objects.equals(this.unitPrice, projectRecurringFeeRuleOutputModel.unitPrice) &&
        Objects.equals(this.user, projectRecurringFeeRuleOutputModel.user) &&
        Objects.equals(this.vatRate, projectRecurringFeeRuleOutputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(costCenter, createdBy, createdDateTime, customer, description, displayPeriodStartDate, frequency, generatedTimes, guid, hasVolumePricing, isActive, lastUpdatedBy, lastUpdatedDateTime, measurementUnit, name, phase, product, productType, project, quantity, recurrenceEndDate, recurrenceEndType, recurrenceStartDate, recurrenceTimes, recurringSalesAccount, salesAccount, unitCost, unitPrice, user, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectRecurringFeeRuleOutputModel {\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayPeriodStartDate: ").append(toIndentedString(displayPeriodStartDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    generatedTimes: ").append(toIndentedString(generatedTimes)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hasVolumePricing: ").append(toIndentedString(hasVolumePricing)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    recurrenceEndDate: ").append(toIndentedString(recurrenceEndDate)).append("\n");
    sb.append("    recurrenceEndType: ").append(toIndentedString(recurrenceEndType)).append("\n");
    sb.append("    recurrenceStartDate: ").append(toIndentedString(recurrenceStartDate)).append("\n");
    sb.append("    recurrenceTimes: ").append(toIndentedString(recurrenceTimes)).append("\n");
    sb.append("    recurringSalesAccount: ").append(toIndentedString(recurringSalesAccount)).append("\n");
    sb.append("    salesAccount: ").append(toIndentedString(salesAccount)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costCenter");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("customer");
    openapiFields.add("description");
    openapiFields.add("displayPeriodStartDate");
    openapiFields.add("frequency");
    openapiFields.add("generatedTimes");
    openapiFields.add("guid");
    openapiFields.add("hasVolumePricing");
    openapiFields.add("isActive");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("product");
    openapiFields.add("productType");
    openapiFields.add("project");
    openapiFields.add("quantity");
    openapiFields.add("recurrenceEndDate");
    openapiFields.add("recurrenceEndType");
    openapiFields.add("recurrenceStartDate");
    openapiFields.add("recurrenceTimes");
    openapiFields.add("recurringSalesAccount");
    openapiFields.add("salesAccount");
    openapiFields.add("unitCost");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectRecurringFeeRuleOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectRecurringFeeRuleOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectRecurringFeeRuleOutputModel is not found in the empty JSON string", ProjectRecurringFeeRuleOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectRecurringFeeRuleOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectRecurringFeeRuleOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `costCenter`
      if (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) {
        ProjectCostCenterSubModel.validateJsonElement(jsonObj.get("costCenter"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        ProjectFeeCustomerSubModel.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ProjectFeeProductSubModel.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductType.validateJsonElement(jsonObj.get("productType"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ProjectFeeProjectSubModel.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `recurrenceEndType`
      if (jsonObj.get("recurrenceEndType") != null && !jsonObj.get("recurrenceEndType").isJsonNull()) {
        RecurrenceEndTypes.validateJsonElement(jsonObj.get("recurrenceEndType"));
      }
      // validate the optional field `recurringSalesAccount`
      if (jsonObj.get("recurringSalesAccount") != null && !jsonObj.get("recurringSalesAccount").isJsonNull()) {
        ProjectSalesAccountSubModel.validateJsonElement(jsonObj.get("recurringSalesAccount"));
      }
      // validate the optional field `salesAccount`
      if (jsonObj.get("salesAccount") != null && !jsonObj.get("salesAccount").isJsonNull()) {
        ProjectSalesAccountSubModel.validateJsonElement(jsonObj.get("salesAccount"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitPrice"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserSubModel.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectRecurringFeeRuleOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectRecurringFeeRuleOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectRecurringFeeRuleOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectRecurringFeeRuleOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectRecurringFeeRuleOutputModel>() {
           @Override
           public void write(JsonWriter out, ProjectRecurringFeeRuleOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectRecurringFeeRuleOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectRecurringFeeRuleOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectRecurringFeeRuleOutputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectRecurringFeeRuleOutputModel
   */
  public static ProjectRecurringFeeRuleOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectRecurringFeeRuleOutputModel.class);
  }

  /**
   * Convert an instance of ProjectRecurringFeeRuleOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

