/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.FlextimeAdjustmentInputModel;
import org.openapitools.client.model.FlextimeAdjustmentOutputModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.UserCustomValueInputModel;
import org.openapitools.client.model.UserCustomValueOutputModel;
import org.openapitools.client.model.UserInputModel;
import org.openapitools.client.model.UserKeywordModel;
import org.openapitools.client.model.UserOutputModel;
import org.openapitools.client.model.WorkContractInputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkdayModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersWriteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersWriteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersWriteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for flextimeAdjustmentsDeleteFlextimeAdjustment
     * @param guid ID for the flextime adjustment to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsDeleteFlextimeAdjustmentCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/flextimeadjustments/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flextimeAdjustmentsDeleteFlextimeAdjustmentValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling flextimeAdjustmentsDeleteFlextimeAdjustment(Async)");
        }

        return flextimeAdjustmentsDeleteFlextimeAdjustmentCall(guid, _callback);

    }

    /**
     * Delete an flextime adjustment.
     * Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can&#39;t be found.
     * @param guid ID for the flextime adjustment to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void flextimeAdjustmentsDeleteFlextimeAdjustment(String guid) throws ApiException {
        flextimeAdjustmentsDeleteFlextimeAdjustmentWithHttpInfo(guid);
    }

    /**
     * Delete an flextime adjustment.
     * Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can&#39;t be found.
     * @param guid ID for the flextime adjustment to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> flextimeAdjustmentsDeleteFlextimeAdjustmentWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = flextimeAdjustmentsDeleteFlextimeAdjustmentValidateBeforeCall(guid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an flextime adjustment. (asynchronously)
     * Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can&#39;t be found.
     * @param guid ID for the flextime adjustment to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsDeleteFlextimeAdjustmentAsync(String guid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = flextimeAdjustmentsDeleteFlextimeAdjustmentValidateBeforeCall(guid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for flextimeAdjustmentsPatchFlextimeAdjustment
     * @param guid ID of the Flextime Adjustment. (required)
     * @param patchOperation JSON patch document of FlextimeAdjustmentInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsPatchFlextimeAdjustmentCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/flextimeadjustments/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flextimeAdjustmentsPatchFlextimeAdjustmentValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling flextimeAdjustmentsPatchFlextimeAdjustment(Async)");
        }

        return flextimeAdjustmentsPatchFlextimeAdjustmentCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an Flextime Adjustment or a part of it.
     * 
     * @param guid ID of the Flextime Adjustment. (required)
     * @param patchOperation JSON patch document of FlextimeAdjustmentInputModel. (optional)
     * @return List&lt;FlextimeAdjustmentOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FlextimeAdjustmentOutputModel> flextimeAdjustmentsPatchFlextimeAdjustment(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<FlextimeAdjustmentOutputModel>> localVarResp = flextimeAdjustmentsPatchFlextimeAdjustmentWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an Flextime Adjustment or a part of it.
     * 
     * @param guid ID of the Flextime Adjustment. (required)
     * @param patchOperation JSON patch document of FlextimeAdjustmentInputModel. (optional)
     * @return ApiResponse&lt;List&lt;FlextimeAdjustmentOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlextimeAdjustmentOutputModel>> flextimeAdjustmentsPatchFlextimeAdjustmentWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = flextimeAdjustmentsPatchFlextimeAdjustmentValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<FlextimeAdjustmentOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an Flextime Adjustment or a part of it. (asynchronously)
     * 
     * @param guid ID of the Flextime Adjustment. (required)
     * @param patchOperation JSON patch document of FlextimeAdjustmentInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsPatchFlextimeAdjustmentAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<FlextimeAdjustmentOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = flextimeAdjustmentsPatchFlextimeAdjustmentValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<FlextimeAdjustmentOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flextimeAdjustmentsPostFlextimeAdjustment
     * @param flextimeAdjustmentInputModel FlextimeAdjustmentInputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted FlextimeAdjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsPostFlextimeAdjustmentCall(FlextimeAdjustmentInputModel flextimeAdjustmentInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flextimeAdjustmentInputModel;

        // create path and map variables
        String localVarPath = "/v1/flextimeadjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flextimeAdjustmentsPostFlextimeAdjustmentValidateBeforeCall(FlextimeAdjustmentInputModel flextimeAdjustmentInputModel, final ApiCallback _callback) throws ApiException {
        return flextimeAdjustmentsPostFlextimeAdjustmentCall(flextimeAdjustmentInputModel, _callback);

    }

    /**
     * Insert a flextime adjustment.
     * 
     * @param flextimeAdjustmentInputModel FlextimeAdjustmentInputModel. (optional)
     * @return FlextimeAdjustmentOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted FlextimeAdjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public FlextimeAdjustmentOutputModel flextimeAdjustmentsPostFlextimeAdjustment(FlextimeAdjustmentInputModel flextimeAdjustmentInputModel) throws ApiException {
        ApiResponse<FlextimeAdjustmentOutputModel> localVarResp = flextimeAdjustmentsPostFlextimeAdjustmentWithHttpInfo(flextimeAdjustmentInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a flextime adjustment.
     * 
     * @param flextimeAdjustmentInputModel FlextimeAdjustmentInputModel. (optional)
     * @return ApiResponse&lt;FlextimeAdjustmentOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted FlextimeAdjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlextimeAdjustmentOutputModel> flextimeAdjustmentsPostFlextimeAdjustmentWithHttpInfo(FlextimeAdjustmentInputModel flextimeAdjustmentInputModel) throws ApiException {
        okhttp3.Call localVarCall = flextimeAdjustmentsPostFlextimeAdjustmentValidateBeforeCall(flextimeAdjustmentInputModel, null);
        Type localVarReturnType = new TypeToken<FlextimeAdjustmentOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a flextime adjustment. (asynchronously)
     * 
     * @param flextimeAdjustmentInputModel FlextimeAdjustmentInputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Inserted FlextimeAdjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsPostFlextimeAdjustmentAsync(FlextimeAdjustmentInputModel flextimeAdjustmentInputModel, final ApiCallback<FlextimeAdjustmentOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = flextimeAdjustmentsPostFlextimeAdjustmentValidateBeforeCall(flextimeAdjustmentInputModel, _callback);
        Type localVarReturnType = new TypeToken<FlextimeAdjustmentOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsLinkKeywordToUser
     * @param userGuid  (required)
     * @param guid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsLinkKeywordToUserCall(String userGuid, String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/keywords/{guid}"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()))
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsLinkKeywordToUserValidateBeforeCall(String userGuid, String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling keywordsLinkKeywordToUser(Async)");
        }

        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling keywordsLinkKeywordToUser(Async)");
        }

        return keywordsLinkKeywordToUserCall(userGuid, guid, _callback);

    }

    /**
     * Link existing keyword to user
     * 
     * @param userGuid  (required)
     * @param guid  (required)
     * @return UserKeywordModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserKeywordModel keywordsLinkKeywordToUser(String userGuid, String guid) throws ApiException {
        ApiResponse<UserKeywordModel> localVarResp = keywordsLinkKeywordToUserWithHttpInfo(userGuid, guid);
        return localVarResp.getData();
    }

    /**
     * Link existing keyword to user
     * 
     * @param userGuid  (required)
     * @param guid  (required)
     * @return ApiResponse&lt;UserKeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserKeywordModel> keywordsLinkKeywordToUserWithHttpInfo(String userGuid, String guid) throws ApiException {
        okhttp3.Call localVarCall = keywordsLinkKeywordToUserValidateBeforeCall(userGuid, guid, null);
        Type localVarReturnType = new TypeToken<UserKeywordModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link existing keyword to user (asynchronously)
     * 
     * @param userGuid  (required)
     * @param guid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user keyword link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsLinkKeywordToUserAsync(String userGuid, String guid, final ApiCallback<UserKeywordModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsLinkKeywordToUserValidateBeforeCall(userGuid, guid, _callback);
        Type localVarReturnType = new TypeToken<UserKeywordModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomValuesPatchUserCustomValue
     * @param guid ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomValueModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesPatchUserCustomValueCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/users/customvalues/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomValuesPatchUserCustomValueValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling userCustomValuesPatchUserCustomValue(Async)");
        }

        return userCustomValuesPatchUserCustomValueCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a user custom value or a part of it.
     * 
     * @param guid ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomValueModel. (optional)
     * @return List&lt;UserCustomValueOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomValueOutputModel> userCustomValuesPatchUserCustomValue(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<UserCustomValueOutputModel>> localVarResp = userCustomValuesPatchUserCustomValueWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a user custom value or a part of it.
     * 
     * @param guid ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomValueModel. (optional)
     * @return ApiResponse&lt;List&lt;UserCustomValueOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomValueOutputModel>> userCustomValuesPatchUserCustomValueWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = userCustomValuesPatchUserCustomValueValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<UserCustomValueOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a user custom value or a part of it. (asynchronously)
     * 
     * @param guid ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors. (required)
     * @param patchOperation JSON Patch document of UserCustomValueModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated user custom values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesPatchUserCustomValueAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<UserCustomValueOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomValuesPatchUserCustomValueValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomValueOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomValuesPostUserCustomValue
     * @param userCustomValueInputModel UserCustomValueModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesPostUserCustomValueCall(UserCustomValueInputModel userCustomValueInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCustomValueInputModel;

        // create path and map variables
        String localVarPath = "/v1/users/customvalues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomValuesPostUserCustomValueValidateBeforeCall(UserCustomValueInputModel userCustomValueInputModel, final ApiCallback _callback) throws ApiException {
        return userCustomValuesPostUserCustomValueCall(userCustomValueInputModel, _callback);

    }

    /**
     * Insert a user custom value.
     * 
     * @param userCustomValueInputModel UserCustomValueModel. (optional)
     * @return List&lt;UserCustomValueOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomValueOutputModel> userCustomValuesPostUserCustomValue(UserCustomValueInputModel userCustomValueInputModel) throws ApiException {
        ApiResponse<List<UserCustomValueOutputModel>> localVarResp = userCustomValuesPostUserCustomValueWithHttpInfo(userCustomValueInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a user custom value.
     * 
     * @param userCustomValueInputModel UserCustomValueModel. (optional)
     * @return ApiResponse&lt;List&lt;UserCustomValueOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomValueOutputModel>> userCustomValuesPostUserCustomValueWithHttpInfo(UserCustomValueInputModel userCustomValueInputModel) throws ApiException {
        okhttp3.Call localVarCall = userCustomValuesPostUserCustomValueValidateBeforeCall(userCustomValueInputModel, null);
        Type localVarReturnType = new TypeToken<List<UserCustomValueOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a user custom value. (asynchronously)
     * 
     * @param userCustomValueInputModel UserCustomValueModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user custom value. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesPostUserCustomValueAsync(UserCustomValueInputModel userCustomValueInputModel, final ApiCallback<List<UserCustomValueOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomValuesPostUserCustomValueValidateBeforeCall(userCustomValueInputModel, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomValueOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPatchUser
     * @param guid ID of the user. (required)
     * @param patchOperation JSON Patch document of UserModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated users. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPatchUserCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/users/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPatchUserValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling usersPatchUser(Async)");
        }

        return usersPatchUserCall(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) an user or a part of it.
     * 
     * @param guid ID of the user. (required)
     * @param patchOperation JSON Patch document of UserModel. (optional)
     * @return List&lt;UserOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated users. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserOutputModel> usersPatchUser(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<UserOutputModel>> localVarResp = usersPatchUserWithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) an user or a part of it.
     * 
     * @param guid ID of the user. (required)
     * @param patchOperation JSON Patch document of UserModel. (optional)
     * @return ApiResponse&lt;List&lt;UserOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated users. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserOutputModel>> usersPatchUserWithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = usersPatchUserValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<UserOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) an user or a part of it. (asynchronously)
     * 
     * @param guid ID of the user. (required)
     * @param patchOperation JSON Patch document of UserModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated users. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPatchUserAsync(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<UserOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPatchUserValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<UserOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPostUser
     * @param userInputModel UserModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostUserCall(UserInputModel userInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userInputModel;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostUserValidateBeforeCall(UserInputModel userInputModel, final ApiCallback _callback) throws ApiException {
        return usersPostUserCall(userInputModel, _callback);

    }

    /**
     * Insert an user.
     * 
     * @param userInputModel UserModel. (optional)
     * @return UserOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserOutputModel usersPostUser(UserInputModel userInputModel) throws ApiException {
        ApiResponse<UserOutputModel> localVarResp = usersPostUserWithHttpInfo(userInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert an user.
     * 
     * @param userInputModel UserModel. (optional)
     * @return ApiResponse&lt;UserOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserOutputModel> usersPostUserWithHttpInfo(UserInputModel userInputModel) throws ApiException {
        okhttp3.Call localVarCall = usersPostUserValidateBeforeCall(userInputModel, null);
        Type localVarReturnType = new TypeToken<UserOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert an user. (asynchronously)
     * 
     * @param userInputModel UserModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostUserAsync(UserInputModel userInputModel, final ApiCallback<UserOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostUserValidateBeforeCall(userInputModel, _callback);
        Type localVarReturnType = new TypeToken<UserOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsPatchWorkContract_0
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPatchWorkContract_0Call(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/workcontracts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsPatchWorkContract_0ValidateBeforeCall(String guid, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workContractsPatchWorkContract_0(Async)");
        }

        return workContractsPatchWorkContract_0Call(guid, patchOperation, _callback);

    }

    /**
     * Update (Patch) a work contract or a part of it.
     * 
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @return List&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkContractOutputModel> workContractsPatchWorkContract_0(String guid, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<WorkContractOutputModel>> localVarResp = workContractsPatchWorkContract_0WithHttpInfo(guid, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a work contract or a part of it.
     * 
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @return ApiResponse&lt;List&lt;WorkContractOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkContractOutputModel>> workContractsPatchWorkContract_0WithHttpInfo(String guid, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = workContractsPatchWorkContract_0ValidateBeforeCall(guid, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<WorkContractOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a work contract or a part of it. (asynchronously)
     * 
     * @param guid ID of the work contract. (required)
     * @param patchOperation JSON patch document of WorkContractOutputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPatchWorkContract_0Async(String guid, List<PatchOperation> patchOperation, final ApiCallback<List<WorkContractOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsPatchWorkContract_0ValidateBeforeCall(guid, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<WorkContractOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsPostWorkContract_0
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPostWorkContract_0Call(Boolean resetFlextime, WorkContractInputModel workContractInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workContractInputModel;

        // create path and map variables
        String localVarPath = "/v1/workcontracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resetFlextime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resetFlextime", resetFlextime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsPostWorkContract_0ValidateBeforeCall(Boolean resetFlextime, WorkContractInputModel workContractInputModel, final ApiCallback _callback) throws ApiException {
        return workContractsPostWorkContract_0Call(resetFlextime, workContractInputModel, _callback);

    }

    /**
     * Insert a work contract.
     * 
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @return WorkContractOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkContractOutputModel workContractsPostWorkContract_0(Boolean resetFlextime, WorkContractInputModel workContractInputModel) throws ApiException {
        ApiResponse<WorkContractOutputModel> localVarResp = workContractsPostWorkContract_0WithHttpInfo(resetFlextime, workContractInputModel);
        return localVarResp.getData();
    }

    /**
     * Insert a work contract.
     * 
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @return ApiResponse&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkContractOutputModel> workContractsPostWorkContract_0WithHttpInfo(Boolean resetFlextime, WorkContractInputModel workContractInputModel) throws ApiException {
        okhttp3.Call localVarCall = workContractsPostWorkContract_0ValidateBeforeCall(resetFlextime, workContractInputModel, null);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a work contract. (asynchronously)
     * 
     * @param resetFlextime Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true &#x3D; reset flextime. (optional, default to true)
     * @param workContractInputModel WorkContractOutputModel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created work contract. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsPostWorkContract_0Async(Boolean resetFlextime, WorkContractInputModel workContractInputModel, final ApiCallback<WorkContractOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsPostWorkContract_0ValidateBeforeCall(resetFlextime, workContractInputModel, _callback);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workdaysPatchWorkDay
     * @param userGuid ID of the user. (required)
     * @param date Date of the workday.. (required)
     * @param patchOperation JSON patch document of WorkdayModel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated workdays </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workdaysPatchWorkDayCall(String userGuid, OffsetDateTime date, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOperation;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/workdays/{date}"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workdaysPatchWorkDayValidateBeforeCall(String userGuid, OffsetDateTime date, List<PatchOperation> patchOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling workdaysPatchWorkDay(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling workdaysPatchWorkDay(Async)");
        }

        return workdaysPatchWorkDayCall(userGuid, date, patchOperation, _callback);

    }

    /**
     * Update (Patch) a workday or a part of it
     * 
     * @param userGuid ID of the user. (required)
     * @param date Date of the workday.. (required)
     * @param patchOperation JSON patch document of WorkdayModel (optional)
     * @return List&lt;WorkdayModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated workdays </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkdayModel> workdaysPatchWorkDay(String userGuid, OffsetDateTime date, List<PatchOperation> patchOperation) throws ApiException {
        ApiResponse<List<WorkdayModel>> localVarResp = workdaysPatchWorkDayWithHttpInfo(userGuid, date, patchOperation);
        return localVarResp.getData();
    }

    /**
     * Update (Patch) a workday or a part of it
     * 
     * @param userGuid ID of the user. (required)
     * @param date Date of the workday.. (required)
     * @param patchOperation JSON patch document of WorkdayModel (optional)
     * @return ApiResponse&lt;List&lt;WorkdayModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated workdays </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkdayModel>> workdaysPatchWorkDayWithHttpInfo(String userGuid, OffsetDateTime date, List<PatchOperation> patchOperation) throws ApiException {
        okhttp3.Call localVarCall = workdaysPatchWorkDayValidateBeforeCall(userGuid, date, patchOperation, null);
        Type localVarReturnType = new TypeToken<List<WorkdayModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (Patch) a workday or a part of it (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param date Date of the workday.. (required)
     * @param patchOperation JSON patch document of WorkdayModel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of updated workdays </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workdaysPatchWorkDayAsync(String userGuid, OffsetDateTime date, List<PatchOperation> patchOperation, final ApiCallback<List<WorkdayModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workdaysPatchWorkDayValidateBeforeCall(userGuid, date, patchOperation, _callback);
        Type localVarReturnType = new TypeToken<List<WorkdayModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
