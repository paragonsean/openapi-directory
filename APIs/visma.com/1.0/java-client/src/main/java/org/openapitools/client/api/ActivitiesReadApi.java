/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityCategory;
import org.openapitools.client.model.ActivityModel;
import org.openapitools.client.model.ActivityParticipantModel;
import org.openapitools.client.model.ExceptionModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RecurrenceType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivitiesReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivitiesReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivitiesReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activitiesGetActivities
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param closed Optional: Which activities to fetch - open/closed, Default all. (optional)
     * @param activityCategories Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all. (optional)
     * @param customerGuids Optional: ID of customer. Default all. (optional)
     * @param includeTasksWithNoCustomer Optional: Include the activities that don&#39;t have customer. Default is true. (optional, default to true)
     * @param projectGuids Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param includeTasksWithNoProject Optional: Include the activities that don&#39;t have project. Default is true. (optional, default to true)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager. If not provided, returns for all project managers. Default all. (optional)
     * @param userGuids Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param includeAsMember Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include. (optional, default to false)
     * @param userKeywordGuids Optional: User keyword Ids of activity owner to search for. (optional)
     * @param startDateTime Optional: starting date and time from which to get the activities in user&#39;s timezone. Finds all activities that end after the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. (optional)
     * @param endDateTime Optional: ending date and time to which to get the activities in user&#39;s timezone. Finds all activities that start before or on the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset. (optional)
     * @param projectTaskStatusGuids Optional: ID of the project task status. Default all. (optional)
     * @param phaseGuids Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all. (optional)
     * @param includeSubPhases Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false. (optional, default to false)
     * @param contactGuids Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param hasDuration Optional: has duration flag for the activity. Default all. (optional)
     * @param hasHours Optional: has any work hour entries associated with the activity. Default all. (optional)
     * @param isUnassigned Optional: is the activity unassigned. Default all. (optional)
     * @param changedSince Optional: Get activities that have been added or changed after this date time (greater or equal). (optional)
     * @param useStrictStartAndEndDateTime Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false. (optional, default to false)
     * @param activityTypeGuids Optional: ID of the project activity type. Default all. (optional)
     * @param recurrenceType Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None &#x3D; not recurring activity) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities for a project </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivitiesCall(String pageToken, Integer rowCount, Boolean closed, List<ActivityCategory> activityCategories, List<String> customerGuids, Boolean includeTasksWithNoCustomer, List<String> projectGuids, Boolean includeTasksWithNoProject, List<String> projectBusinessUnitGuids, List<String> projectOwnerGuids, List<String> userGuids, Boolean includeAsMember, List<String> userKeywordGuids, OffsetDateTime startDateTime, OffsetDateTime endDateTime, List<String> projectTaskStatusGuids, List<String> phaseGuids, Boolean includeSubPhases, List<String> contactGuids, Boolean hasDuration, Boolean hasHours, Boolean isUnassigned, OffsetDateTime changedSince, Boolean useStrictStartAndEndDateTime, List<String> activityTypeGuids, RecurrenceType recurrenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (closed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("closed", closed));
        }

        if (activityCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "activityCategories", activityCategories));
        }

        if (customerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerGuids", customerGuids));
        }

        if (includeTasksWithNoCustomer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTasksWithNoCustomer", includeTasksWithNoCustomer));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (includeTasksWithNoProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTasksWithNoProject", includeTasksWithNoProject));
        }

        if (projectBusinessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectBusinessUnitGuids", projectBusinessUnitGuids));
        }

        if (projectOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectOwnerGuids", projectOwnerGuids));
        }

        if (userGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userGuids", userGuids));
        }

        if (includeAsMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAsMember", includeAsMember));
        }

        if (userKeywordGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userKeywordGuids", userKeywordGuids));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (projectTaskStatusGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectTaskStatusGuids", projectTaskStatusGuids));
        }

        if (phaseGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "phaseGuids", phaseGuids));
        }

        if (includeSubPhases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSubPhases", includeSubPhases));
        }

        if (contactGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contactGuids", contactGuids));
        }

        if (hasDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasDuration", hasDuration));
        }

        if (hasHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasHours", hasHours));
        }

        if (isUnassigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUnassigned", isUnassigned));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (useStrictStartAndEndDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useStrictStartAndEndDateTime", useStrictStartAndEndDateTime));
        }

        if (activityTypeGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "activityTypeGuids", activityTypeGuids));
        }

        if (recurrenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recurrenceType", recurrenceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesGetActivitiesValidateBeforeCall(String pageToken, Integer rowCount, Boolean closed, List<ActivityCategory> activityCategories, List<String> customerGuids, Boolean includeTasksWithNoCustomer, List<String> projectGuids, Boolean includeTasksWithNoProject, List<String> projectBusinessUnitGuids, List<String> projectOwnerGuids, List<String> userGuids, Boolean includeAsMember, List<String> userKeywordGuids, OffsetDateTime startDateTime, OffsetDateTime endDateTime, List<String> projectTaskStatusGuids, List<String> phaseGuids, Boolean includeSubPhases, List<String> contactGuids, Boolean hasDuration, Boolean hasHours, Boolean isUnassigned, OffsetDateTime changedSince, Boolean useStrictStartAndEndDateTime, List<String> activityTypeGuids, RecurrenceType recurrenceType, final ApiCallback _callback) throws ApiException {
        return activitiesGetActivitiesCall(pageToken, rowCount, closed, activityCategories, customerGuids, includeTasksWithNoCustomer, projectGuids, includeTasksWithNoProject, projectBusinessUnitGuids, projectOwnerGuids, userGuids, includeAsMember, userKeywordGuids, startDateTime, endDateTime, projectTaskStatusGuids, phaseGuids, includeSubPhases, contactGuids, hasDuration, hasHours, isUnassigned, changedSince, useStrictStartAndEndDateTime, activityTypeGuids, recurrenceType, _callback);

    }

    /**
     * Get all activities of an organization
     * Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param closed Optional: Which activities to fetch - open/closed, Default all. (optional)
     * @param activityCategories Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all. (optional)
     * @param customerGuids Optional: ID of customer. Default all. (optional)
     * @param includeTasksWithNoCustomer Optional: Include the activities that don&#39;t have customer. Default is true. (optional, default to true)
     * @param projectGuids Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param includeTasksWithNoProject Optional: Include the activities that don&#39;t have project. Default is true. (optional, default to true)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager. If not provided, returns for all project managers. Default all. (optional)
     * @param userGuids Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param includeAsMember Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include. (optional, default to false)
     * @param userKeywordGuids Optional: User keyword Ids of activity owner to search for. (optional)
     * @param startDateTime Optional: starting date and time from which to get the activities in user&#39;s timezone. Finds all activities that end after the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. (optional)
     * @param endDateTime Optional: ending date and time to which to get the activities in user&#39;s timezone. Finds all activities that start before or on the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset. (optional)
     * @param projectTaskStatusGuids Optional: ID of the project task status. Default all. (optional)
     * @param phaseGuids Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all. (optional)
     * @param includeSubPhases Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false. (optional, default to false)
     * @param contactGuids Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param hasDuration Optional: has duration flag for the activity. Default all. (optional)
     * @param hasHours Optional: has any work hour entries associated with the activity. Default all. (optional)
     * @param isUnassigned Optional: is the activity unassigned. Default all. (optional)
     * @param changedSince Optional: Get activities that have been added or changed after this date time (greater or equal). (optional)
     * @param useStrictStartAndEndDateTime Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false. (optional, default to false)
     * @param activityTypeGuids Optional: ID of the project activity type. Default all. (optional)
     * @param recurrenceType Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None &#x3D; not recurring activity) (optional)
     * @return List&lt;ActivityModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities for a project </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ActivityModel> activitiesGetActivities(String pageToken, Integer rowCount, Boolean closed, List<ActivityCategory> activityCategories, List<String> customerGuids, Boolean includeTasksWithNoCustomer, List<String> projectGuids, Boolean includeTasksWithNoProject, List<String> projectBusinessUnitGuids, List<String> projectOwnerGuids, List<String> userGuids, Boolean includeAsMember, List<String> userKeywordGuids, OffsetDateTime startDateTime, OffsetDateTime endDateTime, List<String> projectTaskStatusGuids, List<String> phaseGuids, Boolean includeSubPhases, List<String> contactGuids, Boolean hasDuration, Boolean hasHours, Boolean isUnassigned, OffsetDateTime changedSince, Boolean useStrictStartAndEndDateTime, List<String> activityTypeGuids, RecurrenceType recurrenceType) throws ApiException {
        ApiResponse<List<ActivityModel>> localVarResp = activitiesGetActivitiesWithHttpInfo(pageToken, rowCount, closed, activityCategories, customerGuids, includeTasksWithNoCustomer, projectGuids, includeTasksWithNoProject, projectBusinessUnitGuids, projectOwnerGuids, userGuids, includeAsMember, userKeywordGuids, startDateTime, endDateTime, projectTaskStatusGuids, phaseGuids, includeSubPhases, contactGuids, hasDuration, hasHours, isUnassigned, changedSince, useStrictStartAndEndDateTime, activityTypeGuids, recurrenceType);
        return localVarResp.getData();
    }

    /**
     * Get all activities of an organization
     * Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param closed Optional: Which activities to fetch - open/closed, Default all. (optional)
     * @param activityCategories Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all. (optional)
     * @param customerGuids Optional: ID of customer. Default all. (optional)
     * @param includeTasksWithNoCustomer Optional: Include the activities that don&#39;t have customer. Default is true. (optional, default to true)
     * @param projectGuids Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param includeTasksWithNoProject Optional: Include the activities that don&#39;t have project. Default is true. (optional, default to true)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager. If not provided, returns for all project managers. Default all. (optional)
     * @param userGuids Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param includeAsMember Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include. (optional, default to false)
     * @param userKeywordGuids Optional: User keyword Ids of activity owner to search for. (optional)
     * @param startDateTime Optional: starting date and time from which to get the activities in user&#39;s timezone. Finds all activities that end after the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. (optional)
     * @param endDateTime Optional: ending date and time to which to get the activities in user&#39;s timezone. Finds all activities that start before or on the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset. (optional)
     * @param projectTaskStatusGuids Optional: ID of the project task status. Default all. (optional)
     * @param phaseGuids Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all. (optional)
     * @param includeSubPhases Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false. (optional, default to false)
     * @param contactGuids Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param hasDuration Optional: has duration flag for the activity. Default all. (optional)
     * @param hasHours Optional: has any work hour entries associated with the activity. Default all. (optional)
     * @param isUnassigned Optional: is the activity unassigned. Default all. (optional)
     * @param changedSince Optional: Get activities that have been added or changed after this date time (greater or equal). (optional)
     * @param useStrictStartAndEndDateTime Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false. (optional, default to false)
     * @param activityTypeGuids Optional: ID of the project activity type. Default all. (optional)
     * @param recurrenceType Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None &#x3D; not recurring activity) (optional)
     * @return ApiResponse&lt;List&lt;ActivityModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities for a project </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActivityModel>> activitiesGetActivitiesWithHttpInfo(String pageToken, Integer rowCount, Boolean closed, List<ActivityCategory> activityCategories, List<String> customerGuids, Boolean includeTasksWithNoCustomer, List<String> projectGuids, Boolean includeTasksWithNoProject, List<String> projectBusinessUnitGuids, List<String> projectOwnerGuids, List<String> userGuids, Boolean includeAsMember, List<String> userKeywordGuids, OffsetDateTime startDateTime, OffsetDateTime endDateTime, List<String> projectTaskStatusGuids, List<String> phaseGuids, Boolean includeSubPhases, List<String> contactGuids, Boolean hasDuration, Boolean hasHours, Boolean isUnassigned, OffsetDateTime changedSince, Boolean useStrictStartAndEndDateTime, List<String> activityTypeGuids, RecurrenceType recurrenceType) throws ApiException {
        okhttp3.Call localVarCall = activitiesGetActivitiesValidateBeforeCall(pageToken, rowCount, closed, activityCategories, customerGuids, includeTasksWithNoCustomer, projectGuids, includeTasksWithNoProject, projectBusinessUnitGuids, projectOwnerGuids, userGuids, includeAsMember, userKeywordGuids, startDateTime, endDateTime, projectTaskStatusGuids, phaseGuids, includeSubPhases, contactGuids, hasDuration, hasHours, isUnassigned, changedSince, useStrictStartAndEndDateTime, activityTypeGuids, recurrenceType, null);
        Type localVarReturnType = new TypeToken<List<ActivityModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all activities of an organization (asynchronously)
     * Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param closed Optional: Which activities to fetch - open/closed, Default all. (optional)
     * @param activityCategories Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all. (optional)
     * @param customerGuids Optional: ID of customer. Default all. (optional)
     * @param includeTasksWithNoCustomer Optional: Include the activities that don&#39;t have customer. Default is true. (optional, default to true)
     * @param projectGuids Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param includeTasksWithNoProject Optional: Include the activities that don&#39;t have project. Default is true. (optional, default to true)
     * @param projectBusinessUnitGuids Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all. (optional)
     * @param projectOwnerGuids Optional: ID of the project manager. If not provided, returns for all project managers. Default all. (optional)
     * @param userGuids Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param includeAsMember Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include. (optional, default to false)
     * @param userKeywordGuids Optional: User keyword Ids of activity owner to search for. (optional)
     * @param startDateTime Optional: starting date and time from which to get the activities in user&#39;s timezone. Finds all activities that end after the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. (optional)
     * @param endDateTime Optional: ending date and time to which to get the activities in user&#39;s timezone. Finds all activities that start before or on the date time. Format \&quot;2017-04-12T13%3A20%3A00%2b02%3A00\&quot;. Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset. (optional)
     * @param projectTaskStatusGuids Optional: ID of the project task status. Default all. (optional)
     * @param phaseGuids Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all. (optional)
     * @param includeSubPhases Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false. (optional, default to false)
     * @param contactGuids Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all. (optional)
     * @param hasDuration Optional: has duration flag for the activity. Default all. (optional)
     * @param hasHours Optional: has any work hour entries associated with the activity. Default all. (optional)
     * @param isUnassigned Optional: is the activity unassigned. Default all. (optional)
     * @param changedSince Optional: Get activities that have been added or changed after this date time (greater or equal). (optional)
     * @param useStrictStartAndEndDateTime Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false. (optional, default to false)
     * @param activityTypeGuids Optional: ID of the project activity type. Default all. (optional)
     * @param recurrenceType Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None &#x3D; not recurring activity) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities for a project </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivitiesAsync(String pageToken, Integer rowCount, Boolean closed, List<ActivityCategory> activityCategories, List<String> customerGuids, Boolean includeTasksWithNoCustomer, List<String> projectGuids, Boolean includeTasksWithNoProject, List<String> projectBusinessUnitGuids, List<String> projectOwnerGuids, List<String> userGuids, Boolean includeAsMember, List<String> userKeywordGuids, OffsetDateTime startDateTime, OffsetDateTime endDateTime, List<String> projectTaskStatusGuids, List<String> phaseGuids, Boolean includeSubPhases, List<String> contactGuids, Boolean hasDuration, Boolean hasHours, Boolean isUnassigned, OffsetDateTime changedSince, Boolean useStrictStartAndEndDateTime, List<String> activityTypeGuids, RecurrenceType recurrenceType, final ApiCallback<List<ActivityModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesGetActivitiesValidateBeforeCall(pageToken, rowCount, closed, activityCategories, customerGuids, includeTasksWithNoCustomer, projectGuids, includeTasksWithNoProject, projectBusinessUnitGuids, projectOwnerGuids, userGuids, includeAsMember, userKeywordGuids, startDateTime, endDateTime, projectTaskStatusGuids, phaseGuids, includeSubPhases, contactGuids, hasDuration, hasHours, isUnassigned, changedSince, useStrictStartAndEndDateTime, activityTypeGuids, recurrenceType, _callback);
        Type localVarReturnType = new TypeToken<List<ActivityModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitiesGetActivity
     * @param guid GUID used to get the activity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivityCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/activities/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesGetActivityValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling activitiesGetActivity(Async)");
        }

        return activitiesGetActivityCall(guid, _callback);

    }

    /**
     * Get activity by ID
     * 
     * @param guid GUID used to get the activity. (required)
     * @return ActivityModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ActivityModel activitiesGetActivity(String guid) throws ApiException {
        ApiResponse<ActivityModel> localVarResp = activitiesGetActivityWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get activity by ID
     * 
     * @param guid GUID used to get the activity. (required)
     * @return ApiResponse&lt;ActivityModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityModel> activitiesGetActivityWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = activitiesGetActivityValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ActivityModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get activity by ID (asynchronously)
     * 
     * @param guid GUID used to get the activity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivityAsync(String guid, final ApiCallback<ActivityModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesGetActivityValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ActivityModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityParticipantsGetActivityParticipant
     * @param guid ID of the participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityParticipantsGetActivityParticipantCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/activityparticipants/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityParticipantsGetActivityParticipantValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling activityParticipantsGetActivityParticipant(Async)");
        }

        return activityParticipantsGetActivityParticipantCall(guid, _callback);

    }

    /**
     * Get activity participant
     * 
     * @param guid ID of the participant (required)
     * @return ActivityParticipantModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ActivityParticipantModel activityParticipantsGetActivityParticipant(String guid) throws ApiException {
        ApiResponse<ActivityParticipantModel> localVarResp = activityParticipantsGetActivityParticipantWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get activity participant
     * 
     * @param guid ID of the participant (required)
     * @return ApiResponse&lt;ActivityParticipantModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityParticipantModel> activityParticipantsGetActivityParticipantWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = activityParticipantsGetActivityParticipantValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ActivityParticipantModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get activity participant (asynchronously)
     * 
     * @param guid ID of the participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityParticipantsGetActivityParticipantAsync(String guid, final ApiCallback<ActivityParticipantModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityParticipantsGetActivityParticipantValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ActivityParticipantModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityParticipantsGetActivityParticipants
     * @param activityGuid ID of the activity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipants for an activity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityParticipantsGetActivityParticipantsCall(String activityGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/activities/{activityGuid}/activityparticipants"
            .replace("{" + "activityGuid" + "}", localVarApiClient.escapeString(activityGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityParticipantsGetActivityParticipantsValidateBeforeCall(String activityGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityGuid' is set
        if (activityGuid == null) {
            throw new ApiException("Missing the required parameter 'activityGuid' when calling activityParticipantsGetActivityParticipants(Async)");
        }

        return activityParticipantsGetActivityParticipantsCall(activityGuid, _callback);

    }

    /**
     * Get participants for an activity
     * 
     * @param activityGuid ID of the activity (required)
     * @return List&lt;ActivityParticipantModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipants for an activity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ActivityParticipantModel> activityParticipantsGetActivityParticipants(String activityGuid) throws ApiException {
        ApiResponse<List<ActivityParticipantModel>> localVarResp = activityParticipantsGetActivityParticipantsWithHttpInfo(activityGuid);
        return localVarResp.getData();
    }

    /**
     * Get participants for an activity
     * 
     * @param activityGuid ID of the activity (required)
     * @return ApiResponse&lt;List&lt;ActivityParticipantModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipants for an activity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActivityParticipantModel>> activityParticipantsGetActivityParticipantsWithHttpInfo(String activityGuid) throws ApiException {
        okhttp3.Call localVarCall = activityParticipantsGetActivityParticipantsValidateBeforeCall(activityGuid, null);
        Type localVarReturnType = new TypeToken<List<ActivityParticipantModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get participants for an activity (asynchronously)
     * 
     * @param activityGuid ID of the activity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityParticipants for an activity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityParticipantsGetActivityParticipantsAsync(String activityGuid, final ApiCallback<List<ActivityParticipantModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityParticipantsGetActivityParticipantsValidateBeforeCall(activityGuid, _callback);
        Type localVarReturnType = new TypeToken<List<ActivityParticipantModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
