/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkdayModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkdayModel {
  public static final String SERIALIZED_NAME_ABSENCE_HOURS = "absenceHours";
  @SerializedName(SERIALIZED_NAME_ABSENCE_HOURS)
  private Double absenceHours;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_ENTERED_HOURS = "enteredHours";
  @SerializedName(SERIALIZED_NAME_ENTERED_HOURS)
  private Double enteredHours;

  public static final String SERIALIZED_NAME_ENTERED_TIME_ENTRIES = "enteredTimeEntries";
  @SerializedName(SERIALIZED_NAME_ENTERED_TIME_ENTRIES)
  private Double enteredTimeEntries;

  public static final String SERIALIZED_NAME_EXPECTED_HOURS = "expectedHours";
  @SerializedName(SERIALIZED_NAME_EXPECTED_HOURS)
  private Double expectedHours;

  public static final String SERIALIZED_NAME_FLEXTIME_LIMIT_PER_DAY = "flextimeLimitPerDay";
  @SerializedName(SERIALIZED_NAME_FLEXTIME_LIMIT_PER_DAY)
  private Double flextimeLimitPerDay;

  public static final String SERIALIZED_NAME_HOLIDAY_NAME = "holidayName";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_NAME)
  private String holidayName;

  public static final String SERIALIZED_NAME_INCOMPLETE_TIMING_MINUTES = "incompleteTimingMinutes";
  @SerializedName(SERIALIZED_NAME_INCOMPLETE_TIMING_MINUTES)
  private Integer incompleteTimingMinutes;

  public static final String SERIALIZED_NAME_IS_COMPLETED = "isCompleted";
  @SerializedName(SERIALIZED_NAME_IS_COMPLETED)
  private Boolean isCompleted;

  public static final String SERIALIZED_NAME_IS_HOLIDAY = "isHoliday";
  @SerializedName(SERIALIZED_NAME_IS_HOLIDAY)
  private Boolean isHoliday;

  public static final String SERIALIZED_NAME_IS_OVERTIME_ALLOWED = "isOvertimeAllowed";
  @SerializedName(SERIALIZED_NAME_IS_OVERTIME_ALLOWED)
  private Boolean isOvertimeAllowed;

  public static final String SERIALIZED_NAME_IS_READ_ONLY = "isReadOnly";
  @SerializedName(SERIALIZED_NAME_IS_READ_ONLY)
  private Boolean isReadOnly;

  public static final String SERIALIZED_NAME_USER_GUID = "userGuid";
  @SerializedName(SERIALIZED_NAME_USER_GUID)
  private String userGuid;

  public WorkdayModel() {
  }

  public WorkdayModel(
     Double expectedHours
  ) {
    this();
    this.expectedHours = expectedHours;
  }

  public WorkdayModel absenceHours(Double absenceHours) {
    this.absenceHours = absenceHours;
    return this;
  }

  /**
   * Get absenceHours
   * @return absenceHours
   */
  @javax.annotation.Nullable
  public Double getAbsenceHours() {
    return absenceHours;
  }

  public void setAbsenceHours(Double absenceHours) {
    this.absenceHours = absenceHours;
  }


  public WorkdayModel date(LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }


  public WorkdayModel enteredHours(Double enteredHours) {
    this.enteredHours = enteredHours;
    return this;
  }

  /**
   * Get enteredHours
   * @return enteredHours
   */
  @javax.annotation.Nullable
  public Double getEnteredHours() {
    return enteredHours;
  }

  public void setEnteredHours(Double enteredHours) {
    this.enteredHours = enteredHours;
  }


  public WorkdayModel enteredTimeEntries(Double enteredTimeEntries) {
    this.enteredTimeEntries = enteredTimeEntries;
    return this;
  }

  /**
   * Get enteredTimeEntries
   * @return enteredTimeEntries
   */
  @javax.annotation.Nullable
  public Double getEnteredTimeEntries() {
    return enteredTimeEntries;
  }

  public void setEnteredTimeEntries(Double enteredTimeEntries) {
    this.enteredTimeEntries = enteredTimeEntries;
  }


  /**
   * Get expectedHours
   * @return expectedHours
   */
  @javax.annotation.Nullable
  public Double getExpectedHours() {
    return expectedHours;
  }



  public WorkdayModel flextimeLimitPerDay(Double flextimeLimitPerDay) {
    this.flextimeLimitPerDay = flextimeLimitPerDay;
    return this;
  }

  /**
   * Get flextimeLimitPerDay
   * @return flextimeLimitPerDay
   */
  @javax.annotation.Nullable
  public Double getFlextimeLimitPerDay() {
    return flextimeLimitPerDay;
  }

  public void setFlextimeLimitPerDay(Double flextimeLimitPerDay) {
    this.flextimeLimitPerDay = flextimeLimitPerDay;
  }


  public WorkdayModel holidayName(String holidayName) {
    this.holidayName = holidayName;
    return this;
  }

  /**
   * Get holidayName
   * @return holidayName
   */
  @javax.annotation.Nullable
  public String getHolidayName() {
    return holidayName;
  }

  public void setHolidayName(String holidayName) {
    this.holidayName = holidayName;
  }


  public WorkdayModel incompleteTimingMinutes(Integer incompleteTimingMinutes) {
    this.incompleteTimingMinutes = incompleteTimingMinutes;
    return this;
  }

  /**
   * Get incompleteTimingMinutes
   * @return incompleteTimingMinutes
   */
  @javax.annotation.Nullable
  public Integer getIncompleteTimingMinutes() {
    return incompleteTimingMinutes;
  }

  public void setIncompleteTimingMinutes(Integer incompleteTimingMinutes) {
    this.incompleteTimingMinutes = incompleteTimingMinutes;
  }


  public WorkdayModel isCompleted(Boolean isCompleted) {
    this.isCompleted = isCompleted;
    return this;
  }

  /**
   * Get isCompleted
   * @return isCompleted
   */
  @javax.annotation.Nullable
  public Boolean getIsCompleted() {
    return isCompleted;
  }

  public void setIsCompleted(Boolean isCompleted) {
    this.isCompleted = isCompleted;
  }


  public WorkdayModel isHoliday(Boolean isHoliday) {
    this.isHoliday = isHoliday;
    return this;
  }

  /**
   * Get isHoliday
   * @return isHoliday
   */
  @javax.annotation.Nullable
  public Boolean getIsHoliday() {
    return isHoliday;
  }

  public void setIsHoliday(Boolean isHoliday) {
    this.isHoliday = isHoliday;
  }


  public WorkdayModel isOvertimeAllowed(Boolean isOvertimeAllowed) {
    this.isOvertimeAllowed = isOvertimeAllowed;
    return this;
  }

  /**
   * Get isOvertimeAllowed
   * @return isOvertimeAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsOvertimeAllowed() {
    return isOvertimeAllowed;
  }

  public void setIsOvertimeAllowed(Boolean isOvertimeAllowed) {
    this.isOvertimeAllowed = isOvertimeAllowed;
  }


  public WorkdayModel isReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
    return this;
  }

  /**
   * Get isReadOnly
   * @return isReadOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsReadOnly() {
    return isReadOnly;
  }

  public void setIsReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
  }


  public WorkdayModel userGuid(String userGuid) {
    this.userGuid = userGuid;
    return this;
  }

  /**
   * Get userGuid
   * @return userGuid
   */
  @javax.annotation.Nullable
  public String getUserGuid() {
    return userGuid;
  }

  public void setUserGuid(String userGuid) {
    this.userGuid = userGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkdayModel workdayModel = (WorkdayModel) o;
    return Objects.equals(this.absenceHours, workdayModel.absenceHours) &&
        Objects.equals(this.date, workdayModel.date) &&
        Objects.equals(this.enteredHours, workdayModel.enteredHours) &&
        Objects.equals(this.enteredTimeEntries, workdayModel.enteredTimeEntries) &&
        Objects.equals(this.expectedHours, workdayModel.expectedHours) &&
        Objects.equals(this.flextimeLimitPerDay, workdayModel.flextimeLimitPerDay) &&
        Objects.equals(this.holidayName, workdayModel.holidayName) &&
        Objects.equals(this.incompleteTimingMinutes, workdayModel.incompleteTimingMinutes) &&
        Objects.equals(this.isCompleted, workdayModel.isCompleted) &&
        Objects.equals(this.isHoliday, workdayModel.isHoliday) &&
        Objects.equals(this.isOvertimeAllowed, workdayModel.isOvertimeAllowed) &&
        Objects.equals(this.isReadOnly, workdayModel.isReadOnly) &&
        Objects.equals(this.userGuid, workdayModel.userGuid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(absenceHours, date, enteredHours, enteredTimeEntries, expectedHours, flextimeLimitPerDay, holidayName, incompleteTimingMinutes, isCompleted, isHoliday, isOvertimeAllowed, isReadOnly, userGuid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkdayModel {\n");
    sb.append("    absenceHours: ").append(toIndentedString(absenceHours)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    enteredHours: ").append(toIndentedString(enteredHours)).append("\n");
    sb.append("    enteredTimeEntries: ").append(toIndentedString(enteredTimeEntries)).append("\n");
    sb.append("    expectedHours: ").append(toIndentedString(expectedHours)).append("\n");
    sb.append("    flextimeLimitPerDay: ").append(toIndentedString(flextimeLimitPerDay)).append("\n");
    sb.append("    holidayName: ").append(toIndentedString(holidayName)).append("\n");
    sb.append("    incompleteTimingMinutes: ").append(toIndentedString(incompleteTimingMinutes)).append("\n");
    sb.append("    isCompleted: ").append(toIndentedString(isCompleted)).append("\n");
    sb.append("    isHoliday: ").append(toIndentedString(isHoliday)).append("\n");
    sb.append("    isOvertimeAllowed: ").append(toIndentedString(isOvertimeAllowed)).append("\n");
    sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
    sb.append("    userGuid: ").append(toIndentedString(userGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absenceHours");
    openapiFields.add("date");
    openapiFields.add("enteredHours");
    openapiFields.add("enteredTimeEntries");
    openapiFields.add("expectedHours");
    openapiFields.add("flextimeLimitPerDay");
    openapiFields.add("holidayName");
    openapiFields.add("incompleteTimingMinutes");
    openapiFields.add("isCompleted");
    openapiFields.add("isHoliday");
    openapiFields.add("isOvertimeAllowed");
    openapiFields.add("isReadOnly");
    openapiFields.add("userGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkdayModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkdayModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkdayModel is not found in the empty JSON string", WorkdayModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkdayModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkdayModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("holidayName") != null && !jsonObj.get("holidayName").isJsonNull()) && !jsonObj.get("holidayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holidayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holidayName").toString()));
      }
      if ((jsonObj.get("userGuid") != null && !jsonObj.get("userGuid").isJsonNull()) && !jsonObj.get("userGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkdayModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkdayModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkdayModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkdayModel.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkdayModel>() {
           @Override
           public void write(JsonWriter out, WorkdayModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkdayModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkdayModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkdayModel
   * @throws IOException if the JSON string is invalid with respect to WorkdayModel
   */
  public static WorkdayModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkdayModel.class);
  }

  /**
   * Convert an instance of WorkdayModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

