/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.FlextimeAdjustmentOutputModel;
import org.openapitools.client.model.FlextimeModel;
import org.openapitools.client.model.GetUsersPurpose;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.UserCustomValueOutputModel;
import org.openapitools.client.model.UserKeywordModel;
import org.openapitools.client.model.UserOutputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkdayModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for flextimeAdjustmentsGetFlextimeAdjustment
     * @param guid GUID used to get the Flextime Adjustment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsGetFlextimeAdjustmentCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/flextimeadjustments/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flextimeAdjustmentsGetFlextimeAdjustmentValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling flextimeAdjustmentsGetFlextimeAdjustment(Async)");
        }

        return flextimeAdjustmentsGetFlextimeAdjustmentCall(guid, _callback);

    }

    /**
     * Get Flextime Adjustment by ID.
     * 
     * @param guid GUID used to get the Flextime Adjustment. (required)
     * @return FlextimeAdjustmentOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public FlextimeAdjustmentOutputModel flextimeAdjustmentsGetFlextimeAdjustment(String guid) throws ApiException {
        ApiResponse<FlextimeAdjustmentOutputModel> localVarResp = flextimeAdjustmentsGetFlextimeAdjustmentWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Flextime Adjustment by ID.
     * 
     * @param guid GUID used to get the Flextime Adjustment. (required)
     * @return ApiResponse&lt;FlextimeAdjustmentOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlextimeAdjustmentOutputModel> flextimeAdjustmentsGetFlextimeAdjustmentWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = flextimeAdjustmentsGetFlextimeAdjustmentValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<FlextimeAdjustmentOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Flextime Adjustment by ID. (asynchronously)
     * 
     * @param guid GUID used to get the Flextime Adjustment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flextime Adjustment. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsGetFlextimeAdjustmentAsync(String guid, final ApiCallback<FlextimeAdjustmentOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = flextimeAdjustmentsGetFlextimeAdjustmentValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<FlextimeAdjustmentOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flextimeAdjustmentsGetFlextimeAdjustments
     * @param userGuid ID of the user for whom to get the adjustments. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Flextime Adjustments. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsGetFlextimeAdjustmentsCall(String userGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/flextimeadjustments"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flextimeAdjustmentsGetFlextimeAdjustmentsValidateBeforeCall(String userGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling flextimeAdjustmentsGetFlextimeAdjustments(Async)");
        }

        return flextimeAdjustmentsGetFlextimeAdjustmentsCall(userGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get the Flextime Adjustments.
     * 
     * @param userGuid ID of the user for whom to get the adjustments. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;FlextimeAdjustmentOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Flextime Adjustments. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FlextimeAdjustmentOutputModel> flextimeAdjustmentsGetFlextimeAdjustments(String userGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<FlextimeAdjustmentOutputModel>> localVarResp = flextimeAdjustmentsGetFlextimeAdjustmentsWithHttpInfo(userGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get the Flextime Adjustments.
     * 
     * @param userGuid ID of the user for whom to get the adjustments. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;FlextimeAdjustmentOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Flextime Adjustments. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlextimeAdjustmentOutputModel>> flextimeAdjustmentsGetFlextimeAdjustmentsWithHttpInfo(String userGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = flextimeAdjustmentsGetFlextimeAdjustmentsValidateBeforeCall(userGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<FlextimeAdjustmentOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Flextime Adjustments. (asynchronously)
     * 
     * @param userGuid ID of the user for whom to get the adjustments. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Flextime Adjustments. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeAdjustmentsGetFlextimeAdjustmentsAsync(String userGuid, String pageToken, Integer rowCount, final ApiCallback<List<FlextimeAdjustmentOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = flextimeAdjustmentsGetFlextimeAdjustmentsValidateBeforeCall(userGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<FlextimeAdjustmentOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flextimeGetFlextime
     * @param userGuid Id of the user. (required)
     * @param eventDate Date for which to get the balance. Max 12 months into the future. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlextimeModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeGetFlextimeCall(String userGuid, OffsetDateTime eventDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/flextime"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventDate", eventDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flextimeGetFlextimeValidateBeforeCall(String userGuid, OffsetDateTime eventDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling flextimeGetFlextime(Async)");
        }

        return flextimeGetFlextimeCall(userGuid, eventDate, _callback);

    }

    /**
     * Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date. Values are returned only if the advanced time tracking add-on is active.
     * 
     * @param userGuid Id of the user. (required)
     * @param eventDate Date for which to get the balance. Max 12 months into the future. (optional)
     * @return FlextimeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlextimeModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public FlextimeModel flextimeGetFlextime(String userGuid, OffsetDateTime eventDate) throws ApiException {
        ApiResponse<FlextimeModel> localVarResp = flextimeGetFlextimeWithHttpInfo(userGuid, eventDate);
        return localVarResp.getData();
    }

    /**
     * Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date. Values are returned only if the advanced time tracking add-on is active.
     * 
     * @param userGuid Id of the user. (required)
     * @param eventDate Date for which to get the balance. Max 12 months into the future. (optional)
     * @return ApiResponse&lt;FlextimeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlextimeModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlextimeModel> flextimeGetFlextimeWithHttpInfo(String userGuid, OffsetDateTime eventDate) throws ApiException {
        okhttp3.Call localVarCall = flextimeGetFlextimeValidateBeforeCall(userGuid, eventDate, null);
        Type localVarReturnType = new TypeToken<FlextimeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date. Values are returned only if the advanced time tracking add-on is active. (asynchronously)
     * 
     * @param userGuid Id of the user. (required)
     * @param eventDate Date for which to get the balance. Max 12 months into the future. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FlextimeModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flextimeGetFlextimeAsync(String userGuid, OffsetDateTime eventDate, final ApiCallback<FlextimeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = flextimeGetFlextimeValidateBeforeCall(userGuid, eventDate, _callback);
        Type localVarReturnType = new TypeToken<FlextimeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsGetUserKeywords
     * @param userGuid ID of the user for who keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetUserKeywordsCall(String userGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/keywords"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsGetUserKeywordsValidateBeforeCall(String userGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling keywordsGetUserKeywords(Async)");
        }

        return keywordsGetUserKeywordsCall(userGuid, active, sortings, _callback);

    }

    /**
     * Get all the keywords for user.
     * 
     * @param userGuid ID of the user for who keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;UserKeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserKeywordModel> keywordsGetUserKeywords(String userGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<UserKeywordModel>> localVarResp = keywordsGetUserKeywordsWithHttpInfo(userGuid, active, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the keywords for user.
     * 
     * @param userGuid ID of the user for who keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;UserKeywordModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserKeywordModel>> keywordsGetUserKeywordsWithHttpInfo(String userGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = keywordsGetUserKeywordsValidateBeforeCall(userGuid, active, sortings, null);
        Type localVarReturnType = new TypeToken<List<UserKeywordModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the keywords for user. (asynchronously)
     * 
     * @param userGuid ID of the user for who keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetUserKeywordsAsync(String userGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<UserKeywordModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsGetUserKeywordsValidateBeforeCall(userGuid, active, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<UserKeywordModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser
     * @param userGuid Guid of the user. (required)
     * @param isProjectClosed Search only for open or closed projects. Default all projects. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserCall(String userGuid, Boolean isProjectClosed, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/projectmembercostexceptions"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isProjectClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isProjectClosed", isProjectClosed));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserValidateBeforeCall(String userGuid, Boolean isProjectClosed, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser(Async)");
        }

        return projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserCall(userGuid, isProjectClosed, firstRow, rowCount, _callback);

    }

    /**
     * Get all cost exceptions of project members for user.
     * 
     * @param userGuid Guid of the user. (required)
     * @param isProjectClosed Search only for open or closed projects. Default all projects. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;ProjectMemberCostExceptionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectMemberCostExceptionOutputModel> projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser(String userGuid, Boolean isProjectClosed, Integer firstRow, Integer rowCount) throws ApiException {
        ApiResponse<List<ProjectMemberCostExceptionOutputModel>> localVarResp = projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserWithHttpInfo(userGuid, isProjectClosed, firstRow, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all cost exceptions of project members for user.
     * 
     * @param userGuid Guid of the user. (required)
     * @param isProjectClosed Search only for open or closed projects. Default all projects. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;ProjectMemberCostExceptionOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectMemberCostExceptionOutputModel>> projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserWithHttpInfo(String userGuid, Boolean isProjectClosed, Integer firstRow, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserValidateBeforeCall(userGuid, isProjectClosed, firstRow, rowCount, null);
        Type localVarReturnType = new TypeToken<List<ProjectMemberCostExceptionOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cost exceptions of project members for user. (asynchronously)
     * 
     * @param userGuid Guid of the user. (required)
     * @param isProjectClosed Search only for open or closed projects. Default all projects. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the member cost exceptions for one project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserAsync(String userGuid, Boolean isProjectClosed, Integer firstRow, Integer rowCount, final ApiCallback<List<ProjectMemberCostExceptionOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserValidateBeforeCall(userGuid, isProjectClosed, firstRow, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectMemberCostExceptionOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomValuesGetUserCustomValue
     * @param guid Id used to get the user custom value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesGetUserCustomValueCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/customvalues/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomValuesGetUserCustomValueValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling userCustomValuesGetUserCustomValue(Async)");
        }

        return userCustomValuesGetUserCustomValueCall(guid, _callback);

    }

    /**
     * Get user custom value by ID.
     * 
     * @param guid Id used to get the user custom value. (required)
     * @return UserCustomValueOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserCustomValueOutputModel userCustomValuesGetUserCustomValue(String guid) throws ApiException {
        ApiResponse<UserCustomValueOutputModel> localVarResp = userCustomValuesGetUserCustomValueWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get user custom value by ID.
     * 
     * @param guid Id used to get the user custom value. (required)
     * @return ApiResponse&lt;UserCustomValueOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCustomValueOutputModel> userCustomValuesGetUserCustomValueWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = userCustomValuesGetUserCustomValueValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<UserCustomValueOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user custom value by ID. (asynchronously)
     * 
     * @param guid Id used to get the user custom value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesGetUserCustomValueAsync(String guid, final ApiCallback<UserCustomValueOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomValuesGetUserCustomValueValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<UserCustomValueOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomValuesGetUserCustomValues
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only values of active or inactive user custom properties. (optional)
     * @param targets Optional: List of target for which to get the values. (optional)
     * @param changedSince Optional: Get user custom values that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesGetUserCustomValuesCall(String userGuid, String pageToken, Integer rowCount, Boolean isActive, List<String> targets, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/customvalues"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (targets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "targets", targets));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomValuesGetUserCustomValuesValidateBeforeCall(String userGuid, String pageToken, Integer rowCount, Boolean isActive, List<String> targets, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling userCustomValuesGetUserCustomValues(Async)");
        }

        return userCustomValuesGetUserCustomValuesCall(userGuid, pageToken, rowCount, isActive, targets, changedSince, _callback);

    }

    /**
     * Get the user custom values.
     * 
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only values of active or inactive user custom properties. (optional)
     * @param targets Optional: List of target for which to get the values. (optional)
     * @param changedSince Optional: Get user custom values that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;UserCustomValueOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomValueOutputModel> userCustomValuesGetUserCustomValues(String userGuid, String pageToken, Integer rowCount, Boolean isActive, List<String> targets, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<UserCustomValueOutputModel>> localVarResp = userCustomValuesGetUserCustomValuesWithHttpInfo(userGuid, pageToken, rowCount, isActive, targets, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the user custom values.
     * 
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only values of active or inactive user custom properties. (optional)
     * @param targets Optional: List of target for which to get the values. (optional)
     * @param changedSince Optional: Get user custom values that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;UserCustomValueOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomValueOutputModel>> userCustomValuesGetUserCustomValuesWithHttpInfo(String userGuid, String pageToken, Integer rowCount, Boolean isActive, List<String> targets, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = userCustomValuesGetUserCustomValuesValidateBeforeCall(userGuid, pageToken, rowCount, isActive, targets, changedSince, null);
        Type localVarReturnType = new TypeToken<List<UserCustomValueOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user custom values. (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only values of active or inactive user custom properties. (optional)
     * @param targets Optional: List of target for which to get the values. (optional)
     * @param changedSince Optional: Get user custom values that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomValuesGetUserCustomValuesAsync(String userGuid, String pageToken, Integer rowCount, Boolean isActive, List<String> targets, OffsetDateTime changedSince, final ApiCallback<List<UserCustomValueOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomValuesGetUserCustomValuesValidateBeforeCall(userGuid, pageToken, rowCount, isActive, targets, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomValueOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetUser
     * @param guid GUID used to get the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetUserCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetUserValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling usersGetUser(Async)");
        }

        return usersGetUserCall(guid, _callback);

    }

    /**
     * Get user by ID.
     * 
     * @param guid GUID used to get the user. (required)
     * @return UserOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserOutputModel usersGetUser(String guid) throws ApiException {
        ApiResponse<UserOutputModel> localVarResp = usersGetUserWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get user by ID.
     * 
     * @param guid GUID used to get the user. (required)
     * @return ApiResponse&lt;UserOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserOutputModel> usersGetUserWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = usersGetUserValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<UserOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user by ID. (asynchronously)
     * 
     * @param guid GUID used to get the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetUserAsync(String guid, final ApiCallback<UserOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetUserValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<UserOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetUsers
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all users, if given as true return only active users, if given as false returns only inactive users (optional)
     * @param businessUnitGuids Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all. (optional)
     * @param keywordGuids Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all. (optional)
     * @param changedSince Optional: Get users that have been added or changed after this date time (greater or equal). (optional)
     * @param supervisorUserGuids Optional: ID of the supervisor to get subordinates for. (optional)
     * @param code Optional: Code of the user. (optional, default to )
     * @param email Optional: Email address of the user. (optional, default to )
     * @param purpose Optional: Filter users by purpose. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the users </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetUsersCall(String pageToken, Integer rowCount, Boolean isActive, List<String> businessUnitGuids, List<String> keywordGuids, OffsetDateTime changedSince, List<String> supervisorUserGuids, String code, String email, GetUsersPurpose purpose, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (businessUnitGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "businessUnitGuids", businessUnitGuids));
        }

        if (keywordGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keywordGuids", keywordGuids));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (supervisorUserGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supervisorUserGuids", supervisorUserGuids));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetUsersValidateBeforeCall(String pageToken, Integer rowCount, Boolean isActive, List<String> businessUnitGuids, List<String> keywordGuids, OffsetDateTime changedSince, List<String> supervisorUserGuids, String code, String email, GetUsersPurpose purpose, final ApiCallback _callback) throws ApiException {
        return usersGetUsersCall(pageToken, rowCount, isActive, businessUnitGuids, keywordGuids, changedSince, supervisorUserGuids, code, email, purpose, _callback);

    }

    /**
     * Get users
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all users, if given as true return only active users, if given as false returns only inactive users (optional)
     * @param businessUnitGuids Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all. (optional)
     * @param keywordGuids Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all. (optional)
     * @param changedSince Optional: Get users that have been added or changed after this date time (greater or equal). (optional)
     * @param supervisorUserGuids Optional: ID of the supervisor to get subordinates for. (optional)
     * @param code Optional: Code of the user. (optional, default to )
     * @param email Optional: Email address of the user. (optional, default to )
     * @param purpose Optional: Filter users by purpose. (optional)
     * @return List&lt;UserOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the users </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserOutputModel> usersGetUsers(String pageToken, Integer rowCount, Boolean isActive, List<String> businessUnitGuids, List<String> keywordGuids, OffsetDateTime changedSince, List<String> supervisorUserGuids, String code, String email, GetUsersPurpose purpose) throws ApiException {
        ApiResponse<List<UserOutputModel>> localVarResp = usersGetUsersWithHttpInfo(pageToken, rowCount, isActive, businessUnitGuids, keywordGuids, changedSince, supervisorUserGuids, code, email, purpose);
        return localVarResp.getData();
    }

    /**
     * Get users
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all users, if given as true return only active users, if given as false returns only inactive users (optional)
     * @param businessUnitGuids Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all. (optional)
     * @param keywordGuids Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all. (optional)
     * @param changedSince Optional: Get users that have been added or changed after this date time (greater or equal). (optional)
     * @param supervisorUserGuids Optional: ID of the supervisor to get subordinates for. (optional)
     * @param code Optional: Code of the user. (optional, default to )
     * @param email Optional: Email address of the user. (optional, default to )
     * @param purpose Optional: Filter users by purpose. (optional)
     * @return ApiResponse&lt;List&lt;UserOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the users </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserOutputModel>> usersGetUsersWithHttpInfo(String pageToken, Integer rowCount, Boolean isActive, List<String> businessUnitGuids, List<String> keywordGuids, OffsetDateTime changedSince, List<String> supervisorUserGuids, String code, String email, GetUsersPurpose purpose) throws ApiException {
        okhttp3.Call localVarCall = usersGetUsersValidateBeforeCall(pageToken, rowCount, isActive, businessUnitGuids, keywordGuids, changedSince, supervisorUserGuids, code, email, purpose, null);
        Type localVarReturnType = new TypeToken<List<UserOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users (asynchronously)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all users, if given as true return only active users, if given as false returns only inactive users (optional)
     * @param businessUnitGuids Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all. (optional)
     * @param keywordGuids Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all. (optional)
     * @param changedSince Optional: Get users that have been added or changed after this date time (greater or equal). (optional)
     * @param supervisorUserGuids Optional: ID of the supervisor to get subordinates for. (optional)
     * @param code Optional: Code of the user. (optional, default to )
     * @param email Optional: Email address of the user. (optional, default to )
     * @param purpose Optional: Filter users by purpose. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the users </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetUsersAsync(String pageToken, Integer rowCount, Boolean isActive, List<String> businessUnitGuids, List<String> keywordGuids, OffsetDateTime changedSince, List<String> supervisorUserGuids, String code, String email, GetUsersPurpose purpose, final ApiCallback<List<UserOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetUsersValidateBeforeCall(pageToken, rowCount, isActive, businessUnitGuids, keywordGuids, changedSince, supervisorUserGuids, code, email, purpose, _callback);
        Type localVarReturnType = new TypeToken<List<UserOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsGetCurrentWorkContractForUser
     * @param userGuid Id of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetCurrentWorkContractForUserCall(String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/workcontracts/current"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsGetCurrentWorkContractForUserValidateBeforeCall(String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling workContractsGetCurrentWorkContractForUser(Async)");
        }

        return workContractsGetCurrentWorkContractForUserCall(userGuid, _callback);

    }

    /**
     * Gets current work contract for the user
     * 
     * @param userGuid Id of the user (required)
     * @return WorkContractOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkContractOutputModel workContractsGetCurrentWorkContractForUser(String userGuid) throws ApiException {
        ApiResponse<WorkContractOutputModel> localVarResp = workContractsGetCurrentWorkContractForUserWithHttpInfo(userGuid);
        return localVarResp.getData();
    }

    /**
     * Gets current work contract for the user
     * 
     * @param userGuid Id of the user (required)
     * @return ApiResponse&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkContractOutputModel> workContractsGetCurrentWorkContractForUserWithHttpInfo(String userGuid) throws ApiException {
        okhttp3.Call localVarCall = workContractsGetCurrentWorkContractForUserValidateBeforeCall(userGuid, null);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets current work contract for the user (asynchronously)
     * 
     * @param userGuid Id of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetCurrentWorkContractForUserAsync(String userGuid, final ApiCallback<WorkContractOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsGetCurrentWorkContractForUserValidateBeforeCall(userGuid, _callback);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsGetWorkContract_0
     * @param guid Id used to get the work contract. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetWorkContract_0Call(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workcontracts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsGetWorkContract_0ValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workContractsGetWorkContract_0(Async)");
        }

        return workContractsGetWorkContract_0Call(guid, _callback);

    }

    /**
     * Get work contract by ID.
     * 
     * @param guid Id used to get the work contract. (required)
     * @return WorkContractOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkContractOutputModel workContractsGetWorkContract_0(String guid) throws ApiException {
        ApiResponse<WorkContractOutputModel> localVarResp = workContractsGetWorkContract_0WithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get work contract by ID.
     * 
     * @param guid Id used to get the work contract. (required)
     * @return ApiResponse&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkContractOutputModel> workContractsGetWorkContract_0WithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = workContractsGetWorkContract_0ValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get work contract by ID. (asynchronously)
     * 
     * @param guid Id used to get the work contract. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetWorkContract_0Async(String guid, final ApiCallback<WorkContractOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsGetWorkContract_0ValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsGetWorkContractsForUser
     * @param userGuid Id of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetWorkContractsForUserCall(String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/workcontracts"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsGetWorkContractsForUserValidateBeforeCall(String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling workContractsGetWorkContractsForUser(Async)");
        }

        return workContractsGetWorkContractsForUserCall(userGuid, _callback);

    }

    /**
     * Get all the work contracts for the user.
     * 
     * @param userGuid Id of the user. (required)
     * @return List&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkContractOutputModel> workContractsGetWorkContractsForUser(String userGuid) throws ApiException {
        ApiResponse<List<WorkContractOutputModel>> localVarResp = workContractsGetWorkContractsForUserWithHttpInfo(userGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the work contracts for the user.
     * 
     * @param userGuid Id of the user. (required)
     * @return ApiResponse&lt;List&lt;WorkContractOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkContractOutputModel>> workContractsGetWorkContractsForUserWithHttpInfo(String userGuid) throws ApiException {
        okhttp3.Call localVarCall = workContractsGetWorkContractsForUserValidateBeforeCall(userGuid, null);
        Type localVarReturnType = new TypeToken<List<WorkContractOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the work contracts for the user. (asynchronously)
     * 
     * @param userGuid Id of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Work contracts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetWorkContractsForUserAsync(String userGuid, final ApiCallback<List<WorkContractOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsGetWorkContractsForUserValidateBeforeCall(userGuid, _callback);
        Type localVarReturnType = new TypeToken<List<WorkContractOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workdaysGetWorkdays
     * @param userGuid ID of the user. (required)
     * @param startDate Start date of the workdays. (required)
     * @param endDate End date of the workdays. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s workdays. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workdaysGetWorkdaysCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/workdays"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workdaysGetWorkdaysValidateBeforeCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling workdaysGetWorkdays(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling workdaysGetWorkdays(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling workdaysGetWorkdays(Async)");
        }

        return workdaysGetWorkdaysCall(userGuid, startDate, endDate, _callback);

    }

    /**
     * Get workdays for a user.
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Start date of the workdays. (required)
     * @param endDate End date of the workdays. (required)
     * @return List&lt;WorkdayModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s workdays. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkdayModel> workdaysGetWorkdays(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<WorkdayModel>> localVarResp = workdaysGetWorkdaysWithHttpInfo(userGuid, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get workdays for a user.
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Start date of the workdays. (required)
     * @param endDate End date of the workdays. (required)
     * @return ApiResponse&lt;List&lt;WorkdayModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s workdays. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkdayModel>> workdaysGetWorkdaysWithHttpInfo(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = workdaysGetWorkdaysValidateBeforeCall(userGuid, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<WorkdayModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get workdays for a user. (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Start date of the workdays. (required)
     * @param endDate End date of the workdays. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s workdays. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workdaysGetWorkdaysAsync(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<WorkdayModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workdaysGetWorkdaysValidateBeforeCall(userGuid, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<WorkdayModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
