/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.InvoiceSubModel;
import org.openapitools.client.model.ModelBaseWithRequiredGuid;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.client.model.ProjectTravelExpenseBillingScheduleType;
import org.openapitools.client.model.ProjectTravelExpenseProjectSubModel;
import org.openapitools.client.model.TravelExpenseSubModel;
import org.openapitools.client.model.TravelReimbursementSubModel;
import org.openapitools.client.model.UserRequiredSubModel;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectTravelExpenseOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectTravelExpenseOutputModel {
  public static final String SERIALIZED_NAME_ATTACHMENT_COUNT = "attachmentCount";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_COUNT)
  private Integer attachmentCount;

  public static final String SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE = "billingDependencyPhase";
  @SerializedName(SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE)
  private ModelWithName billingDependencyPhase;

  public static final String SERIALIZED_NAME_BILLING_SCHEDULE = "billingSchedule";
  @SerializedName(SERIALIZED_NAME_BILLING_SCHEDULE)
  private ProjectTravelExpenseBillingScheduleType billingSchedule;

  public static final String SERIALIZED_NAME_COST_ACCOUNT = "costAccount";
  @SerializedName(SERIALIZED_NAME_COST_ACCOUNT)
  private ModelWithName costAccount;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private ModelWithName costCenter;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private ModelWithName customer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private LocalDate eventDate;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private InvoiceSubModel invoice;

  public static final String SERIALIZED_NAME_INVOICE_QUANTITY = "invoiceQuantity";
  @SerializedName(SERIALIZED_NAME_INVOICE_QUANTITY)
  private Double invoiceQuantity;

  public static final String SERIALIZED_NAME_INVOICE_ROW_COMMENT = "invoiceRowComment";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_COMMENT)
  private String invoiceRowComment;

  public static final String SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION = "invoiceRowDescription";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION)
  private String invoiceRowDescription;

  public static final String SERIALIZED_NAME_INVOICE_ROW_GUID = "invoiceRowGuid";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_GUID)
  private String invoiceRowGuid;

  public static final String SERIALIZED_NAME_IS_BILLABLE = "isBillable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private ModelBaseWithRequiredGuid phase;

  public static final String SERIALIZED_NAME_PLANNED_BILLING_DATE = "plannedBillingDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_BILLING_DATE)
  private LocalDate plannedBillingDate;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectTravelExpenseProjectSubModel project;

  public static final String SERIALIZED_NAME_PURCHASE_VAT_RATE = "purchaseVatRate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_VAT_RATE)
  private Double purchaseVatRate;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT = "salesAccount";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT)
  private ModelWithName salesAccount;

  public static final String SERIALIZED_NAME_TRAVEL_END_TIME = "travelEndTime";
  @SerializedName(SERIALIZED_NAME_TRAVEL_END_TIME)
  private OffsetDateTime travelEndTime;

  public static final String SERIALIZED_NAME_TRAVEL_EXPENSE = "travelExpense";
  @SerializedName(SERIALIZED_NAME_TRAVEL_EXPENSE)
  private TravelExpenseSubModel travelExpense;

  public static final String SERIALIZED_NAME_TRAVEL_REIMBURSEMENT = "travelReimbursement";
  @SerializedName(SERIALIZED_NAME_TRAVEL_REIMBURSEMENT)
  private TravelReimbursementSubModel travelReimbursement;

  public static final String SERIALIZED_NAME_TRAVEL_REIMBURSEMENT_REQUIRED = "travelReimbursementRequired";
  @SerializedName(SERIALIZED_NAME_TRAVEL_REIMBURSEMENT_REQUIRED)
  private Boolean travelReimbursementRequired = true;

  public static final String SERIALIZED_NAME_TRAVEL_START_TIME = "travelStartTime";
  @SerializedName(SERIALIZED_NAME_TRAVEL_START_TIME)
  private OffsetDateTime travelStartTime;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyOutputModel unitCost;

  public static final String SERIALIZED_NAME_UNIT_COST_EXCLUDING_PURCHASE_VAT = "unitCostExcludingPurchaseVat";
  @SerializedName(SERIALIZED_NAME_UNIT_COST_EXCLUDING_PURCHASE_VAT)
  private MoneyOutputModel unitCostExcludingPurchaseVat;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyOutputModel unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserRequiredSubModel user;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProjectTravelExpenseOutputModel() {
  }

  public ProjectTravelExpenseOutputModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public ProjectTravelExpenseOutputModel attachmentCount(Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
    return this;
  }

  /**
   * Get attachmentCount
   * @return attachmentCount
   */
  @javax.annotation.Nullable
  public Integer getAttachmentCount() {
    return attachmentCount;
  }

  public void setAttachmentCount(Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
  }


  public ProjectTravelExpenseOutputModel billingDependencyPhase(ModelWithName billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
    return this;
  }

  /**
   * Get billingDependencyPhase
   * @return billingDependencyPhase
   */
  @javax.annotation.Nullable
  public ModelWithName getBillingDependencyPhase() {
    return billingDependencyPhase;
  }

  public void setBillingDependencyPhase(ModelWithName billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
  }


  public ProjectTravelExpenseOutputModel billingSchedule(ProjectTravelExpenseBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
    return this;
  }

  /**
   * Get billingSchedule
   * @return billingSchedule
   */
  @javax.annotation.Nullable
  public ProjectTravelExpenseBillingScheduleType getBillingSchedule() {
    return billingSchedule;
  }

  public void setBillingSchedule(ProjectTravelExpenseBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
  }


  public ProjectTravelExpenseOutputModel costAccount(ModelWithName costAccount) {
    this.costAccount = costAccount;
    return this;
  }

  /**
   * Get costAccount
   * @return costAccount
   */
  @javax.annotation.Nullable
  public ModelWithName getCostAccount() {
    return costAccount;
  }

  public void setCostAccount(ModelWithName costAccount) {
    this.costAccount = costAccount;
  }


  public ProjectTravelExpenseOutputModel costCenter(ModelWithName costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Get costCenter
   * @return costCenter
   */
  @javax.annotation.Nullable
  public ModelWithName getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(ModelWithName costCenter) {
    this.costCenter = costCenter;
  }


  public ProjectTravelExpenseOutputModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public ProjectTravelExpenseOutputModel customer(ModelWithName customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public ModelWithName getCustomer() {
    return customer;
  }

  public void setCustomer(ModelWithName customer) {
    this.customer = customer;
  }


  public ProjectTravelExpenseOutputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectTravelExpenseOutputModel eventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventDate() {
    return eventDate;
  }

  public void setEventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public ProjectTravelExpenseOutputModel invoice(InvoiceSubModel invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public InvoiceSubModel getInvoice() {
    return invoice;
  }

  public void setInvoice(InvoiceSubModel invoice) {
    this.invoice = invoice;
  }


  public ProjectTravelExpenseOutputModel invoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
    return this;
  }

  /**
   * Get invoiceQuantity
   * @return invoiceQuantity
   */
  @javax.annotation.Nullable
  public Double getInvoiceQuantity() {
    return invoiceQuantity;
  }

  public void setInvoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
  }


  public ProjectTravelExpenseOutputModel invoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
    return this;
  }

  /**
   * Get invoiceRowComment
   * @return invoiceRowComment
   */
  @javax.annotation.Nullable
  public String getInvoiceRowComment() {
    return invoiceRowComment;
  }

  public void setInvoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
  }


  public ProjectTravelExpenseOutputModel invoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
    return this;
  }

  /**
   * Get invoiceRowDescription
   * @return invoiceRowDescription
   */
  @javax.annotation.Nullable
  public String getInvoiceRowDescription() {
    return invoiceRowDescription;
  }

  public void setInvoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
  }


  public ProjectTravelExpenseOutputModel invoiceRowGuid(String invoiceRowGuid) {
    this.invoiceRowGuid = invoiceRowGuid;
    return this;
  }

  /**
   * Get invoiceRowGuid
   * @return invoiceRowGuid
   */
  @javax.annotation.Nullable
  public String getInvoiceRowGuid() {
    return invoiceRowGuid;
  }

  public void setInvoiceRowGuid(String invoiceRowGuid) {
    this.invoiceRowGuid = invoiceRowGuid;
  }


  public ProjectTravelExpenseOutputModel isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * Get isBillable
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public ProjectTravelExpenseOutputModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ProjectTravelExpenseOutputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProjectTravelExpenseOutputModel phase(ModelBaseWithRequiredGuid phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public ModelBaseWithRequiredGuid getPhase() {
    return phase;
  }

  public void setPhase(ModelBaseWithRequiredGuid phase) {
    this.phase = phase;
  }


  public ProjectTravelExpenseOutputModel plannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
    return this;
  }

  /**
   * Get plannedBillingDate
   * @return plannedBillingDate
   */
  @javax.annotation.Nullable
  public LocalDate getPlannedBillingDate() {
    return plannedBillingDate;
  }

  public void setPlannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
  }


  public ProjectTravelExpenseOutputModel project(ProjectTravelExpenseProjectSubModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ProjectTravelExpenseProjectSubModel getProject() {
    return project;
  }

  public void setProject(ProjectTravelExpenseProjectSubModel project) {
    this.project = project;
  }


  public ProjectTravelExpenseOutputModel purchaseVatRate(Double purchaseVatRate) {
    this.purchaseVatRate = purchaseVatRate;
    return this;
  }

  /**
   * Get purchaseVatRate
   * @return purchaseVatRate
   */
  @javax.annotation.Nullable
  public Double getPurchaseVatRate() {
    return purchaseVatRate;
  }

  public void setPurchaseVatRate(Double purchaseVatRate) {
    this.purchaseVatRate = purchaseVatRate;
  }


  public ProjectTravelExpenseOutputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProjectTravelExpenseOutputModel salesAccount(ModelWithName salesAccount) {
    this.salesAccount = salesAccount;
    return this;
  }

  /**
   * Get salesAccount
   * @return salesAccount
   */
  @javax.annotation.Nullable
  public ModelWithName getSalesAccount() {
    return salesAccount;
  }

  public void setSalesAccount(ModelWithName salesAccount) {
    this.salesAccount = salesAccount;
  }


  public ProjectTravelExpenseOutputModel travelEndTime(OffsetDateTime travelEndTime) {
    this.travelEndTime = travelEndTime;
    return this;
  }

  /**
   * Get travelEndTime
   * @return travelEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTravelEndTime() {
    return travelEndTime;
  }

  public void setTravelEndTime(OffsetDateTime travelEndTime) {
    this.travelEndTime = travelEndTime;
  }


  public ProjectTravelExpenseOutputModel travelExpense(TravelExpenseSubModel travelExpense) {
    this.travelExpense = travelExpense;
    return this;
  }

  /**
   * Get travelExpense
   * @return travelExpense
   */
  @javax.annotation.Nullable
  public TravelExpenseSubModel getTravelExpense() {
    return travelExpense;
  }

  public void setTravelExpense(TravelExpenseSubModel travelExpense) {
    this.travelExpense = travelExpense;
  }


  public ProjectTravelExpenseOutputModel travelReimbursement(TravelReimbursementSubModel travelReimbursement) {
    this.travelReimbursement = travelReimbursement;
    return this;
  }

  /**
   * Get travelReimbursement
   * @return travelReimbursement
   */
  @javax.annotation.Nullable
  public TravelReimbursementSubModel getTravelReimbursement() {
    return travelReimbursement;
  }

  public void setTravelReimbursement(TravelReimbursementSubModel travelReimbursement) {
    this.travelReimbursement = travelReimbursement;
  }


  public ProjectTravelExpenseOutputModel travelReimbursementRequired(Boolean travelReimbursementRequired) {
    this.travelReimbursementRequired = travelReimbursementRequired;
    return this;
  }

  /**
   * Get travelReimbursementRequired
   * @return travelReimbursementRequired
   */
  @javax.annotation.Nullable
  public Boolean getTravelReimbursementRequired() {
    return travelReimbursementRequired;
  }

  public void setTravelReimbursementRequired(Boolean travelReimbursementRequired) {
    this.travelReimbursementRequired = travelReimbursementRequired;
  }


  public ProjectTravelExpenseOutputModel travelStartTime(OffsetDateTime travelStartTime) {
    this.travelStartTime = travelStartTime;
    return this;
  }

  /**
   * Get travelStartTime
   * @return travelStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTravelStartTime() {
    return travelStartTime;
  }

  public void setTravelStartTime(OffsetDateTime travelStartTime) {
    this.travelStartTime = travelStartTime;
  }


  public ProjectTravelExpenseOutputModel unitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
  }


  public ProjectTravelExpenseOutputModel unitCostExcludingPurchaseVat(MoneyOutputModel unitCostExcludingPurchaseVat) {
    this.unitCostExcludingPurchaseVat = unitCostExcludingPurchaseVat;
    return this;
  }

  /**
   * Get unitCostExcludingPurchaseVat
   * @return unitCostExcludingPurchaseVat
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitCostExcludingPurchaseVat() {
    return unitCostExcludingPurchaseVat;
  }

  public void setUnitCostExcludingPurchaseVat(MoneyOutputModel unitCostExcludingPurchaseVat) {
    this.unitCostExcludingPurchaseVat = unitCostExcludingPurchaseVat;
  }


  public ProjectTravelExpenseOutputModel unitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProjectTravelExpenseOutputModel user(UserRequiredSubModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserRequiredSubModel getUser() {
    return user;
  }

  public void setUser(UserRequiredSubModel user) {
    this.user = user;
  }


  public ProjectTravelExpenseOutputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectTravelExpenseOutputModel projectTravelExpenseOutputModel = (ProjectTravelExpenseOutputModel) o;
    return Objects.equals(this.attachmentCount, projectTravelExpenseOutputModel.attachmentCount) &&
        Objects.equals(this.billingDependencyPhase, projectTravelExpenseOutputModel.billingDependencyPhase) &&
        Objects.equals(this.billingSchedule, projectTravelExpenseOutputModel.billingSchedule) &&
        Objects.equals(this.costAccount, projectTravelExpenseOutputModel.costAccount) &&
        Objects.equals(this.costCenter, projectTravelExpenseOutputModel.costCenter) &&
        Objects.equals(this.createdBy, projectTravelExpenseOutputModel.createdBy) &&
        Objects.equals(this.createdDateTime, projectTravelExpenseOutputModel.createdDateTime) &&
        Objects.equals(this.customer, projectTravelExpenseOutputModel.customer) &&
        Objects.equals(this.description, projectTravelExpenseOutputModel.description) &&
        Objects.equals(this.eventDate, projectTravelExpenseOutputModel.eventDate) &&
        Objects.equals(this.guid, projectTravelExpenseOutputModel.guid) &&
        Objects.equals(this.invoice, projectTravelExpenseOutputModel.invoice) &&
        Objects.equals(this.invoiceQuantity, projectTravelExpenseOutputModel.invoiceQuantity) &&
        Objects.equals(this.invoiceRowComment, projectTravelExpenseOutputModel.invoiceRowComment) &&
        Objects.equals(this.invoiceRowDescription, projectTravelExpenseOutputModel.invoiceRowDescription) &&
        Objects.equals(this.invoiceRowGuid, projectTravelExpenseOutputModel.invoiceRowGuid) &&
        Objects.equals(this.isBillable, projectTravelExpenseOutputModel.isBillable) &&
        Objects.equals(this.lastUpdatedBy, projectTravelExpenseOutputModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, projectTravelExpenseOutputModel.lastUpdatedDateTime) &&
        Objects.equals(this.measurementUnit, projectTravelExpenseOutputModel.measurementUnit) &&
        Objects.equals(this.phase, projectTravelExpenseOutputModel.phase) &&
        Objects.equals(this.plannedBillingDate, projectTravelExpenseOutputModel.plannedBillingDate) &&
        Objects.equals(this.project, projectTravelExpenseOutputModel.project) &&
        Objects.equals(this.purchaseVatRate, projectTravelExpenseOutputModel.purchaseVatRate) &&
        Objects.equals(this.quantity, projectTravelExpenseOutputModel.quantity) &&
        Objects.equals(this.salesAccount, projectTravelExpenseOutputModel.salesAccount) &&
        Objects.equals(this.travelEndTime, projectTravelExpenseOutputModel.travelEndTime) &&
        Objects.equals(this.travelExpense, projectTravelExpenseOutputModel.travelExpense) &&
        Objects.equals(this.travelReimbursement, projectTravelExpenseOutputModel.travelReimbursement) &&
        Objects.equals(this.travelReimbursementRequired, projectTravelExpenseOutputModel.travelReimbursementRequired) &&
        Objects.equals(this.travelStartTime, projectTravelExpenseOutputModel.travelStartTime) &&
        Objects.equals(this.unitCost, projectTravelExpenseOutputModel.unitCost) &&
        Objects.equals(this.unitCostExcludingPurchaseVat, projectTravelExpenseOutputModel.unitCostExcludingPurchaseVat) &&
        Objects.equals(this.unitPrice, projectTravelExpenseOutputModel.unitPrice) &&
        Objects.equals(this.user, projectTravelExpenseOutputModel.user) &&
        Objects.equals(this.vatRate, projectTravelExpenseOutputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentCount, billingDependencyPhase, billingSchedule, costAccount, costCenter, createdBy, createdDateTime, customer, description, eventDate, guid, invoice, invoiceQuantity, invoiceRowComment, invoiceRowDescription, invoiceRowGuid, isBillable, lastUpdatedBy, lastUpdatedDateTime, measurementUnit, phase, plannedBillingDate, project, purchaseVatRate, quantity, salesAccount, travelEndTime, travelExpense, travelReimbursement, travelReimbursementRequired, travelStartTime, unitCost, unitCostExcludingPurchaseVat, unitPrice, user, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectTravelExpenseOutputModel {\n");
    sb.append("    attachmentCount: ").append(toIndentedString(attachmentCount)).append("\n");
    sb.append("    billingDependencyPhase: ").append(toIndentedString(billingDependencyPhase)).append("\n");
    sb.append("    billingSchedule: ").append(toIndentedString(billingSchedule)).append("\n");
    sb.append("    costAccount: ").append(toIndentedString(costAccount)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceQuantity: ").append(toIndentedString(invoiceQuantity)).append("\n");
    sb.append("    invoiceRowComment: ").append(toIndentedString(invoiceRowComment)).append("\n");
    sb.append("    invoiceRowDescription: ").append(toIndentedString(invoiceRowDescription)).append("\n");
    sb.append("    invoiceRowGuid: ").append(toIndentedString(invoiceRowGuid)).append("\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    plannedBillingDate: ").append(toIndentedString(plannedBillingDate)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    purchaseVatRate: ").append(toIndentedString(purchaseVatRate)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    salesAccount: ").append(toIndentedString(salesAccount)).append("\n");
    sb.append("    travelEndTime: ").append(toIndentedString(travelEndTime)).append("\n");
    sb.append("    travelExpense: ").append(toIndentedString(travelExpense)).append("\n");
    sb.append("    travelReimbursement: ").append(toIndentedString(travelReimbursement)).append("\n");
    sb.append("    travelReimbursementRequired: ").append(toIndentedString(travelReimbursementRequired)).append("\n");
    sb.append("    travelStartTime: ").append(toIndentedString(travelStartTime)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitCostExcludingPurchaseVat: ").append(toIndentedString(unitCostExcludingPurchaseVat)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachmentCount");
    openapiFields.add("billingDependencyPhase");
    openapiFields.add("billingSchedule");
    openapiFields.add("costAccount");
    openapiFields.add("costCenter");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("customer");
    openapiFields.add("description");
    openapiFields.add("eventDate");
    openapiFields.add("guid");
    openapiFields.add("invoice");
    openapiFields.add("invoiceQuantity");
    openapiFields.add("invoiceRowComment");
    openapiFields.add("invoiceRowDescription");
    openapiFields.add("invoiceRowGuid");
    openapiFields.add("isBillable");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("measurementUnit");
    openapiFields.add("phase");
    openapiFields.add("plannedBillingDate");
    openapiFields.add("project");
    openapiFields.add("purchaseVatRate");
    openapiFields.add("quantity");
    openapiFields.add("salesAccount");
    openapiFields.add("travelEndTime");
    openapiFields.add("travelExpense");
    openapiFields.add("travelReimbursement");
    openapiFields.add("travelReimbursementRequired");
    openapiFields.add("travelStartTime");
    openapiFields.add("unitCost");
    openapiFields.add("unitCostExcludingPurchaseVat");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectTravelExpenseOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectTravelExpenseOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectTravelExpenseOutputModel is not found in the empty JSON string", ProjectTravelExpenseOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectTravelExpenseOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectTravelExpenseOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingDependencyPhase`
      if (jsonObj.get("billingDependencyPhase") != null && !jsonObj.get("billingDependencyPhase").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("billingDependencyPhase"));
      }
      // validate the optional field `billingSchedule`
      if (jsonObj.get("billingSchedule") != null && !jsonObj.get("billingSchedule").isJsonNull()) {
        ProjectTravelExpenseBillingScheduleType.validateJsonElement(jsonObj.get("billingSchedule"));
      }
      // validate the optional field `costAccount`
      if (jsonObj.get("costAccount") != null && !jsonObj.get("costAccount").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("costAccount"));
      }
      // validate the optional field `costCenter`
      if (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("costCenter"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        InvoiceSubModel.validateJsonElement(jsonObj.get("invoice"));
      }
      if ((jsonObj.get("invoiceRowComment") != null && !jsonObj.get("invoiceRowComment").isJsonNull()) && !jsonObj.get("invoiceRowComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowComment").toString()));
      }
      if ((jsonObj.get("invoiceRowDescription") != null && !jsonObj.get("invoiceRowDescription").isJsonNull()) && !jsonObj.get("invoiceRowDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowDescription").toString()));
      }
      if ((jsonObj.get("invoiceRowGuid") != null && !jsonObj.get("invoiceRowGuid").isJsonNull()) && !jsonObj.get("invoiceRowGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowGuid").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        ModelBaseWithRequiredGuid.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ProjectTravelExpenseProjectSubModel.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `salesAccount`
      if (jsonObj.get("salesAccount") != null && !jsonObj.get("salesAccount").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("salesAccount"));
      }
      // validate the optional field `travelExpense`
      if (jsonObj.get("travelExpense") != null && !jsonObj.get("travelExpense").isJsonNull()) {
        TravelExpenseSubModel.validateJsonElement(jsonObj.get("travelExpense"));
      }
      // validate the optional field `travelReimbursement`
      if (jsonObj.get("travelReimbursement") != null && !jsonObj.get("travelReimbursement").isJsonNull()) {
        TravelReimbursementSubModel.validateJsonElement(jsonObj.get("travelReimbursement"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitCostExcludingPurchaseVat`
      if (jsonObj.get("unitCostExcludingPurchaseVat") != null && !jsonObj.get("unitCostExcludingPurchaseVat").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitCostExcludingPurchaseVat"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitPrice"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserRequiredSubModel.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectTravelExpenseOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectTravelExpenseOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectTravelExpenseOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectTravelExpenseOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectTravelExpenseOutputModel>() {
           @Override
           public void write(JsonWriter out, ProjectTravelExpenseOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectTravelExpenseOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectTravelExpenseOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectTravelExpenseOutputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectTravelExpenseOutputModel
   */
  public static ProjectTravelExpenseOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectTravelExpenseOutputModel.class);
  }

  /**
   * Convert an instance of ProjectTravelExpenseOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

