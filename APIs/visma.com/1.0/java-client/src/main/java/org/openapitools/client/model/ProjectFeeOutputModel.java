/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectCostCenterSubModel;
import org.openapitools.client.model.ProjectFeeBillingScheduleType;
import org.openapitools.client.model.ProjectFeeCustomerSubModel;
import org.openapitools.client.model.ProjectFeeInvoiceSubModel;
import org.openapitools.client.model.ProjectFeePhaseSubModel;
import org.openapitools.client.model.ProjectFeeProductSubModel;
import org.openapitools.client.model.ProjectFeeProjectSubModel;
import org.openapitools.client.model.ProjectSalesAccountSubModel;
import org.openapitools.client.model.UserSubModel;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectFeeOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectFeeOutputModel {
  public static final String SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE = "billingDependencyPhase";
  @SerializedName(SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE)
  private ProjectFeePhaseSubModel billingDependencyPhase;

  public static final String SERIALIZED_NAME_BILLING_SCHEDULE = "billingSchedule";
  @SerializedName(SERIALIZED_NAME_BILLING_SCHEDULE)
  private ProjectFeeBillingScheduleType billingSchedule;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private ProjectCostCenterSubModel costCenter;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private ProjectFeeCustomerSubModel customer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_PERIOD_START_DATE = "displayPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PERIOD_START_DATE)
  private LocalDate displayPeriodStartDate;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private LocalDate eventDate;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_HAS_VOLUME_PRICING = "hasVolumePricing";
  @SerializedName(SERIALIZED_NAME_HAS_VOLUME_PRICING)
  private Boolean hasVolumePricing;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private ProjectFeeInvoiceSubModel invoice;

  public static final String SERIALIZED_NAME_INVOICE_QUANTITY = "invoiceQuantity";
  @SerializedName(SERIALIZED_NAME_INVOICE_QUANTITY)
  private Double invoiceQuantity;

  public static final String SERIALIZED_NAME_INVOICE_ROW_COMMENT = "invoiceRowComment";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_COMMENT)
  private String invoiceRowComment;

  public static final String SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION = "invoiceRowDescription";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION)
  private String invoiceRowDescription;

  public static final String SERIALIZED_NAME_INVOICE_ROW_GUID = "invoiceRowGuid";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_GUID)
  private String invoiceRowGuid;

  public static final String SERIALIZED_NAME_IS_BILLABLE = "isBillable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable;

  public static final String SERIALIZED_NAME_IS_RECURRENCE_RULE = "isRecurrenceRule";
  @SerializedName(SERIALIZED_NAME_IS_RECURRENCE_RULE)
  private Boolean isRecurrenceRule;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private ModelWithName phase;

  public static final String SERIALIZED_NAME_PLANNED_BILLING_DATE = "plannedBillingDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_BILLING_DATE)
  private LocalDate plannedBillingDate;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProjectFeeProductSubModel product;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductType productType;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectFeeProjectSubModel project;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_RECURRENCE_RULE_GUID = "recurrenceRuleGuid";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_RULE_GUID)
  private String recurrenceRuleGuid;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT = "salesAccount";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT)
  private ProjectSalesAccountSubModel salesAccount;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyOutputModel unitCost;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyOutputModel unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserSubModel user;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProjectFeeOutputModel() {
  }

  public ProjectFeeOutputModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public ProjectFeeOutputModel billingDependencyPhase(ProjectFeePhaseSubModel billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
    return this;
  }

  /**
   * Get billingDependencyPhase
   * @return billingDependencyPhase
   */
  @javax.annotation.Nullable
  public ProjectFeePhaseSubModel getBillingDependencyPhase() {
    return billingDependencyPhase;
  }

  public void setBillingDependencyPhase(ProjectFeePhaseSubModel billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
  }


  public ProjectFeeOutputModel billingSchedule(ProjectFeeBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
    return this;
  }

  /**
   * Get billingSchedule
   * @return billingSchedule
   */
  @javax.annotation.Nullable
  public ProjectFeeBillingScheduleType getBillingSchedule() {
    return billingSchedule;
  }

  public void setBillingSchedule(ProjectFeeBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
  }


  public ProjectFeeOutputModel costCenter(ProjectCostCenterSubModel costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Get costCenter
   * @return costCenter
   */
  @javax.annotation.Nullable
  public ProjectCostCenterSubModel getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(ProjectCostCenterSubModel costCenter) {
    this.costCenter = costCenter;
  }


  public ProjectFeeOutputModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public ProjectFeeOutputModel customer(ProjectFeeCustomerSubModel customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public ProjectFeeCustomerSubModel getCustomer() {
    return customer;
  }

  public void setCustomer(ProjectFeeCustomerSubModel customer) {
    this.customer = customer;
  }


  public ProjectFeeOutputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectFeeOutputModel displayPeriodStartDate(LocalDate displayPeriodStartDate) {
    this.displayPeriodStartDate = displayPeriodStartDate;
    return this;
  }

  /**
   * Get displayPeriodStartDate
   * @return displayPeriodStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getDisplayPeriodStartDate() {
    return displayPeriodStartDate;
  }

  public void setDisplayPeriodStartDate(LocalDate displayPeriodStartDate) {
    this.displayPeriodStartDate = displayPeriodStartDate;
  }


  public ProjectFeeOutputModel eventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventDate() {
    return eventDate;
  }

  public void setEventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public ProjectFeeOutputModel hasVolumePricing(Boolean hasVolumePricing) {
    this.hasVolumePricing = hasVolumePricing;
    return this;
  }

  /**
   * Get hasVolumePricing
   * @return hasVolumePricing
   */
  @javax.annotation.Nullable
  public Boolean getHasVolumePricing() {
    return hasVolumePricing;
  }

  public void setHasVolumePricing(Boolean hasVolumePricing) {
    this.hasVolumePricing = hasVolumePricing;
  }


  public ProjectFeeOutputModel invoice(ProjectFeeInvoiceSubModel invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public ProjectFeeInvoiceSubModel getInvoice() {
    return invoice;
  }

  public void setInvoice(ProjectFeeInvoiceSubModel invoice) {
    this.invoice = invoice;
  }


  public ProjectFeeOutputModel invoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
    return this;
  }

  /**
   * Get invoiceQuantity
   * @return invoiceQuantity
   */
  @javax.annotation.Nullable
  public Double getInvoiceQuantity() {
    return invoiceQuantity;
  }

  public void setInvoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
  }


  public ProjectFeeOutputModel invoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
    return this;
  }

  /**
   * Get invoiceRowComment
   * @return invoiceRowComment
   */
  @javax.annotation.Nullable
  public String getInvoiceRowComment() {
    return invoiceRowComment;
  }

  public void setInvoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
  }


  public ProjectFeeOutputModel invoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
    return this;
  }

  /**
   * Get invoiceRowDescription
   * @return invoiceRowDescription
   */
  @javax.annotation.Nullable
  public String getInvoiceRowDescription() {
    return invoiceRowDescription;
  }

  public void setInvoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
  }


  public ProjectFeeOutputModel invoiceRowGuid(String invoiceRowGuid) {
    this.invoiceRowGuid = invoiceRowGuid;
    return this;
  }

  /**
   * Get invoiceRowGuid
   * @return invoiceRowGuid
   */
  @javax.annotation.Nullable
  public String getInvoiceRowGuid() {
    return invoiceRowGuid;
  }

  public void setInvoiceRowGuid(String invoiceRowGuid) {
    this.invoiceRowGuid = invoiceRowGuid;
  }


  public ProjectFeeOutputModel isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * Get isBillable
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public ProjectFeeOutputModel isRecurrenceRule(Boolean isRecurrenceRule) {
    this.isRecurrenceRule = isRecurrenceRule;
    return this;
  }

  /**
   * Get isRecurrenceRule
   * @return isRecurrenceRule
   */
  @javax.annotation.Nullable
  public Boolean getIsRecurrenceRule() {
    return isRecurrenceRule;
  }

  public void setIsRecurrenceRule(Boolean isRecurrenceRule) {
    this.isRecurrenceRule = isRecurrenceRule;
  }


  public ProjectFeeOutputModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ProjectFeeOutputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProjectFeeOutputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectFeeOutputModel phase(ModelWithName phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public ModelWithName getPhase() {
    return phase;
  }

  public void setPhase(ModelWithName phase) {
    this.phase = phase;
  }


  public ProjectFeeOutputModel plannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
    return this;
  }

  /**
   * Get plannedBillingDate
   * @return plannedBillingDate
   */
  @javax.annotation.Nullable
  public LocalDate getPlannedBillingDate() {
    return plannedBillingDate;
  }

  public void setPlannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
  }


  public ProjectFeeOutputModel product(ProjectFeeProductSubModel product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public ProjectFeeProductSubModel getProduct() {
    return product;
  }

  public void setProduct(ProjectFeeProductSubModel product) {
    this.product = product;
  }


  public ProjectFeeOutputModel productType(ProductType productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Get productType
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductType getProductType() {
    return productType;
  }

  public void setProductType(ProductType productType) {
    this.productType = productType;
  }


  public ProjectFeeOutputModel project(ProjectFeeProjectSubModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ProjectFeeProjectSubModel getProject() {
    return project;
  }

  public void setProject(ProjectFeeProjectSubModel project) {
    this.project = project;
  }


  public ProjectFeeOutputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProjectFeeOutputModel recurrenceRuleGuid(String recurrenceRuleGuid) {
    this.recurrenceRuleGuid = recurrenceRuleGuid;
    return this;
  }

  /**
   * Get recurrenceRuleGuid
   * @return recurrenceRuleGuid
   */
  @javax.annotation.Nullable
  public String getRecurrenceRuleGuid() {
    return recurrenceRuleGuid;
  }

  public void setRecurrenceRuleGuid(String recurrenceRuleGuid) {
    this.recurrenceRuleGuid = recurrenceRuleGuid;
  }


  public ProjectFeeOutputModel salesAccount(ProjectSalesAccountSubModel salesAccount) {
    this.salesAccount = salesAccount;
    return this;
  }

  /**
   * Get salesAccount
   * @return salesAccount
   */
  @javax.annotation.Nullable
  public ProjectSalesAccountSubModel getSalesAccount() {
    return salesAccount;
  }

  public void setSalesAccount(ProjectSalesAccountSubModel salesAccount) {
    this.salesAccount = salesAccount;
  }


  public ProjectFeeOutputModel unitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyOutputModel unitCost) {
    this.unitCost = unitCost;
  }


  public ProjectFeeOutputModel unitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyOutputModel unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProjectFeeOutputModel user(UserSubModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserSubModel getUser() {
    return user;
  }

  public void setUser(UserSubModel user) {
    this.user = user;
  }


  public ProjectFeeOutputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFeeOutputModel projectFeeOutputModel = (ProjectFeeOutputModel) o;
    return Objects.equals(this.billingDependencyPhase, projectFeeOutputModel.billingDependencyPhase) &&
        Objects.equals(this.billingSchedule, projectFeeOutputModel.billingSchedule) &&
        Objects.equals(this.costCenter, projectFeeOutputModel.costCenter) &&
        Objects.equals(this.createdBy, projectFeeOutputModel.createdBy) &&
        Objects.equals(this.createdDateTime, projectFeeOutputModel.createdDateTime) &&
        Objects.equals(this.customer, projectFeeOutputModel.customer) &&
        Objects.equals(this.description, projectFeeOutputModel.description) &&
        Objects.equals(this.displayPeriodStartDate, projectFeeOutputModel.displayPeriodStartDate) &&
        Objects.equals(this.eventDate, projectFeeOutputModel.eventDate) &&
        Objects.equals(this.guid, projectFeeOutputModel.guid) &&
        Objects.equals(this.hasVolumePricing, projectFeeOutputModel.hasVolumePricing) &&
        Objects.equals(this.invoice, projectFeeOutputModel.invoice) &&
        Objects.equals(this.invoiceQuantity, projectFeeOutputModel.invoiceQuantity) &&
        Objects.equals(this.invoiceRowComment, projectFeeOutputModel.invoiceRowComment) &&
        Objects.equals(this.invoiceRowDescription, projectFeeOutputModel.invoiceRowDescription) &&
        Objects.equals(this.invoiceRowGuid, projectFeeOutputModel.invoiceRowGuid) &&
        Objects.equals(this.isBillable, projectFeeOutputModel.isBillable) &&
        Objects.equals(this.isRecurrenceRule, projectFeeOutputModel.isRecurrenceRule) &&
        Objects.equals(this.lastUpdatedBy, projectFeeOutputModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, projectFeeOutputModel.lastUpdatedDateTime) &&
        Objects.equals(this.measurementUnit, projectFeeOutputModel.measurementUnit) &&
        Objects.equals(this.name, projectFeeOutputModel.name) &&
        Objects.equals(this.phase, projectFeeOutputModel.phase) &&
        Objects.equals(this.plannedBillingDate, projectFeeOutputModel.plannedBillingDate) &&
        Objects.equals(this.product, projectFeeOutputModel.product) &&
        Objects.equals(this.productType, projectFeeOutputModel.productType) &&
        Objects.equals(this.project, projectFeeOutputModel.project) &&
        Objects.equals(this.quantity, projectFeeOutputModel.quantity) &&
        Objects.equals(this.recurrenceRuleGuid, projectFeeOutputModel.recurrenceRuleGuid) &&
        Objects.equals(this.salesAccount, projectFeeOutputModel.salesAccount) &&
        Objects.equals(this.unitCost, projectFeeOutputModel.unitCost) &&
        Objects.equals(this.unitPrice, projectFeeOutputModel.unitPrice) &&
        Objects.equals(this.user, projectFeeOutputModel.user) &&
        Objects.equals(this.vatRate, projectFeeOutputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDependencyPhase, billingSchedule, costCenter, createdBy, createdDateTime, customer, description, displayPeriodStartDate, eventDate, guid, hasVolumePricing, invoice, invoiceQuantity, invoiceRowComment, invoiceRowDescription, invoiceRowGuid, isBillable, isRecurrenceRule, lastUpdatedBy, lastUpdatedDateTime, measurementUnit, name, phase, plannedBillingDate, product, productType, project, quantity, recurrenceRuleGuid, salesAccount, unitCost, unitPrice, user, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFeeOutputModel {\n");
    sb.append("    billingDependencyPhase: ").append(toIndentedString(billingDependencyPhase)).append("\n");
    sb.append("    billingSchedule: ").append(toIndentedString(billingSchedule)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayPeriodStartDate: ").append(toIndentedString(displayPeriodStartDate)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hasVolumePricing: ").append(toIndentedString(hasVolumePricing)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceQuantity: ").append(toIndentedString(invoiceQuantity)).append("\n");
    sb.append("    invoiceRowComment: ").append(toIndentedString(invoiceRowComment)).append("\n");
    sb.append("    invoiceRowDescription: ").append(toIndentedString(invoiceRowDescription)).append("\n");
    sb.append("    invoiceRowGuid: ").append(toIndentedString(invoiceRowGuid)).append("\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    isRecurrenceRule: ").append(toIndentedString(isRecurrenceRule)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    plannedBillingDate: ").append(toIndentedString(plannedBillingDate)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    recurrenceRuleGuid: ").append(toIndentedString(recurrenceRuleGuid)).append("\n");
    sb.append("    salesAccount: ").append(toIndentedString(salesAccount)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingDependencyPhase");
    openapiFields.add("billingSchedule");
    openapiFields.add("costCenter");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("customer");
    openapiFields.add("description");
    openapiFields.add("displayPeriodStartDate");
    openapiFields.add("eventDate");
    openapiFields.add("guid");
    openapiFields.add("hasVolumePricing");
    openapiFields.add("invoice");
    openapiFields.add("invoiceQuantity");
    openapiFields.add("invoiceRowComment");
    openapiFields.add("invoiceRowDescription");
    openapiFields.add("invoiceRowGuid");
    openapiFields.add("isBillable");
    openapiFields.add("isRecurrenceRule");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("plannedBillingDate");
    openapiFields.add("product");
    openapiFields.add("productType");
    openapiFields.add("project");
    openapiFields.add("quantity");
    openapiFields.add("recurrenceRuleGuid");
    openapiFields.add("salesAccount");
    openapiFields.add("unitCost");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectFeeOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectFeeOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectFeeOutputModel is not found in the empty JSON string", ProjectFeeOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectFeeOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectFeeOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingDependencyPhase`
      if (jsonObj.get("billingDependencyPhase") != null && !jsonObj.get("billingDependencyPhase").isJsonNull()) {
        ProjectFeePhaseSubModel.validateJsonElement(jsonObj.get("billingDependencyPhase"));
      }
      // validate the optional field `billingSchedule`
      if (jsonObj.get("billingSchedule") != null && !jsonObj.get("billingSchedule").isJsonNull()) {
        ProjectFeeBillingScheduleType.validateJsonElement(jsonObj.get("billingSchedule"));
      }
      // validate the optional field `costCenter`
      if (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) {
        ProjectCostCenterSubModel.validateJsonElement(jsonObj.get("costCenter"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        ProjectFeeCustomerSubModel.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        ProjectFeeInvoiceSubModel.validateJsonElement(jsonObj.get("invoice"));
      }
      if ((jsonObj.get("invoiceRowComment") != null && !jsonObj.get("invoiceRowComment").isJsonNull()) && !jsonObj.get("invoiceRowComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowComment").toString()));
      }
      if ((jsonObj.get("invoiceRowDescription") != null && !jsonObj.get("invoiceRowDescription").isJsonNull()) && !jsonObj.get("invoiceRowDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowDescription").toString()));
      }
      if ((jsonObj.get("invoiceRowGuid") != null && !jsonObj.get("invoiceRowGuid").isJsonNull()) && !jsonObj.get("invoiceRowGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowGuid").toString()));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ProjectFeeProductSubModel.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductType.validateJsonElement(jsonObj.get("productType"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ProjectFeeProjectSubModel.validateJsonElement(jsonObj.get("project"));
      }
      if ((jsonObj.get("recurrenceRuleGuid") != null && !jsonObj.get("recurrenceRuleGuid").isJsonNull()) && !jsonObj.get("recurrenceRuleGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrenceRuleGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrenceRuleGuid").toString()));
      }
      // validate the optional field `salesAccount`
      if (jsonObj.get("salesAccount") != null && !jsonObj.get("salesAccount").isJsonNull()) {
        ProjectSalesAccountSubModel.validateJsonElement(jsonObj.get("salesAccount"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("unitPrice"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserSubModel.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectFeeOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectFeeOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectFeeOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectFeeOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectFeeOutputModel>() {
           @Override
           public void write(JsonWriter out, ProjectFeeOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectFeeOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectFeeOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectFeeOutputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectFeeOutputModel
   */
  public static ProjectFeeOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectFeeOutputModel.class);
  }

  /**
   * Convert an instance of ProjectFeeOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

