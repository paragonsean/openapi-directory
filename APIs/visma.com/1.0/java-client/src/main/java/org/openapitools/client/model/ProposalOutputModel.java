/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CustomerContactPersonSubModel;
import org.openapitools.client.model.FormattingCultureSubModel;
import org.openapitools.client.model.FreeTextModel2;
import org.openapitools.client.model.ModelWithName;
import org.openapitools.client.model.MoneyOutputModel;
import org.openapitools.client.model.ProposalBillingAddressSubModel;
import org.openapitools.client.model.ProposalCustomerSubModel;
import org.openapitools.client.model.ProposalLanguageSubModel;
import org.openapitools.client.model.ProposalProjectSubModel;
import org.openapitools.client.model.UserWithFirstNameLastNameAndPhotoFileModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProposalOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProposalOutputModel {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private ProposalBillingAddressSubModel billingAddress;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private FormattingCultureSubModel culture;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private ProposalCustomerSubModel customer;

  public static final String SERIALIZED_NAME_CUSTOMER_CONTACT_PERSON = "customerContactPerson";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CONTACT_PERSON)
  private CustomerContactPersonSubModel customerContactPerson;

  public static final String SERIALIZED_NAME_FREE_TEXT1 = "freeText1";
  @SerializedName(SERIALIZED_NAME_FREE_TEXT1)
  private FreeTextModel2 freeText1;

  public static final String SERIALIZED_NAME_FREE_TEXT2 = "freeText2";
  @SerializedName(SERIALIZED_NAME_FREE_TEXT2)
  private FreeTextModel2 freeText2;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private ProposalLanguageSubModel language;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "lastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_PRICELIST = "pricelist";
  @SerializedName(SERIALIZED_NAME_PRICELIST)
  private ModelWithName pricelist;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProposalProjectSubModel project;

  public static final String SERIALIZED_NAME_PROPOSAL_DATE = "proposalDate";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_DATE)
  private LocalDate proposalDate;

  public static final String SERIALIZED_NAME_PROPOSAL_STATUS = "proposalStatus";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_STATUS)
  private ModelWithName proposalStatus;

  public static final String SERIALIZED_NAME_TOTAL_EXCLUDING_VAT = "totalExcludingVat";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXCLUDING_VAT)
  private MoneyOutputModel totalExcludingVat;

  public static final String SERIALIZED_NAME_TOTAL_INCLUDING_VAT = "totalIncludingVat";
  @SerializedName(SERIALIZED_NAME_TOTAL_INCLUDING_VAT)
  private MoneyOutputModel totalIncludingVat;

  public ProposalOutputModel() {
  }

  public ProposalOutputModel(
     OffsetDateTime createdDateTime, 
     String guid, 
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.guid = guid;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public ProposalOutputModel billingAddress(ProposalBillingAddressSubModel billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public ProposalBillingAddressSubModel getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(ProposalBillingAddressSubModel billingAddress) {
    this.billingAddress = billingAddress;
  }


  public ProposalOutputModel createdBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserWithFirstNameLastNameAndPhotoFileModel createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * Get createdDateTime
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  public ProposalOutputModel culture(FormattingCultureSubModel culture) {
    this.culture = culture;
    return this;
  }

  /**
   * Get culture
   * @return culture
   */
  @javax.annotation.Nullable
  public FormattingCultureSubModel getCulture() {
    return culture;
  }

  public void setCulture(FormattingCultureSubModel culture) {
    this.culture = culture;
  }


  public ProposalOutputModel customer(ProposalCustomerSubModel customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public ProposalCustomerSubModel getCustomer() {
    return customer;
  }

  public void setCustomer(ProposalCustomerSubModel customer) {
    this.customer = customer;
  }


  public ProposalOutputModel customerContactPerson(CustomerContactPersonSubModel customerContactPerson) {
    this.customerContactPerson = customerContactPerson;
    return this;
  }

  /**
   * Get customerContactPerson
   * @return customerContactPerson
   */
  @javax.annotation.Nullable
  public CustomerContactPersonSubModel getCustomerContactPerson() {
    return customerContactPerson;
  }

  public void setCustomerContactPerson(CustomerContactPersonSubModel customerContactPerson) {
    this.customerContactPerson = customerContactPerson;
  }


  public ProposalOutputModel freeText1(FreeTextModel2 freeText1) {
    this.freeText1 = freeText1;
    return this;
  }

  /**
   * Get freeText1
   * @return freeText1
   */
  @javax.annotation.Nullable
  public FreeTextModel2 getFreeText1() {
    return freeText1;
  }

  public void setFreeText1(FreeTextModel2 freeText1) {
    this.freeText1 = freeText1;
  }


  public ProposalOutputModel freeText2(FreeTextModel2 freeText2) {
    this.freeText2 = freeText2;
    return this;
  }

  /**
   * Get freeText2
   * @return freeText2
   */
  @javax.annotation.Nullable
  public FreeTextModel2 getFreeText2() {
    return freeText2;
  }

  public void setFreeText2(FreeTextModel2 freeText2) {
    this.freeText2 = freeText2;
  }


  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  public ProposalOutputModel language(ProposalLanguageSubModel language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public ProposalLanguageSubModel getLanguage() {
    return language;
  }

  public void setLanguage(ProposalLanguageSubModel language) {
    this.language = language;
  }


  public ProposalOutputModel lastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public UserWithFirstNameLastNameAndPhotoFileModel getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(UserWithFirstNameLastNameAndPhotoFileModel lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ProposalOutputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProposalOutputModel number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public ProposalOutputModel pricelist(ModelWithName pricelist) {
    this.pricelist = pricelist;
    return this;
  }

  /**
   * Get pricelist
   * @return pricelist
   */
  @javax.annotation.Nullable
  public ModelWithName getPricelist() {
    return pricelist;
  }

  public void setPricelist(ModelWithName pricelist) {
    this.pricelist = pricelist;
  }


  public ProposalOutputModel project(ProposalProjectSubModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ProposalProjectSubModel getProject() {
    return project;
  }

  public void setProject(ProposalProjectSubModel project) {
    this.project = project;
  }


  public ProposalOutputModel proposalDate(LocalDate proposalDate) {
    this.proposalDate = proposalDate;
    return this;
  }

  /**
   * Get proposalDate
   * @return proposalDate
   */
  @javax.annotation.Nullable
  public LocalDate getProposalDate() {
    return proposalDate;
  }

  public void setProposalDate(LocalDate proposalDate) {
    this.proposalDate = proposalDate;
  }


  public ProposalOutputModel proposalStatus(ModelWithName proposalStatus) {
    this.proposalStatus = proposalStatus;
    return this;
  }

  /**
   * Get proposalStatus
   * @return proposalStatus
   */
  @javax.annotation.Nullable
  public ModelWithName getProposalStatus() {
    return proposalStatus;
  }

  public void setProposalStatus(ModelWithName proposalStatus) {
    this.proposalStatus = proposalStatus;
  }


  public ProposalOutputModel totalExcludingVat(MoneyOutputModel totalExcludingVat) {
    this.totalExcludingVat = totalExcludingVat;
    return this;
  }

  /**
   * Get totalExcludingVat
   * @return totalExcludingVat
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getTotalExcludingVat() {
    return totalExcludingVat;
  }

  public void setTotalExcludingVat(MoneyOutputModel totalExcludingVat) {
    this.totalExcludingVat = totalExcludingVat;
  }


  public ProposalOutputModel totalIncludingVat(MoneyOutputModel totalIncludingVat) {
    this.totalIncludingVat = totalIncludingVat;
    return this;
  }

  /**
   * Get totalIncludingVat
   * @return totalIncludingVat
   */
  @javax.annotation.Nullable
  public MoneyOutputModel getTotalIncludingVat() {
    return totalIncludingVat;
  }

  public void setTotalIncludingVat(MoneyOutputModel totalIncludingVat) {
    this.totalIncludingVat = totalIncludingVat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProposalOutputModel proposalOutputModel = (ProposalOutputModel) o;
    return Objects.equals(this.billingAddress, proposalOutputModel.billingAddress) &&
        Objects.equals(this.createdBy, proposalOutputModel.createdBy) &&
        Objects.equals(this.createdDateTime, proposalOutputModel.createdDateTime) &&
        Objects.equals(this.culture, proposalOutputModel.culture) &&
        Objects.equals(this.customer, proposalOutputModel.customer) &&
        Objects.equals(this.customerContactPerson, proposalOutputModel.customerContactPerson) &&
        Objects.equals(this.freeText1, proposalOutputModel.freeText1) &&
        Objects.equals(this.freeText2, proposalOutputModel.freeText2) &&
        Objects.equals(this.guid, proposalOutputModel.guid) &&
        Objects.equals(this.language, proposalOutputModel.language) &&
        Objects.equals(this.lastUpdatedBy, proposalOutputModel.lastUpdatedBy) &&
        Objects.equals(this.lastUpdatedDateTime, proposalOutputModel.lastUpdatedDateTime) &&
        Objects.equals(this.name, proposalOutputModel.name) &&
        Objects.equals(this.number, proposalOutputModel.number) &&
        Objects.equals(this.pricelist, proposalOutputModel.pricelist) &&
        Objects.equals(this.project, proposalOutputModel.project) &&
        Objects.equals(this.proposalDate, proposalOutputModel.proposalDate) &&
        Objects.equals(this.proposalStatus, proposalOutputModel.proposalStatus) &&
        Objects.equals(this.totalExcludingVat, proposalOutputModel.totalExcludingVat) &&
        Objects.equals(this.totalIncludingVat, proposalOutputModel.totalIncludingVat);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, createdBy, createdDateTime, culture, customer, customerContactPerson, freeText1, freeText2, guid, language, lastUpdatedBy, lastUpdatedDateTime, name, number, pricelist, project, proposalDate, proposalStatus, totalExcludingVat, totalIncludingVat);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProposalOutputModel {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customerContactPerson: ").append(toIndentedString(customerContactPerson)).append("\n");
    sb.append("    freeText1: ").append(toIndentedString(freeText1)).append("\n");
    sb.append("    freeText2: ").append(toIndentedString(freeText2)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    pricelist: ").append(toIndentedString(pricelist)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    proposalDate: ").append(toIndentedString(proposalDate)).append("\n");
    sb.append("    proposalStatus: ").append(toIndentedString(proposalStatus)).append("\n");
    sb.append("    totalExcludingVat: ").append(toIndentedString(totalExcludingVat)).append("\n");
    sb.append("    totalIncludingVat: ").append(toIndentedString(totalIncludingVat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAddress");
    openapiFields.add("createdBy");
    openapiFields.add("createdDateTime");
    openapiFields.add("culture");
    openapiFields.add("customer");
    openapiFields.add("customerContactPerson");
    openapiFields.add("freeText1");
    openapiFields.add("freeText2");
    openapiFields.add("guid");
    openapiFields.add("language");
    openapiFields.add("lastUpdatedBy");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("pricelist");
    openapiFields.add("project");
    openapiFields.add("proposalDate");
    openapiFields.add("proposalStatus");
    openapiFields.add("totalExcludingVat");
    openapiFields.add("totalIncludingVat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProposalOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProposalOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProposalOutputModel is not found in the empty JSON string", ProposalOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProposalOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProposalOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        ProposalBillingAddressSubModel.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `culture`
      if (jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) {
        FormattingCultureSubModel.validateJsonElement(jsonObj.get("culture"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        ProposalCustomerSubModel.validateJsonElement(jsonObj.get("customer"));
      }
      // validate the optional field `customerContactPerson`
      if (jsonObj.get("customerContactPerson") != null && !jsonObj.get("customerContactPerson").isJsonNull()) {
        CustomerContactPersonSubModel.validateJsonElement(jsonObj.get("customerContactPerson"));
      }
      // validate the optional field `freeText1`
      if (jsonObj.get("freeText1") != null && !jsonObj.get("freeText1").isJsonNull()) {
        FreeTextModel2.validateJsonElement(jsonObj.get("freeText1"));
      }
      // validate the optional field `freeText2`
      if (jsonObj.get("freeText2") != null && !jsonObj.get("freeText2").isJsonNull()) {
        FreeTextModel2.validateJsonElement(jsonObj.get("freeText2"));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        ProposalLanguageSubModel.validateJsonElement(jsonObj.get("language"));
      }
      // validate the optional field `lastUpdatedBy`
      if (jsonObj.get("lastUpdatedBy") != null && !jsonObj.get("lastUpdatedBy").isJsonNull()) {
        UserWithFirstNameLastNameAndPhotoFileModel.validateJsonElement(jsonObj.get("lastUpdatedBy"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `pricelist`
      if (jsonObj.get("pricelist") != null && !jsonObj.get("pricelist").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("pricelist"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ProposalProjectSubModel.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `proposalStatus`
      if (jsonObj.get("proposalStatus") != null && !jsonObj.get("proposalStatus").isJsonNull()) {
        ModelWithName.validateJsonElement(jsonObj.get("proposalStatus"));
      }
      // validate the optional field `totalExcludingVat`
      if (jsonObj.get("totalExcludingVat") != null && !jsonObj.get("totalExcludingVat").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("totalExcludingVat"));
      }
      // validate the optional field `totalIncludingVat`
      if (jsonObj.get("totalIncludingVat") != null && !jsonObj.get("totalIncludingVat").isJsonNull()) {
        MoneyOutputModel.validateJsonElement(jsonObj.get("totalIncludingVat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProposalOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProposalOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProposalOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProposalOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProposalOutputModel>() {
           @Override
           public void write(JsonWriter out, ProposalOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProposalOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProposalOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProposalOutputModel
   * @throws IOException if the JSON string is invalid with respect to ProposalOutputModel
   */
  public static ProposalOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProposalOutputModel.class);
  }

  /**
   * Convert an instance of ProposalOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

