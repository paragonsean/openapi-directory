/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityCategory;
import org.openapitools.client.model.ActivityTypeModel;
import org.openapitools.client.model.BankAccountOutputModel;
import org.openapitools.client.model.BusinessUnitModel;
import org.openapitools.client.model.CommunicationTypeModel;
import org.openapitools.client.model.ContactRoleModel;
import org.openapitools.client.model.CostAccountModel;
import org.openapitools.client.model.CostCenterModel;
import org.openapitools.client.model.CountryModel;
import org.openapitools.client.model.CountryRegionModel;
import org.openapitools.client.model.CurrencyOutputModel;
import org.openapitools.client.model.CustomPropertyModel;
import org.openapitools.client.model.CustomerCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import org.openapitools.client.model.FormattingCultureModel;
import org.openapitools.client.model.HolidayModel;
import org.openapitools.client.model.IndustryModel;
import org.openapitools.client.model.InvoiceStatusModel;
import org.openapitools.client.model.InvoiceTemplateModel;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import org.openapitools.client.model.KeywordCategory;
import org.openapitools.client.model.KeywordModel;
import org.openapitools.client.model.KpiFormulaCategory;
import org.openapitools.client.model.KpiFormulaModelBase;
import org.openapitools.client.model.LanguageModel;
import org.openapitools.client.model.LeadSourceModel;
import org.openapitools.client.model.MarketSegmentModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OvertimeModel;
import org.openapitools.client.model.OvertimePriceModel;
import org.openapitools.client.model.PermissionProfileModel;
import org.openapitools.client.model.PhaseStatusTypeModel;
import org.openapitools.client.model.PriceListModel;
import org.openapitools.client.model.PriceListOutputModel;
import org.openapitools.client.model.PricelistVersionOutputModel;
import org.openapitools.client.model.ProductCategoryModel;
import org.openapitools.client.model.ProductCountrySettingsModel;
import org.openapitools.client.model.ProductOutputModel;
import org.openapitools.client.model.ProductPriceOutputModel;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectBillingCustomerModel2;
import org.openapitools.client.model.ProjectCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.ProjectStatusTypeModel;
import org.openapitools.client.model.ProjectTaskStatusModel;
import org.openapitools.client.model.ProposalStatusOutputModel;
import org.openapitools.client.model.RoleOutputModel;
import org.openapitools.client.model.SalesAccountModel;
import org.openapitools.client.model.SalesStatusType;
import org.openapitools.client.model.SalesStatusTypeOutputModel;
import org.openapitools.client.model.TimeEntryTypeModel;
import org.openapitools.client.model.TimezoneModel;
import org.openapitools.client.model.TravelExpenseTypeCountrySettingsModel;
import org.openapitools.client.model.TravelExpenseTypeOutputModel;
import org.openapitools.client.model.TravelPriceOutputModel;
import org.openapitools.client.model.TravelReimbursementStatusModel;
import org.openapitools.client.model.UsageModel2;
import org.openapitools.client.model.UserCustomPropertyOutputModel;
import org.openapitools.client.model.UserCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.VatRateOutputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkHourPriceOutputModel;
import org.openapitools.client.model.WorkTypeOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SettingsReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SettingsReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SettingsReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activityTypesGetActivityType
     * @param guid GUID used to get the Activity Type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity Type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesGetActivityTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/activitytypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityTypesGetActivityTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling activityTypesGetActivityType(Async)");
        }

        return activityTypesGetActivityTypeCall(guid, _callback);

    }

    /**
     * Get Activity Type by ID
     * 
     * @param guid GUID used to get the Activity Type. (required)
     * @return ActivityTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity Type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ActivityTypeModel activityTypesGetActivityType(String guid) throws ApiException {
        ApiResponse<ActivityTypeModel> localVarResp = activityTypesGetActivityTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Activity Type by ID
     * 
     * @param guid GUID used to get the Activity Type. (required)
     * @return ApiResponse&lt;ActivityTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity Type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityTypeModel> activityTypesGetActivityTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = activityTypesGetActivityTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ActivityTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Activity Type by ID (asynchronously)
     * 
     * @param guid GUID used to get the Activity Type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity Type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesGetActivityTypeAsync(String guid, final ApiCallback<ActivityTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityTypesGetActivityTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ActivityTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityTypesGetActivityTypes
     * @param active If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get activity types that have been added or changed after this date time (greater or equal). (optional)
     * @param category Optional: Category or multiple categories of activity types to search for. Default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesGetActivityTypesCall(Boolean active, String pageToken, Integer rowCount, OffsetDateTime changedSince, List<ActivityCategory> category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/activitytypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityTypesGetActivityTypesValidateBeforeCall(Boolean active, String pageToken, Integer rowCount, OffsetDateTime changedSince, List<ActivityCategory> category, final ApiCallback _callback) throws ApiException {
        return activityTypesGetActivityTypesCall(active, pageToken, rowCount, changedSince, category, _callback);

    }

    /**
     * Get the Activity Types
     * 
     * @param active If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get activity types that have been added or changed after this date time (greater or equal). (optional)
     * @param category Optional: Category or multiple categories of activity types to search for. Default all. (optional)
     * @return List&lt;ActivityTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ActivityTypeModel> activityTypesGetActivityTypes(Boolean active, String pageToken, Integer rowCount, OffsetDateTime changedSince, List<ActivityCategory> category) throws ApiException {
        ApiResponse<List<ActivityTypeModel>> localVarResp = activityTypesGetActivityTypesWithHttpInfo(active, pageToken, rowCount, changedSince, category);
        return localVarResp.getData();
    }

    /**
     * Get the Activity Types
     * 
     * @param active If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get activity types that have been added or changed after this date time (greater or equal). (optional)
     * @param category Optional: Category or multiple categories of activity types to search for. Default all. (optional)
     * @return ApiResponse&lt;List&lt;ActivityTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActivityTypeModel>> activityTypesGetActivityTypesWithHttpInfo(Boolean active, String pageToken, Integer rowCount, OffsetDateTime changedSince, List<ActivityCategory> category) throws ApiException {
        okhttp3.Call localVarCall = activityTypesGetActivityTypesValidateBeforeCall(active, pageToken, rowCount, changedSince, category, null);
        Type localVarReturnType = new TypeToken<List<ActivityTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Activity Types (asynchronously)
     * 
     * @param active If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get activity types that have been added or changed after this date time (greater or equal). (optional)
     * @param category Optional: Category or multiple categories of activity types to search for. Default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityTypesGetActivityTypesAsync(Boolean active, String pageToken, Integer rowCount, OffsetDateTime changedSince, List<ActivityCategory> category, final ApiCallback<List<ActivityTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityTypesGetActivityTypesValidateBeforeCall(active, pageToken, rowCount, changedSince, category, _callback);
        Type localVarReturnType = new TypeToken<List<ActivityTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankAccountsGetBankAccount
     * @param guid GUID used to get the bank account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankAccountsGetBankAccountCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bankaccounts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankAccountsGetBankAccountValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling bankAccountsGetBankAccount(Async)");
        }

        return bankAccountsGetBankAccountCall(guid, _callback);

    }

    /**
     * Get bank account by ID.
     * 
     * @param guid GUID used to get the bank account. (required)
     * @return BankAccountOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountOutputModel bankAccountsGetBankAccount(String guid) throws ApiException {
        ApiResponse<BankAccountOutputModel> localVarResp = bankAccountsGetBankAccountWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get bank account by ID.
     * 
     * @param guid GUID used to get the bank account. (required)
     * @return ApiResponse&lt;BankAccountOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountOutputModel> bankAccountsGetBankAccountWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = bankAccountsGetBankAccountValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<BankAccountOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get bank account by ID. (asynchronously)
     * 
     * @param guid GUID used to get the bank account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankAccountsGetBankAccountAsync(String guid, final ApiCallback<BankAccountOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankAccountsGetBankAccountValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<BankAccountOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankAccountsGetBankAccounts
     * @param companyGuid Optional: ID of the company. (optional)
     * @param businessUnitGuid Optional: ID of the business unit. (optional)
     * @param active If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from bank account name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;BankName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;BusinessUnitName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankAccountsGetBankAccountsCall(String companyGuid, String businessUnitGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bankaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyGuid", companyGuid));
        }

        if (businessUnitGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("businessUnitGuid", businessUnitGuid));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankAccountsGetBankAccountsValidateBeforeCall(String companyGuid, String businessUnitGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return bankAccountsGetBankAccountsCall(companyGuid, businessUnitGuid, active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all bank accounts for current organization.
     * 
     * @param companyGuid Optional: ID of the company. (optional)
     * @param businessUnitGuid Optional: ID of the business unit. (optional)
     * @param active If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from bank account name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;BankName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;BusinessUnitName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;BankAccountOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<BankAccountOutputModel> bankAccountsGetBankAccounts(String companyGuid, String businessUnitGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<BankAccountOutputModel>> localVarResp = bankAccountsGetBankAccountsWithHttpInfo(companyGuid, businessUnitGuid, active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all bank accounts for current organization.
     * 
     * @param companyGuid Optional: ID of the company. (optional)
     * @param businessUnitGuid Optional: ID of the business unit. (optional)
     * @param active If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from bank account name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;BankName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;BusinessUnitName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;BankAccountOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BankAccountOutputModel>> bankAccountsGetBankAccountsWithHttpInfo(String companyGuid, String businessUnitGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = bankAccountsGetBankAccountsValidateBeforeCall(companyGuid, businessUnitGuid, active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<BankAccountOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all bank accounts for current organization. (asynchronously)
     * 
     * @param companyGuid Optional: ID of the company. (optional)
     * @param businessUnitGuid Optional: ID of the business unit. (optional)
     * @param active If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from bank account name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;BankName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;BusinessUnitName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankAccountsGetBankAccountsAsync(String companyGuid, String businessUnitGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<BankAccountOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankAccountsGetBankAccountsValidateBeforeCall(companyGuid, businessUnitGuid, active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<BankAccountOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessUnitsGetBusinessUnit
     * @param guid GUID used to get the businessUnit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BusinessUnit. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessUnitsGetBusinessUnitCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/businessunits/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessUnitsGetBusinessUnitValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling businessUnitsGetBusinessUnit(Async)");
        }

        return businessUnitsGetBusinessUnitCall(guid, _callback);

    }

    /**
     * Get businessUnit by ID.
     * 
     * @param guid GUID used to get the businessUnit. (required)
     * @return BusinessUnitModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BusinessUnit. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public BusinessUnitModel businessUnitsGetBusinessUnit(String guid) throws ApiException {
        ApiResponse<BusinessUnitModel> localVarResp = businessUnitsGetBusinessUnitWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get businessUnit by ID.
     * 
     * @param guid GUID used to get the businessUnit. (required)
     * @return ApiResponse&lt;BusinessUnitModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BusinessUnit. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessUnitModel> businessUnitsGetBusinessUnitWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = businessUnitsGetBusinessUnitValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<BusinessUnitModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get businessUnit by ID. (asynchronously)
     * 
     * @param guid GUID used to get the businessUnit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BusinessUnit. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessUnitsGetBusinessUnitAsync(String guid, final ApiCallback<BusinessUnitModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessUnitsGetBusinessUnitValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<BusinessUnitModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessUnitsGetBusinessUnits
     * @param active If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits (optional)
     * @param companyGuid Optional: ID of the company to which the business units belong. (optional)
     * @param companyCountryGuid Optional: ID of the country in which the company of business units is located. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from business unit name. (optional, default to )
     * @param changedSince Optional: Get business units that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the business unit. (optional, default to )
     * @param name Optional: Name of the business unit. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the BusinessUnits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessUnitsGetBusinessUnitsCall(Boolean active, String companyGuid, String companyCountryGuid, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, String code, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/businessunits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (companyGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyGuid", companyGuid));
        }

        if (companyCountryGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyCountryGuid", companyCountryGuid));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessUnitsGetBusinessUnitsValidateBeforeCall(Boolean active, String companyGuid, String companyCountryGuid, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, String code, String name, final ApiCallback _callback) throws ApiException {
        return businessUnitsGetBusinessUnitsCall(active, companyGuid, companyCountryGuid, firstRow, rowCount, textToSearch, changedSince, code, name, _callback);

    }

    /**
     * Get all the BusinessUnits
     * 
     * @param active If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits (optional)
     * @param companyGuid Optional: ID of the company to which the business units belong. (optional)
     * @param companyCountryGuid Optional: ID of the country in which the company of business units is located. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from business unit name. (optional, default to )
     * @param changedSince Optional: Get business units that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the business unit. (optional, default to )
     * @param name Optional: Name of the business unit. (optional, default to )
     * @return List&lt;BusinessUnitModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the BusinessUnits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<BusinessUnitModel> businessUnitsGetBusinessUnits(Boolean active, String companyGuid, String companyCountryGuid, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, String code, String name) throws ApiException {
        ApiResponse<List<BusinessUnitModel>> localVarResp = businessUnitsGetBusinessUnitsWithHttpInfo(active, companyGuid, companyCountryGuid, firstRow, rowCount, textToSearch, changedSince, code, name);
        return localVarResp.getData();
    }

    /**
     * Get all the BusinessUnits
     * 
     * @param active If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits (optional)
     * @param companyGuid Optional: ID of the company to which the business units belong. (optional)
     * @param companyCountryGuid Optional: ID of the country in which the company of business units is located. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from business unit name. (optional, default to )
     * @param changedSince Optional: Get business units that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the business unit. (optional, default to )
     * @param name Optional: Name of the business unit. (optional, default to )
     * @return ApiResponse&lt;List&lt;BusinessUnitModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the BusinessUnits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BusinessUnitModel>> businessUnitsGetBusinessUnitsWithHttpInfo(Boolean active, String companyGuid, String companyCountryGuid, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, String code, String name) throws ApiException {
        okhttp3.Call localVarCall = businessUnitsGetBusinessUnitsValidateBeforeCall(active, companyGuid, companyCountryGuid, firstRow, rowCount, textToSearch, changedSince, code, name, null);
        Type localVarReturnType = new TypeToken<List<BusinessUnitModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the BusinessUnits (asynchronously)
     * 
     * @param active If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits (optional)
     * @param companyGuid Optional: ID of the company to which the business units belong. (optional)
     * @param companyCountryGuid Optional: ID of the country in which the company of business units is located. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from business unit name. (optional, default to )
     * @param changedSince Optional: Get business units that have been added or changed after this date time (greater or equal). (optional)
     * @param code Optional: Code of the business unit. (optional, default to )
     * @param name Optional: Name of the business unit. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the BusinessUnits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessUnitsGetBusinessUnitsAsync(Boolean active, String companyGuid, String companyCountryGuid, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, String code, String name, final ApiCallback<List<BusinessUnitModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessUnitsGetBusinessUnitsValidateBeforeCall(active, companyGuid, companyCountryGuid, firstRow, rowCount, textToSearch, changedSince, code, name, _callback);
        Type localVarReturnType = new TypeToken<List<BusinessUnitModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationTypesGetCommunicationType
     * @param guid ID used to get the communication type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesGetCommunicationTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/communicationtypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationTypesGetCommunicationTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling communicationTypesGetCommunicationType(Async)");
        }

        return communicationTypesGetCommunicationTypeCall(guid, _callback);

    }

    /**
     * Get communication type by ID.
     * 
     * @param guid ID used to get the communication type. (required)
     * @return CommunicationTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationTypeModel communicationTypesGetCommunicationType(String guid) throws ApiException {
        ApiResponse<CommunicationTypeModel> localVarResp = communicationTypesGetCommunicationTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get communication type by ID.
     * 
     * @param guid ID used to get the communication type. (required)
     * @return ApiResponse&lt;CommunicationTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationTypeModel> communicationTypesGetCommunicationTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = communicationTypesGetCommunicationTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CommunicationTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get communication type by ID. (asynchronously)
     * 
     * @param guid ID used to get the communication type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesGetCommunicationTypeAsync(String guid, final ApiCallback<CommunicationTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationTypesGetCommunicationTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CommunicationTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationTypesGetCommunicationTypes
     * @param active Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from communication type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesGetCommunicationTypesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/communicationtypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationTypesGetCommunicationTypesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return communicationTypesGetCommunicationTypesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all communication types.
     * 
     * @param active Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from communication type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;CommunicationTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CommunicationTypeModel> communicationTypesGetCommunicationTypes(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<CommunicationTypeModel>> localVarResp = communicationTypesGetCommunicationTypesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all communication types.
     * 
     * @param active Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from communication type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;CommunicationTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommunicationTypeModel>> communicationTypesGetCommunicationTypesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = communicationTypesGetCommunicationTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<CommunicationTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all communication types. (asynchronously)
     * 
     * @param active Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from communication type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationTypesGetCommunicationTypesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<CommunicationTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationTypesGetCommunicationTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<CommunicationTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactRolesGetContactRole
     * @param guid Id used to get the contact role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContactRoleModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesGetContactRoleCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactroles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactRolesGetContactRoleValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling contactRolesGetContactRole(Async)");
        }

        return contactRolesGetContactRoleCall(guid, _callback);

    }

    /**
     * Get contact role by ID.
     * 
     * @param guid Id used to get the contact role. (required)
     * @return ContactRoleModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContactRoleModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ContactRoleModel contactRolesGetContactRole(String guid) throws ApiException {
        ApiResponse<ContactRoleModel> localVarResp = contactRolesGetContactRoleWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get contact role by ID.
     * 
     * @param guid Id used to get the contact role. (required)
     * @return ApiResponse&lt;ContactRoleModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContactRoleModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactRoleModel> contactRolesGetContactRoleWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = contactRolesGetContactRoleValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ContactRoleModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact role by ID. (asynchronously)
     * 
     * @param guid Id used to get the contact role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContactRoleModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesGetContactRoleAsync(String guid, final ApiCallback<ContactRoleModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactRolesGetContactRoleValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ContactRoleModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactRolesGetContactRoles
     * @param active If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact role name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact roles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesGetContactRolesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactroles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactRolesGetContactRolesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        return contactRolesGetContactRolesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, _callback);

    }

    /**
     * Get contact roles.
     * 
     * @param active If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact role name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return List&lt;ContactRoleModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact roles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactRoleModel> contactRolesGetContactRoles(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        ApiResponse<List<ContactRoleModel>> localVarResp = contactRolesGetContactRolesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount);
        return localVarResp.getData();
    }

    /**
     * Get contact roles.
     * 
     * @param active If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact role name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return ApiResponse&lt;List&lt;ContactRoleModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact roles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactRoleModel>> contactRolesGetContactRolesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        okhttp3.Call localVarCall = contactRolesGetContactRolesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, null);
        Type localVarReturnType = new TypeToken<List<ContactRoleModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact roles. (asynchronously)
     * 
     * @param active If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact role name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact roles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactRolesGetContactRolesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback<List<ContactRoleModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactRolesGetContactRolesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, _callback);
        Type localVarReturnType = new TypeToken<List<ContactRoleModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costAccountsGetCostAccount
     * @param guid Cost account&#39;s guid. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsGetCostAccountCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/costaccounts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costAccountsGetCostAccountValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling costAccountsGetCostAccount(Async)");
        }

        return costAccountsGetCostAccountCall(guid, _callback);

    }

    /**
     * Get cost account by Guid.
     * 
     * @param guid Cost account&#39;s guid. (required)
     * @return CostAccountModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CostAccountModel costAccountsGetCostAccount(String guid) throws ApiException {
        ApiResponse<CostAccountModel> localVarResp = costAccountsGetCostAccountWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get cost account by Guid.
     * 
     * @param guid Cost account&#39;s guid. (required)
     * @return ApiResponse&lt;CostAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CostAccountModel> costAccountsGetCostAccountWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = costAccountsGetCostAccountValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CostAccountModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cost account by Guid. (asynchronously)
     * 
     * @param guid Cost account&#39;s guid. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsGetCostAccountAsync(String guid, final ApiCallback<CostAccountModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = costAccountsGetCostAccountValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CostAccountModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costAccountsGetCostAccounts
     * @param active If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsGetCostAccountsCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/costaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costAccountsGetCostAccountsValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return costAccountsGetCostAccountsCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get cost accounts.
     * 
     * @param active If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;CostAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CostAccountModel> costAccountsGetCostAccounts(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<CostAccountModel>> localVarResp = costAccountsGetCostAccountsWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get cost accounts.
     * 
     * @param active If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;CostAccountModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CostAccountModel>> costAccountsGetCostAccountsWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = costAccountsGetCostAccountsValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<CostAccountModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cost accounts. (asynchronously)
     * 
     * @param active If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costAccountsGetCostAccountsAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<CostAccountModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = costAccountsGetCostAccountsValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<CostAccountModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costCentersGetCostCenter
     * @param guid Id used to get the cost center. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostCenterModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersGetCostCenterCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/costcenters/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costCentersGetCostCenterValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling costCentersGetCostCenter(Async)");
        }

        return costCentersGetCostCenterCall(guid, _callback);

    }

    /**
     * Get cost center by ID.
     * 
     * @param guid Id used to get the cost center. (required)
     * @return CostCenterModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostCenterModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CostCenterModel costCentersGetCostCenter(String guid) throws ApiException {
        ApiResponse<CostCenterModel> localVarResp = costCentersGetCostCenterWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get cost center by ID.
     * 
     * @param guid Id used to get the cost center. (required)
     * @return ApiResponse&lt;CostCenterModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostCenterModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CostCenterModel> costCentersGetCostCenterWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = costCentersGetCostCenterValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CostCenterModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cost center by ID. (asynchronously)
     * 
     * @param guid Id used to get the cost center. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CostCenterModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersGetCostCenterAsync(String guid, final ApiCallback<CostCenterModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = costCentersGetCostCenterValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CostCenterModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for costCentersGetCostCenters
     * @param active If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost center name or identifier. (optional, default to )
     * @param changedSince Optional: Get cost centers that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param identifier Optional: Identifier of the cost center. (optional, default to )
     * @param name Optional: Name of the cost center. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost centers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersGetCostCentersCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String identifier, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/costcenters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call costCentersGetCostCentersValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String identifier, String name, final ApiCallback _callback) throws ApiException {
        return costCentersGetCostCentersCall(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, identifier, name, _callback);

    }

    /**
     * Get cost centers.
     * 
     * @param active If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost center name or identifier. (optional, default to )
     * @param changedSince Optional: Get cost centers that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param identifier Optional: Identifier of the cost center. (optional, default to )
     * @param name Optional: Name of the cost center. (optional, default to )
     * @return List&lt;CostCenterModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost centers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CostCenterModel> costCentersGetCostCenters(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String identifier, String name) throws ApiException {
        ApiResponse<List<CostCenterModel>> localVarResp = costCentersGetCostCentersWithHttpInfo(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, identifier, name);
        return localVarResp.getData();
    }

    /**
     * Get cost centers.
     * 
     * @param active If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost center name or identifier. (optional, default to )
     * @param changedSince Optional: Get cost centers that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param identifier Optional: Identifier of the cost center. (optional, default to )
     * @param name Optional: Name of the cost center. (optional, default to )
     * @return ApiResponse&lt;List&lt;CostCenterModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost centers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CostCenterModel>> costCentersGetCostCentersWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String identifier, String name) throws ApiException {
        okhttp3.Call localVarCall = costCentersGetCostCentersValidateBeforeCall(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, identifier, name, null);
        Type localVarReturnType = new TypeToken<List<CostCenterModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cost centers. (asynchronously)
     * 
     * @param active If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost center name or identifier. (optional, default to )
     * @param changedSince Optional: Get cost centers that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param identifier Optional: Identifier of the cost center. (optional, default to )
     * @param name Optional: Name of the cost center. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the cost centers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call costCentersGetCostCentersAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String identifier, String name, final ApiCallback<List<CostCenterModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = costCentersGetCostCentersValidateBeforeCall(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, identifier, name, _callback);
        Type localVarReturnType = new TypeToken<List<CostCenterModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Countries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return countriesGetCountriesCall(_callback);

    }

    /**
     * Get all the Countries.
     * 
     * @return List&lt;CountryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Countries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CountryModel> countriesGetCountries() throws ApiException {
        ApiResponse<List<CountryModel>> localVarResp = countriesGetCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the Countries.
     * 
     * @return ApiResponse&lt;List&lt;CountryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Countries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CountryModel>> countriesGetCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Countries. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Countries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountriesAsync(final ApiCallback<List<CountryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountry
     * @param guid GUID used to get the country. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countries/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountryValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling countriesGetCountry(Async)");
        }

        return countriesGetCountryCall(guid, _callback);

    }

    /**
     * Get country by ID.
     * 
     * @param guid GUID used to get the country. (required)
     * @return CountryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CountryModel countriesGetCountry(String guid) throws ApiException {
        ApiResponse<CountryModel> localVarResp = countriesGetCountryWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get country by ID.
     * 
     * @param guid GUID used to get the country. (required)
     * @return ApiResponse&lt;CountryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountryModel> countriesGetCountryWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountryValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CountryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get country by ID. (asynchronously)
     * 
     * @param guid GUID used to get the country. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryAsync(String guid, final ApiCallback<CountryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountryValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CountryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountryByCode2
     * @param code2 Optional: ISO Alpha-2 code used to get a country. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryByCode2Call(String code2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countries/{code2}"
            .replace("{" + "code2" + "}", localVarApiClient.escapeString(code2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountryByCode2ValidateBeforeCall(String code2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code2' is set
        if (code2 == null) {
            throw new ApiException("Missing the required parameter 'code2' when calling countriesGetCountryByCode2(Async)");
        }

        return countriesGetCountryByCode2Call(code2, _callback);

    }

    /**
     * Get a country by ISO Alpha-2 code
     * 
     * @param code2 Optional: ISO Alpha-2 code used to get a country. (required)
     * @return List&lt;CountryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CountryModel> countriesGetCountryByCode2(String code2) throws ApiException {
        ApiResponse<List<CountryModel>> localVarResp = countriesGetCountryByCode2WithHttpInfo(code2);
        return localVarResp.getData();
    }

    /**
     * Get a country by ISO Alpha-2 code
     * 
     * @param code2 Optional: ISO Alpha-2 code used to get a country. (required)
     * @return ApiResponse&lt;List&lt;CountryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CountryModel>> countriesGetCountryByCode2WithHttpInfo(String code2) throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountryByCode2ValidateBeforeCall(code2, null);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a country by ISO Alpha-2 code (asynchronously)
     * 
     * @param code2 Optional: ISO Alpha-2 code used to get a country. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryByCode2Async(String code2, final ApiCallback<List<CountryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountryByCode2ValidateBeforeCall(code2, _callback);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountryByCode3
     * @param code3 Optional: ISO Alpha-3 code used to get a country. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryByCode3Call(String code3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countries/{code3}"
            .replace("{" + "code3" + "}", localVarApiClient.escapeString(code3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountryByCode3ValidateBeforeCall(String code3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code3' is set
        if (code3 == null) {
            throw new ApiException("Missing the required parameter 'code3' when calling countriesGetCountryByCode3(Async)");
        }

        return countriesGetCountryByCode3Call(code3, _callback);

    }

    /**
     * Get a country by ISO Alpha-3 code
     * 
     * @param code3 Optional: ISO Alpha-3 code used to get a country. (required)
     * @return List&lt;CountryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CountryModel> countriesGetCountryByCode3(String code3) throws ApiException {
        ApiResponse<List<CountryModel>> localVarResp = countriesGetCountryByCode3WithHttpInfo(code3);
        return localVarResp.getData();
    }

    /**
     * Get a country by ISO Alpha-3 code
     * 
     * @param code3 Optional: ISO Alpha-3 code used to get a country. (required)
     * @return ApiResponse&lt;List&lt;CountryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CountryModel>> countriesGetCountryByCode3WithHttpInfo(String code3) throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountryByCode3ValidateBeforeCall(code3, null);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a country by ISO Alpha-3 code (asynchronously)
     * 
     * @param code3 Optional: ISO Alpha-3 code used to get a country. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryByCode3Async(String code3, final ApiCallback<List<CountryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountryByCode3ValidateBeforeCall(code3, _callback);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountryByName
     * @param countryName Optional: English country name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryByNameCall(String countryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countries/{countryName}"
            .replace("{" + "countryName" + "}", localVarApiClient.escapeString(countryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountryByNameValidateBeforeCall(String countryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryName' is set
        if (countryName == null) {
            throw new ApiException("Missing the required parameter 'countryName' when calling countriesGetCountryByName(Async)");
        }

        return countriesGetCountryByNameCall(countryName, _callback);

    }

    /**
     * Get a country by name
     * 
     * @param countryName Optional: English country name. (required)
     * @return List&lt;CountryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CountryModel> countriesGetCountryByName(String countryName) throws ApiException {
        ApiResponse<List<CountryModel>> localVarResp = countriesGetCountryByNameWithHttpInfo(countryName);
        return localVarResp.getData();
    }

    /**
     * Get a country by name
     * 
     * @param countryName Optional: English country name. (required)
     * @return ApiResponse&lt;List&lt;CountryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CountryModel>> countriesGetCountryByNameWithHttpInfo(String countryName) throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountryByNameValidateBeforeCall(countryName, null);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a country by name (asynchronously)
     * 
     * @param countryName Optional: English country name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Country </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryByNameAsync(String countryName, final ApiCallback<List<CountryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountryByNameValidateBeforeCall(countryName, _callback);
        Type localVarReturnType = new TypeToken<List<CountryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountryRegion
     * @param guid GUID used to get the country region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CountryRegion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryRegionCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countryregions/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountryRegionValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling countriesGetCountryRegion(Async)");
        }

        return countriesGetCountryRegionCall(guid, _callback);

    }

    /**
     * Get country region by ID.
     * 
     * @param guid GUID used to get the country region. (required)
     * @return CountryRegionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CountryRegion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CountryRegionModel countriesGetCountryRegion(String guid) throws ApiException {
        ApiResponse<CountryRegionModel> localVarResp = countriesGetCountryRegionWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get country region by ID.
     * 
     * @param guid GUID used to get the country region. (required)
     * @return ApiResponse&lt;CountryRegionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CountryRegion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountryRegionModel> countriesGetCountryRegionWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountryRegionValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CountryRegionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get country region by ID. (asynchronously)
     * 
     * @param guid GUID used to get the country region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CountryRegion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryRegionAsync(String guid, final ApiCallback<CountryRegionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountryRegionValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CountryRegionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetCountryRegions
     * @param countryGuid GUID of the country. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the CountryRegions of the country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryRegionsCall(String countryGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/countries/{countryGuid}/countryregions"
            .replace("{" + "countryGuid" + "}", localVarApiClient.escapeString(countryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetCountryRegionsValidateBeforeCall(String countryGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryGuid' is set
        if (countryGuid == null) {
            throw new ApiException("Missing the required parameter 'countryGuid' when calling countriesGetCountryRegions(Async)");
        }

        return countriesGetCountryRegionsCall(countryGuid, _callback);

    }

    /**
     * Get all the Country regions for a country.
     * 
     * @param countryGuid GUID of the country. (required)
     * @return List&lt;CountryRegionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the CountryRegions of the country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CountryRegionModel> countriesGetCountryRegions(String countryGuid) throws ApiException {
        ApiResponse<List<CountryRegionModel>> localVarResp = countriesGetCountryRegionsWithHttpInfo(countryGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the Country regions for a country.
     * 
     * @param countryGuid GUID of the country. (required)
     * @return ApiResponse&lt;List&lt;CountryRegionModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the CountryRegions of the country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CountryRegionModel>> countriesGetCountryRegionsWithHttpInfo(String countryGuid) throws ApiException {
        okhttp3.Call localVarCall = countriesGetCountryRegionsValidateBeforeCall(countryGuid, null);
        Type localVarReturnType = new TypeToken<List<CountryRegionModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Country regions for a country. (asynchronously)
     * 
     * @param countryGuid GUID of the country. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the CountryRegions of the country. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetCountryRegionsAsync(String countryGuid, final ApiCallback<List<CountryRegionModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetCountryRegionsValidateBeforeCall(countryGuid, _callback);
        Type localVarReturnType = new TypeToken<List<CountryRegionModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currenciesGetCurrencies
     * @param active If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text based search applied to the result. Matches currency name and code. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. Using additional sorting fields \&quot;CreatedDate\&quot; and / or \&quot;LastUpdatedDate\&quot; as keys sort currencies without a timestamp provided when sorting with other date fields. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currenciesGetCurrenciesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currenciesGetCurrenciesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return currenciesGetCurrenciesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all the Currencies
     * 
     * @param active If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text based search applied to the result. Matches currency name and code. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. Using additional sorting fields \&quot;CreatedDate\&quot; and / or \&quot;LastUpdatedDate\&quot; as keys sort currencies without a timestamp provided when sorting with other date fields. (optional)
     * @return List&lt;CurrencyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CurrencyOutputModel> currenciesGetCurrencies(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<CurrencyOutputModel>> localVarResp = currenciesGetCurrenciesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the Currencies
     * 
     * @param active If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text based search applied to the result. Matches currency name and code. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. Using additional sorting fields \&quot;CreatedDate\&quot; and / or \&quot;LastUpdatedDate\&quot; as keys sort currencies without a timestamp provided when sorting with other date fields. (optional)
     * @return ApiResponse&lt;List&lt;CurrencyOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CurrencyOutputModel>> currenciesGetCurrenciesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = currenciesGetCurrenciesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<CurrencyOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Currencies (asynchronously)
     * 
     * @param active If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text based search applied to the result. Matches currency name and code. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. Using additional sorting fields \&quot;CreatedDate\&quot; and / or \&quot;LastUpdatedDate\&quot; as keys sort currencies without a timestamp provided when sorting with other date fields. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currenciesGetCurrenciesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<CurrencyOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = currenciesGetCurrenciesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<CurrencyOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currenciesGetCurrency
     * @param guid GUID used to get the currency. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CurrencyModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currenciesGetCurrencyCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currenciesGetCurrencyValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling currenciesGetCurrency(Async)");
        }

        return currenciesGetCurrencyCall(guid, _callback);

    }

    /**
     * Get currency by ID.
     * 
     * @param guid GUID used to get the currency. (required)
     * @return CurrencyOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CurrencyModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyOutputModel currenciesGetCurrency(String guid) throws ApiException {
        ApiResponse<CurrencyOutputModel> localVarResp = currenciesGetCurrencyWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get currency by ID.
     * 
     * @param guid GUID used to get the currency. (required)
     * @return ApiResponse&lt;CurrencyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CurrencyModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyOutputModel> currenciesGetCurrencyWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = currenciesGetCurrencyValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CurrencyOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency by ID. (asynchronously)
     * 
     * @param guid GUID used to get the currency. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CurrencyModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currenciesGetCurrencyAsync(String guid, final ApiCallback<CurrencyOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = currenciesGetCurrencyValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CurrencyOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertiesGetCustomerCustomProperties
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive customer properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesGetCustomerCustomPropertiesCall(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (isInUse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInUse", isInUse));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertiesGetCustomerCustomPropertiesValidateBeforeCall(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return customerCustomPropertiesGetCustomerCustomPropertiesCall(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the customer custom properties.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive customer properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPropertyModel> customerCustomPropertiesGetCustomerCustomProperties(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<CustomPropertyModel>> localVarResp = customerCustomPropertiesGetCustomerCustomPropertiesWithHttpInfo(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the customer custom properties.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive customer properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;CustomPropertyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPropertyModel>> customerCustomPropertiesGetCustomerCustomPropertiesWithHttpInfo(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertiesGetCustomerCustomPropertiesValidateBeforeCall(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customer custom properties. (asynchronously)
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive customer properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesGetCustomerCustomPropertiesAsync(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<CustomPropertyModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertiesGetCustomerCustomPropertiesValidateBeforeCall(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertiesGetCustomerCustomProperty
     * @param guid Id used to get the customer custom property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesGetCustomerCustomPropertyCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertiesGetCustomerCustomPropertyValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customerCustomPropertiesGetCustomerCustomProperty(Async)");
        }

        return customerCustomPropertiesGetCustomerCustomPropertyCall(guid, _callback);

    }

    /**
     * Get customer custom property by ID.
     * 
     * @param guid Id used to get the customer custom property. (required)
     * @return CustomPropertyModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomPropertyModel customerCustomPropertiesGetCustomerCustomProperty(String guid) throws ApiException {
        ApiResponse<CustomPropertyModel> localVarResp = customerCustomPropertiesGetCustomerCustomPropertyWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get customer custom property by ID.
     * 
     * @param guid Id used to get the customer custom property. (required)
     * @return ApiResponse&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomPropertyModel> customerCustomPropertiesGetCustomerCustomPropertyWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertiesGetCustomerCustomPropertyValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomPropertyModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer custom property by ID. (asynchronously)
     * 
     * @param guid Id used to get the customer custom property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertiesGetCustomerCustomPropertyAsync(String guid, final ApiCallback<CustomPropertyModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertiesGetCustomerCustomPropertyValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomPropertyModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem
     * @param guid Id used to get the customer custom property selection item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties/customercustompropertyselectionitems/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem(Async)");
        }

        return customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemCall(guid, _callback);

    }

    /**
     * Get customer custom property selection item by ID.
     * 
     * @param guid Id used to get the customer custom property selection item. (required)
     * @return CustomerCustomPropertySelectionItemOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerCustomPropertySelectionItemOutputModel customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem(String guid) throws ApiException {
        ApiResponse<CustomerCustomPropertySelectionItemOutputModel> localVarResp = customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get customer custom property selection item by ID.
     * 
     * @param guid Id used to get the customer custom property selection item. (required)
     * @return ApiResponse&lt;CustomerCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerCustomPropertySelectionItemOutputModel> customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomerCustomPropertySelectionItemOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer custom property selection item by ID. (asynchronously)
     * 
     * @param guid Id used to get the customer custom property selection item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemAsync(String guid, final ApiCallback<CustomerCustomPropertySelectionItemOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomerCustomPropertySelectionItemOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems
     * @param customPropertyGuid Custom property id used to get the customer custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsCall(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/customproperties/{customPropertyGuid}/customercustompropertyselectionitems"
            .replace("{" + "customPropertyGuid" + "}", localVarApiClient.escapeString(customPropertyGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsValidateBeforeCall(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customPropertyGuid' is set
        if (customPropertyGuid == null) {
            throw new ApiException("Missing the required parameter 'customPropertyGuid' when calling customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems(Async)");
        }

        return customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, _callback);

    }

    /**
     * Get the customer custom properties.
     * 
     * @param customPropertyGuid Custom property id used to get the customer custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;CustomerCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerCustomPropertySelectionItemOutputModel> customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<CustomerCustomPropertySelectionItemOutputModel>> localVarResp = customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsWithHttpInfo(customPropertyGuid, rowCount, isActive, pageToken, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the customer custom properties.
     * 
     * @param customPropertyGuid Custom property id used to get the customer custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;CustomerCustomPropertySelectionItemOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerCustomPropertySelectionItemOutputModel>> customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsWithHttpInfo(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsValidateBeforeCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, null);
        Type localVarReturnType = new TypeToken<List<CustomerCustomPropertySelectionItemOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customer custom properties. (asynchronously)
     * 
     * @param customPropertyGuid Custom property id used to get the customer custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsAsync(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback<List<CustomerCustomPropertySelectionItemOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsValidateBeforeCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerCustomPropertySelectionItemOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for formattingCulturesGetFormattingCulture
     * @param guid GUID used to get the formatting culture. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formatting culture. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call formattingCulturesGetFormattingCultureCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/formattingcultures/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call formattingCulturesGetFormattingCultureValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling formattingCulturesGetFormattingCulture(Async)");
        }

        return formattingCulturesGetFormattingCultureCall(guid, _callback);

    }

    /**
     * Get formatting culture by ID.
     * 
     * @param guid GUID used to get the formatting culture. (required)
     * @return FormattingCultureModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formatting culture. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public FormattingCultureModel formattingCulturesGetFormattingCulture(String guid) throws ApiException {
        ApiResponse<FormattingCultureModel> localVarResp = formattingCulturesGetFormattingCultureWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get formatting culture by ID.
     * 
     * @param guid GUID used to get the formatting culture. (required)
     * @return ApiResponse&lt;FormattingCultureModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formatting culture. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FormattingCultureModel> formattingCulturesGetFormattingCultureWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = formattingCulturesGetFormattingCultureValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<FormattingCultureModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get formatting culture by ID. (asynchronously)
     * 
     * @param guid GUID used to get the formatting culture. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formatting culture. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call formattingCulturesGetFormattingCultureAsync(String guid, final ApiCallback<FormattingCultureModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = formattingCulturesGetFormattingCultureValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<FormattingCultureModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for formattingCulturesGetFormattings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Formatting Cultures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call formattingCulturesGetFormattingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/formattingcultures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call formattingCulturesGetFormattingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return formattingCulturesGetFormattingsCall(_callback);

    }

    /**
     * Get all the Formatting Cultures
     * 
     * @return List&lt;FormattingCultureModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Formatting Cultures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<FormattingCultureModel> formattingCulturesGetFormattings() throws ApiException {
        ApiResponse<List<FormattingCultureModel>> localVarResp = formattingCulturesGetFormattingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the Formatting Cultures
     * 
     * @return ApiResponse&lt;List&lt;FormattingCultureModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Formatting Cultures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FormattingCultureModel>> formattingCulturesGetFormattingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = formattingCulturesGetFormattingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<FormattingCultureModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Formatting Cultures (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Formatting Cultures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call formattingCulturesGetFormattingsAsync(final ApiCallback<List<FormattingCultureModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = formattingCulturesGetFormattingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<FormattingCultureModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for holidaysGetHolidays
     * @param year Optional: Holidays for this year only. Default: all years. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysGetHolidaysCall(Integer year, String countryGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/holidays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (countryGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryGuid", countryGuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidaysGetHolidaysValidateBeforeCall(Integer year, String countryGuid, final ApiCallback _callback) throws ApiException {
        return holidaysGetHolidaysCall(year, countryGuid, _callback);

    }

    /**
     * Get holidays.
     * 
     * @param year Optional: Holidays for this year only. Default: all years. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @return List&lt;HolidayModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<HolidayModel> holidaysGetHolidays(Integer year, String countryGuid) throws ApiException {
        ApiResponse<List<HolidayModel>> localVarResp = holidaysGetHolidaysWithHttpInfo(year, countryGuid);
        return localVarResp.getData();
    }

    /**
     * Get holidays.
     * 
     * @param year Optional: Holidays for this year only. Default: all years. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @return ApiResponse&lt;List&lt;HolidayModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HolidayModel>> holidaysGetHolidaysWithHttpInfo(Integer year, String countryGuid) throws ApiException {
        okhttp3.Call localVarCall = holidaysGetHolidaysValidateBeforeCall(year, countryGuid, null);
        Type localVarReturnType = new TypeToken<List<HolidayModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get holidays. (asynchronously)
     * 
     * @param year Optional: Holidays for this year only. Default: all years. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysGetHolidaysAsync(Integer year, String countryGuid, final ApiCallback<List<HolidayModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidaysGetHolidaysValidateBeforeCall(year, countryGuid, _callback);
        Type localVarReturnType = new TypeToken<List<HolidayModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for holidaysGetHolidaysByTimePeriod
     * @param startDate Start date for holidays. (optional)
     * @param endDate End date for holidays. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysGetHolidaysByTimePeriodCall(OffsetDateTime startDate, OffsetDateTime endDate, String countryGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/holidaysbytimeperiod";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (countryGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryGuid", countryGuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidaysGetHolidaysByTimePeriodValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String countryGuid, final ApiCallback _callback) throws ApiException {
        return holidaysGetHolidaysByTimePeriodCall(startDate, endDate, countryGuid, _callback);

    }

    /**
     * Get holidays with start and end date.
     * 
     * @param startDate Start date for holidays. (optional)
     * @param endDate End date for holidays. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @return List&lt;HolidayModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<HolidayModel> holidaysGetHolidaysByTimePeriod(OffsetDateTime startDate, OffsetDateTime endDate, String countryGuid) throws ApiException {
        ApiResponse<List<HolidayModel>> localVarResp = holidaysGetHolidaysByTimePeriodWithHttpInfo(startDate, endDate, countryGuid);
        return localVarResp.getData();
    }

    /**
     * Get holidays with start and end date.
     * 
     * @param startDate Start date for holidays. (optional)
     * @param endDate End date for holidays. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @return ApiResponse&lt;List&lt;HolidayModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HolidayModel>> holidaysGetHolidaysByTimePeriodWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String countryGuid) throws ApiException {
        okhttp3.Call localVarCall = holidaysGetHolidaysByTimePeriodValidateBeforeCall(startDate, endDate, countryGuid, null);
        Type localVarReturnType = new TypeToken<List<HolidayModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get holidays with start and end date. (asynchronously)
     * 
     * @param startDate Start date for holidays. (optional)
     * @param endDate End date for holidays. (optional)
     * @param countryGuid Optional: Holidays for this country only. Default local. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of holidays.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysGetHolidaysByTimePeriodAsync(OffsetDateTime startDate, OffsetDateTime endDate, String countryGuid, final ApiCallback<List<HolidayModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidaysGetHolidaysByTimePeriodValidateBeforeCall(startDate, endDate, countryGuid, _callback);
        Type localVarReturnType = new TypeToken<List<HolidayModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for industriesGetIndustries
     * @param active If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from industry name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesGetIndustriesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/industries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call industriesGetIndustriesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        return industriesGetIndustriesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, _callback);

    }

    /**
     * Get all the industries.
     * 
     * @param active If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from industry name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return List&lt;IndustryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<IndustryModel> industriesGetIndustries(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        ApiResponse<List<IndustryModel>> localVarResp = industriesGetIndustriesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the industries.
     * 
     * @param active If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from industry name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return ApiResponse&lt;List&lt;IndustryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndustryModel>> industriesGetIndustriesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        okhttp3.Call localVarCall = industriesGetIndustriesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, null);
        Type localVarReturnType = new TypeToken<List<IndustryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the industries. (asynchronously)
     * 
     * @param active If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from industry name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the industries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesGetIndustriesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback<List<IndustryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = industriesGetIndustriesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, _callback);
        Type localVarReturnType = new TypeToken<List<IndustryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for industriesGetIndustry
     * @param guid GUID used to get the industry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesGetIndustryCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/industries/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call industriesGetIndustryValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling industriesGetIndustry(Async)");
        }

        return industriesGetIndustryCall(guid, _callback);

    }

    /**
     * Get industry by ID.
     * 
     * @param guid GUID used to get the industry. (required)
     * @return IndustryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public IndustryModel industriesGetIndustry(String guid) throws ApiException {
        ApiResponse<IndustryModel> localVarResp = industriesGetIndustryWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get industry by ID.
     * 
     * @param guid GUID used to get the industry. (required)
     * @return ApiResponse&lt;IndustryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndustryModel> industriesGetIndustryWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = industriesGetIndustryValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<IndustryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get industry by ID. (asynchronously)
     * 
     * @param guid GUID used to get the industry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Industry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call industriesGetIndustryAsync(String guid, final ApiCallback<IndustryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = industriesGetIndustryValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<IndustryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceStatusesGetInvoiceStatus
     * @param guid GUID used to get the Invoice status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesGetInvoiceStatusCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicestatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceStatusesGetInvoiceStatusValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoiceStatusesGetInvoiceStatus(Async)");
        }

        return invoiceStatusesGetInvoiceStatusCall(guid, _callback);

    }

    /**
     * Get Invoice status by ID.
     * 
     * @param guid GUID used to get the Invoice status. (required)
     * @return InvoiceStatusModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceStatusModel invoiceStatusesGetInvoiceStatus(String guid) throws ApiException {
        ApiResponse<InvoiceStatusModel> localVarResp = invoiceStatusesGetInvoiceStatusWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Invoice status by ID.
     * 
     * @param guid GUID used to get the Invoice status. (required)
     * @return ApiResponse&lt;InvoiceStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceStatusModel> invoiceStatusesGetInvoiceStatusWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = invoiceStatusesGetInvoiceStatusValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<InvoiceStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Invoice status by ID. (asynchronously)
     * 
     * @param guid GUID used to get the Invoice status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesGetInvoiceStatusAsync(String guid, final ApiCallback<InvoiceStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceStatusesGetInvoiceStatusValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceStatusesGetInvoiceStatuses
     * @param active Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from invoice status name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesGetInvoiceStatusesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicestatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceStatusesGetInvoiceStatusesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return invoiceStatusesGetInvoiceStatusesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get invoice statuses.
     * 
     * @param active Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from invoice status name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;InvoiceStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceStatusModel> invoiceStatusesGetInvoiceStatuses(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<InvoiceStatusModel>> localVarResp = invoiceStatusesGetInvoiceStatusesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get invoice statuses.
     * 
     * @param active Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from invoice status name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceStatusModel>> invoiceStatusesGetInvoiceStatusesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = invoiceStatusesGetInvoiceStatusesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<InvoiceStatusModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice statuses. (asynchronously)
     * 
     * @param active Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from invoice status name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceStatusesGetInvoiceStatusesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<InvoiceStatusModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceStatusesGetInvoiceStatusesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceStatusModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceTemplatesGetInvoiceTemplate
     * @param guid ID of the invoice template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceTemplatesGetInvoiceTemplateCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicetemplates/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceTemplatesGetInvoiceTemplateValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling invoiceTemplatesGetInvoiceTemplate(Async)");
        }

        return invoiceTemplatesGetInvoiceTemplateCall(guid, _callback);

    }

    /**
     * Get invoice template by ID.
     * 
     * @param guid ID of the invoice template. (required)
     * @return InvoiceTemplateModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceTemplateModel invoiceTemplatesGetInvoiceTemplate(String guid) throws ApiException {
        ApiResponse<InvoiceTemplateModel> localVarResp = invoiceTemplatesGetInvoiceTemplateWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get invoice template by ID.
     * 
     * @param guid ID of the invoice template. (required)
     * @return ApiResponse&lt;InvoiceTemplateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceTemplateModel> invoiceTemplatesGetInvoiceTemplateWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = invoiceTemplatesGetInvoiceTemplateValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<InvoiceTemplateModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice template by ID. (asynchronously)
     * 
     * @param guid ID of the invoice template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceTemplatesGetInvoiceTemplateAsync(String guid, final ApiCallback<InvoiceTemplateModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceTemplatesGetInvoiceTemplateValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceTemplateModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceTemplatesGetInvoiceTemplates
     * @param active  (optional)
     * @param firstRow  (optional)
     * @param rowCount  (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceTemplatesGetInvoiceTemplatesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoicetemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceTemplatesGetInvoiceTemplatesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return invoiceTemplatesGetInvoiceTemplatesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get invoice templates.
     * 
     * @param active  (optional)
     * @param firstRow  (optional)
     * @param rowCount  (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @return List&lt;InvoiceTemplateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceTemplateModel> invoiceTemplatesGetInvoiceTemplates(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<InvoiceTemplateModel>> localVarResp = invoiceTemplatesGetInvoiceTemplatesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get invoice templates.
     * 
     * @param active  (optional)
     * @param firstRow  (optional)
     * @param rowCount  (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @return ApiResponse&lt;List&lt;InvoiceTemplateModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceTemplateModel>> invoiceTemplatesGetInvoiceTemplatesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = invoiceTemplatesGetInvoiceTemplatesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<InvoiceTemplateModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice templates. (asynchronously)
     * 
     * @param active  (optional)
     * @param firstRow  (optional)
     * @param rowCount  (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceTemplatesModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceTemplatesGetInvoiceTemplatesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<InvoiceTemplateModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceTemplatesGetInvoiceTemplatesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceTemplateModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsGetKeyword
     * @param guid GUID used to get the keyword. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keyword. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetKeywordCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/keywords/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsGetKeywordValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling keywordsGetKeyword(Async)");
        }

        return keywordsGetKeywordCall(guid, _callback);

    }

    /**
     * Get keyword by ID.
     * 
     * @param guid GUID used to get the keyword. (required)
     * @return KeywordModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keyword. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public KeywordModel keywordsGetKeyword(String guid) throws ApiException {
        ApiResponse<KeywordModel> localVarResp = keywordsGetKeywordWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get keyword by ID.
     * 
     * @param guid GUID used to get the keyword. (required)
     * @return ApiResponse&lt;KeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keyword. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordModel> keywordsGetKeywordWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = keywordsGetKeywordValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<KeywordModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get keyword by ID. (asynchronously)
     * 
     * @param guid GUID used to get the keyword. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keyword. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetKeywordAsync(String guid, final ApiCallback<KeywordModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsGetKeywordValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<KeywordModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsGetKeywords
     * @param category Optional: category of the keyword. (optional)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from keyword. (optional, default to )
     * @param changedSince Optional: Get keywords that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param keyword Optional: Keyword name. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetKeywordsCall(KeywordCategory category, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String keyword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/keywords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsGetKeywordsValidateBeforeCall(KeywordCategory category, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String keyword, final ApiCallback _callback) throws ApiException {
        return keywordsGetKeywordsCall(category, active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, keyword, _callback);

    }

    /**
     * Get all the keywords.
     * 
     * @param category Optional: category of the keyword. (optional)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from keyword. (optional, default to )
     * @param changedSince Optional: Get keywords that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param keyword Optional: Keyword name. (optional, default to )
     * @return List&lt;KeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<KeywordModel> keywordsGetKeywords(KeywordCategory category, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String keyword) throws ApiException {
        ApiResponse<List<KeywordModel>> localVarResp = keywordsGetKeywordsWithHttpInfo(category, active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, keyword);
        return localVarResp.getData();
    }

    /**
     * Get all the keywords.
     * 
     * @param category Optional: category of the keyword. (optional)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from keyword. (optional, default to )
     * @param changedSince Optional: Get keywords that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param keyword Optional: Keyword name. (optional, default to )
     * @return ApiResponse&lt;List&lt;KeywordModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeywordModel>> keywordsGetKeywordsWithHttpInfo(KeywordCategory category, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String keyword) throws ApiException {
        okhttp3.Call localVarCall = keywordsGetKeywordsValidateBeforeCall(category, active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, keyword, null);
        Type localVarReturnType = new TypeToken<List<KeywordModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the keywords. (asynchronously)
     * 
     * @param category Optional: category of the keyword. (optional)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from keyword. (optional, default to )
     * @param changedSince Optional: Get keywords that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param keyword Optional: Keyword name. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetKeywordsAsync(KeywordCategory category, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String keyword, final ApiCallback<List<KeywordModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsGetKeywordsValidateBeforeCall(category, active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, keyword, _callback);
        Type localVarReturnType = new TypeToken<List<KeywordModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kpiFormulasGetKpiFormulas
     * @param category Optional: Category of KPI formula (Project, Invoice, User). (optional)
     * @param isActive Optional: return with given active status. Default is to return all. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search. (optional, default to )
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param includeDefinition Optional: Include definition to response. Default false. (optional, default to false)
     * @param changedSince Optional: Get KPI formulas that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> KPI formulas. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kpiFormulasGetKpiFormulasCall(KpiFormulaCategory category, Boolean isActive, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndSortDirection> sortings, Boolean includeDefinition, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/kpiformulas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        if (includeDefinition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDefinition", includeDefinition));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kpiFormulasGetKpiFormulasValidateBeforeCall(KpiFormulaCategory category, Boolean isActive, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndSortDirection> sortings, Boolean includeDefinition, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return kpiFormulasGetKpiFormulasCall(category, isActive, firstRow, rowCount, textToSearch, sortings, includeDefinition, changedSince, _callback);

    }

    /**
     * Get saved KPI formulas.
     * 
     * @param category Optional: Category of KPI formula (Project, Invoice, User). (optional)
     * @param isActive Optional: return with given active status. Default is to return all. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search. (optional, default to )
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param includeDefinition Optional: Include definition to response. Default false. (optional, default to false)
     * @param changedSince Optional: Get KPI formulas that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;KpiFormulaModelBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> KPI formulas. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<KpiFormulaModelBase> kpiFormulasGetKpiFormulas(KpiFormulaCategory category, Boolean isActive, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndSortDirection> sortings, Boolean includeDefinition, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<KpiFormulaModelBase>> localVarResp = kpiFormulasGetKpiFormulasWithHttpInfo(category, isActive, firstRow, rowCount, textToSearch, sortings, includeDefinition, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get saved KPI formulas.
     * 
     * @param category Optional: Category of KPI formula (Project, Invoice, User). (optional)
     * @param isActive Optional: return with given active status. Default is to return all. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search. (optional, default to )
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param includeDefinition Optional: Include definition to response. Default false. (optional, default to false)
     * @param changedSince Optional: Get KPI formulas that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;KpiFormulaModelBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> KPI formulas. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KpiFormulaModelBase>> kpiFormulasGetKpiFormulasWithHttpInfo(KpiFormulaCategory category, Boolean isActive, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndSortDirection> sortings, Boolean includeDefinition, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = kpiFormulasGetKpiFormulasValidateBeforeCall(category, isActive, firstRow, rowCount, textToSearch, sortings, includeDefinition, changedSince, null);
        Type localVarReturnType = new TypeToken<List<KpiFormulaModelBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get saved KPI formulas. (asynchronously)
     * 
     * @param category Optional: Category of KPI formula (Project, Invoice, User). (optional)
     * @param isActive Optional: return with given active status. Default is to return all. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search. (optional, default to )
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param includeDefinition Optional: Include definition to response. Default false. (optional, default to false)
     * @param changedSince Optional: Get KPI formulas that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> KPI formulas. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kpiFormulasGetKpiFormulasAsync(KpiFormulaCategory category, Boolean isActive, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndSortDirection> sortings, Boolean includeDefinition, OffsetDateTime changedSince, final ApiCallback<List<KpiFormulaModelBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = kpiFormulasGetKpiFormulasValidateBeforeCall(category, isActive, firstRow, rowCount, textToSearch, sortings, includeDefinition, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<KpiFormulaModelBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGetLanguage
     * @param guid GUID used to get the language. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguageCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/languages/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetLanguageValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling languagesGetLanguage(Async)");
        }

        return languagesGetLanguageCall(guid, _callback);

    }

    /**
     * Get language by ID
     * 
     * @param guid GUID used to get the language. (required)
     * @return LanguageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public LanguageModel languagesGetLanguage(String guid) throws ApiException {
        ApiResponse<LanguageModel> localVarResp = languagesGetLanguageWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get language by ID
     * 
     * @param guid GUID used to get the language. (required)
     * @return ApiResponse&lt;LanguageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LanguageModel> languagesGetLanguageWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = languagesGetLanguageValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<LanguageModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get language by ID (asynchronously)
     * 
     * @param guid GUID used to get the language. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguageAsync(String guid, final ApiCallback<LanguageModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetLanguageValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<LanguageModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGetLanguages
     * @param isInvoiceLanguage Optional: which languages to fetch. only invoice languages or non invoice languages?, default all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Languages </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguagesCall(Boolean isInvoiceLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isInvoiceLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInvoiceLanguage", isInvoiceLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetLanguagesValidateBeforeCall(Boolean isInvoiceLanguage, final ApiCallback _callback) throws ApiException {
        return languagesGetLanguagesCall(isInvoiceLanguage, _callback);

    }

    /**
     * Get all the languages
     * 
     * @param isInvoiceLanguage Optional: which languages to fetch. only invoice languages or non invoice languages?, default all. (optional)
     * @return List&lt;LanguageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Languages </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<LanguageModel> languagesGetLanguages(Boolean isInvoiceLanguage) throws ApiException {
        ApiResponse<List<LanguageModel>> localVarResp = languagesGetLanguagesWithHttpInfo(isInvoiceLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all the languages
     * 
     * @param isInvoiceLanguage Optional: which languages to fetch. only invoice languages or non invoice languages?, default all. (optional)
     * @return ApiResponse&lt;List&lt;LanguageModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Languages </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LanguageModel>> languagesGetLanguagesWithHttpInfo(Boolean isInvoiceLanguage) throws ApiException {
        okhttp3.Call localVarCall = languagesGetLanguagesValidateBeforeCall(isInvoiceLanguage, null);
        Type localVarReturnType = new TypeToken<List<LanguageModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the languages (asynchronously)
     * 
     * @param isInvoiceLanguage Optional: which languages to fetch. only invoice languages or non invoice languages?, default all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Languages </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguagesAsync(Boolean isInvoiceLanguage, final ApiCallback<List<LanguageModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetLanguagesValidateBeforeCall(isInvoiceLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<LanguageModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leadSourcesGetLeadSource
     * @param guid GUID used to get the lead source. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesGetLeadSourceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/leadsources/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leadSourcesGetLeadSourceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling leadSourcesGetLeadSource(Async)");
        }

        return leadSourcesGetLeadSourceCall(guid, _callback);

    }

    /**
     * Get lead source by ID.
     * 
     * @param guid GUID used to get the lead source. (required)
     * @return LeadSourceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public LeadSourceModel leadSourcesGetLeadSource(String guid) throws ApiException {
        ApiResponse<LeadSourceModel> localVarResp = leadSourcesGetLeadSourceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get lead source by ID.
     * 
     * @param guid GUID used to get the lead source. (required)
     * @return ApiResponse&lt;LeadSourceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeadSourceModel> leadSourcesGetLeadSourceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = leadSourcesGetLeadSourceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<LeadSourceModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lead source by ID. (asynchronously)
     * 
     * @param guid GUID used to get the lead source. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lead source. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesGetLeadSourceAsync(String guid, final ApiCallback<LeadSourceModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = leadSourcesGetLeadSourceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<LeadSourceModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leadSourcesGetLeadSources
     * @param active If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from lead source name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesGetLeadSourcesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/leadsources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leadSourcesGetLeadSourcesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        return leadSourcesGetLeadSourcesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, _callback);

    }

    /**
     * Get the lead sources.
     * 
     * @param active If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from lead source name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return List&lt;LeadSourceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<LeadSourceModel> leadSourcesGetLeadSources(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        ApiResponse<List<LeadSourceModel>> localVarResp = leadSourcesGetLeadSourcesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount);
        return localVarResp.getData();
    }

    /**
     * Get the lead sources.
     * 
     * @param active If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from lead source name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return ApiResponse&lt;List&lt;LeadSourceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LeadSourceModel>> leadSourcesGetLeadSourcesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        okhttp3.Call localVarCall = leadSourcesGetLeadSourcesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, null);
        Type localVarReturnType = new TypeToken<List<LeadSourceModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the lead sources. (asynchronously)
     * 
     * @param active If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from lead source name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lead sources. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leadSourcesGetLeadSourcesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback<List<LeadSourceModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = leadSourcesGetLeadSourcesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, _callback);
        Type localVarReturnType = new TypeToken<List<LeadSourceModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketSegmentsGetMarketSegment
     * @param guid GUID used to get the Market Segment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsGetMarketSegmentCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/marketsegments/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketSegmentsGetMarketSegmentValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling marketSegmentsGetMarketSegment(Async)");
        }

        return marketSegmentsGetMarketSegmentCall(guid, _callback);

    }

    /**
     * Get Market Segment by ID.
     * 
     * @param guid GUID used to get the Market Segment. (required)
     * @return MarketSegmentModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public MarketSegmentModel marketSegmentsGetMarketSegment(String guid) throws ApiException {
        ApiResponse<MarketSegmentModel> localVarResp = marketSegmentsGetMarketSegmentWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Market Segment by ID.
     * 
     * @param guid GUID used to get the Market Segment. (required)
     * @return ApiResponse&lt;MarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketSegmentModel> marketSegmentsGetMarketSegmentWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = marketSegmentsGetMarketSegmentValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<MarketSegmentModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Market Segment by ID. (asynchronously)
     * 
     * @param guid GUID used to get the Market Segment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsGetMarketSegmentAsync(String guid, final ApiCallback<MarketSegmentModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketSegmentsGetMarketSegmentValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<MarketSegmentModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketSegmentsGetMarketSegments
     * @param active If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from market segment name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param includeChildSegments Optional: Include also child market segments. If false returns only parent segments. Default true. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsGetMarketSegmentsCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean includeChildSegments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/marketsegments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (includeChildSegments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeChildSegments", includeChildSegments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketSegmentsGetMarketSegmentsValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean includeChildSegments, final ApiCallback _callback) throws ApiException {
        return marketSegmentsGetMarketSegmentsCall(active, firstRow, rowCount, textToSearch, calculateRowCount, includeChildSegments, _callback);

    }

    /**
     * Get the Market Segments.
     * 
     * @param active If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from market segment name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param includeChildSegments Optional: Include also child market segments. If false returns only parent segments. Default true. (optional, default to true)
     * @return List&lt;MarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<MarketSegmentModel> marketSegmentsGetMarketSegments(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean includeChildSegments) throws ApiException {
        ApiResponse<List<MarketSegmentModel>> localVarResp = marketSegmentsGetMarketSegmentsWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, includeChildSegments);
        return localVarResp.getData();
    }

    /**
     * Get the Market Segments.
     * 
     * @param active If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from market segment name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param includeChildSegments Optional: Include also child market segments. If false returns only parent segments. Default true. (optional, default to true)
     * @return ApiResponse&lt;List&lt;MarketSegmentModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MarketSegmentModel>> marketSegmentsGetMarketSegmentsWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean includeChildSegments) throws ApiException {
        okhttp3.Call localVarCall = marketSegmentsGetMarketSegmentsValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, includeChildSegments, null);
        Type localVarReturnType = new TypeToken<List<MarketSegmentModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Market Segments. (asynchronously)
     * 
     * @param active If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from market segment name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param includeChildSegments Optional: Include also child market segments. If false returns only parent segments. Default true. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketSegmentsGetMarketSegmentsAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, Boolean includeChildSegments, final ApiCallback<List<MarketSegmentModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketSegmentsGetMarketSegmentsValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, includeChildSegments, _callback);
        Type localVarReturnType = new TypeToken<List<MarketSegmentModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimePricesGetOvertimePrice
     * @param guid Id used to get the overtime price. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimePricesGetOvertimePriceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/overtimeprices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimePricesGetOvertimePriceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling overtimePricesGetOvertimePrice(Async)");
        }

        return overtimePricesGetOvertimePriceCall(guid, _callback);

    }

    /**
     * Get overtime price by ID.
     * 
     * @param guid Id used to get the overtime price. (required)
     * @return OvertimePriceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public OvertimePriceModel overtimePricesGetOvertimePrice(String guid) throws ApiException {
        ApiResponse<OvertimePriceModel> localVarResp = overtimePricesGetOvertimePriceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get overtime price by ID.
     * 
     * @param guid Id used to get the overtime price. (required)
     * @return ApiResponse&lt;OvertimePriceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OvertimePriceModel> overtimePricesGetOvertimePriceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = overtimePricesGetOvertimePriceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<OvertimePriceModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get overtime price by ID. (asynchronously)
     * 
     * @param guid Id used to get the overtime price. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimePricesGetOvertimePriceAsync(String guid, final ApiCallback<OvertimePriceModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimePricesGetOvertimePriceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<OvertimePriceModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimePricesGetOvertimePrices
     * @param pricelistVersionGuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimePricesGetOvertimePricesCall(String pricelistVersionGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelistversions/{pricelistVersionGuid}/overtimeprices"
            .replace("{" + "pricelistVersionGuid" + "}", localVarApiClient.escapeString(pricelistVersionGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimePricesGetOvertimePricesValidateBeforeCall(String pricelistVersionGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricelistVersionGuid' is set
        if (pricelistVersionGuid == null) {
            throw new ApiException("Missing the required parameter 'pricelistVersionGuid' when calling overtimePricesGetOvertimePrices(Async)");
        }

        return overtimePricesGetOvertimePricesCall(pricelistVersionGuid, _callback);

    }

    /**
     * Get all the overtime prices for a price list version.
     * 
     * @param pricelistVersionGuid  (required)
     * @return List&lt;OvertimePriceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<OvertimePriceModel> overtimePricesGetOvertimePrices(String pricelistVersionGuid) throws ApiException {
        ApiResponse<List<OvertimePriceModel>> localVarResp = overtimePricesGetOvertimePricesWithHttpInfo(pricelistVersionGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the overtime prices for a price list version.
     * 
     * @param pricelistVersionGuid  (required)
     * @return ApiResponse&lt;List&lt;OvertimePriceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OvertimePriceModel>> overtimePricesGetOvertimePricesWithHttpInfo(String pricelistVersionGuid) throws ApiException {
        okhttp3.Call localVarCall = overtimePricesGetOvertimePricesValidateBeforeCall(pricelistVersionGuid, null);
        Type localVarReturnType = new TypeToken<List<OvertimePriceModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the overtime prices for a price list version. (asynchronously)
     * 
     * @param pricelistVersionGuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimePricesGetOvertimePricesAsync(String pricelistVersionGuid, final ApiCallback<List<OvertimePriceModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimePricesGetOvertimePricesValidateBeforeCall(pricelistVersionGuid, _callback);
        Type localVarReturnType = new TypeToken<List<OvertimePriceModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimesGetOvertime
     * @param guid Id used to get the overtime definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OvertimeModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesGetOvertimeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/overtimes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimesGetOvertimeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling overtimesGetOvertime(Async)");
        }

        return overtimesGetOvertimeCall(guid, _callback);

    }

    /**
     * Get overtime definition by ID.
     * 
     * @param guid Id used to get the overtime definition. (required)
     * @return OvertimeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OvertimeModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public OvertimeModel overtimesGetOvertime(String guid) throws ApiException {
        ApiResponse<OvertimeModel> localVarResp = overtimesGetOvertimeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get overtime definition by ID.
     * 
     * @param guid Id used to get the overtime definition. (required)
     * @return ApiResponse&lt;OvertimeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OvertimeModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OvertimeModel> overtimesGetOvertimeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = overtimesGetOvertimeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<OvertimeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get overtime definition by ID. (asynchronously)
     * 
     * @param guid Id used to get the overtime definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OvertimeModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesGetOvertimeAsync(String guid, final ApiCallback<OvertimeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimesGetOvertimeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<OvertimeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overtimesGetOvertimes
     * @param active If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from overtime name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overtime definitions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesGetOvertimesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/overtimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overtimesGetOvertimesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return overtimesGetOvertimesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get overtime definitions.
     * 
     * @param active If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from overtime name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;\&quot;. (optional)
     * @return List&lt;OvertimeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overtime definitions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<OvertimeModel> overtimesGetOvertimes(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<OvertimeModel>> localVarResp = overtimesGetOvertimesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get overtime definitions.
     * 
     * @param active If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from overtime name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;OvertimeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overtime definitions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OvertimeModel>> overtimesGetOvertimesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = overtimesGetOvertimesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<OvertimeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get overtime definitions. (asynchronously)
     * 
     * @param active If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from overtime name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overtime definitions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overtimesGetOvertimesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<OvertimeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = overtimesGetOvertimesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<OvertimeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionProfilesGetPermissionProfile
     * @param guid GUID used to get the Permission Profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PermissionProfileModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionProfilesGetPermissionProfileCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/permissionprofiles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionProfilesGetPermissionProfileValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling permissionProfilesGetPermissionProfile(Async)");
        }

        return permissionProfilesGetPermissionProfileCall(guid, _callback);

    }

    /**
     * Get Permission Profile by ID.
     * 
     * @param guid GUID used to get the Permission Profile. (required)
     * @return PermissionProfileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PermissionProfileModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PermissionProfileModel permissionProfilesGetPermissionProfile(String guid) throws ApiException {
        ApiResponse<PermissionProfileModel> localVarResp = permissionProfilesGetPermissionProfileWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Permission Profile by ID.
     * 
     * @param guid GUID used to get the Permission Profile. (required)
     * @return ApiResponse&lt;PermissionProfileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PermissionProfileModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionProfileModel> permissionProfilesGetPermissionProfileWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = permissionProfilesGetPermissionProfileValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<PermissionProfileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Permission Profile by ID. (asynchronously)
     * 
     * @param guid GUID used to get the Permission Profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PermissionProfileModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionProfilesGetPermissionProfileAsync(String guid, final ApiCallback<PermissionProfileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionProfilesGetPermissionProfileValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<PermissionProfileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionProfilesGetPermissionProfiles
     * @param active If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from permission profile name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Permission Profiles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionProfilesGetPermissionProfilesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/permissionprofiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionProfilesGetPermissionProfilesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return permissionProfilesGetPermissionProfilesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the Permission Profiles.
     * 
     * @param active If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from permission profile name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;PermissionProfileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Permission Profiles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PermissionProfileModel> permissionProfilesGetPermissionProfiles(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<PermissionProfileModel>> localVarResp = permissionProfilesGetPermissionProfilesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the Permission Profiles.
     * 
     * @param active If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from permission profile name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;PermissionProfileModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Permission Profiles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PermissionProfileModel>> permissionProfilesGetPermissionProfilesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = permissionProfilesGetPermissionProfilesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<PermissionProfileModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Permission Profiles. (asynchronously)
     * 
     * @param active If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from permission profile name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Permission Profiles. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionProfilesGetPermissionProfilesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<PermissionProfileModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionProfilesGetPermissionProfilesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<PermissionProfileModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseStatusTypesGetPhaseStatusType
     * @param guid Id used to get the phase status type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PhaseStatusTypeModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesGetPhaseStatusTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phasestatustypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseStatusTypesGetPhaseStatusTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling phaseStatusTypesGetPhaseStatusType(Async)");
        }

        return phaseStatusTypesGetPhaseStatusTypeCall(guid, _callback);

    }

    /**
     * Get phase status type by GUID
     * 
     * @param guid Id used to get the phase status type. (required)
     * @return PhaseStatusTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PhaseStatusTypeModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PhaseStatusTypeModel phaseStatusTypesGetPhaseStatusType(String guid) throws ApiException {
        ApiResponse<PhaseStatusTypeModel> localVarResp = phaseStatusTypesGetPhaseStatusTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get phase status type by GUID
     * 
     * @param guid Id used to get the phase status type. (required)
     * @return ApiResponse&lt;PhaseStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PhaseStatusTypeModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhaseStatusTypeModel> phaseStatusTypesGetPhaseStatusTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = phaseStatusTypesGetPhaseStatusTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<PhaseStatusTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get phase status type by GUID (asynchronously)
     * 
     * @param guid Id used to get the phase status type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PhaseStatusTypeModel </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesGetPhaseStatusTypeAsync(String guid, final ApiCallback<PhaseStatusTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseStatusTypesGetPhaseStatusTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<PhaseStatusTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phaseStatusTypesGetPhaseStatusTypes
     * @param active If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesGetPhaseStatusTypesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/phasestatustypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phaseStatusTypesGetPhaseStatusTypesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return phaseStatusTypesGetPhaseStatusTypesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get phase status types
     * 
     * @param active If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @return List&lt;PhaseStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PhaseStatusTypeModel> phaseStatusTypesGetPhaseStatusTypes(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<PhaseStatusTypeModel>> localVarResp = phaseStatusTypesGetPhaseStatusTypesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get phase status types
     * 
     * @param active If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @return ApiResponse&lt;List&lt;PhaseStatusTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhaseStatusTypeModel>> phaseStatusTypesGetPhaseStatusTypesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = phaseStatusTypesGetPhaseStatusTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<PhaseStatusTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get phase status types (asynchronously)
     * 
     * @param active If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch  (optional, default to )
     * @param calculateRowCount  (optional, default to false)
     * @param sortings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the phase status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phaseStatusTypesGetPhaseStatusTypesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<PhaseStatusTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = phaseStatusTypesGetPhaseStatusTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<PhaseStatusTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceListVersionsGetPricelistVersion
     * @param guid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListVersionsGetPricelistVersionCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelistversions/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceListVersionsGetPricelistVersionValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling priceListVersionsGetPricelistVersion(Async)");
        }

        return priceListVersionsGetPricelistVersionCall(guid, _callback);

    }

    /**
     * Get a price list version by guid.
     * 
     * @param guid  (required)
     * @return PricelistVersionOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PricelistVersionOutputModel priceListVersionsGetPricelistVersion(String guid) throws ApiException {
        ApiResponse<PricelistVersionOutputModel> localVarResp = priceListVersionsGetPricelistVersionWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get a price list version by guid.
     * 
     * @param guid  (required)
     * @return ApiResponse&lt;PricelistVersionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricelistVersionOutputModel> priceListVersionsGetPricelistVersionWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = priceListVersionsGetPricelistVersionValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<PricelistVersionOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a price list version by guid. (asynchronously)
     * 
     * @param guid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListVersionsGetPricelistVersionAsync(String guid, final ApiCallback<PricelistVersionOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceListVersionsGetPricelistVersionValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<PricelistVersionOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceListVersionsGetPricelistVersionsByPricelist
     * @param pricelistGuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list versions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListVersionsGetPricelistVersionsByPricelistCall(String pricelistGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelists/{pricelistGuid}/pricelistversions"
            .replace("{" + "pricelistGuid" + "}", localVarApiClient.escapeString(pricelistGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceListVersionsGetPricelistVersionsByPricelistValidateBeforeCall(String pricelistGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricelistGuid' is set
        if (pricelistGuid == null) {
            throw new ApiException("Missing the required parameter 'pricelistGuid' when calling priceListVersionsGetPricelistVersionsByPricelist(Async)");
        }

        return priceListVersionsGetPricelistVersionsByPricelistCall(pricelistGuid, _callback);

    }

    /**
     * Get all price list versions of a price list.
     * 
     * @param pricelistGuid  (required)
     * @return List&lt;PricelistVersionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list versions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PricelistVersionOutputModel> priceListVersionsGetPricelistVersionsByPricelist(String pricelistGuid) throws ApiException {
        ApiResponse<List<PricelistVersionOutputModel>> localVarResp = priceListVersionsGetPricelistVersionsByPricelistWithHttpInfo(pricelistGuid);
        return localVarResp.getData();
    }

    /**
     * Get all price list versions of a price list.
     * 
     * @param pricelistGuid  (required)
     * @return ApiResponse&lt;List&lt;PricelistVersionOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list versions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PricelistVersionOutputModel>> priceListVersionsGetPricelistVersionsByPricelistWithHttpInfo(String pricelistGuid) throws ApiException {
        okhttp3.Call localVarCall = priceListVersionsGetPricelistVersionsByPricelistValidateBeforeCall(pricelistGuid, null);
        Type localVarReturnType = new TypeToken<List<PricelistVersionOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all price list versions of a price list. (asynchronously)
     * 
     * @param pricelistGuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Price list versions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListVersionsGetPricelistVersionsByPricelistAsync(String pricelistGuid, final ApiCallback<List<PricelistVersionOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceListVersionsGetPricelistVersionsByPricelistValidateBeforeCall(pricelistGuid, _callback);
        Type localVarReturnType = new TypeToken<List<PricelistVersionOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceListsGetPriceList
     * @param guid ID used to get the price list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListsGetPriceListCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelists/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceListsGetPriceListValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling priceListsGetPriceList(Async)");
        }

        return priceListsGetPriceListCall(guid, _callback);

    }

    /**
     * Get price list by GUID.
     * 
     * @param guid ID used to get the price list. (required)
     * @return PriceListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PriceListModel priceListsGetPriceList(String guid) throws ApiException {
        ApiResponse<PriceListModel> localVarResp = priceListsGetPriceListWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get price list by GUID.
     * 
     * @param guid ID used to get the price list. (required)
     * @return ApiResponse&lt;PriceListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PriceListModel> priceListsGetPriceListWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = priceListsGetPriceListValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<PriceListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get price list by GUID. (asynchronously)
     * 
     * @param guid ID used to get the price list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListsGetPriceListAsync(String guid, final ApiCallback<PriceListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceListsGetPriceListValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<PriceListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceListsGetPricelists
     * @param active If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from price list name. (optional, default to )
     * @param currencyGuid Optional: ID of the price list currency. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param name Optional: Name of the price list. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the price lists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListsGetPricelistsCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String currencyGuid, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (currencyGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyGuid", currencyGuid));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceListsGetPricelistsValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String currencyGuid, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String name, final ApiCallback _callback) throws ApiException {
        return priceListsGetPricelistsCall(active, firstRow, rowCount, textToSearch, currencyGuid, calculateRowCount, sortings, name, _callback);

    }

    /**
     * Get all price lists.
     * 
     * @param active If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from price list name. (optional, default to )
     * @param currencyGuid Optional: ID of the price list currency. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param name Optional: Name of the price list. (optional, default to )
     * @return List&lt;PriceListOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the price lists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PriceListOutputModel> priceListsGetPricelists(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String currencyGuid, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String name) throws ApiException {
        ApiResponse<List<PriceListOutputModel>> localVarResp = priceListsGetPricelistsWithHttpInfo(active, firstRow, rowCount, textToSearch, currencyGuid, calculateRowCount, sortings, name);
        return localVarResp.getData();
    }

    /**
     * Get all price lists.
     * 
     * @param active If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from price list name. (optional, default to )
     * @param currencyGuid Optional: ID of the price list currency. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param name Optional: Name of the price list. (optional, default to )
     * @return ApiResponse&lt;List&lt;PriceListOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the price lists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PriceListOutputModel>> priceListsGetPricelistsWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String currencyGuid, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String name) throws ApiException {
        okhttp3.Call localVarCall = priceListsGetPricelistsValidateBeforeCall(active, firstRow, rowCount, textToSearch, currencyGuid, calculateRowCount, sortings, name, null);
        Type localVarReturnType = new TypeToken<List<PriceListOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all price lists. (asynchronously)
     * 
     * @param active If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from price list name. (optional, default to )
     * @param currencyGuid Optional: ID of the price list currency. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. (optional)
     * @param name Optional: Name of the price list. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the price lists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceListsGetPricelistsAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String currencyGuid, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, String name, final ApiCallback<List<PriceListOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceListsGetPricelistsValidateBeforeCall(active, firstRow, rowCount, textToSearch, currencyGuid, calculateRowCount, sortings, name, _callback);
        Type localVarReturnType = new TypeToken<List<PriceListOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCategoriesGetProductCategories
     * @param active If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from product category name or code. (optional, default to )
     * @param changedSince Optional: Get product categories that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: ?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product categories. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesGetProductCategoriesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/productcategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCategoriesGetProductCategoriesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return productCategoriesGetProductCategoriesCall(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, _callback);

    }

    /**
     * Get product categories.
     * 
     * @param active If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from product category name or code. (optional, default to )
     * @param changedSince Optional: Get product categories that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: ?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc. (optional)
     * @return List&lt;ProductCategoryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product categories. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCategoryModel> productCategoriesGetProductCategories(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ProductCategoryModel>> localVarResp = productCategoriesGetProductCategoriesWithHttpInfo(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get product categories.
     * 
     * @param active If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from product category name or code. (optional, default to )
     * @param changedSince Optional: Get product categories that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: ?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc. (optional)
     * @return ApiResponse&lt;List&lt;ProductCategoryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product categories. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCategoryModel>> productCategoriesGetProductCategoriesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = productCategoriesGetProductCategoriesValidateBeforeCall(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ProductCategoryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product categories. (asynchronously)
     * 
     * @param active If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Optional: Text to search from product category name or code. (optional, default to )
     * @param changedSince Optional: Get product categories that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: ?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product categories. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesGetProductCategoriesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ProductCategoryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCategoriesGetProductCategoriesValidateBeforeCall(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCategoryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCategoriesGetProductCategory
     * @param guid Id used to get the product category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProductCategoryModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesGetProductCategoryCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/productcategories/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCategoriesGetProductCategoryValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling productCategoriesGetProductCategory(Async)");
        }

        return productCategoriesGetProductCategoryCall(guid, _callback);

    }

    /**
     * Get product category by ID.
     * 
     * @param guid Id used to get the product category. (required)
     * @return ProductCategoryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProductCategoryModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProductCategoryModel productCategoriesGetProductCategory(String guid) throws ApiException {
        ApiResponse<ProductCategoryModel> localVarResp = productCategoriesGetProductCategoryWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get product category by ID.
     * 
     * @param guid Id used to get the product category. (required)
     * @return ApiResponse&lt;ProductCategoryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProductCategoryModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCategoryModel> productCategoriesGetProductCategoryWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = productCategoriesGetProductCategoryValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProductCategoryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product category by ID. (asynchronously)
     * 
     * @param guid Id used to get the product category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProductCategoryModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCategoriesGetProductCategoryAsync(String guid, final ApiCallback<ProductCategoryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCategoriesGetProductCategoryValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProductCategoryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCountrySettingsGetProductCountrySettings
     * @param productGuid GUID of the product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProductCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountrySettingsGetProductCountrySettingsCall(String productGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{productGuid}/productcountrysettings"
            .replace("{" + "productGuid" + "}", localVarApiClient.escapeString(productGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCountrySettingsGetProductCountrySettingsValidateBeforeCall(String productGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productGuid' is set
        if (productGuid == null) {
            throw new ApiException("Missing the required parameter 'productGuid' when calling productCountrySettingsGetProductCountrySettings(Async)");
        }

        return productCountrySettingsGetProductCountrySettingsCall(productGuid, _callback);

    }

    /**
     * Get all the country settings for a product
     * 
     * @param productGuid GUID of the product. (required)
     * @return List&lt;ProductCountrySettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProductCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCountrySettingsModel> productCountrySettingsGetProductCountrySettings(String productGuid) throws ApiException {
        ApiResponse<List<ProductCountrySettingsModel>> localVarResp = productCountrySettingsGetProductCountrySettingsWithHttpInfo(productGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the country settings for a product
     * 
     * @param productGuid GUID of the product. (required)
     * @return ApiResponse&lt;List&lt;ProductCountrySettingsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProductCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCountrySettingsModel>> productCountrySettingsGetProductCountrySettingsWithHttpInfo(String productGuid) throws ApiException {
        okhttp3.Call localVarCall = productCountrySettingsGetProductCountrySettingsValidateBeforeCall(productGuid, null);
        Type localVarReturnType = new TypeToken<List<ProductCountrySettingsModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the country settings for a product (asynchronously)
     * 
     * @param productGuid GUID of the product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProductCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountrySettingsGetProductCountrySettingsAsync(String productGuid, final ApiCallback<List<ProductCountrySettingsModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCountrySettingsGetProductCountrySettingsValidateBeforeCall(productGuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCountrySettingsModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPricesGetProductPrice
     * @param guid Id used to get the product price. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPricesGetProductPriceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/productprices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPricesGetProductPriceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling productPricesGetProductPrice(Async)");
        }

        return productPricesGetProductPriceCall(guid, _callback);

    }

    /**
     * Get product price by ID.
     * 
     * @param guid Id used to get the product price. (required)
     * @return ProductPriceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProductPriceOutputModel productPricesGetProductPrice(String guid) throws ApiException {
        ApiResponse<ProductPriceOutputModel> localVarResp = productPricesGetProductPriceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get product price by ID.
     * 
     * @param guid Id used to get the product price. (required)
     * @return ApiResponse&lt;ProductPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPriceOutputModel> productPricesGetProductPriceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = productPricesGetProductPriceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProductPriceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product price by ID. (asynchronously)
     * 
     * @param guid Id used to get the product price. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPricesGetProductPriceAsync(String guid, final ApiCallback<ProductPriceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPricesGetProductPriceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProductPriceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPricesGetProductPrices
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPricesGetProductPricesCall(String pricelistVersionGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelistversions/{pricelistVersionGuid}/productprices"
            .replace("{" + "pricelistVersionGuid" + "}", localVarApiClient.escapeString(pricelistVersionGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPricelistOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPricelistOnly", fromPricelistOnly));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (productCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productCode", productCode));
        }

        if (productGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productGuids", productGuids));
        }

        if (isVolumePriced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVolumePriced", isVolumePriced));
        }

        if (productCategoryGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productCategoryGuids", productCategoryGuids));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productTypes", productTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPricesGetProductPricesValidateBeforeCall(String pricelistVersionGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricelistVersionGuid' is set
        if (pricelistVersionGuid == null) {
            throw new ApiException("Missing the required parameter 'pricelistVersionGuid' when calling productPricesGetProductPrices(Async)");
        }

        return productPricesGetProductPricesCall(pricelistVersionGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes, _callback);

    }

    /**
     * Get all the product prices for a price list version.
     * 
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @return List&lt;ProductPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductPriceOutputModel> productPricesGetProductPrices(String pricelistVersionGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes) throws ApiException {
        ApiResponse<List<ProductPriceOutputModel>> localVarResp = productPricesGetProductPricesWithHttpInfo(pricelistVersionGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes);
        return localVarResp.getData();
    }

    /**
     * Get all the product prices for a price list version.
     * 
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @return ApiResponse&lt;List&lt;ProductPriceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductPriceOutputModel>> productPricesGetProductPricesWithHttpInfo(String pricelistVersionGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes) throws ApiException {
        okhttp3.Call localVarCall = productPricesGetProductPricesValidateBeforeCall(pricelistVersionGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes, null);
        Type localVarReturnType = new TypeToken<List<ProductPriceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the product prices for a price list version. (asynchronously)
     * 
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param productCode Optional: Absolute search for products with specified product code. (optional, default to )
     * @param productGuids Optional: Search all product price(s) by products guid(s). (optional)
     * @param isVolumePriced Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products. (optional)
     * @param productCategoryGuids Optional: Search product prices according to product category / categories by product category guid(s). (optional)
     * @param productTypes Optional: Search product prices according to product type / types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPricesGetProductPricesAsync(String pricelistVersionGuid, Boolean fromPricelistOnly, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, String productCode, List<String> productGuids, Boolean isVolumePriced, List<String> productCategoryGuids, List<ProductType> productTypes, final ApiCallback<List<ProductPriceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPricesGetProductPricesValidateBeforeCall(pricelistVersionGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes, _callback);
        Type localVarReturnType = new TypeToken<List<ProductPriceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGetProduct
     * @param guid GUID used to get the product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetProductValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling productsGetProduct(Async)");
        }

        return productsGetProductCall(guid, _callback);

    }

    /**
     * Get product by ID.
     * 
     * @param guid GUID used to get the product. (required)
     * @return ProductOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProductOutputModel productsGetProduct(String guid) throws ApiException {
        ApiResponse<ProductOutputModel> localVarResp = productsGetProductWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get product by ID.
     * 
     * @param guid GUID used to get the product. (required)
     * @return ApiResponse&lt;ProductOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOutputModel> productsGetProductWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = productsGetProductValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProductOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product by ID. (asynchronously)
     * 
     * @param guid GUID used to get the product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductAsync(String guid, final ApiCallback<ProductOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetProductValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProductOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGetProducts
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type. (optional)
     * @param isActive If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products (optional)
     * @param code Optional: Code of the product. (optional)
     * @param changedSince Optional: Get products that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductsCall(Integer rowCount, String pageToken, ProductType type, Boolean isActive, String code, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetProductsValidateBeforeCall(Integer rowCount, String pageToken, ProductType type, Boolean isActive, String code, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return productsGetProductsCall(rowCount, pageToken, type, isActive, code, changedSince, _callback);

    }

    /**
     * Get all the Products
     * 
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type. (optional)
     * @param isActive If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products (optional)
     * @param code Optional: Code of the product. (optional)
     * @param changedSince Optional: Get products that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProductOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductOutputModel> productsGetProducts(Integer rowCount, String pageToken, ProductType type, Boolean isActive, String code, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProductOutputModel>> localVarResp = productsGetProductsWithHttpInfo(rowCount, pageToken, type, isActive, code, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all the Products
     * 
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type. (optional)
     * @param isActive If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products (optional)
     * @param code Optional: Code of the product. (optional)
     * @param changedSince Optional: Get products that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProductOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductOutputModel>> productsGetProductsWithHttpInfo(Integer rowCount, String pageToken, ProductType type, Boolean isActive, String code, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = productsGetProductsValidateBeforeCall(rowCount, pageToken, type, isActive, code, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProductOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Products (asynchronously)
     * 
     * @param rowCount Optional: Number of rows to fetch (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param type Product type. if given, it filters the products by the given type. (optional)
     * @param isActive If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products (optional)
     * @param code Optional: Code of the product. (optional)
     * @param changedSince Optional: Get products that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Products </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductsAsync(Integer rowCount, String pageToken, ProductType type, Boolean isActive, String code, OffsetDateTime changedSince, final ApiCallback<List<ProductOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetProductsValidateBeforeCall(rowCount, pageToken, type, isActive, code, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProductOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectBillingCustomersGetProjectBillingCustomer
     * @param guid ID of the project billing customer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersGetProjectBillingCustomerCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectbillingcustomers/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectBillingCustomersGetProjectBillingCustomerValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectBillingCustomersGetProjectBillingCustomer(Async)");
        }

        return projectBillingCustomersGetProjectBillingCustomerCall(guid, _callback);

    }

    /**
     * Get a project billing customer.
     * 
     * @param guid ID of the project billing customer. (required)
     * @return ProjectBillingCustomerModel2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectBillingCustomerModel2 projectBillingCustomersGetProjectBillingCustomer(String guid) throws ApiException {
        ApiResponse<ProjectBillingCustomerModel2> localVarResp = projectBillingCustomersGetProjectBillingCustomerWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get a project billing customer.
     * 
     * @param guid ID of the project billing customer. (required)
     * @return ApiResponse&lt;ProjectBillingCustomerModel2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectBillingCustomerModel2> projectBillingCustomersGetProjectBillingCustomerWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectBillingCustomersGetProjectBillingCustomerValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectBillingCustomerModel2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project billing customer. (asynchronously)
     * 
     * @param guid ID of the project billing customer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project billing customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectBillingCustomersGetProjectBillingCustomerAsync(String guid, final ApiCallback<ProjectBillingCustomerModel2> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectBillingCustomersGetProjectBillingCustomerValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectBillingCustomerModel2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertiesGetProjectCustomProperties
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive project properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesGetProjectCustomPropertiesCall(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (isInUse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInUse", isInUse));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertiesGetProjectCustomPropertiesValidateBeforeCall(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return projectCustomPropertiesGetProjectCustomPropertiesCall(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the project custom properties.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive project properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPropertyModel> projectCustomPropertiesGetProjectCustomProperties(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<CustomPropertyModel>> localVarResp = projectCustomPropertiesGetProjectCustomPropertiesWithHttpInfo(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the project custom properties.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive project properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;CustomPropertyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPropertyModel>> projectCustomPropertiesGetProjectCustomPropertiesWithHttpInfo(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertiesGetProjectCustomPropertiesValidateBeforeCall(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project custom properties. (asynchronously)
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only active or inactive project properties. (optional)
     * @param textToSearch Optional: Text to search from custom property name. (optional, default to )
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesGetProjectCustomPropertiesAsync(Integer firstRow, Integer rowCount, Boolean active, String textToSearch, Boolean isInUse, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<CustomPropertyModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertiesGetProjectCustomPropertiesValidateBeforeCall(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPropertyModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertiesGetProjectCustomProperty
     * @param guid Id used to get the project custom property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesGetProjectCustomPropertyCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertiesGetProjectCustomPropertyValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectCustomPropertiesGetProjectCustomProperty(Async)");
        }

        return projectCustomPropertiesGetProjectCustomPropertyCall(guid, _callback);

    }

    /**
     * Get project custom property by ID.
     * 
     * @param guid Id used to get the project custom property. (required)
     * @return CustomPropertyModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomPropertyModel projectCustomPropertiesGetProjectCustomProperty(String guid) throws ApiException {
        ApiResponse<CustomPropertyModel> localVarResp = projectCustomPropertiesGetProjectCustomPropertyWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project custom property by ID.
     * 
     * @param guid Id used to get the project custom property. (required)
     * @return ApiResponse&lt;CustomPropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomPropertyModel> projectCustomPropertiesGetProjectCustomPropertyWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertiesGetProjectCustomPropertyValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomPropertyModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project custom property by ID. (asynchronously)
     * 
     * @param guid Id used to get the project custom property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertiesGetProjectCustomPropertyAsync(String guid, final ApiCallback<CustomPropertyModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertiesGetProjectCustomPropertyValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomPropertyModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem
     * @param guid Id used to get the project custom property selection item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem(Async)");
        }

        return projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemCall(guid, _callback);

    }

    /**
     * Get project custom property selection item by ID.
     * 
     * @param guid Id used to get the project custom property selection item. (required)
     * @return ProjectCustomPropertySelectionItemOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectCustomPropertySelectionItemOutputModel projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem(String guid) throws ApiException {
        ApiResponse<ProjectCustomPropertySelectionItemOutputModel> localVarResp = projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project custom property selection item by ID.
     * 
     * @param guid Id used to get the project custom property selection item. (required)
     * @return ApiResponse&lt;ProjectCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectCustomPropertySelectionItemOutputModel> projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectCustomPropertySelectionItemOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project custom property selection item by ID. (asynchronously)
     * 
     * @param guid Id used to get the project custom property selection item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemAsync(String guid, final ApiCallback<ProjectCustomPropertySelectionItemOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectCustomPropertySelectionItemOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems
     * @param customPropertyGuid Custom property id used to get the project custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsCall(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/customproperties/{customPropertyGuid}/projectcustompropertyselectionitems"
            .replace("{" + "customPropertyGuid" + "}", localVarApiClient.escapeString(customPropertyGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsValidateBeforeCall(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customPropertyGuid' is set
        if (customPropertyGuid == null) {
            throw new ApiException("Missing the required parameter 'customPropertyGuid' when calling projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems(Async)");
        }

        return projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, _callback);

    }

    /**
     * Get the project custom properties.
     * 
     * @param customPropertyGuid Custom property id used to get the project custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ProjectCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectCustomPropertySelectionItemOutputModel> projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ProjectCustomPropertySelectionItemOutputModel>> localVarResp = projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsWithHttpInfo(customPropertyGuid, rowCount, isActive, pageToken, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the project custom properties.
     * 
     * @param customPropertyGuid Custom property id used to get the project custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ProjectCustomPropertySelectionItemOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectCustomPropertySelectionItemOutputModel>> projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsWithHttpInfo(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsValidateBeforeCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ProjectCustomPropertySelectionItemOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project custom properties. (asynchronously)
     * 
     * @param customPropertyGuid Custom property id used to get the project custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsAsync(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback<List<ProjectCustomPropertySelectionItemOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsValidateBeforeCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectCustomPropertySelectionItemOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectMemberCostExceptionsGetProjectMemberCostException
     * @param guid GUID used to get the cost exception. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectmembercostexceptions/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectMemberCostExceptionsGetProjectMemberCostException(Async)");
        }

        return projectMemberCostExceptionsGetProjectMemberCostExceptionCall(guid, _callback);

    }

    /**
     * Get project member cost exception by ID.
     * 
     * @param guid GUID used to get the cost exception. (required)
     * @return ProjectMemberCostExceptionOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectMemberCostExceptionOutputModel projectMemberCostExceptionsGetProjectMemberCostException(String guid) throws ApiException {
        ApiResponse<ProjectMemberCostExceptionOutputModel> localVarResp = projectMemberCostExceptionsGetProjectMemberCostExceptionWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get project member cost exception by ID.
     * 
     * @param guid GUID used to get the cost exception. (required)
     * @return ApiResponse&lt;ProjectMemberCostExceptionOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectMemberCostExceptionOutputModel> projectMemberCostExceptionsGetProjectMemberCostExceptionWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectMemberCostExceptionsGetProjectMemberCostExceptionValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectMemberCostExceptionOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project member cost exception by ID. (asynchronously)
     * 
     * @param guid GUID used to get the cost exception. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Link. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectMemberCostExceptionsGetProjectMemberCostExceptionAsync(String guid, final ApiCallback<ProjectMemberCostExceptionOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectMemberCostExceptionsGetProjectMemberCostExceptionValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectMemberCostExceptionOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectStatusTypesGetProjectStatusType
     * @param guid GUID used to get the projectStatusType. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectStatusType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesGetProjectStatusTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectstatustypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectStatusTypesGetProjectStatusTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectStatusTypesGetProjectStatusType(Async)");
        }

        return projectStatusTypesGetProjectStatusTypeCall(guid, _callback);

    }

    /**
     * Get projectStatusType by ID
     * 
     * @param guid GUID used to get the projectStatusType. (required)
     * @return ProjectStatusTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectStatusType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectStatusTypeModel projectStatusTypesGetProjectStatusType(String guid) throws ApiException {
        ApiResponse<ProjectStatusTypeModel> localVarResp = projectStatusTypesGetProjectStatusTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get projectStatusType by ID
     * 
     * @param guid GUID used to get the projectStatusType. (required)
     * @return ApiResponse&lt;ProjectStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectStatusType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectStatusTypeModel> projectStatusTypesGetProjectStatusTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectStatusTypesGetProjectStatusTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectStatusTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projectStatusType by ID (asynchronously)
     * 
     * @param guid GUID used to get the projectStatusType. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectStatusType </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesGetProjectStatusTypeAsync(String guid, final ApiCallback<ProjectStatusTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectStatusTypesGetProjectStatusTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectStatusTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectStatusTypesGetProjectStatusTypes
     * @param active If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from ProjectStatusType name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProjectStatusTypes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesGetProjectStatusTypesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projectstatustypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectStatusTypesGetProjectStatusTypesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return projectStatusTypesGetProjectStatusTypesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all the ProjectStatusTypes
     * 
     * @param active If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from ProjectStatusType name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @return List&lt;ProjectStatusTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProjectStatusTypes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectStatusTypeModel> projectStatusTypesGetProjectStatusTypes(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ProjectStatusTypeModel>> localVarResp = projectStatusTypesGetProjectStatusTypesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the ProjectStatusTypes
     * 
     * @param active If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from ProjectStatusType name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @return ApiResponse&lt;List&lt;ProjectStatusTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProjectStatusTypes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectStatusTypeModel>> projectStatusTypesGetProjectStatusTypesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = projectStatusTypesGetProjectStatusTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ProjectStatusTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the ProjectStatusTypes (asynchronously)
     * 
     * @param active If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from ProjectStatusType name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;isActive&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the ProjectStatusTypes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectStatusTypesGetProjectStatusTypesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ProjectStatusTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectStatusTypesGetProjectStatusTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectStatusTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskStatusesGetProjectTaskStatus
     * @param guid GUID used to get the Project task status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesGetProjectTaskStatusCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projecttaskstatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskStatusesGetProjectTaskStatusValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling projectTaskStatusesGetProjectTaskStatus(Async)");
        }

        return projectTaskStatusesGetProjectTaskStatusCall(guid, _callback);

    }

    /**
     * Get Project task status by ID.
     * 
     * @param guid GUID used to get the Project task status. (required)
     * @return ProjectTaskStatusModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProjectTaskStatusModel projectTaskStatusesGetProjectTaskStatus(String guid) throws ApiException {
        ApiResponse<ProjectTaskStatusModel> localVarResp = projectTaskStatusesGetProjectTaskStatusWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Project task status by ID.
     * 
     * @param guid GUID used to get the Project task status. (required)
     * @return ApiResponse&lt;ProjectTaskStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectTaskStatusModel> projectTaskStatusesGetProjectTaskStatusWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = projectTaskStatusesGetProjectTaskStatusValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProjectTaskStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project task status by ID. (asynchronously)
     * 
     * @param guid GUID used to get the Project task status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project task status. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesGetProjectTaskStatusAsync(String guid, final ApiCallback<ProjectTaskStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskStatusesGetProjectTaskStatusValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProjectTaskStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskStatusesGetProjectTaskStatuses
     * @param active If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from activity type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Activity Types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesGetProjectTaskStatusesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projecttaskstatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskStatusesGetProjectTaskStatusesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return projectTaskStatusesGetProjectTaskStatusesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the project task statuses.
     * 
     * @param active If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from activity type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;ProjectTaskStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Activity Types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTaskStatusModel> projectTaskStatusesGetProjectTaskStatuses(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<ProjectTaskStatusModel>> localVarResp = projectTaskStatusesGetProjectTaskStatusesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the project task statuses.
     * 
     * @param active If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from activity type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ProjectTaskStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Activity Types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTaskStatusModel>> projectTaskStatusesGetProjectTaskStatusesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = projectTaskStatusesGetProjectTaskStatusesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<ProjectTaskStatusModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the project task statuses. (asynchronously)
     * 
     * @param active If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from activity type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Activity Types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskStatusesGetProjectTaskStatusesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<ProjectTaskStatusModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskStatusesGetProjectTaskStatusesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTaskStatusModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalStatusesGetProposalStatus
     * @param guid GUID used to get the Proposal status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesGetProposalStatusCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalstatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalStatusesGetProposalStatusValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalStatusesGetProposalStatus(Async)");
        }

        return proposalStatusesGetProposalStatusCall(guid, _callback);

    }

    /**
     * Get Proposal status by ID
     * 
     * @param guid GUID used to get the Proposal status. (required)
     * @return ProposalStatusOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProposalStatusOutputModel proposalStatusesGetProposalStatus(String guid) throws ApiException {
        ApiResponse<ProposalStatusOutputModel> localVarResp = proposalStatusesGetProposalStatusWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get Proposal status by ID
     * 
     * @param guid GUID used to get the Proposal status. (required)
     * @return ApiResponse&lt;ProposalStatusOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposalStatusOutputModel> proposalStatusesGetProposalStatusWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalStatusesGetProposalStatusValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ProposalStatusOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Proposal status by ID (asynchronously)
     * 
     * @param guid GUID used to get the Proposal status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesGetProposalStatusAsync(String guid, final ApiCallback<ProposalStatusOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalStatusesGetProposalStatusValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ProposalStatusOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalStatusesGetProposalStatuses
     * @param isActive Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param proposalStatusName Optional: Search by proposal status name. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal statuses </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesGetProposalStatusesCall(Boolean isActive, String pageToken, Integer rowCount, String proposalStatusName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalstatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (proposalStatusName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proposalStatusName", proposalStatusName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalStatusesGetProposalStatusesValidateBeforeCall(Boolean isActive, String pageToken, Integer rowCount, String proposalStatusName, final ApiCallback _callback) throws ApiException {
        return proposalStatusesGetProposalStatusesCall(isActive, pageToken, rowCount, proposalStatusName, _callback);

    }

    /**
     * Get all the proposal statuses
     * 
     * @param isActive Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param proposalStatusName Optional: Search by proposal status name. (optional, default to )
     * @return List&lt;ProposalStatusOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal statuses </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProposalStatusOutputModel> proposalStatusesGetProposalStatuses(Boolean isActive, String pageToken, Integer rowCount, String proposalStatusName) throws ApiException {
        ApiResponse<List<ProposalStatusOutputModel>> localVarResp = proposalStatusesGetProposalStatusesWithHttpInfo(isActive, pageToken, rowCount, proposalStatusName);
        return localVarResp.getData();
    }

    /**
     * Get all the proposal statuses
     * 
     * @param isActive Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param proposalStatusName Optional: Search by proposal status name. (optional, default to )
     * @return ApiResponse&lt;List&lt;ProposalStatusOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal statuses </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProposalStatusOutputModel>> proposalStatusesGetProposalStatusesWithHttpInfo(Boolean isActive, String pageToken, Integer rowCount, String proposalStatusName) throws ApiException {
        okhttp3.Call localVarCall = proposalStatusesGetProposalStatusesValidateBeforeCall(isActive, pageToken, rowCount, proposalStatusName, null);
        Type localVarReturnType = new TypeToken<List<ProposalStatusOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the proposal statuses (asynchronously)
     * 
     * @param isActive Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param proposalStatusName Optional: Search by proposal status name. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal statuses </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesGetProposalStatusesAsync(Boolean isActive, String pageToken, Integer rowCount, String proposalStatusName, final ApiCallback<List<ProposalStatusOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalStatusesGetProposalStatusesValidateBeforeCall(isActive, pageToken, rowCount, proposalStatusName, _callback);
        Type localVarReturnType = new TypeToken<List<ProposalStatusOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposalStatusesGetUsage
     * @param guid GUID used to get the proposal status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesGetUsageCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/proposalstatuses/{guid}/usage"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalStatusesGetUsageValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling proposalStatusesGetUsage(Async)");
        }

        return proposalStatusesGetUsageCall(guid, _callback);

    }

    /**
     * Get usage for an proposal status.
     * 
     * @param guid GUID used to get the proposal status. (required)
     * @return List&lt;UsageModel2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UsageModel2> proposalStatusesGetUsage(String guid) throws ApiException {
        ApiResponse<List<UsageModel2>> localVarResp = proposalStatusesGetUsageWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get usage for an proposal status.
     * 
     * @param guid GUID used to get the proposal status. (required)
     * @return ApiResponse&lt;List&lt;UsageModel2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsageModel2>> proposalStatusesGetUsageWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = proposalStatusesGetUsageValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<List<UsageModel2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usage for an proposal status. (asynchronously)
     * 
     * @param guid GUID used to get the proposal status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalStatusesGetUsageAsync(String guid, final ApiCallback<List<UsageModel2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalStatusesGetUsageValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<List<UsageModel2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesGetRole
     * @param guid Id used to get the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleOutputModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetRoleCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/roles/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesGetRoleValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling rolesGetRole(Async)");
        }

        return rolesGetRoleCall(guid, _callback);

    }

    /**
     * Get role by GUID.
     * 
     * @param guid Id used to get the role. (required)
     * @return RoleOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleOutputModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleOutputModel rolesGetRole(String guid) throws ApiException {
        ApiResponse<RoleOutputModel> localVarResp = rolesGetRoleWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get role by GUID.
     * 
     * @param guid Id used to get the role. (required)
     * @return ApiResponse&lt;RoleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleOutputModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleOutputModel> rolesGetRoleWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = rolesGetRoleValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<RoleOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role by GUID. (asynchronously)
     * 
     * @param guid Id used to get the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RoleOutputModel. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetRoleAsync(String guid, final ApiCallback<RoleOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesGetRoleValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<RoleOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesGetRoles
     * @param isActive If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get roles that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the roles. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetRolesCall(Boolean isActive, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesGetRolesValidateBeforeCall(Boolean isActive, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return rolesGetRolesCall(isActive, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get roles.
     * 
     * @param isActive If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get roles that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;RoleOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the roles. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleOutputModel> rolesGetRoles(Boolean isActive, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<RoleOutputModel>> localVarResp = rolesGetRolesWithHttpInfo(isActive, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get roles.
     * 
     * @param isActive If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get roles that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;RoleOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the roles. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleOutputModel>> rolesGetRolesWithHttpInfo(Boolean isActive, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = rolesGetRolesValidateBeforeCall(isActive, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<RoleOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get roles. (asynchronously)
     * 
     * @param isActive If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles. (optional)
     * @param pageToken Optional: Page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param changedSince Optional: Get roles that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the roles. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetRolesAsync(Boolean isActive, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<RoleOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesGetRolesValidateBeforeCall(isActive, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<RoleOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesAccountsGetSalesAccount
     * @param guid Id used to get the sales account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SalesAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsGetSalesAccountCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesaccounts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesAccountsGetSalesAccountValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesAccountsGetSalesAccount(Async)");
        }

        return salesAccountsGetSalesAccountCall(guid, _callback);

    }

    /**
     * Get sales account by ID.
     * 
     * @param guid Id used to get the sales account. (required)
     * @return SalesAccountModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SalesAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SalesAccountModel salesAccountsGetSalesAccount(String guid) throws ApiException {
        ApiResponse<SalesAccountModel> localVarResp = salesAccountsGetSalesAccountWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get sales account by ID.
     * 
     * @param guid Id used to get the sales account. (required)
     * @return ApiResponse&lt;SalesAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SalesAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesAccountModel> salesAccountsGetSalesAccountWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = salesAccountsGetSalesAccountValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<SalesAccountModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales account by ID. (asynchronously)
     * 
     * @param guid Id used to get the sales account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SalesAccountModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsGetSalesAccountAsync(String guid, final ApiCallback<SalesAccountModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesAccountsGetSalesAccountValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<SalesAccountModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesAccountsGetSalesAccounts
     * @param active If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the sales accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsGetSalesAccountsCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesAccountsGetSalesAccountsValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return salesAccountsGetSalesAccountsCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get sales accounts.
     * 
     * @param active If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;SalesAccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the sales accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesAccountModel> salesAccountsGetSalesAccounts(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<SalesAccountModel>> localVarResp = salesAccountsGetSalesAccountsWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get sales accounts.
     * 
     * @param active If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;SalesAccountModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the sales accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesAccountModel>> salesAccountsGetSalesAccountsWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = salesAccountsGetSalesAccountsValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<SalesAccountModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales accounts. (asynchronously)
     * 
     * @param active If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from cost account name or identifier. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Identifier&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the sales accounts. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesAccountsGetSalesAccountsAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<SalesAccountModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesAccountsGetSalesAccountsValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<SalesAccountModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesStatusTypesGetSalesStatusType
     * @param guid GUID used to get the sales status type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesGetSalesStatusTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesstatustypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesStatusTypesGetSalesStatusTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesStatusTypesGetSalesStatusType(Async)");
        }

        return salesStatusTypesGetSalesStatusTypeCall(guid, _callback);

    }

    /**
     * Get sales status type by ID
     * 
     * @param guid GUID used to get the sales status type. (required)
     * @return SalesStatusTypeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SalesStatusTypeOutputModel salesStatusTypesGetSalesStatusType(String guid) throws ApiException {
        ApiResponse<SalesStatusTypeOutputModel> localVarResp = salesStatusTypesGetSalesStatusTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get sales status type by ID
     * 
     * @param guid GUID used to get the sales status type. (required)
     * @return ApiResponse&lt;SalesStatusTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesStatusTypeOutputModel> salesStatusTypesGetSalesStatusTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = salesStatusTypesGetSalesStatusTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<SalesStatusTypeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales status type by ID (asynchronously)
     * 
     * @param guid GUID used to get the sales status type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesGetSalesStatusTypeAsync(String guid, final ApiCallback<SalesStatusTypeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesStatusTypesGetSalesStatusTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<SalesStatusTypeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesStatusTypesGetSalesStatusTypes
     * @param active If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types (optional)
     * @param salesState Optional: Get sales status types of the sales state. (optional)
     * @param firstRow Optional: First row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from sales status type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesGetSalesStatusTypesCall(Boolean active, SalesStatusType salesState, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesstatustypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (salesState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesState", salesState));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesStatusTypesGetSalesStatusTypesValidateBeforeCall(Boolean active, SalesStatusType salesState, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return salesStatusTypesGetSalesStatusTypesCall(active, salesState, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all the sales status types
     * 
     * @param active If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types (optional)
     * @param salesState Optional: Get sales status types of the sales state. (optional)
     * @param firstRow Optional: First row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from sales status type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @return List&lt;SalesStatusTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesStatusTypeOutputModel> salesStatusTypesGetSalesStatusTypes(Boolean active, SalesStatusType salesState, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<SalesStatusTypeOutputModel>> localVarResp = salesStatusTypesGetSalesStatusTypesWithHttpInfo(active, salesState, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the sales status types
     * 
     * @param active If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types (optional)
     * @param salesState Optional: Get sales status types of the sales state. (optional)
     * @param firstRow Optional: First row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from sales status type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @return ApiResponse&lt;List&lt;SalesStatusTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesStatusTypeOutputModel>> salesStatusTypesGetSalesStatusTypesWithHttpInfo(Boolean active, SalesStatusType salesState, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = salesStatusTypesGetSalesStatusTypesValidateBeforeCall(active, salesState, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<SalesStatusTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the sales status types (asynchronously)
     * 
     * @param active If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types (optional)
     * @param salesState Optional: Get sales status types of the sales state. (optional)
     * @param firstRow Optional: First row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from sales status type name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;Code&amp;sortings[1].value&#x3D;Asc\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales status types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesStatusTypesGetSalesStatusTypesAsync(Boolean active, SalesStatusType salesState, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<SalesStatusTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesStatusTypesGetSalesStatusTypesValidateBeforeCall(active, salesState, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<SalesStatusTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeEntryTypesGetTimeEntryType
     * @param guid ID used to get the time entry type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesGetTimeEntryTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeentrytypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntryTypesGetTimeEntryTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling timeEntryTypesGetTimeEntryType(Async)");
        }

        return timeEntryTypesGetTimeEntryTypeCall(guid, _callback);

    }

    /**
     * Get time entry type by ID.
     * 
     * @param guid ID used to get the time entry type. (required)
     * @return TimeEntryTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TimeEntryTypeModel timeEntryTypesGetTimeEntryType(String guid) throws ApiException {
        ApiResponse<TimeEntryTypeModel> localVarResp = timeEntryTypesGetTimeEntryTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get time entry type by ID.
     * 
     * @param guid ID used to get the time entry type. (required)
     * @return ApiResponse&lt;TimeEntryTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimeEntryTypeModel> timeEntryTypesGetTimeEntryTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = timeEntryTypesGetTimeEntryTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TimeEntryTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get time entry type by ID. (asynchronously)
     * 
     * @param guid ID used to get the time entry type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesGetTimeEntryTypeAsync(String guid, final ApiCallback<TimeEntryTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntryTypesGetTimeEntryTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TimeEntryTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeEntryTypesGetTimeEntryTypes
     * @param active Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from time entry type name. (optional, default to )
     * @param calculateRowCount Optional: Calculates the total row count. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesGetTimeEntryTypesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeentrytypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntryTypesGetTimeEntryTypesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return timeEntryTypesGetTimeEntryTypesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all time entry types.
     * 
     * @param active Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from time entry type name. (optional, default to )
     * @param calculateRowCount Optional: Calculates the total row count. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;TimeEntryTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TimeEntryTypeModel> timeEntryTypesGetTimeEntryTypes(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<TimeEntryTypeModel>> localVarResp = timeEntryTypesGetTimeEntryTypesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all time entry types.
     * 
     * @param active Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from time entry type name. (optional, default to )
     * @param calculateRowCount Optional: Calculates the total row count. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;TimeEntryTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimeEntryTypeModel>> timeEntryTypesGetTimeEntryTypesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = timeEntryTypesGetTimeEntryTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<TimeEntryTypeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all time entry types. (asynchronously)
     * 
     * @param active Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from time entry type name. (optional, default to )
     * @param calculateRowCount Optional: Calculates the total row count. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntryTypesGetTimeEntryTypesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<TimeEntryTypeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntryTypesGetTimeEntryTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<TimeEntryTypeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezonesGetTimezone
     * @param guid GUID used to get the timezone. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timezone. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezonesGetTimezoneCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/timezones/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezonesGetTimezoneValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling timezonesGetTimezone(Async)");
        }

        return timezonesGetTimezoneCall(guid, _callback);

    }

    /**
     * Get timezone by ID.
     * 
     * @param guid GUID used to get the timezone. (required)
     * @return TimezoneModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timezone. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TimezoneModel timezonesGetTimezone(String guid) throws ApiException {
        ApiResponse<TimezoneModel> localVarResp = timezonesGetTimezoneWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get timezone by ID.
     * 
     * @param guid GUID used to get the timezone. (required)
     * @return ApiResponse&lt;TimezoneModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timezone. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimezoneModel> timezonesGetTimezoneWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = timezonesGetTimezoneValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TimezoneModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get timezone by ID. (asynchronously)
     * 
     * @param guid GUID used to get the timezone. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timezone. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezonesGetTimezoneAsync(String guid, final ApiCallback<TimezoneModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezonesGetTimezoneValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TimezoneModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezonesGetTimezones
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Timezones. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezonesGetTimezonesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/localization/timezones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezonesGetTimezonesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return timezonesGetTimezonesCall(_callback);

    }

    /**
     * Get all the timezones.
     * 
     * @return List&lt;TimezoneModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Timezones. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TimezoneModel> timezonesGetTimezones() throws ApiException {
        ApiResponse<List<TimezoneModel>> localVarResp = timezonesGetTimezonesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the timezones.
     * 
     * @return ApiResponse&lt;List&lt;TimezoneModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Timezones. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimezoneModel>> timezonesGetTimezonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = timezonesGetTimezonesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TimezoneModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the timezones. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Timezones. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezonesGetTimezonesAsync(final ApiCallback<List<TimezoneModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezonesGetTimezonesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TimezoneModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings
     * @param travelExpenseTypeGuid Guid of the travel expense type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the TravelExpenseCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsCall(String travelExpenseTypeGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypes/{travelExpenseTypeGuid}/travelexpensetypecountrysettings"
            .replace("{" + "travelExpenseTypeGuid" + "}", localVarApiClient.escapeString(travelExpenseTypeGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsValidateBeforeCall(String travelExpenseTypeGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'travelExpenseTypeGuid' is set
        if (travelExpenseTypeGuid == null) {
            throw new ApiException("Missing the required parameter 'travelExpenseTypeGuid' when calling travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings(Async)");
        }

        return travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsCall(travelExpenseTypeGuid, _callback);

    }

    /**
     * Get all country settings for a travel expense type
     * 
     * @param travelExpenseTypeGuid Guid of the travel expense type. (required)
     * @return List&lt;TravelExpenseTypeCountrySettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the TravelExpenseCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelExpenseTypeCountrySettingsModel> travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings(String travelExpenseTypeGuid) throws ApiException {
        ApiResponse<List<TravelExpenseTypeCountrySettingsModel>> localVarResp = travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsWithHttpInfo(travelExpenseTypeGuid);
        return localVarResp.getData();
    }

    /**
     * Get all country settings for a travel expense type
     * 
     * @param travelExpenseTypeGuid Guid of the travel expense type. (required)
     * @return ApiResponse&lt;List&lt;TravelExpenseTypeCountrySettingsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the TravelExpenseCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelExpenseTypeCountrySettingsModel>> travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsWithHttpInfo(String travelExpenseTypeGuid) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsValidateBeforeCall(travelExpenseTypeGuid, null);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeCountrySettingsModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all country settings for a travel expense type (asynchronously)
     * 
     * @param travelExpenseTypeGuid Guid of the travel expense type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the TravelExpenseCountrySettings (tax related information) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsAsync(String travelExpenseTypeGuid, final ApiCallback<List<TravelExpenseTypeCountrySettingsModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsValidateBeforeCall(travelExpenseTypeGuid, _callback);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeCountrySettingsModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypesGetTravelExpenseType
     * @param guid GUID used to get the travel expense type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesGetTravelExpenseTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypesGetTravelExpenseTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelExpenseTypesGetTravelExpenseType(Async)");
        }

        return travelExpenseTypesGetTravelExpenseTypeCall(guid, _callback);

    }

    /**
     * Get travel expense type by guid.
     * 
     * @param guid GUID used to get the travel expense type. (required)
     * @return TravelExpenseTypeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelExpenseTypeOutputModel travelExpenseTypesGetTravelExpenseType(String guid) throws ApiException {
        ApiResponse<TravelExpenseTypeOutputModel> localVarResp = travelExpenseTypesGetTravelExpenseTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get travel expense type by guid.
     * 
     * @param guid GUID used to get the travel expense type. (required)
     * @return ApiResponse&lt;TravelExpenseTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelExpenseTypeOutputModel> travelExpenseTypesGetTravelExpenseTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypesGetTravelExpenseTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TravelExpenseTypeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get travel expense type by guid. (asynchronously)
     * 
     * @param guid GUID used to get the travel expense type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Travel expense type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesGetTravelExpenseTypeAsync(String guid, final ApiCallback<TravelExpenseTypeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypesGetTravelExpenseTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TravelExpenseTypeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelExpenseTypesGetTravelExpenseTypes
     * @param active If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or code. (optional)
     * @param code Optional: Code of the travel expense type. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;IsActive&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;Name&amp;sortings[1].value&#x3D;Desc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesGetTravelExpenseTypesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String code, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelexpensetypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelExpenseTypesGetTravelExpenseTypesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String code, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return travelExpenseTypesGetTravelExpenseTypesCall(active, firstRow, rowCount, textToSearch, code, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all the travel expense types.
     * 
     * @param active If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or code. (optional)
     * @param code Optional: Code of the travel expense type. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;IsActive&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;Name&amp;sortings[1].value&#x3D;Desc. (optional)
     * @return List&lt;TravelExpenseTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelExpenseTypeOutputModel> travelExpenseTypesGetTravelExpenseTypes(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String code, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<TravelExpenseTypeOutputModel>> localVarResp = travelExpenseTypesGetTravelExpenseTypesWithHttpInfo(active, firstRow, rowCount, textToSearch, code, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the travel expense types.
     * 
     * @param active If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or code. (optional)
     * @param code Optional: Code of the travel expense type. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;IsActive&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;Name&amp;sortings[1].value&#x3D;Desc. (optional)
     * @return ApiResponse&lt;List&lt;TravelExpenseTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelExpenseTypeOutputModel>> travelExpenseTypesGetTravelExpenseTypesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String code, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = travelExpenseTypesGetTravelExpenseTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, code, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the travel expense types. (asynchronously)
     * 
     * @param active If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default all. (optional)
     * @param textToSearch Searched string: part of name or code. (optional)
     * @param code Optional: Code of the travel expense type. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;IsActive&amp;sortings[0].value&#x3D;Asc&amp;sortings[1].key&#x3D;Name&amp;sortings[1].value&#x3D;Desc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the travel expense types. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelExpenseTypesGetTravelExpenseTypesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, String code, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<TravelExpenseTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelExpenseTypesGetTravelExpenseTypesValidateBeforeCall(active, firstRow, rowCount, textToSearch, code, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<TravelExpenseTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelPricesGetTravelPrice
     * @param guid Id used to get the travel price. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelPricesGetTravelPriceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelprices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelPricesGetTravelPriceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelPricesGetTravelPrice(Async)");
        }

        return travelPricesGetTravelPriceCall(guid, _callback);

    }

    /**
     * Get travel price by ID.
     * 
     * @param guid Id used to get the travel price. (required)
     * @return TravelPriceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelPriceOutputModel travelPricesGetTravelPrice(String guid) throws ApiException {
        ApiResponse<TravelPriceOutputModel> localVarResp = travelPricesGetTravelPriceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get travel price by ID.
     * 
     * @param guid Id used to get the travel price. (required)
     * @return ApiResponse&lt;TravelPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelPriceOutputModel> travelPricesGetTravelPriceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = travelPricesGetTravelPriceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TravelPriceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get travel price by ID. (asynchronously)
     * 
     * @param guid Id used to get the travel price. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelPricesGetTravelPriceAsync(String guid, final ApiCallback<TravelPriceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelPricesGetTravelPriceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TravelPriceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelPricesGetTravelPrices
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelPricesGetTravelPricesCall(String pricelistVersionGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelistversions/{pricelistVersionGuid}/travelprices"
            .replace("{" + "pricelistVersionGuid" + "}", localVarApiClient.escapeString(pricelistVersionGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPricelistOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPricelistOnly", fromPricelistOnly));
        }

        if (expenseClasses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expenseClasses", expenseClasses));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelPricesGetTravelPricesValidateBeforeCall(String pricelistVersionGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricelistVersionGuid' is set
        if (pricelistVersionGuid == null) {
            throw new ApiException("Missing the required parameter 'pricelistVersionGuid' when calling travelPricesGetTravelPrices(Async)");
        }

        return travelPricesGetTravelPricesCall(pricelistVersionGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount, _callback);

    }

    /**
     * Get all the travel prices for a price list version.
     * 
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @return List&lt;TravelPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelPriceOutputModel> travelPricesGetTravelPrices(String pricelistVersionGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        ApiResponse<List<TravelPriceOutputModel>> localVarResp = travelPricesGetTravelPricesWithHttpInfo(pricelistVersionGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the travel prices for a price list version.
     * 
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @return ApiResponse&lt;List&lt;TravelPriceOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelPriceOutputModel>> travelPricesGetTravelPricesWithHttpInfo(String pricelistVersionGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount) throws ApiException {
        okhttp3.Call localVarCall = travelPricesGetTravelPricesValidateBeforeCall(pricelistVersionGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount, null);
        Type localVarReturnType = new TypeToken<List<TravelPriceOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the travel prices for a price list version. (asynchronously)
     * 
     * @param pricelistVersionGuid ID of the price list version. (required)
     * @param fromPricelistOnly If true return only prices from the price list, if false also returns prices from the products. Default is false. (optional, default to false)
     * @param expenseClasses Optional: List of expense classes to search by, defaults to all travel categories. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from Product name. (optional, default to )
     * @param calculateRowCount Optional: Calculate the number of total rows. Default false &#x3D; total row count is returned as zero. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelPriceModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelPricesGetTravelPricesAsync(String pricelistVersionGuid, Boolean fromPricelistOnly, List<ExpensesClass> expenseClasses, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, final ApiCallback<List<TravelPriceOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelPricesGetTravelPricesValidateBeforeCall(pricelistVersionGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount, _callback);
        Type localVarReturnType = new TypeToken<List<TravelPriceOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementStatusGetTravelReimbursementStatus
     * @param guid reimbursement status id to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelReimbursementStatusModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusGetTravelReimbursementStatusCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursementstatuses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementStatusGetTravelReimbursementStatusValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling travelReimbursementStatusGetTravelReimbursementStatus(Async)");
        }

        return travelReimbursementStatusGetTravelReimbursementStatusCall(guid, _callback);

    }

    /**
     * Get the travel reimbursement statuses by guid.
     * 
     * @param guid reimbursement status id to get. (required)
     * @return TravelReimbursementStatusModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelReimbursementStatusModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TravelReimbursementStatusModel travelReimbursementStatusGetTravelReimbursementStatus(String guid) throws ApiException {
        ApiResponse<TravelReimbursementStatusModel> localVarResp = travelReimbursementStatusGetTravelReimbursementStatusWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get the travel reimbursement statuses by guid.
     * 
     * @param guid reimbursement status id to get. (required)
     * @return ApiResponse&lt;TravelReimbursementStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelReimbursementStatusModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelReimbursementStatusModel> travelReimbursementStatusGetTravelReimbursementStatusWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementStatusGetTravelReimbursementStatusValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TravelReimbursementStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the travel reimbursement statuses by guid. (asynchronously)
     * 
     * @param guid reimbursement status id to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TravelReimbursementStatusModel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusGetTravelReimbursementStatusAsync(String guid, final ApiCallback<TravelReimbursementStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementStatusGetTravelReimbursementStatusValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TravelReimbursementStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelReimbursementStatusGetTravelReimbursementStatuses
     * @param active Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from travel reimbursement name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusGetTravelReimbursementStatusesCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/travelreimbursementstatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelReimbursementStatusGetTravelReimbursementStatusesValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return travelReimbursementStatusGetTravelReimbursementStatusesCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the travel reimbursement statuses.
     * 
     * @param active Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from travel reimbursement name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;TravelReimbursementStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelReimbursementStatusModel> travelReimbursementStatusGetTravelReimbursementStatuses(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<TravelReimbursementStatusModel>> localVarResp = travelReimbursementStatusGetTravelReimbursementStatusesWithHttpInfo(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the travel reimbursement statuses.
     * 
     * @param active Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from travel reimbursement name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;TravelReimbursementStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelReimbursementStatusModel>> travelReimbursementStatusGetTravelReimbursementStatusesWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = travelReimbursementStatusGetTravelReimbursementStatusesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementStatusModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the travel reimbursement statuses. (asynchronously)
     * 
     * @param active Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from travel reimbursement name. (optional, default to )
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelReimbursementStatusGetTravelReimbursementStatusesAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<TravelReimbursementStatusModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelReimbursementStatusGetTravelReimbursementStatusesValidateBeforeCall(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<TravelReimbursementStatusModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertiesGetUserCustomProperties
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive user custom properties. (optional)
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param changedSince Optional: Get custom properties that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesGetUserCustomPropertiesCall(String pageToken, Integer rowCount, Boolean isActive, Boolean isInUse, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (isInUse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInUse", isInUse));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertiesGetUserCustomPropertiesValidateBeforeCall(String pageToken, Integer rowCount, Boolean isActive, Boolean isInUse, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return userCustomPropertiesGetUserCustomPropertiesCall(pageToken, rowCount, isActive, isInUse, changedSince, _callback);

    }

    /**
     * Get the user custom properties.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive user custom properties. (optional)
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param changedSince Optional: Get custom properties that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;UserCustomPropertyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomPropertyOutputModel> userCustomPropertiesGetUserCustomProperties(String pageToken, Integer rowCount, Boolean isActive, Boolean isInUse, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<UserCustomPropertyOutputModel>> localVarResp = userCustomPropertiesGetUserCustomPropertiesWithHttpInfo(pageToken, rowCount, isActive, isInUse, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the user custom properties.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive user custom properties. (optional)
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param changedSince Optional: Get custom properties that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;UserCustomPropertyOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomPropertyOutputModel>> userCustomPropertiesGetUserCustomPropertiesWithHttpInfo(String pageToken, Integer rowCount, Boolean isActive, Boolean isInUse, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertiesGetUserCustomPropertiesValidateBeforeCall(pageToken, rowCount, isActive, isInUse, changedSince, null);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertyOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user custom properties. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive user custom properties. (optional)
     * @param isInUse Optional: Is the customer property used in any custom property usage. (optional)
     * @param changedSince Optional: Get custom properties that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesGetUserCustomPropertiesAsync(String pageToken, Integer rowCount, Boolean isActive, Boolean isInUse, OffsetDateTime changedSince, final ApiCallback<List<UserCustomPropertyOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertiesGetUserCustomPropertiesValidateBeforeCall(pageToken, rowCount, isActive, isInUse, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertyOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertiesGetUserCustomProperty
     * @param guid Id used to get the user custom property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesGetUserCustomPropertyCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertiesGetUserCustomPropertyValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling userCustomPropertiesGetUserCustomProperty(Async)");
        }

        return userCustomPropertiesGetUserCustomPropertyCall(guid, _callback);

    }

    /**
     * Get user custom property by ID.
     * 
     * @param guid Id used to get the user custom property. (required)
     * @return UserCustomPropertyOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserCustomPropertyOutputModel userCustomPropertiesGetUserCustomProperty(String guid) throws ApiException {
        ApiResponse<UserCustomPropertyOutputModel> localVarResp = userCustomPropertiesGetUserCustomPropertyWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get user custom property by ID.
     * 
     * @param guid Id used to get the user custom property. (required)
     * @return ApiResponse&lt;UserCustomPropertyOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCustomPropertyOutputModel> userCustomPropertiesGetUserCustomPropertyWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertiesGetUserCustomPropertyValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<UserCustomPropertyOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user custom property by ID. (asynchronously)
     * 
     * @param guid Id used to get the user custom property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertiesGetUserCustomPropertyAsync(String guid, final ApiCallback<UserCustomPropertyOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertiesGetUserCustomPropertyValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<UserCustomPropertyOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem
     * @param guid Id used to get the user custom property selection item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties/usercustompropertyselectionitems/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem(Async)");
        }

        return userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemCall(guid, _callback);

    }

    /**
     * Get user custom property selection item by ID.
     * 
     * @param guid Id used to get the user custom property selection item. (required)
     * @return UserCustomPropertySelectionItemOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UserCustomPropertySelectionItemOutputModel userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem(String guid) throws ApiException {
        ApiResponse<UserCustomPropertySelectionItemOutputModel> localVarResp = userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get user custom property selection item by ID.
     * 
     * @param guid Id used to get the user custom property selection item. (required)
     * @return ApiResponse&lt;UserCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCustomPropertySelectionItemOutputModel> userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<UserCustomPropertySelectionItemOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user custom property selection item by ID. (asynchronously)
     * 
     * @param guid Id used to get the user custom property selection item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemAsync(String guid, final ApiCallback<UserCustomPropertySelectionItemOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<UserCustomPropertySelectionItemOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems
     * @param customPropertyGuid Custom property id used to get the user custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsCall(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/customproperties/{customPropertyGuid}/usercustompropertyselectionitems"
            .replace("{" + "customPropertyGuid" + "}", localVarApiClient.escapeString(customPropertyGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsValidateBeforeCall(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customPropertyGuid' is set
        if (customPropertyGuid == null) {
            throw new ApiException("Missing the required parameter 'customPropertyGuid' when calling userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems(Async)");
        }

        return userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, _callback);

    }

    /**
     * Get the user custom properties.
     * 
     * @param customPropertyGuid Custom property id used to get the user custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;UserCustomPropertySelectionItemOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserCustomPropertySelectionItemOutputModel> userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<UserCustomPropertySelectionItemOutputModel>> localVarResp = userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsWithHttpInfo(customPropertyGuid, rowCount, isActive, pageToken, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the user custom properties.
     * 
     * @param customPropertyGuid Custom property id used to get the user custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;UserCustomPropertySelectionItemOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserCustomPropertySelectionItemOutputModel>> userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsWithHttpInfo(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsValidateBeforeCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, null);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertySelectionItemOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user custom properties. (asynchronously)
     * 
     * @param customPropertyGuid Custom property id used to get the user custom property selection items. (required)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param isActive Optional: Get only active or inactive selection items. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param changedSince Optional: Get custom property selection items that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsAsync(String customPropertyGuid, Integer rowCount, Boolean isActive, String pageToken, OffsetDateTime changedSince, final ApiCallback<List<UserCustomPropertySelectionItemOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsValidateBeforeCall(customPropertyGuid, rowCount, isActive, pageToken, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<UserCustomPropertySelectionItemOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatRatesGetVatRate
     * @param guid GUID used to get the vat rate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesGetVatRateCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vatrates/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatRatesGetVatRateValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling vatRatesGetVatRate(Async)");
        }

        return vatRatesGetVatRateCall(guid, _callback);

    }

    /**
     * Get a vat rate by GUID
     * 
     * @param guid GUID used to get the vat rate. (required)
     * @return VatRateOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public VatRateOutputModel vatRatesGetVatRate(String guid) throws ApiException {
        ApiResponse<VatRateOutputModel> localVarResp = vatRatesGetVatRateWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get a vat rate by GUID
     * 
     * @param guid GUID used to get the vat rate. (required)
     * @return ApiResponse&lt;VatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VatRateOutputModel> vatRatesGetVatRateWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = vatRatesGetVatRateValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<VatRateOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a vat rate by GUID (asynchronously)
     * 
     * @param guid GUID used to get the vat rate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesGetVatRateAsync(String guid, final ApiCallback<VatRateOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatRatesGetVatRateValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<VatRateOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatRatesGetVatRates
     * @param countryGuid If not given, return all vat rates in organizations country. If given return only for that country. (optional)
     * @param active If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesGetVatRatesCall(String countryGuid, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vatrates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryGuid", countryGuid));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatRatesGetVatRatesValidateBeforeCall(String countryGuid, Boolean active, final ApiCallback _callback) throws ApiException {
        return vatRatesGetVatRatesCall(countryGuid, active, _callback);

    }

    /**
     * Get all organization vat rates
     * 
     * @param countryGuid If not given, return all vat rates in organizations country. If given return only for that country. (optional)
     * @param active If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones. (optional)
     * @return List&lt;VatRateOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<VatRateOutputModel> vatRatesGetVatRates(String countryGuid, Boolean active) throws ApiException {
        ApiResponse<List<VatRateOutputModel>> localVarResp = vatRatesGetVatRatesWithHttpInfo(countryGuid, active);
        return localVarResp.getData();
    }

    /**
     * Get all organization vat rates
     * 
     * @param countryGuid If not given, return all vat rates in organizations country. If given return only for that country. (optional)
     * @param active If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones. (optional)
     * @return ApiResponse&lt;List&lt;VatRateOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VatRateOutputModel>> vatRatesGetVatRatesWithHttpInfo(String countryGuid, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = vatRatesGetVatRatesValidateBeforeCall(countryGuid, active, null);
        Type localVarReturnType = new TypeToken<List<VatRateOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all organization vat rates (asynchronously)
     * 
     * @param countryGuid If not given, return all vat rates in organizations country. If given return only for that country. (optional)
     * @param active If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vat rates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesGetVatRatesAsync(String countryGuid, Boolean active, final ApiCallback<List<VatRateOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatRatesGetVatRatesValidateBeforeCall(countryGuid, active, _callback);
        Type localVarReturnType = new TypeToken<List<VatRateOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workContractsGetWorkContract
     * @param guid Id used to get the work contract. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetWorkContractCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workcontracts/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workContractsGetWorkContractValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workContractsGetWorkContract(Async)");
        }

        return workContractsGetWorkContractCall(guid, _callback);

    }

    /**
     * Get work contract by ID.
     * 
     * @param guid Id used to get the work contract. (required)
     * @return WorkContractOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkContractOutputModel workContractsGetWorkContract(String guid) throws ApiException {
        ApiResponse<WorkContractOutputModel> localVarResp = workContractsGetWorkContractWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get work contract by ID.
     * 
     * @param guid Id used to get the work contract. (required)
     * @return ApiResponse&lt;WorkContractOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkContractOutputModel> workContractsGetWorkContractWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = workContractsGetWorkContractValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get work contract by ID. (asynchronously)
     * 
     * @param guid Id used to get the work contract. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workContractsGetWorkContractAsync(String guid, final ApiCallback<WorkContractOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workContractsGetWorkContractValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<WorkContractOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHourPricesGetWorkHourPrice
     * @param guid Id used to get the work hour price. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHourPricesGetWorkHourPriceCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workhourprices/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHourPricesGetWorkHourPriceValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workHourPricesGetWorkHourPrice(Async)");
        }

        return workHourPricesGetWorkHourPriceCall(guid, _callback);

    }

    /**
     * Get work hour price by ID.
     * 
     * @param guid Id used to get the work hour price. (required)
     * @return WorkHourPriceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkHourPriceOutputModel workHourPricesGetWorkHourPrice(String guid) throws ApiException {
        ApiResponse<WorkHourPriceOutputModel> localVarResp = workHourPricesGetWorkHourPriceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get work hour price by ID.
     * 
     * @param guid Id used to get the work hour price. (required)
     * @return ApiResponse&lt;WorkHourPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkHourPriceOutputModel> workHourPricesGetWorkHourPriceWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = workHourPricesGetWorkHourPriceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<WorkHourPriceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get work hour price by ID. (asynchronously)
     * 
     * @param guid Id used to get the work hour price. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHourPricesGetWorkHourPriceAsync(String guid, final ApiCallback<WorkHourPriceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHourPricesGetWorkHourPriceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<WorkHourPriceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHourPricesGetWorkHourPrices
     * @param pricelistVersionGuid Price list version identifier. (required)
     * @param pageToken Optional: page token to fetch the next page.. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get prices that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> workHourPrices. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHourPricesGetWorkHourPricesCall(String pricelistVersionGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pricelistversions/{pricelistVersionGuid}/workhourprices"
            .replace("{" + "pricelistVersionGuid" + "}", localVarApiClient.escapeString(pricelistVersionGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHourPricesGetWorkHourPricesValidateBeforeCall(String pricelistVersionGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricelistVersionGuid' is set
        if (pricelistVersionGuid == null) {
            throw new ApiException("Missing the required parameter 'pricelistVersionGuid' when calling workHourPricesGetWorkHourPrices(Async)");
        }

        return workHourPricesGetWorkHourPricesCall(pricelistVersionGuid, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get all the workHourPrices for a price list version.
     * 
     * @param pricelistVersionGuid Price list version identifier. (required)
     * @param pageToken Optional: page token to fetch the next page.. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get prices that have been added or changed after this date time (greater or equal). (optional)
     * @return WorkHourPriceOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> workHourPrices. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkHourPriceOutputModel workHourPricesGetWorkHourPrices(String pricelistVersionGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<WorkHourPriceOutputModel> localVarResp = workHourPricesGetWorkHourPricesWithHttpInfo(pricelistVersionGuid, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all the workHourPrices for a price list version.
     * 
     * @param pricelistVersionGuid Price list version identifier. (required)
     * @param pageToken Optional: page token to fetch the next page.. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get prices that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;WorkHourPriceOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> workHourPrices. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkHourPriceOutputModel> workHourPricesGetWorkHourPricesWithHttpInfo(String pricelistVersionGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = workHourPricesGetWorkHourPricesValidateBeforeCall(pricelistVersionGuid, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<WorkHourPriceOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the workHourPrices for a price list version. (asynchronously)
     * 
     * @param pricelistVersionGuid Price list version identifier. (required)
     * @param pageToken Optional: page token to fetch the next page.. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get prices that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> workHourPrices. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHourPricesGetWorkHourPricesAsync(String pricelistVersionGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<WorkHourPriceOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHourPricesGetWorkHourPricesValidateBeforeCall(pricelistVersionGuid, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<WorkHourPriceOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypesGetWorkType
     * @param guid Id used to get the work type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetWorkTypeCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/worktypes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypesGetWorkTypeValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workTypesGetWorkType(Async)");
        }

        return workTypesGetWorkTypeCall(guid, _callback);

    }

    /**
     * Get work type by ID.
     * 
     * @param guid Id used to get the work type. (required)
     * @return WorkTypeOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkTypeOutputModel workTypesGetWorkType(String guid) throws ApiException {
        ApiResponse<WorkTypeOutputModel> localVarResp = workTypesGetWorkTypeWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get work type by ID.
     * 
     * @param guid Id used to get the work type. (required)
     * @return ApiResponse&lt;WorkTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkTypeOutputModel> workTypesGetWorkTypeWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = workTypesGetWorkTypeValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<WorkTypeOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get work type by ID. (asynchronously)
     * 
     * @param guid Id used to get the work type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetWorkTypeAsync(String guid, final ApiCallback<WorkTypeOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypesGetWorkTypeValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<WorkTypeOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypesGetWorkTypes
     * @param active Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned. (optional)
     * @param productive Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from work type name or code. (optional, default to )
     * @param code Optional: Code of the work type. (optional, default to )
     * @param changedSince Optional: Get work types that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetWorkTypesCall(Boolean active, Boolean productive, Integer firstRow, Integer rowCount, String textToSearch, String code, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/worktypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (productive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productive", productive));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypesGetWorkTypesValidateBeforeCall(Boolean active, Boolean productive, Integer firstRow, Integer rowCount, String textToSearch, String code, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        return workTypesGetWorkTypesCall(active, productive, firstRow, rowCount, textToSearch, code, changedSince, calculateRowCount, sortings, _callback);

    }

    /**
     * Get all work types.
     * 
     * @param active Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned. (optional)
     * @param productive Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from work type name or code. (optional, default to )
     * @param code Optional: Code of the work type. (optional, default to )
     * @param changedSince Optional: Get work types that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;WorkTypeOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkTypeOutputModel> workTypesGetWorkTypes(Boolean active, Boolean productive, Integer firstRow, Integer rowCount, String textToSearch, String code, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<WorkTypeOutputModel>> localVarResp = workTypesGetWorkTypesWithHttpInfo(active, productive, firstRow, rowCount, textToSearch, code, changedSince, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all work types.
     * 
     * @param active Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned. (optional)
     * @param productive Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from work type name or code. (optional, default to )
     * @param code Optional: Code of the work type. (optional, default to )
     * @param changedSince Optional: Get work types that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;WorkTypeOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkTypeOutputModel>> workTypesGetWorkTypesWithHttpInfo(Boolean active, Boolean productive, Integer firstRow, Integer rowCount, String textToSearch, String code, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = workTypesGetWorkTypesValidateBeforeCall(active, productive, firstRow, rowCount, textToSearch, code, changedSince, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<WorkTypeOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all work types. (asynchronously)
     * 
     * @param active Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned. (optional)
     * @param productive Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from work type name or code. (optional, default to )
     * @param code Optional: Code of the work type. (optional, default to )
     * @param changedSince Optional: Get work types that have been added or changed after this date time (greater or equal). (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;name&amp;sortings[0].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the work types matching search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypesGetWorkTypesAsync(Boolean active, Boolean productive, Integer firstRow, Integer rowCount, String textToSearch, String code, OffsetDateTime changedSince, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<WorkTypeOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypesGetWorkTypesValidateBeforeCall(active, productive, firstRow, rowCount, textToSearch, code, changedSince, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<WorkTypeOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
