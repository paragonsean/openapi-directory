/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillableStatusType;
import org.openapitools.client.model.DeletedWorkHourModel;
import org.openapitools.client.model.ExceptionModel;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TimeEntryModel;
import org.openapitools.client.model.WorkHourOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HoursReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HoursReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HoursReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for timeEntriesGetTimeEntries
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get time entries that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntriesGetTimeEntriesCall(Integer firstRow, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeentries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (phaseGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "phaseGuid", phaseGuid));
        }

        if (timeEntryTypeGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeEntryTypeGuid", timeEntryTypeGuid));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntriesGetTimeEntriesValidateBeforeCall(Integer firstRow, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return timeEntriesGetTimeEntriesCall(firstRow, phaseGuid, timeEntryTypeGuid, rowCount, changedSince, _callback);

    }

    /**
     * Get the time entries.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get time entries that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;TimeEntryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TimeEntryModel> timeEntriesGetTimeEntries(Integer firstRow, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<TimeEntryModel>> localVarResp = timeEntriesGetTimeEntriesWithHttpInfo(firstRow, phaseGuid, timeEntryTypeGuid, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the time entries.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get time entries that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;TimeEntryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimeEntryModel>> timeEntriesGetTimeEntriesWithHttpInfo(Integer firstRow, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = timeEntriesGetTimeEntriesValidateBeforeCall(firstRow, phaseGuid, timeEntryTypeGuid, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<TimeEntryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the time entries. (asynchronously)
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get time entries that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntriesGetTimeEntriesAsync(Integer firstRow, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<TimeEntryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntriesGetTimeEntriesValidateBeforeCall(firstRow, phaseGuid, timeEntryTypeGuid, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<TimeEntryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeEntriesGetTimeEntriesForUser
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the time entries. Default all. (optional)
     * @param endDate Optional: starting date to which to get the time entries. Default all. (optional)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimeEntries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntriesGetTimeEntriesForUserCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/timeentries"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (phaseGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "phaseGuid", phaseGuid));
        }

        if (timeEntryTypeGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeEntryTypeGuid", timeEntryTypeGuid));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntriesGetTimeEntriesForUserValidateBeforeCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer firstRow, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling timeEntriesGetTimeEntriesForUser(Async)");
        }

        return timeEntriesGetTimeEntriesForUserCall(userGuid, startDate, endDate, phaseGuid, timeEntryTypeGuid, firstRow, rowCount, _callback);

    }

    /**
     * Get all the time entries for a user.
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the time entries. Default all. (optional)
     * @param endDate Optional: starting date to which to get the time entries. Default all. (optional)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;TimeEntryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimeEntries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<TimeEntryModel> timeEntriesGetTimeEntriesForUser(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer firstRow, Integer rowCount) throws ApiException {
        ApiResponse<List<TimeEntryModel>> localVarResp = timeEntriesGetTimeEntriesForUserWithHttpInfo(userGuid, startDate, endDate, phaseGuid, timeEntryTypeGuid, firstRow, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the time entries for a user.
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the time entries. Default all. (optional)
     * @param endDate Optional: starting date to which to get the time entries. Default all. (optional)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;TimeEntryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimeEntries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimeEntryModel>> timeEntriesGetTimeEntriesForUserWithHttpInfo(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer firstRow, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = timeEntriesGetTimeEntriesForUserValidateBeforeCall(userGuid, startDate, endDate, phaseGuid, timeEntryTypeGuid, firstRow, rowCount, null);
        Type localVarReturnType = new TypeToken<List<TimeEntryModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the time entries for a user. (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the time entries. Default all. (optional)
     * @param endDate Optional: starting date to which to get the time entries. Default all. (optional)
     * @param phaseGuid Optional: Filters time entries for given phases. (optional)
     * @param timeEntryTypeGuid Optional: Filters time entries for given time entry types. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimeEntries. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntriesGetTimeEntriesForUserAsync(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> timeEntryTypeGuid, Integer firstRow, Integer rowCount, final ApiCallback<List<TimeEntryModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntriesGetTimeEntriesForUserValidateBeforeCall(userGuid, startDate, endDate, phaseGuid, timeEntryTypeGuid, firstRow, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<TimeEntryModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeEntriesGetTimeEntry
     * @param guid Id used to get the time entry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntriesGetTimeEntryCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeentries/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeEntriesGetTimeEntryValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling timeEntriesGetTimeEntry(Async)");
        }

        return timeEntriesGetTimeEntryCall(guid, _callback);

    }

    /**
     * Get time entry by ID.
     * 
     * @param guid Id used to get the time entry. (required)
     * @return TimeEntryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TimeEntryModel timeEntriesGetTimeEntry(String guid) throws ApiException {
        ApiResponse<TimeEntryModel> localVarResp = timeEntriesGetTimeEntryWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get time entry by ID.
     * 
     * @param guid Id used to get the time entry. (required)
     * @return ApiResponse&lt;TimeEntryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimeEntryModel> timeEntriesGetTimeEntryWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = timeEntriesGetTimeEntryValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<TimeEntryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get time entry by ID. (asynchronously)
     * 
     * @param guid Id used to get the time entry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeEntriesGetTimeEntryAsync(String guid, final ApiCallback<TimeEntryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeEntriesGetTimeEntryValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<TimeEntryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetDeletedWorkHours
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get work hours that have been deleted after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetDeletedWorkHoursCall(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/deletedworkhours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (projectGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectGuids", projectGuids));
        }

        if (userGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userGuids", userGuids));
        }

        if (deletedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletedSince", deletedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetDeletedWorkHoursValidateBeforeCall(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince, final ApiCallback _callback) throws ApiException {
        return workHoursGetDeletedWorkHoursCall(pageToken, rowCount, projectGuids, userGuids, deletedSince, _callback);

    }

    /**
     * Get the deleted work hours.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get work hours that have been deleted after this date time (greater or equal). (optional)
     * @return List&lt;DeletedWorkHourModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<DeletedWorkHourModel> workHoursGetDeletedWorkHours(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince) throws ApiException {
        ApiResponse<List<DeletedWorkHourModel>> localVarResp = workHoursGetDeletedWorkHoursWithHttpInfo(pageToken, rowCount, projectGuids, userGuids, deletedSince);
        return localVarResp.getData();
    }

    /**
     * Get the deleted work hours.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get work hours that have been deleted after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;DeletedWorkHourModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeletedWorkHourModel>> workHoursGetDeletedWorkHoursWithHttpInfo(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetDeletedWorkHoursValidateBeforeCall(pageToken, rowCount, projectGuids, userGuids, deletedSince, null);
        Type localVarReturnType = new TypeToken<List<DeletedWorkHourModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deleted work hours. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param projectGuids Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all. (optional)
     * @param userGuids Optional: ID of the user. If not provided, returns for all users. Default all. (optional)
     * @param deletedSince Optional: Get work hours that have been deleted after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetDeletedWorkHoursAsync(String pageToken, Integer rowCount, List<String> projectGuids, List<String> userGuids, OffsetDateTime deletedSince, final ApiCallback<List<DeletedWorkHourModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetDeletedWorkHoursValidateBeforeCall(pageToken, rowCount, projectGuids, userGuids, deletedSince, _callback);
        Type localVarReturnType = new TypeToken<List<DeletedWorkHourModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetProjectWorkHours
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetProjectWorkHoursCall(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectGuid}/workhours"
            .replace("{" + "projectGuid" + "}", localVarApiClient.escapeString(projectGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (isBilled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBilled", isBilled));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetProjectWorkHoursValidateBeforeCall(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGuid' is set
        if (projectGuid == null) {
            throw new ApiException("Missing the required parameter 'projectGuid' when calling workHoursGetProjectWorkHours(Async)");
        }

        return workHoursGetProjectWorkHoursCall(projectGuid, isBillable, isBilled, startDate, endDate, pageToken, rowCount, _callback);

    }

    /**
     * Get all the work hours for phases of a project for invoicing
     * 
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkHourOutputModel> workHoursGetProjectWorkHours(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<WorkHourOutputModel>> localVarResp = workHoursGetProjectWorkHoursWithHttpInfo(projectGuid, isBillable, isBilled, startDate, endDate, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the work hours for phases of a project for invoicing
     * 
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;WorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkHourOutputModel>> workHoursGetProjectWorkHoursWithHttpInfo(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetProjectWorkHoursValidateBeforeCall(projectGuid, isBillable, isBilled, startDate, endDate, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the work hours for phases of a project for invoicing (asynchronously)
     * 
     * @param projectGuid ID of the project. (required)
     * @param isBillable Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null. (optional)
     * @param isBilled Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null. (optional)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetProjectWorkHoursAsync(String projectGuid, Boolean isBillable, Boolean isBilled, OffsetDateTime startDate, OffsetDateTime endDate, String pageToken, Integer rowCount, final ApiCallback<List<WorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetProjectWorkHoursValidateBeforeCall(projectGuid, isBillable, isBilled, startDate, endDate, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetWorkHour
     * @param guid Id used to get the work hour. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetWorkHourCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workhours/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetWorkHourValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling workHoursGetWorkHour(Async)");
        }

        return workHoursGetWorkHourCall(guid, _callback);

    }

    /**
     * Get work hour by ID
     * 
     * @param guid Id used to get the work hour. (required)
     * @return WorkHourOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkHourOutputModel workHoursGetWorkHour(String guid) throws ApiException {
        ApiResponse<WorkHourOutputModel> localVarResp = workHoursGetWorkHourWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get work hour by ID
     * 
     * @param guid Id used to get the work hour. (required)
     * @return ApiResponse&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkHourOutputModel> workHoursGetWorkHourWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetWorkHourValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<WorkHourOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get work hour by ID (asynchronously)
     * 
     * @param guid Id used to get the work hour. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetWorkHourAsync(String guid, final ApiCallback<WorkHourOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetWorkHourValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<WorkHourOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetWorkHours
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get work hours that have been added or changed after this date time (greater or equal). (optional)
     * @param billableStatus Billable status type (optional)
     * @param eventDateStart Optional: Get work hours that have event date after this date time (greater or equal). (optional)
     * @param eventDateEnd Optional: Get work hours that have event date before this date time (less or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetWorkHoursCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, BillableStatusType billableStatus, LocalDate eventDateStart, LocalDate eventDateEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workhours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (billableStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billableStatus", billableStatus));
        }

        if (eventDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventDateStart", eventDateStart));
        }

        if (eventDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventDateEnd", eventDateEnd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetWorkHoursValidateBeforeCall(String pageToken, Integer rowCount, OffsetDateTime changedSince, BillableStatusType billableStatus, LocalDate eventDateStart, LocalDate eventDateEnd, final ApiCallback _callback) throws ApiException {
        return workHoursGetWorkHoursCall(pageToken, rowCount, changedSince, billableStatus, eventDateStart, eventDateEnd, _callback);

    }

    /**
     * Get the work hours.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get work hours that have been added or changed after this date time (greater or equal). (optional)
     * @param billableStatus Billable status type (optional)
     * @param eventDateStart Optional: Get work hours that have event date after this date time (greater or equal). (optional)
     * @param eventDateEnd Optional: Get work hours that have event date before this date time (less or equal). (optional)
     * @return List&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkHourOutputModel> workHoursGetWorkHours(String pageToken, Integer rowCount, OffsetDateTime changedSince, BillableStatusType billableStatus, LocalDate eventDateStart, LocalDate eventDateEnd) throws ApiException {
        ApiResponse<List<WorkHourOutputModel>> localVarResp = workHoursGetWorkHoursWithHttpInfo(pageToken, rowCount, changedSince, billableStatus, eventDateStart, eventDateEnd);
        return localVarResp.getData();
    }

    /**
     * Get the work hours.
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get work hours that have been added or changed after this date time (greater or equal). (optional)
     * @param billableStatus Billable status type (optional)
     * @param eventDateStart Optional: Get work hours that have event date after this date time (greater or equal). (optional)
     * @param eventDateEnd Optional: Get work hours that have event date before this date time (less or equal). (optional)
     * @return ApiResponse&lt;List&lt;WorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkHourOutputModel>> workHoursGetWorkHoursWithHttpInfo(String pageToken, Integer rowCount, OffsetDateTime changedSince, BillableStatusType billableStatus, LocalDate eventDateStart, LocalDate eventDateEnd) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetWorkHoursValidateBeforeCall(pageToken, rowCount, changedSince, billableStatus, eventDateStart, eventDateEnd, null);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the work hours. (asynchronously)
     * 
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get work hours that have been added or changed after this date time (greater or equal). (optional)
     * @param billableStatus Billable status type (optional)
     * @param eventDateStart Optional: Get work hours that have event date after this date time (greater or equal). (optional)
     * @param eventDateEnd Optional: Get work hours that have event date before this date time (less or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetWorkHoursAsync(String pageToken, Integer rowCount, OffsetDateTime changedSince, BillableStatusType billableStatus, LocalDate eventDateStart, LocalDate eventDateEnd, final ApiCallback<List<WorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetWorkHoursValidateBeforeCall(pageToken, rowCount, changedSince, billableStatus, eventDateStart, eventDateEnd, _callback);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workHoursGetWorkHoursForUser
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param phaseGuid Optional: ID of the phase to get the hours for. Default all. (optional)
     * @param workTypeGuid Optional: ID of the work type. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetWorkHoursForUserCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> workTypeGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userGuid}/workhours"
            .replace("{" + "userGuid" + "}", localVarApiClient.escapeString(userGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (phaseGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "phaseGuid", phaseGuid));
        }

        if (workTypeGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "workTypeGuid", workTypeGuid));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workHoursGetWorkHoursForUserValidateBeforeCall(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> workTypeGuid, String pageToken, Integer rowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling workHoursGetWorkHoursForUser(Async)");
        }

        return workHoursGetWorkHoursForUserCall(userGuid, startDate, endDate, phaseGuid, workTypeGuid, pageToken, rowCount, _callback);

    }

    /**
     * Get all the work hours for a user
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param phaseGuid Optional: ID of the phase to get the hours for. Default all. (optional)
     * @param workTypeGuid Optional: ID of the work type. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return List&lt;WorkHourOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkHourOutputModel> workHoursGetWorkHoursForUser(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> workTypeGuid, String pageToken, Integer rowCount) throws ApiException {
        ApiResponse<List<WorkHourOutputModel>> localVarResp = workHoursGetWorkHoursForUserWithHttpInfo(userGuid, startDate, endDate, phaseGuid, workTypeGuid, pageToken, rowCount);
        return localVarResp.getData();
    }

    /**
     * Get all the work hours for a user
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param phaseGuid Optional: ID of the phase to get the hours for. Default all. (optional)
     * @param workTypeGuid Optional: ID of the work type. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @return ApiResponse&lt;List&lt;WorkHourOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkHourOutputModel>> workHoursGetWorkHoursForUserWithHttpInfo(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> workTypeGuid, String pageToken, Integer rowCount) throws ApiException {
        okhttp3.Call localVarCall = workHoursGetWorkHoursForUserValidateBeforeCall(userGuid, startDate, endDate, phaseGuid, workTypeGuid, pageToken, rowCount, null);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the work hours for a user (asynchronously)
     * 
     * @param userGuid ID of the user. (required)
     * @param startDate Optional: starting date from which to get the hours. Default all. (optional)
     * @param endDate Optional: starting date to which to get the hours. Default all. (optional)
     * @param phaseGuid Optional: ID of the phase to get the hours for. Default all. (optional)
     * @param workTypeGuid Optional: ID of the work type. Default all. (optional)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WorkHours </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workHoursGetWorkHoursForUserAsync(String userGuid, OffsetDateTime startDate, OffsetDateTime endDate, List<String> phaseGuid, List<String> workTypeGuid, String pageToken, Integer rowCount, final ApiCallback<List<WorkHourOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workHoursGetWorkHoursForUserValidateBeforeCall(userGuid, startDate, endDate, phaseGuid, workTypeGuid, pageToken, rowCount, _callback);
        Type localVarReturnType = new TypeToken<List<WorkHourOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
