/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressModel;
import org.openapitools.client.model.ContactCommunicationModel;
import org.openapitools.client.model.ContactModel;
import org.openapitools.client.model.CustomerCountrySettingsOutputModel;
import org.openapitools.client.model.CustomerCustomValueModel;
import org.openapitools.client.model.CustomerMarketSegmentModel;
import org.openapitools.client.model.CustomerModel;
import org.openapitools.client.model.CustomerSalesNoteOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.KeyValuePairOfStringAndObject;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import org.openapitools.client.model.KeywordModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SalesNoteOutputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomersReadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addressesGetAddress
     * @param guid GUID used to get the address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetAddressCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/addresses/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressesGetAddressValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling addressesGetAddress(Async)");
        }

        return addressesGetAddressCall(guid, _callback);

    }

    /**
     * Get address by ID.
     * 
     * @param guid GUID used to get the address. (required)
     * @return AddressModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddressModel addressesGetAddress(String guid) throws ApiException {
        ApiResponse<AddressModel> localVarResp = addressesGetAddressWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get address by ID.
     * 
     * @param guid GUID used to get the address. (required)
     * @return ApiResponse&lt;AddressModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressModel> addressesGetAddressWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = addressesGetAddressValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<AddressModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get address by ID. (asynchronously)
     * 
     * @param guid GUID used to get the address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetAddressAsync(String guid, final ApiCallback<AddressModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressesGetAddressValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<AddressModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addressesGetAddresses
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param changedSince Optional: Get addresses that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetAddressesCall(Integer firstRow, Integer rowCount, Boolean calculateRowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressesGetAddressesValidateBeforeCall(Integer firstRow, Integer rowCount, Boolean calculateRowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return addressesGetAddressesCall(firstRow, rowCount, calculateRowCount, changedSince, _callback);

    }

    /**
     * Get the addresses.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param changedSince Optional: Get addresses that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;AddressModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<AddressModel> addressesGetAddresses(Integer firstRow, Integer rowCount, Boolean calculateRowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<AddressModel>> localVarResp = addressesGetAddressesWithHttpInfo(firstRow, rowCount, calculateRowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the addresses.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param changedSince Optional: Get addresses that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;AddressModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddressModel>> addressesGetAddressesWithHttpInfo(Integer firstRow, Integer rowCount, Boolean calculateRowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = addressesGetAddressesValidateBeforeCall(firstRow, rowCount, calculateRowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<AddressModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the addresses. (asynchronously)
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param changedSince Optional: Get addresses that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetAddressesAsync(Integer firstRow, Integer rowCount, Boolean calculateRowCount, OffsetDateTime changedSince, final ApiCallback<List<AddressModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressesGetAddressesValidateBeforeCall(firstRow, rowCount, calculateRowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<AddressModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addressesGetContactAddress
     * @param contactGuid ID for the contact person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetContactAddressCall(String contactGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactpersons/{contactGuid}/addresses"
            .replace("{" + "contactGuid" + "}", localVarApiClient.escapeString(contactGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressesGetContactAddressValidateBeforeCall(String contactGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGuid' is set
        if (contactGuid == null) {
            throw new ApiException("Missing the required parameter 'contactGuid' when calling addressesGetContactAddress(Async)");
        }

        return addressesGetContactAddressCall(contactGuid, _callback);

    }

    /**
     * Get contact person&#39;s address
     * 
     * @param contactGuid ID for the contact person (required)
     * @return List&lt;AddressModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<AddressModel> addressesGetContactAddress(String contactGuid) throws ApiException {
        ApiResponse<List<AddressModel>> localVarResp = addressesGetContactAddressWithHttpInfo(contactGuid);
        return localVarResp.getData();
    }

    /**
     * Get contact person&#39;s address
     * 
     * @param contactGuid ID for the contact person (required)
     * @return ApiResponse&lt;List&lt;AddressModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddressModel>> addressesGetContactAddressWithHttpInfo(String contactGuid) throws ApiException {
        okhttp3.Call localVarCall = addressesGetContactAddressValidateBeforeCall(contactGuid, null);
        Type localVarReturnType = new TypeToken<List<AddressModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact person&#39;s address (asynchronously)
     * 
     * @param contactGuid ID for the contact person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetContactAddressAsync(String contactGuid, final ApiCallback<List<AddressModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressesGetContactAddressValidateBeforeCall(contactGuid, _callback);
        Type localVarReturnType = new TypeToken<List<AddressModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addressesGetCustomerAddresses
     * @param customerGuid ID for the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Addresses for the customer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetCustomerAddressesCall(String customerGuid, Integer firstRow, Integer rowCount, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/addresses"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressesGetCustomerAddressesValidateBeforeCall(String customerGuid, Integer firstRow, Integer rowCount, Boolean calculateRowCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling addressesGetCustomerAddresses(Async)");
        }

        return addressesGetCustomerAddressesCall(customerGuid, firstRow, rowCount, calculateRowCount, _callback);

    }

    /**
     * Get customer&#39;s addresses
     * 
     * @param customerGuid ID for the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return List&lt;AddressModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Addresses for the customer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<AddressModel> addressesGetCustomerAddresses(String customerGuid, Integer firstRow, Integer rowCount, Boolean calculateRowCount) throws ApiException {
        ApiResponse<List<AddressModel>> localVarResp = addressesGetCustomerAddressesWithHttpInfo(customerGuid, firstRow, rowCount, calculateRowCount);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s addresses
     * 
     * @param customerGuid ID for the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @return ApiResponse&lt;List&lt;AddressModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Addresses for the customer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddressModel>> addressesGetCustomerAddressesWithHttpInfo(String customerGuid, Integer firstRow, Integer rowCount, Boolean calculateRowCount) throws ApiException {
        okhttp3.Call localVarCall = addressesGetCustomerAddressesValidateBeforeCall(customerGuid, firstRow, rowCount, calculateRowCount, null);
        Type localVarReturnType = new TypeToken<List<AddressModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s addresses (asynchronously)
     * 
     * @param customerGuid ID for the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Addresses for the customer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesGetCustomerAddressesAsync(String customerGuid, Integer firstRow, Integer rowCount, Boolean calculateRowCount, final ApiCallback<List<AddressModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressesGetCustomerAddressesValidateBeforeCall(customerGuid, firstRow, rowCount, calculateRowCount, _callback);
        Type localVarReturnType = new TypeToken<List<AddressModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactCommunicationsGetCommunication
     * @param guid GUID used to get the contact communication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact communication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactCommunicationsGetCommunicationCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactcommunications/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactCommunicationsGetCommunicationValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling contactCommunicationsGetCommunication(Async)");
        }

        return contactCommunicationsGetCommunicationCall(guid, _callback);

    }

    /**
     * Get contact communication by ID.
     * 
     * @param guid GUID used to get the contact communication. (required)
     * @return ContactCommunicationModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact communication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ContactCommunicationModel contactCommunicationsGetCommunication(String guid) throws ApiException {
        ApiResponse<ContactCommunicationModel> localVarResp = contactCommunicationsGetCommunicationWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get contact communication by ID.
     * 
     * @param guid GUID used to get the contact communication. (required)
     * @return ApiResponse&lt;ContactCommunicationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact communication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactCommunicationModel> contactCommunicationsGetCommunicationWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = contactCommunicationsGetCommunicationValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ContactCommunicationModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact communication by ID. (asynchronously)
     * 
     * @param guid GUID used to get the contact communication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact communication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactCommunicationsGetCommunicationAsync(String guid, final ApiCallback<ContactCommunicationModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactCommunicationsGetCommunicationValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ContactCommunicationModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactCommunicationsGetCommunications
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact communication value. (optional, default to )
     * @param changedSince Optional: Get contact communications that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactCommunicationsGetCommunicationsCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactcommunications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactCommunicationsGetCommunicationsValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return contactCommunicationsGetCommunicationsCall(active, firstRow, rowCount, textToSearch, changedSince, _callback);

    }

    /**
     * Get all contact communications.
     * 
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact communication value. (optional, default to )
     * @param changedSince Optional: Get contact communications that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ContactCommunicationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactCommunicationModel> contactCommunicationsGetCommunications(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ContactCommunicationModel>> localVarResp = contactCommunicationsGetCommunicationsWithHttpInfo(active, firstRow, rowCount, textToSearch, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all contact communications.
     * 
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact communication value. (optional, default to )
     * @param changedSince Optional: Get contact communications that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ContactCommunicationModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactCommunicationModel>> contactCommunicationsGetCommunicationsWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = contactCommunicationsGetCommunicationsValidateBeforeCall(active, firstRow, rowCount, textToSearch, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ContactCommunicationModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contact communications. (asynchronously)
     * 
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact communication value. (optional, default to )
     * @param changedSince Optional: Get contact communications that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactCommunicationsGetCommunicationsAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, OffsetDateTime changedSince, final ApiCallback<List<ContactCommunicationModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactCommunicationsGetCommunicationsValidateBeforeCall(active, firstRow, rowCount, textToSearch, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ContactCommunicationModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactCommunicationsGetCommunications2
     * @param contactGuid Whose communications are requested. (required)
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactCommunicationsGetCommunications2Call(String contactGuid, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contacts/{contactGuid}/contactcommunications"
            .replace("{" + "contactGuid" + "}", localVarApiClient.escapeString(contactGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactCommunicationsGetCommunications2ValidateBeforeCall(String contactGuid, Boolean active, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGuid' is set
        if (contactGuid == null) {
            throw new ApiException("Missing the required parameter 'contactGuid' when calling contactCommunicationsGetCommunications2(Async)");
        }

        return contactCommunicationsGetCommunications2Call(contactGuid, active, _callback);

    }

    /**
     * Get all communications for a contact.
     * 
     * @param contactGuid Whose communications are requested. (required)
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @return List&lt;ContactCommunicationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactCommunicationModel> contactCommunicationsGetCommunications2(String contactGuid, Boolean active) throws ApiException {
        ApiResponse<List<ContactCommunicationModel>> localVarResp = contactCommunicationsGetCommunications2WithHttpInfo(contactGuid, active);
        return localVarResp.getData();
    }

    /**
     * Get all communications for a contact.
     * 
     * @param contactGuid Whose communications are requested. (required)
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @return ApiResponse&lt;List&lt;ContactCommunicationModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactCommunicationModel>> contactCommunicationsGetCommunications2WithHttpInfo(String contactGuid, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = contactCommunicationsGetCommunications2ValidateBeforeCall(contactGuid, active, null);
        Type localVarReturnType = new TypeToken<List<ContactCommunicationModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all communications for a contact. (asynchronously)
     * 
     * @param contactGuid Whose communications are requested. (required)
     * @param active If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the contact communications. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactCommunicationsGetCommunications2Async(String contactGuid, Boolean active, final ApiCallback<List<ContactCommunicationModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactCommunicationsGetCommunications2ValidateBeforeCall(contactGuid, active, _callback);
        Type localVarReturnType = new TypeToken<List<ContactCommunicationModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsGetContact
     * @param guid GUID used to get the contact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetContactCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactpersons/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsGetContactValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling contactsGetContact(Async)");
        }

        return contactsGetContactCall(guid, _callback);

    }

    /**
     * Get contact by ID.
     * 
     * @param guid GUID used to get the contact. (required)
     * @return ContactModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ContactModel contactsGetContact(String guid) throws ApiException {
        ApiResponse<ContactModel> localVarResp = contactsGetContactWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get contact by ID.
     * 
     * @param guid GUID used to get the contact. (required)
     * @return ApiResponse&lt;ContactModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactModel> contactsGetContactWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = contactsGetContactValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<ContactModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact by ID. (asynchronously)
     * 
     * @param guid GUID used to get the contact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetContactAsync(String guid, final ApiCallback<ContactModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsGetContactValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<ContactModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsGetContacts
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @param searchCriterias Optional: Search criterias. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;FirstName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;LastName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param changedSince Optional: Get contact persons that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetContactsCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndObject> searchCriterias, List<KeyValuePairOfStringAndSortDirection> sortings, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contactpersons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (searchCriterias != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "searchCriterias", searchCriterias));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsGetContactsValidateBeforeCall(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndObject> searchCriterias, List<KeyValuePairOfStringAndSortDirection> sortings, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        return contactsGetContactsCall(active, firstRow, rowCount, textToSearch, searchCriterias, sortings, changedSince, _callback);

    }

    /**
     * Get all the contact persons.
     * 
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @param searchCriterias Optional: Search criterias. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;FirstName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;LastName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param changedSince Optional: Get contact persons that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;ContactModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactModel> contactsGetContacts(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndObject> searchCriterias, List<KeyValuePairOfStringAndSortDirection> sortings, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<ContactModel>> localVarResp = contactsGetContactsWithHttpInfo(active, firstRow, rowCount, textToSearch, searchCriterias, sortings, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get all the contact persons.
     * 
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @param searchCriterias Optional: Search criterias. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;FirstName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;LastName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param changedSince Optional: Get contact persons that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;ContactModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactModel>> contactsGetContactsWithHttpInfo(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndObject> searchCriterias, List<KeyValuePairOfStringAndSortDirection> sortings, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = contactsGetContactsValidateBeforeCall(active, firstRow, rowCount, textToSearch, searchCriterias, sortings, changedSince, null);
        Type localVarReturnType = new TypeToken<List<ContactModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the contact persons. (asynchronously)
     * 
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @param searchCriterias Optional: Search criterias. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;FirstName&amp;sortings[0].value&#x3D;Desc &amp;sortings[1].key&#x3D;LastName&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param changedSince Optional: Get contact persons that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetContactsAsync(Boolean active, Integer firstRow, Integer rowCount, String textToSearch, List<KeyValuePairOfStringAndObject> searchCriterias, List<KeyValuePairOfStringAndSortDirection> sortings, OffsetDateTime changedSince, final ApiCallback<List<ContactModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsGetContactsValidateBeforeCall(active, firstRow, rowCount, textToSearch, searchCriterias, sortings, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<ContactModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsGetCustomerContacts
     * @param customerGuid Customer guid used to get the contact persons. (required)
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetCustomerContactsCall(String customerGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/contactpersons"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsGetCustomerContactsValidateBeforeCall(String customerGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling contactsGetCustomerContacts(Async)");
        }

        return contactsGetCustomerContactsCall(customerGuid, active, firstRow, rowCount, textToSearch, _callback);

    }

    /**
     * Get the contact persons for a customer.
     * 
     * @param customerGuid Customer guid used to get the contact persons. (required)
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @return List&lt;ContactModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactModel> contactsGetCustomerContacts(String customerGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch) throws ApiException {
        ApiResponse<List<ContactModel>> localVarResp = contactsGetCustomerContactsWithHttpInfo(customerGuid, active, firstRow, rowCount, textToSearch);
        return localVarResp.getData();
    }

    /**
     * Get the contact persons for a customer.
     * 
     * @param customerGuid Customer guid used to get the contact persons. (required)
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @return ApiResponse&lt;List&lt;ContactModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactModel>> contactsGetCustomerContactsWithHttpInfo(String customerGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch) throws ApiException {
        okhttp3.Call localVarCall = contactsGetCustomerContactsValidateBeforeCall(customerGuid, active, firstRow, rowCount, textToSearch, null);
        Type localVarReturnType = new TypeToken<List<ContactModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the contact persons for a customer. (asynchronously)
     * 
     * @param customerGuid Customer guid used to get the contact persons. (required)
     * @param active If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons. (optional)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from contact person&#39;s name or communication method (i.e. phone number or email address). (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts for a customer. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetCustomerContactsAsync(String customerGuid, Boolean active, Integer firstRow, Integer rowCount, String textToSearch, final ApiCallback<List<ContactModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsGetCustomerContactsValidateBeforeCall(customerGuid, active, firstRow, rowCount, textToSearch, _callback);
        Type localVarReturnType = new TypeToken<List<ContactModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCountrySettingsGetCustomerCountrySettings
     * @param customerGuid GUID of the customer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCountrySettingsGetCustomerCountrySettingsCall(String customerGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/customercountrysettings"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCountrySettingsGetCustomerCountrySettingsValidateBeforeCall(String customerGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling customerCountrySettingsGetCustomerCountrySettings(Async)");
        }

        return customerCountrySettingsGetCustomerCountrySettingsCall(customerGuid, _callback);

    }

    /**
     * Get all the country settings for a customer.
     * 
     * @param customerGuid GUID of the customer. (required)
     * @return List&lt;CustomerCountrySettingsOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerCountrySettingsOutputModel> customerCountrySettingsGetCustomerCountrySettings(String customerGuid) throws ApiException {
        ApiResponse<List<CustomerCountrySettingsOutputModel>> localVarResp = customerCountrySettingsGetCustomerCountrySettingsWithHttpInfo(customerGuid);
        return localVarResp.getData();
    }

    /**
     * Get all the country settings for a customer.
     * 
     * @param customerGuid GUID of the customer. (required)
     * @return ApiResponse&lt;List&lt;CustomerCountrySettingsOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerCountrySettingsOutputModel>> customerCountrySettingsGetCustomerCountrySettingsWithHttpInfo(String customerGuid) throws ApiException {
        okhttp3.Call localVarCall = customerCountrySettingsGetCustomerCountrySettingsValidateBeforeCall(customerGuid, null);
        Type localVarReturnType = new TypeToken<List<CustomerCountrySettingsOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the country settings for a customer. (asynchronously)
     * 
     * @param customerGuid GUID of the customer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the Currencies. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCountrySettingsGetCustomerCountrySettingsAsync(String customerGuid, final ApiCallback<List<CustomerCountrySettingsOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCountrySettingsGetCustomerCountrySettingsValidateBeforeCall(customerGuid, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerCountrySettingsOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomValuesGetCustomerCustomValue
     * @param guid Id used to get the customer custom value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomValuesGetCustomerCustomValueCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/customvalues/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomValuesGetCustomerCustomValueValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customerCustomValuesGetCustomerCustomValue(Async)");
        }

        return customerCustomValuesGetCustomerCustomValueCall(guid, _callback);

    }

    /**
     * Get customer custom value by ID.
     * 
     * @param guid Id used to get the customer custom value. (required)
     * @return CustomerCustomValueModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerCustomValueModel customerCustomValuesGetCustomerCustomValue(String guid) throws ApiException {
        ApiResponse<CustomerCustomValueModel> localVarResp = customerCustomValuesGetCustomerCustomValueWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get customer custom value by ID.
     * 
     * @param guid Id used to get the customer custom value. (required)
     * @return ApiResponse&lt;CustomerCustomValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerCustomValueModel> customerCustomValuesGetCustomerCustomValueWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = customerCustomValuesGetCustomerCustomValueValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomerCustomValueModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer custom value by ID. (asynchronously)
     * 
     * @param guid Id used to get the customer custom value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomValuesGetCustomerCustomValueAsync(String guid, final ApiCallback<CustomerCustomValueModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomValuesGetCustomerCustomValueValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomerCustomValueModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCustomValuesGetCustomerCustomValues
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive customer custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomValuesGetCustomerCustomValuesCall(String customerGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/customvalues"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (target != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target", target));
        }

        if (calculateRowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculateRowCount", calculateRowCount));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCustomValuesGetCustomerCustomValuesValidateBeforeCall(String customerGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling customerCustomValuesGetCustomerCustomValues(Async)");
        }

        return customerCustomValuesGetCustomerCustomValuesCall(customerGuid, firstRow, rowCount, active, target, calculateRowCount, sortings, _callback);

    }

    /**
     * Get the customer custom values.
     * 
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive customer custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return List&lt;CustomerCustomValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerCustomValueModel> customerCustomValuesGetCustomerCustomValues(String customerGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<CustomerCustomValueModel>> localVarResp = customerCustomValuesGetCustomerCustomValuesWithHttpInfo(customerGuid, firstRow, rowCount, active, target, calculateRowCount, sortings);
        return localVarResp.getData();
    }

    /**
     * Get the customer custom values.
     * 
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive customer custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;CustomerCustomValueModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerCustomValueModel>> customerCustomValuesGetCustomerCustomValuesWithHttpInfo(String customerGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = customerCustomValuesGetCustomerCustomValuesValidateBeforeCall(customerGuid, firstRow, rowCount, active, target, calculateRowCount, sortings, null);
        Type localVarReturnType = new TypeToken<List<CustomerCustomValueModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customer custom values. (asynchronously)
     * 
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param active Optional: Get only values of active or inactive customer custom properties. (optional)
     * @param target List of target for which to get the values. (optional)
     * @param calculateRowCount Optional: Calculate total number of rows. (optional, default to false)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Name&amp;sortings[0].value&#x3D;Desc&amp;sortings[1].key&#x3D;Number&amp;sortings[1].value&#x3D;Asc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Addon required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCustomValuesGetCustomerCustomValuesAsync(String customerGuid, Integer firstRow, Integer rowCount, Boolean active, List<String> target, Boolean calculateRowCount, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<CustomerCustomValueModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCustomValuesGetCustomerCustomValuesValidateBeforeCall(customerGuid, firstRow, rowCount, active, target, calculateRowCount, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerCustomValueModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerMarketSegmentsGetAllCustomerMarketSegments
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from customer market segment name. (optional, default to )
     * @param parentMarketSegmentGuid Optional: Fetches all children of a parent based on parent market segment guid. (optional)
     * @param includeParentLevel Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default &#x3D; true. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerMarketSegmentsGetAllCustomerMarketSegmentsCall(Integer firstRow, Integer rowCount, String textToSearch, String parentMarketSegmentGuid, Boolean includeParentLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customermarketsegments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (textToSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textToSearch", textToSearch));
        }

        if (parentMarketSegmentGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentMarketSegmentGuid", parentMarketSegmentGuid));
        }

        if (includeParentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParentLevel", includeParentLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerMarketSegmentsGetAllCustomerMarketSegmentsValidateBeforeCall(Integer firstRow, Integer rowCount, String textToSearch, String parentMarketSegmentGuid, Boolean includeParentLevel, final ApiCallback _callback) throws ApiException {
        return customerMarketSegmentsGetAllCustomerMarketSegmentsCall(firstRow, rowCount, textToSearch, parentMarketSegmentGuid, includeParentLevel, _callback);

    }

    /**
     * Get all Customer Market Segments.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from customer market segment name. (optional, default to )
     * @param parentMarketSegmentGuid Optional: Fetches all children of a parent based on parent market segment guid. (optional)
     * @param includeParentLevel Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default &#x3D; true. (optional, default to true)
     * @return List&lt;CustomerMarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerMarketSegmentModel> customerMarketSegmentsGetAllCustomerMarketSegments(Integer firstRow, Integer rowCount, String textToSearch, String parentMarketSegmentGuid, Boolean includeParentLevel) throws ApiException {
        ApiResponse<List<CustomerMarketSegmentModel>> localVarResp = customerMarketSegmentsGetAllCustomerMarketSegmentsWithHttpInfo(firstRow, rowCount, textToSearch, parentMarketSegmentGuid, includeParentLevel);
        return localVarResp.getData();
    }

    /**
     * Get all Customer Market Segments.
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from customer market segment name. (optional, default to )
     * @param parentMarketSegmentGuid Optional: Fetches all children of a parent based on parent market segment guid. (optional)
     * @param includeParentLevel Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default &#x3D; true. (optional, default to true)
     * @return ApiResponse&lt;List&lt;CustomerMarketSegmentModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerMarketSegmentModel>> customerMarketSegmentsGetAllCustomerMarketSegmentsWithHttpInfo(Integer firstRow, Integer rowCount, String textToSearch, String parentMarketSegmentGuid, Boolean includeParentLevel) throws ApiException {
        okhttp3.Call localVarCall = customerMarketSegmentsGetAllCustomerMarketSegmentsValidateBeforeCall(firstRow, rowCount, textToSearch, parentMarketSegmentGuid, includeParentLevel, null);
        Type localVarReturnType = new TypeToken<List<CustomerMarketSegmentModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Customer Market Segments. (asynchronously)
     * 
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param textToSearch Optional: Text to search from customer market segment name. (optional, default to )
     * @param parentMarketSegmentGuid Optional: Fetches all children of a parent based on parent market segment guid. (optional)
     * @param includeParentLevel Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default &#x3D; true. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerMarketSegmentsGetAllCustomerMarketSegmentsAsync(Integer firstRow, Integer rowCount, String textToSearch, String parentMarketSegmentGuid, Boolean includeParentLevel, final ApiCallback<List<CustomerMarketSegmentModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerMarketSegmentsGetAllCustomerMarketSegmentsValidateBeforeCall(firstRow, rowCount, textToSearch, parentMarketSegmentGuid, includeParentLevel, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerMarketSegmentModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerMarketSegmentsGetCustomerMarketSegment
     * @param guid Customer market segment guid. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerMarketSegmentsGetCustomerMarketSegmentCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customermarketsegments/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerMarketSegmentsGetCustomerMarketSegmentValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customerMarketSegmentsGetCustomerMarketSegment(Async)");
        }

        return customerMarketSegmentsGetCustomerMarketSegmentCall(guid, _callback);

    }

    /**
     * Get the customer market segment.
     * 
     * @param guid Customer market segment guid. (required)
     * @return CustomerMarketSegmentModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerMarketSegmentModel customerMarketSegmentsGetCustomerMarketSegment(String guid) throws ApiException {
        ApiResponse<CustomerMarketSegmentModel> localVarResp = customerMarketSegmentsGetCustomerMarketSegmentWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get the customer market segment.
     * 
     * @param guid Customer market segment guid. (required)
     * @return ApiResponse&lt;CustomerMarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerMarketSegmentModel> customerMarketSegmentsGetCustomerMarketSegmentWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = customerMarketSegmentsGetCustomerMarketSegmentValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomerMarketSegmentModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customer market segment. (asynchronously)
     * 
     * @param guid Customer market segment guid. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerMarketSegmentsGetCustomerMarketSegmentAsync(String guid, final ApiCallback<CustomerMarketSegmentModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerMarketSegmentsGetCustomerMarketSegmentValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomerMarketSegmentModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerMarketSegmentsGetCustomerMarketSegments
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param includeMarketSegmentsFromRegistry Optional: Return also the markets segments that are not in use for the customer. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerMarketSegmentsGetCustomerMarketSegmentsCall(String customerGuid, Integer firstRow, Integer rowCount, Boolean includeMarketSegmentsFromRegistry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/customermarketsegments"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstRow", firstRow));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (includeMarketSegmentsFromRegistry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMarketSegmentsFromRegistry", includeMarketSegmentsFromRegistry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerMarketSegmentsGetCustomerMarketSegmentsValidateBeforeCall(String customerGuid, Integer firstRow, Integer rowCount, Boolean includeMarketSegmentsFromRegistry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling customerMarketSegmentsGetCustomerMarketSegments(Async)");
        }

        return customerMarketSegmentsGetCustomerMarketSegmentsCall(customerGuid, firstRow, rowCount, includeMarketSegmentsFromRegistry, _callback);

    }

    /**
     * Get the Market Segments for a customer.
     * 
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param includeMarketSegmentsFromRegistry Optional: Return also the markets segments that are not in use for the customer. (optional, default to false)
     * @return List&lt;CustomerMarketSegmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerMarketSegmentModel> customerMarketSegmentsGetCustomerMarketSegments(String customerGuid, Integer firstRow, Integer rowCount, Boolean includeMarketSegmentsFromRegistry) throws ApiException {
        ApiResponse<List<CustomerMarketSegmentModel>> localVarResp = customerMarketSegmentsGetCustomerMarketSegmentsWithHttpInfo(customerGuid, firstRow, rowCount, includeMarketSegmentsFromRegistry);
        return localVarResp.getData();
    }

    /**
     * Get the Market Segments for a customer.
     * 
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param includeMarketSegmentsFromRegistry Optional: Return also the markets segments that are not in use for the customer. (optional, default to false)
     * @return ApiResponse&lt;List&lt;CustomerMarketSegmentModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerMarketSegmentModel>> customerMarketSegmentsGetCustomerMarketSegmentsWithHttpInfo(String customerGuid, Integer firstRow, Integer rowCount, Boolean includeMarketSegmentsFromRegistry) throws ApiException {
        okhttp3.Call localVarCall = customerMarketSegmentsGetCustomerMarketSegmentsValidateBeforeCall(customerGuid, firstRow, rowCount, includeMarketSegmentsFromRegistry, null);
        Type localVarReturnType = new TypeToken<List<CustomerMarketSegmentModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Market Segments for a customer. (asynchronously)
     * 
     * @param customerGuid ID of the customer. (required)
     * @param firstRow Optional: first row to fetch. Default 0 &#x3D; first row. (optional, default to 0)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param includeMarketSegmentsFromRegistry Optional: Return also the markets segments that are not in use for the customer. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Customer Market Segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerMarketSegmentsGetCustomerMarketSegmentsAsync(String customerGuid, Integer firstRow, Integer rowCount, Boolean includeMarketSegmentsFromRegistry, final ApiCallback<List<CustomerMarketSegmentModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerMarketSegmentsGetCustomerMarketSegmentsValidateBeforeCall(customerGuid, firstRow, rowCount, includeMarketSegmentsFromRegistry, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerMarketSegmentModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersGetCustomer
     * @param guid ID used to get the customer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCustomerCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersGetCustomerValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling customersGetCustomer(Async)");
        }

        return customersGetCustomerCall(guid, _callback);

    }

    /**
     * Get customer by GUID.
     * 
     * @param guid ID used to get the customer. (required)
     * @return CustomerModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerModel customersGetCustomer(String guid) throws ApiException {
        ApiResponse<CustomerModel> localVarResp = customersGetCustomerWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get customer by GUID.
     * 
     * @param guid ID used to get the customer. (required)
     * @return ApiResponse&lt;CustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerModel> customersGetCustomerWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = customersGetCustomerValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomerModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer by GUID. (asynchronously)
     * 
     * @param guid ID used to get the customer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCustomerAsync(String guid, final ApiCallback<CustomerModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersGetCustomerValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomerModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersGetCustomers
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers. (optional)
     * @param customerOwnerGuids Optional: List of customer owner ids to search for. Default all. (optional)
     * @param isInternal Optional: When true returns only internal customer (optional)
     * @param numbers Optional: List of customer numbers. (optional)
     * @param changedSince Optional: Get customers that have been added or changed after this date time (greater or equal). (optional)
     * @param emailAddresses Optional: Get customers where email address matches to any provided email address (optional)
     * @param customerNames Optional: Get customers where customer name matches to any provided customer name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the customers </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCustomersCall(String pageToken, Integer rowCount, Boolean isActive, List<String> customerOwnerGuids, Boolean isInternal, List<Long> numbers, OffsetDateTime changedSince, List<String> emailAddresses, List<String> customerNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (customerOwnerGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerOwnerGuids", customerOwnerGuids));
        }

        if (isInternal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInternal", isInternal));
        }

        if (numbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "numbers", numbers));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        if (emailAddresses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "emailAddresses", emailAddresses));
        }

        if (customerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "customerNames", customerNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersGetCustomersValidateBeforeCall(String pageToken, Integer rowCount, Boolean isActive, List<String> customerOwnerGuids, Boolean isInternal, List<Long> numbers, OffsetDateTime changedSince, List<String> emailAddresses, List<String> customerNames, final ApiCallback _callback) throws ApiException {
        return customersGetCustomersCall(pageToken, rowCount, isActive, customerOwnerGuids, isInternal, numbers, changedSince, emailAddresses, customerNames, _callback);

    }

    /**
     * Get all the customers
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers. (optional)
     * @param customerOwnerGuids Optional: List of customer owner ids to search for. Default all. (optional)
     * @param isInternal Optional: When true returns only internal customer (optional)
     * @param numbers Optional: List of customer numbers. (optional)
     * @param changedSince Optional: Get customers that have been added or changed after this date time (greater or equal). (optional)
     * @param emailAddresses Optional: Get customers where email address matches to any provided email address (optional)
     * @param customerNames Optional: Get customers where customer name matches to any provided customer name (optional)
     * @return List&lt;CustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the customers </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerModel> customersGetCustomers(String pageToken, Integer rowCount, Boolean isActive, List<String> customerOwnerGuids, Boolean isInternal, List<Long> numbers, OffsetDateTime changedSince, List<String> emailAddresses, List<String> customerNames) throws ApiException {
        ApiResponse<List<CustomerModel>> localVarResp = customersGetCustomersWithHttpInfo(pageToken, rowCount, isActive, customerOwnerGuids, isInternal, numbers, changedSince, emailAddresses, customerNames);
        return localVarResp.getData();
    }

    /**
     * Get all the customers
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers. (optional)
     * @param customerOwnerGuids Optional: List of customer owner ids to search for. Default all. (optional)
     * @param isInternal Optional: When true returns only internal customer (optional)
     * @param numbers Optional: List of customer numbers. (optional)
     * @param changedSince Optional: Get customers that have been added or changed after this date time (greater or equal). (optional)
     * @param emailAddresses Optional: Get customers where email address matches to any provided email address (optional)
     * @param customerNames Optional: Get customers where customer name matches to any provided customer name (optional)
     * @return ApiResponse&lt;List&lt;CustomerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the customers </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerModel>> customersGetCustomersWithHttpInfo(String pageToken, Integer rowCount, Boolean isActive, List<String> customerOwnerGuids, Boolean isInternal, List<Long> numbers, OffsetDateTime changedSince, List<String> emailAddresses, List<String> customerNames) throws ApiException {
        okhttp3.Call localVarCall = customersGetCustomersValidateBeforeCall(pageToken, rowCount, isActive, customerOwnerGuids, isInternal, numbers, changedSince, emailAddresses, customerNames, null);
        Type localVarReturnType = new TypeToken<List<CustomerModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the customers (asynchronously)
     * 
     * @param pageToken  (optional)
     * @param rowCount Optional: How many rows to fetch. (optional)
     * @param isActive If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers. (optional)
     * @param customerOwnerGuids Optional: List of customer owner ids to search for. Default all. (optional)
     * @param isInternal Optional: When true returns only internal customer (optional)
     * @param numbers Optional: List of customer numbers. (optional)
     * @param changedSince Optional: Get customers that have been added or changed after this date time (greater or equal). (optional)
     * @param emailAddresses Optional: Get customers where email address matches to any provided email address (optional)
     * @param customerNames Optional: Get customers where customer name matches to any provided customer name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All the customers </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCustomersAsync(String pageToken, Integer rowCount, Boolean isActive, List<String> customerOwnerGuids, Boolean isInternal, List<Long> numbers, OffsetDateTime changedSince, List<String> emailAddresses, List<String> customerNames, final ApiCallback<List<CustomerModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersGetCustomersValidateBeforeCall(pageToken, rowCount, isActive, customerOwnerGuids, isInternal, numbers, changedSince, emailAddresses, customerNames, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsGetContactKeywords
     * @param contactGuid ID of the user whose keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetContactKeywordsCall(String contactGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contacts/{contactGuid}/keywords"
            .replace("{" + "contactGuid" + "}", localVarApiClient.escapeString(contactGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (sortings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortings", sortings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsGetContactKeywordsValidateBeforeCall(String contactGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGuid' is set
        if (contactGuid == null) {
            throw new ApiException("Missing the required parameter 'contactGuid' when calling keywordsGetContactKeywords(Async)");
        }

        return keywordsGetContactKeywordsCall(contactGuid, active, sortings, _callback);

    }

    /**
     * Get all the keywords for contact.
     * 
     * @param contactGuid ID of the user whose keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return List&lt;KeywordModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<KeywordModel> keywordsGetContactKeywords(String contactGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        ApiResponse<List<KeywordModel>> localVarResp = keywordsGetContactKeywordsWithHttpInfo(contactGuid, active, sortings);
        return localVarResp.getData();
    }

    /**
     * Get all the keywords for contact.
     * 
     * @param contactGuid ID of the user whose keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;KeywordModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeywordModel>> keywordsGetContactKeywordsWithHttpInfo(String contactGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings) throws ApiException {
        okhttp3.Call localVarCall = keywordsGetContactKeywordsValidateBeforeCall(contactGuid, active, sortings, null);
        Type localVarReturnType = new TypeToken<List<KeywordModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the keywords for contact. (asynchronously)
     * 
     * @param contactGuid ID of the user whose keywords are requested. (required)
     * @param active If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords. (optional)
     * @param sortings Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \&quot;Desc\&quot; or \&quot;Asc\&quot;. Example: \&quot;?sortings[0].key&#x3D;Keyword&amp;sortings[0].value&#x3D;Desc\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Keywords. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsGetContactKeywordsAsync(String contactGuid, Boolean active, List<KeyValuePairOfStringAndSortDirection> sortings, final ApiCallback<List<KeywordModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsGetContactKeywordsValidateBeforeCall(contactGuid, active, sortings, _callback);
        Type localVarReturnType = new TypeToken<List<KeywordModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesGetAllCustomerSalesNotes_0
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetAllCustomerSalesNotes_0Call(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/salesnotes"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesGetAllCustomerSalesNotes_0ValidateBeforeCall(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling salesNotesGetAllCustomerSalesNotes_0(Async)");
        }

        return salesNotesGetAllCustomerSalesNotes_0Call(customerGuid, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the sales notes by customer guid.
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;SalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesNoteOutputModel> salesNotesGetAllCustomerSalesNotes_0(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<SalesNoteOutputModel>> localVarResp = salesNotesGetAllCustomerSalesNotes_0WithHttpInfo(customerGuid, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the sales notes by customer guid.
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;SalesNoteOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesNoteOutputModel>> salesNotesGetAllCustomerSalesNotes_0WithHttpInfo(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = salesNotesGetAllCustomerSalesNotes_0ValidateBeforeCall(customerGuid, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<SalesNoteOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the sales notes by customer guid. (asynchronously)
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetAllCustomerSalesNotes_0Async(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<SalesNoteOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesGetAllCustomerSalesNotes_0ValidateBeforeCall(customerGuid, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<SalesNoteOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesGetCustomerSalesNote
     * @param guid GUID used to get the customer sales note. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetCustomerSalesNoteCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customersalesnotes/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesGetCustomerSalesNoteValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling salesNotesGetCustomerSalesNote(Async)");
        }

        return salesNotesGetCustomerSalesNoteCall(guid, _callback);

    }

    /**
     * Get customer sales note by ID.
     * 
     * @param guid GUID used to get the customer sales note. (required)
     * @return CustomerSalesNoteOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerSalesNoteOutputModel salesNotesGetCustomerSalesNote(String guid) throws ApiException {
        ApiResponse<CustomerSalesNoteOutputModel> localVarResp = salesNotesGetCustomerSalesNoteWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get customer sales note by ID.
     * 
     * @param guid GUID used to get the customer sales note. (required)
     * @return ApiResponse&lt;CustomerSalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerSalesNoteOutputModel> salesNotesGetCustomerSalesNoteWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = salesNotesGetCustomerSalesNoteValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CustomerSalesNoteOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer sales note by ID. (asynchronously)
     * 
     * @param guid GUID used to get the customer sales note. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectNote </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetCustomerSalesNoteAsync(String guid, final ApiCallback<CustomerSalesNoteOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesGetCustomerSalesNoteValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CustomerSalesNoteOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesNotesGetCustomerSalesNotes
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetCustomerSalesNotesCall(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerGuid}/customersalesnotes"
            .replace("{" + "customerGuid" + "}", localVarApiClient.escapeString(customerGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (rowCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rowCount", rowCount));
        }

        if (changedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedSince", changedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ClientIdAuth", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesNotesGetCustomerSalesNotesValidateBeforeCall(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerGuid' is set
        if (customerGuid == null) {
            throw new ApiException("Missing the required parameter 'customerGuid' when calling salesNotesGetCustomerSalesNotes(Async)");
        }

        return salesNotesGetCustomerSalesNotesCall(customerGuid, pageToken, rowCount, changedSince, _callback);

    }

    /**
     * Get the customer sales notes.
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return List&lt;CustomerSalesNoteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerSalesNoteOutputModel> salesNotesGetCustomerSalesNotes(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        ApiResponse<List<CustomerSalesNoteOutputModel>> localVarResp = salesNotesGetCustomerSalesNotesWithHttpInfo(customerGuid, pageToken, rowCount, changedSince);
        return localVarResp.getData();
    }

    /**
     * Get the customer sales notes.
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @return ApiResponse&lt;List&lt;CustomerSalesNoteOutputModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerSalesNoteOutputModel>> salesNotesGetCustomerSalesNotesWithHttpInfo(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince) throws ApiException {
        okhttp3.Call localVarCall = salesNotesGetCustomerSalesNotesValidateBeforeCall(customerGuid, pageToken, rowCount, changedSince, null);
        Type localVarReturnType = new TypeToken<List<CustomerSalesNoteOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customer sales notes. (asynchronously)
     * 
     * @param customerGuid Customer guid used to get the notes. (required)
     * @param pageToken Optional: page token to fetch the next page. (optional)
     * @param rowCount Optional: How many rows to fetch, Default 20, maximum 100. (optional)
     * @param changedSince Optional: Get sales notes that have been added or changed after this date time (greater or equal). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of sales notes for a customer. </td><td>  * NextPageToken - Page token to fetch the next page <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesNotesGetCustomerSalesNotesAsync(String customerGuid, String pageToken, Integer rowCount, OffsetDateTime changedSince, final ApiCallback<List<CustomerSalesNoteOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesNotesGetCustomerSalesNotesValidateBeforeCall(customerGuid, pageToken, rowCount, changedSince, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerSalesNoteOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
