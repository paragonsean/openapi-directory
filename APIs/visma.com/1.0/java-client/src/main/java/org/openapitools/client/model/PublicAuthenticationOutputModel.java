/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicAuthenticationOutputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicAuthenticationOutputModel {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_EXPIRES_IN = "access_token_expires_in";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_EXPIRES_IN)
  private Long accessTokenExpiresIn;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_EXPIRES_UTC = "access_token_expires_utc";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_EXPIRES_UTC)
  private OffsetDateTime accessTokenExpiresUtc;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_TYPE = "access_token_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_TYPE)
  private String accessTokenType;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refresh_token";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES_IN = "refresh_token_expires_in";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES_IN)
  private Long refreshTokenExpiresIn;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES_UTC = "refresh_token_expires_utc";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES_UTC)
  private OffsetDateTime refreshTokenExpiresUtc;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public PublicAuthenticationOutputModel() {
  }

  public PublicAuthenticationOutputModel accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Get accessToken
   * @return accessToken
   */
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public PublicAuthenticationOutputModel accessTokenExpiresIn(Long accessTokenExpiresIn) {
    this.accessTokenExpiresIn = accessTokenExpiresIn;
    return this;
  }

  /**
   * Get accessTokenExpiresIn
   * @return accessTokenExpiresIn
   */
  @javax.annotation.Nullable
  public Long getAccessTokenExpiresIn() {
    return accessTokenExpiresIn;
  }

  public void setAccessTokenExpiresIn(Long accessTokenExpiresIn) {
    this.accessTokenExpiresIn = accessTokenExpiresIn;
  }


  public PublicAuthenticationOutputModel accessTokenExpiresUtc(OffsetDateTime accessTokenExpiresUtc) {
    this.accessTokenExpiresUtc = accessTokenExpiresUtc;
    return this;
  }

  /**
   * Get accessTokenExpiresUtc
   * @return accessTokenExpiresUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccessTokenExpiresUtc() {
    return accessTokenExpiresUtc;
  }

  public void setAccessTokenExpiresUtc(OffsetDateTime accessTokenExpiresUtc) {
    this.accessTokenExpiresUtc = accessTokenExpiresUtc;
  }


  public PublicAuthenticationOutputModel accessTokenType(String accessTokenType) {
    this.accessTokenType = accessTokenType;
    return this;
  }

  /**
   * Get accessTokenType
   * @return accessTokenType
   */
  @javax.annotation.Nullable
  public String getAccessTokenType() {
    return accessTokenType;
  }

  public void setAccessTokenType(String accessTokenType) {
    this.accessTokenType = accessTokenType;
  }


  public PublicAuthenticationOutputModel refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * Get refreshToken
   * @return refreshToken
   */
  @javax.annotation.Nullable
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public PublicAuthenticationOutputModel refreshTokenExpiresIn(Long refreshTokenExpiresIn) {
    this.refreshTokenExpiresIn = refreshTokenExpiresIn;
    return this;
  }

  /**
   * Get refreshTokenExpiresIn
   * @return refreshTokenExpiresIn
   */
  @javax.annotation.Nullable
  public Long getRefreshTokenExpiresIn() {
    return refreshTokenExpiresIn;
  }

  public void setRefreshTokenExpiresIn(Long refreshTokenExpiresIn) {
    this.refreshTokenExpiresIn = refreshTokenExpiresIn;
  }


  public PublicAuthenticationOutputModel refreshTokenExpiresUtc(OffsetDateTime refreshTokenExpiresUtc) {
    this.refreshTokenExpiresUtc = refreshTokenExpiresUtc;
    return this;
  }

  /**
   * Get refreshTokenExpiresUtc
   * @return refreshTokenExpiresUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRefreshTokenExpiresUtc() {
    return refreshTokenExpiresUtc;
  }

  public void setRefreshTokenExpiresUtc(OffsetDateTime refreshTokenExpiresUtc) {
    this.refreshTokenExpiresUtc = refreshTokenExpiresUtc;
  }


  public PublicAuthenticationOutputModel scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicAuthenticationOutputModel publicAuthenticationOutputModel = (PublicAuthenticationOutputModel) o;
    return Objects.equals(this.accessToken, publicAuthenticationOutputModel.accessToken) &&
        Objects.equals(this.accessTokenExpiresIn, publicAuthenticationOutputModel.accessTokenExpiresIn) &&
        Objects.equals(this.accessTokenExpiresUtc, publicAuthenticationOutputModel.accessTokenExpiresUtc) &&
        Objects.equals(this.accessTokenType, publicAuthenticationOutputModel.accessTokenType) &&
        Objects.equals(this.refreshToken, publicAuthenticationOutputModel.refreshToken) &&
        Objects.equals(this.refreshTokenExpiresIn, publicAuthenticationOutputModel.refreshTokenExpiresIn) &&
        Objects.equals(this.refreshTokenExpiresUtc, publicAuthenticationOutputModel.refreshTokenExpiresUtc) &&
        Objects.equals(this.scope, publicAuthenticationOutputModel.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, accessTokenExpiresIn, accessTokenExpiresUtc, accessTokenType, refreshToken, refreshTokenExpiresIn, refreshTokenExpiresUtc, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicAuthenticationOutputModel {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    accessTokenExpiresIn: ").append(toIndentedString(accessTokenExpiresIn)).append("\n");
    sb.append("    accessTokenExpiresUtc: ").append(toIndentedString(accessTokenExpiresUtc)).append("\n");
    sb.append("    accessTokenType: ").append(toIndentedString(accessTokenType)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    refreshTokenExpiresIn: ").append(toIndentedString(refreshTokenExpiresIn)).append("\n");
    sb.append("    refreshTokenExpiresUtc: ").append(toIndentedString(refreshTokenExpiresUtc)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token");
    openapiFields.add("access_token_expires_in");
    openapiFields.add("access_token_expires_utc");
    openapiFields.add("access_token_type");
    openapiFields.add("refresh_token");
    openapiFields.add("refresh_token_expires_in");
    openapiFields.add("refresh_token_expires_utc");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicAuthenticationOutputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicAuthenticationOutputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicAuthenticationOutputModel is not found in the empty JSON string", PublicAuthenticationOutputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicAuthenticationOutputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicAuthenticationOutputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_token") != null && !jsonObj.get("access_token").isJsonNull()) && !jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
      if ((jsonObj.get("access_token_type") != null && !jsonObj.get("access_token_type").isJsonNull()) && !jsonObj.get("access_token_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_type").toString()));
      }
      if ((jsonObj.get("refresh_token") != null && !jsonObj.get("refresh_token").isJsonNull()) && !jsonObj.get("refresh_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicAuthenticationOutputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicAuthenticationOutputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicAuthenticationOutputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicAuthenticationOutputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicAuthenticationOutputModel>() {
           @Override
           public void write(JsonWriter out, PublicAuthenticationOutputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicAuthenticationOutputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicAuthenticationOutputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicAuthenticationOutputModel
   * @throws IOException if the JSON string is invalid with respect to PublicAuthenticationOutputModel
   */
  public static PublicAuthenticationOutputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicAuthenticationOutputModel.class);
  }

  /**
   * Convert an instance of PublicAuthenticationOutputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

