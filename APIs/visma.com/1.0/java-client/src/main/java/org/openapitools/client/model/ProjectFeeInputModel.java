/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.MoneyInputModelWithNullableAmount;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectFeeBillingScheduleType;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.client.model.SimpleInputRequiredModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectFeeInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectFeeInputModel {
  public static final String SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE = "billingDependencyPhase";
  @SerializedName(SERIALIZED_NAME_BILLING_DEPENDENCY_PHASE)
  private SimpleInputModel billingDependencyPhase;

  public static final String SERIALIZED_NAME_BILLING_SCHEDULE = "billingSchedule";
  @SerializedName(SERIALIZED_NAME_BILLING_SCHEDULE)
  private ProjectFeeBillingScheduleType billingSchedule;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private SimpleInputModel costCenter;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_PERIOD_START_DATE = "displayPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PERIOD_START_DATE)
  private LocalDate displayPeriodStartDate;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private LocalDate eventDate;

  public static final String SERIALIZED_NAME_HAS_VOLUME_PRICING = "hasVolumePricing";
  @SerializedName(SERIALIZED_NAME_HAS_VOLUME_PRICING)
  private Boolean hasVolumePricing;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private SimpleInputModel invoice;

  public static final String SERIALIZED_NAME_INVOICE_QUANTITY = "invoiceQuantity";
  @SerializedName(SERIALIZED_NAME_INVOICE_QUANTITY)
  private Double invoiceQuantity;

  public static final String SERIALIZED_NAME_INVOICE_ROW_COMMENT = "invoiceRowComment";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_COMMENT)
  private String invoiceRowComment;

  public static final String SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION = "invoiceRowDescription";
  @SerializedName(SERIALIZED_NAME_INVOICE_ROW_DESCRIPTION)
  private String invoiceRowDescription;

  public static final String SERIALIZED_NAME_IS_BILLABLE = "isBillable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private SimpleInputModel phase;

  public static final String SERIALIZED_NAME_PLANNED_BILLING_DATE = "plannedBillingDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_BILLING_DATE)
  private LocalDate plannedBillingDate;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private SimpleInputModel product;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductType productType;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private SimpleInputRequiredModel project;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT = "salesAccount";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT)
  private SimpleInputModel salesAccount;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private MoneyInputModelWithNullableAmount unitCost;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private MoneyInputModelWithNullableAmount unitPrice;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleInputModel user;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Double vatRate;

  public ProjectFeeInputModel() {
  }

  public ProjectFeeInputModel billingDependencyPhase(SimpleInputModel billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
    return this;
  }

  /**
   * Get billingDependencyPhase
   * @return billingDependencyPhase
   */
  @javax.annotation.Nullable
  public SimpleInputModel getBillingDependencyPhase() {
    return billingDependencyPhase;
  }

  public void setBillingDependencyPhase(SimpleInputModel billingDependencyPhase) {
    this.billingDependencyPhase = billingDependencyPhase;
  }


  public ProjectFeeInputModel billingSchedule(ProjectFeeBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
    return this;
  }

  /**
   * Get billingSchedule
   * @return billingSchedule
   */
  @javax.annotation.Nullable
  public ProjectFeeBillingScheduleType getBillingSchedule() {
    return billingSchedule;
  }

  public void setBillingSchedule(ProjectFeeBillingScheduleType billingSchedule) {
    this.billingSchedule = billingSchedule;
  }


  public ProjectFeeInputModel costCenter(SimpleInputModel costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Get costCenter
   * @return costCenter
   */
  @javax.annotation.Nullable
  public SimpleInputModel getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(SimpleInputModel costCenter) {
    this.costCenter = costCenter;
  }


  public ProjectFeeInputModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectFeeInputModel displayPeriodStartDate(LocalDate displayPeriodStartDate) {
    this.displayPeriodStartDate = displayPeriodStartDate;
    return this;
  }

  /**
   * Get displayPeriodStartDate
   * @return displayPeriodStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getDisplayPeriodStartDate() {
    return displayPeriodStartDate;
  }

  public void setDisplayPeriodStartDate(LocalDate displayPeriodStartDate) {
    this.displayPeriodStartDate = displayPeriodStartDate;
  }


  public ProjectFeeInputModel eventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventDate() {
    return eventDate;
  }

  public void setEventDate(LocalDate eventDate) {
    this.eventDate = eventDate;
  }


  public ProjectFeeInputModel hasVolumePricing(Boolean hasVolumePricing) {
    this.hasVolumePricing = hasVolumePricing;
    return this;
  }

  /**
   * Get hasVolumePricing
   * @return hasVolumePricing
   */
  @javax.annotation.Nullable
  public Boolean getHasVolumePricing() {
    return hasVolumePricing;
  }

  public void setHasVolumePricing(Boolean hasVolumePricing) {
    this.hasVolumePricing = hasVolumePricing;
  }


  public ProjectFeeInputModel invoice(SimpleInputModel invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public SimpleInputModel getInvoice() {
    return invoice;
  }

  public void setInvoice(SimpleInputModel invoice) {
    this.invoice = invoice;
  }


  public ProjectFeeInputModel invoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
    return this;
  }

  /**
   * Get invoiceQuantity
   * @return invoiceQuantity
   */
  @javax.annotation.Nullable
  public Double getInvoiceQuantity() {
    return invoiceQuantity;
  }

  public void setInvoiceQuantity(Double invoiceQuantity) {
    this.invoiceQuantity = invoiceQuantity;
  }


  public ProjectFeeInputModel invoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
    return this;
  }

  /**
   * Get invoiceRowComment
   * @return invoiceRowComment
   */
  @javax.annotation.Nullable
  public String getInvoiceRowComment() {
    return invoiceRowComment;
  }

  public void setInvoiceRowComment(String invoiceRowComment) {
    this.invoiceRowComment = invoiceRowComment;
  }


  public ProjectFeeInputModel invoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
    return this;
  }

  /**
   * Get invoiceRowDescription
   * @return invoiceRowDescription
   */
  @javax.annotation.Nullable
  public String getInvoiceRowDescription() {
    return invoiceRowDescription;
  }

  public void setInvoiceRowDescription(String invoiceRowDescription) {
    this.invoiceRowDescription = invoiceRowDescription;
  }


  public ProjectFeeInputModel isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * Get isBillable
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public ProjectFeeInputModel measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ProjectFeeInputModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectFeeInputModel phase(SimpleInputModel phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public SimpleInputModel getPhase() {
    return phase;
  }

  public void setPhase(SimpleInputModel phase) {
    this.phase = phase;
  }


  public ProjectFeeInputModel plannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
    return this;
  }

  /**
   * Get plannedBillingDate
   * @return plannedBillingDate
   */
  @javax.annotation.Nullable
  public LocalDate getPlannedBillingDate() {
    return plannedBillingDate;
  }

  public void setPlannedBillingDate(LocalDate plannedBillingDate) {
    this.plannedBillingDate = plannedBillingDate;
  }


  public ProjectFeeInputModel product(SimpleInputModel product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public SimpleInputModel getProduct() {
    return product;
  }

  public void setProduct(SimpleInputModel product) {
    this.product = product;
  }


  public ProjectFeeInputModel productType(ProductType productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Get productType
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductType getProductType() {
    return productType;
  }

  public void setProductType(ProductType productType) {
    this.productType = productType;
  }


  public ProjectFeeInputModel project(SimpleInputRequiredModel project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public SimpleInputRequiredModel getProject() {
    return project;
  }

  public void setProject(SimpleInputRequiredModel project) {
    this.project = project;
  }


  public ProjectFeeInputModel quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ProjectFeeInputModel salesAccount(SimpleInputModel salesAccount) {
    this.salesAccount = salesAccount;
    return this;
  }

  /**
   * Get salesAccount
   * @return salesAccount
   */
  @javax.annotation.Nullable
  public SimpleInputModel getSalesAccount() {
    return salesAccount;
  }

  public void setSalesAccount(SimpleInputModel salesAccount) {
    this.salesAccount = salesAccount;
  }


  public ProjectFeeInputModel unitCost(MoneyInputModelWithNullableAmount unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Get unitCost
   * @return unitCost
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(MoneyInputModelWithNullableAmount unitCost) {
    this.unitCost = unitCost;
  }


  public ProjectFeeInputModel unitPrice(MoneyInputModelWithNullableAmount unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public MoneyInputModelWithNullableAmount getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(MoneyInputModelWithNullableAmount unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProjectFeeInputModel user(SimpleInputModel user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public SimpleInputModel getUser() {
    return user;
  }

  public void setUser(SimpleInputModel user) {
    this.user = user;
  }


  public ProjectFeeInputModel vatRate(Double vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * Get vatRate
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Double getVatRate() {
    return vatRate;
  }

  public void setVatRate(Double vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFeeInputModel projectFeeInputModel = (ProjectFeeInputModel) o;
    return Objects.equals(this.billingDependencyPhase, projectFeeInputModel.billingDependencyPhase) &&
        Objects.equals(this.billingSchedule, projectFeeInputModel.billingSchedule) &&
        Objects.equals(this.costCenter, projectFeeInputModel.costCenter) &&
        Objects.equals(this.description, projectFeeInputModel.description) &&
        Objects.equals(this.displayPeriodStartDate, projectFeeInputModel.displayPeriodStartDate) &&
        Objects.equals(this.eventDate, projectFeeInputModel.eventDate) &&
        Objects.equals(this.hasVolumePricing, projectFeeInputModel.hasVolumePricing) &&
        Objects.equals(this.invoice, projectFeeInputModel.invoice) &&
        Objects.equals(this.invoiceQuantity, projectFeeInputModel.invoiceQuantity) &&
        Objects.equals(this.invoiceRowComment, projectFeeInputModel.invoiceRowComment) &&
        Objects.equals(this.invoiceRowDescription, projectFeeInputModel.invoiceRowDescription) &&
        Objects.equals(this.isBillable, projectFeeInputModel.isBillable) &&
        Objects.equals(this.measurementUnit, projectFeeInputModel.measurementUnit) &&
        Objects.equals(this.name, projectFeeInputModel.name) &&
        Objects.equals(this.phase, projectFeeInputModel.phase) &&
        Objects.equals(this.plannedBillingDate, projectFeeInputModel.plannedBillingDate) &&
        Objects.equals(this.product, projectFeeInputModel.product) &&
        Objects.equals(this.productType, projectFeeInputModel.productType) &&
        Objects.equals(this.project, projectFeeInputModel.project) &&
        Objects.equals(this.quantity, projectFeeInputModel.quantity) &&
        Objects.equals(this.salesAccount, projectFeeInputModel.salesAccount) &&
        Objects.equals(this.unitCost, projectFeeInputModel.unitCost) &&
        Objects.equals(this.unitPrice, projectFeeInputModel.unitPrice) &&
        Objects.equals(this.user, projectFeeInputModel.user) &&
        Objects.equals(this.vatRate, projectFeeInputModel.vatRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDependencyPhase, billingSchedule, costCenter, description, displayPeriodStartDate, eventDate, hasVolumePricing, invoice, invoiceQuantity, invoiceRowComment, invoiceRowDescription, isBillable, measurementUnit, name, phase, plannedBillingDate, product, productType, project, quantity, salesAccount, unitCost, unitPrice, user, vatRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFeeInputModel {\n");
    sb.append("    billingDependencyPhase: ").append(toIndentedString(billingDependencyPhase)).append("\n");
    sb.append("    billingSchedule: ").append(toIndentedString(billingSchedule)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayPeriodStartDate: ").append(toIndentedString(displayPeriodStartDate)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    hasVolumePricing: ").append(toIndentedString(hasVolumePricing)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceQuantity: ").append(toIndentedString(invoiceQuantity)).append("\n");
    sb.append("    invoiceRowComment: ").append(toIndentedString(invoiceRowComment)).append("\n");
    sb.append("    invoiceRowDescription: ").append(toIndentedString(invoiceRowDescription)).append("\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    plannedBillingDate: ").append(toIndentedString(plannedBillingDate)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    salesAccount: ").append(toIndentedString(salesAccount)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingDependencyPhase");
    openapiFields.add("billingSchedule");
    openapiFields.add("costCenter");
    openapiFields.add("description");
    openapiFields.add("displayPeriodStartDate");
    openapiFields.add("eventDate");
    openapiFields.add("hasVolumePricing");
    openapiFields.add("invoice");
    openapiFields.add("invoiceQuantity");
    openapiFields.add("invoiceRowComment");
    openapiFields.add("invoiceRowDescription");
    openapiFields.add("isBillable");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("plannedBillingDate");
    openapiFields.add("product");
    openapiFields.add("productType");
    openapiFields.add("project");
    openapiFields.add("quantity");
    openapiFields.add("salesAccount");
    openapiFields.add("unitCost");
    openapiFields.add("unitPrice");
    openapiFields.add("user");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("project");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectFeeInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectFeeInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectFeeInputModel is not found in the empty JSON string", ProjectFeeInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectFeeInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectFeeInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectFeeInputModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingDependencyPhase`
      if (jsonObj.get("billingDependencyPhase") != null && !jsonObj.get("billingDependencyPhase").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("billingDependencyPhase"));
      }
      // validate the optional field `billingSchedule`
      if (jsonObj.get("billingSchedule") != null && !jsonObj.get("billingSchedule").isJsonNull()) {
        ProjectFeeBillingScheduleType.validateJsonElement(jsonObj.get("billingSchedule"));
      }
      // validate the optional field `costCenter`
      if (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("costCenter"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("invoice"));
      }
      if ((jsonObj.get("invoiceRowComment") != null && !jsonObj.get("invoiceRowComment").isJsonNull()) && !jsonObj.get("invoiceRowComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowComment").toString()));
      }
      if ((jsonObj.get("invoiceRowDescription") != null && !jsonObj.get("invoiceRowDescription").isJsonNull()) && !jsonObj.get("invoiceRowDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceRowDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceRowDescription").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductType.validateJsonElement(jsonObj.get("productType"));
      }
      // validate the required field `project`
      SimpleInputRequiredModel.validateJsonElement(jsonObj.get("project"));
      // validate the optional field `salesAccount`
      if (jsonObj.get("salesAccount") != null && !jsonObj.get("salesAccount").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("salesAccount"));
      }
      // validate the optional field `unitCost`
      if (jsonObj.get("unitCost") != null && !jsonObj.get("unitCost").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("unitCost"));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        MoneyInputModelWithNullableAmount.validateJsonElement(jsonObj.get("unitPrice"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        SimpleInputModel.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectFeeInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectFeeInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectFeeInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectFeeInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectFeeInputModel>() {
           @Override
           public void write(JsonWriter out, ProjectFeeInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectFeeInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectFeeInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectFeeInputModel
   * @throws IOException if the JSON string is invalid with respect to ProjectFeeInputModel
   */
  public static ProjectFeeInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectFeeInputModel.class);
  }

  /**
   * Convert an instance of ProjectFeeInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

