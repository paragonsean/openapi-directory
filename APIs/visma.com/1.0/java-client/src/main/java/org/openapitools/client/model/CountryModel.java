/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CountryLanguage;
import org.openapitools.client.model.CountryRegionsStatus;
import org.openapitools.client.model.CountryTimezone;
import org.openapitools.client.model.CurrencyBaseModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CountryModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountryModel {
  public static final String SERIALIZED_NAME_CODE2 = "code2";
  @SerializedName(SERIALIZED_NAME_CODE2)
  private String code2;

  public static final String SERIALIZED_NAME_CODE3 = "code3";
  @SerializedName(SERIALIZED_NAME_CODE3)
  private String code3;

  public static final String SERIALIZED_NAME_COMPANY_REGISTER_URL = "companyRegisterUrl";
  @SerializedName(SERIALIZED_NAME_COMPANY_REGISTER_URL)
  private String companyRegisterUrl;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyBaseModel currency;

  public static final String SERIALIZED_NAME_DEFAULT_CULTURE = "defaultCulture";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CULTURE)
  private String defaultCulture;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private CountryLanguage defaultLanguage;

  public static final String SERIALIZED_NAME_ENGLISH_NAME = "englishName";
  @SerializedName(SERIALIZED_NAME_ENGLISH_NAME)
  private String englishName;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_HAS_REGIONS = "hasRegions";
  @SerializedName(SERIALIZED_NAME_HAS_REGIONS)
  private CountryRegionsStatus hasRegions;

  public static final String SERIALIZED_NAME_IS_IN_E_U = "isInEU";
  @SerializedName(SERIALIZED_NAME_IS_IN_E_U)
  private Boolean isInEU;

  public static final String SERIALIZED_NAME_IS_REGISTRATION_COUNTRY = "isRegistrationCountry";
  @SerializedName(SERIALIZED_NAME_IS_REGISTRATION_COUNTRY)
  private Boolean isRegistrationCountry;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private CountryTimezone timezone;

  public CountryModel() {
  }

  public CountryModel code2(String code2) {
    this.code2 = code2;
    return this;
  }

  /**
   * Get code2
   * @return code2
   */
  @javax.annotation.Nullable
  public String getCode2() {
    return code2;
  }

  public void setCode2(String code2) {
    this.code2 = code2;
  }


  public CountryModel code3(String code3) {
    this.code3 = code3;
    return this;
  }

  /**
   * Get code3
   * @return code3
   */
  @javax.annotation.Nullable
  public String getCode3() {
    return code3;
  }

  public void setCode3(String code3) {
    this.code3 = code3;
  }


  public CountryModel companyRegisterUrl(String companyRegisterUrl) {
    this.companyRegisterUrl = companyRegisterUrl;
    return this;
  }

  /**
   * Get companyRegisterUrl
   * @return companyRegisterUrl
   */
  @javax.annotation.Nullable
  public String getCompanyRegisterUrl() {
    return companyRegisterUrl;
  }

  public void setCompanyRegisterUrl(String companyRegisterUrl) {
    this.companyRegisterUrl = companyRegisterUrl;
  }


  public CountryModel currency(CurrencyBaseModel currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyBaseModel getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyBaseModel currency) {
    this.currency = currency;
  }


  public CountryModel defaultCulture(String defaultCulture) {
    this.defaultCulture = defaultCulture;
    return this;
  }

  /**
   * Get defaultCulture
   * @return defaultCulture
   */
  @javax.annotation.Nullable
  public String getDefaultCulture() {
    return defaultCulture;
  }

  public void setDefaultCulture(String defaultCulture) {
    this.defaultCulture = defaultCulture;
  }


  public CountryModel defaultLanguage(CountryLanguage defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * Get defaultLanguage
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  public CountryLanguage getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(CountryLanguage defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public CountryModel englishName(String englishName) {
    this.englishName = englishName;
    return this;
  }

  /**
   * Get englishName
   * @return englishName
   */
  @javax.annotation.Nullable
  public String getEnglishName() {
    return englishName;
  }

  public void setEnglishName(String englishName) {
    this.englishName = englishName;
  }


  public CountryModel guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public CountryModel hasRegions(CountryRegionsStatus hasRegions) {
    this.hasRegions = hasRegions;
    return this;
  }

  /**
   * Get hasRegions
   * @return hasRegions
   */
  @javax.annotation.Nullable
  public CountryRegionsStatus getHasRegions() {
    return hasRegions;
  }

  public void setHasRegions(CountryRegionsStatus hasRegions) {
    this.hasRegions = hasRegions;
  }


  public CountryModel isInEU(Boolean isInEU) {
    this.isInEU = isInEU;
    return this;
  }

  /**
   * Get isInEU
   * @return isInEU
   */
  @javax.annotation.Nullable
  public Boolean getIsInEU() {
    return isInEU;
  }

  public void setIsInEU(Boolean isInEU) {
    this.isInEU = isInEU;
  }


  public CountryModel isRegistrationCountry(Boolean isRegistrationCountry) {
    this.isRegistrationCountry = isRegistrationCountry;
    return this;
  }

  /**
   * Get isRegistrationCountry
   * @return isRegistrationCountry
   */
  @javax.annotation.Nullable
  public Boolean getIsRegistrationCountry() {
    return isRegistrationCountry;
  }

  public void setIsRegistrationCountry(Boolean isRegistrationCountry) {
    this.isRegistrationCountry = isRegistrationCountry;
  }


  public CountryModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CountryModel timezone(CountryTimezone timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public CountryTimezone getTimezone() {
    return timezone;
  }

  public void setTimezone(CountryTimezone timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryModel countryModel = (CountryModel) o;
    return Objects.equals(this.code2, countryModel.code2) &&
        Objects.equals(this.code3, countryModel.code3) &&
        Objects.equals(this.companyRegisterUrl, countryModel.companyRegisterUrl) &&
        Objects.equals(this.currency, countryModel.currency) &&
        Objects.equals(this.defaultCulture, countryModel.defaultCulture) &&
        Objects.equals(this.defaultLanguage, countryModel.defaultLanguage) &&
        Objects.equals(this.englishName, countryModel.englishName) &&
        Objects.equals(this.guid, countryModel.guid) &&
        Objects.equals(this.hasRegions, countryModel.hasRegions) &&
        Objects.equals(this.isInEU, countryModel.isInEU) &&
        Objects.equals(this.isRegistrationCountry, countryModel.isRegistrationCountry) &&
        Objects.equals(this.name, countryModel.name) &&
        Objects.equals(this.timezone, countryModel.timezone);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code2, code3, companyRegisterUrl, currency, defaultCulture, defaultLanguage, englishName, guid, hasRegions, isInEU, isRegistrationCountry, name, timezone);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryModel {\n");
    sb.append("    code2: ").append(toIndentedString(code2)).append("\n");
    sb.append("    code3: ").append(toIndentedString(code3)).append("\n");
    sb.append("    companyRegisterUrl: ").append(toIndentedString(companyRegisterUrl)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    defaultCulture: ").append(toIndentedString(defaultCulture)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    englishName: ").append(toIndentedString(englishName)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hasRegions: ").append(toIndentedString(hasRegions)).append("\n");
    sb.append("    isInEU: ").append(toIndentedString(isInEU)).append("\n");
    sb.append("    isRegistrationCountry: ").append(toIndentedString(isRegistrationCountry)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code2");
    openapiFields.add("code3");
    openapiFields.add("companyRegisterUrl");
    openapiFields.add("currency");
    openapiFields.add("defaultCulture");
    openapiFields.add("defaultLanguage");
    openapiFields.add("englishName");
    openapiFields.add("guid");
    openapiFields.add("hasRegions");
    openapiFields.add("isInEU");
    openapiFields.add("isRegistrationCountry");
    openapiFields.add("name");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountryModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountryModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountryModel is not found in the empty JSON string", CountryModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountryModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountryModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code2") != null && !jsonObj.get("code2").isJsonNull()) && !jsonObj.get("code2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code2").toString()));
      }
      if ((jsonObj.get("code3") != null && !jsonObj.get("code3").isJsonNull()) && !jsonObj.get("code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code3").toString()));
      }
      if ((jsonObj.get("companyRegisterUrl") != null && !jsonObj.get("companyRegisterUrl").isJsonNull()) && !jsonObj.get("companyRegisterUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyRegisterUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyRegisterUrl").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyBaseModel.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("defaultCulture") != null && !jsonObj.get("defaultCulture").isJsonNull()) && !jsonObj.get("defaultCulture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCulture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCulture").toString()));
      }
      // validate the optional field `defaultLanguage`
      if (jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) {
        CountryLanguage.validateJsonElement(jsonObj.get("defaultLanguage"));
      }
      if ((jsonObj.get("englishName") != null && !jsonObj.get("englishName").isJsonNull()) && !jsonObj.get("englishName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `englishName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("englishName").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      // validate the optional field `hasRegions`
      if (jsonObj.get("hasRegions") != null && !jsonObj.get("hasRegions").isJsonNull()) {
        CountryRegionsStatus.validateJsonElement(jsonObj.get("hasRegions"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `timezone`
      if (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) {
        CountryTimezone.validateJsonElement(jsonObj.get("timezone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountryModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountryModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountryModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountryModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CountryModel>() {
           @Override
           public void write(JsonWriter out, CountryModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountryModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountryModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountryModel
   * @throws IOException if the JSON string is invalid with respect to CountryModel
   */
  public static CountryModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountryModel.class);
  }

  /**
   * Convert an instance of CountryModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

