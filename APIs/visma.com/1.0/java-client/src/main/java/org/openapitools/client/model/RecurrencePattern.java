/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DailyModel;
import org.openapitools.client.model.MonthlyModel;
import org.openapitools.client.model.WeeklyModel;
import org.openapitools.client.model.YearlyModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecurrencePattern
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:00.992903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecurrencePattern {
  public static final String SERIALIZED_NAME_DAILY = "daily";
  @SerializedName(SERIALIZED_NAME_DAILY)
  private DailyModel daily;

  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private MonthlyModel monthly;

  public static final String SERIALIZED_NAME_WEEKLY = "weekly";
  @SerializedName(SERIALIZED_NAME_WEEKLY)
  private WeeklyModel weekly;

  public static final String SERIALIZED_NAME_YEARLY = "yearly";
  @SerializedName(SERIALIZED_NAME_YEARLY)
  private YearlyModel yearly;

  public RecurrencePattern() {
  }

  public RecurrencePattern daily(DailyModel daily) {
    this.daily = daily;
    return this;
  }

  /**
   * Get daily
   * @return daily
   */
  @javax.annotation.Nullable
  public DailyModel getDaily() {
    return daily;
  }

  public void setDaily(DailyModel daily) {
    this.daily = daily;
  }


  public RecurrencePattern monthly(MonthlyModel monthly) {
    this.monthly = monthly;
    return this;
  }

  /**
   * Get monthly
   * @return monthly
   */
  @javax.annotation.Nullable
  public MonthlyModel getMonthly() {
    return monthly;
  }

  public void setMonthly(MonthlyModel monthly) {
    this.monthly = monthly;
  }


  public RecurrencePattern weekly(WeeklyModel weekly) {
    this.weekly = weekly;
    return this;
  }

  /**
   * Get weekly
   * @return weekly
   */
  @javax.annotation.Nullable
  public WeeklyModel getWeekly() {
    return weekly;
  }

  public void setWeekly(WeeklyModel weekly) {
    this.weekly = weekly;
  }


  public RecurrencePattern yearly(YearlyModel yearly) {
    this.yearly = yearly;
    return this;
  }

  /**
   * Get yearly
   * @return yearly
   */
  @javax.annotation.Nullable
  public YearlyModel getYearly() {
    return yearly;
  }

  public void setYearly(YearlyModel yearly) {
    this.yearly = yearly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurrencePattern recurrencePattern = (RecurrencePattern) o;
    return Objects.equals(this.daily, recurrencePattern.daily) &&
        Objects.equals(this.monthly, recurrencePattern.monthly) &&
        Objects.equals(this.weekly, recurrencePattern.weekly) &&
        Objects.equals(this.yearly, recurrencePattern.yearly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daily, monthly, weekly, yearly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurrencePattern {\n");
    sb.append("    daily: ").append(toIndentedString(daily)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    weekly: ").append(toIndentedString(weekly)).append("\n");
    sb.append("    yearly: ").append(toIndentedString(yearly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daily");
    openapiFields.add("monthly");
    openapiFields.add("weekly");
    openapiFields.add("yearly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecurrencePattern
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecurrencePattern.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurrencePattern is not found in the empty JSON string", RecurrencePattern.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecurrencePattern.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecurrencePattern` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `daily`
      if (jsonObj.get("daily") != null && !jsonObj.get("daily").isJsonNull()) {
        DailyModel.validateJsonElement(jsonObj.get("daily"));
      }
      // validate the optional field `monthly`
      if (jsonObj.get("monthly") != null && !jsonObj.get("monthly").isJsonNull()) {
        MonthlyModel.validateJsonElement(jsonObj.get("monthly"));
      }
      // validate the optional field `weekly`
      if (jsonObj.get("weekly") != null && !jsonObj.get("weekly").isJsonNull()) {
        WeeklyModel.validateJsonElement(jsonObj.get("weekly"));
      }
      // validate the optional field `yearly`
      if (jsonObj.get("yearly") != null && !jsonObj.get("yearly").isJsonNull()) {
        YearlyModel.validateJsonElement(jsonObj.get("yearly"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurrencePattern.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurrencePattern' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurrencePattern> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurrencePattern.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurrencePattern>() {
           @Override
           public void write(JsonWriter out, RecurrencePattern value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurrencePattern read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecurrencePattern given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecurrencePattern
   * @throws IOException if the JSON string is invalid with respect to RecurrencePattern
   */
  public static RecurrencePattern fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurrencePattern.class);
  }

  /**
   * Convert an instance of RecurrencePattern to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

