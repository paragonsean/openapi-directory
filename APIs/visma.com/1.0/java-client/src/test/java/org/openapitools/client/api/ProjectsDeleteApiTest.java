/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.PhaseMemberModel;
import org.openapitools.client.model.ResourceAllocationAction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsDeleteApi
 */
@Disabled
public class ProjectsDeleteApiTest {

    private final ProjectsDeleteApi api = new ProjectsDeleteApi();

    /**
     * Delete a keyword from the project
     *
     * Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsDeleteProjectKeywordTest() throws ApiException {
        String projectGuid = null;
        String guid = null;
        api.keywordsDeleteProjectKeyword(projectGuid, guid);
        // TODO: test validations
    }

    /**
     * Deletes a phase member
     *
     * Returns: No Content (204) if succeeded. Only one of transferToRoleGuid and transferToUserGuid can be provided. Use root phase to delete a project member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseMembersDeletePhaseMemberTest() throws ApiException {
        String userGuid = null;
        ResourceAllocationAction resourceAllocationAction = null;
        String transferToUserGuid = null;
        PhaseMemberModel phaseMemberModel = null;
        api.phaseMembersDeletePhaseMember(userGuid, resourceAllocationAction, transferToUserGuid, phaseMemberModel);
        // TODO: test validations
    }

    /**
     * Deletes a phase
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesDeletePhaseTest() throws ApiException {
        String guid = null;
        api.phasesDeletePhase(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project custom value.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomValuesDeleteProjectCustomValueTest() throws ApiException {
        String guid = null;
        api.projectCustomValuesDeleteProjectCustomValue(guid);
        // TODO: test validations
    }

    /**
     * Delete a project forecast
     *
     * Returns: No Content (204) if succeeded. Not found (404) if product can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectForecastsDeleteForecastTest() throws ApiException {
        String guid = null;
        api.projectForecastsDeleteForecast(guid);
        // TODO: test validations
    }

    /**
     * Delete the project forecasts from a month onward, including the given month.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectForecastsDeleteForecastsTest() throws ApiException {
        String projectGuid = null;
        Integer year = null;
        Integer month = null;
        api.projectForecastsDeleteForecasts(projectGuid, year, month);
        // TODO: test validations
    }

    /**
     * Delete an project invoice settings.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if project invoice settings can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsDeleteProjectInvoiceSettings_0Test() throws ApiException {
        String guid = null;
        api.projectInvoiceSettingsDeleteProjectInvoiceSettings_0(guid);
        // TODO: test validations
    }

    /**
     * Deletes all project products of a project.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProductsDeleteAllProjectProductsTest() throws ApiException {
        String projectGuid = null;
        api.projectProductsDeleteAllProjectProducts(projectGuid);
        // TODO: test validations
    }

    /**
     * Deletes a project product.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProductsDeleteProjectProductTest() throws ApiException {
        String guid = null;
        api.projectProductsDeleteProjectProduct(guid);
        // TODO: test validations
    }

    /**
     * Deletes a work hour price
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkHourPricesDeleteProjectWorkHourPriceTest() throws ApiException {
        String guid = null;
        api.projectWorkHourPricesDeleteProjectWorkHourPrice(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project work type.
     *
     * Returns: No Content (204) if succeeded. The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkTypesDeleteProjectWorktypeTest() throws ApiException {
        String guid = null;
        api.projectWorkTypesDeleteProjectWorktype(guid);
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * Returns: No Content (204) if succeeded. Not found (404) if project can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteProjectTest() throws ApiException {
        String guid = null;
        api.projectsDeleteProject(guid);
        // TODO: test validations
    }

    /**
     * Delete a proposal fee row
     *
     * Returns: No Content (204) if succeeded. Not found (404) if proposal fee row can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalFeesDeleteProposalFeeTest() throws ApiException {
        String guid = null;
        api.proposalFeesDeleteProposalFee(guid);
        // TODO: test validations
    }

    /**
     * Delete a proposal subtotal
     *
     * Returns: No Content (204) if succeeded. Not found (404) if proposal subtotal can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSubtotalsDeleteProposalSubtotalTest() throws ApiException {
        String guid = null;
        api.proposalSubtotalsDeleteProposalSubtotal(guid);
        // TODO: test validations
    }

    /**
     * Delete a proposal work row.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if proposal work row can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalWorkhoursDeleteProposalWorkhourTest() throws ApiException {
        String guid = null;
        api.proposalWorkhoursDeleteProposalWorkhour(guid);
        // TODO: test validations
    }

    /**
     * Delete a proposal
     *
     * Returns: No Content (204) if succeeded. Not found (404) if proposal can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalsDeleteProposalTest() throws ApiException {
        String guid = null;
        api.proposalsDeleteProposal(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project sales note.
     *
     * Returns: No Content (204) if succeeded. OK (200) if note has child notes and can&#39;t be deleted. It is marked as IsDeleted &#x3D; true. Not found (404) if note can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesDeleteProjectSalesNoteTest() throws ApiException {
        String guid = null;
        api.salesNotesDeleteProjectSalesNote(guid);
        // TODO: test validations
    }

}
