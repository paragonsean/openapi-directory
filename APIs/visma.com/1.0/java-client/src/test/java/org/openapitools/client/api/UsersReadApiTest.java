/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.FlextimeAdjustmentOutputModel;
import org.openapitools.client.model.FlextimeModel;
import org.openapitools.client.model.GetUsersPurpose;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.UserCustomValueOutputModel;
import org.openapitools.client.model.UserKeywordModel;
import org.openapitools.client.model.UserOutputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkdayModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersReadApi
 */
@Disabled
public class UsersReadApiTest {

    private final UsersReadApi api = new UsersReadApi();

    /**
     * Get Flextime Adjustment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flextimeAdjustmentsGetFlextimeAdjustmentTest() throws ApiException {
        String guid = null;
        FlextimeAdjustmentOutputModel response = api.flextimeAdjustmentsGetFlextimeAdjustment(guid);
        // TODO: test validations
    }

    /**
     * Get the Flextime Adjustments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flextimeAdjustmentsGetFlextimeAdjustmentsTest() throws ApiException {
        String userGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<FlextimeAdjustmentOutputModel> response = api.flextimeAdjustmentsGetFlextimeAdjustments(userGuid, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date. Values are returned only if the advanced time tracking add-on is active.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flextimeGetFlextimeTest() throws ApiException {
        String userGuid = null;
        OffsetDateTime eventDate = null;
        FlextimeModel response = api.flextimeGetFlextime(userGuid, eventDate);
        // TODO: test validations
    }

    /**
     * Get all the keywords for user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsGetUserKeywordsTest() throws ApiException {
        String userGuid = null;
        Boolean active = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<UserKeywordModel> response = api.keywordsGetUserKeywords(userGuid, active, sortings);
        // TODO: test validations
    }

    /**
     * Get all cost exceptions of project members for user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserTest() throws ApiException {
        String userGuid = null;
        Boolean isProjectClosed = null;
        Integer firstRow = null;
        Integer rowCount = null;
        List<ProjectMemberCostExceptionOutputModel> response = api.projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser(userGuid, isProjectClosed, firstRow, rowCount);
        // TODO: test validations
    }

    /**
     * Get user custom value by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomValuesGetUserCustomValueTest() throws ApiException {
        String guid = null;
        UserCustomValueOutputModel response = api.userCustomValuesGetUserCustomValue(guid);
        // TODO: test validations
    }

    /**
     * Get the user custom values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomValuesGetUserCustomValuesTest() throws ApiException {
        String userGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean isActive = null;
        List<String> targets = null;
        OffsetDateTime changedSince = null;
        List<UserCustomValueOutputModel> response = api.userCustomValuesGetUserCustomValues(userGuid, pageToken, rowCount, isActive, targets, changedSince);
        // TODO: test validations
    }

    /**
     * Get user by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetUserTest() throws ApiException {
        String guid = null;
        UserOutputModel response = api.usersGetUser(guid);
        // TODO: test validations
    }

    /**
     * Get users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetUsersTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        Boolean isActive = null;
        List<String> businessUnitGuids = null;
        List<String> keywordGuids = null;
        OffsetDateTime changedSince = null;
        List<String> supervisorUserGuids = null;
        String code = null;
        String email = null;
        GetUsersPurpose purpose = null;
        List<UserOutputModel> response = api.usersGetUsers(pageToken, rowCount, isActive, businessUnitGuids, keywordGuids, changedSince, supervisorUserGuids, code, email, purpose);
        // TODO: test validations
    }

    /**
     * Gets current work contract for the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsGetCurrentWorkContractForUserTest() throws ApiException {
        String userGuid = null;
        WorkContractOutputModel response = api.workContractsGetCurrentWorkContractForUser(userGuid);
        // TODO: test validations
    }

    /**
     * Get work contract by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsGetWorkContract_0Test() throws ApiException {
        String guid = null;
        WorkContractOutputModel response = api.workContractsGetWorkContract_0(guid);
        // TODO: test validations
    }

    /**
     * Get all the work contracts for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsGetWorkContractsForUserTest() throws ApiException {
        String userGuid = null;
        List<WorkContractOutputModel> response = api.workContractsGetWorkContractsForUser(userGuid);
        // TODO: test validations
    }

    /**
     * Get workdays for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workdaysGetWorkdaysTest() throws ApiException {
        String userGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<WorkdayModel> response = api.workdaysGetWorkdays(userGuid, startDate, endDate);
        // TODO: test validations
    }

}
