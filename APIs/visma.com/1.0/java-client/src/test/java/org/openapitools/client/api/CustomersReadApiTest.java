/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressModel;
import org.openapitools.client.model.ContactCommunicationModel;
import org.openapitools.client.model.ContactModel;
import org.openapitools.client.model.CustomerCountrySettingsOutputModel;
import org.openapitools.client.model.CustomerCustomValueModel;
import org.openapitools.client.model.CustomerMarketSegmentModel;
import org.openapitools.client.model.CustomerModel;
import org.openapitools.client.model.CustomerSalesNoteOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.KeyValuePairOfStringAndObject;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import org.openapitools.client.model.KeywordModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SalesNoteOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomersReadApi
 */
@Disabled
public class CustomersReadApiTest {

    private final CustomersReadApi api = new CustomersReadApi();

    /**
     * Get address by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressesGetAddressTest() throws ApiException {
        String guid = null;
        AddressModel response = api.addressesGetAddress(guid);
        // TODO: test validations
    }

    /**
     * Get the addresses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressesGetAddressesTest() throws ApiException {
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean calculateRowCount = null;
        OffsetDateTime changedSince = null;
        List<AddressModel> response = api.addressesGetAddresses(firstRow, rowCount, calculateRowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get contact person&#39;s address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressesGetContactAddressTest() throws ApiException {
        String contactGuid = null;
        List<AddressModel> response = api.addressesGetContactAddress(contactGuid);
        // TODO: test validations
    }

    /**
     * Get customer&#39;s addresses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressesGetCustomerAddressesTest() throws ApiException {
        String customerGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean calculateRowCount = null;
        List<AddressModel> response = api.addressesGetCustomerAddresses(customerGuid, firstRow, rowCount, calculateRowCount);
        // TODO: test validations
    }

    /**
     * Get contact communication by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactCommunicationsGetCommunicationTest() throws ApiException {
        String guid = null;
        ContactCommunicationModel response = api.contactCommunicationsGetCommunication(guid);
        // TODO: test validations
    }

    /**
     * Get all contact communications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactCommunicationsGetCommunicationsTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        OffsetDateTime changedSince = null;
        List<ContactCommunicationModel> response = api.contactCommunicationsGetCommunications(active, firstRow, rowCount, textToSearch, changedSince);
        // TODO: test validations
    }

    /**
     * Get all communications for a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactCommunicationsGetCommunications2Test() throws ApiException {
        String contactGuid = null;
        Boolean active = null;
        List<ContactCommunicationModel> response = api.contactCommunicationsGetCommunications2(contactGuid, active);
        // TODO: test validations
    }

    /**
     * Get contact by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsGetContactTest() throws ApiException {
        String guid = null;
        ContactModel response = api.contactsGetContact(guid);
        // TODO: test validations
    }

    /**
     * Get all the contact persons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsGetContactsTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        List<KeyValuePairOfStringAndObject> searchCriterias = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        OffsetDateTime changedSince = null;
        List<ContactModel> response = api.contactsGetContacts(active, firstRow, rowCount, textToSearch, searchCriterias, sortings, changedSince);
        // TODO: test validations
    }

    /**
     * Get the contact persons for a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsGetCustomerContactsTest() throws ApiException {
        String customerGuid = null;
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        List<ContactModel> response = api.contactsGetCustomerContacts(customerGuid, active, firstRow, rowCount, textToSearch);
        // TODO: test validations
    }

    /**
     * Get all the country settings for a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCountrySettingsGetCustomerCountrySettingsTest() throws ApiException {
        String customerGuid = null;
        List<CustomerCountrySettingsOutputModel> response = api.customerCountrySettingsGetCustomerCountrySettings(customerGuid);
        // TODO: test validations
    }

    /**
     * Get customer custom value by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomValuesGetCustomerCustomValueTest() throws ApiException {
        String guid = null;
        CustomerCustomValueModel response = api.customerCustomValuesGetCustomerCustomValue(guid);
        // TODO: test validations
    }

    /**
     * Get the customer custom values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomValuesGetCustomerCustomValuesTest() throws ApiException {
        String customerGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean active = null;
        List<String> target = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<CustomerCustomValueModel> response = api.customerCustomValuesGetCustomerCustomValues(customerGuid, firstRow, rowCount, active, target, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get all Customer Market Segments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerMarketSegmentsGetAllCustomerMarketSegmentsTest() throws ApiException {
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        String parentMarketSegmentGuid = null;
        Boolean includeParentLevel = null;
        List<CustomerMarketSegmentModel> response = api.customerMarketSegmentsGetAllCustomerMarketSegments(firstRow, rowCount, textToSearch, parentMarketSegmentGuid, includeParentLevel);
        // TODO: test validations
    }

    /**
     * Get the customer market segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerMarketSegmentsGetCustomerMarketSegmentTest() throws ApiException {
        String guid = null;
        CustomerMarketSegmentModel response = api.customerMarketSegmentsGetCustomerMarketSegment(guid);
        // TODO: test validations
    }

    /**
     * Get the Market Segments for a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerMarketSegmentsGetCustomerMarketSegmentsTest() throws ApiException {
        String customerGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean includeMarketSegmentsFromRegistry = null;
        List<CustomerMarketSegmentModel> response = api.customerMarketSegmentsGetCustomerMarketSegments(customerGuid, firstRow, rowCount, includeMarketSegmentsFromRegistry);
        // TODO: test validations
    }

    /**
     * Get customer by GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customersGetCustomerTest() throws ApiException {
        String guid = null;
        CustomerModel response = api.customersGetCustomer(guid);
        // TODO: test validations
    }

    /**
     * Get all the customers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customersGetCustomersTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        Boolean isActive = null;
        List<String> customerOwnerGuids = null;
        Boolean isInternal = null;
        List<Long> numbers = null;
        OffsetDateTime changedSince = null;
        List<String> emailAddresses = null;
        List<String> customerNames = null;
        List<CustomerModel> response = api.customersGetCustomers(pageToken, rowCount, isActive, customerOwnerGuids, isInternal, numbers, changedSince, emailAddresses, customerNames);
        // TODO: test validations
    }

    /**
     * Get all the keywords for contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsGetContactKeywordsTest() throws ApiException {
        String contactGuid = null;
        Boolean active = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<KeywordModel> response = api.keywordsGetContactKeywords(contactGuid, active, sortings);
        // TODO: test validations
    }

    /**
     * Get the sales notes by customer guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesGetAllCustomerSalesNotes_0Test() throws ApiException {
        String customerGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<SalesNoteOutputModel> response = api.salesNotesGetAllCustomerSalesNotes_0(customerGuid, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get customer sales note by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesGetCustomerSalesNoteTest() throws ApiException {
        String guid = null;
        CustomerSalesNoteOutputModel response = api.salesNotesGetCustomerSalesNote(guid);
        // TODO: test validations
    }

    /**
     * Get the customer sales notes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesGetCustomerSalesNotesTest() throws ApiException {
        String customerGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<CustomerSalesNoteOutputModel> response = api.salesNotesGetCustomerSalesNotes(customerGuid, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

}
