/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomPriceListOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.PhaseInputModel;
import org.openapitools.client.model.PhaseMemberModel;
import org.openapitools.client.model.PhaseMembersFromBusinessUnitUsersModel;
import org.openapitools.client.model.PhaseOutputModel;
import org.openapitools.client.model.ProjectCustomValueModel;
import org.openapitools.client.model.ProjectFileModel;
import org.openapitools.client.model.ProjectForecastInputModel;
import org.openapitools.client.model.ProjectForecastOutputModel;
import org.openapitools.client.model.ProjectInputModelBase;
import org.openapitools.client.model.ProjectInvoiceSettingsInputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;
import org.openapitools.client.model.ProjectKeywordModel;
import org.openapitools.client.model.ProjectOutputModel;
import org.openapitools.client.model.ProjectProductInputModel;
import org.openapitools.client.model.ProjectProductOutputModel;
import org.openapitools.client.model.ProjectSalesNoteInputModel;
import org.openapitools.client.model.ProjectSalesNoteOutputModel;
import org.openapitools.client.model.ProjectWorkHourPriceInputModel;
import org.openapitools.client.model.ProjectWorkHourPriceOutputModel;
import org.openapitools.client.model.ProjectWorkTypeModel;
import org.openapitools.client.model.ProposalFeeRowInputModel;
import org.openapitools.client.model.ProposalFeeRowOutputModel;
import org.openapitools.client.model.ProposalInputModel;
import org.openapitools.client.model.ProposalOutputModel;
import org.openapitools.client.model.ProposalSettingsOutputModel;
import org.openapitools.client.model.ProposalSubtotalInputModel;
import org.openapitools.client.model.ProposalSubtotalOutputModel;
import org.openapitools.client.model.ProposalWorkhourRowInputModel;
import org.openapitools.client.model.ProposalWorkhourRowOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsWriteApi
 */
@Disabled
public class ProjectsWriteApiTest {

    private final ProjectsWriteApi api = new ProjectsWriteApi();

    /**
     * Add a link to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesPostProjectLinkTest() throws ApiException {
        ProjectFileModel projectFileModel = null;
        ProjectFileModel response = api.filesPostProjectLink(projectFileModel);
        // TODO: test validations
    }

    /**
     * Link existing keyword to project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsLinkKeywordToProjectTest() throws ApiException {
        String projectGuid = null;
        String guid = null;
        ProjectKeywordModel response = api.keywordsLinkKeywordToProject(projectGuid, guid);
        // TODO: test validations
    }

    /**
     * Adds a phase member.
     *
     * User is always added as a root phase (project) member also.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseMembersPostPhaseMemberTest() throws ApiException {
        Boolean addToAllSubPhases = null;
        PhaseMemberModel phaseMemberModel = null;
        PhaseMemberModel response = api.phaseMembersPostPhaseMember(addToAllSubPhases, phaseMemberModel);
        // TODO: test validations
    }

    /**
     * Adds business unit users to phase members.
     *
     * Users are always added as a root phase (project) member also.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseMembersPostPhaseMembersFromBusinessUnitUsersTest() throws ApiException {
        Boolean addToAllSubPhases = null;
        PhaseMembersFromBusinessUnitUsersModel phaseMembersFromBusinessUnitUsersModel = null;
        List<PhaseMemberModel> response = api.phaseMembersPostPhaseMembersFromBusinessUnitUsers(addToAllSubPhases, phaseMembersFromBusinessUnitUsersModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a phase or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesPatchPhaseTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<PhaseOutputModel> response = api.phasesPatchPhase(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a phase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesPostPhaseTest() throws ApiException {
        PhaseInputModel phaseInputModel = null;
        PhaseOutputModel response = api.phasesPostPhase(phaseInputModel);
        // TODO: test validations
    }

    /**
     * Create custom price list for a project. If project already has a custom price list returns existing price list. Creates a new price list if project doesn&#39;t have a custom price list. Project can only have one custom price list. Note that project&#39;s price list will be changed to the custom price list created here and also existing prices are copied to the new price list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceListsPostCustomPricelistTest() throws ApiException {
        String projectGuid = null;
        Boolean isVolumePricing = null;
        CustomPriceListOutputModel response = api.priceListsPostCustomPricelist(projectGuid, isVolumePricing);
        // TODO: test validations
    }

    /**
     * Update (Patch) a project custom value or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomValuesPatchProjectCustomValueTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectCustomValueModel> response = api.projectCustomValuesPatchProjectCustomValue(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project custom value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomValuesPostProjectCustomValueTest() throws ApiException {
        ProjectCustomValueModel projectCustomValueModel = null;
        List<ProjectCustomValueModel> response = api.projectCustomValuesPostProjectCustomValue(projectCustomValueModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an project forecast or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectForecastsPatchForecastTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectForecastOutputModel> response = api.projectForecastsPatchForecast(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project forecast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectForecastsPostForecastTest() throws ApiException {
        ProjectForecastInputModel projectForecastInputModel = null;
        ProjectForecastOutputModel response = api.projectForecastsPostForecast(projectForecastInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) project invoice settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsPatchProjectInvoiceSettings_0Test() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectInvoiceSettingsOutputModel> response = api.projectInvoiceSettingsPatchProjectInvoiceSettings_0(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Create a new project invoice settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsPostProjectInvoiceSettings_0Test() throws ApiException {
        ProjectInvoiceSettingsInputModel projectInvoiceSettingsInputModel = null;
        ProjectInvoiceSettingsOutputModel response = api.projectInvoiceSettingsPostProjectInvoiceSettings_0(projectInvoiceSettingsInputModel);
        // TODO: test validations
    }

    /**
     * Adds a product to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProductsPostProjectProductTest() throws ApiException {
        ProjectProductInputModel projectProductInputModel = null;
        ProjectProductOutputModel response = api.projectProductsPostProjectProduct(projectProductInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a work hour price or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkHourPricesPatchProjectWorkHourPriceTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectWorkHourPriceOutputModel> response = api.projectWorkHourPricesPatchProjectWorkHourPrice(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a work hour price
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkHourPricesPostProjectWorkHourPriceTest() throws ApiException {
        ProjectWorkHourPriceInputModel projectWorkHourPriceInputModel = null;
        ProjectWorkHourPriceOutputModel response = api.projectWorkHourPricesPostProjectWorkHourPrice(projectWorkHourPriceInputModel);
        // TODO: test validations
    }

    /**
     * Update (patch) a project work type.
     *
     * This currently can be used only to change the default work type in a project. The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkTypesPatchProjectWorktypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectWorkTypeModel> response = api.projectWorkTypesPatchProjectWorktype(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Adds a work type to a project.
     *
     * The \&quot;UseWorktypesFromSetting\&quot; flag for the Project should be false (the project should not use the organization list of work types).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkTypesPostProjectWorktypeTest() throws ApiException {
        ProjectWorkTypeModel projectWorkTypeModel = null;
        ProjectWorkTypeModel response = api.projectWorkTypesPostProjectWorktype(projectWorkTypeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a project or a part of it
     *
     * To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsPatchProjectTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectOutputModel> response = api.projectsPatchProject(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project
     *
     * When creating a new project, the price list property will be ignored, as it is chosen by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsPostProjectTest() throws ApiException {
        ProjectInputModelBase projectInputModelBase = null;
        ProjectOutputModel response = api.projectsPostProject(projectInputModelBase);
        // TODO: test validations
    }

    /**
     * Update (Patch) a proposal fee row or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalFeesPatchProposalFeeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProposalFeeRowOutputModel> response = api.proposalFeesPatchProposalFee(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a proposal fee row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalFeesPostProposalFeeTest() throws ApiException {
        ProposalFeeRowInputModel proposalFeeRowInputModel = null;
        ProposalFeeRowOutputModel response = api.proposalFeesPostProposalFee(proposalFeeRowInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) proposal settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSettingsPatchProposalSettingsTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProposalSettingsOutputModel> response = api.proposalSettingsPatchProposalSettings(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Update (Patch) a Proposal subtotal or a part of it
     *
     * It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSubtotalsPatchProposalSubtotalTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProposalSubtotalOutputModel> response = api.proposalSubtotalsPatchProposalSubtotal(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a proposal subtotal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSubtotalsPostProposalSubtotalTest() throws ApiException {
        ProposalSubtotalInputModel proposalSubtotalInputModel = null;
        ProposalSubtotalOutputModel response = api.proposalSubtotalsPostProposalSubtotal(proposalSubtotalInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a proposal work row or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalWorkhoursPatchProposalWorkhourTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProposalWorkhourRowOutputModel> response = api.proposalWorkhoursPatchProposalWorkhour(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a proposal work row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalWorkhoursPostProposalWorkhourTest() throws ApiException {
        ProposalWorkhourRowInputModel proposalWorkhourRowInputModel = null;
        ProposalWorkhourRowOutputModel response = api.proposalWorkhoursPostProposalWorkhour(proposalWorkhourRowInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a Proposal or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalsPatchProposalTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProposalOutputModel> response = api.proposalsPatchProposal(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a proposal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalsPostProposalTest() throws ApiException {
        ProposalInputModel proposalInputModel = null;
        ProposalOutputModel response = api.proposalsPostProposal(proposalInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a project sales note or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesPatchProjectSalesNoteTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectSalesNoteOutputModel> response = api.salesNotesPatchProjectSalesNote(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project sales note.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesPostProjectSalesNotesTest() throws ApiException {
        ProjectSalesNoteInputModel projectSalesNoteInputModel = null;
        ProjectSalesNoteOutputModel response = api.salesNotesPostProjectSalesNotes(projectSalesNoteInputModel);
        // TODO: test validations
    }

}
