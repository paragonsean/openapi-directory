/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BillablePeriod;
import org.openapitools.client.model.DeletedProjectFeeModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.FlatRateOutputModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectFeeOutputModel;
import org.openapitools.client.model.ProjectRecurringFeeRuleOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeesReadApi
 */
@Disabled
public class FeesReadApiTest {

    private final FeesReadApi api = new FeesReadApi();

    /**
     * Get all flat rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flatRatesGetAllFlatRatesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        String invoiceGuid = null;
        List<FlatRateOutputModel> response = api.flatRatesGetAllFlatRates(pageToken, rowCount, changedSince, invoiceGuid);
        // TODO: test validations
    }

    /**
     * Get flat rate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flatRatesGetFlatrateTest() throws ApiException {
        String guid = null;
        List<FlatRateOutputModel> response = api.flatRatesGetFlatrate(guid);
        // TODO: test validations
    }

    /**
     * Get project&#39;s flat rates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flatRatesGetFlatratesForProjectTest() throws ApiException {
        String projectGuid = null;
        List<FlatRateOutputModel> response = api.flatRatesGetFlatratesForProject(projectGuid);
        // TODO: test validations
    }

    /**
     * Get the deleted project fees.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetDeletedProjectFeesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        List<String> projectGuids = null;
        List<String> userGuids = null;
        OffsetDateTime deletedSince = null;
        List<DeletedProjectFeeModel> response = api.projectFeesGetDeletedProjectFees(pageToken, rowCount, projectGuids, userGuids, deletedSince);
        // TODO: test validations
    }

    /**
     * Get projectFee by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetProjectFeeTest() throws ApiException {
        String guid = null;
        ProjectFeeOutputModel response = api.projectFeesGetProjectFee(guid);
        // TODO: test validations
    }

    /**
     * Get the project fees.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetProjectFeesByTokenTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProjectFeeOutputModel> response = api.projectFeesGetProjectFeesByToken(pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the project fees for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetProjectFeesForProjectTest() throws ApiException {
        String projectGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        ProductType productType = null;
        Boolean isBillable = null;
        Boolean isBilled = null;
        OffsetDateTime invoiceableDate = null;
        Boolean includeRecurringRules = null;
        Boolean isBillablePeriodInFuture = null;
        List<ProjectFeeOutputModel> response = api.projectFeesGetProjectFeesForProject(projectGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, includeRecurringRules, isBillablePeriodInFuture);
        // TODO: test validations
    }

    /**
     * Get all the projectFees for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetUserProjectFeesTest() throws ApiException {
        String userGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        ProductType productType = null;
        Boolean isBillable = null;
        Boolean isBilled = null;
        OffsetDateTime invoiceableDate = null;
        Boolean hasPhase = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<ProjectFeeOutputModel> response = api.projectFeesGetUserProjectFees(userGuid, pageToken, rowCount, productType, isBillable, isBilled, invoiceableDate, hasPhase, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Get project&#39;s RecurringFeeRule by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectRecurringFeeRulesGetProjectRecurringFeeRuleTest() throws ApiException {
        String guid = null;
        Boolean includeInactive = null;
        ProjectRecurringFeeRuleOutputModel response = api.projectRecurringFeeRulesGetProjectRecurringFeeRule(guid, includeInactive);
        // TODO: test validations
    }

    /**
     * Get the recurring fee rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectRecurringFeeRulesGetProjectRecurringFeeRulesTest() throws ApiException {
        Integer firstRow = null;
        Integer rowCount = null;
        ProductType productType = null;
        OffsetDateTime changedSince = null;
        List<ProjectRecurringFeeRuleOutputModel> response = api.projectRecurringFeeRulesGetProjectRecurringFeeRules(firstRow, rowCount, productType, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the Recurring Fee Rules for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectTest() throws ApiException {
        String projectGuid = null;
        ProductType productType = null;
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean isBillablePeriodInFuture = null;
        BillablePeriod billableTimePeriod = null;
        List<ProjectRecurringFeeRuleOutputModel> response = api.projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject(projectGuid, productType, firstRow, rowCount, isBillablePeriodInFuture, billableTimePeriod);
        // TODO: test validations
    }

}
