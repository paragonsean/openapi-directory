/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExpensesClass;
import org.openapitools.client.model.MoneyInputModelWithNullableAmount;
import org.openapitools.client.model.SimpleInputModel;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TravelExpenseTypeInputModel
 */
public class TravelExpenseTypeInputModelTest {
    private final TravelExpenseTypeInputModel model = new TravelExpenseTypeInputModel();

    /**
     * Model tests for TravelExpenseTypeInputModel
     */
    @Test
    public void testTravelExpenseTypeInputModel() {
        // TODO: test TravelExpenseTypeInputModel
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'costAccount'
     */
    @Test
    public void costAccountTest() {
        // TODO: test costAccount
    }

    /**
     * Test the property 'expenseClass'
     */
    @Test
    public void expenseClassTest() {
        // TODO: test expenseClass
    }

    /**
     * Test the property 'includeTime'
     */
    @Test
    public void includeTimeTest() {
        // TODO: test includeTime
    }

    /**
     * Test the property 'isActive'
     */
    @Test
    public void isActiveTest() {
        // TODO: test isActive
    }

    /**
     * Test the property 'measurementUnit'
     */
    @Test
    public void measurementUnitTest() {
        // TODO: test measurementUnit
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'productCategory'
     */
    @Test
    public void productCategoryTest() {
        // TODO: test productCategory
    }

    /**
     * Test the property 'purchaseVatRate'
     */
    @Test
    public void purchaseVatRateTest() {
        // TODO: test purchaseVatRate
    }

    /**
     * Test the property 'salesAccount'
     */
    @Test
    public void salesAccountTest() {
        // TODO: test salesAccount
    }

    /**
     * Test the property 'unitCost'
     */
    @Test
    public void unitCostTest() {
        // TODO: test unitCost
    }

    /**
     * Test the property 'vatRate'
     */
    @Test
    public void vatRateTest() {
        // TODO: test vatRate
    }

}
