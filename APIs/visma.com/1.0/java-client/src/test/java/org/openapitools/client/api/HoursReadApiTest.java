/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BillableStatusType;
import org.openapitools.client.model.DeletedWorkHourModel;
import org.openapitools.client.model.ExceptionModel;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TimeEntryModel;
import org.openapitools.client.model.WorkHourOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HoursReadApi
 */
@Disabled
public class HoursReadApiTest {

    private final HoursReadApi api = new HoursReadApi();

    /**
     * Get the time entries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntriesGetTimeEntriesTest() throws ApiException {
        Integer firstRow = null;
        List<String> phaseGuid = null;
        List<String> timeEntryTypeGuid = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<TimeEntryModel> response = api.timeEntriesGetTimeEntries(firstRow, phaseGuid, timeEntryTypeGuid, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the time entries for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntriesGetTimeEntriesForUserTest() throws ApiException {
        String userGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<String> phaseGuid = null;
        List<String> timeEntryTypeGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        List<TimeEntryModel> response = api.timeEntriesGetTimeEntriesForUser(userGuid, startDate, endDate, phaseGuid, timeEntryTypeGuid, firstRow, rowCount);
        // TODO: test validations
    }

    /**
     * Get time entry by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntriesGetTimeEntryTest() throws ApiException {
        String guid = null;
        TimeEntryModel response = api.timeEntriesGetTimeEntry(guid);
        // TODO: test validations
    }

    /**
     * Get the deleted work hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetDeletedWorkHoursTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        List<String> projectGuids = null;
        List<String> userGuids = null;
        OffsetDateTime deletedSince = null;
        List<DeletedWorkHourModel> response = api.workHoursGetDeletedWorkHours(pageToken, rowCount, projectGuids, userGuids, deletedSince);
        // TODO: test validations
    }

    /**
     * Get all the work hours for phases of a project for invoicing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetProjectWorkHoursTest() throws ApiException {
        String projectGuid = null;
        Boolean isBillable = null;
        Boolean isBilled = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String pageToken = null;
        Integer rowCount = null;
        List<WorkHourOutputModel> response = api.workHoursGetProjectWorkHours(projectGuid, isBillable, isBilled, startDate, endDate, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get work hour by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetWorkHourTest() throws ApiException {
        String guid = null;
        WorkHourOutputModel response = api.workHoursGetWorkHour(guid);
        // TODO: test validations
    }

    /**
     * Get the work hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetWorkHoursTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        BillableStatusType billableStatus = null;
        LocalDate eventDateStart = null;
        LocalDate eventDateEnd = null;
        List<WorkHourOutputModel> response = api.workHoursGetWorkHours(pageToken, rowCount, changedSince, billableStatus, eventDateStart, eventDateEnd);
        // TODO: test validations
    }

    /**
     * Get all the work hours for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetWorkHoursForUserTest() throws ApiException {
        String userGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<String> phaseGuid = null;
        List<String> workTypeGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<WorkHourOutputModel> response = api.workHoursGetWorkHoursForUser(userGuid, startDate, endDate, phaseGuid, workTypeGuid, pageToken, rowCount);
        // TODO: test validations
    }

}
