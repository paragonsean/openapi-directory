/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExceptionModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsDeleteApi
 */
@Disabled
public class SettingsDeleteApiTest {

    private final SettingsDeleteApi api = new SettingsDeleteApi();

    /**
     * Delete an activity type.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if activity type can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityTypesDeleteActivityTypeTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.activityTypesDeleteActivityType(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Deletes a communication type.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void communicationTypesDeleteCommunicationTypeTest() throws ApiException {
        String guid = null;
        api.communicationTypesDeleteCommunicationType(guid);
        // TODO: test validations
    }

    /**
     * Delete a contact role.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if contact role can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactRolesDeleteContactRoleTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.contactRolesDeleteContactRole(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete a cost account.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if cost account can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costAccountsDeleteCostAccountTest() throws ApiException {
        String guid = null;
        api.costAccountsDeleteCostAccount(guid);
        // TODO: test validations
    }

    /**
     * Delete a cost center.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if cost center can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costCentersDeleteCostCenterTest() throws ApiException {
        String guid = null;
        api.costCentersDeleteCostCenter(guid);
        // TODO: test validations
    }

    /**
     * Deletes a customer custom property.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertiesDeleteCustomerCustomPropertyTest() throws ApiException {
        String guid = null;
        api.customerCustomPropertiesDeleteCustomerCustomProperty(guid);
        // TODO: test validations
    }

    /**
     * Deletes a customer custom property selection item.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        api.customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItem(guid);
        // TODO: test validations
    }

    /**
     * Delete an industry.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if industry can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void industriesDeleteIndustryTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.industriesDeleteIndustry(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete an invoice status.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if invoice status can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceStatusesDeleteInvoiceStatusTest() throws ApiException {
        String guid = null;
        api.invoiceStatusesDeleteInvoiceStatus(guid);
        // TODO: test validations
    }

    /**
     * Delete keyword by ID. It will also be deleted from any entity it is used in (Project, etc.)
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsDeleteKeywordTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.keywordsDeleteKeyword(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete a lead source.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if lead source can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leadSourcesDeleteLeadSourceTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.leadSourcesDeleteLeadSource(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete a market segment.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if market segment can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketSegmentsDeleteMarketSegmentTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.marketSegmentsDeleteMarketSegment(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete an overtime.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if overtime can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimesDeleteOvertimeTest() throws ApiException {
        String guid = null;
        api.overtimesDeleteOvertime(guid);
        // TODO: test validations
    }

    /**
     * Delete a phase status type
     *
     * Returns: No Content (204) if succeeded. Not found (404) if phase status type can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseStatusTypesDeletePhaseStatusTypeTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.phaseStatusTypesDeletePhaseStatusType(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete a product category.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if product category can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCategoriesDeleteProductCategoryTest() throws ApiException {
        String guid = null;
        api.productCategoriesDeleteProductCategory(guid);
        // TODO: test validations
    }

    /**
     * Deletes a product country setting
     *
     * Returns: No Content (204) if succeeded. Not found (404) if product country setting can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCountrySettingsDeleteProductCountrySettingTest() throws ApiException {
        String guid = null;
        api.productCountrySettingsDeleteProductCountrySetting(guid);
        // TODO: test validations
    }

    /**
     * Delete a product.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if product can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsDeleteProductTest() throws ApiException {
        String guid = null;
        api.productsDeleteProduct(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project billing customer.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectBillingCustomersDeleteProjectBillingCustomerTest() throws ApiException {
        String guid = null;
        api.projectBillingCustomersDeleteProjectBillingCustomer(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project custom property.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertiesDeleteProjectCustomPropertyTest() throws ApiException {
        String guid = null;
        api.projectCustomPropertiesDeleteProjectCustomProperty(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project custom property selection item.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        api.projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItem(guid);
        // TODO: test validations
    }

    /**
     * Deletes a project member cost exception.
     *
     * Deletes project member cost exception. Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberCostExceptionsDeleteTest() throws ApiException {
        String guid = null;
        api.projectMemberCostExceptionsDelete(guid);
        // TODO: test validations
    }

    /**
     * Delete a projectStatusType
     *
     * Returns: No Content (204) if succeeded. Not found (404) if projectStatusType can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectStatusTypesDeleteProjectStatusTypeTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.projectStatusTypesDeleteProjectStatusType(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete a project task status.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if product can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTaskStatusesDeleteProjectTaskStatusTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.projectTaskStatusesDeleteProjectTaskStatus(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete an proposal status
     *
     * Returns: No Content (204) if succeeded. Not found (404) if proposal status can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalStatusesDeleteProposalStatusTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.proposalStatusesDeleteProposalStatus(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Delete a role.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if role can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesDeleteRoleTest() throws ApiException {
        String guid = null;
        api.rolesDeleteRole(guid);
        // TODO: test validations
    }

    /**
     * Delete a sales account.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if sales account can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesAccountsDeleteSalesAccountTest() throws ApiException {
        String guid = null;
        api.salesAccountsDeleteSalesAccount(guid);
        // TODO: test validations
    }

    /**
     * Delete an sales status type.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if sales status type can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesStatusTypesDeleteSalesStatusTypeTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.salesStatusTypesDeleteSalesStatusType(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Deletes a time entry type.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntryTypesDeleteTimeEntryTypeTest() throws ApiException {
        String guid = null;
        api.timeEntryTypesDeleteTimeEntryType(guid);
        // TODO: test validations
    }

    /**
     * Deletes a travel expense type country setting
     *
     * Returns: No Content (204) if succeeded. Not found (404) if travel expense type country setting can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingTest() throws ApiException {
        String guid = null;
        api.travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySetting(guid);
        // TODO: test validations
    }

    /**
     * Deletes a travel expense type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypesDeleteTravelExpenseTypeTest() throws ApiException {
        String guid = null;
        api.travelExpenseTypesDeleteTravelExpenseType(guid);
        // TODO: test validations
    }

    /**
     * Delete a travel reimbursement status.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if travel reimbursement status can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelReimbursementStatusDeleteTravelReimbursementStatusTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.travelReimbursementStatusDeleteTravelReimbursementStatus(guid, moveUsagesToGuid);
        // TODO: test validations
    }

    /**
     * Deletes a user custom property.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertiesDeleteUserCustomPropertyTest() throws ApiException {
        String guid = null;
        api.userCustomPropertiesDeleteUserCustomProperty(guid);
        // TODO: test validations
    }

    /**
     * Deletes a user custom property selection item.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        api.userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItem(guid);
        // TODO: test validations
    }

    /**
     * Delete a vat rate
     *
     * Returns: No Content (204) if succeeded. Bad Request (400) if vat rate is the default one. Not Found (404) if vat rate can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vatRatesDeleteVatRateTest() throws ApiException {
        String guid = null;
        api.vatRatesDeleteVatRate(guid);
        // TODO: test validations
    }

    /**
     * Delete a work contract.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if work contract can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsDeleteWorkContractTest() throws ApiException {
        String guid = null;
        api.workContractsDeleteWorkContract(guid);
        // TODO: test validations
    }

    /**
     * Deletes a work type.
     *
     * Returns: No Content (204) if succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesDeleteWorkTypeTest() throws ApiException {
        String guid = null;
        String moveUsagesToGuid = null;
        api.workTypesDeleteWorkType(guid, moveUsagesToGuid);
        // TODO: test validations
    }

}
