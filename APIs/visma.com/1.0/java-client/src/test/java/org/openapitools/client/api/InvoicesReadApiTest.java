/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import java.io.File;
import org.openapitools.client.model.InvoiceOutputModel;
import org.openapitools.client.model.InvoiceRowOutputModel;
import org.openapitools.client.model.InvoiceRowType;
import org.openapitools.client.model.InvoiceSettingsOutputModel;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectFeeOutputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;
import org.openapitools.client.model.ProjectTravelExpenseOutputModel;
import org.openapitools.client.model.ReimbursedProjectFeeOutputModel;
import org.openapitools.client.model.ReimbursedProjectTravelExpenseOutputModel;
import org.openapitools.client.model.ReimbursedWorkHourOutputModel;
import org.openapitools.client.model.WorkHourOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesReadApi
 */
@Disabled
public class InvoicesReadApiTest {

    private final InvoicesReadApi api = new InvoicesReadApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finvoicesGetFinvoiceByInvoiceGuidTest() throws ApiException {
        String invoiceGuid = null;
        File response = api.finvoicesGetFinvoiceByInvoiceGuid(invoiceGuid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finvoicesGetFinvoicesByInvoiceStatusTest() throws ApiException {
        String invoiceStatusGuid = null;
        File response = api.finvoicesGetFinvoicesByInvoiceStatus(invoiceStatusGuid);
        // TODO: test validations
    }

    /**
     * Get invoice row by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceRowsGetInvoiceRowTest() throws ApiException {
        String guid = null;
        InvoiceRowOutputModel response = api.invoiceRowsGetInvoiceRow(guid);
        // TODO: test validations
    }

    /**
     * Get invoice rows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceRowsGetInvoiceRowsTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<InvoiceRowOutputModel> response = api.invoiceRowsGetInvoiceRows(pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get Invoice rows for an invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceRowsGetInvoiceRowsForInvoiceTest() throws ApiException {
        String invoiceGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        InvoiceRowType rowType = null;
        List<InvoiceRowOutputModel> response = api.invoiceRowsGetInvoiceRowsForInvoice(invoiceGuid, pageToken, rowCount, rowType);
        // TODO: test validations
    }

    /**
     * Get invoice settings by invoice GUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceSettingsGetInvoiceSettingsTest() throws ApiException {
        String invoiceGuid = null;
        InvoiceSettingsOutputModel response = api.invoiceSettingsGetInvoiceSettings(invoiceGuid);
        // TODO: test validations
    }

    /**
     * Get invoice by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoicesGetInvoiceTest() throws ApiException {
        String guid = null;
        InvoiceOutputModel response = api.invoicesGetInvoice(guid);
        // TODO: test validations
    }

    /**
     * Get Invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoicesGetInvoicesTest() throws ApiException {
        Integer rowCount = null;
        String pageToken = null;
        OffsetDateTime paymentDateStart = null;
        List<String> invoiceStatusGuids = null;
        List<String> projectGuids = null;
        List<String> projectOwnerGuids = null;
        List<String> projectBusinessUnitGuids = null;
        List<String> customerGuids = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Double minimumTotalExcludingTax = null;
        Double maximumTotalExcludingTax = null;
        List<String> referenceNumbers = null;
        List<Integer> numbers = null;
        OffsetDateTime changedSince = null;
        List<String> salesPersonGuids = null;
        List<String> createdByUserGuids = null;
        List<InvoiceOutputModel> response = api.invoicesGetInvoices(rowCount, pageToken, paymentDateStart, invoiceStatusGuids, projectGuids, projectOwnerGuids, projectBusinessUnitGuids, customerGuids, startDate, endDate, minimumTotalExcludingTax, maximumTotalExcludingTax, referenceNumbers, numbers, changedSince, salesPersonGuids, createdByUserGuids);
        // TODO: test validations
    }

    /**
     * Get all the project fees on an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetInvoiceProjectFeesTest() throws ApiException {
        String invoiceGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        ProductType productType = null;
        List<ProjectFeeOutputModel> response = api.projectFeesGetInvoiceProjectFees(invoiceGuid, pageToken, rowCount, productType);
        // TODO: test validations
    }

    /**
     * Get all the project fees on an invoice row
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetInvoiceRowProjectFeesTest() throws ApiException {
        String invoiceRowGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        ProductType productType = null;
        List<ProjectFeeOutputModel> response = api.projectFeesGetInvoiceRowProjectFees(invoiceRowGuid, pageToken, rowCount, productType);
        // TODO: test validations
    }

    /**
     * Get uninvoiced project fees available for invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectFeesGetUninvoicedProjectFeesForInvoiceTest() throws ApiException {
        String invoiceGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean isBillable = null;
        List<ProjectFeeOutputModel> response = api.projectFeesGetUninvoicedProjectFeesForInvoice(invoiceGuid, pageToken, rowCount, isBillable);
        // TODO: test validations
    }

    /**
     * Get project invoice settings by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsGetProjectInvoiceSettingTest() throws ApiException {
        String guid = null;
        ProjectInvoiceSettingsOutputModel response = api.projectInvoiceSettingsGetProjectInvoiceSetting(guid);
        // TODO: test validations
    }

    /**
     * Get project invoice settings by project ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsGetProjectInvoiceSettingsTest() throws ApiException {
        String projectGuid = null;
        List<ProjectInvoiceSettingsOutputModel> response = api.projectInvoiceSettingsGetProjectInvoiceSettings(projectGuid);
        // TODO: test validations
    }

    /**
     * Get all the project travel expenses on an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTravelExpensesGetInvoiceProjectTravelExpensesTest() throws ApiException {
        String invoiceGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        ExpensesClass expenseClass = null;
        List<ProjectTravelExpenseOutputModel> response = api.projectTravelExpensesGetInvoiceProjectTravelExpenses(invoiceGuid, pageToken, rowCount, expenseClass);
        // TODO: test validations
    }

    /**
     * Get all the project travel expenses on an invoice row
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTravelExpensesGetInvoiceRowProjectTravelExpensesTest() throws ApiException {
        String invoiceRowGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        ExpensesClass expenseClass = null;
        List<ProjectTravelExpenseOutputModel> response = api.projectTravelExpensesGetInvoiceRowProjectTravelExpenses(invoiceRowGuid, pageToken, rowCount, expenseClass);
        // TODO: test validations
    }

    /**
     * Get uninvoiced project travel expenses available for invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceTest() throws ApiException {
        String invoiceGuid = null;
        Boolean isBillable = null;
        String pageToken = null;
        Integer rowCount = null;
        ExpensesClass expenseClass = null;
        List<ProjectTravelExpenseOutputModel> response = api.projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice(invoiceGuid, isBillable, pageToken, rowCount, expenseClass);
        // TODO: test validations
    }

    /**
     * Get all the project fees on an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimbursedProjectFeesGetInvoiceReimbursedProjectFeesTest() throws ApiException {
        String invoiceGuid = null;
        Integer rowCount = null;
        String pageToken = null;
        List<ReimbursedProjectFeeOutputModel> response = api.reimbursedProjectFeesGetInvoiceReimbursedProjectFees(invoiceGuid, rowCount, pageToken);
        // TODO: test validations
    }

    /**
     * Get all the project fees on an invoice row
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesTest() throws ApiException {
        String invoiceRowGuid = null;
        Integer rowCount = null;
        String pageToken = null;
        List<ReimbursedProjectFeeOutputModel> response = api.reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees(invoiceRowGuid, rowCount, pageToken);
        // TODO: test validations
    }

    /**
     * Get all the project travel expenses on an invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesTest() throws ApiException {
        String invoiceGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ReimbursedProjectTravelExpenseOutputModel> response = api.reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get all the project travel expenses on an invoice row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesTest() throws ApiException {
        String invoiceRowGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ReimbursedProjectTravelExpenseOutputModel> response = api.reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get all reimbursed hours on an invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimbursedWorkHoursGetInvoiceReimbursedWorkHoursTest() throws ApiException {
        String invoiceGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ReimbursedWorkHourOutputModel> response = api.reimbursedWorkHoursGetInvoiceReimbursedWorkHours(invoiceGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get all reimbursed hours on an invoice row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursTest() throws ApiException {
        String invoiceRowGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ReimbursedWorkHourOutputModel> response = api.reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours(invoiceRowGuid, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get all the work hours on an invoice row
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetInvoiceRowWorkHoursTest() throws ApiException {
        String invoiceRowGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<WorkHourOutputModel> response = api.workHoursGetInvoiceRowWorkHours(invoiceRowGuid, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get all the work hours on an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetInvoiceWorkHoursTest() throws ApiException {
        String invoiceGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<WorkHourOutputModel> response = api.workHoursGetInvoiceWorkHours(invoiceGuid, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get uninvoiced work hours available for invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHoursGetUninvoicedWorkHoursForInvoiceTest() throws ApiException {
        String invoiceGuid = null;
        Boolean isBillable = null;
        String pageToken = null;
        Integer rowCount = null;
        List<WorkHourOutputModel> response = api.workHoursGetUninvoicedWorkHoursForInvoice(invoiceGuid, isBillable, pageToken, rowCount);
        // TODO: test validations
    }

}
