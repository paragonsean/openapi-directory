/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeletedPhaseMemberOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OvertimePriceModel;
import org.openapitools.client.model.PhaseMemberOutputModel;
import org.openapitools.client.model.PhaseModelWithHierarchyInfo;
import org.openapitools.client.model.PhaseOutputModel;
import org.openapitools.client.model.ProductForProjectOutputModel;
import org.openapitools.client.model.ProductPriceOutputModel;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectBillingCustomerModel;
import org.openapitools.client.model.ProjectCustomValueModel;
import org.openapitools.client.model.ProjectForecastOutputModel;
import org.openapitools.client.model.ProjectInvoiceSettingsOutputModel;
import org.openapitools.client.model.ProjectKeywordModel;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.ProjectOutputModel;
import org.openapitools.client.model.ProjectProductOutputModel;
import org.openapitools.client.model.ProjectSalesNoteOutputModel;
import org.openapitools.client.model.ProjectWorkHourPriceOutputModel;
import org.openapitools.client.model.ProjectWorkTypeModel;
import org.openapitools.client.model.ProposalFeeRowOutputModel;
import org.openapitools.client.model.ProposalOutputModel;
import org.openapitools.client.model.ProposalSettingsOutputModel;
import org.openapitools.client.model.ProposalSubtotalOutputModel;
import org.openapitools.client.model.ProposalWorkhourRowOutputModel;
import org.openapitools.client.model.SalesNoteOutputModel;
import org.openapitools.client.model.SalesStatusHistoryOutputModel;
import org.openapitools.client.model.TeamProductivityOutputModel;
import org.openapitools.client.model.TravelExpenseTypeOutputModel;
import org.openapitools.client.model.TravelPriceOutputModel;
import org.openapitools.client.model.WorkTypeOutputModel;
import org.openapitools.client.model.WorktypeForProjectOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsReadApi
 */
@Disabled
public class ProjectsReadApiTest {

    private final ProjectsReadApi api = new ProjectsReadApi();

    /**
     * Get all the keywords for project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsGetProjectKeywordsTest() throws ApiException {
        String projectGuid = null;
        Boolean active = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ProjectKeywordModel> response = api.keywordsGetProjectKeywords(projectGuid, active, sortings);
        // TODO: test validations
    }

    /**
     * Get all the overtimePrices for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimePricesGetOvertimePricesForProjectTest() throws ApiException {
        String projectGuid = null;
        List<OvertimePriceModel> response = api.overtimePricesGetOvertimePricesForProject(projectGuid);
        // TODO: test validations
    }

    /**
     * Get all deleted phase members
     *
     * Use root phase to get project members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseMembersGetAllDeletedPhaseMembersTest() throws ApiException {
        OffsetDateTime deletedSince = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean isUserActive = null;
        List<DeletedPhaseMemberOutputModel> response = api.phaseMembersGetAllDeletedPhaseMembers(deletedSince, pageToken, rowCount, isUserActive);
        // TODO: test validations
    }

    /**
     * Get all active phase members
     *
     * Use root phase to get project members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseMembersGetAllPhaseMembersTest() throws ApiException {
        OffsetDateTime changedSince = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean isUserActive = null;
        List<PhaseMemberOutputModel> response = api.phaseMembersGetAllPhaseMembers(changedSince, pageToken, rowCount, isUserActive);
        // TODO: test validations
    }

    /**
     * Get phase members
     *
     * Use root phase to get project members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseMembersGetPhaseMembersTest() throws ApiException {
        String phaseGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean isActive = null;
        Boolean isUserActive = null;
        List<PhaseMemberOutputModel> response = api.phaseMembersGetPhaseMembers(phaseGuid, pageToken, rowCount, isActive, isUserActive);
        // TODO: test validations
    }

    /**
     * Get phase by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesGetPhaseTest() throws ApiException {
        String guid = null;
        PhaseOutputModel response = api.phasesGetPhase(guid);
        // TODO: test validations
    }

    /**
     * Get the phases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesGetPhasesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        String code = null;
        List<String> projectGuids = null;
        List<PhaseOutputModel> response = api.phasesGetPhases(pageToken, rowCount, changedSince, code, projectGuids);
        // TODO: test validations
    }

    /**
     * Get project&#39;s phases as flat list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesGetProjectPhasesTest() throws ApiException {
        String guid = null;
        List<PhaseModelWithHierarchyInfo> response = api.phasesGetProjectPhases(guid);
        // TODO: test validations
    }

    /**
     * Get a list of root phases with information about hierarchy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phasesGetRootPhasesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        List<String> customerGuids = null;
        List<String> projectGuids = null;
        List<String> projectKeywordGuids = null;
        List<String> projectStatusTypeGuids = null;
        List<String> salesPersonGuids = null;
        List<String> projectOwnerGuids = null;
        List<String> businessUnitGuids = null;
        List<String> customerOwnerGuids = null;
        List<String> salesStatusTypeGuids = null;
        Boolean openProjects = null;
        List<String> projectMemberUserGuids = null;
        List<PhaseOutputModel> response = api.phasesGetRootPhases(pageToken, rowCount, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, customerOwnerGuids, salesStatusTypeGuids, openProjects, projectMemberUserGuids);
        // TODO: test validations
    }

    /**
     * Get all the productPrices for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPricesGetProductPricesForProjectTest() throws ApiException {
        String projectGuid = null;
        Boolean fromPricelistOnly = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        Boolean isAvailable = null;
        String productCode = null;
        List<String> productGuids = null;
        Boolean isVolumePriced = null;
        List<String> productCategoryGuids = null;
        List<ProductType> productTypes = null;
        List<ProductPriceOutputModel> response = api.productPricesGetProductPricesForProject(projectGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, isAvailable, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes);
        // TODO: test validations
    }

    /**
     * Gets available products for the given project where price information comes from projects price list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsGetSearchedProductsTest() throws ApiException {
        String projectGuid = null;
        Integer rowCount = null;
        String pageToken = null;
        ProductType type = null;
        Boolean includeProductsFromRegistry = null;
        List<ProductForProjectOutputModel> response = api.productsGetSearchedProducts(projectGuid, rowCount, pageToken, type, includeProductsFromRegistry);
        // TODO: test validations
    }

    /**
     * Get all the billing customers for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectBillingCustomersGetWorkHourPricesForProjectTest() throws ApiException {
        String projectGuid = null;
        List<ProjectBillingCustomerModel> response = api.projectBillingCustomersGetWorkHourPricesForProject(projectGuid);
        // TODO: test validations
    }

    /**
     * Get project custom value by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomValuesGetProjectCustomValueTest() throws ApiException {
        String guid = null;
        ProjectCustomValueModel response = api.projectCustomValuesGetProjectCustomValue(guid);
        // TODO: test validations
    }

    /**
     * Get the project custom values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomValuesGetProjectCustomValuesTest() throws ApiException {
        String projectGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean active = null;
        List<String> target = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ProjectCustomValueModel> response = api.projectCustomValuesGetProjectCustomValues(projectGuid, firstRow, rowCount, active, target, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get project forecast by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectForecastsGetForecastTest() throws ApiException {
        String guid = null;
        ProjectForecastOutputModel response = api.projectForecastsGetForecast(guid);
        // TODO: test validations
    }

    /**
     * Get the project forecasts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectForecastsGetForecastsTest() throws ApiException {
        String projectGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<ProjectForecastOutputModel> response = api.projectForecastsGetForecasts(projectGuid, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Get project invoice settings by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsGetProjectInvoiceSetting_0Test() throws ApiException {
        String guid = null;
        ProjectInvoiceSettingsOutputModel response = api.projectInvoiceSettingsGetProjectInvoiceSetting_0(guid);
        // TODO: test validations
    }

    /**
     * Get project invoice settings by project ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectInvoiceSettingsGetProjectInvoiceSettings_0Test() throws ApiException {
        String projectGuid = null;
        List<ProjectInvoiceSettingsOutputModel> response = api.projectInvoiceSettingsGetProjectInvoiceSettings_0(projectGuid);
        // TODO: test validations
    }

    /**
     * Get all cost exceptions of project members for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectTest() throws ApiException {
        String projectGuid = null;
        String userGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        List<ProjectMemberCostExceptionOutputModel> response = api.projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject(projectGuid, userGuid, firstRow, rowCount);
        // TODO: test validations
    }

    /**
     * Get project products
     *
     * This is the same as organization&#39;s list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProductsGetProjectProductsTest() throws ApiException {
        String projectGuid = null;
        Boolean includeProductsFromRegistry = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean active = null;
        List<ProjectProductOutputModel> response = api.projectProductsGetProjectProducts(projectGuid, includeProductsFromRegistry, pageToken, rowCount, active);
        // TODO: test validations
    }

    /**
     * Get project work hour price by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkHourPricesGetProjectWorkHourPriceTest() throws ApiException {
        String guid = null;
        ProjectWorkHourPriceOutputModel response = api.projectWorkHourPricesGetProjectWorkHourPrice(guid);
        // TODO: test validations
    }

    /**
     * Get all the work hour prices for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkHourPricesGetWorkHourPricesForProjectTest() throws ApiException {
        String projectGuid = null;
        Boolean fromPricelistOnly = null;
        Boolean isAvailable = null;
        OffsetDateTime changedSince = null;
        List<ProjectWorkHourPriceOutputModel> response = api.projectWorkHourPricesGetWorkHourPricesForProject(projectGuid, fromPricelistOnly, isAvailable, changedSince);
        // TODO: test validations
    }

    /**
     * Get project work types.
     *
     * This is the same as organization&#39;s list of work types, unless the project has some specific work types and \&quot;UseWorktypesFromSetting\&quot; in project model is set to false.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectWorkTypesGetProjectWorktypesTest() throws ApiException {
        String projectGuid = null;
        Boolean includeWorktypesFromRegistry = null;
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean active = null;
        String textToSearch = null;
        OffsetDateTime changedSince = null;
        List<ProjectWorkTypeModel> response = api.projectWorkTypesGetProjectWorktypes(projectGuid, includeWorktypesFromRegistry, firstRow, rowCount, active, textToSearch, changedSince);
        // TODO: test validations
    }

    /**
     * Get customer&#39;s projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetCustomerProjectsTest() throws ApiException {
        String customerGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean isBillable = null;
        List<String> currencyGuids = null;
        List<String> projectGuids = null;
        List<String> projectKeywordGuids = null;
        List<String> projectStatusTypeGuids = null;
        List<String> salesPersonGuids = null;
        List<String> projectOwnerGuids = null;
        List<String> businessUnitGuids = null;
        Double minimumBillableAmount = null;
        List<String> customerOwnerGuids = null;
        OffsetDateTime invoiceableDate = null;
        List<String> marketSegmentationGuids = null;
        List<String> salesStatusTypeGuids = null;
        Boolean isClosed = null;
        Boolean hasRecurringFees = null;
        List<String> companyCurrencyGuids = null;
        List<String> projectMemberUserGuids = null;
        List<Long> numbers = null;
        List<ProjectOutputModel> response = api.projectsGetCustomerProjects(customerGuid, pageToken, rowCount, isBillable, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers);
        // TODO: test validations
    }

    /**
     * Get project by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetProjectTest() throws ApiException {
        String guid = null;
        ProjectOutputModel response = api.projectsGetProject(guid);
        // TODO: test validations
    }

    /**
     * Get all the projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetProjectsTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        String currencyGuid = null;
        OffsetDateTime changedSince = null;
        Boolean isBillable = null;
        List<String> customerGuids = null;
        List<String> projectGuids = null;
        List<String> projectKeywordGuids = null;
        List<String> projectStatusTypeGuids = null;
        List<String> salesPersonGuids = null;
        List<String> projectOwnerGuids = null;
        List<String> businessUnitGuids = null;
        Double minimumBillableAmount = null;
        List<String> customerOwnerGuids = null;
        OffsetDateTime invoiceableDate = null;
        List<String> marketSegmentationGuids = null;
        List<String> salesStatusTypeGuids = null;
        Boolean isClosed = null;
        Boolean hasRecurringFees = null;
        List<String> companyCurrencyGuids = null;
        List<String> projectMemberUserGuids = null;
        List<Long> numbers = null;
        Boolean internal = null;
        List<ProjectOutputModel> response = api.projectsGetProjects(pageToken, rowCount, currencyGuid, changedSince, isBillable, customerGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers, internal);
        // TODO: test validations
    }

    /**
     * Gets the sales cases (sales status is in progress)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetSalesCasesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        List<String> customerGuids = null;
        List<String> currencyGuids = null;
        List<String> projectGuids = null;
        List<String> projectKeywordGuids = null;
        List<String> projectStatusTypeGuids = null;
        List<String> salesPersonGuids = null;
        List<String> projectOwnerGuids = null;
        List<String> businessUnitGuids = null;
        Double minimumBillableAmount = null;
        List<String> customerOwnerGuids = null;
        OffsetDateTime invoiceableDate = null;
        List<String> marketSegmentationGuids = null;
        List<String> salesStatusTypeGuids = null;
        Boolean isClosed = null;
        Boolean hasRecurringFees = null;
        List<String> companyCurrencyGuids = null;
        List<String> projectMemberUserGuids = null;
        List<Long> numbers = null;
        List<ProjectOutputModel> response = api.projectsGetSalesCases(pageToken, rowCount, customerGuids, currencyGuids, projectGuids, projectKeywordGuids, projectStatusTypeGuids, salesPersonGuids, projectOwnerGuids, businessUnitGuids, minimumBillableAmount, customerOwnerGuids, invoiceableDate, marketSegmentationGuids, salesStatusTypeGuids, isClosed, hasRecurringFees, companyCurrencyGuids, projectMemberUserGuids, numbers);
        // TODO: test validations
    }

    /**
     * Get the proposal fee rows by guid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalFeesGetProposalFeeTest() throws ApiException {
        String guid = null;
        ProposalFeeRowOutputModel response = api.proposalFeesGetProposalFee(guid);
        // TODO: test validations
    }

    /**
     * Get the proposal fee rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalFeesGetProposalFeesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProposalFeeRowOutputModel> response = api.proposalFeesGetProposalFees(pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the proposal fee rows for a proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalFeesGetProposalFeesForProposalTest() throws ApiException {
        String proposalGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<ProposalFeeRowOutputModel> response = api.proposalFeesGetProposalFeesForProposal(proposalGuid, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get settings for a proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSettingsGetProposalSettingsTest() throws ApiException {
        String guid = null;
        ProposalSettingsOutputModel response = api.proposalSettingsGetProposalSettings(guid);
        // TODO: test validations
    }

    /**
     * Get Proposal subtotal by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSubtotalsGetProposalSubtotalTest() throws ApiException {
        String guid = null;
        ProposalSubtotalOutputModel response = api.proposalSubtotalsGetProposalSubtotal(guid);
        // TODO: test validations
    }

    /**
     * Get the proposal subtotals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSubtotalsGetProposalSubtotalsTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProposalSubtotalOutputModel> response = api.proposalSubtotalsGetProposalSubtotals(pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the proposal subtotals for a proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalSubtotalsGetProposalSubtotalsForProposalTest() throws ApiException {
        String proposalGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<ProposalSubtotalOutputModel> response = api.proposalSubtotalsGetProposalSubtotalsForProposal(proposalGuid, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get the proposal work rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalWorkhoursGetProposalWorkHoursTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProposalWorkhourRowOutputModel> response = api.proposalWorkhoursGetProposalWorkHours(pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the proposal work rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalWorkhoursGetProposalWorkHoursForProposalTest() throws ApiException {
        String proposalGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        List<ProposalWorkhourRowOutputModel> response = api.proposalWorkhoursGetProposalWorkHoursForProposal(proposalGuid, pageToken, rowCount);
        // TODO: test validations
    }

    /**
     * Get the proposal work row by guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalWorkhoursGetProposalWorkhourTest() throws ApiException {
        String guid = null;
        ProposalWorkhourRowOutputModel response = api.proposalWorkhoursGetProposalWorkhour(guid);
        // TODO: test validations
    }

    /**
     * Get Proposal by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalsGetProposalTest() throws ApiException {
        String guid = null;
        ProposalOutputModel response = api.proposalsGetProposal(guid);
        // TODO: test validations
    }

    /**
     * Get all the proposals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalsGetProposalsTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProposalOutputModel> response = api.proposalsGetProposals(pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get all the proposals for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalsGetProposalsForProjectTest() throws ApiException {
        String projectGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProposalOutputModel> response = api.proposalsGetProposalsForProject(projectGuid, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get the sales notes by customer guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesGetAllCustomerSalesNotesTest() throws ApiException {
        String customerGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<SalesNoteOutputModel> response = api.salesNotesGetAllCustomerSalesNotes(customerGuid, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get project sales note by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesGetProjectSalesNoteTest() throws ApiException {
        String guid = null;
        ProjectSalesNoteOutputModel response = api.salesNotesGetProjectSalesNote(guid);
        // TODO: test validations
    }

    /**
     * Get the sales notes of a case.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesGetProjectSalesNotesTest() throws ApiException {
        String projectGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ProjectSalesNoteOutputModel> response = api.salesNotesGetProjectSalesNotes(projectGuid, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get the sales status history for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesStatusHistoryGetSalesStatusHistoryTest() throws ApiException {
        String projectGuid = null;
        List<SalesStatusHistoryOutputModel> response = api.salesStatusHistoryGetSalesStatusHistory(projectGuid);
        // TODO: test validations
    }

    /**
     * Get team productivity of a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamProductivityGetTeamProductivityTest() throws ApiException {
        String projectGuid = null;
        List<TeamProductivityOutputModel> response = api.teamProductivityGetTeamProductivity(projectGuid);
        // TODO: test validations
    }

    /**
     * Search active travel expense types of project by part of the name or code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypesGetSearchedTravelExpenseTypesTest() throws ApiException {
        String projectGuid = null;
        String textToSearch = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String userGuid = null;
        ExpensesClass expenseClass = null;
        List<TravelExpenseTypeOutputModel> response = api.travelExpenseTypesGetSearchedTravelExpenseTypes(projectGuid, textToSearch, firstRow, rowCount, userGuid, expenseClass);
        // TODO: test validations
    }

    /**
     * Get all the travel prices for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelPricesGetTravelPricesForProjectTest() throws ApiException {
        String projectGuid = null;
        Boolean fromPricelistOnly = null;
        List<ExpensesClass> expenseClasses = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<TravelPriceOutputModel> response = api.travelPricesGetTravelPricesForProject(projectGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount);
        // TODO: test validations
    }

    /**
     * Get all work types that are available for a phase (for work hour entry)
     *
     * Only the active work types are included in the list, whether they come from organization settings or project specific work types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesGetPhaseWorkTypesTest() throws ApiException {
        String phaseGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        String userGuid = null;
        List<WorkTypeOutputModel> response = api.workTypesGetPhaseWorkTypes(phaseGuid, pageToken, rowCount, userGuid);
        // TODO: test validations
    }

    /**
     * Search active work types by part of the name or code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesGetSearchedWorktypesTest() throws ApiException {
        String projectGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        List<WorktypeForProjectOutputModel> response = api.workTypesGetSearchedWorktypes(projectGuid, firstRow, rowCount, textToSearch);
        // TODO: test validations
    }

}
