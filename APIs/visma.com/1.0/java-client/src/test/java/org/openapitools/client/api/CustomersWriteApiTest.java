/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressModel;
import org.openapitools.client.model.ContactCommunicationModel;
import org.openapitools.client.model.ContactKeywordModel;
import org.openapitools.client.model.ContactModel;
import org.openapitools.client.model.CustomerCountrySettingsInputModel;
import org.openapitools.client.model.CustomerCountrySettingsOutputModel;
import org.openapitools.client.model.CustomerCustomValueModel;
import org.openapitools.client.model.CustomerMarketSegmentModel;
import org.openapitools.client.model.CustomerModel;
import org.openapitools.client.model.CustomerSalesNoteInputModel;
import org.openapitools.client.model.CustomerSalesNoteOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.PatchOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomersWriteApi
 */
@Disabled
public class CustomersWriteApiTest {

    private final CustomersWriteApi api = new CustomersWriteApi();

    /**
     * Update (Patch) an address or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressesPatchAddressTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<AddressModel> response = api.addressesPatchAddress(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert an address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressesPostCustomerAddressTest() throws ApiException {
        String customerGuid = null;
        AddressModel addressModel = null;
        AddressModel response = api.addressesPostCustomerAddress(customerGuid, addressModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a contact&#39;s communication or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactCommunicationsPatchContactCommunicationTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        ContactCommunicationModel response = api.contactCommunicationsPatchContactCommunication(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a communication for a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactCommunicationsPostContactCommunicationTest() throws ApiException {
        ContactCommunicationModel contactCommunicationModel = null;
        ContactCommunicationModel response = api.contactCommunicationsPostContactCommunication(contactCommunicationModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an contact or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsPatchContactTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ContactModel> response = api.contactsPatchContact(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsPostContactTest() throws ApiException {
        ContactModel contactModel = null;
        ContactModel response = api.contactsPostContact(contactModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a customer country setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCountrySettingsPatchCustomerCountrySettingsTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomerCountrySettingsOutputModel> response = api.customerCountrySettingsPatchCustomerCountrySettings(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a customer country setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCountrySettingsPostCustomerCountrySettingsTest() throws ApiException {
        CustomerCountrySettingsInputModel customerCountrySettingsInputModel = null;
        CustomerCountrySettingsOutputModel response = api.customerCountrySettingsPostCustomerCountrySettings(customerCountrySettingsInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a customer custom value or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomValuesPatchCustomerCustomValueTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomerCustomValueModel> response = api.customerCustomValuesPatchCustomerCustomValue(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a customer custom value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomValuesPostCustomerCustomValueTest() throws ApiException {
        CustomerCustomValueModel customerCustomValueModel = null;
        List<CustomerCustomValueModel> response = api.customerCustomValuesPostCustomerCustomValue(customerCustomValueModel);
        // TODO: test validations
    }

    /**
     * Add a market segment for customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerMarketSegmentsPostCustomerMarketSegmentTest() throws ApiException {
        CustomerMarketSegmentModel customerMarketSegmentModel = null;
        CustomerMarketSegmentModel response = api.customerMarketSegmentsPostCustomerMarketSegment(customerMarketSegmentModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an customer or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customersPatchCustomerTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomerModel> response = api.customersPatchCustomer(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customersPostCustomerTest() throws ApiException {
        CustomerModel customerModel = null;
        CustomerModel response = api.customersPostCustomer(customerModel);
        // TODO: test validations
    }

    /**
     * Link existing keyword to contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsLinkKeywordToContactTest() throws ApiException {
        String contactGuid = null;
        String guid = null;
        ContactKeywordModel response = api.keywordsLinkKeywordToContact(contactGuid, guid);
        // TODO: test validations
    }

    /**
     * Update (Patch) a customer sales note or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesPatchCustomerSalesNoteTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomerSalesNoteOutputModel> response = api.salesNotesPatchCustomerSalesNote(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a customer sales note.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesNotesPostCustomerSalesNotesTest() throws ApiException {
        CustomerSalesNoteInputModel customerSalesNoteInputModel = null;
        CustomerSalesNoteOutputModel response = api.salesNotesPostCustomerSalesNotes(customerSalesNoteInputModel);
        // TODO: test validations
    }

}
