/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.LicenseUserType;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceAllocationCriteriaModel;
import org.openapitools.client.model.ResourceAllocationOutputModel;
import org.openapitools.client.model.RoleAllocationOutputModel;
import org.openapitools.client.model.SalesProgress;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourceallocationsReadApi
 */
@Disabled
public class ResourceallocationsReadApiTest {

    private final ResourceallocationsReadApi api = new ResourceallocationsReadApi();

    /**
     * Get resource allocation by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceAllocationsGetResourceAllocationTest() throws ApiException {
        String guid = null;
        ResourceAllocationOutputModel response = api.resourceAllocationsGetResourceAllocation(guid);
        // TODO: test validations
    }

    /**
     * Get resource allocations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceAllocationsGetResourceAllocationsTest() throws ApiException {
        Integer rowCount = null;
        String pageToken = null;
        OffsetDateTime changedSince = null;
        ResourceAllocationOutputModel response = api.resourceAllocationsGetResourceAllocations(rowCount, pageToken, changedSince);
        // TODO: test validations
    }

    /**
     * Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceAllocationsGetResourceAllocationsByPhaseGuidTest() throws ApiException {
        String phaseGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        OffsetDateTime changedSince = null;
        List<LicenseUserType> userLicenseTypes = null;
        String projectGuid = null;
        String userGuid = null;
        String projectBusinessUnitGuid = null;
        String userBusinessUnitGuid = null;
        String projectManagerUserGuid = null;
        String userTagGuid = null;
        Boolean useSalesProbability = null;
        String projectStatusTypeGuid = null;
        String projectTagGuid = null;
        String superiorUserGuid = null;
        String salesStatusTypeGuid = null;
        String resourceAllocationGuid = null;
        SalesProgress salesProgress = null;
        Integer rowCount = null;
        String pageToken = null;
        ResourceAllocationOutputModel response = api.resourceAllocationsGetResourceAllocationsByPhaseGuid(phaseGuid, startDate, endDate, changedSince, userLicenseTypes, projectGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken);
        // TODO: test validations
    }

    /**
     * Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceAllocationsGetResourceAllocationsByProjectGuidTest() throws ApiException {
        String projectGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        OffsetDateTime changedSince = null;
        List<LicenseUserType> userLicenseTypes = null;
        String phaseGuid = null;
        String userGuid = null;
        String projectBusinessUnitGuid = null;
        String userBusinessUnitGuid = null;
        String projectManagerUserGuid = null;
        String userTagGuid = null;
        Boolean useSalesProbability = null;
        String projectStatusTypeGuid = null;
        String projectTagGuid = null;
        String superiorUserGuid = null;
        String salesStatusTypeGuid = null;
        String resourceAllocationGuid = null;
        SalesProgress salesProgress = null;
        Integer rowCount = null;
        String pageToken = null;
        ResourceAllocationOutputModel response = api.resourceAllocationsGetResourceAllocationsByProjectGuid(projectGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, userGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken);
        // TODO: test validations
    }

    /**
     * Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceAllocationsGetResourceAllocationsByUserGuidTest() throws ApiException {
        String userGuid = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        OffsetDateTime changedSince = null;
        List<LicenseUserType> userLicenseTypes = null;
        String phaseGuid = null;
        String projectGuid = null;
        String projectBusinessUnitGuid = null;
        String userBusinessUnitGuid = null;
        String projectManagerUserGuid = null;
        String userTagGuid = null;
        Boolean useSalesProbability = null;
        String projectStatusTypeGuid = null;
        String projectTagGuid = null;
        String superiorUserGuid = null;
        String salesStatusTypeGuid = null;
        String resourceAllocationGuid = null;
        SalesProgress salesProgress = null;
        Integer rowCount = null;
        String pageToken = null;
        ResourceAllocationOutputModel response = api.resourceAllocationsGetResourceAllocationsByUserGuid(userGuid, startDate, endDate, changedSince, userLicenseTypes, phaseGuid, projectGuid, projectBusinessUnitGuid, userBusinessUnitGuid, projectManagerUserGuid, userTagGuid, useSalesProbability, projectStatusTypeGuid, projectTagGuid, superiorUserGuid, salesStatusTypeGuid, resourceAllocationGuid, salesProgress, rowCount, pageToken);
        // TODO: test validations
    }

    /**
     * Get resource allocations (its POST because of being able to accommodate more filters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceAllocationsPostResourceAllocationsTest() throws ApiException {
        Integer rowCount = null;
        String pageToken = null;
        OffsetDateTime changedSince = null;
        ResourceAllocationCriteriaModel resourceAllocationCriteriaModel = null;
        List<ResourceAllocationOutputModel> response = api.resourceAllocationsPostResourceAllocations(rowCount, pageToken, changedSince, resourceAllocationCriteriaModel);
        // TODO: test validations
    }

    /**
     * Get role allocation by GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAllocationsGetRoleAllocationTest() throws ApiException {
        String guid = null;
        RoleAllocationOutputModel response = api.roleAllocationsGetRoleAllocation(guid);
        // TODO: test validations
    }

    /**
     * Get role allocations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAllocationsGetRoleAllocationsTest() throws ApiException {
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String pageToken = null;
        Integer rowCount = null;
        Boolean useSalesProbability = null;
        List<String> roleGuids = null;
        List<String> phaseGuids = null;
        List<String> projectGuids = null;
        List<RoleAllocationOutputModel> response = api.roleAllocationsGetRoleAllocations(startDate, endDate, pageToken, rowCount, useSalesProbability, roleGuids, phaseGuids, projectGuids);
        // TODO: test validations
    }

}
