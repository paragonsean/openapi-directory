/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessTokenCredentials;
import org.openapitools.client.model.ClientCredentials;
import org.openapitools.client.model.ExceptionModel;
import java.io.File;
import org.openapitools.client.model.PublicAuthenticationOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NoScopeApi
 */
@Disabled
public class NoScopeApiTest {

    private final NoScopeApi api = new NoScopeApi();

    /**
     * Returns http status code 204 for successful authentication.
     *
     * This route requires authentication, returns 204 http status when successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void heartBeatGetAuthorizationTest() throws ApiException {
        api.heartBeatGetAuthorization();
        // TODO: test validations
    }

    /**
     * Can be used to check the status of the database.
     *
     * This does not require authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void heartBeatGetDatabaseStatusTest() throws ApiException {
        File response = api.heartBeatGetDatabaseStatus();
        // TODO: test validations
    }

    /**
     * Can be used to check the status of the REST Api.
     *
     * This does not require authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void heartBeatGetServerStatusTest() throws ApiException {
        File response = api.heartBeatGetServerStatus();
        // TODO: test validations
    }

    /**
     * Get oAuth2 access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publicBearerAuthenticationGetAccessTokenJsonTest() throws ApiException {
        AccessTokenCredentials accessTokenCredentials = null;
        PublicAuthenticationOutputModel response = api.publicBearerAuthenticationGetAccessTokenJson(accessTokenCredentials);
        // TODO: test validations
    }

    /**
     * Get new access token using a refresh token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publicBearerAuthenticationGetAccessTokenTokenFromRefreshTokenTest() throws ApiException {
        String body = null;
        PublicAuthenticationOutputModel response = api.publicBearerAuthenticationGetAccessTokenTokenFromRefreshToken(body);
        // TODO: test validations
    }

    /**
     * Get the oAuth2 authorization code flow code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publicBearerAuthenticationGetAuthorizationCodeTest() throws ApiException {
        String responseType = null;
        String state = null;
        String clientId = null;
        String redirectUri = null;
        String scope = null;
        ExceptionModel response = api.publicBearerAuthenticationGetAuthorizationCode(responseType, state, clientId, redirectUri, scope);
        // TODO: test validations
    }

    /**
     * Can be used to get the login information and access token for the api client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publicBearerAuthenticationGetLoginTokenTest() throws ApiException {
        ClientCredentials clientCredentials = null;
        PublicAuthenticationOutputModel response = api.publicBearerAuthenticationGetLoginToken(clientCredentials);
        // TODO: test validations
    }

    /**
     * Logout. Invalidates refresh token. Access token will be invalid when it expires.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publicBearerAuthenticationLogoutTest() throws ApiException {
        String body = null;
        File response = api.publicBearerAuthenticationLogout(body);
        // TODO: test validations
    }

}
