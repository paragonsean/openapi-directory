/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.FlextimeAdjustmentInputModel;
import org.openapitools.client.model.FlextimeAdjustmentOutputModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.UserCustomValueInputModel;
import org.openapitools.client.model.UserCustomValueOutputModel;
import org.openapitools.client.model.UserInputModel;
import org.openapitools.client.model.UserKeywordModel;
import org.openapitools.client.model.UserOutputModel;
import org.openapitools.client.model.WorkContractInputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkdayModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersWriteApi
 */
@Disabled
public class UsersWriteApiTest {

    private final UsersWriteApi api = new UsersWriteApi();

    /**
     * Delete an flextime adjustment.
     *
     * Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can&#39;t be found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flextimeAdjustmentsDeleteFlextimeAdjustmentTest() throws ApiException {
        String guid = null;
        api.flextimeAdjustmentsDeleteFlextimeAdjustment(guid);
        // TODO: test validations
    }

    /**
     * Update (Patch) an Flextime Adjustment or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flextimeAdjustmentsPatchFlextimeAdjustmentTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<FlextimeAdjustmentOutputModel> response = api.flextimeAdjustmentsPatchFlextimeAdjustment(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a flextime adjustment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flextimeAdjustmentsPostFlextimeAdjustmentTest() throws ApiException {
        FlextimeAdjustmentInputModel flextimeAdjustmentInputModel = null;
        FlextimeAdjustmentOutputModel response = api.flextimeAdjustmentsPostFlextimeAdjustment(flextimeAdjustmentInputModel);
        // TODO: test validations
    }

    /**
     * Link existing keyword to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsLinkKeywordToUserTest() throws ApiException {
        String userGuid = null;
        String guid = null;
        UserKeywordModel response = api.keywordsLinkKeywordToUser(userGuid, guid);
        // TODO: test validations
    }

    /**
     * Update (Patch) a user custom value or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomValuesPatchUserCustomValueTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<UserCustomValueOutputModel> response = api.userCustomValuesPatchUserCustomValue(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a user custom value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomValuesPostUserCustomValueTest() throws ApiException {
        UserCustomValueInputModel userCustomValueInputModel = null;
        List<UserCustomValueOutputModel> response = api.userCustomValuesPostUserCustomValue(userCustomValueInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an user or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPatchUserTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<UserOutputModel> response = api.usersPatchUser(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert an user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPostUserTest() throws ApiException {
        UserInputModel userInputModel = null;
        UserOutputModel response = api.usersPostUser(userInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a work contract or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsPatchWorkContract_0Test() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<WorkContractOutputModel> response = api.workContractsPatchWorkContract_0(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a work contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsPostWorkContract_0Test() throws ApiException {
        Boolean resetFlextime = null;
        WorkContractInputModel workContractInputModel = null;
        WorkContractOutputModel response = api.workContractsPostWorkContract_0(resetFlextime, workContractInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a workday or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workdaysPatchWorkDayTest() throws ApiException {
        String userGuid = null;
        OffsetDateTime date = null;
        List<PatchOperation> patchOperation = null;
        List<WorkdayModel> response = api.workdaysPatchWorkDay(userGuid, date, patchOperation);
        // TODO: test validations
    }

}
