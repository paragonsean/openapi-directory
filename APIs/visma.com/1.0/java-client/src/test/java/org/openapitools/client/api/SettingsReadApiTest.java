/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivityCategory;
import org.openapitools.client.model.ActivityTypeModel;
import org.openapitools.client.model.BankAccountOutputModel;
import org.openapitools.client.model.BusinessUnitModel;
import org.openapitools.client.model.CommunicationTypeModel;
import org.openapitools.client.model.ContactRoleModel;
import org.openapitools.client.model.CostAccountModel;
import org.openapitools.client.model.CostCenterModel;
import org.openapitools.client.model.CountryModel;
import org.openapitools.client.model.CountryRegionModel;
import org.openapitools.client.model.CurrencyOutputModel;
import org.openapitools.client.model.CustomPropertyModel;
import org.openapitools.client.model.CustomerCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.ExpensesClass;
import org.openapitools.client.model.FormattingCultureModel;
import org.openapitools.client.model.HolidayModel;
import org.openapitools.client.model.IndustryModel;
import org.openapitools.client.model.InvoiceStatusModel;
import org.openapitools.client.model.InvoiceTemplateModel;
import org.openapitools.client.model.KeyValuePairOfStringAndSortDirection;
import org.openapitools.client.model.KeywordCategory;
import org.openapitools.client.model.KeywordModel;
import org.openapitools.client.model.KpiFormulaCategory;
import org.openapitools.client.model.KpiFormulaModelBase;
import org.openapitools.client.model.LanguageModel;
import org.openapitools.client.model.LeadSourceModel;
import org.openapitools.client.model.MarketSegmentModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OvertimeModel;
import org.openapitools.client.model.OvertimePriceModel;
import org.openapitools.client.model.PermissionProfileModel;
import org.openapitools.client.model.PhaseStatusTypeModel;
import org.openapitools.client.model.PriceListModel;
import org.openapitools.client.model.PriceListOutputModel;
import org.openapitools.client.model.PricelistVersionOutputModel;
import org.openapitools.client.model.ProductCategoryModel;
import org.openapitools.client.model.ProductCountrySettingsModel;
import org.openapitools.client.model.ProductOutputModel;
import org.openapitools.client.model.ProductPriceOutputModel;
import org.openapitools.client.model.ProductType;
import org.openapitools.client.model.ProjectBillingCustomerModel2;
import org.openapitools.client.model.ProjectCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.ProjectStatusTypeModel;
import org.openapitools.client.model.ProjectTaskStatusModel;
import org.openapitools.client.model.ProposalStatusOutputModel;
import org.openapitools.client.model.RoleOutputModel;
import org.openapitools.client.model.SalesAccountModel;
import org.openapitools.client.model.SalesStatusType;
import org.openapitools.client.model.SalesStatusTypeOutputModel;
import org.openapitools.client.model.TimeEntryTypeModel;
import org.openapitools.client.model.TimezoneModel;
import org.openapitools.client.model.TravelExpenseTypeCountrySettingsModel;
import org.openapitools.client.model.TravelExpenseTypeOutputModel;
import org.openapitools.client.model.TravelPriceOutputModel;
import org.openapitools.client.model.TravelReimbursementStatusModel;
import org.openapitools.client.model.UsageModel2;
import org.openapitools.client.model.UserCustomPropertyOutputModel;
import org.openapitools.client.model.UserCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.VatRateOutputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkHourPriceOutputModel;
import org.openapitools.client.model.WorkTypeOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsReadApi
 */
@Disabled
public class SettingsReadApiTest {

    private final SettingsReadApi api = new SettingsReadApi();

    /**
     * Get Activity Type by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityTypesGetActivityTypeTest() throws ApiException {
        String guid = null;
        ActivityTypeModel response = api.activityTypesGetActivityType(guid);
        // TODO: test validations
    }

    /**
     * Get the Activity Types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityTypesGetActivityTypesTest() throws ApiException {
        Boolean active = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<ActivityCategory> category = null;
        List<ActivityTypeModel> response = api.activityTypesGetActivityTypes(active, pageToken, rowCount, changedSince, category);
        // TODO: test validations
    }

    /**
     * Get bank account by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankAccountsGetBankAccountTest() throws ApiException {
        String guid = null;
        BankAccountOutputModel response = api.bankAccountsGetBankAccount(guid);
        // TODO: test validations
    }

    /**
     * Get all bank accounts for current organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankAccountsGetBankAccountsTest() throws ApiException {
        String companyGuid = null;
        String businessUnitGuid = null;
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<BankAccountOutputModel> response = api.bankAccountsGetBankAccounts(companyGuid, businessUnitGuid, active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get businessUnit by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void businessUnitsGetBusinessUnitTest() throws ApiException {
        String guid = null;
        BusinessUnitModel response = api.businessUnitsGetBusinessUnit(guid);
        // TODO: test validations
    }

    /**
     * Get all the BusinessUnits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void businessUnitsGetBusinessUnitsTest() throws ApiException {
        Boolean active = null;
        String companyGuid = null;
        String companyCountryGuid = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        OffsetDateTime changedSince = null;
        String code = null;
        String name = null;
        List<BusinessUnitModel> response = api.businessUnitsGetBusinessUnits(active, companyGuid, companyCountryGuid, firstRow, rowCount, textToSearch, changedSince, code, name);
        // TODO: test validations
    }

    /**
     * Get communication type by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void communicationTypesGetCommunicationTypeTest() throws ApiException {
        String guid = null;
        CommunicationTypeModel response = api.communicationTypesGetCommunicationType(guid);
        // TODO: test validations
    }

    /**
     * Get all communication types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void communicationTypesGetCommunicationTypesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<CommunicationTypeModel> response = api.communicationTypesGetCommunicationTypes(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get contact role by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactRolesGetContactRoleTest() throws ApiException {
        String guid = null;
        ContactRoleModel response = api.contactRolesGetContactRole(guid);
        // TODO: test validations
    }

    /**
     * Get contact roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactRolesGetContactRolesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<ContactRoleModel> response = api.contactRolesGetContactRoles(active, firstRow, rowCount, textToSearch, calculateRowCount);
        // TODO: test validations
    }

    /**
     * Get cost account by Guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costAccountsGetCostAccountTest() throws ApiException {
        String guid = null;
        CostAccountModel response = api.costAccountsGetCostAccount(guid);
        // TODO: test validations
    }

    /**
     * Get cost accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costAccountsGetCostAccountsTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<CostAccountModel> response = api.costAccountsGetCostAccounts(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get cost center by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costCentersGetCostCenterTest() throws ApiException {
        String guid = null;
        CostCenterModel response = api.costCentersGetCostCenter(guid);
        // TODO: test validations
    }

    /**
     * Get cost centers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costCentersGetCostCentersTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        OffsetDateTime changedSince = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        String identifier = null;
        String name = null;
        List<CostCenterModel> response = api.costCentersGetCostCenters(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, identifier, name);
        // TODO: test validations
    }

    /**
     * Get all the Countries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountriesTest() throws ApiException {
        List<CountryModel> response = api.countriesGetCountries();
        // TODO: test validations
    }

    /**
     * Get country by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountryTest() throws ApiException {
        String guid = null;
        CountryModel response = api.countriesGetCountry(guid);
        // TODO: test validations
    }

    /**
     * Get a country by ISO Alpha-2 code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountryByCode2Test() throws ApiException {
        String code2 = null;
        List<CountryModel> response = api.countriesGetCountryByCode2(code2);
        // TODO: test validations
    }

    /**
     * Get a country by ISO Alpha-3 code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountryByCode3Test() throws ApiException {
        String code3 = null;
        List<CountryModel> response = api.countriesGetCountryByCode3(code3);
        // TODO: test validations
    }

    /**
     * Get a country by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountryByNameTest() throws ApiException {
        String countryName = null;
        List<CountryModel> response = api.countriesGetCountryByName(countryName);
        // TODO: test validations
    }

    /**
     * Get country region by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountryRegionTest() throws ApiException {
        String guid = null;
        CountryRegionModel response = api.countriesGetCountryRegion(guid);
        // TODO: test validations
    }

    /**
     * Get all the Country regions for a country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetCountryRegionsTest() throws ApiException {
        String countryGuid = null;
        List<CountryRegionModel> response = api.countriesGetCountryRegions(countryGuid);
        // TODO: test validations
    }

    /**
     * Get all the Currencies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currenciesGetCurrenciesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<CurrencyOutputModel> response = api.currenciesGetCurrencies(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get currency by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currenciesGetCurrencyTest() throws ApiException {
        String guid = null;
        CurrencyOutputModel response = api.currenciesGetCurrency(guid);
        // TODO: test validations
    }

    /**
     * Get the customer custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertiesGetCustomerCustomPropertiesTest() throws ApiException {
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean active = null;
        String textToSearch = null;
        Boolean isInUse = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<CustomPropertyModel> response = api.customerCustomPropertiesGetCustomerCustomProperties(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get customer custom property by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertiesGetCustomerCustomPropertyTest() throws ApiException {
        String guid = null;
        CustomPropertyModel response = api.customerCustomPropertiesGetCustomerCustomProperty(guid);
        // TODO: test validations
    }

    /**
     * Get customer custom property selection item by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        CustomerCustomPropertySelectionItemOutputModel response = api.customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem(guid);
        // TODO: test validations
    }

    /**
     * Get the customer custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItemsTest() throws ApiException {
        String customPropertyGuid = null;
        Integer rowCount = null;
        Boolean isActive = null;
        String pageToken = null;
        OffsetDateTime changedSince = null;
        List<CustomerCustomPropertySelectionItemOutputModel> response = api.customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems(customPropertyGuid, rowCount, isActive, pageToken, changedSince);
        // TODO: test validations
    }

    /**
     * Get formatting culture by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formattingCulturesGetFormattingCultureTest() throws ApiException {
        String guid = null;
        FormattingCultureModel response = api.formattingCulturesGetFormattingCulture(guid);
        // TODO: test validations
    }

    /**
     * Get all the Formatting Cultures
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formattingCulturesGetFormattingsTest() throws ApiException {
        List<FormattingCultureModel> response = api.formattingCulturesGetFormattings();
        // TODO: test validations
    }

    /**
     * Get holidays.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void holidaysGetHolidaysTest() throws ApiException {
        Integer year = null;
        String countryGuid = null;
        List<HolidayModel> response = api.holidaysGetHolidays(year, countryGuid);
        // TODO: test validations
    }

    /**
     * Get holidays with start and end date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void holidaysGetHolidaysByTimePeriodTest() throws ApiException {
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String countryGuid = null;
        List<HolidayModel> response = api.holidaysGetHolidaysByTimePeriod(startDate, endDate, countryGuid);
        // TODO: test validations
    }

    /**
     * Get all the industries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void industriesGetIndustriesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<IndustryModel> response = api.industriesGetIndustries(active, firstRow, rowCount, textToSearch, calculateRowCount);
        // TODO: test validations
    }

    /**
     * Get industry by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void industriesGetIndustryTest() throws ApiException {
        String guid = null;
        IndustryModel response = api.industriesGetIndustry(guid);
        // TODO: test validations
    }

    /**
     * Get Invoice status by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceStatusesGetInvoiceStatusTest() throws ApiException {
        String guid = null;
        InvoiceStatusModel response = api.invoiceStatusesGetInvoiceStatus(guid);
        // TODO: test validations
    }

    /**
     * Get invoice statuses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceStatusesGetInvoiceStatusesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<InvoiceStatusModel> response = api.invoiceStatusesGetInvoiceStatuses(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get invoice template by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceTemplatesGetInvoiceTemplateTest() throws ApiException {
        String guid = null;
        InvoiceTemplateModel response = api.invoiceTemplatesGetInvoiceTemplate(guid);
        // TODO: test validations
    }

    /**
     * Get invoice templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceTemplatesGetInvoiceTemplatesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<InvoiceTemplateModel> response = api.invoiceTemplatesGetInvoiceTemplates(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get keyword by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsGetKeywordTest() throws ApiException {
        String guid = null;
        KeywordModel response = api.keywordsGetKeyword(guid);
        // TODO: test validations
    }

    /**
     * Get all the keywords.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsGetKeywordsTest() throws ApiException {
        KeywordCategory category = null;
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        OffsetDateTime changedSince = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        String keyword = null;
        List<KeywordModel> response = api.keywordsGetKeywords(category, active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings, keyword);
        // TODO: test validations
    }

    /**
     * Get saved KPI formulas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kpiFormulasGetKpiFormulasTest() throws ApiException {
        KpiFormulaCategory category = null;
        Boolean isActive = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        Boolean includeDefinition = null;
        OffsetDateTime changedSince = null;
        List<KpiFormulaModelBase> response = api.kpiFormulasGetKpiFormulas(category, isActive, firstRow, rowCount, textToSearch, sortings, includeDefinition, changedSince);
        // TODO: test validations
    }

    /**
     * Get language by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void languagesGetLanguageTest() throws ApiException {
        String guid = null;
        LanguageModel response = api.languagesGetLanguage(guid);
        // TODO: test validations
    }

    /**
     * Get all the languages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void languagesGetLanguagesTest() throws ApiException {
        Boolean isInvoiceLanguage = null;
        List<LanguageModel> response = api.languagesGetLanguages(isInvoiceLanguage);
        // TODO: test validations
    }

    /**
     * Get lead source by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leadSourcesGetLeadSourceTest() throws ApiException {
        String guid = null;
        LeadSourceModel response = api.leadSourcesGetLeadSource(guid);
        // TODO: test validations
    }

    /**
     * Get the lead sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leadSourcesGetLeadSourcesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<LeadSourceModel> response = api.leadSourcesGetLeadSources(active, firstRow, rowCount, textToSearch, calculateRowCount);
        // TODO: test validations
    }

    /**
     * Get Market Segment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketSegmentsGetMarketSegmentTest() throws ApiException {
        String guid = null;
        MarketSegmentModel response = api.marketSegmentsGetMarketSegment(guid);
        // TODO: test validations
    }

    /**
     * Get the Market Segments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketSegmentsGetMarketSegmentsTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        Boolean includeChildSegments = null;
        List<MarketSegmentModel> response = api.marketSegmentsGetMarketSegments(active, firstRow, rowCount, textToSearch, calculateRowCount, includeChildSegments);
        // TODO: test validations
    }

    /**
     * Get overtime price by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimePricesGetOvertimePriceTest() throws ApiException {
        String guid = null;
        OvertimePriceModel response = api.overtimePricesGetOvertimePrice(guid);
        // TODO: test validations
    }

    /**
     * Get all the overtime prices for a price list version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimePricesGetOvertimePricesTest() throws ApiException {
        String pricelistVersionGuid = null;
        List<OvertimePriceModel> response = api.overtimePricesGetOvertimePrices(pricelistVersionGuid);
        // TODO: test validations
    }

    /**
     * Get overtime definition by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimesGetOvertimeTest() throws ApiException {
        String guid = null;
        OvertimeModel response = api.overtimesGetOvertime(guid);
        // TODO: test validations
    }

    /**
     * Get overtime definitions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimesGetOvertimesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<OvertimeModel> response = api.overtimesGetOvertimes(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get Permission Profile by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionProfilesGetPermissionProfileTest() throws ApiException {
        String guid = null;
        PermissionProfileModel response = api.permissionProfilesGetPermissionProfile(guid);
        // TODO: test validations
    }

    /**
     * Get the Permission Profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionProfilesGetPermissionProfilesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<PermissionProfileModel> response = api.permissionProfilesGetPermissionProfiles(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get phase status type by GUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseStatusTypesGetPhaseStatusTypeTest() throws ApiException {
        String guid = null;
        PhaseStatusTypeModel response = api.phaseStatusTypesGetPhaseStatusType(guid);
        // TODO: test validations
    }

    /**
     * Get phase status types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseStatusTypesGetPhaseStatusTypesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<PhaseStatusTypeModel> response = api.phaseStatusTypesGetPhaseStatusTypes(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get a price list version by guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceListVersionsGetPricelistVersionTest() throws ApiException {
        String guid = null;
        PricelistVersionOutputModel response = api.priceListVersionsGetPricelistVersion(guid);
        // TODO: test validations
    }

    /**
     * Get all price list versions of a price list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceListVersionsGetPricelistVersionsByPricelistTest() throws ApiException {
        String pricelistGuid = null;
        List<PricelistVersionOutputModel> response = api.priceListVersionsGetPricelistVersionsByPricelist(pricelistGuid);
        // TODO: test validations
    }

    /**
     * Get price list by GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceListsGetPriceListTest() throws ApiException {
        String guid = null;
        PriceListModel response = api.priceListsGetPriceList(guid);
        // TODO: test validations
    }

    /**
     * Get all price lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceListsGetPricelistsTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        String currencyGuid = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        String name = null;
        List<PriceListOutputModel> response = api.priceListsGetPricelists(active, firstRow, rowCount, textToSearch, currencyGuid, calculateRowCount, sortings, name);
        // TODO: test validations
    }

    /**
     * Get product categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCategoriesGetProductCategoriesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        OffsetDateTime changedSince = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ProductCategoryModel> response = api.productCategoriesGetProductCategories(active, firstRow, rowCount, textToSearch, changedSince, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get product category by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCategoriesGetProductCategoryTest() throws ApiException {
        String guid = null;
        ProductCategoryModel response = api.productCategoriesGetProductCategory(guid);
        // TODO: test validations
    }

    /**
     * Get all the country settings for a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCountrySettingsGetProductCountrySettingsTest() throws ApiException {
        String productGuid = null;
        List<ProductCountrySettingsModel> response = api.productCountrySettingsGetProductCountrySettings(productGuid);
        // TODO: test validations
    }

    /**
     * Get product price by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPricesGetProductPriceTest() throws ApiException {
        String guid = null;
        ProductPriceOutputModel response = api.productPricesGetProductPrice(guid);
        // TODO: test validations
    }

    /**
     * Get all the product prices for a price list version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPricesGetProductPricesTest() throws ApiException {
        String pricelistVersionGuid = null;
        Boolean fromPricelistOnly = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        String productCode = null;
        List<String> productGuids = null;
        Boolean isVolumePriced = null;
        List<String> productCategoryGuids = null;
        List<ProductType> productTypes = null;
        List<ProductPriceOutputModel> response = api.productPricesGetProductPrices(pricelistVersionGuid, fromPricelistOnly, firstRow, rowCount, textToSearch, calculateRowCount, productCode, productGuids, isVolumePriced, productCategoryGuids, productTypes);
        // TODO: test validations
    }

    /**
     * Get product by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsGetProductTest() throws ApiException {
        String guid = null;
        ProductOutputModel response = api.productsGetProduct(guid);
        // TODO: test validations
    }

    /**
     * Get all the Products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsGetProductsTest() throws ApiException {
        Integer rowCount = null;
        String pageToken = null;
        ProductType type = null;
        Boolean isActive = null;
        String code = null;
        OffsetDateTime changedSince = null;
        List<ProductOutputModel> response = api.productsGetProducts(rowCount, pageToken, type, isActive, code, changedSince);
        // TODO: test validations
    }

    /**
     * Get a project billing customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectBillingCustomersGetProjectBillingCustomerTest() throws ApiException {
        String guid = null;
        ProjectBillingCustomerModel2 response = api.projectBillingCustomersGetProjectBillingCustomer(guid);
        // TODO: test validations
    }

    /**
     * Get the project custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertiesGetProjectCustomPropertiesTest() throws ApiException {
        Integer firstRow = null;
        Integer rowCount = null;
        Boolean active = null;
        String textToSearch = null;
        Boolean isInUse = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<CustomPropertyModel> response = api.projectCustomPropertiesGetProjectCustomProperties(firstRow, rowCount, active, textToSearch, isInUse, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get project custom property by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertiesGetProjectCustomPropertyTest() throws ApiException {
        String guid = null;
        CustomPropertyModel response = api.projectCustomPropertiesGetProjectCustomProperty(guid);
        // TODO: test validations
    }

    /**
     * Get project custom property selection item by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        ProjectCustomPropertySelectionItemOutputModel response = api.projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem(guid);
        // TODO: test validations
    }

    /**
     * Get the project custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItemsTest() throws ApiException {
        String customPropertyGuid = null;
        Integer rowCount = null;
        Boolean isActive = null;
        String pageToken = null;
        OffsetDateTime changedSince = null;
        List<ProjectCustomPropertySelectionItemOutputModel> response = api.projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems(customPropertyGuid, rowCount, isActive, pageToken, changedSince);
        // TODO: test validations
    }

    /**
     * Get project member cost exception by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberCostExceptionsGetProjectMemberCostExceptionTest() throws ApiException {
        String guid = null;
        ProjectMemberCostExceptionOutputModel response = api.projectMemberCostExceptionsGetProjectMemberCostException(guid);
        // TODO: test validations
    }

    /**
     * Get projectStatusType by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectStatusTypesGetProjectStatusTypeTest() throws ApiException {
        String guid = null;
        ProjectStatusTypeModel response = api.projectStatusTypesGetProjectStatusType(guid);
        // TODO: test validations
    }

    /**
     * Get all the ProjectStatusTypes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectStatusTypesGetProjectStatusTypesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ProjectStatusTypeModel> response = api.projectStatusTypesGetProjectStatusTypes(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get Project task status by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTaskStatusesGetProjectTaskStatusTest() throws ApiException {
        String guid = null;
        ProjectTaskStatusModel response = api.projectTaskStatusesGetProjectTaskStatus(guid);
        // TODO: test validations
    }

    /**
     * Get the project task statuses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTaskStatusesGetProjectTaskStatusesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<ProjectTaskStatusModel> response = api.projectTaskStatusesGetProjectTaskStatuses(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get Proposal status by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalStatusesGetProposalStatusTest() throws ApiException {
        String guid = null;
        ProposalStatusOutputModel response = api.proposalStatusesGetProposalStatus(guid);
        // TODO: test validations
    }

    /**
     * Get all the proposal statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalStatusesGetProposalStatusesTest() throws ApiException {
        Boolean isActive = null;
        String pageToken = null;
        Integer rowCount = null;
        String proposalStatusName = null;
        List<ProposalStatusOutputModel> response = api.proposalStatusesGetProposalStatuses(isActive, pageToken, rowCount, proposalStatusName);
        // TODO: test validations
    }

    /**
     * Get usage for an proposal status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalStatusesGetUsageTest() throws ApiException {
        String guid = null;
        List<UsageModel2> response = api.proposalStatusesGetUsage(guid);
        // TODO: test validations
    }

    /**
     * Get role by GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesGetRoleTest() throws ApiException {
        String guid = null;
        RoleOutputModel response = api.rolesGetRole(guid);
        // TODO: test validations
    }

    /**
     * Get roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesGetRolesTest() throws ApiException {
        Boolean isActive = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        List<RoleOutputModel> response = api.rolesGetRoles(isActive, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get sales account by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesAccountsGetSalesAccountTest() throws ApiException {
        String guid = null;
        SalesAccountModel response = api.salesAccountsGetSalesAccount(guid);
        // TODO: test validations
    }

    /**
     * Get sales accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesAccountsGetSalesAccountsTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<SalesAccountModel> response = api.salesAccountsGetSalesAccounts(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get sales status type by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesStatusTypesGetSalesStatusTypeTest() throws ApiException {
        String guid = null;
        SalesStatusTypeOutputModel response = api.salesStatusTypesGetSalesStatusType(guid);
        // TODO: test validations
    }

    /**
     * Get all the sales status types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesStatusTypesGetSalesStatusTypesTest() throws ApiException {
        Boolean active = null;
        SalesStatusType salesState = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<SalesStatusTypeOutputModel> response = api.salesStatusTypesGetSalesStatusTypes(active, salesState, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get time entry type by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntryTypesGetTimeEntryTypeTest() throws ApiException {
        String guid = null;
        TimeEntryTypeModel response = api.timeEntryTypesGetTimeEntryType(guid);
        // TODO: test validations
    }

    /**
     * Get all time entry types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntryTypesGetTimeEntryTypesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<TimeEntryTypeModel> response = api.timeEntryTypesGetTimeEntryTypes(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get timezone by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezonesGetTimezoneTest() throws ApiException {
        String guid = null;
        TimezoneModel response = api.timezonesGetTimezone(guid);
        // TODO: test validations
    }

    /**
     * Get all the timezones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezonesGetTimezonesTest() throws ApiException {
        List<TimezoneModel> response = api.timezonesGetTimezones();
        // TODO: test validations
    }

    /**
     * Get all country settings for a travel expense type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettingsTest() throws ApiException {
        String travelExpenseTypeGuid = null;
        List<TravelExpenseTypeCountrySettingsModel> response = api.travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings(travelExpenseTypeGuid);
        // TODO: test validations
    }

    /**
     * Get travel expense type by guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypesGetTravelExpenseTypeTest() throws ApiException {
        String guid = null;
        TravelExpenseTypeOutputModel response = api.travelExpenseTypesGetTravelExpenseType(guid);
        // TODO: test validations
    }

    /**
     * Get all the travel expense types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypesGetTravelExpenseTypesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        String code = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<TravelExpenseTypeOutputModel> response = api.travelExpenseTypesGetTravelExpenseTypes(active, firstRow, rowCount, textToSearch, code, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get travel price by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelPricesGetTravelPriceTest() throws ApiException {
        String guid = null;
        TravelPriceOutputModel response = api.travelPricesGetTravelPrice(guid);
        // TODO: test validations
    }

    /**
     * Get all the travel prices for a price list version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelPricesGetTravelPricesTest() throws ApiException {
        String pricelistVersionGuid = null;
        Boolean fromPricelistOnly = null;
        List<ExpensesClass> expenseClasses = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<TravelPriceOutputModel> response = api.travelPricesGetTravelPrices(pricelistVersionGuid, fromPricelistOnly, expenseClasses, firstRow, rowCount, textToSearch, calculateRowCount);
        // TODO: test validations
    }

    /**
     * Get the travel reimbursement statuses by guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelReimbursementStatusGetTravelReimbursementStatusTest() throws ApiException {
        String guid = null;
        TravelReimbursementStatusModel response = api.travelReimbursementStatusGetTravelReimbursementStatus(guid);
        // TODO: test validations
    }

    /**
     * Get the travel reimbursement statuses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelReimbursementStatusGetTravelReimbursementStatusesTest() throws ApiException {
        Boolean active = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<TravelReimbursementStatusModel> response = api.travelReimbursementStatusGetTravelReimbursementStatuses(active, firstRow, rowCount, textToSearch, calculateRowCount, sortings);
        // TODO: test validations
    }

    /**
     * Get the user custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertiesGetUserCustomPropertiesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        Boolean isActive = null;
        Boolean isInUse = null;
        OffsetDateTime changedSince = null;
        List<UserCustomPropertyOutputModel> response = api.userCustomPropertiesGetUserCustomProperties(pageToken, rowCount, isActive, isInUse, changedSince);
        // TODO: test validations
    }

    /**
     * Get user custom property by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertiesGetUserCustomPropertyTest() throws ApiException {
        String guid = null;
        UserCustomPropertyOutputModel response = api.userCustomPropertiesGetUserCustomProperty(guid);
        // TODO: test validations
    }

    /**
     * Get user custom property selection item by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        UserCustomPropertySelectionItemOutputModel response = api.userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem(guid);
        // TODO: test validations
    }

    /**
     * Get the user custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertySelectionItemsGetUserCustomPropertySelectionItemsTest() throws ApiException {
        String customPropertyGuid = null;
        Integer rowCount = null;
        Boolean isActive = null;
        String pageToken = null;
        OffsetDateTime changedSince = null;
        List<UserCustomPropertySelectionItemOutputModel> response = api.userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems(customPropertyGuid, rowCount, isActive, pageToken, changedSince);
        // TODO: test validations
    }

    /**
     * Get a vat rate by GUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vatRatesGetVatRateTest() throws ApiException {
        String guid = null;
        VatRateOutputModel response = api.vatRatesGetVatRate(guid);
        // TODO: test validations
    }

    /**
     * Get all organization vat rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vatRatesGetVatRatesTest() throws ApiException {
        String countryGuid = null;
        Boolean active = null;
        List<VatRateOutputModel> response = api.vatRatesGetVatRates(countryGuid, active);
        // TODO: test validations
    }

    /**
     * Get work contract by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsGetWorkContractTest() throws ApiException {
        String guid = null;
        WorkContractOutputModel response = api.workContractsGetWorkContract(guid);
        // TODO: test validations
    }

    /**
     * Get work hour price by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHourPricesGetWorkHourPriceTest() throws ApiException {
        String guid = null;
        WorkHourPriceOutputModel response = api.workHourPricesGetWorkHourPrice(guid);
        // TODO: test validations
    }

    /**
     * Get all the workHourPrices for a price list version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workHourPricesGetWorkHourPricesTest() throws ApiException {
        String pricelistVersionGuid = null;
        String pageToken = null;
        Integer rowCount = null;
        OffsetDateTime changedSince = null;
        WorkHourPriceOutputModel response = api.workHourPricesGetWorkHourPrices(pricelistVersionGuid, pageToken, rowCount, changedSince);
        // TODO: test validations
    }

    /**
     * Get work type by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesGetWorkTypeTest() throws ApiException {
        String guid = null;
        WorkTypeOutputModel response = api.workTypesGetWorkType(guid);
        // TODO: test validations
    }

    /**
     * Get all work types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesGetWorkTypesTest() throws ApiException {
        Boolean active = null;
        Boolean productive = null;
        Integer firstRow = null;
        Integer rowCount = null;
        String textToSearch = null;
        String code = null;
        OffsetDateTime changedSince = null;
        Boolean calculateRowCount = null;
        List<KeyValuePairOfStringAndSortDirection> sortings = null;
        List<WorkTypeOutputModel> response = api.workTypesGetWorkTypes(active, productive, firstRow, rowCount, textToSearch, code, changedSince, calculateRowCount, sortings);
        // TODO: test validations
    }

}
