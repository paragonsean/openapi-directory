/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivityTypeModel;
import org.openapitools.client.model.BusinessUnitModel;
import org.openapitools.client.model.CommunicationTypeModel;
import org.openapitools.client.model.ContactRoleModel;
import org.openapitools.client.model.CostAccountModel;
import org.openapitools.client.model.CostCenterModel;
import org.openapitools.client.model.CurrencyOutputModel;
import org.openapitools.client.model.CustomPropertyModel;
import org.openapitools.client.model.CustomerCustomPropertySelectionItemInputModel;
import org.openapitools.client.model.CustomerCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ExceptionModel;
import org.openapitools.client.model.IndustryModel;
import org.openapitools.client.model.InvoiceStatusModel;
import org.openapitools.client.model.KeywordModel;
import org.openapitools.client.model.LeadSourceModel;
import org.openapitools.client.model.MarketSegmentModel;
import org.openapitools.client.model.OvertimeModel;
import org.openapitools.client.model.PatchOperation;
import org.openapitools.client.model.PhaseStatusTypeModel;
import org.openapitools.client.model.ProductCategoryModel;
import org.openapitools.client.model.ProductCountrySettingsModel;
import org.openapitools.client.model.ProductInputModel;
import org.openapitools.client.model.ProductOutputModel;
import org.openapitools.client.model.ProjectBillingCustomerModel2;
import org.openapitools.client.model.ProjectCustomPropertySelectionItemInputModel;
import org.openapitools.client.model.ProjectCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.ProjectMemberCostExceptionInputModel;
import org.openapitools.client.model.ProjectMemberCostExceptionOutputModel;
import org.openapitools.client.model.ProjectStatusTypeModel;
import org.openapitools.client.model.ProjectTaskStatusModel;
import org.openapitools.client.model.ProposalStatusInputModel;
import org.openapitools.client.model.ProposalStatusOutputModel;
import org.openapitools.client.model.RoleInputModel;
import org.openapitools.client.model.RoleOutputModel;
import org.openapitools.client.model.SalesAccountModel;
import org.openapitools.client.model.SalesStatusTypeInputModel;
import org.openapitools.client.model.SalesStatusTypeOutputModel;
import org.openapitools.client.model.TimeEntryTypeModel;
import org.openapitools.client.model.TravelExpenseTypeCountrySettingsModel;
import org.openapitools.client.model.TravelExpenseTypeInputModel;
import org.openapitools.client.model.TravelExpenseTypeOutputModel;
import org.openapitools.client.model.TravelReimbursementStatusModel;
import org.openapitools.client.model.UserCustomPropertyInputModel;
import org.openapitools.client.model.UserCustomPropertyOutputModel;
import org.openapitools.client.model.UserCustomPropertySelectionItemInputModel;
import org.openapitools.client.model.UserCustomPropertySelectionItemOutputModel;
import org.openapitools.client.model.VatRateInputModel;
import org.openapitools.client.model.VatRateOutputModel;
import org.openapitools.client.model.WorkContractInputModel;
import org.openapitools.client.model.WorkContractOutputModel;
import org.openapitools.client.model.WorkTypeInputModel;
import org.openapitools.client.model.WorkTypeOutputModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsWriteApi
 */
@Disabled
public class SettingsWriteApiTest {

    private final SettingsWriteApi api = new SettingsWriteApi();

    /**
     * Update (Patch) an Activity Type or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityTypesPatchActivityTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ActivityTypeModel> response = api.activityTypesPatchActivityType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert an Activity type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityTypesPostActivityTypeTest() throws ApiException {
        ActivityTypeModel activityTypeModel = null;
        ActivityTypeModel response = api.activityTypesPostActivityType(activityTypeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an businessUnit or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void businessUnitsPatchBusinessUnitTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<BusinessUnitModel> response = api.businessUnitsPatchBusinessUnit(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Update (Patch) a communication type or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void communicationTypesPatchCommunicationTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CommunicationTypeModel> response = api.communicationTypesPatchCommunicationType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a communication type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void communicationTypesPostCommunicationTypeTest() throws ApiException {
        CommunicationTypeModel communicationTypeModel = null;
        CommunicationTypeModel response = api.communicationTypesPostCommunicationType(communicationTypeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a contact role or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactRolesPatchContactRoleTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ContactRoleModel> response = api.contactRolesPatchContactRole(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a contact role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactRolesPostContactRoleTest() throws ApiException {
        ContactRoleModel contactRoleModel = null;
        ContactRoleModel response = api.contactRolesPostContactRole(contactRoleModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a cost account or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costAccountsPatchCostAccountTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CostAccountModel> response = api.costAccountsPatchCostAccount(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a cost account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costAccountsPostCostAccountTest() throws ApiException {
        CostAccountModel costAccountModel = null;
        CostAccountModel response = api.costAccountsPostCostAccount(costAccountModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a cost center or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costCentersPatchCostCenterTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CostCenterModel> response = api.costCentersPatchCostCenter(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a cost center.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void costCentersPostCostCenterTest() throws ApiException {
        CostCenterModel costCenterModel = null;
        CostCenterModel response = api.costCentersPostCostCenter(costCenterModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an currency or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currenciesPatchCurrencyTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CurrencyOutputModel> response = api.currenciesPatchCurrency(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Update (Patch) a customer custom property or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertiesPatchCustomerCustomPropertyTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomPropertyModel> response = api.customerCustomPropertiesPatchCustomerCustomProperty(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a customer custom property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertiesPostCustomerCustomPropertyTest() throws ApiException {
        CustomPropertyModel customPropertyModel = null;
        List<CustomPropertyModel> response = api.customerCustomPropertiesPostCustomerCustomProperty(customPropertyModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a customer custom property selection item or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomerCustomPropertySelectionItemOutputModel> response = api.customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a customer custom property selection item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItemTest() throws ApiException {
        CustomerCustomPropertySelectionItemInputModel customerCustomPropertySelectionItemInputModel = null;
        CustomerCustomPropertySelectionItemOutputModel response = api.customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem(customerCustomPropertySelectionItemInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an industry or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void industriesPatchIndustryTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<IndustryModel> response = api.industriesPatchIndustry(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert an industry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void industriesPostIndustryTest() throws ApiException {
        IndustryModel industryModel = null;
        IndustryModel response = api.industriesPostIndustry(industryModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an Invoice status or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceStatusesPatchInvoiceStatusTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<InvoiceStatusModel> response = api.invoiceStatusesPatchInvoiceStatus(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a invoice status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invoiceStatusesPostInvoiceStatusTest() throws ApiException {
        InvoiceStatusModel invoiceStatusModel = null;
        InvoiceStatusModel response = api.invoiceStatusesPostInvoiceStatus(invoiceStatusModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a keyword or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsPatchKeywordTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<KeywordModel> response = api.keywordsPatchKeyword(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a keyword.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keywordsPostKeywordTest() throws ApiException {
        KeywordModel keywordModel = null;
        KeywordModel response = api.keywordsPostKeyword(keywordModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an lead source or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leadSourcesPatchLeadSourceTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<LeadSourceModel> response = api.leadSourcesPatchLeadSource(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a lead source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leadSourcesPostLeadSourceTest() throws ApiException {
        LeadSourceModel leadSourceModel = null;
        LeadSourceModel response = api.leadSourcesPostLeadSource(leadSourceModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an Market Segment or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketSegmentsPatchMarketSegmentTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<MarketSegmentModel> response = api.marketSegmentsPatchMarketSegment(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a market segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketSegmentsPostMarketSegmentTest() throws ApiException {
        MarketSegmentModel marketSegmentModel = null;
        MarketSegmentModel response = api.marketSegmentsPostMarketSegment(marketSegmentModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an overtime or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimesPatchOvertimeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<OvertimeModel> response = api.overtimesPatchOvertime(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert an overtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overtimesPostOvertimeTest() throws ApiException {
        OvertimeModel overtimeModel = null;
        OvertimeModel response = api.overtimesPostOvertime(overtimeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a phase status type or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseStatusTypesPatchPhaseStatusTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<PhaseStatusTypeModel> response = api.phaseStatusTypesPatchPhaseStatusType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a phase status type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phaseStatusTypesPostPhaseStatusTypeTest() throws ApiException {
        PhaseStatusTypeModel phaseStatusTypeModel = null;
        PhaseStatusTypeModel response = api.phaseStatusTypesPostPhaseStatusType(phaseStatusTypeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a product category or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCategoriesPatchProductCategoryTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProductCategoryModel> response = api.productCategoriesPatchProductCategory(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a product category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCategoriesPostProductCategoryTest() throws ApiException {
        ProductCategoryModel productCategoryModel = null;
        ProductCategoryModel response = api.productCategoriesPostProductCategory(productCategoryModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a product country setting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCountrySettingsPatchProductCountrySettingsTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProductCountrySettingsModel> response = api.productCountrySettingsPatchProductCountrySettings(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a product country setting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCountrySettingsPostProductCountrySettingsTest() throws ApiException {
        ProductCountrySettingsModel productCountrySettingsModel = null;
        ProductCountrySettingsModel response = api.productCountrySettingsPostProductCountrySettings(productCountrySettingsModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an product or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsPatchProductTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProductOutputModel> response = api.productsPatchProduct(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsPostProductTest() throws ApiException {
        ProductInputModel productInputModel = null;
        ProductOutputModel response = api.productsPostProduct(productInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a project billing customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectBillingCustomersPatchProjectBillingCustomerTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectBillingCustomerModel2> response = api.projectBillingCustomersPatchProjectBillingCustomer(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a billing customer for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectBillingCustomersPostProjectBillingCustomerTest() throws ApiException {
        ProjectBillingCustomerModel2 projectBillingCustomerModel2 = null;
        ProjectBillingCustomerModel2 response = api.projectBillingCustomersPostProjectBillingCustomer(projectBillingCustomerModel2);
        // TODO: test validations
    }

    /**
     * Update (Patch) a project custom property or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertiesPatchProjectCustomPropertyTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<CustomPropertyModel> response = api.projectCustomPropertiesPatchProjectCustomProperty(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project custom property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertiesPostProjectCustomPropertyTest() throws ApiException {
        CustomPropertyModel customPropertyModel = null;
        List<CustomPropertyModel> response = api.projectCustomPropertiesPostProjectCustomProperty(customPropertyModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a project custom property selection item or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectCustomPropertySelectionItemOutputModel> response = api.projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project custom property selection item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItemTest() throws ApiException {
        ProjectCustomPropertySelectionItemInputModel projectCustomPropertySelectionItemInputModel = null;
        ProjectCustomPropertySelectionItemOutputModel response = api.projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem(projectCustomPropertySelectionItemInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) project member cost exception.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberCostExceptionsPatchTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectMemberCostExceptionOutputModel> response = api.projectMemberCostExceptionsPatch(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Add a cost exception to a project member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberCostExceptionsPostTest() throws ApiException {
        ProjectMemberCostExceptionInputModel projectMemberCostExceptionInputModel = null;
        ProjectMemberCostExceptionOutputModel response = api.projectMemberCostExceptionsPost(projectMemberCostExceptionInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a projectStatusType or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectStatusTypesPatchProjectStatusTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectStatusTypeModel> response = api.projectStatusTypesPatchProjectStatusType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project status type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectStatusTypesPostProjectStatusTypeTest() throws ApiException {
        ProjectStatusTypeModel projectStatusTypeModel = null;
        ProjectStatusTypeModel response = api.projectStatusTypesPostProjectStatusType(projectStatusTypeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an Project task status or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTaskStatusesPatchProjectTaskStatusTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProjectTaskStatusModel> response = api.projectTaskStatusesPatchProjectTaskStatus(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a project task status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTaskStatusesPostProjectTaskStatusTest() throws ApiException {
        ProjectTaskStatusModel projectTaskStatusModel = null;
        ProjectTaskStatusModel response = api.projectTaskStatusesPostProjectTaskStatus(projectTaskStatusModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an Proposal status or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalStatusesPatchProposalStatusTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<ProposalStatusOutputModel> response = api.proposalStatusesPatchProposalStatus(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a proposal status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proposalStatusesPostProposalStatusTest() throws ApiException {
        ProposalStatusInputModel proposalStatusInputModel = null;
        ProposalStatusOutputModel response = api.proposalStatusesPostProposalStatus(proposalStatusInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a role or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesPatchRoleTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<RoleOutputModel> response = api.rolesPatchRole(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesPostRoleTest() throws ApiException {
        RoleInputModel roleInputModel = null;
        RoleOutputModel response = api.rolesPostRole(roleInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a sales account or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesAccountsPatchSalesAccountTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<SalesAccountModel> response = api.salesAccountsPatchSalesAccount(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a sales account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesAccountsPostSalesAccountTest() throws ApiException {
        SalesAccountModel salesAccountModel = null;
        SalesAccountModel response = api.salesAccountsPostSalesAccount(salesAccountModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an sales status type or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesStatusTypesPatchSalesStatusTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<SalesStatusTypeOutputModel> response = api.salesStatusTypesPatchSalesStatusType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a sales status type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesStatusTypesPostSalesStatusTypeTest() throws ApiException {
        SalesStatusTypeInputModel salesStatusTypeInputModel = null;
        SalesStatusTypeOutputModel response = api.salesStatusTypesPostSalesStatusType(salesStatusTypeInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a time entry type or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntryTypesPatchTimeEntryTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<TimeEntryTypeModel> response = api.timeEntryTypesPatchTimeEntryType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a time entry type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeEntryTypesPostTimeEntryTypeTest() throws ApiException {
        TimeEntryTypeModel timeEntryTypeModel = null;
        TimeEntryTypeModel response = api.timeEntryTypesPostTimeEntryType(timeEntryTypeModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a travel expense type country setting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettingsTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<TravelExpenseTypeCountrySettingsModel> response = api.travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a travel expense type country setting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettingsTest() throws ApiException {
        TravelExpenseTypeCountrySettingsModel travelExpenseTypeCountrySettingsModel = null;
        TravelExpenseTypeCountrySettingsModel response = api.travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings(travelExpenseTypeCountrySettingsModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) an travel expense type or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypesPatchTravelExpenseTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<TravelExpenseTypeOutputModel> response = api.travelExpenseTypesPatchTravelExpenseType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a new travel expense type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelExpenseTypesPostTravelExpenseTypeTest() throws ApiException {
        TravelExpenseTypeInputModel travelExpenseTypeInputModel = null;
        TravelExpenseTypeOutputModel response = api.travelExpenseTypesPostTravelExpenseType(travelExpenseTypeInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a travel reimbursement status or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelReimbursementStatusPatchTravelReimbursementStatusTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<TravelReimbursementStatusModel> response = api.travelReimbursementStatusPatchTravelReimbursementStatus(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a travel reimbursement status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelReimbursementStatusPostTravelReimbursementStatusTest() throws ApiException {
        TravelReimbursementStatusModel travelReimbursementStatusModel = null;
        TravelReimbursementStatusModel response = api.travelReimbursementStatusPostTravelReimbursementStatus(travelReimbursementStatusModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a user custom property or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertiesPatchUserCustomPropertyTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<UserCustomPropertyOutputModel> response = api.userCustomPropertiesPatchUserCustomProperty(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a user custom property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertiesPostUserCustomPropertyTest() throws ApiException {
        UserCustomPropertyInputModel userCustomPropertyInputModel = null;
        UserCustomPropertyOutputModel response = api.userCustomPropertiesPostUserCustomProperty(userCustomPropertyInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a user custom property selection item or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItemTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<UserCustomPropertySelectionItemOutputModel> response = api.userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a user custom property selection item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCustomPropertySelectionItemsPostUserCustomPropertySelectionItemTest() throws ApiException {
        UserCustomPropertySelectionItemInputModel userCustomPropertySelectionItemInputModel = null;
        UserCustomPropertySelectionItemOutputModel response = api.userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem(userCustomPropertySelectionItemInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a vat rate or a part of it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vatRatesPatchVatRateTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<VatRateOutputModel> response = api.vatRatesPatchVatRate(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a vat rate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vatRatesPostVatRateTest() throws ApiException {
        VatRateInputModel vatRateInputModel = null;
        VatRateOutputModel response = api.vatRatesPostVatRate(vatRateInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a work contract or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsPatchWorkContractTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<WorkContractOutputModel> response = api.workContractsPatchWorkContract(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a work contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workContractsPostWorkContractTest() throws ApiException {
        Boolean resetFlextime = null;
        WorkContractInputModel workContractInputModel = null;
        WorkContractOutputModel response = api.workContractsPostWorkContract(resetFlextime, workContractInputModel);
        // TODO: test validations
    }

    /**
     * Update (Patch) a work type or a part of it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesPatchWorkTypeTest() throws ApiException {
        String guid = null;
        List<PatchOperation> patchOperation = null;
        List<WorkTypeOutputModel> response = api.workTypesPatchWorkType(guid, patchOperation);
        // TODO: test validations
    }

    /**
     * Insert a work type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workTypesPostWorkTypeTest() throws ApiException {
        WorkTypeInputModel workTypeInputModel = null;
        WorkTypeOutputModel response = api.workTypesPostWorkType(workTypeInputModel);
        // TODO: test validations
    }

}
