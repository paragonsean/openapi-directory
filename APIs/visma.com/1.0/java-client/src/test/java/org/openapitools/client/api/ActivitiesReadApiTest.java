/*
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivityCategory;
import org.openapitools.client.model.ActivityModel;
import org.openapitools.client.model.ActivityParticipantModel;
import org.openapitools.client.model.ExceptionModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RecurrenceType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActivitiesReadApi
 */
@Disabled
public class ActivitiesReadApiTest {

    private final ActivitiesReadApi api = new ActivitiesReadApi();

    /**
     * Get all activities of an organization
     *
     * Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activitiesGetActivitiesTest() throws ApiException {
        String pageToken = null;
        Integer rowCount = null;
        Boolean closed = null;
        List<ActivityCategory> activityCategories = null;
        List<String> customerGuids = null;
        Boolean includeTasksWithNoCustomer = null;
        List<String> projectGuids = null;
        Boolean includeTasksWithNoProject = null;
        List<String> projectBusinessUnitGuids = null;
        List<String> projectOwnerGuids = null;
        List<String> userGuids = null;
        Boolean includeAsMember = null;
        List<String> userKeywordGuids = null;
        OffsetDateTime startDateTime = null;
        OffsetDateTime endDateTime = null;
        List<String> projectTaskStatusGuids = null;
        List<String> phaseGuids = null;
        Boolean includeSubPhases = null;
        List<String> contactGuids = null;
        Boolean hasDuration = null;
        Boolean hasHours = null;
        Boolean isUnassigned = null;
        OffsetDateTime changedSince = null;
        Boolean useStrictStartAndEndDateTime = null;
        List<String> activityTypeGuids = null;
        RecurrenceType recurrenceType = null;
        List<ActivityModel> response = api.activitiesGetActivities(pageToken, rowCount, closed, activityCategories, customerGuids, includeTasksWithNoCustomer, projectGuids, includeTasksWithNoProject, projectBusinessUnitGuids, projectOwnerGuids, userGuids, includeAsMember, userKeywordGuids, startDateTime, endDateTime, projectTaskStatusGuids, phaseGuids, includeSubPhases, contactGuids, hasDuration, hasHours, isUnassigned, changedSince, useStrictStartAndEndDateTime, activityTypeGuids, recurrenceType);
        // TODO: test validations
    }

    /**
     * Get activity by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activitiesGetActivityTest() throws ApiException {
        String guid = null;
        ActivityModel response = api.activitiesGetActivity(guid);
        // TODO: test validations
    }

    /**
     * Get activity participant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityParticipantsGetActivityParticipantTest() throws ApiException {
        String guid = null;
        ActivityParticipantModel response = api.activityParticipantsGetActivityParticipant(guid);
        // TODO: test validations
    }

    /**
     * Get participants for an activity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityParticipantsGetActivityParticipantsTest() throws ApiException {
        String activityGuid = null;
        List<ActivityParticipantModel> response = api.activityParticipantsGetActivityParticipants(activityGuid);
        // TODO: test validations
    }

}
