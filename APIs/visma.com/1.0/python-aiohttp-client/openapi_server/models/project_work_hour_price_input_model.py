# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model import MoneyInputModel
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class ProjectWorkHourPriceInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_billable: bool=True, phase: SimpleInputRequiredModel=None, project: SimpleInputModel=None, unit_price: MoneyInputModel=None, user: SimpleInputModel=None, work_type: SimpleInputModel=None):
        """ProjectWorkHourPriceInputModel - a model defined in OpenAPI

        :param is_billable: The is_billable of this ProjectWorkHourPriceInputModel.
        :param phase: The phase of this ProjectWorkHourPriceInputModel.
        :param project: The project of this ProjectWorkHourPriceInputModel.
        :param unit_price: The unit_price of this ProjectWorkHourPriceInputModel.
        :param user: The user of this ProjectWorkHourPriceInputModel.
        :param work_type: The work_type of this ProjectWorkHourPriceInputModel.
        """
        self.openapi_types = {
            'is_billable': bool,
            'phase': SimpleInputRequiredModel,
            'project': SimpleInputModel,
            'unit_price': MoneyInputModel,
            'user': SimpleInputModel,
            'work_type': SimpleInputModel
        }

        self.attribute_map = {
            'is_billable': 'isBillable',
            'phase': 'phase',
            'project': 'project',
            'unit_price': 'unitPrice',
            'user': 'user',
            'work_type': 'workType'
        }

        self._is_billable = is_billable
        self._phase = phase
        self._project = project
        self._unit_price = unit_price
        self._user = user
        self._work_type = work_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectWorkHourPriceInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectWorkHourPriceInputModel of this ProjectWorkHourPriceInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_billable(self):
        """Gets the is_billable of this ProjectWorkHourPriceInputModel.


        :return: The is_billable of this ProjectWorkHourPriceInputModel.
        :rtype: bool
        """
        return self._is_billable

    @is_billable.setter
    def is_billable(self, is_billable):
        """Sets the is_billable of this ProjectWorkHourPriceInputModel.


        :param is_billable: The is_billable of this ProjectWorkHourPriceInputModel.
        :type is_billable: bool
        """

        self._is_billable = is_billable

    @property
    def phase(self):
        """Gets the phase of this ProjectWorkHourPriceInputModel.


        :return: The phase of this ProjectWorkHourPriceInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ProjectWorkHourPriceInputModel.


        :param phase: The phase of this ProjectWorkHourPriceInputModel.
        :type phase: SimpleInputRequiredModel
        """

        self._phase = phase

    @property
    def project(self):
        """Gets the project of this ProjectWorkHourPriceInputModel.


        :return: The project of this ProjectWorkHourPriceInputModel.
        :rtype: SimpleInputModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectWorkHourPriceInputModel.


        :param project: The project of this ProjectWorkHourPriceInputModel.
        :type project: SimpleInputModel
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def unit_price(self):
        """Gets the unit_price of this ProjectWorkHourPriceInputModel.


        :return: The unit_price of this ProjectWorkHourPriceInputModel.
        :rtype: MoneyInputModel
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProjectWorkHourPriceInputModel.


        :param unit_price: The unit_price of this ProjectWorkHourPriceInputModel.
        :type unit_price: MoneyInputModel
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")

        self._unit_price = unit_price

    @property
    def user(self):
        """Gets the user of this ProjectWorkHourPriceInputModel.


        :return: The user of this ProjectWorkHourPriceInputModel.
        :rtype: SimpleInputModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ProjectWorkHourPriceInputModel.


        :param user: The user of this ProjectWorkHourPriceInputModel.
        :type user: SimpleInputModel
        """

        self._user = user

    @property
    def work_type(self):
        """Gets the work_type of this ProjectWorkHourPriceInputModel.


        :return: The work_type of this ProjectWorkHourPriceInputModel.
        :rtype: SimpleInputModel
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this ProjectWorkHourPriceInputModel.


        :param work_type: The work_type of this ProjectWorkHourPriceInputModel.
        :type work_type: SimpleInputModel
        """

        self._work_type = work_type
