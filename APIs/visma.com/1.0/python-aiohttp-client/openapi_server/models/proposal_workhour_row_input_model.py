# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class ProposalWorkhourRowInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_shown_on_proposal: bool=True, name: str=None, phase: SimpleInputModel=None, proposal: SimpleInputRequiredModel=None, quantity: float=None, sort_order: int=None, subtotal: SimpleInputModel=None, work_type: SimpleInputRequiredModel=None):
        """ProposalWorkhourRowInputModel - a model defined in OpenAPI

        :param description: The description of this ProposalWorkhourRowInputModel.
        :param is_shown_on_proposal: The is_shown_on_proposal of this ProposalWorkhourRowInputModel.
        :param name: The name of this ProposalWorkhourRowInputModel.
        :param phase: The phase of this ProposalWorkhourRowInputModel.
        :param proposal: The proposal of this ProposalWorkhourRowInputModel.
        :param quantity: The quantity of this ProposalWorkhourRowInputModel.
        :param sort_order: The sort_order of this ProposalWorkhourRowInputModel.
        :param subtotal: The subtotal of this ProposalWorkhourRowInputModel.
        :param work_type: The work_type of this ProposalWorkhourRowInputModel.
        """
        self.openapi_types = {
            'description': str,
            'is_shown_on_proposal': bool,
            'name': str,
            'phase': SimpleInputModel,
            'proposal': SimpleInputRequiredModel,
            'quantity': float,
            'sort_order': int,
            'subtotal': SimpleInputModel,
            'work_type': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'description': 'description',
            'is_shown_on_proposal': 'isShownOnProposal',
            'name': 'name',
            'phase': 'phase',
            'proposal': 'proposal',
            'quantity': 'quantity',
            'sort_order': 'sortOrder',
            'subtotal': 'subtotal',
            'work_type': 'workType'
        }

        self._description = description
        self._is_shown_on_proposal = is_shown_on_proposal
        self._name = name
        self._phase = phase
        self._proposal = proposal
        self._quantity = quantity
        self._sort_order = sort_order
        self._subtotal = subtotal
        self._work_type = work_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProposalWorkhourRowInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProposalWorkhourRowInputModel of this ProposalWorkhourRowInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProposalWorkhourRowInputModel.


        :return: The description of this ProposalWorkhourRowInputModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProposalWorkhourRowInputModel.


        :param description: The description of this ProposalWorkhourRowInputModel.
        :type description: str
        """

        self._description = description

    @property
    def is_shown_on_proposal(self):
        """Gets the is_shown_on_proposal of this ProposalWorkhourRowInputModel.


        :return: The is_shown_on_proposal of this ProposalWorkhourRowInputModel.
        :rtype: bool
        """
        return self._is_shown_on_proposal

    @is_shown_on_proposal.setter
    def is_shown_on_proposal(self, is_shown_on_proposal):
        """Sets the is_shown_on_proposal of this ProposalWorkhourRowInputModel.


        :param is_shown_on_proposal: The is_shown_on_proposal of this ProposalWorkhourRowInputModel.
        :type is_shown_on_proposal: bool
        """

        self._is_shown_on_proposal = is_shown_on_proposal

    @property
    def name(self):
        """Gets the name of this ProposalWorkhourRowInputModel.


        :return: The name of this ProposalWorkhourRowInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProposalWorkhourRowInputModel.


        :param name: The name of this ProposalWorkhourRowInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def phase(self):
        """Gets the phase of this ProposalWorkhourRowInputModel.


        :return: The phase of this ProposalWorkhourRowInputModel.
        :rtype: SimpleInputModel
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ProposalWorkhourRowInputModel.


        :param phase: The phase of this ProposalWorkhourRowInputModel.
        :type phase: SimpleInputModel
        """

        self._phase = phase

    @property
    def proposal(self):
        """Gets the proposal of this ProposalWorkhourRowInputModel.


        :return: The proposal of this ProposalWorkhourRowInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._proposal

    @proposal.setter
    def proposal(self, proposal):
        """Sets the proposal of this ProposalWorkhourRowInputModel.


        :param proposal: The proposal of this ProposalWorkhourRowInputModel.
        :type proposal: SimpleInputRequiredModel
        """
        if proposal is None:
            raise ValueError("Invalid value for `proposal`, must not be `None`")

        self._proposal = proposal

    @property
    def quantity(self):
        """Gets the quantity of this ProposalWorkhourRowInputModel.


        :return: The quantity of this ProposalWorkhourRowInputModel.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProposalWorkhourRowInputModel.


        :param quantity: The quantity of this ProposalWorkhourRowInputModel.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sort_order(self):
        """Gets the sort_order of this ProposalWorkhourRowInputModel.


        :return: The sort_order of this ProposalWorkhourRowInputModel.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ProposalWorkhourRowInputModel.


        :param sort_order: The sort_order of this ProposalWorkhourRowInputModel.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def subtotal(self):
        """Gets the subtotal of this ProposalWorkhourRowInputModel.


        :return: The subtotal of this ProposalWorkhourRowInputModel.
        :rtype: SimpleInputModel
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this ProposalWorkhourRowInputModel.


        :param subtotal: The subtotal of this ProposalWorkhourRowInputModel.
        :type subtotal: SimpleInputModel
        """

        self._subtotal = subtotal

    @property
    def work_type(self):
        """Gets the work_type of this ProposalWorkhourRowInputModel.


        :return: The work_type of this ProposalWorkhourRowInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this ProposalWorkhourRowInputModel.


        :param work_type: The work_type of this ProposalWorkhourRowInputModel.
        :type work_type: SimpleInputRequiredModel
        """
        if work_type is None:
            raise ValueError("Invalid value for `work_type`, must not be `None`")

        self._work_type = work_type
