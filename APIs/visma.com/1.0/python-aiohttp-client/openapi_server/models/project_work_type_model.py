# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.work_type_sub_model import WorkTypeSubModel
from openapi_server import util


class ProjectWorkTypeModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, is_default: bool=None, project_guid: str=None, worktype: WorkTypeSubModel=None):
        """ProjectWorkTypeModel - a model defined in OpenAPI

        :param guid: The guid of this ProjectWorkTypeModel.
        :param is_default: The is_default of this ProjectWorkTypeModel.
        :param project_guid: The project_guid of this ProjectWorkTypeModel.
        :param worktype: The worktype of this ProjectWorkTypeModel.
        """
        self.openapi_types = {
            'guid': str,
            'is_default': bool,
            'project_guid': str,
            'worktype': WorkTypeSubModel
        }

        self.attribute_map = {
            'guid': 'guid',
            'is_default': 'isDefault',
            'project_guid': 'projectGuid',
            'worktype': 'worktype'
        }

        self._guid = guid
        self._is_default = is_default
        self._project_guid = project_guid
        self._worktype = worktype

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectWorkTypeModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectWorkTypeModel of this ProjectWorkTypeModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this ProjectWorkTypeModel.


        :return: The guid of this ProjectWorkTypeModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ProjectWorkTypeModel.


        :param guid: The guid of this ProjectWorkTypeModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_default(self):
        """Gets the is_default of this ProjectWorkTypeModel.


        :return: The is_default of this ProjectWorkTypeModel.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ProjectWorkTypeModel.


        :param is_default: The is_default of this ProjectWorkTypeModel.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def project_guid(self):
        """Gets the project_guid of this ProjectWorkTypeModel.


        :return: The project_guid of this ProjectWorkTypeModel.
        :rtype: str
        """
        return self._project_guid

    @project_guid.setter
    def project_guid(self, project_guid):
        """Sets the project_guid of this ProjectWorkTypeModel.


        :param project_guid: The project_guid of this ProjectWorkTypeModel.
        :type project_guid: str
        """
        if project_guid is None:
            raise ValueError("Invalid value for `project_guid`, must not be `None`")
        if project_guid is not None and len(project_guid) < 1:
            raise ValueError("Invalid value for `project_guid`, length must be greater than or equal to `1`")

        self._project_guid = project_guid

    @property
    def worktype(self):
        """Gets the worktype of this ProjectWorkTypeModel.


        :return: The worktype of this ProjectWorkTypeModel.
        :rtype: WorkTypeSubModel
        """
        return self._worktype

    @worktype.setter
    def worktype(self, worktype):
        """Sets the worktype of this ProjectWorkTypeModel.


        :param worktype: The worktype of this ProjectWorkTypeModel.
        :type worktype: WorkTypeSubModel
        """
        if worktype is None:
            raise ValueError("Invalid value for `worktype`, must not be `None`")

        self._worktype = worktype
