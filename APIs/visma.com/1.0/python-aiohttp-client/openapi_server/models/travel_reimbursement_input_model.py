# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_by_type import GroupByType
from openapi_server.models.model_base_with_required_guid import ModelBaseWithRequiredGuid
from openapi_server.models.money_input_model_with_nullable_amount import MoneyInputModelWithNullableAmount
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server import util


class TravelReimbursementInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advance_payment: MoneyInputModelWithNullableAmount=None, group_by: GroupByType=None, title: str=None, travel_reimbursement_status: SimpleInputModel=None, user: ModelBaseWithRequiredGuid=None):
        """TravelReimbursementInputModel - a model defined in OpenAPI

        :param advance_payment: The advance_payment of this TravelReimbursementInputModel.
        :param group_by: The group_by of this TravelReimbursementInputModel.
        :param title: The title of this TravelReimbursementInputModel.
        :param travel_reimbursement_status: The travel_reimbursement_status of this TravelReimbursementInputModel.
        :param user: The user of this TravelReimbursementInputModel.
        """
        self.openapi_types = {
            'advance_payment': MoneyInputModelWithNullableAmount,
            'group_by': GroupByType,
            'title': str,
            'travel_reimbursement_status': SimpleInputModel,
            'user': ModelBaseWithRequiredGuid
        }

        self.attribute_map = {
            'advance_payment': 'advancePayment',
            'group_by': 'groupBy',
            'title': 'title',
            'travel_reimbursement_status': 'travelReimbursementStatus',
            'user': 'user'
        }

        self._advance_payment = advance_payment
        self._group_by = group_by
        self._title = title
        self._travel_reimbursement_status = travel_reimbursement_status
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TravelReimbursementInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TravelReimbursementInputModel of this TravelReimbursementInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advance_payment(self):
        """Gets the advance_payment of this TravelReimbursementInputModel.


        :return: The advance_payment of this TravelReimbursementInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._advance_payment

    @advance_payment.setter
    def advance_payment(self, advance_payment):
        """Sets the advance_payment of this TravelReimbursementInputModel.


        :param advance_payment: The advance_payment of this TravelReimbursementInputModel.
        :type advance_payment: MoneyInputModelWithNullableAmount
        """

        self._advance_payment = advance_payment

    @property
    def group_by(self):
        """Gets the group_by of this TravelReimbursementInputModel.


        :return: The group_by of this TravelReimbursementInputModel.
        :rtype: GroupByType
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this TravelReimbursementInputModel.


        :param group_by: The group_by of this TravelReimbursementInputModel.
        :type group_by: GroupByType
        """

        self._group_by = group_by

    @property
    def title(self):
        """Gets the title of this TravelReimbursementInputModel.


        :return: The title of this TravelReimbursementInputModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TravelReimbursementInputModel.


        :param title: The title of this TravelReimbursementInputModel.
        :type title: str
        """

        self._title = title

    @property
    def travel_reimbursement_status(self):
        """Gets the travel_reimbursement_status of this TravelReimbursementInputModel.


        :return: The travel_reimbursement_status of this TravelReimbursementInputModel.
        :rtype: SimpleInputModel
        """
        return self._travel_reimbursement_status

    @travel_reimbursement_status.setter
    def travel_reimbursement_status(self, travel_reimbursement_status):
        """Sets the travel_reimbursement_status of this TravelReimbursementInputModel.


        :param travel_reimbursement_status: The travel_reimbursement_status of this TravelReimbursementInputModel.
        :type travel_reimbursement_status: SimpleInputModel
        """

        self._travel_reimbursement_status = travel_reimbursement_status

    @property
    def user(self):
        """Gets the user of this TravelReimbursementInputModel.


        :return: The user of this TravelReimbursementInputModel.
        :rtype: ModelBaseWithRequiredGuid
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TravelReimbursementInputModel.


        :param user: The user of this TravelReimbursementInputModel.
        :type user: ModelBaseWithRequiredGuid
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
