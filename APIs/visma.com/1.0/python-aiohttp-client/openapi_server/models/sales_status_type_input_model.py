# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_status_type import SalesStatusType
from openapi_server import util


class SalesStatusTypeInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_probability: int=None, is_active: bool=True, is_proposal_default: bool=False, name: str=None, sales_state: SalesStatusType=None):
        """SalesStatusTypeInputModel - a model defined in OpenAPI

        :param default_probability: The default_probability of this SalesStatusTypeInputModel.
        :param is_active: The is_active of this SalesStatusTypeInputModel.
        :param is_proposal_default: The is_proposal_default of this SalesStatusTypeInputModel.
        :param name: The name of this SalesStatusTypeInputModel.
        :param sales_state: The sales_state of this SalesStatusTypeInputModel.
        """
        self.openapi_types = {
            'default_probability': int,
            'is_active': bool,
            'is_proposal_default': bool,
            'name': str,
            'sales_state': SalesStatusType
        }

        self.attribute_map = {
            'default_probability': 'defaultProbability',
            'is_active': 'isActive',
            'is_proposal_default': 'isProposalDefault',
            'name': 'name',
            'sales_state': 'salesState'
        }

        self._default_probability = default_probability
        self._is_active = is_active
        self._is_proposal_default = is_proposal_default
        self._name = name
        self._sales_state = sales_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesStatusTypeInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesStatusTypeInputModel of this SalesStatusTypeInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_probability(self):
        """Gets the default_probability of this SalesStatusTypeInputModel.


        :return: The default_probability of this SalesStatusTypeInputModel.
        :rtype: int
        """
        return self._default_probability

    @default_probability.setter
    def default_probability(self, default_probability):
        """Sets the default_probability of this SalesStatusTypeInputModel.


        :param default_probability: The default_probability of this SalesStatusTypeInputModel.
        :type default_probability: int
        """

        self._default_probability = default_probability

    @property
    def is_active(self):
        """Gets the is_active of this SalesStatusTypeInputModel.


        :return: The is_active of this SalesStatusTypeInputModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SalesStatusTypeInputModel.


        :param is_active: The is_active of this SalesStatusTypeInputModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_proposal_default(self):
        """Gets the is_proposal_default of this SalesStatusTypeInputModel.


        :return: The is_proposal_default of this SalesStatusTypeInputModel.
        :rtype: bool
        """
        return self._is_proposal_default

    @is_proposal_default.setter
    def is_proposal_default(self, is_proposal_default):
        """Sets the is_proposal_default of this SalesStatusTypeInputModel.


        :param is_proposal_default: The is_proposal_default of this SalesStatusTypeInputModel.
        :type is_proposal_default: bool
        """

        self._is_proposal_default = is_proposal_default

    @property
    def name(self):
        """Gets the name of this SalesStatusTypeInputModel.


        :return: The name of this SalesStatusTypeInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SalesStatusTypeInputModel.


        :param name: The name of this SalesStatusTypeInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def sales_state(self):
        """Gets the sales_state of this SalesStatusTypeInputModel.


        :return: The sales_state of this SalesStatusTypeInputModel.
        :rtype: SalesStatusType
        """
        return self._sales_state

    @sales_state.setter
    def sales_state(self, sales_state):
        """Sets the sales_state of this SalesStatusTypeInputModel.


        :param sales_state: The sales_state of this SalesStatusTypeInputModel.
        :type sales_state: SalesStatusType
        """
        if sales_state is None:
            raise ValueError("Invalid value for `sales_state`, must not be `None`")

        self._sales_state = sales_state
