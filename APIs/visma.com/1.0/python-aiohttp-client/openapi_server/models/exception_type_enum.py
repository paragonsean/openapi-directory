# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExceptionTypeEnum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INTERNALSYSTEMERROR = 'InternalSystemError'
    AUTHENTICATIONREQUIRED = 'AuthenticationRequired'
    ADDONMISSING = 'AddonMissing'
    FEATUREISNOTENABLED = 'FeatureIsNotEnabled'
    INVALIDPARAMETER = 'InvalidParameter'
    INVALIDOPERATION = 'InvalidOperation'
    INVALIDREQUEST = 'InvalidRequest'
    INSUFFICIENTAPISCOPE = 'InsufficientApiScope'
    INVALIDAPIVERSION = 'InvalidApiVersion'
    CONFIGURATIONERROR = 'ConfigurationError'
    USERLICENSETYPE = 'UserLicenseType'
    TERMSOFSERVICENOTAPPROVED = 'TermsOfServiceNotApproved'
    HTTPSREQUIRED = 'HttpsRequired'
    ORGANIZATIONNOTACTIVE = 'OrganizationNotActive'
    PERMISSIONDENIED = 'PermissionDenied'
    TRIALEXPIRED = 'TrialExpired'
    NOTAVAILABLEINTRIAL = 'NotAvailableInTrial'
    INVALIDRECAPTCHA = 'InvalidRecaptcha'
    ADDONMISSINGTERMSOFSERVICEAPPROVAL = 'AddonMissingTermsOfServiceApproval'

    def __init__(self):
        """ExceptionTypeEnum - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExceptionTypeEnum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExceptionTypeEnum of this ExceptionTypeEnum.
        """
        return util.deserialize_model(dikt, cls)
