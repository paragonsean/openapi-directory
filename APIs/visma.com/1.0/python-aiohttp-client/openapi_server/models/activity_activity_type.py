# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_category import ActivityCategory
from openapi_server import util


class ActivityActivityType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: ActivityCategory=None, guid: str=None, name: str=None):
        """ActivityActivityType - a model defined in OpenAPI

        :param category: The category of this ActivityActivityType.
        :param guid: The guid of this ActivityActivityType.
        :param name: The name of this ActivityActivityType.
        """
        self.openapi_types = {
            'category': ActivityCategory,
            'guid': str,
            'name': str
        }

        self.attribute_map = {
            'category': 'category',
            'guid': 'guid',
            'name': 'name'
        }

        self._category = category
        self._guid = guid
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityActivityType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityActivityType of this ActivityActivityType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ActivityActivityType.


        :return: The category of this ActivityActivityType.
        :rtype: ActivityCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActivityActivityType.


        :param category: The category of this ActivityActivityType.
        :type category: ActivityCategory
        """

        self._category = category

    @property
    def guid(self):
        """Gets the guid of this ActivityActivityType.


        :return: The guid of this ActivityActivityType.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ActivityActivityType.


        :param guid: The guid of this ActivityActivityType.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")
        if guid is not None and len(guid) < 1:
            raise ValueError("Invalid value for `guid`, length must be greater than or equal to `1`")

        self._guid = guid

    @property
    def name(self):
        """Gets the name of this ActivityActivityType.


        :return: The name of this ActivityActivityType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityActivityType.


        :param name: The name of this ActivityActivityType.
        :type name: str
        """

        self._name = name
