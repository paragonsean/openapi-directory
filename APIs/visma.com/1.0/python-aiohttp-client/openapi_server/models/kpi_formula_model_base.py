# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kpi_formula_category import KpiFormulaCategory
from openapi_server.models.search_field_data_type import SearchFieldDataType
from openapi_server import util


class KpiFormulaModelBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: KpiFormulaCategory=None, data_type: SearchFieldDataType=None, guid: str=None, is_active: bool=True, name: str=None, unit: str=None):
        """KpiFormulaModelBase - a model defined in OpenAPI

        :param category: The category of this KpiFormulaModelBase.
        :param data_type: The data_type of this KpiFormulaModelBase.
        :param guid: The guid of this KpiFormulaModelBase.
        :param is_active: The is_active of this KpiFormulaModelBase.
        :param name: The name of this KpiFormulaModelBase.
        :param unit: The unit of this KpiFormulaModelBase.
        """
        self.openapi_types = {
            'category': KpiFormulaCategory,
            'data_type': SearchFieldDataType,
            'guid': str,
            'is_active': bool,
            'name': str,
            'unit': str
        }

        self.attribute_map = {
            'category': 'category',
            'data_type': 'dataType',
            'guid': 'guid',
            'is_active': 'isActive',
            'name': 'name',
            'unit': 'unit'
        }

        self._category = category
        self._data_type = data_type
        self._guid = guid
        self._is_active = is_active
        self._name = name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KpiFormulaModelBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KpiFormulaModelBase of this KpiFormulaModelBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this KpiFormulaModelBase.


        :return: The category of this KpiFormulaModelBase.
        :rtype: KpiFormulaCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this KpiFormulaModelBase.


        :param category: The category of this KpiFormulaModelBase.
        :type category: KpiFormulaCategory
        """

        self._category = category

    @property
    def data_type(self):
        """Gets the data_type of this KpiFormulaModelBase.


        :return: The data_type of this KpiFormulaModelBase.
        :rtype: SearchFieldDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this KpiFormulaModelBase.


        :param data_type: The data_type of this KpiFormulaModelBase.
        :type data_type: SearchFieldDataType
        """

        self._data_type = data_type

    @property
    def guid(self):
        """Gets the guid of this KpiFormulaModelBase.


        :return: The guid of this KpiFormulaModelBase.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this KpiFormulaModelBase.


        :param guid: The guid of this KpiFormulaModelBase.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_active(self):
        """Gets the is_active of this KpiFormulaModelBase.


        :return: The is_active of this KpiFormulaModelBase.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this KpiFormulaModelBase.


        :param is_active: The is_active of this KpiFormulaModelBase.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this KpiFormulaModelBase.


        :return: The name of this KpiFormulaModelBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KpiFormulaModelBase.


        :param name: The name of this KpiFormulaModelBase.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this KpiFormulaModelBase.


        :return: The unit of this KpiFormulaModelBase.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this KpiFormulaModelBase.


        :param unit: The unit of this KpiFormulaModelBase.
        :type unit: str
        """

        self._unit = unit
