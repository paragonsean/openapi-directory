# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model_with_not_negative_amount import MoneyInputModelWithNotNegativeAmount
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server.models.workweek import Workweek
from openapi_server import util


class WorkContractInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_hours: float=None, end_date: date=None, flextime_limit_per_day: float=None, hour_cost: MoneyInputModelWithNotNegativeAmount=None, is_flextime_active: bool=True, is_overtime_allowed: bool=None, role: SimpleInputModel=None, start_date: date=None, title: str=None, user: SimpleInputRequiredModel=None, work_week: List[Workweek]=None):
        """WorkContractInputModel - a model defined in OpenAPI

        :param daily_hours: The daily_hours of this WorkContractInputModel.
        :param end_date: The end_date of this WorkContractInputModel.
        :param flextime_limit_per_day: The flextime_limit_per_day of this WorkContractInputModel.
        :param hour_cost: The hour_cost of this WorkContractInputModel.
        :param is_flextime_active: The is_flextime_active of this WorkContractInputModel.
        :param is_overtime_allowed: The is_overtime_allowed of this WorkContractInputModel.
        :param role: The role of this WorkContractInputModel.
        :param start_date: The start_date of this WorkContractInputModel.
        :param title: The title of this WorkContractInputModel.
        :param user: The user of this WorkContractInputModel.
        :param work_week: The work_week of this WorkContractInputModel.
        """
        self.openapi_types = {
            'daily_hours': float,
            'end_date': date,
            'flextime_limit_per_day': float,
            'hour_cost': MoneyInputModelWithNotNegativeAmount,
            'is_flextime_active': bool,
            'is_overtime_allowed': bool,
            'role': SimpleInputModel,
            'start_date': date,
            'title': str,
            'user': SimpleInputRequiredModel,
            'work_week': List[Workweek]
        }

        self.attribute_map = {
            'daily_hours': 'dailyHours',
            'end_date': 'endDate',
            'flextime_limit_per_day': 'flextimeLimitPerDay',
            'hour_cost': 'hourCost',
            'is_flextime_active': 'isFlextimeActive',
            'is_overtime_allowed': 'isOvertimeAllowed',
            'role': 'role',
            'start_date': 'startDate',
            'title': 'title',
            'user': 'user',
            'work_week': 'workWeek'
        }

        self._daily_hours = daily_hours
        self._end_date = end_date
        self._flextime_limit_per_day = flextime_limit_per_day
        self._hour_cost = hour_cost
        self._is_flextime_active = is_flextime_active
        self._is_overtime_allowed = is_overtime_allowed
        self._role = role
        self._start_date = start_date
        self._title = title
        self._user = user
        self._work_week = work_week

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkContractInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkContractInputModel of this WorkContractInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_hours(self):
        """Gets the daily_hours of this WorkContractInputModel.


        :return: The daily_hours of this WorkContractInputModel.
        :rtype: float
        """
        return self._daily_hours

    @daily_hours.setter
    def daily_hours(self, daily_hours):
        """Sets the daily_hours of this WorkContractInputModel.


        :param daily_hours: The daily_hours of this WorkContractInputModel.
        :type daily_hours: float
        """

        self._daily_hours = daily_hours

    @property
    def end_date(self):
        """Gets the end_date of this WorkContractInputModel.


        :return: The end_date of this WorkContractInputModel.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this WorkContractInputModel.


        :param end_date: The end_date of this WorkContractInputModel.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def flextime_limit_per_day(self):
        """Gets the flextime_limit_per_day of this WorkContractInputModel.


        :return: The flextime_limit_per_day of this WorkContractInputModel.
        :rtype: float
        """
        return self._flextime_limit_per_day

    @flextime_limit_per_day.setter
    def flextime_limit_per_day(self, flextime_limit_per_day):
        """Sets the flextime_limit_per_day of this WorkContractInputModel.


        :param flextime_limit_per_day: The flextime_limit_per_day of this WorkContractInputModel.
        :type flextime_limit_per_day: float
        """

        self._flextime_limit_per_day = flextime_limit_per_day

    @property
    def hour_cost(self):
        """Gets the hour_cost of this WorkContractInputModel.


        :return: The hour_cost of this WorkContractInputModel.
        :rtype: MoneyInputModelWithNotNegativeAmount
        """
        return self._hour_cost

    @hour_cost.setter
    def hour_cost(self, hour_cost):
        """Sets the hour_cost of this WorkContractInputModel.


        :param hour_cost: The hour_cost of this WorkContractInputModel.
        :type hour_cost: MoneyInputModelWithNotNegativeAmount
        """
        if hour_cost is None:
            raise ValueError("Invalid value for `hour_cost`, must not be `None`")

        self._hour_cost = hour_cost

    @property
    def is_flextime_active(self):
        """Gets the is_flextime_active of this WorkContractInputModel.


        :return: The is_flextime_active of this WorkContractInputModel.
        :rtype: bool
        """
        return self._is_flextime_active

    @is_flextime_active.setter
    def is_flextime_active(self, is_flextime_active):
        """Sets the is_flextime_active of this WorkContractInputModel.


        :param is_flextime_active: The is_flextime_active of this WorkContractInputModel.
        :type is_flextime_active: bool
        """

        self._is_flextime_active = is_flextime_active

    @property
    def is_overtime_allowed(self):
        """Gets the is_overtime_allowed of this WorkContractInputModel.


        :return: The is_overtime_allowed of this WorkContractInputModel.
        :rtype: bool
        """
        return self._is_overtime_allowed

    @is_overtime_allowed.setter
    def is_overtime_allowed(self, is_overtime_allowed):
        """Sets the is_overtime_allowed of this WorkContractInputModel.


        :param is_overtime_allowed: The is_overtime_allowed of this WorkContractInputModel.
        :type is_overtime_allowed: bool
        """

        self._is_overtime_allowed = is_overtime_allowed

    @property
    def role(self):
        """Gets the role of this WorkContractInputModel.


        :return: The role of this WorkContractInputModel.
        :rtype: SimpleInputModel
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WorkContractInputModel.


        :param role: The role of this WorkContractInputModel.
        :type role: SimpleInputModel
        """

        self._role = role

    @property
    def start_date(self):
        """Gets the start_date of this WorkContractInputModel.


        :return: The start_date of this WorkContractInputModel.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this WorkContractInputModel.


        :param start_date: The start_date of this WorkContractInputModel.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def title(self):
        """Gets the title of this WorkContractInputModel.


        :return: The title of this WorkContractInputModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WorkContractInputModel.


        :param title: The title of this WorkContractInputModel.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def user(self):
        """Gets the user of this WorkContractInputModel.


        :return: The user of this WorkContractInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WorkContractInputModel.


        :param user: The user of this WorkContractInputModel.
        :type user: SimpleInputRequiredModel
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def work_week(self):
        """Gets the work_week of this WorkContractInputModel.


        :return: The work_week of this WorkContractInputModel.
        :rtype: List[Workweek]
        """
        return self._work_week

    @work_week.setter
    def work_week(self, work_week):
        """Sets the work_week of this WorkContractInputModel.


        :param work_week: The work_week of this WorkContractInputModel.
        :type work_week: List[Workweek]
        """

        self._work_week = work_week
