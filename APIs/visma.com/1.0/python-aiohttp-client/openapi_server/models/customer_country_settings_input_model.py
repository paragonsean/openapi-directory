# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class CustomerCountrySettingsInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: SimpleInputRequiredModel=None, customer: SimpleInputRequiredModel=None, is_tax_free: bool=None, tax_free_description: str=None, value_added_tax: SimpleInputModel=None, zero_vat_category_code_en16931: str=None):
        """CustomerCountrySettingsInputModel - a model defined in OpenAPI

        :param country: The country of this CustomerCountrySettingsInputModel.
        :param customer: The customer of this CustomerCountrySettingsInputModel.
        :param is_tax_free: The is_tax_free of this CustomerCountrySettingsInputModel.
        :param tax_free_description: The tax_free_description of this CustomerCountrySettingsInputModel.
        :param value_added_tax: The value_added_tax of this CustomerCountrySettingsInputModel.
        :param zero_vat_category_code_en16931: The zero_vat_category_code_en16931 of this CustomerCountrySettingsInputModel.
        """
        self.openapi_types = {
            'country': SimpleInputRequiredModel,
            'customer': SimpleInputRequiredModel,
            'is_tax_free': bool,
            'tax_free_description': str,
            'value_added_tax': SimpleInputModel,
            'zero_vat_category_code_en16931': str
        }

        self.attribute_map = {
            'country': 'country',
            'customer': 'customer',
            'is_tax_free': 'isTaxFree',
            'tax_free_description': 'taxFreeDescription',
            'value_added_tax': 'valueAddedTax',
            'zero_vat_category_code_en16931': 'zeroVatCategoryCodeEn16931'
        }

        self._country = country
        self._customer = customer
        self._is_tax_free = is_tax_free
        self._tax_free_description = tax_free_description
        self._value_added_tax = value_added_tax
        self._zero_vat_category_code_en16931 = zero_vat_category_code_en16931

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerCountrySettingsInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerCountrySettingsInputModel of this CustomerCountrySettingsInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CustomerCountrySettingsInputModel.


        :return: The country of this CustomerCountrySettingsInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerCountrySettingsInputModel.


        :param country: The country of this CustomerCountrySettingsInputModel.
        :type country: SimpleInputRequiredModel
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def customer(self):
        """Gets the customer of this CustomerCountrySettingsInputModel.


        :return: The customer of this CustomerCountrySettingsInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerCountrySettingsInputModel.


        :param customer: The customer of this CustomerCountrySettingsInputModel.
        :type customer: SimpleInputRequiredModel
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def is_tax_free(self):
        """Gets the is_tax_free of this CustomerCountrySettingsInputModel.


        :return: The is_tax_free of this CustomerCountrySettingsInputModel.
        :rtype: bool
        """
        return self._is_tax_free

    @is_tax_free.setter
    def is_tax_free(self, is_tax_free):
        """Sets the is_tax_free of this CustomerCountrySettingsInputModel.


        :param is_tax_free: The is_tax_free of this CustomerCountrySettingsInputModel.
        :type is_tax_free: bool
        """

        self._is_tax_free = is_tax_free

    @property
    def tax_free_description(self):
        """Gets the tax_free_description of this CustomerCountrySettingsInputModel.


        :return: The tax_free_description of this CustomerCountrySettingsInputModel.
        :rtype: str
        """
        return self._tax_free_description

    @tax_free_description.setter
    def tax_free_description(self, tax_free_description):
        """Sets the tax_free_description of this CustomerCountrySettingsInputModel.


        :param tax_free_description: The tax_free_description of this CustomerCountrySettingsInputModel.
        :type tax_free_description: str
        """

        self._tax_free_description = tax_free_description

    @property
    def value_added_tax(self):
        """Gets the value_added_tax of this CustomerCountrySettingsInputModel.


        :return: The value_added_tax of this CustomerCountrySettingsInputModel.
        :rtype: SimpleInputModel
        """
        return self._value_added_tax

    @value_added_tax.setter
    def value_added_tax(self, value_added_tax):
        """Sets the value_added_tax of this CustomerCountrySettingsInputModel.


        :param value_added_tax: The value_added_tax of this CustomerCountrySettingsInputModel.
        :type value_added_tax: SimpleInputModel
        """

        self._value_added_tax = value_added_tax

    @property
    def zero_vat_category_code_en16931(self):
        """Gets the zero_vat_category_code_en16931 of this CustomerCountrySettingsInputModel.


        :return: The zero_vat_category_code_en16931 of this CustomerCountrySettingsInputModel.
        :rtype: str
        """
        return self._zero_vat_category_code_en16931

    @zero_vat_category_code_en16931.setter
    def zero_vat_category_code_en16931(self, zero_vat_category_code_en16931):
        """Sets the zero_vat_category_code_en16931 of this CustomerCountrySettingsInputModel.


        :param zero_vat_category_code_en16931: The zero_vat_category_code_en16931 of this CustomerCountrySettingsInputModel.
        :type zero_vat_category_code_en16931: str
        """

        self._zero_vat_category_code_en16931 = zero_vat_category_code_en16931
