# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_price_model import ProductPriceModel
from openapi_server.models.product_price_product_output_sub_model import ProductPriceProductOutputSubModel
from openapi_server import util


class ProductPriceOutputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_available: bool=None, is_volume_priced: bool=None, prices: List[ProductPriceModel]=None, product: ProductPriceProductOutputSubModel=None):
        """ProductPriceOutputModel - a model defined in OpenAPI

        :param is_available: The is_available of this ProductPriceOutputModel.
        :param is_volume_priced: The is_volume_priced of this ProductPriceOutputModel.
        :param prices: The prices of this ProductPriceOutputModel.
        :param product: The product of this ProductPriceOutputModel.
        """
        self.openapi_types = {
            'is_available': bool,
            'is_volume_priced': bool,
            'prices': List[ProductPriceModel],
            'product': ProductPriceProductOutputSubModel
        }

        self.attribute_map = {
            'is_available': 'isAvailable',
            'is_volume_priced': 'isVolumePriced',
            'prices': 'prices',
            'product': 'product'
        }

        self._is_available = is_available
        self._is_volume_priced = is_volume_priced
        self._prices = prices
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPriceOutputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPriceOutputModel of this ProductPriceOutputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_available(self):
        """Gets the is_available of this ProductPriceOutputModel.


        :return: The is_available of this ProductPriceOutputModel.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this ProductPriceOutputModel.


        :param is_available: The is_available of this ProductPriceOutputModel.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def is_volume_priced(self):
        """Gets the is_volume_priced of this ProductPriceOutputModel.


        :return: The is_volume_priced of this ProductPriceOutputModel.
        :rtype: bool
        """
        return self._is_volume_priced

    @is_volume_priced.setter
    def is_volume_priced(self, is_volume_priced):
        """Sets the is_volume_priced of this ProductPriceOutputModel.


        :param is_volume_priced: The is_volume_priced of this ProductPriceOutputModel.
        :type is_volume_priced: bool
        """

        self._is_volume_priced = is_volume_priced

    @property
    def prices(self):
        """Gets the prices of this ProductPriceOutputModel.


        :return: The prices of this ProductPriceOutputModel.
        :rtype: List[ProductPriceModel]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ProductPriceOutputModel.


        :param prices: The prices of this ProductPriceOutputModel.
        :type prices: List[ProductPriceModel]
        """

        self._prices = prices

    @property
    def product(self):
        """Gets the product of this ProductPriceOutputModel.


        :return: The product of this ProductPriceOutputModel.
        :rtype: ProductPriceProductOutputSubModel
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductPriceOutputModel.


        :param product: The product of this ProductPriceOutputModel.
        :type product: ProductPriceProductOutputSubModel
        """

        self._product = product
