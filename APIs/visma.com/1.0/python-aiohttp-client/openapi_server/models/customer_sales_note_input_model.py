# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class CustomerSalesNoteInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer: SimpleInputRequiredModel=None, note: str=None, user: SimpleInputRequiredModel=None):
        """CustomerSalesNoteInputModel - a model defined in OpenAPI

        :param customer: The customer of this CustomerSalesNoteInputModel.
        :param note: The note of this CustomerSalesNoteInputModel.
        :param user: The user of this CustomerSalesNoteInputModel.
        """
        self.openapi_types = {
            'customer': SimpleInputRequiredModel,
            'note': str,
            'user': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'customer': 'customer',
            'note': 'note',
            'user': 'user'
        }

        self._customer = customer
        self._note = note
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerSalesNoteInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerSalesNoteInputModel of this CustomerSalesNoteInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self):
        """Gets the customer of this CustomerSalesNoteInputModel.


        :return: The customer of this CustomerSalesNoteInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerSalesNoteInputModel.


        :param customer: The customer of this CustomerSalesNoteInputModel.
        :type customer: SimpleInputRequiredModel
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def note(self):
        """Gets the note of this CustomerSalesNoteInputModel.


        :return: The note of this CustomerSalesNoteInputModel.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CustomerSalesNoteInputModel.


        :param note: The note of this CustomerSalesNoteInputModel.
        :type note: str
        """

        self._note = note

    @property
    def user(self):
        """Gets the user of this CustomerSalesNoteInputModel.


        :return: The user of this CustomerSalesNoteInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CustomerSalesNoteInputModel.


        :param user: The user of this CustomerSalesNoteInputModel.
        :type user: SimpleInputRequiredModel
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
