# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class RoleAllocationInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_hours: float=None, end_date: date=None, phase: SimpleInputModel=None, project: SimpleInputRequiredModel=None, role: SimpleInputRequiredModel=None, start_date: date=None):
        """RoleAllocationInputModel - a model defined in OpenAPI

        :param allocation_hours: The allocation_hours of this RoleAllocationInputModel.
        :param end_date: The end_date of this RoleAllocationInputModel.
        :param phase: The phase of this RoleAllocationInputModel.
        :param project: The project of this RoleAllocationInputModel.
        :param role: The role of this RoleAllocationInputModel.
        :param start_date: The start_date of this RoleAllocationInputModel.
        """
        self.openapi_types = {
            'allocation_hours': float,
            'end_date': date,
            'phase': SimpleInputModel,
            'project': SimpleInputRequiredModel,
            'role': SimpleInputRequiredModel,
            'start_date': date
        }

        self.attribute_map = {
            'allocation_hours': 'allocationHours',
            'end_date': 'endDate',
            'phase': 'phase',
            'project': 'project',
            'role': 'role',
            'start_date': 'startDate'
        }

        self._allocation_hours = allocation_hours
        self._end_date = end_date
        self._phase = phase
        self._project = project
        self._role = role
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleAllocationInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleAllocationInputModel of this RoleAllocationInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_hours(self):
        """Gets the allocation_hours of this RoleAllocationInputModel.


        :return: The allocation_hours of this RoleAllocationInputModel.
        :rtype: float
        """
        return self._allocation_hours

    @allocation_hours.setter
    def allocation_hours(self, allocation_hours):
        """Sets the allocation_hours of this RoleAllocationInputModel.


        :param allocation_hours: The allocation_hours of this RoleAllocationInputModel.
        :type allocation_hours: float
        """
        if allocation_hours is None:
            raise ValueError("Invalid value for `allocation_hours`, must not be `None`")

        self._allocation_hours = allocation_hours

    @property
    def end_date(self):
        """Gets the end_date of this RoleAllocationInputModel.


        :return: The end_date of this RoleAllocationInputModel.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RoleAllocationInputModel.


        :param end_date: The end_date of this RoleAllocationInputModel.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def phase(self):
        """Gets the phase of this RoleAllocationInputModel.


        :return: The phase of this RoleAllocationInputModel.
        :rtype: SimpleInputModel
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this RoleAllocationInputModel.


        :param phase: The phase of this RoleAllocationInputModel.
        :type phase: SimpleInputModel
        """

        self._phase = phase

    @property
    def project(self):
        """Gets the project of this RoleAllocationInputModel.


        :return: The project of this RoleAllocationInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this RoleAllocationInputModel.


        :param project: The project of this RoleAllocationInputModel.
        :type project: SimpleInputRequiredModel
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def role(self):
        """Gets the role of this RoleAllocationInputModel.


        :return: The role of this RoleAllocationInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleAllocationInputModel.


        :param role: The role of this RoleAllocationInputModel.
        :type role: SimpleInputRequiredModel
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def start_date(self):
        """Gets the start_date of this RoleAllocationInputModel.


        :return: The start_date of this RoleAllocationInputModel.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RoleAllocationInputModel.


        :param start_date: The start_date of this RoleAllocationInputModel.
        :type start_date: date
        """

        self._start_date = start_date
