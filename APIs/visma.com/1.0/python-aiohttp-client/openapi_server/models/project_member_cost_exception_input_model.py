# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model_with_nullable_amount import MoneyInputModelWithNullableAmount
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class ProjectMemberCostExceptionInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: MoneyInputModelWithNullableAmount=None, project: SimpleInputRequiredModel=None, user: SimpleInputRequiredModel=None):
        """ProjectMemberCostExceptionInputModel - a model defined in OpenAPI

        :param cost: The cost of this ProjectMemberCostExceptionInputModel.
        :param project: The project of this ProjectMemberCostExceptionInputModel.
        :param user: The user of this ProjectMemberCostExceptionInputModel.
        """
        self.openapi_types = {
            'cost': MoneyInputModelWithNullableAmount,
            'project': SimpleInputRequiredModel,
            'user': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'cost': 'cost',
            'project': 'project',
            'user': 'user'
        }

        self._cost = cost
        self._project = project
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectMemberCostExceptionInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectMemberCostExceptionInputModel of this ProjectMemberCostExceptionInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this ProjectMemberCostExceptionInputModel.


        :return: The cost of this ProjectMemberCostExceptionInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ProjectMemberCostExceptionInputModel.


        :param cost: The cost of this ProjectMemberCostExceptionInputModel.
        :type cost: MoneyInputModelWithNullableAmount
        """

        self._cost = cost

    @property
    def project(self):
        """Gets the project of this ProjectMemberCostExceptionInputModel.


        :return: The project of this ProjectMemberCostExceptionInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectMemberCostExceptionInputModel.


        :param project: The project of this ProjectMemberCostExceptionInputModel.
        :type project: SimpleInputRequiredModel
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def user(self):
        """Gets the user of this ProjectMemberCostExceptionInputModel.


        :return: The user of this ProjectMemberCostExceptionInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ProjectMemberCostExceptionInputModel.


        :param user: The user of this ProjectMemberCostExceptionInputModel.
        :type user: SimpleInputRequiredModel
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
