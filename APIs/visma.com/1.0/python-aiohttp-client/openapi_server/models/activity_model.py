# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_activity_type import ActivityActivityType
from openapi_server.models.activity_customer import ActivityCustomer
from openapi_server.models.activity_owner_model import ActivityOwnerModel
from openapi_server.models.activity_phase import ActivityPhase
from openapi_server.models.activity_recurrence_model import ActivityRecurrenceModel
from openapi_server.models.model_with_name import ModelWithName
from openapi_server.models.recurrence_type import RecurrenceType
from openapi_server.models.user_with_first_name_last_name_and_photo_file_model import UserWithFirstNameLastNameAndPhotoFileModel
from openapi_server import util


class ActivityModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: ActivityActivityType=None, created_by: UserWithFirstNameLastNameAndPhotoFileModel=None, created_date_time: datetime=None, customer: ActivityCustomer=None, end_date_time: datetime=None, guid: str=None, has_duration: bool=None, has_hours: bool=None, is_all_day: bool=None, is_closed: bool=None, is_unassigned: bool=None, last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel=None, last_updated_date_time: datetime=None, location: str=None, name: str=None, notes: str=None, owner_user: ActivityOwnerModel=None, phase: ActivityPhase=None, project_task_status: ModelWithName=None, recurrence: ActivityRecurrenceModel=None, recurrence_parent_activity_guid: str=None, recurrence_rule: str=None, recurrence_type: RecurrenceType=None, start_date_time: datetime=None):
        """ActivityModel - a model defined in OpenAPI

        :param activity_type: The activity_type of this ActivityModel.
        :param created_by: The created_by of this ActivityModel.
        :param created_date_time: The created_date_time of this ActivityModel.
        :param customer: The customer of this ActivityModel.
        :param end_date_time: The end_date_time of this ActivityModel.
        :param guid: The guid of this ActivityModel.
        :param has_duration: The has_duration of this ActivityModel.
        :param has_hours: The has_hours of this ActivityModel.
        :param is_all_day: The is_all_day of this ActivityModel.
        :param is_closed: The is_closed of this ActivityModel.
        :param is_unassigned: The is_unassigned of this ActivityModel.
        :param last_updated_by: The last_updated_by of this ActivityModel.
        :param last_updated_date_time: The last_updated_date_time of this ActivityModel.
        :param location: The location of this ActivityModel.
        :param name: The name of this ActivityModel.
        :param notes: The notes of this ActivityModel.
        :param owner_user: The owner_user of this ActivityModel.
        :param phase: The phase of this ActivityModel.
        :param project_task_status: The project_task_status of this ActivityModel.
        :param recurrence: The recurrence of this ActivityModel.
        :param recurrence_parent_activity_guid: The recurrence_parent_activity_guid of this ActivityModel.
        :param recurrence_rule: The recurrence_rule of this ActivityModel.
        :param recurrence_type: The recurrence_type of this ActivityModel.
        :param start_date_time: The start_date_time of this ActivityModel.
        """
        self.openapi_types = {
            'activity_type': ActivityActivityType,
            'created_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'created_date_time': datetime,
            'customer': ActivityCustomer,
            'end_date_time': datetime,
            'guid': str,
            'has_duration': bool,
            'has_hours': bool,
            'is_all_day': bool,
            'is_closed': bool,
            'is_unassigned': bool,
            'last_updated_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'last_updated_date_time': datetime,
            'location': str,
            'name': str,
            'notes': str,
            'owner_user': ActivityOwnerModel,
            'phase': ActivityPhase,
            'project_task_status': ModelWithName,
            'recurrence': ActivityRecurrenceModel,
            'recurrence_parent_activity_guid': str,
            'recurrence_rule': str,
            'recurrence_type': RecurrenceType,
            'start_date_time': datetime
        }

        self.attribute_map = {
            'activity_type': 'activityType',
            'created_by': 'createdBy',
            'created_date_time': 'createdDateTime',
            'customer': 'customer',
            'end_date_time': 'endDateTime',
            'guid': 'guid',
            'has_duration': 'hasDuration',
            'has_hours': 'hasHours',
            'is_all_day': 'isAllDay',
            'is_closed': 'isClosed',
            'is_unassigned': 'isUnassigned',
            'last_updated_by': 'lastUpdatedBy',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'location': 'location',
            'name': 'name',
            'notes': 'notes',
            'owner_user': 'ownerUser',
            'phase': 'phase',
            'project_task_status': 'projectTaskStatus',
            'recurrence': 'recurrence',
            'recurrence_parent_activity_guid': 'recurrenceParentActivityGuid',
            'recurrence_rule': 'recurrenceRule',
            'recurrence_type': 'recurrenceType',
            'start_date_time': 'startDateTime'
        }

        self._activity_type = activity_type
        self._created_by = created_by
        self._created_date_time = created_date_time
        self._customer = customer
        self._end_date_time = end_date_time
        self._guid = guid
        self._has_duration = has_duration
        self._has_hours = has_hours
        self._is_all_day = is_all_day
        self._is_closed = is_closed
        self._is_unassigned = is_unassigned
        self._last_updated_by = last_updated_by
        self._last_updated_date_time = last_updated_date_time
        self._location = location
        self._name = name
        self._notes = notes
        self._owner_user = owner_user
        self._phase = phase
        self._project_task_status = project_task_status
        self._recurrence = recurrence
        self._recurrence_parent_activity_guid = recurrence_parent_activity_guid
        self._recurrence_rule = recurrence_rule
        self._recurrence_type = recurrence_type
        self._start_date_time = start_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityModel of this ActivityModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this ActivityModel.


        :return: The activity_type of this ActivityModel.
        :rtype: ActivityActivityType
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this ActivityModel.


        :param activity_type: The activity_type of this ActivityModel.
        :type activity_type: ActivityActivityType
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")

        self._activity_type = activity_type

    @property
    def created_by(self):
        """Gets the created_by of this ActivityModel.


        :return: The created_by of this ActivityModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ActivityModel.


        :param created_by: The created_by of this ActivityModel.
        :type created_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._created_by = created_by

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ActivityModel.


        :return: The created_date_time of this ActivityModel.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ActivityModel.


        :param created_date_time: The created_date_time of this ActivityModel.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def customer(self):
        """Gets the customer of this ActivityModel.


        :return: The customer of this ActivityModel.
        :rtype: ActivityCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ActivityModel.


        :param customer: The customer of this ActivityModel.
        :type customer: ActivityCustomer
        """

        self._customer = customer

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ActivityModel.


        :return: The end_date_time of this ActivityModel.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ActivityModel.


        :param end_date_time: The end_date_time of this ActivityModel.
        :type end_date_time: datetime
        """

        self._end_date_time = end_date_time

    @property
    def guid(self):
        """Gets the guid of this ActivityModel.


        :return: The guid of this ActivityModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ActivityModel.


        :param guid: The guid of this ActivityModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def has_duration(self):
        """Gets the has_duration of this ActivityModel.


        :return: The has_duration of this ActivityModel.
        :rtype: bool
        """
        return self._has_duration

    @has_duration.setter
    def has_duration(self, has_duration):
        """Sets the has_duration of this ActivityModel.


        :param has_duration: The has_duration of this ActivityModel.
        :type has_duration: bool
        """

        self._has_duration = has_duration

    @property
    def has_hours(self):
        """Gets the has_hours of this ActivityModel.


        :return: The has_hours of this ActivityModel.
        :rtype: bool
        """
        return self._has_hours

    @has_hours.setter
    def has_hours(self, has_hours):
        """Sets the has_hours of this ActivityModel.


        :param has_hours: The has_hours of this ActivityModel.
        :type has_hours: bool
        """

        self._has_hours = has_hours

    @property
    def is_all_day(self):
        """Gets the is_all_day of this ActivityModel.


        :return: The is_all_day of this ActivityModel.
        :rtype: bool
        """
        return self._is_all_day

    @is_all_day.setter
    def is_all_day(self, is_all_day):
        """Sets the is_all_day of this ActivityModel.


        :param is_all_day: The is_all_day of this ActivityModel.
        :type is_all_day: bool
        """

        self._is_all_day = is_all_day

    @property
    def is_closed(self):
        """Gets the is_closed of this ActivityModel.


        :return: The is_closed of this ActivityModel.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this ActivityModel.


        :param is_closed: The is_closed of this ActivityModel.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def is_unassigned(self):
        """Gets the is_unassigned of this ActivityModel.


        :return: The is_unassigned of this ActivityModel.
        :rtype: bool
        """
        return self._is_unassigned

    @is_unassigned.setter
    def is_unassigned(self, is_unassigned):
        """Sets the is_unassigned of this ActivityModel.


        :param is_unassigned: The is_unassigned of this ActivityModel.
        :type is_unassigned: bool
        """

        self._is_unassigned = is_unassigned

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ActivityModel.


        :return: The last_updated_by of this ActivityModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ActivityModel.


        :param last_updated_by: The last_updated_by of this ActivityModel.
        :type last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._last_updated_by = last_updated_by

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this ActivityModel.


        :return: The last_updated_date_time of this ActivityModel.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this ActivityModel.


        :param last_updated_date_time: The last_updated_date_time of this ActivityModel.
        :type last_updated_date_time: datetime
        """

        self._last_updated_date_time = last_updated_date_time

    @property
    def location(self):
        """Gets the location of this ActivityModel.


        :return: The location of this ActivityModel.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ActivityModel.


        :param location: The location of this ActivityModel.
        :type location: str
        """
        if location is not None and len(location) > 1000:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `1000`")
        if location is not None and len(location) < 0:
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `0`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this ActivityModel.


        :return: The name of this ActivityModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityModel.


        :param name: The name of this ActivityModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ActivityModel.


        :return: The notes of this ActivityModel.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ActivityModel.


        :param notes: The notes of this ActivityModel.
        :type notes: str
        """

        self._notes = notes

    @property
    def owner_user(self):
        """Gets the owner_user of this ActivityModel.


        :return: The owner_user of this ActivityModel.
        :rtype: ActivityOwnerModel
        """
        return self._owner_user

    @owner_user.setter
    def owner_user(self, owner_user):
        """Sets the owner_user of this ActivityModel.


        :param owner_user: The owner_user of this ActivityModel.
        :type owner_user: ActivityOwnerModel
        """
        if owner_user is None:
            raise ValueError("Invalid value for `owner_user`, must not be `None`")

        self._owner_user = owner_user

    @property
    def phase(self):
        """Gets the phase of this ActivityModel.


        :return: The phase of this ActivityModel.
        :rtype: ActivityPhase
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ActivityModel.


        :param phase: The phase of this ActivityModel.
        :type phase: ActivityPhase
        """

        self._phase = phase

    @property
    def project_task_status(self):
        """Gets the project_task_status of this ActivityModel.


        :return: The project_task_status of this ActivityModel.
        :rtype: ModelWithName
        """
        return self._project_task_status

    @project_task_status.setter
    def project_task_status(self, project_task_status):
        """Sets the project_task_status of this ActivityModel.


        :param project_task_status: The project_task_status of this ActivityModel.
        :type project_task_status: ModelWithName
        """

        self._project_task_status = project_task_status

    @property
    def recurrence(self):
        """Gets the recurrence of this ActivityModel.


        :return: The recurrence of this ActivityModel.
        :rtype: ActivityRecurrenceModel
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this ActivityModel.


        :param recurrence: The recurrence of this ActivityModel.
        :type recurrence: ActivityRecurrenceModel
        """

        self._recurrence = recurrence

    @property
    def recurrence_parent_activity_guid(self):
        """Gets the recurrence_parent_activity_guid of this ActivityModel.


        :return: The recurrence_parent_activity_guid of this ActivityModel.
        :rtype: str
        """
        return self._recurrence_parent_activity_guid

    @recurrence_parent_activity_guid.setter
    def recurrence_parent_activity_guid(self, recurrence_parent_activity_guid):
        """Sets the recurrence_parent_activity_guid of this ActivityModel.


        :param recurrence_parent_activity_guid: The recurrence_parent_activity_guid of this ActivityModel.
        :type recurrence_parent_activity_guid: str
        """

        self._recurrence_parent_activity_guid = recurrence_parent_activity_guid

    @property
    def recurrence_rule(self):
        """Gets the recurrence_rule of this ActivityModel.


        :return: The recurrence_rule of this ActivityModel.
        :rtype: str
        """
        return self._recurrence_rule

    @recurrence_rule.setter
    def recurrence_rule(self, recurrence_rule):
        """Sets the recurrence_rule of this ActivityModel.


        :param recurrence_rule: The recurrence_rule of this ActivityModel.
        :type recurrence_rule: str
        """

        self._recurrence_rule = recurrence_rule

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this ActivityModel.


        :return: The recurrence_type of this ActivityModel.
        :rtype: RecurrenceType
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this ActivityModel.


        :param recurrence_type: The recurrence_type of this ActivityModel.
        :type recurrence_type: RecurrenceType
        """

        self._recurrence_type = recurrence_type

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ActivityModel.


        :return: The start_date_time of this ActivityModel.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ActivityModel.


        :param start_date_time: The start_date_time of this ActivityModel.
        :type start_date_time: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time
