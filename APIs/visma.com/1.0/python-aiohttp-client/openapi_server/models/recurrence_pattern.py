# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_model import DailyModel
from openapi_server.models.monthly_model import MonthlyModel
from openapi_server.models.weekly_model import WeeklyModel
from openapi_server.models.yearly_model import YearlyModel
from openapi_server import util


class RecurrencePattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily: DailyModel=None, monthly: MonthlyModel=None, weekly: WeeklyModel=None, yearly: YearlyModel=None):
        """RecurrencePattern - a model defined in OpenAPI

        :param daily: The daily of this RecurrencePattern.
        :param monthly: The monthly of this RecurrencePattern.
        :param weekly: The weekly of this RecurrencePattern.
        :param yearly: The yearly of this RecurrencePattern.
        """
        self.openapi_types = {
            'daily': DailyModel,
            'monthly': MonthlyModel,
            'weekly': WeeklyModel,
            'yearly': YearlyModel
        }

        self.attribute_map = {
            'daily': 'daily',
            'monthly': 'monthly',
            'weekly': 'weekly',
            'yearly': 'yearly'
        }

        self._daily = daily
        self._monthly = monthly
        self._weekly = weekly
        self._yearly = yearly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurrencePattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurrencePattern of this RecurrencePattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily(self):
        """Gets the daily of this RecurrencePattern.


        :return: The daily of this RecurrencePattern.
        :rtype: DailyModel
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this RecurrencePattern.


        :param daily: The daily of this RecurrencePattern.
        :type daily: DailyModel
        """

        self._daily = daily

    @property
    def monthly(self):
        """Gets the monthly of this RecurrencePattern.


        :return: The monthly of this RecurrencePattern.
        :rtype: MonthlyModel
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this RecurrencePattern.


        :param monthly: The monthly of this RecurrencePattern.
        :type monthly: MonthlyModel
        """

        self._monthly = monthly

    @property
    def weekly(self):
        """Gets the weekly of this RecurrencePattern.


        :return: The weekly of this RecurrencePattern.
        :rtype: WeeklyModel
        """
        return self._weekly

    @weekly.setter
    def weekly(self, weekly):
        """Sets the weekly of this RecurrencePattern.


        :param weekly: The weekly of this RecurrencePattern.
        :type weekly: WeeklyModel
        """

        self._weekly = weekly

    @property
    def yearly(self):
        """Gets the yearly of this RecurrencePattern.


        :return: The yearly of this RecurrencePattern.
        :rtype: YearlyModel
        """
        return self._yearly

    @yearly.setter
    def yearly(self, yearly):
        """Sets the yearly of this RecurrencePattern.


        :param yearly: The yearly of this RecurrencePattern.
        :type yearly: YearlyModel
        """

        self._yearly = yearly
