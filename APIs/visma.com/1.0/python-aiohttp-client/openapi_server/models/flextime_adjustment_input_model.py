# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class FlextimeAdjustmentInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment_date: date=None, amount: float=None, notes: str=None, user: SimpleInputRequiredModel=None):
        """FlextimeAdjustmentInputModel - a model defined in OpenAPI

        :param adjustment_date: The adjustment_date of this FlextimeAdjustmentInputModel.
        :param amount: The amount of this FlextimeAdjustmentInputModel.
        :param notes: The notes of this FlextimeAdjustmentInputModel.
        :param user: The user of this FlextimeAdjustmentInputModel.
        """
        self.openapi_types = {
            'adjustment_date': date,
            'amount': float,
            'notes': str,
            'user': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'adjustment_date': 'adjustmentDate',
            'amount': 'amount',
            'notes': 'notes',
            'user': 'user'
        }

        self._adjustment_date = adjustment_date
        self._amount = amount
        self._notes = notes
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlextimeAdjustmentInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlextimeAdjustmentInputModel of this FlextimeAdjustmentInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment_date(self):
        """Gets the adjustment_date of this FlextimeAdjustmentInputModel.


        :return: The adjustment_date of this FlextimeAdjustmentInputModel.
        :rtype: date
        """
        return self._adjustment_date

    @adjustment_date.setter
    def adjustment_date(self, adjustment_date):
        """Sets the adjustment_date of this FlextimeAdjustmentInputModel.


        :param adjustment_date: The adjustment_date of this FlextimeAdjustmentInputModel.
        :type adjustment_date: date
        """
        if adjustment_date is None:
            raise ValueError("Invalid value for `adjustment_date`, must not be `None`")

        self._adjustment_date = adjustment_date

    @property
    def amount(self):
        """Gets the amount of this FlextimeAdjustmentInputModel.


        :return: The amount of this FlextimeAdjustmentInputModel.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FlextimeAdjustmentInputModel.


        :param amount: The amount of this FlextimeAdjustmentInputModel.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def notes(self):
        """Gets the notes of this FlextimeAdjustmentInputModel.


        :return: The notes of this FlextimeAdjustmentInputModel.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FlextimeAdjustmentInputModel.


        :param notes: The notes of this FlextimeAdjustmentInputModel.
        :type notes: str
        """

        self._notes = notes

    @property
    def user(self):
        """Gets the user of this FlextimeAdjustmentInputModel.


        :return: The user of this FlextimeAdjustmentInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FlextimeAdjustmentInputModel.


        :param user: The user of this FlextimeAdjustmentInputModel.
        :type user: SimpleInputRequiredModel
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
