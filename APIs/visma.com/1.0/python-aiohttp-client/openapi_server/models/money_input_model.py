# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoneyInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency_code: str=None):
        """MoneyInputModel - a model defined in OpenAPI

        :param amount: The amount of this MoneyInputModel.
        :param currency_code: The currency_code of this MoneyInputModel.
        """
        self.openapi_types = {
            'amount': float,
            'currency_code': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency_code': 'currencyCode'
        }

        self._amount = amount
        self._currency_code = currency_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoneyInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoneyInputModel of this MoneyInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this MoneyInputModel.


        :return: The amount of this MoneyInputModel.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this MoneyInputModel.


        :param amount: The amount of this MoneyInputModel.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this MoneyInputModel.


        :return: The currency_code of this MoneyInputModel.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MoneyInputModel.


        :param currency_code: The currency_code of this MoneyInputModel.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")
        if currency_code is not None and len(currency_code) < 1:
            raise ValueError("Invalid value for `currency_code`, length must be greater than or equal to `1`")

        self._currency_code = currency_code
