# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageModel2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, count: int=None):
        """UsageModel2 - a model defined in OpenAPI

        :param context: The context of this UsageModel2.
        :param count: The count of this UsageModel2.
        """
        self.openapi_types = {
            'context': str,
            'count': int
        }

        self.attribute_map = {
            'context': 'context',
            'count': 'count'
        }

        self._context = context
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageModel2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageModel2 of this UsageModel2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this UsageModel2.


        :return: The context of this UsageModel2.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this UsageModel2.


        :param context: The context of this UsageModel2.
        :type context: str
        """

        self._context = context

    @property
    def count(self):
        """Gets the count of this UsageModel2.


        :return: The count of this UsageModel2.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this UsageModel2.


        :param count: The count of this UsageModel2.
        :type count: int
        """

        self._count = count
