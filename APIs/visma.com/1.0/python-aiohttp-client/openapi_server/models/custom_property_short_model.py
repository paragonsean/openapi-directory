# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_property_type import CustomPropertyType
from openapi_server import util


class CustomPropertyShortModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, name: str=None, parameters: str=None, type: CustomPropertyType=None):
        """CustomPropertyShortModel - a model defined in OpenAPI

        :param guid: The guid of this CustomPropertyShortModel.
        :param name: The name of this CustomPropertyShortModel.
        :param parameters: The parameters of this CustomPropertyShortModel.
        :param type: The type of this CustomPropertyShortModel.
        """
        self.openapi_types = {
            'guid': str,
            'name': str,
            'parameters': str,
            'type': CustomPropertyType
        }

        self.attribute_map = {
            'guid': 'guid',
            'name': 'name',
            'parameters': 'parameters',
            'type': 'type'
        }

        self._guid = guid
        self._name = name
        self._parameters = parameters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomPropertyShortModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomPropertyShortModel of this CustomPropertyShortModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this CustomPropertyShortModel.


        :return: The guid of this CustomPropertyShortModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CustomPropertyShortModel.


        :param guid: The guid of this CustomPropertyShortModel.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")
        if guid is not None and len(guid) < 1:
            raise ValueError("Invalid value for `guid`, length must be greater than or equal to `1`")

        self._guid = guid

    @property
    def name(self):
        """Gets the name of this CustomPropertyShortModel.


        :return: The name of this CustomPropertyShortModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomPropertyShortModel.


        :param name: The name of this CustomPropertyShortModel.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this CustomPropertyShortModel.


        :return: The parameters of this CustomPropertyShortModel.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CustomPropertyShortModel.


        :param parameters: The parameters of this CustomPropertyShortModel.
        :type parameters: str
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this CustomPropertyShortModel.


        :return: The type of this CustomPropertyShortModel.
        :rtype: CustomPropertyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomPropertyShortModel.


        :param type: The type of this CustomPropertyShortModel.
        :type type: CustomPropertyType
        """

        self._type = type
