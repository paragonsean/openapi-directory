# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.free_text_input_model import FreeTextInputModel
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class ProposalInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: SimpleInputModel=None, culture: SimpleInputModel=None, customer_contact_person: SimpleInputModel=None, free_text1: FreeTextInputModel=None, free_text2: FreeTextInputModel=None, language: SimpleInputModel=None, name: str=None, project: SimpleInputRequiredModel=None, proposal_date: date=None, proposal_status: SimpleInputModel=None):
        """ProposalInputModel - a model defined in OpenAPI

        :param billing_address: The billing_address of this ProposalInputModel.
        :param culture: The culture of this ProposalInputModel.
        :param customer_contact_person: The customer_contact_person of this ProposalInputModel.
        :param free_text1: The free_text1 of this ProposalInputModel.
        :param free_text2: The free_text2 of this ProposalInputModel.
        :param language: The language of this ProposalInputModel.
        :param name: The name of this ProposalInputModel.
        :param project: The project of this ProposalInputModel.
        :param proposal_date: The proposal_date of this ProposalInputModel.
        :param proposal_status: The proposal_status of this ProposalInputModel.
        """
        self.openapi_types = {
            'billing_address': SimpleInputModel,
            'culture': SimpleInputModel,
            'customer_contact_person': SimpleInputModel,
            'free_text1': FreeTextInputModel,
            'free_text2': FreeTextInputModel,
            'language': SimpleInputModel,
            'name': str,
            'project': SimpleInputRequiredModel,
            'proposal_date': date,
            'proposal_status': SimpleInputModel
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'culture': 'culture',
            'customer_contact_person': 'customerContactPerson',
            'free_text1': 'freeText1',
            'free_text2': 'freeText2',
            'language': 'language',
            'name': 'name',
            'project': 'project',
            'proposal_date': 'proposalDate',
            'proposal_status': 'proposalStatus'
        }

        self._billing_address = billing_address
        self._culture = culture
        self._customer_contact_person = customer_contact_person
        self._free_text1 = free_text1
        self._free_text2 = free_text2
        self._language = language
        self._name = name
        self._project = project
        self._proposal_date = proposal_date
        self._proposal_status = proposal_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProposalInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProposalInputModel of this ProposalInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this ProposalInputModel.


        :return: The billing_address of this ProposalInputModel.
        :rtype: SimpleInputModel
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this ProposalInputModel.


        :param billing_address: The billing_address of this ProposalInputModel.
        :type billing_address: SimpleInputModel
        """

        self._billing_address = billing_address

    @property
    def culture(self):
        """Gets the culture of this ProposalInputModel.


        :return: The culture of this ProposalInputModel.
        :rtype: SimpleInputModel
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this ProposalInputModel.


        :param culture: The culture of this ProposalInputModel.
        :type culture: SimpleInputModel
        """

        self._culture = culture

    @property
    def customer_contact_person(self):
        """Gets the customer_contact_person of this ProposalInputModel.


        :return: The customer_contact_person of this ProposalInputModel.
        :rtype: SimpleInputModel
        """
        return self._customer_contact_person

    @customer_contact_person.setter
    def customer_contact_person(self, customer_contact_person):
        """Sets the customer_contact_person of this ProposalInputModel.


        :param customer_contact_person: The customer_contact_person of this ProposalInputModel.
        :type customer_contact_person: SimpleInputModel
        """

        self._customer_contact_person = customer_contact_person

    @property
    def free_text1(self):
        """Gets the free_text1 of this ProposalInputModel.


        :return: The free_text1 of this ProposalInputModel.
        :rtype: FreeTextInputModel
        """
        return self._free_text1

    @free_text1.setter
    def free_text1(self, free_text1):
        """Sets the free_text1 of this ProposalInputModel.


        :param free_text1: The free_text1 of this ProposalInputModel.
        :type free_text1: FreeTextInputModel
        """

        self._free_text1 = free_text1

    @property
    def free_text2(self):
        """Gets the free_text2 of this ProposalInputModel.


        :return: The free_text2 of this ProposalInputModel.
        :rtype: FreeTextInputModel
        """
        return self._free_text2

    @free_text2.setter
    def free_text2(self, free_text2):
        """Sets the free_text2 of this ProposalInputModel.


        :param free_text2: The free_text2 of this ProposalInputModel.
        :type free_text2: FreeTextInputModel
        """

        self._free_text2 = free_text2

    @property
    def language(self):
        """Gets the language of this ProposalInputModel.


        :return: The language of this ProposalInputModel.
        :rtype: SimpleInputModel
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ProposalInputModel.


        :param language: The language of this ProposalInputModel.
        :type language: SimpleInputModel
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this ProposalInputModel.


        :return: The name of this ProposalInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProposalInputModel.


        :param name: The name of this ProposalInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def project(self):
        """Gets the project of this ProposalInputModel.


        :return: The project of this ProposalInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProposalInputModel.


        :param project: The project of this ProposalInputModel.
        :type project: SimpleInputRequiredModel
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def proposal_date(self):
        """Gets the proposal_date of this ProposalInputModel.


        :return: The proposal_date of this ProposalInputModel.
        :rtype: date
        """
        return self._proposal_date

    @proposal_date.setter
    def proposal_date(self, proposal_date):
        """Sets the proposal_date of this ProposalInputModel.


        :param proposal_date: The proposal_date of this ProposalInputModel.
        :type proposal_date: date
        """

        self._proposal_date = proposal_date

    @property
    def proposal_status(self):
        """Gets the proposal_status of this ProposalInputModel.


        :return: The proposal_status of this ProposalInputModel.
        :rtype: SimpleInputModel
        """
        return self._proposal_status

    @proposal_status.setter
    def proposal_status(self, proposal_status):
        """Sets the proposal_status of this ProposalInputModel.


        :param proposal_status: The proposal_status of this ProposalInputModel.
        :type proposal_status: SimpleInputModel
        """

        self._proposal_status = proposal_status
