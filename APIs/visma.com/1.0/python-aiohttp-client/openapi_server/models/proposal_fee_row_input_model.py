# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model import MoneyInputModel
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class ProposalFeeRowInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_shown_on_proposal: bool=True, measurement_unit: str=None, name: str=None, product: SimpleInputModel=None, project_fee: SimpleInputModel=None, proposal: SimpleInputRequiredModel=None, quantity: float=None, sort_order: int=None, subtotal: SimpleInputModel=None, unit_cost: MoneyInputModel=None, unit_price: MoneyInputModel=None, vat_rate: float=None):
        """ProposalFeeRowInputModel - a model defined in OpenAPI

        :param description: The description of this ProposalFeeRowInputModel.
        :param is_shown_on_proposal: The is_shown_on_proposal of this ProposalFeeRowInputModel.
        :param measurement_unit: The measurement_unit of this ProposalFeeRowInputModel.
        :param name: The name of this ProposalFeeRowInputModel.
        :param product: The product of this ProposalFeeRowInputModel.
        :param project_fee: The project_fee of this ProposalFeeRowInputModel.
        :param proposal: The proposal of this ProposalFeeRowInputModel.
        :param quantity: The quantity of this ProposalFeeRowInputModel.
        :param sort_order: The sort_order of this ProposalFeeRowInputModel.
        :param subtotal: The subtotal of this ProposalFeeRowInputModel.
        :param unit_cost: The unit_cost of this ProposalFeeRowInputModel.
        :param unit_price: The unit_price of this ProposalFeeRowInputModel.
        :param vat_rate: The vat_rate of this ProposalFeeRowInputModel.
        """
        self.openapi_types = {
            'description': str,
            'is_shown_on_proposal': bool,
            'measurement_unit': str,
            'name': str,
            'product': SimpleInputModel,
            'project_fee': SimpleInputModel,
            'proposal': SimpleInputRequiredModel,
            'quantity': float,
            'sort_order': int,
            'subtotal': SimpleInputModel,
            'unit_cost': MoneyInputModel,
            'unit_price': MoneyInputModel,
            'vat_rate': float
        }

        self.attribute_map = {
            'description': 'description',
            'is_shown_on_proposal': 'isShownOnProposal',
            'measurement_unit': 'measurementUnit',
            'name': 'name',
            'product': 'product',
            'project_fee': 'projectFee',
            'proposal': 'proposal',
            'quantity': 'quantity',
            'sort_order': 'sortOrder',
            'subtotal': 'subtotal',
            'unit_cost': 'unitCost',
            'unit_price': 'unitPrice',
            'vat_rate': 'vatRate'
        }

        self._description = description
        self._is_shown_on_proposal = is_shown_on_proposal
        self._measurement_unit = measurement_unit
        self._name = name
        self._product = product
        self._project_fee = project_fee
        self._proposal = proposal
        self._quantity = quantity
        self._sort_order = sort_order
        self._subtotal = subtotal
        self._unit_cost = unit_cost
        self._unit_price = unit_price
        self._vat_rate = vat_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProposalFeeRowInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProposalFeeRowInputModel of this ProposalFeeRowInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProposalFeeRowInputModel.


        :return: The description of this ProposalFeeRowInputModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProposalFeeRowInputModel.


        :param description: The description of this ProposalFeeRowInputModel.
        :type description: str
        """

        self._description = description

    @property
    def is_shown_on_proposal(self):
        """Gets the is_shown_on_proposal of this ProposalFeeRowInputModel.


        :return: The is_shown_on_proposal of this ProposalFeeRowInputModel.
        :rtype: bool
        """
        return self._is_shown_on_proposal

    @is_shown_on_proposal.setter
    def is_shown_on_proposal(self, is_shown_on_proposal):
        """Sets the is_shown_on_proposal of this ProposalFeeRowInputModel.


        :param is_shown_on_proposal: The is_shown_on_proposal of this ProposalFeeRowInputModel.
        :type is_shown_on_proposal: bool
        """

        self._is_shown_on_proposal = is_shown_on_proposal

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this ProposalFeeRowInputModel.


        :return: The measurement_unit of this ProposalFeeRowInputModel.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this ProposalFeeRowInputModel.


        :param measurement_unit: The measurement_unit of this ProposalFeeRowInputModel.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this ProposalFeeRowInputModel.


        :return: The name of this ProposalFeeRowInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProposalFeeRowInputModel.


        :param name: The name of this ProposalFeeRowInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def product(self):
        """Gets the product of this ProposalFeeRowInputModel.


        :return: The product of this ProposalFeeRowInputModel.
        :rtype: SimpleInputModel
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProposalFeeRowInputModel.


        :param product: The product of this ProposalFeeRowInputModel.
        :type product: SimpleInputModel
        """

        self._product = product

    @property
    def project_fee(self):
        """Gets the project_fee of this ProposalFeeRowInputModel.


        :return: The project_fee of this ProposalFeeRowInputModel.
        :rtype: SimpleInputModel
        """
        return self._project_fee

    @project_fee.setter
    def project_fee(self, project_fee):
        """Sets the project_fee of this ProposalFeeRowInputModel.


        :param project_fee: The project_fee of this ProposalFeeRowInputModel.
        :type project_fee: SimpleInputModel
        """

        self._project_fee = project_fee

    @property
    def proposal(self):
        """Gets the proposal of this ProposalFeeRowInputModel.


        :return: The proposal of this ProposalFeeRowInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._proposal

    @proposal.setter
    def proposal(self, proposal):
        """Sets the proposal of this ProposalFeeRowInputModel.


        :param proposal: The proposal of this ProposalFeeRowInputModel.
        :type proposal: SimpleInputRequiredModel
        """
        if proposal is None:
            raise ValueError("Invalid value for `proposal`, must not be `None`")

        self._proposal = proposal

    @property
    def quantity(self):
        """Gets the quantity of this ProposalFeeRowInputModel.


        :return: The quantity of this ProposalFeeRowInputModel.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProposalFeeRowInputModel.


        :param quantity: The quantity of this ProposalFeeRowInputModel.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sort_order(self):
        """Gets the sort_order of this ProposalFeeRowInputModel.


        :return: The sort_order of this ProposalFeeRowInputModel.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ProposalFeeRowInputModel.


        :param sort_order: The sort_order of this ProposalFeeRowInputModel.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def subtotal(self):
        """Gets the subtotal of this ProposalFeeRowInputModel.


        :return: The subtotal of this ProposalFeeRowInputModel.
        :rtype: SimpleInputModel
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this ProposalFeeRowInputModel.


        :param subtotal: The subtotal of this ProposalFeeRowInputModel.
        :type subtotal: SimpleInputModel
        """

        self._subtotal = subtotal

    @property
    def unit_cost(self):
        """Gets the unit_cost of this ProposalFeeRowInputModel.


        :return: The unit_cost of this ProposalFeeRowInputModel.
        :rtype: MoneyInputModel
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this ProposalFeeRowInputModel.


        :param unit_cost: The unit_cost of this ProposalFeeRowInputModel.
        :type unit_cost: MoneyInputModel
        """

        self._unit_cost = unit_cost

    @property
    def unit_price(self):
        """Gets the unit_price of this ProposalFeeRowInputModel.


        :return: The unit_price of this ProposalFeeRowInputModel.
        :rtype: MoneyInputModel
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProposalFeeRowInputModel.


        :param unit_price: The unit_price of this ProposalFeeRowInputModel.
        :type unit_price: MoneyInputModel
        """

        self._unit_price = unit_price

    @property
    def vat_rate(self):
        """Gets the vat_rate of this ProposalFeeRowInputModel.


        :return: The vat_rate of this ProposalFeeRowInputModel.
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this ProposalFeeRowInputModel.


        :param vat_rate: The vat_rate of this ProposalFeeRowInputModel.
        :type vat_rate: float
        """

        self._vat_rate = vat_rate
