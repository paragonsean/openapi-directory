# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_currency import CustomerCurrency
from openapi_server.models.customer_headquarter_address import CustomerHeadquarterAddress
from openapi_server.models.customer_invoicing_vat import CustomerInvoicingVat
from openapi_server.models.customer_language import CustomerLanguage
from openapi_server.models.model_with_name import ModelWithName
from openapi_server.models.user_with_first_name_last_name_and_photo_file_model import UserWithFirstNameLastNameAndPhotoFileModel
from openapi_server import util


class CustomerModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_revenue: int=None, created_by: UserWithFirstNameLastNameAndPhotoFileModel=None, created_date_time: datetime=None, currency: CustomerCurrency=None, e_invoice_address: str=None, e_invoice_operator: str=None, email: str=None, guid: str=None, headquarter_address: CustomerHeadquarterAddress=None, industry: ModelWithName=None, invoice_template: ModelWithName=None, invoicing_vat: CustomerInvoicingVat=None, is_active: bool=True, is_internal: bool=None, kvk_number: str=None, language: CustomerLanguage=None, last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel=None, last_updated_date_time: datetime=None, name: str=None, notes: str=None, number: int=None, number_of_employees: int=None, overdue_interest: float=None, owner: UserWithFirstNameLastNameAndPhotoFileModel=None, payment_term: int=None, pricelist: ModelWithName=None, timezone: ModelWithName=None, vat_number: str=None, website: str=None):
        """CustomerModel - a model defined in OpenAPI

        :param annual_revenue: The annual_revenue of this CustomerModel.
        :param created_by: The created_by of this CustomerModel.
        :param created_date_time: The created_date_time of this CustomerModel.
        :param currency: The currency of this CustomerModel.
        :param e_invoice_address: The e_invoice_address of this CustomerModel.
        :param e_invoice_operator: The e_invoice_operator of this CustomerModel.
        :param email: The email of this CustomerModel.
        :param guid: The guid of this CustomerModel.
        :param headquarter_address: The headquarter_address of this CustomerModel.
        :param industry: The industry of this CustomerModel.
        :param invoice_template: The invoice_template of this CustomerModel.
        :param invoicing_vat: The invoicing_vat of this CustomerModel.
        :param is_active: The is_active of this CustomerModel.
        :param is_internal: The is_internal of this CustomerModel.
        :param kvk_number: The kvk_number of this CustomerModel.
        :param language: The language of this CustomerModel.
        :param last_updated_by: The last_updated_by of this CustomerModel.
        :param last_updated_date_time: The last_updated_date_time of this CustomerModel.
        :param name: The name of this CustomerModel.
        :param notes: The notes of this CustomerModel.
        :param number: The number of this CustomerModel.
        :param number_of_employees: The number_of_employees of this CustomerModel.
        :param overdue_interest: The overdue_interest of this CustomerModel.
        :param owner: The owner of this CustomerModel.
        :param payment_term: The payment_term of this CustomerModel.
        :param pricelist: The pricelist of this CustomerModel.
        :param timezone: The timezone of this CustomerModel.
        :param vat_number: The vat_number of this CustomerModel.
        :param website: The website of this CustomerModel.
        """
        self.openapi_types = {
            'annual_revenue': int,
            'created_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'created_date_time': datetime,
            'currency': CustomerCurrency,
            'e_invoice_address': str,
            'e_invoice_operator': str,
            'email': str,
            'guid': str,
            'headquarter_address': CustomerHeadquarterAddress,
            'industry': ModelWithName,
            'invoice_template': ModelWithName,
            'invoicing_vat': CustomerInvoicingVat,
            'is_active': bool,
            'is_internal': bool,
            'kvk_number': str,
            'language': CustomerLanguage,
            'last_updated_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'last_updated_date_time': datetime,
            'name': str,
            'notes': str,
            'number': int,
            'number_of_employees': int,
            'overdue_interest': float,
            'owner': UserWithFirstNameLastNameAndPhotoFileModel,
            'payment_term': int,
            'pricelist': ModelWithName,
            'timezone': ModelWithName,
            'vat_number': str,
            'website': str
        }

        self.attribute_map = {
            'annual_revenue': 'annualRevenue',
            'created_by': 'createdBy',
            'created_date_time': 'createdDateTime',
            'currency': 'currency',
            'e_invoice_address': 'eInvoiceAddress',
            'e_invoice_operator': 'eInvoiceOperator',
            'email': 'email',
            'guid': 'guid',
            'headquarter_address': 'headquarterAddress',
            'industry': 'industry',
            'invoice_template': 'invoiceTemplate',
            'invoicing_vat': 'invoicingVat',
            'is_active': 'isActive',
            'is_internal': 'isInternal',
            'kvk_number': 'kvkNumber',
            'language': 'language',
            'last_updated_by': 'lastUpdatedBy',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'name': 'name',
            'notes': 'notes',
            'number': 'number',
            'number_of_employees': 'numberOfEmployees',
            'overdue_interest': 'overdueInterest',
            'owner': 'owner',
            'payment_term': 'paymentTerm',
            'pricelist': 'pricelist',
            'timezone': 'timezone',
            'vat_number': 'vatNumber',
            'website': 'website'
        }

        self._annual_revenue = annual_revenue
        self._created_by = created_by
        self._created_date_time = created_date_time
        self._currency = currency
        self._e_invoice_address = e_invoice_address
        self._e_invoice_operator = e_invoice_operator
        self._email = email
        self._guid = guid
        self._headquarter_address = headquarter_address
        self._industry = industry
        self._invoice_template = invoice_template
        self._invoicing_vat = invoicing_vat
        self._is_active = is_active
        self._is_internal = is_internal
        self._kvk_number = kvk_number
        self._language = language
        self._last_updated_by = last_updated_by
        self._last_updated_date_time = last_updated_date_time
        self._name = name
        self._notes = notes
        self._number = number
        self._number_of_employees = number_of_employees
        self._overdue_interest = overdue_interest
        self._owner = owner
        self._payment_term = payment_term
        self._pricelist = pricelist
        self._timezone = timezone
        self._vat_number = vat_number
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerModel of this CustomerModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_revenue(self):
        """Gets the annual_revenue of this CustomerModel.


        :return: The annual_revenue of this CustomerModel.
        :rtype: int
        """
        return self._annual_revenue

    @annual_revenue.setter
    def annual_revenue(self, annual_revenue):
        """Sets the annual_revenue of this CustomerModel.


        :param annual_revenue: The annual_revenue of this CustomerModel.
        :type annual_revenue: int
        """

        self._annual_revenue = annual_revenue

    @property
    def created_by(self):
        """Gets the created_by of this CustomerModel.


        :return: The created_by of this CustomerModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CustomerModel.


        :param created_by: The created_by of this CustomerModel.
        :type created_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._created_by = created_by

    @property
    def created_date_time(self):
        """Gets the created_date_time of this CustomerModel.


        :return: The created_date_time of this CustomerModel.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this CustomerModel.


        :param created_date_time: The created_date_time of this CustomerModel.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def currency(self):
        """Gets the currency of this CustomerModel.


        :return: The currency of this CustomerModel.
        :rtype: CustomerCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CustomerModel.


        :param currency: The currency of this CustomerModel.
        :type currency: CustomerCurrency
        """

        self._currency = currency

    @property
    def e_invoice_address(self):
        """Gets the e_invoice_address of this CustomerModel.


        :return: The e_invoice_address of this CustomerModel.
        :rtype: str
        """
        return self._e_invoice_address

    @e_invoice_address.setter
    def e_invoice_address(self, e_invoice_address):
        """Sets the e_invoice_address of this CustomerModel.


        :param e_invoice_address: The e_invoice_address of this CustomerModel.
        :type e_invoice_address: str
        """

        self._e_invoice_address = e_invoice_address

    @property
    def e_invoice_operator(self):
        """Gets the e_invoice_operator of this CustomerModel.


        :return: The e_invoice_operator of this CustomerModel.
        :rtype: str
        """
        return self._e_invoice_operator

    @e_invoice_operator.setter
    def e_invoice_operator(self, e_invoice_operator):
        """Sets the e_invoice_operator of this CustomerModel.


        :param e_invoice_operator: The e_invoice_operator of this CustomerModel.
        :type e_invoice_operator: str
        """

        self._e_invoice_operator = e_invoice_operator

    @property
    def email(self):
        """Gets the email of this CustomerModel.


        :return: The email of this CustomerModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerModel.


        :param email: The email of this CustomerModel.
        :type email: str
        """

        self._email = email

    @property
    def guid(self):
        """Gets the guid of this CustomerModel.


        :return: The guid of this CustomerModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CustomerModel.


        :param guid: The guid of this CustomerModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def headquarter_address(self):
        """Gets the headquarter_address of this CustomerModel.


        :return: The headquarter_address of this CustomerModel.
        :rtype: CustomerHeadquarterAddress
        """
        return self._headquarter_address

    @headquarter_address.setter
    def headquarter_address(self, headquarter_address):
        """Sets the headquarter_address of this CustomerModel.


        :param headquarter_address: The headquarter_address of this CustomerModel.
        :type headquarter_address: CustomerHeadquarterAddress
        """

        self._headquarter_address = headquarter_address

    @property
    def industry(self):
        """Gets the industry of this CustomerModel.


        :return: The industry of this CustomerModel.
        :rtype: ModelWithName
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CustomerModel.


        :param industry: The industry of this CustomerModel.
        :type industry: ModelWithName
        """

        self._industry = industry

    @property
    def invoice_template(self):
        """Gets the invoice_template of this CustomerModel.


        :return: The invoice_template of this CustomerModel.
        :rtype: ModelWithName
        """
        return self._invoice_template

    @invoice_template.setter
    def invoice_template(self, invoice_template):
        """Sets the invoice_template of this CustomerModel.


        :param invoice_template: The invoice_template of this CustomerModel.
        :type invoice_template: ModelWithName
        """

        self._invoice_template = invoice_template

    @property
    def invoicing_vat(self):
        """Gets the invoicing_vat of this CustomerModel.


        :return: The invoicing_vat of this CustomerModel.
        :rtype: CustomerInvoicingVat
        """
        return self._invoicing_vat

    @invoicing_vat.setter
    def invoicing_vat(self, invoicing_vat):
        """Sets the invoicing_vat of this CustomerModel.


        :param invoicing_vat: The invoicing_vat of this CustomerModel.
        :type invoicing_vat: CustomerInvoicingVat
        """

        self._invoicing_vat = invoicing_vat

    @property
    def is_active(self):
        """Gets the is_active of this CustomerModel.


        :return: The is_active of this CustomerModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CustomerModel.


        :param is_active: The is_active of this CustomerModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_internal(self):
        """Gets the is_internal of this CustomerModel.


        :return: The is_internal of this CustomerModel.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this CustomerModel.


        :param is_internal: The is_internal of this CustomerModel.
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def kvk_number(self):
        """Gets the kvk_number of this CustomerModel.


        :return: The kvk_number of this CustomerModel.
        :rtype: str
        """
        return self._kvk_number

    @kvk_number.setter
    def kvk_number(self, kvk_number):
        """Sets the kvk_number of this CustomerModel.


        :param kvk_number: The kvk_number of this CustomerModel.
        :type kvk_number: str
        """
        if kvk_number is not None and len(kvk_number) > 25:
            raise ValueError("Invalid value for `kvk_number`, length must be less than or equal to `25`")
        if kvk_number is not None and len(kvk_number) < 0:
            raise ValueError("Invalid value for `kvk_number`, length must be greater than or equal to `0`")

        self._kvk_number = kvk_number

    @property
    def language(self):
        """Gets the language of this CustomerModel.


        :return: The language of this CustomerModel.
        :rtype: CustomerLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CustomerModel.


        :param language: The language of this CustomerModel.
        :type language: CustomerLanguage
        """

        self._language = language

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this CustomerModel.


        :return: The last_updated_by of this CustomerModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this CustomerModel.


        :param last_updated_by: The last_updated_by of this CustomerModel.
        :type last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._last_updated_by = last_updated_by

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this CustomerModel.


        :return: The last_updated_date_time of this CustomerModel.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this CustomerModel.


        :param last_updated_date_time: The last_updated_date_time of this CustomerModel.
        :type last_updated_date_time: datetime
        """

        self._last_updated_date_time = last_updated_date_time

    @property
    def name(self):
        """Gets the name of this CustomerModel.


        :return: The name of this CustomerModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerModel.


        :param name: The name of this CustomerModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this CustomerModel.


        :return: The notes of this CustomerModel.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CustomerModel.


        :param notes: The notes of this CustomerModel.
        :type notes: str
        """

        self._notes = notes

    @property
    def number(self):
        """Gets the number of this CustomerModel.


        :return: The number of this CustomerModel.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CustomerModel.


        :param number: The number of this CustomerModel.
        :type number: int
        """

        self._number = number

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this CustomerModel.


        :return: The number_of_employees of this CustomerModel.
        :rtype: int
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this CustomerModel.


        :param number_of_employees: The number_of_employees of this CustomerModel.
        :type number_of_employees: int
        """

        self._number_of_employees = number_of_employees

    @property
    def overdue_interest(self):
        """Gets the overdue_interest of this CustomerModel.


        :return: The overdue_interest of this CustomerModel.
        :rtype: float
        """
        return self._overdue_interest

    @overdue_interest.setter
    def overdue_interest(self, overdue_interest):
        """Sets the overdue_interest of this CustomerModel.


        :param overdue_interest: The overdue_interest of this CustomerModel.
        :type overdue_interest: float
        """

        self._overdue_interest = overdue_interest

    @property
    def owner(self):
        """Gets the owner of this CustomerModel.


        :return: The owner of this CustomerModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CustomerModel.


        :param owner: The owner of this CustomerModel.
        :type owner: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._owner = owner

    @property
    def payment_term(self):
        """Gets the payment_term of this CustomerModel.


        :return: The payment_term of this CustomerModel.
        :rtype: int
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this CustomerModel.


        :param payment_term: The payment_term of this CustomerModel.
        :type payment_term: int
        """

        self._payment_term = payment_term

    @property
    def pricelist(self):
        """Gets the pricelist of this CustomerModel.


        :return: The pricelist of this CustomerModel.
        :rtype: ModelWithName
        """
        return self._pricelist

    @pricelist.setter
    def pricelist(self, pricelist):
        """Sets the pricelist of this CustomerModel.


        :param pricelist: The pricelist of this CustomerModel.
        :type pricelist: ModelWithName
        """

        self._pricelist = pricelist

    @property
    def timezone(self):
        """Gets the timezone of this CustomerModel.


        :return: The timezone of this CustomerModel.
        :rtype: ModelWithName
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CustomerModel.


        :param timezone: The timezone of this CustomerModel.
        :type timezone: ModelWithName
        """

        self._timezone = timezone

    @property
    def vat_number(self):
        """Gets the vat_number of this CustomerModel.


        :return: The vat_number of this CustomerModel.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this CustomerModel.


        :param vat_number: The vat_number of this CustomerModel.
        :type vat_number: str
        """

        self._vat_number = vat_number

    @property
    def website(self):
        """Gets the website of this CustomerModel.


        :return: The website of this CustomerModel.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CustomerModel.


        :param website: The website of this CustomerModel.
        :type website: str
        """

        self._website = website
