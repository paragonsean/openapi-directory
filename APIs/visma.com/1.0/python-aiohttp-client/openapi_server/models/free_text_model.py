# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FreeTextModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_tags: bool=None, tag_context: str=None, text: str=None, value: str=None):
        """FreeTextModel - a model defined in OpenAPI

        :param allow_tags: The allow_tags of this FreeTextModel.
        :param tag_context: The tag_context of this FreeTextModel.
        :param text: The text of this FreeTextModel.
        :param value: The value of this FreeTextModel.
        """
        self.openapi_types = {
            'allow_tags': bool,
            'tag_context': str,
            'text': str,
            'value': str
        }

        self.attribute_map = {
            'allow_tags': 'allowTags',
            'tag_context': 'tagContext',
            'text': 'text',
            'value': 'value'
        }

        self._allow_tags = allow_tags
        self._tag_context = tag_context
        self._text = text
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FreeTextModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FreeTextModel of this FreeTextModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_tags(self):
        """Gets the allow_tags of this FreeTextModel.


        :return: The allow_tags of this FreeTextModel.
        :rtype: bool
        """
        return self._allow_tags

    @allow_tags.setter
    def allow_tags(self, allow_tags):
        """Sets the allow_tags of this FreeTextModel.


        :param allow_tags: The allow_tags of this FreeTextModel.
        :type allow_tags: bool
        """

        self._allow_tags = allow_tags

    @property
    def tag_context(self):
        """Gets the tag_context of this FreeTextModel.


        :return: The tag_context of this FreeTextModel.
        :rtype: str
        """
        return self._tag_context

    @tag_context.setter
    def tag_context(self, tag_context):
        """Sets the tag_context of this FreeTextModel.


        :param tag_context: The tag_context of this FreeTextModel.
        :type tag_context: str
        """

        self._tag_context = tag_context

    @property
    def text(self):
        """Gets the text of this FreeTextModel.


        :return: The text of this FreeTextModel.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this FreeTextModel.


        :param text: The text of this FreeTextModel.
        :type text: str
        """

        self._text = text

    @property
    def value(self):
        """Gets the value of this FreeTextModel.


        :return: The value of this FreeTextModel.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FreeTextModel.


        :param value: The value of this FreeTextModel.
        :type value: str
        """

        self._value = value
