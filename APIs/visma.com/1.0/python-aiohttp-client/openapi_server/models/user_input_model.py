# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_user_type import LicenseUserType
from openapi_server.models.salutation_type import SalutationType
from openapi_server.models.satisfaction_level_type import SatisfactionLevelType
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server.models.timezone_model import TimezoneModel
from openapi_server import util


class UserInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, bank_account_number: str=None, birth_date: datetime=None, business_unit: SimpleInputRequiredModel=None, city: str=None, code: str=None, country: SimpleInputModel=None, country_region: SimpleInputModel=None, create_default_work_contract: bool=True, culture: SimpleInputModel=None, default_activity_type: SimpleInputModel=None, email: str=None, first_name: str=None, is_active: bool=True, language: SimpleInputModel=None, last_name: str=None, notes: str=None, permission_profile: SimpleInputModel=None, phone: str=None, postal_code: str=None, salutation: SalutationType=None, satisfaction: SatisfactionLevelType=None, social_security_number: str=None, superior_user: SimpleInputRequiredModel=None, timezone: TimezoneModel=None, user_type: LicenseUserType=None, work_type: SimpleInputRequiredModel=None):
        """UserInputModel - a model defined in OpenAPI

        :param address: The address of this UserInputModel.
        :param bank_account_number: The bank_account_number of this UserInputModel.
        :param birth_date: The birth_date of this UserInputModel.
        :param business_unit: The business_unit of this UserInputModel.
        :param city: The city of this UserInputModel.
        :param code: The code of this UserInputModel.
        :param country: The country of this UserInputModel.
        :param country_region: The country_region of this UserInputModel.
        :param create_default_work_contract: The create_default_work_contract of this UserInputModel.
        :param culture: The culture of this UserInputModel.
        :param default_activity_type: The default_activity_type of this UserInputModel.
        :param email: The email of this UserInputModel.
        :param first_name: The first_name of this UserInputModel.
        :param is_active: The is_active of this UserInputModel.
        :param language: The language of this UserInputModel.
        :param last_name: The last_name of this UserInputModel.
        :param notes: The notes of this UserInputModel.
        :param permission_profile: The permission_profile of this UserInputModel.
        :param phone: The phone of this UserInputModel.
        :param postal_code: The postal_code of this UserInputModel.
        :param salutation: The salutation of this UserInputModel.
        :param satisfaction: The satisfaction of this UserInputModel.
        :param social_security_number: The social_security_number of this UserInputModel.
        :param superior_user: The superior_user of this UserInputModel.
        :param timezone: The timezone of this UserInputModel.
        :param user_type: The user_type of this UserInputModel.
        :param work_type: The work_type of this UserInputModel.
        """
        self.openapi_types = {
            'address': str,
            'bank_account_number': str,
            'birth_date': datetime,
            'business_unit': SimpleInputRequiredModel,
            'city': str,
            'code': str,
            'country': SimpleInputModel,
            'country_region': SimpleInputModel,
            'create_default_work_contract': bool,
            'culture': SimpleInputModel,
            'default_activity_type': SimpleInputModel,
            'email': str,
            'first_name': str,
            'is_active': bool,
            'language': SimpleInputModel,
            'last_name': str,
            'notes': str,
            'permission_profile': SimpleInputModel,
            'phone': str,
            'postal_code': str,
            'salutation': SalutationType,
            'satisfaction': SatisfactionLevelType,
            'social_security_number': str,
            'superior_user': SimpleInputRequiredModel,
            'timezone': TimezoneModel,
            'user_type': LicenseUserType,
            'work_type': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'address': 'address',
            'bank_account_number': 'bankAccountNumber',
            'birth_date': 'birthDate',
            'business_unit': 'businessUnit',
            'city': 'city',
            'code': 'code',
            'country': 'country',
            'country_region': 'countryRegion',
            'create_default_work_contract': 'createDefaultWorkContract',
            'culture': 'culture',
            'default_activity_type': 'defaultActivityType',
            'email': 'email',
            'first_name': 'firstName',
            'is_active': 'isActive',
            'language': 'language',
            'last_name': 'lastName',
            'notes': 'notes',
            'permission_profile': 'permissionProfile',
            'phone': 'phone',
            'postal_code': 'postalCode',
            'salutation': 'salutation',
            'satisfaction': 'satisfaction',
            'social_security_number': 'socialSecurityNumber',
            'superior_user': 'superiorUser',
            'timezone': 'timezone',
            'user_type': 'userType',
            'work_type': 'workType'
        }

        self._address = address
        self._bank_account_number = bank_account_number
        self._birth_date = birth_date
        self._business_unit = business_unit
        self._city = city
        self._code = code
        self._country = country
        self._country_region = country_region
        self._create_default_work_contract = create_default_work_contract
        self._culture = culture
        self._default_activity_type = default_activity_type
        self._email = email
        self._first_name = first_name
        self._is_active = is_active
        self._language = language
        self._last_name = last_name
        self._notes = notes
        self._permission_profile = permission_profile
        self._phone = phone
        self._postal_code = postal_code
        self._salutation = salutation
        self._satisfaction = satisfaction
        self._social_security_number = social_security_number
        self._superior_user = superior_user
        self._timezone = timezone
        self._user_type = user_type
        self._work_type = work_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInputModel of this UserInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this UserInputModel.


        :return: The address of this UserInputModel.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserInputModel.


        :param address: The address of this UserInputModel.
        :type address: str
        """

        self._address = address

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this UserInputModel.


        :return: The bank_account_number of this UserInputModel.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this UserInputModel.


        :param bank_account_number: The bank_account_number of this UserInputModel.
        :type bank_account_number: str
        """

        self._bank_account_number = bank_account_number

    @property
    def birth_date(self):
        """Gets the birth_date of this UserInputModel.


        :return: The birth_date of this UserInputModel.
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this UserInputModel.


        :param birth_date: The birth_date of this UserInputModel.
        :type birth_date: datetime
        """

        self._birth_date = birth_date

    @property
    def business_unit(self):
        """Gets the business_unit of this UserInputModel.


        :return: The business_unit of this UserInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this UserInputModel.


        :param business_unit: The business_unit of this UserInputModel.
        :type business_unit: SimpleInputRequiredModel
        """

        self._business_unit = business_unit

    @property
    def city(self):
        """Gets the city of this UserInputModel.


        :return: The city of this UserInputModel.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserInputModel.


        :param city: The city of this UserInputModel.
        :type city: str
        """

        self._city = city

    @property
    def code(self):
        """Gets the code of this UserInputModel.


        :return: The code of this UserInputModel.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this UserInputModel.


        :param code: The code of this UserInputModel.
        :type code: str
        """

        self._code = code

    @property
    def country(self):
        """Gets the country of this UserInputModel.


        :return: The country of this UserInputModel.
        :rtype: SimpleInputModel
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserInputModel.


        :param country: The country of this UserInputModel.
        :type country: SimpleInputModel
        """

        self._country = country

    @property
    def country_region(self):
        """Gets the country_region of this UserInputModel.


        :return: The country_region of this UserInputModel.
        :rtype: SimpleInputModel
        """
        return self._country_region

    @country_region.setter
    def country_region(self, country_region):
        """Sets the country_region of this UserInputModel.


        :param country_region: The country_region of this UserInputModel.
        :type country_region: SimpleInputModel
        """

        self._country_region = country_region

    @property
    def create_default_work_contract(self):
        """Gets the create_default_work_contract of this UserInputModel.


        :return: The create_default_work_contract of this UserInputModel.
        :rtype: bool
        """
        return self._create_default_work_contract

    @create_default_work_contract.setter
    def create_default_work_contract(self, create_default_work_contract):
        """Sets the create_default_work_contract of this UserInputModel.


        :param create_default_work_contract: The create_default_work_contract of this UserInputModel.
        :type create_default_work_contract: bool
        """

        self._create_default_work_contract = create_default_work_contract

    @property
    def culture(self):
        """Gets the culture of this UserInputModel.


        :return: The culture of this UserInputModel.
        :rtype: SimpleInputModel
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this UserInputModel.


        :param culture: The culture of this UserInputModel.
        :type culture: SimpleInputModel
        """

        self._culture = culture

    @property
    def default_activity_type(self):
        """Gets the default_activity_type of this UserInputModel.


        :return: The default_activity_type of this UserInputModel.
        :rtype: SimpleInputModel
        """
        return self._default_activity_type

    @default_activity_type.setter
    def default_activity_type(self, default_activity_type):
        """Sets the default_activity_type of this UserInputModel.


        :param default_activity_type: The default_activity_type of this UserInputModel.
        :type default_activity_type: SimpleInputModel
        """

        self._default_activity_type = default_activity_type

    @property
    def email(self):
        """Gets the email of this UserInputModel.


        :return: The email of this UserInputModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInputModel.


        :param email: The email of this UserInputModel.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserInputModel.


        :return: The first_name of this UserInputModel.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInputModel.


        :param first_name: The first_name of this UserInputModel.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 100:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `100`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def is_active(self):
        """Gets the is_active of this UserInputModel.


        :return: The is_active of this UserInputModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserInputModel.


        :param is_active: The is_active of this UserInputModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def language(self):
        """Gets the language of this UserInputModel.


        :return: The language of this UserInputModel.
        :rtype: SimpleInputModel
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserInputModel.


        :param language: The language of this UserInputModel.
        :type language: SimpleInputModel
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this UserInputModel.


        :return: The last_name of this UserInputModel.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInputModel.


        :param last_name: The last_name of this UserInputModel.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def notes(self):
        """Gets the notes of this UserInputModel.


        :return: The notes of this UserInputModel.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UserInputModel.


        :param notes: The notes of this UserInputModel.
        :type notes: str
        """

        self._notes = notes

    @property
    def permission_profile(self):
        """Gets the permission_profile of this UserInputModel.


        :return: The permission_profile of this UserInputModel.
        :rtype: SimpleInputModel
        """
        return self._permission_profile

    @permission_profile.setter
    def permission_profile(self, permission_profile):
        """Sets the permission_profile of this UserInputModel.


        :param permission_profile: The permission_profile of this UserInputModel.
        :type permission_profile: SimpleInputModel
        """

        self._permission_profile = permission_profile

    @property
    def phone(self):
        """Gets the phone of this UserInputModel.


        :return: The phone of this UserInputModel.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserInputModel.


        :param phone: The phone of this UserInputModel.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this UserInputModel.


        :return: The postal_code of this UserInputModel.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this UserInputModel.


        :param postal_code: The postal_code of this UserInputModel.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def salutation(self):
        """Gets the salutation of this UserInputModel.


        :return: The salutation of this UserInputModel.
        :rtype: SalutationType
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this UserInputModel.


        :param salutation: The salutation of this UserInputModel.
        :type salutation: SalutationType
        """

        self._salutation = salutation

    @property
    def satisfaction(self):
        """Gets the satisfaction of this UserInputModel.


        :return: The satisfaction of this UserInputModel.
        :rtype: SatisfactionLevelType
        """
        return self._satisfaction

    @satisfaction.setter
    def satisfaction(self, satisfaction):
        """Sets the satisfaction of this UserInputModel.


        :param satisfaction: The satisfaction of this UserInputModel.
        :type satisfaction: SatisfactionLevelType
        """

        self._satisfaction = satisfaction

    @property
    def social_security_number(self):
        """Gets the social_security_number of this UserInputModel.


        :return: The social_security_number of this UserInputModel.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this UserInputModel.


        :param social_security_number: The social_security_number of this UserInputModel.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def superior_user(self):
        """Gets the superior_user of this UserInputModel.


        :return: The superior_user of this UserInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._superior_user

    @superior_user.setter
    def superior_user(self, superior_user):
        """Sets the superior_user of this UserInputModel.


        :param superior_user: The superior_user of this UserInputModel.
        :type superior_user: SimpleInputRequiredModel
        """

        self._superior_user = superior_user

    @property
    def timezone(self):
        """Gets the timezone of this UserInputModel.


        :return: The timezone of this UserInputModel.
        :rtype: TimezoneModel
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserInputModel.


        :param timezone: The timezone of this UserInputModel.
        :type timezone: TimezoneModel
        """

        self._timezone = timezone

    @property
    def user_type(self):
        """Gets the user_type of this UserInputModel.


        :return: The user_type of this UserInputModel.
        :rtype: LicenseUserType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserInputModel.


        :param user_type: The user_type of this UserInputModel.
        :type user_type: LicenseUserType
        """

        self._user_type = user_type

    @property
    def work_type(self):
        """Gets the work_type of this UserInputModel.


        :return: The work_type of this UserInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this UserInputModel.


        :param work_type: The work_type of this UserInputModel.
        :type work_type: SimpleInputRequiredModel
        """

        self._work_type = work_type
