# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model_with_nullable_amount import MoneyInputModelWithNullableAmount
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server import util


class WorkTypeInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, hour_cost: MoneyInputModelWithNullableAmount=None, is_active: bool=True, is_default: bool=None, is_productive: bool=None, name: str=None, sales_account: SimpleInputModel=None):
        """WorkTypeInputModel - a model defined in OpenAPI

        :param code: The code of this WorkTypeInputModel.
        :param hour_cost: The hour_cost of this WorkTypeInputModel.
        :param is_active: The is_active of this WorkTypeInputModel.
        :param is_default: The is_default of this WorkTypeInputModel.
        :param is_productive: The is_productive of this WorkTypeInputModel.
        :param name: The name of this WorkTypeInputModel.
        :param sales_account: The sales_account of this WorkTypeInputModel.
        """
        self.openapi_types = {
            'code': str,
            'hour_cost': MoneyInputModelWithNullableAmount,
            'is_active': bool,
            'is_default': bool,
            'is_productive': bool,
            'name': str,
            'sales_account': SimpleInputModel
        }

        self.attribute_map = {
            'code': 'code',
            'hour_cost': 'hourCost',
            'is_active': 'isActive',
            'is_default': 'isDefault',
            'is_productive': 'isProductive',
            'name': 'name',
            'sales_account': 'salesAccount'
        }

        self._code = code
        self._hour_cost = hour_cost
        self._is_active = is_active
        self._is_default = is_default
        self._is_productive = is_productive
        self._name = name
        self._sales_account = sales_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkTypeInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkTypeInputModel of this WorkTypeInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this WorkTypeInputModel.


        :return: The code of this WorkTypeInputModel.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this WorkTypeInputModel.


        :param code: The code of this WorkTypeInputModel.
        :type code: str
        """

        self._code = code

    @property
    def hour_cost(self):
        """Gets the hour_cost of this WorkTypeInputModel.


        :return: The hour_cost of this WorkTypeInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._hour_cost

    @hour_cost.setter
    def hour_cost(self, hour_cost):
        """Sets the hour_cost of this WorkTypeInputModel.


        :param hour_cost: The hour_cost of this WorkTypeInputModel.
        :type hour_cost: MoneyInputModelWithNullableAmount
        """

        self._hour_cost = hour_cost

    @property
    def is_active(self):
        """Gets the is_active of this WorkTypeInputModel.


        :return: The is_active of this WorkTypeInputModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WorkTypeInputModel.


        :param is_active: The is_active of this WorkTypeInputModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_default(self):
        """Gets the is_default of this WorkTypeInputModel.


        :return: The is_default of this WorkTypeInputModel.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this WorkTypeInputModel.


        :param is_default: The is_default of this WorkTypeInputModel.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_productive(self):
        """Gets the is_productive of this WorkTypeInputModel.


        :return: The is_productive of this WorkTypeInputModel.
        :rtype: bool
        """
        return self._is_productive

    @is_productive.setter
    def is_productive(self, is_productive):
        """Sets the is_productive of this WorkTypeInputModel.


        :param is_productive: The is_productive of this WorkTypeInputModel.
        :type is_productive: bool
        """

        self._is_productive = is_productive

    @property
    def name(self):
        """Gets the name of this WorkTypeInputModel.


        :return: The name of this WorkTypeInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkTypeInputModel.


        :param name: The name of this WorkTypeInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def sales_account(self):
        """Gets the sales_account of this WorkTypeInputModel.


        :return: The sales_account of this WorkTypeInputModel.
        :rtype: SimpleInputModel
        """
        return self._sales_account

    @sales_account.setter
    def sales_account(self, sales_account):
        """Sets the sales_account of this WorkTypeInputModel.


        :param sales_account: The sales_account of this WorkTypeInputModel.
        :type sales_account: SimpleInputModel
        """

        self._sales_account = sales_account
