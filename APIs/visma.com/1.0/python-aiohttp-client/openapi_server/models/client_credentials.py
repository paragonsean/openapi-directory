# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, scope: str=None):
        """ClientCredentials - a model defined in OpenAPI

        :param client_id: The client_id of this ClientCredentials.
        :param client_secret: The client_secret of this ClientCredentials.
        :param scope: The scope of this ClientCredentials.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'scope': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'scope': 'scope'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientCredentials of this ClientCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ClientCredentials.


        :return: The client_id of this ClientCredentials.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientCredentials.


        :param client_id: The client_id of this ClientCredentials.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ClientCredentials.


        :return: The client_secret of this ClientCredentials.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ClientCredentials.


        :param client_secret: The client_secret of this ClientCredentials.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")
        if client_secret is not None and len(client_secret) < 1:
            raise ValueError("Invalid value for `client_secret`, length must be greater than or equal to `1`")

        self._client_secret = client_secret

    @property
    def scope(self):
        """Gets the scope of this ClientCredentials.


        :return: The scope of this ClientCredentials.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ClientCredentials.


        :param scope: The scope of this ClientCredentials.
        :type scope: str
        """

        self._scope = scope
