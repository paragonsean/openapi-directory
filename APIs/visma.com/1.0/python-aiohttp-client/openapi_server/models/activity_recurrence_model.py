# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recurrence_frequency import RecurrenceFrequency
from openapi_server.models.recurrence_pattern import RecurrencePattern
from openapi_server.models.recurrence_range import RecurrenceRange
from openapi_server import util


class ActivityRecurrenceModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exceptions: List[datetime]=None, frequency: RecurrenceFrequency=None, last_occurrence_date_time: datetime=None, pattern: RecurrencePattern=None, range: RecurrenceRange=None):
        """ActivityRecurrenceModel - a model defined in OpenAPI

        :param exceptions: The exceptions of this ActivityRecurrenceModel.
        :param frequency: The frequency of this ActivityRecurrenceModel.
        :param last_occurrence_date_time: The last_occurrence_date_time of this ActivityRecurrenceModel.
        :param pattern: The pattern of this ActivityRecurrenceModel.
        :param range: The range of this ActivityRecurrenceModel.
        """
        self.openapi_types = {
            'exceptions': List[datetime],
            'frequency': RecurrenceFrequency,
            'last_occurrence_date_time': datetime,
            'pattern': RecurrencePattern,
            'range': RecurrenceRange
        }

        self.attribute_map = {
            'exceptions': 'exceptions',
            'frequency': 'frequency',
            'last_occurrence_date_time': 'lastOccurrenceDateTime',
            'pattern': 'pattern',
            'range': 'range'
        }

        self._exceptions = exceptions
        self._frequency = frequency
        self._last_occurrence_date_time = last_occurrence_date_time
        self._pattern = pattern
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityRecurrenceModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityRecurrenceModel of this ActivityRecurrenceModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exceptions(self):
        """Gets the exceptions of this ActivityRecurrenceModel.


        :return: The exceptions of this ActivityRecurrenceModel.
        :rtype: List[datetime]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this ActivityRecurrenceModel.


        :param exceptions: The exceptions of this ActivityRecurrenceModel.
        :type exceptions: List[datetime]
        """

        self._exceptions = exceptions

    @property
    def frequency(self):
        """Gets the frequency of this ActivityRecurrenceModel.


        :return: The frequency of this ActivityRecurrenceModel.
        :rtype: RecurrenceFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ActivityRecurrenceModel.


        :param frequency: The frequency of this ActivityRecurrenceModel.
        :type frequency: RecurrenceFrequency
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def last_occurrence_date_time(self):
        """Gets the last_occurrence_date_time of this ActivityRecurrenceModel.


        :return: The last_occurrence_date_time of this ActivityRecurrenceModel.
        :rtype: datetime
        """
        return self._last_occurrence_date_time

    @last_occurrence_date_time.setter
    def last_occurrence_date_time(self, last_occurrence_date_time):
        """Sets the last_occurrence_date_time of this ActivityRecurrenceModel.


        :param last_occurrence_date_time: The last_occurrence_date_time of this ActivityRecurrenceModel.
        :type last_occurrence_date_time: datetime
        """

        self._last_occurrence_date_time = last_occurrence_date_time

    @property
    def pattern(self):
        """Gets the pattern of this ActivityRecurrenceModel.


        :return: The pattern of this ActivityRecurrenceModel.
        :rtype: RecurrencePattern
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ActivityRecurrenceModel.


        :param pattern: The pattern of this ActivityRecurrenceModel.
        :type pattern: RecurrencePattern
        """

        self._pattern = pattern

    @property
    def range(self):
        """Gets the range of this ActivityRecurrenceModel.


        :return: The range of this ActivityRecurrenceModel.
        :rtype: RecurrenceRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ActivityRecurrenceModel.


        :param range: The range of this ActivityRecurrenceModel.
        :type range: RecurrenceRange
        """

        self._range = range
