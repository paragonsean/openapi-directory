# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference_type import ReferenceType
from openapi_server import util


class UsageModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, is_read_only: bool=None, name: str=None, type: ReferenceType=None):
        """UsageModel - a model defined in OpenAPI

        :param guid: The guid of this UsageModel.
        :param is_read_only: The is_read_only of this UsageModel.
        :param name: The name of this UsageModel.
        :param type: The type of this UsageModel.
        """
        self.openapi_types = {
            'guid': str,
            'is_read_only': bool,
            'name': str,
            'type': ReferenceType
        }

        self.attribute_map = {
            'guid': 'guid',
            'is_read_only': 'isReadOnly',
            'name': 'name',
            'type': 'type'
        }

        self._guid = guid
        self._is_read_only = is_read_only
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageModel of this UsageModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this UsageModel.


        :return: The guid of this UsageModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this UsageModel.


        :param guid: The guid of this UsageModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_read_only(self):
        """Gets the is_read_only of this UsageModel.


        :return: The is_read_only of this UsageModel.
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this UsageModel.


        :param is_read_only: The is_read_only of this UsageModel.
        :type is_read_only: bool
        """

        self._is_read_only = is_read_only

    @property
    def name(self):
        """Gets the name of this UsageModel.


        :return: The name of this UsageModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsageModel.


        :param name: The name of this UsageModel.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this UsageModel.


        :return: The type of this UsageModel.
        :rtype: ReferenceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UsageModel.


        :param type: The type of this UsageModel.
        :type type: ReferenceType
        """

        self._type = type
