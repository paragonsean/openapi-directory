# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_status import MemberStatus
from openapi_server.models.participant_type import ParticipantType
from openapi_server import util


class ActivityParticipantModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_guid: str=None, email: str=None, guid: str=None, is_active: bool=None, mobile_phone: str=None, name: str=None, participant_guid: str=None, phone: str=None, status: MemberStatus=None, type: ParticipantType=None):
        """ActivityParticipantModel - a model defined in OpenAPI

        :param activity_guid: The activity_guid of this ActivityParticipantModel.
        :param email: The email of this ActivityParticipantModel.
        :param guid: The guid of this ActivityParticipantModel.
        :param is_active: The is_active of this ActivityParticipantModel.
        :param mobile_phone: The mobile_phone of this ActivityParticipantModel.
        :param name: The name of this ActivityParticipantModel.
        :param participant_guid: The participant_guid of this ActivityParticipantModel.
        :param phone: The phone of this ActivityParticipantModel.
        :param status: The status of this ActivityParticipantModel.
        :param type: The type of this ActivityParticipantModel.
        """
        self.openapi_types = {
            'activity_guid': str,
            'email': str,
            'guid': str,
            'is_active': bool,
            'mobile_phone': str,
            'name': str,
            'participant_guid': str,
            'phone': str,
            'status': MemberStatus,
            'type': ParticipantType
        }

        self.attribute_map = {
            'activity_guid': 'activityGuid',
            'email': 'email',
            'guid': 'guid',
            'is_active': 'isActive',
            'mobile_phone': 'mobilePhone',
            'name': 'name',
            'participant_guid': 'participantGuid',
            'phone': 'phone',
            'status': 'status',
            'type': 'type'
        }

        self._activity_guid = activity_guid
        self._email = email
        self._guid = guid
        self._is_active = is_active
        self._mobile_phone = mobile_phone
        self._name = name
        self._participant_guid = participant_guid
        self._phone = phone
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityParticipantModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityParticipantModel of this ActivityParticipantModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_guid(self):
        """Gets the activity_guid of this ActivityParticipantModel.


        :return: The activity_guid of this ActivityParticipantModel.
        :rtype: str
        """
        return self._activity_guid

    @activity_guid.setter
    def activity_guid(self, activity_guid):
        """Sets the activity_guid of this ActivityParticipantModel.


        :param activity_guid: The activity_guid of this ActivityParticipantModel.
        :type activity_guid: str
        """
        if activity_guid is None:
            raise ValueError("Invalid value for `activity_guid`, must not be `None`")
        if activity_guid is not None and len(activity_guid) < 1:
            raise ValueError("Invalid value for `activity_guid`, length must be greater than or equal to `1`")

        self._activity_guid = activity_guid

    @property
    def email(self):
        """Gets the email of this ActivityParticipantModel.


        :return: The email of this ActivityParticipantModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ActivityParticipantModel.


        :param email: The email of this ActivityParticipantModel.
        :type email: str
        """

        self._email = email

    @property
    def guid(self):
        """Gets the guid of this ActivityParticipantModel.


        :return: The guid of this ActivityParticipantModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ActivityParticipantModel.


        :param guid: The guid of this ActivityParticipantModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_active(self):
        """Gets the is_active of this ActivityParticipantModel.


        :return: The is_active of this ActivityParticipantModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ActivityParticipantModel.


        :param is_active: The is_active of this ActivityParticipantModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this ActivityParticipantModel.


        :return: The mobile_phone of this ActivityParticipantModel.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this ActivityParticipantModel.


        :param mobile_phone: The mobile_phone of this ActivityParticipantModel.
        :type mobile_phone: str
        """

        self._mobile_phone = mobile_phone

    @property
    def name(self):
        """Gets the name of this ActivityParticipantModel.


        :return: The name of this ActivityParticipantModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityParticipantModel.


        :param name: The name of this ActivityParticipantModel.
        :type name: str
        """

        self._name = name

    @property
    def participant_guid(self):
        """Gets the participant_guid of this ActivityParticipantModel.


        :return: The participant_guid of this ActivityParticipantModel.
        :rtype: str
        """
        return self._participant_guid

    @participant_guid.setter
    def participant_guid(self, participant_guid):
        """Sets the participant_guid of this ActivityParticipantModel.


        :param participant_guid: The participant_guid of this ActivityParticipantModel.
        :type participant_guid: str
        """
        if participant_guid is None:
            raise ValueError("Invalid value for `participant_guid`, must not be `None`")
        if participant_guid is not None and len(participant_guid) < 1:
            raise ValueError("Invalid value for `participant_guid`, length must be greater than or equal to `1`")

        self._participant_guid = participant_guid

    @property
    def phone(self):
        """Gets the phone of this ActivityParticipantModel.


        :return: The phone of this ActivityParticipantModel.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ActivityParticipantModel.


        :param phone: The phone of this ActivityParticipantModel.
        :type phone: str
        """

        self._phone = phone

    @property
    def status(self):
        """Gets the status of this ActivityParticipantModel.


        :return: The status of this ActivityParticipantModel.
        :rtype: MemberStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActivityParticipantModel.


        :param status: The status of this ActivityParticipantModel.
        :type status: MemberStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this ActivityParticipantModel.


        :return: The type of this ActivityParticipantModel.
        :rtype: ParticipantType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityParticipantModel.


        :param type: The type of this ActivityParticipantModel.
        :type type: ParticipantType
        """

        self._type = type
