# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkdayModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absence_hours: float=None, _date: date=None, entered_hours: float=None, entered_time_entries: float=None, expected_hours: float=None, flextime_limit_per_day: float=None, holiday_name: str=None, incomplete_timing_minutes: int=None, is_completed: bool=None, is_holiday: bool=None, is_overtime_allowed: bool=None, is_read_only: bool=None, user_guid: str=None):
        """WorkdayModel - a model defined in OpenAPI

        :param absence_hours: The absence_hours of this WorkdayModel.
        :param _date: The _date of this WorkdayModel.
        :param entered_hours: The entered_hours of this WorkdayModel.
        :param entered_time_entries: The entered_time_entries of this WorkdayModel.
        :param expected_hours: The expected_hours of this WorkdayModel.
        :param flextime_limit_per_day: The flextime_limit_per_day of this WorkdayModel.
        :param holiday_name: The holiday_name of this WorkdayModel.
        :param incomplete_timing_minutes: The incomplete_timing_minutes of this WorkdayModel.
        :param is_completed: The is_completed of this WorkdayModel.
        :param is_holiday: The is_holiday of this WorkdayModel.
        :param is_overtime_allowed: The is_overtime_allowed of this WorkdayModel.
        :param is_read_only: The is_read_only of this WorkdayModel.
        :param user_guid: The user_guid of this WorkdayModel.
        """
        self.openapi_types = {
            'absence_hours': float,
            '_date': date,
            'entered_hours': float,
            'entered_time_entries': float,
            'expected_hours': float,
            'flextime_limit_per_day': float,
            'holiday_name': str,
            'incomplete_timing_minutes': int,
            'is_completed': bool,
            'is_holiday': bool,
            'is_overtime_allowed': bool,
            'is_read_only': bool,
            'user_guid': str
        }

        self.attribute_map = {
            'absence_hours': 'absenceHours',
            '_date': 'date',
            'entered_hours': 'enteredHours',
            'entered_time_entries': 'enteredTimeEntries',
            'expected_hours': 'expectedHours',
            'flextime_limit_per_day': 'flextimeLimitPerDay',
            'holiday_name': 'holidayName',
            'incomplete_timing_minutes': 'incompleteTimingMinutes',
            'is_completed': 'isCompleted',
            'is_holiday': 'isHoliday',
            'is_overtime_allowed': 'isOvertimeAllowed',
            'is_read_only': 'isReadOnly',
            'user_guid': 'userGuid'
        }

        self._absence_hours = absence_hours
        self.__date = _date
        self._entered_hours = entered_hours
        self._entered_time_entries = entered_time_entries
        self._expected_hours = expected_hours
        self._flextime_limit_per_day = flextime_limit_per_day
        self._holiday_name = holiday_name
        self._incomplete_timing_minutes = incomplete_timing_minutes
        self._is_completed = is_completed
        self._is_holiday = is_holiday
        self._is_overtime_allowed = is_overtime_allowed
        self._is_read_only = is_read_only
        self._user_guid = user_guid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkdayModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkdayModel of this WorkdayModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absence_hours(self):
        """Gets the absence_hours of this WorkdayModel.


        :return: The absence_hours of this WorkdayModel.
        :rtype: float
        """
        return self._absence_hours

    @absence_hours.setter
    def absence_hours(self, absence_hours):
        """Sets the absence_hours of this WorkdayModel.


        :param absence_hours: The absence_hours of this WorkdayModel.
        :type absence_hours: float
        """

        self._absence_hours = absence_hours

    @property
    def _date(self):
        """Gets the _date of this WorkdayModel.


        :return: The _date of this WorkdayModel.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this WorkdayModel.


        :param _date: The _date of this WorkdayModel.
        :type _date: date
        """

        self.__date = _date

    @property
    def entered_hours(self):
        """Gets the entered_hours of this WorkdayModel.


        :return: The entered_hours of this WorkdayModel.
        :rtype: float
        """
        return self._entered_hours

    @entered_hours.setter
    def entered_hours(self, entered_hours):
        """Sets the entered_hours of this WorkdayModel.


        :param entered_hours: The entered_hours of this WorkdayModel.
        :type entered_hours: float
        """

        self._entered_hours = entered_hours

    @property
    def entered_time_entries(self):
        """Gets the entered_time_entries of this WorkdayModel.


        :return: The entered_time_entries of this WorkdayModel.
        :rtype: float
        """
        return self._entered_time_entries

    @entered_time_entries.setter
    def entered_time_entries(self, entered_time_entries):
        """Sets the entered_time_entries of this WorkdayModel.


        :param entered_time_entries: The entered_time_entries of this WorkdayModel.
        :type entered_time_entries: float
        """

        self._entered_time_entries = entered_time_entries

    @property
    def expected_hours(self):
        """Gets the expected_hours of this WorkdayModel.


        :return: The expected_hours of this WorkdayModel.
        :rtype: float
        """
        return self._expected_hours

    @expected_hours.setter
    def expected_hours(self, expected_hours):
        """Sets the expected_hours of this WorkdayModel.


        :param expected_hours: The expected_hours of this WorkdayModel.
        :type expected_hours: float
        """

        self._expected_hours = expected_hours

    @property
    def flextime_limit_per_day(self):
        """Gets the flextime_limit_per_day of this WorkdayModel.


        :return: The flextime_limit_per_day of this WorkdayModel.
        :rtype: float
        """
        return self._flextime_limit_per_day

    @flextime_limit_per_day.setter
    def flextime_limit_per_day(self, flextime_limit_per_day):
        """Sets the flextime_limit_per_day of this WorkdayModel.


        :param flextime_limit_per_day: The flextime_limit_per_day of this WorkdayModel.
        :type flextime_limit_per_day: float
        """

        self._flextime_limit_per_day = flextime_limit_per_day

    @property
    def holiday_name(self):
        """Gets the holiday_name of this WorkdayModel.


        :return: The holiday_name of this WorkdayModel.
        :rtype: str
        """
        return self._holiday_name

    @holiday_name.setter
    def holiday_name(self, holiday_name):
        """Sets the holiday_name of this WorkdayModel.


        :param holiday_name: The holiday_name of this WorkdayModel.
        :type holiday_name: str
        """

        self._holiday_name = holiday_name

    @property
    def incomplete_timing_minutes(self):
        """Gets the incomplete_timing_minutes of this WorkdayModel.


        :return: The incomplete_timing_minutes of this WorkdayModel.
        :rtype: int
        """
        return self._incomplete_timing_minutes

    @incomplete_timing_minutes.setter
    def incomplete_timing_minutes(self, incomplete_timing_minutes):
        """Sets the incomplete_timing_minutes of this WorkdayModel.


        :param incomplete_timing_minutes: The incomplete_timing_minutes of this WorkdayModel.
        :type incomplete_timing_minutes: int
        """

        self._incomplete_timing_minutes = incomplete_timing_minutes

    @property
    def is_completed(self):
        """Gets the is_completed of this WorkdayModel.


        :return: The is_completed of this WorkdayModel.
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this WorkdayModel.


        :param is_completed: The is_completed of this WorkdayModel.
        :type is_completed: bool
        """

        self._is_completed = is_completed

    @property
    def is_holiday(self):
        """Gets the is_holiday of this WorkdayModel.


        :return: The is_holiday of this WorkdayModel.
        :rtype: bool
        """
        return self._is_holiday

    @is_holiday.setter
    def is_holiday(self, is_holiday):
        """Sets the is_holiday of this WorkdayModel.


        :param is_holiday: The is_holiday of this WorkdayModel.
        :type is_holiday: bool
        """

        self._is_holiday = is_holiday

    @property
    def is_overtime_allowed(self):
        """Gets the is_overtime_allowed of this WorkdayModel.


        :return: The is_overtime_allowed of this WorkdayModel.
        :rtype: bool
        """
        return self._is_overtime_allowed

    @is_overtime_allowed.setter
    def is_overtime_allowed(self, is_overtime_allowed):
        """Sets the is_overtime_allowed of this WorkdayModel.


        :param is_overtime_allowed: The is_overtime_allowed of this WorkdayModel.
        :type is_overtime_allowed: bool
        """

        self._is_overtime_allowed = is_overtime_allowed

    @property
    def is_read_only(self):
        """Gets the is_read_only of this WorkdayModel.


        :return: The is_read_only of this WorkdayModel.
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this WorkdayModel.


        :param is_read_only: The is_read_only of this WorkdayModel.
        :type is_read_only: bool
        """

        self._is_read_only = is_read_only

    @property
    def user_guid(self):
        """Gets the user_guid of this WorkdayModel.


        :return: The user_guid of this WorkdayModel.
        :rtype: str
        """
        return self._user_guid

    @user_guid.setter
    def user_guid(self, user_guid):
        """Sets the user_guid of this WorkdayModel.


        :param user_guid: The user_guid of this WorkdayModel.
        :type user_guid: str
        """

        self._user_guid = user_guid
