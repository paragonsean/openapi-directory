# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model_with_nullable_amount import MoneyInputModelWithNullableAmount
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server.models.user_with_first_name_last_name_and_photo_file_model import UserWithFirstNameLastNameAndPhotoFileModel
from openapi_server import util


class ProjectForecastInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_forecast: MoneyInputModelWithNullableAmount=None, billing_forecast_notes: str=None, created_by: UserWithFirstNameLastNameAndPhotoFileModel=None, created_date_time: datetime=None, expense_forecast: MoneyInputModelWithNullableAmount=None, expense_forecast_notes: str=None, guid: str=None, labor_expense_forecast: MoneyInputModelWithNullableAmount=None, labor_expense_forecast_notes: str=None, last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel=None, last_updated_date_time: datetime=None, month: int=None, project: SimpleInputRequiredModel=None, revenue_forecast: MoneyInputModelWithNullableAmount=None, revenue_forecast_notes: str=None, year: int=None):
        """ProjectForecastInputModel - a model defined in OpenAPI

        :param billing_forecast: The billing_forecast of this ProjectForecastInputModel.
        :param billing_forecast_notes: The billing_forecast_notes of this ProjectForecastInputModel.
        :param created_by: The created_by of this ProjectForecastInputModel.
        :param created_date_time: The created_date_time of this ProjectForecastInputModel.
        :param expense_forecast: The expense_forecast of this ProjectForecastInputModel.
        :param expense_forecast_notes: The expense_forecast_notes of this ProjectForecastInputModel.
        :param guid: The guid of this ProjectForecastInputModel.
        :param labor_expense_forecast: The labor_expense_forecast of this ProjectForecastInputModel.
        :param labor_expense_forecast_notes: The labor_expense_forecast_notes of this ProjectForecastInputModel.
        :param last_updated_by: The last_updated_by of this ProjectForecastInputModel.
        :param last_updated_date_time: The last_updated_date_time of this ProjectForecastInputModel.
        :param month: The month of this ProjectForecastInputModel.
        :param project: The project of this ProjectForecastInputModel.
        :param revenue_forecast: The revenue_forecast of this ProjectForecastInputModel.
        :param revenue_forecast_notes: The revenue_forecast_notes of this ProjectForecastInputModel.
        :param year: The year of this ProjectForecastInputModel.
        """
        self.openapi_types = {
            'billing_forecast': MoneyInputModelWithNullableAmount,
            'billing_forecast_notes': str,
            'created_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'created_date_time': datetime,
            'expense_forecast': MoneyInputModelWithNullableAmount,
            'expense_forecast_notes': str,
            'guid': str,
            'labor_expense_forecast': MoneyInputModelWithNullableAmount,
            'labor_expense_forecast_notes': str,
            'last_updated_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'last_updated_date_time': datetime,
            'month': int,
            'project': SimpleInputRequiredModel,
            'revenue_forecast': MoneyInputModelWithNullableAmount,
            'revenue_forecast_notes': str,
            'year': int
        }

        self.attribute_map = {
            'billing_forecast': 'billingForecast',
            'billing_forecast_notes': 'billingForecastNotes',
            'created_by': 'createdBy',
            'created_date_time': 'createdDateTime',
            'expense_forecast': 'expenseForecast',
            'expense_forecast_notes': 'expenseForecastNotes',
            'guid': 'guid',
            'labor_expense_forecast': 'laborExpenseForecast',
            'labor_expense_forecast_notes': 'laborExpenseForecastNotes',
            'last_updated_by': 'lastUpdatedBy',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'month': 'month',
            'project': 'project',
            'revenue_forecast': 'revenueForecast',
            'revenue_forecast_notes': 'revenueForecastNotes',
            'year': 'year'
        }

        self._billing_forecast = billing_forecast
        self._billing_forecast_notes = billing_forecast_notes
        self._created_by = created_by
        self._created_date_time = created_date_time
        self._expense_forecast = expense_forecast
        self._expense_forecast_notes = expense_forecast_notes
        self._guid = guid
        self._labor_expense_forecast = labor_expense_forecast
        self._labor_expense_forecast_notes = labor_expense_forecast_notes
        self._last_updated_by = last_updated_by
        self._last_updated_date_time = last_updated_date_time
        self._month = month
        self._project = project
        self._revenue_forecast = revenue_forecast
        self._revenue_forecast_notes = revenue_forecast_notes
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectForecastInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectForecastInputModel of this ProjectForecastInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_forecast(self):
        """Gets the billing_forecast of this ProjectForecastInputModel.


        :return: The billing_forecast of this ProjectForecastInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._billing_forecast

    @billing_forecast.setter
    def billing_forecast(self, billing_forecast):
        """Sets the billing_forecast of this ProjectForecastInputModel.


        :param billing_forecast: The billing_forecast of this ProjectForecastInputModel.
        :type billing_forecast: MoneyInputModelWithNullableAmount
        """

        self._billing_forecast = billing_forecast

    @property
    def billing_forecast_notes(self):
        """Gets the billing_forecast_notes of this ProjectForecastInputModel.


        :return: The billing_forecast_notes of this ProjectForecastInputModel.
        :rtype: str
        """
        return self._billing_forecast_notes

    @billing_forecast_notes.setter
    def billing_forecast_notes(self, billing_forecast_notes):
        """Sets the billing_forecast_notes of this ProjectForecastInputModel.


        :param billing_forecast_notes: The billing_forecast_notes of this ProjectForecastInputModel.
        :type billing_forecast_notes: str
        """

        self._billing_forecast_notes = billing_forecast_notes

    @property
    def created_by(self):
        """Gets the created_by of this ProjectForecastInputModel.


        :return: The created_by of this ProjectForecastInputModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProjectForecastInputModel.


        :param created_by: The created_by of this ProjectForecastInputModel.
        :type created_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._created_by = created_by

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ProjectForecastInputModel.


        :return: The created_date_time of this ProjectForecastInputModel.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ProjectForecastInputModel.


        :param created_date_time: The created_date_time of this ProjectForecastInputModel.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def expense_forecast(self):
        """Gets the expense_forecast of this ProjectForecastInputModel.


        :return: The expense_forecast of this ProjectForecastInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._expense_forecast

    @expense_forecast.setter
    def expense_forecast(self, expense_forecast):
        """Sets the expense_forecast of this ProjectForecastInputModel.


        :param expense_forecast: The expense_forecast of this ProjectForecastInputModel.
        :type expense_forecast: MoneyInputModelWithNullableAmount
        """

        self._expense_forecast = expense_forecast

    @property
    def expense_forecast_notes(self):
        """Gets the expense_forecast_notes of this ProjectForecastInputModel.


        :return: The expense_forecast_notes of this ProjectForecastInputModel.
        :rtype: str
        """
        return self._expense_forecast_notes

    @expense_forecast_notes.setter
    def expense_forecast_notes(self, expense_forecast_notes):
        """Sets the expense_forecast_notes of this ProjectForecastInputModel.


        :param expense_forecast_notes: The expense_forecast_notes of this ProjectForecastInputModel.
        :type expense_forecast_notes: str
        """

        self._expense_forecast_notes = expense_forecast_notes

    @property
    def guid(self):
        """Gets the guid of this ProjectForecastInputModel.


        :return: The guid of this ProjectForecastInputModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ProjectForecastInputModel.


        :param guid: The guid of this ProjectForecastInputModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def labor_expense_forecast(self):
        """Gets the labor_expense_forecast of this ProjectForecastInputModel.


        :return: The labor_expense_forecast of this ProjectForecastInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._labor_expense_forecast

    @labor_expense_forecast.setter
    def labor_expense_forecast(self, labor_expense_forecast):
        """Sets the labor_expense_forecast of this ProjectForecastInputModel.


        :param labor_expense_forecast: The labor_expense_forecast of this ProjectForecastInputModel.
        :type labor_expense_forecast: MoneyInputModelWithNullableAmount
        """

        self._labor_expense_forecast = labor_expense_forecast

    @property
    def labor_expense_forecast_notes(self):
        """Gets the labor_expense_forecast_notes of this ProjectForecastInputModel.


        :return: The labor_expense_forecast_notes of this ProjectForecastInputModel.
        :rtype: str
        """
        return self._labor_expense_forecast_notes

    @labor_expense_forecast_notes.setter
    def labor_expense_forecast_notes(self, labor_expense_forecast_notes):
        """Sets the labor_expense_forecast_notes of this ProjectForecastInputModel.


        :param labor_expense_forecast_notes: The labor_expense_forecast_notes of this ProjectForecastInputModel.
        :type labor_expense_forecast_notes: str
        """

        self._labor_expense_forecast_notes = labor_expense_forecast_notes

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ProjectForecastInputModel.


        :return: The last_updated_by of this ProjectForecastInputModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ProjectForecastInputModel.


        :param last_updated_by: The last_updated_by of this ProjectForecastInputModel.
        :type last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._last_updated_by = last_updated_by

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this ProjectForecastInputModel.


        :return: The last_updated_date_time of this ProjectForecastInputModel.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this ProjectForecastInputModel.


        :param last_updated_date_time: The last_updated_date_time of this ProjectForecastInputModel.
        :type last_updated_date_time: datetime
        """

        self._last_updated_date_time = last_updated_date_time

    @property
    def month(self):
        """Gets the month of this ProjectForecastInputModel.


        :return: The month of this ProjectForecastInputModel.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ProjectForecastInputModel.


        :param month: The month of this ProjectForecastInputModel.
        :type month: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")
        if month is not None and month > 12:
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `12`")
        if month is not None and month < 1:
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `1`")

        self._month = month

    @property
    def project(self):
        """Gets the project of this ProjectForecastInputModel.


        :return: The project of this ProjectForecastInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectForecastInputModel.


        :param project: The project of this ProjectForecastInputModel.
        :type project: SimpleInputRequiredModel
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def revenue_forecast(self):
        """Gets the revenue_forecast of this ProjectForecastInputModel.


        :return: The revenue_forecast of this ProjectForecastInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._revenue_forecast

    @revenue_forecast.setter
    def revenue_forecast(self, revenue_forecast):
        """Sets the revenue_forecast of this ProjectForecastInputModel.


        :param revenue_forecast: The revenue_forecast of this ProjectForecastInputModel.
        :type revenue_forecast: MoneyInputModelWithNullableAmount
        """

        self._revenue_forecast = revenue_forecast

    @property
    def revenue_forecast_notes(self):
        """Gets the revenue_forecast_notes of this ProjectForecastInputModel.


        :return: The revenue_forecast_notes of this ProjectForecastInputModel.
        :rtype: str
        """
        return self._revenue_forecast_notes

    @revenue_forecast_notes.setter
    def revenue_forecast_notes(self, revenue_forecast_notes):
        """Sets the revenue_forecast_notes of this ProjectForecastInputModel.


        :param revenue_forecast_notes: The revenue_forecast_notes of this ProjectForecastInputModel.
        :type revenue_forecast_notes: str
        """

        self._revenue_forecast_notes = revenue_forecast_notes

    @property
    def year(self):
        """Gets the year of this ProjectForecastInputModel.


        :return: The year of this ProjectForecastInputModel.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ProjectForecastInputModel.


        :param year: The year of this ProjectForecastInputModel.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")
        if year is not None and year > 2075:
            raise ValueError("Invalid value for `year`, must be a value less than or equal to `2075`")
        if year is not None and year < 1900:
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `1900`")

        self._year = year
