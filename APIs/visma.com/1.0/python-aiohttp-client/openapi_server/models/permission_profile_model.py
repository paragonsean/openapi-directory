# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PermissionProfileModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, is_accessible: bool=None, is_active: bool=True, is_default: bool=None, name: str=None):
        """PermissionProfileModel - a model defined in OpenAPI

        :param guid: The guid of this PermissionProfileModel.
        :param is_accessible: The is_accessible of this PermissionProfileModel.
        :param is_active: The is_active of this PermissionProfileModel.
        :param is_default: The is_default of this PermissionProfileModel.
        :param name: The name of this PermissionProfileModel.
        """
        self.openapi_types = {
            'guid': str,
            'is_accessible': bool,
            'is_active': bool,
            'is_default': bool,
            'name': str
        }

        self.attribute_map = {
            'guid': 'guid',
            'is_accessible': 'isAccessible',
            'is_active': 'isActive',
            'is_default': 'isDefault',
            'name': 'name'
        }

        self._guid = guid
        self._is_accessible = is_accessible
        self._is_active = is_active
        self._is_default = is_default
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermissionProfileModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PermissionProfileModel of this PermissionProfileModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this PermissionProfileModel.


        :return: The guid of this PermissionProfileModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PermissionProfileModel.


        :param guid: The guid of this PermissionProfileModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_accessible(self):
        """Gets the is_accessible of this PermissionProfileModel.


        :return: The is_accessible of this PermissionProfileModel.
        :rtype: bool
        """
        return self._is_accessible

    @is_accessible.setter
    def is_accessible(self, is_accessible):
        """Sets the is_accessible of this PermissionProfileModel.


        :param is_accessible: The is_accessible of this PermissionProfileModel.
        :type is_accessible: bool
        """

        self._is_accessible = is_accessible

    @property
    def is_active(self):
        """Gets the is_active of this PermissionProfileModel.


        :return: The is_active of this PermissionProfileModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PermissionProfileModel.


        :param is_active: The is_active of this PermissionProfileModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_default(self):
        """Gets the is_default of this PermissionProfileModel.


        :return: The is_default of this PermissionProfileModel.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PermissionProfileModel.


        :param is_default: The is_default of this PermissionProfileModel.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this PermissionProfileModel.


        :return: The name of this PermissionProfileModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PermissionProfileModel.


        :param name: The name of this PermissionProfileModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
