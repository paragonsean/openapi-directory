# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VatRateInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, country_guid: str=None, is_active: bool=True, is_default: bool=None, percentage: float=None):
        """VatRateInputModel - a model defined in OpenAPI

        :param code: The code of this VatRateInputModel.
        :param country_guid: The country_guid of this VatRateInputModel.
        :param is_active: The is_active of this VatRateInputModel.
        :param is_default: The is_default of this VatRateInputModel.
        :param percentage: The percentage of this VatRateInputModel.
        """
        self.openapi_types = {
            'code': str,
            'country_guid': str,
            'is_active': bool,
            'is_default': bool,
            'percentage': float
        }

        self.attribute_map = {
            'code': 'code',
            'country_guid': 'countryGuid',
            'is_active': 'isActive',
            'is_default': 'isDefault',
            'percentage': 'percentage'
        }

        self._code = code
        self._country_guid = country_guid
        self._is_active = is_active
        self._is_default = is_default
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VatRateInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VatRateInputModel of this VatRateInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this VatRateInputModel.


        :return: The code of this VatRateInputModel.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VatRateInputModel.


        :param code: The code of this VatRateInputModel.
        :type code: str
        """
        if code is not None and len(code) > 10:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `10`")
        if code is not None and len(code) < 0:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `0`")

        self._code = code

    @property
    def country_guid(self):
        """Gets the country_guid of this VatRateInputModel.


        :return: The country_guid of this VatRateInputModel.
        :rtype: str
        """
        return self._country_guid

    @country_guid.setter
    def country_guid(self, country_guid):
        """Sets the country_guid of this VatRateInputModel.


        :param country_guid: The country_guid of this VatRateInputModel.
        :type country_guid: str
        """

        self._country_guid = country_guid

    @property
    def is_active(self):
        """Gets the is_active of this VatRateInputModel.


        :return: The is_active of this VatRateInputModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this VatRateInputModel.


        :param is_active: The is_active of this VatRateInputModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_default(self):
        """Gets the is_default of this VatRateInputModel.


        :return: The is_default of this VatRateInputModel.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this VatRateInputModel.


        :param is_default: The is_default of this VatRateInputModel.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def percentage(self):
        """Gets the percentage of this VatRateInputModel.


        :return: The percentage of this VatRateInputModel.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this VatRateInputModel.


        :param percentage: The percentage of this VatRateInputModel.
        :type percentage: float
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")

        self._percentage = percentage
