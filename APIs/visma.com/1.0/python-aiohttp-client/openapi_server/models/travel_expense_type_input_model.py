# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expenses_class import ExpensesClass
from openapi_server.models.money_input_model_with_nullable_amount import MoneyInputModelWithNullableAmount
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server import util


class TravelExpenseTypeInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, cost_account: SimpleInputModel=None, expense_class: ExpensesClass=None, include_time: bool=True, is_active: bool=True, measurement_unit: str=None, name: str=None, product_category: SimpleInputModel=None, purchase_vat_rate: float=None, sales_account: SimpleInputModel=None, unit_cost: MoneyInputModelWithNullableAmount=None, vat_rate: float=None):
        """TravelExpenseTypeInputModel - a model defined in OpenAPI

        :param code: The code of this TravelExpenseTypeInputModel.
        :param cost_account: The cost_account of this TravelExpenseTypeInputModel.
        :param expense_class: The expense_class of this TravelExpenseTypeInputModel.
        :param include_time: The include_time of this TravelExpenseTypeInputModel.
        :param is_active: The is_active of this TravelExpenseTypeInputModel.
        :param measurement_unit: The measurement_unit of this TravelExpenseTypeInputModel.
        :param name: The name of this TravelExpenseTypeInputModel.
        :param product_category: The product_category of this TravelExpenseTypeInputModel.
        :param purchase_vat_rate: The purchase_vat_rate of this TravelExpenseTypeInputModel.
        :param sales_account: The sales_account of this TravelExpenseTypeInputModel.
        :param unit_cost: The unit_cost of this TravelExpenseTypeInputModel.
        :param vat_rate: The vat_rate of this TravelExpenseTypeInputModel.
        """
        self.openapi_types = {
            'code': str,
            'cost_account': SimpleInputModel,
            'expense_class': ExpensesClass,
            'include_time': bool,
            'is_active': bool,
            'measurement_unit': str,
            'name': str,
            'product_category': SimpleInputModel,
            'purchase_vat_rate': float,
            'sales_account': SimpleInputModel,
            'unit_cost': MoneyInputModelWithNullableAmount,
            'vat_rate': float
        }

        self.attribute_map = {
            'code': 'code',
            'cost_account': 'costAccount',
            'expense_class': 'expenseClass',
            'include_time': 'includeTime',
            'is_active': 'isActive',
            'measurement_unit': 'measurementUnit',
            'name': 'name',
            'product_category': 'productCategory',
            'purchase_vat_rate': 'purchaseVatRate',
            'sales_account': 'salesAccount',
            'unit_cost': 'unitCost',
            'vat_rate': 'vatRate'
        }

        self._code = code
        self._cost_account = cost_account
        self._expense_class = expense_class
        self._include_time = include_time
        self._is_active = is_active
        self._measurement_unit = measurement_unit
        self._name = name
        self._product_category = product_category
        self._purchase_vat_rate = purchase_vat_rate
        self._sales_account = sales_account
        self._unit_cost = unit_cost
        self._vat_rate = vat_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TravelExpenseTypeInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TravelExpenseTypeInputModel of this TravelExpenseTypeInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TravelExpenseTypeInputModel.


        :return: The code of this TravelExpenseTypeInputModel.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TravelExpenseTypeInputModel.


        :param code: The code of this TravelExpenseTypeInputModel.
        :type code: str
        """

        self._code = code

    @property
    def cost_account(self):
        """Gets the cost_account of this TravelExpenseTypeInputModel.


        :return: The cost_account of this TravelExpenseTypeInputModel.
        :rtype: SimpleInputModel
        """
        return self._cost_account

    @cost_account.setter
    def cost_account(self, cost_account):
        """Sets the cost_account of this TravelExpenseTypeInputModel.


        :param cost_account: The cost_account of this TravelExpenseTypeInputModel.
        :type cost_account: SimpleInputModel
        """

        self._cost_account = cost_account

    @property
    def expense_class(self):
        """Gets the expense_class of this TravelExpenseTypeInputModel.


        :return: The expense_class of this TravelExpenseTypeInputModel.
        :rtype: ExpensesClass
        """
        return self._expense_class

    @expense_class.setter
    def expense_class(self, expense_class):
        """Sets the expense_class of this TravelExpenseTypeInputModel.


        :param expense_class: The expense_class of this TravelExpenseTypeInputModel.
        :type expense_class: ExpensesClass
        """
        if expense_class is None:
            raise ValueError("Invalid value for `expense_class`, must not be `None`")

        self._expense_class = expense_class

    @property
    def include_time(self):
        """Gets the include_time of this TravelExpenseTypeInputModel.


        :return: The include_time of this TravelExpenseTypeInputModel.
        :rtype: bool
        """
        return self._include_time

    @include_time.setter
    def include_time(self, include_time):
        """Sets the include_time of this TravelExpenseTypeInputModel.


        :param include_time: The include_time of this TravelExpenseTypeInputModel.
        :type include_time: bool
        """

        self._include_time = include_time

    @property
    def is_active(self):
        """Gets the is_active of this TravelExpenseTypeInputModel.


        :return: The is_active of this TravelExpenseTypeInputModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TravelExpenseTypeInputModel.


        :param is_active: The is_active of this TravelExpenseTypeInputModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this TravelExpenseTypeInputModel.


        :return: The measurement_unit of this TravelExpenseTypeInputModel.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this TravelExpenseTypeInputModel.


        :param measurement_unit: The measurement_unit of this TravelExpenseTypeInputModel.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this TravelExpenseTypeInputModel.


        :return: The name of this TravelExpenseTypeInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TravelExpenseTypeInputModel.


        :param name: The name of this TravelExpenseTypeInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def product_category(self):
        """Gets the product_category of this TravelExpenseTypeInputModel.


        :return: The product_category of this TravelExpenseTypeInputModel.
        :rtype: SimpleInputModel
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this TravelExpenseTypeInputModel.


        :param product_category: The product_category of this TravelExpenseTypeInputModel.
        :type product_category: SimpleInputModel
        """

        self._product_category = product_category

    @property
    def purchase_vat_rate(self):
        """Gets the purchase_vat_rate of this TravelExpenseTypeInputModel.


        :return: The purchase_vat_rate of this TravelExpenseTypeInputModel.
        :rtype: float
        """
        return self._purchase_vat_rate

    @purchase_vat_rate.setter
    def purchase_vat_rate(self, purchase_vat_rate):
        """Sets the purchase_vat_rate of this TravelExpenseTypeInputModel.


        :param purchase_vat_rate: The purchase_vat_rate of this TravelExpenseTypeInputModel.
        :type purchase_vat_rate: float
        """

        self._purchase_vat_rate = purchase_vat_rate

    @property
    def sales_account(self):
        """Gets the sales_account of this TravelExpenseTypeInputModel.


        :return: The sales_account of this TravelExpenseTypeInputModel.
        :rtype: SimpleInputModel
        """
        return self._sales_account

    @sales_account.setter
    def sales_account(self, sales_account):
        """Sets the sales_account of this TravelExpenseTypeInputModel.


        :param sales_account: The sales_account of this TravelExpenseTypeInputModel.
        :type sales_account: SimpleInputModel
        """

        self._sales_account = sales_account

    @property
    def unit_cost(self):
        """Gets the unit_cost of this TravelExpenseTypeInputModel.


        :return: The unit_cost of this TravelExpenseTypeInputModel.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this TravelExpenseTypeInputModel.


        :param unit_cost: The unit_cost of this TravelExpenseTypeInputModel.
        :type unit_cost: MoneyInputModelWithNullableAmount
        """
        if unit_cost is None:
            raise ValueError("Invalid value for `unit_cost`, must not be `None`")

        self._unit_cost = unit_cost

    @property
    def vat_rate(self):
        """Gets the vat_rate of this TravelExpenseTypeInputModel.


        :return: The vat_rate of this TravelExpenseTypeInputModel.
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this TravelExpenseTypeInputModel.


        :param vat_rate: The vat_rate of this TravelExpenseTypeInputModel.
        :type vat_rate: float
        """

        self._vat_rate = vat_rate
