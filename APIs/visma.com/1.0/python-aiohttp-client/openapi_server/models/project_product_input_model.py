# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class ProjectProductInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, product: SimpleInputRequiredModel=None, project: SimpleInputRequiredModel=None):
        """ProjectProductInputModel - a model defined in OpenAPI

        :param guid: The guid of this ProjectProductInputModel.
        :param product: The product of this ProjectProductInputModel.
        :param project: The project of this ProjectProductInputModel.
        """
        self.openapi_types = {
            'guid': str,
            'product': SimpleInputRequiredModel,
            'project': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'guid': 'guid',
            'product': 'product',
            'project': 'project'
        }

        self._guid = guid
        self._product = product
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectProductInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectProductInputModel of this ProjectProductInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this ProjectProductInputModel.


        :return: The guid of this ProjectProductInputModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ProjectProductInputModel.


        :param guid: The guid of this ProjectProductInputModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def product(self):
        """Gets the product of this ProjectProductInputModel.


        :return: The product of this ProjectProductInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProjectProductInputModel.


        :param product: The product of this ProjectProductInputModel.
        :type product: SimpleInputRequiredModel
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def project(self):
        """Gets the project of this ProjectProductInputModel.


        :return: The project of this ProjectProductInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectProductInputModel.


        :param project: The project of this ProjectProductInputModel.
        :type project: SimpleInputRequiredModel
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project
