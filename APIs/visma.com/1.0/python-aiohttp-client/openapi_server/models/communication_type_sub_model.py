# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.communication_method_type import CommunicationMethodType
from openapi_server import util


class CommunicationTypeSubModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, is_active: bool=True, name: str=None, type: CommunicationMethodType=None):
        """CommunicationTypeSubModel - a model defined in OpenAPI

        :param guid: The guid of this CommunicationTypeSubModel.
        :param is_active: The is_active of this CommunicationTypeSubModel.
        :param name: The name of this CommunicationTypeSubModel.
        :param type: The type of this CommunicationTypeSubModel.
        """
        self.openapi_types = {
            'guid': str,
            'is_active': bool,
            'name': str,
            'type': CommunicationMethodType
        }

        self.attribute_map = {
            'guid': 'guid',
            'is_active': 'isActive',
            'name': 'name',
            'type': 'type'
        }

        self._guid = guid
        self._is_active = is_active
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommunicationTypeSubModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommunicationTypeSubModel of this CommunicationTypeSubModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this CommunicationTypeSubModel.


        :return: The guid of this CommunicationTypeSubModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CommunicationTypeSubModel.


        :param guid: The guid of this CommunicationTypeSubModel.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")
        if guid is not None and len(guid) < 1:
            raise ValueError("Invalid value for `guid`, length must be greater than or equal to `1`")

        self._guid = guid

    @property
    def is_active(self):
        """Gets the is_active of this CommunicationTypeSubModel.


        :return: The is_active of this CommunicationTypeSubModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CommunicationTypeSubModel.


        :param is_active: The is_active of this CommunicationTypeSubModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this CommunicationTypeSubModel.


        :return: The name of this CommunicationTypeSubModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommunicationTypeSubModel.


        :param name: The name of this CommunicationTypeSubModel.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CommunicationTypeSubModel.


        :return: The type of this CommunicationTypeSubModel.
        :rtype: CommunicationMethodType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommunicationTypeSubModel.


        :param type: The type of this CommunicationTypeSubModel.
        :type type: CommunicationMethodType
        """

        self._type = type
