# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exception_detail_model import ExceptionDetailModel
from openapi_server.models.exception_type_enum import ExceptionTypeEnum
from openapi_server import util


class ErrorModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: List[ExceptionDetailModel]=None, http_status_code: int=None, stack: str=None, type: ExceptionTypeEnum=None):
        """ErrorModel - a model defined in OpenAPI

        :param details: The details of this ErrorModel.
        :param http_status_code: The http_status_code of this ErrorModel.
        :param stack: The stack of this ErrorModel.
        :param type: The type of this ErrorModel.
        """
        self.openapi_types = {
            'details': List[ExceptionDetailModel],
            'http_status_code': int,
            'stack': str,
            'type': ExceptionTypeEnum
        }

        self.attribute_map = {
            'details': 'details',
            'http_status_code': 'httpStatusCode',
            'stack': 'stack',
            'type': 'type'
        }

        self._details = details
        self._http_status_code = http_status_code
        self._stack = stack
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorModel of this ErrorModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ErrorModel.


        :return: The details of this ErrorModel.
        :rtype: List[ExceptionDetailModel]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorModel.


        :param details: The details of this ErrorModel.
        :type details: List[ExceptionDetailModel]
        """

        self._details = details

    @property
    def http_status_code(self):
        """Gets the http_status_code of this ErrorModel.


        :return: The http_status_code of this ErrorModel.
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this ErrorModel.


        :param http_status_code: The http_status_code of this ErrorModel.
        :type http_status_code: int
        """

        self._http_status_code = http_status_code

    @property
    def stack(self):
        """Gets the stack of this ErrorModel.


        :return: The stack of this ErrorModel.
        :rtype: str
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this ErrorModel.


        :param stack: The stack of this ErrorModel.
        :type stack: str
        """

        self._stack = stack

    @property
    def type(self):
        """Gets the type of this ErrorModel.


        :return: The type of this ErrorModel.
        :rtype: ExceptionTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorModel.


        :param type: The type of this ErrorModel.
        :type type: ExceptionTypeEnum
        """

        self._type = type
