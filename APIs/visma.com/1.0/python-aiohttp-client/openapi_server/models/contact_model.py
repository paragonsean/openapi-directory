# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_customer import ContactCustomer
from openapi_server.models.model_with_name import ModelWithName
from openapi_server.models.salutation_type import SalutationType
from openapi_server.models.satisfaction_level_type import SatisfactionLevelType
from openapi_server.models.user_with_first_name_last_name_and_photo_file_model import UserWithFirstNameLastNameAndPhotoFileModel
from openapi_server import util


class ContactModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_guid: str=None, created_by: UserWithFirstNameLastNameAndPhotoFileModel=None, created_date_time: datetime=None, customer: ContactCustomer=None, date_of_birth: date=None, description: str=None, emails: List[str]=None, first_name: str=None, guid: str=None, is_active: bool=True, is_deleted: bool=None, is_email_allowed: bool=False, job_title: str=None, language: ModelWithName=None, last_name: str=None, last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel=None, last_updated_date_time: datetime=None, name: str=None, phone_numbers: List[str]=None, role: ModelWithName=None, salutation: SalutationType=None, satisfaction_level: SatisfactionLevelType=None, time_zone: ModelWithName=None):
        """ContactModel - a model defined in OpenAPI

        :param address_guid: The address_guid of this ContactModel.
        :param created_by: The created_by of this ContactModel.
        :param created_date_time: The created_date_time of this ContactModel.
        :param customer: The customer of this ContactModel.
        :param date_of_birth: The date_of_birth of this ContactModel.
        :param description: The description of this ContactModel.
        :param emails: The emails of this ContactModel.
        :param first_name: The first_name of this ContactModel.
        :param guid: The guid of this ContactModel.
        :param is_active: The is_active of this ContactModel.
        :param is_deleted: The is_deleted of this ContactModel.
        :param is_email_allowed: The is_email_allowed of this ContactModel.
        :param job_title: The job_title of this ContactModel.
        :param language: The language of this ContactModel.
        :param last_name: The last_name of this ContactModel.
        :param last_updated_by: The last_updated_by of this ContactModel.
        :param last_updated_date_time: The last_updated_date_time of this ContactModel.
        :param name: The name of this ContactModel.
        :param phone_numbers: The phone_numbers of this ContactModel.
        :param role: The role of this ContactModel.
        :param salutation: The salutation of this ContactModel.
        :param satisfaction_level: The satisfaction_level of this ContactModel.
        :param time_zone: The time_zone of this ContactModel.
        """
        self.openapi_types = {
            'address_guid': str,
            'created_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'created_date_time': datetime,
            'customer': ContactCustomer,
            'date_of_birth': date,
            'description': str,
            'emails': List[str],
            'first_name': str,
            'guid': str,
            'is_active': bool,
            'is_deleted': bool,
            'is_email_allowed': bool,
            'job_title': str,
            'language': ModelWithName,
            'last_name': str,
            'last_updated_by': UserWithFirstNameLastNameAndPhotoFileModel,
            'last_updated_date_time': datetime,
            'name': str,
            'phone_numbers': List[str],
            'role': ModelWithName,
            'salutation': SalutationType,
            'satisfaction_level': SatisfactionLevelType,
            'time_zone': ModelWithName
        }

        self.attribute_map = {
            'address_guid': 'addressGuid',
            'created_by': 'createdBy',
            'created_date_time': 'createdDateTime',
            'customer': 'customer',
            'date_of_birth': 'dateOfBirth',
            'description': 'description',
            'emails': 'emails',
            'first_name': 'firstName',
            'guid': 'guid',
            'is_active': 'isActive',
            'is_deleted': 'isDeleted',
            'is_email_allowed': 'isEmailAllowed',
            'job_title': 'jobTitle',
            'language': 'language',
            'last_name': 'lastName',
            'last_updated_by': 'lastUpdatedBy',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'name': 'name',
            'phone_numbers': 'phoneNumbers',
            'role': 'role',
            'salutation': 'salutation',
            'satisfaction_level': 'satisfactionLevel',
            'time_zone': 'timeZone'
        }

        self._address_guid = address_guid
        self._created_by = created_by
        self._created_date_time = created_date_time
        self._customer = customer
        self._date_of_birth = date_of_birth
        self._description = description
        self._emails = emails
        self._first_name = first_name
        self._guid = guid
        self._is_active = is_active
        self._is_deleted = is_deleted
        self._is_email_allowed = is_email_allowed
        self._job_title = job_title
        self._language = language
        self._last_name = last_name
        self._last_updated_by = last_updated_by
        self._last_updated_date_time = last_updated_date_time
        self._name = name
        self._phone_numbers = phone_numbers
        self._role = role
        self._salutation = salutation
        self._satisfaction_level = satisfaction_level
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactModel of this ContactModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_guid(self):
        """Gets the address_guid of this ContactModel.


        :return: The address_guid of this ContactModel.
        :rtype: str
        """
        return self._address_guid

    @address_guid.setter
    def address_guid(self, address_guid):
        """Sets the address_guid of this ContactModel.


        :param address_guid: The address_guid of this ContactModel.
        :type address_guid: str
        """

        self._address_guid = address_guid

    @property
    def created_by(self):
        """Gets the created_by of this ContactModel.


        :return: The created_by of this ContactModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ContactModel.


        :param created_by: The created_by of this ContactModel.
        :type created_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._created_by = created_by

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ContactModel.


        :return: The created_date_time of this ContactModel.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ContactModel.


        :param created_date_time: The created_date_time of this ContactModel.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def customer(self):
        """Gets the customer of this ContactModel.


        :return: The customer of this ContactModel.
        :rtype: ContactCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ContactModel.


        :param customer: The customer of this ContactModel.
        :type customer: ContactCustomer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ContactModel.


        :return: The date_of_birth of this ContactModel.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ContactModel.


        :param date_of_birth: The date_of_birth of this ContactModel.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def description(self):
        """Gets the description of this ContactModel.


        :return: The description of this ContactModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContactModel.


        :param description: The description of this ContactModel.
        :type description: str
        """

        self._description = description

    @property
    def emails(self):
        """Gets the emails of this ContactModel.


        :return: The emails of this ContactModel.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ContactModel.


        :param emails: The emails of this ContactModel.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def first_name(self):
        """Gets the first_name of this ContactModel.


        :return: The first_name of this ContactModel.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactModel.


        :param first_name: The first_name of this ContactModel.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def guid(self):
        """Gets the guid of this ContactModel.


        :return: The guid of this ContactModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ContactModel.


        :param guid: The guid of this ContactModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_active(self):
        """Gets the is_active of this ContactModel.


        :return: The is_active of this ContactModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ContactModel.


        :param is_active: The is_active of this ContactModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_deleted(self):
        """Gets the is_deleted of this ContactModel.


        :return: The is_deleted of this ContactModel.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this ContactModel.


        :param is_deleted: The is_deleted of this ContactModel.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_email_allowed(self):
        """Gets the is_email_allowed of this ContactModel.


        :return: The is_email_allowed of this ContactModel.
        :rtype: bool
        """
        return self._is_email_allowed

    @is_email_allowed.setter
    def is_email_allowed(self, is_email_allowed):
        """Sets the is_email_allowed of this ContactModel.


        :param is_email_allowed: The is_email_allowed of this ContactModel.
        :type is_email_allowed: bool
        """

        self._is_email_allowed = is_email_allowed

    @property
    def job_title(self):
        """Gets the job_title of this ContactModel.


        :return: The job_title of this ContactModel.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this ContactModel.


        :param job_title: The job_title of this ContactModel.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def language(self):
        """Gets the language of this ContactModel.


        :return: The language of this ContactModel.
        :rtype: ModelWithName
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ContactModel.


        :param language: The language of this ContactModel.
        :type language: ModelWithName
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this ContactModel.


        :return: The last_name of this ContactModel.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactModel.


        :param last_name: The last_name of this ContactModel.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ContactModel.


        :return: The last_updated_by of this ContactModel.
        :rtype: UserWithFirstNameLastNameAndPhotoFileModel
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ContactModel.


        :param last_updated_by: The last_updated_by of this ContactModel.
        :type last_updated_by: UserWithFirstNameLastNameAndPhotoFileModel
        """

        self._last_updated_by = last_updated_by

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this ContactModel.


        :return: The last_updated_date_time of this ContactModel.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this ContactModel.


        :param last_updated_date_time: The last_updated_date_time of this ContactModel.
        :type last_updated_date_time: datetime
        """

        self._last_updated_date_time = last_updated_date_time

    @property
    def name(self):
        """Gets the name of this ContactModel.


        :return: The name of this ContactModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactModel.


        :param name: The name of this ContactModel.
        :type name: str
        """

        self._name = name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this ContactModel.


        :return: The phone_numbers of this ContactModel.
        :rtype: List[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this ContactModel.


        :param phone_numbers: The phone_numbers of this ContactModel.
        :type phone_numbers: List[str]
        """

        self._phone_numbers = phone_numbers

    @property
    def role(self):
        """Gets the role of this ContactModel.


        :return: The role of this ContactModel.
        :rtype: ModelWithName
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ContactModel.


        :param role: The role of this ContactModel.
        :type role: ModelWithName
        """

        self._role = role

    @property
    def salutation(self):
        """Gets the salutation of this ContactModel.


        :return: The salutation of this ContactModel.
        :rtype: SalutationType
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this ContactModel.


        :param salutation: The salutation of this ContactModel.
        :type salutation: SalutationType
        """

        self._salutation = salutation

    @property
    def satisfaction_level(self):
        """Gets the satisfaction_level of this ContactModel.


        :return: The satisfaction_level of this ContactModel.
        :rtype: SatisfactionLevelType
        """
        return self._satisfaction_level

    @satisfaction_level.setter
    def satisfaction_level(self, satisfaction_level):
        """Sets the satisfaction_level of this ContactModel.


        :param satisfaction_level: The satisfaction_level of this ContactModel.
        :type satisfaction_level: SatisfactionLevelType
        """

        self._satisfaction_level = satisfaction_level

    @property
    def time_zone(self):
        """Gets the time_zone of this ContactModel.


        :return: The time_zone of this ContactModel.
        :rtype: ModelWithName
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ContactModel.


        :param time_zone: The time_zone of this ContactModel.
        :type time_zone: ModelWithName
        """

        self._time_zone = time_zone
