# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_template_sub_model import InvoiceTemplateSubModel
from openapi_server.models.money_input_model_with_nullable_amount import MoneyInputModelWithNullableAmount
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server.models.simple_project_status_input_model import SimpleProjectStatusInputModel
from openapi_server.models.simple_sales_status_input_model import SimpleSalesStatusInputModel
from openapi_server import util


class ProjectInputModelBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_contact: SimpleInputModel=None, business_unit: SimpleInputRequiredModel=None, completion_estimate_percentage: int=None, cost_center: SimpleInputModel=None, currency: SimpleInputRequiredModel=None, customer: SimpleInputRequiredModel=None, customer_contact: SimpleInputModel=None, deadline: date=None, description: str=None, expected_order_date: date=None, expected_value: MoneyInputModelWithNullableAmount=None, internal_name: str=None, invoice_notes: str=None, invoice_template: InvoiceTemplateSubModel=None, is_closed: bool=None, is_internal: bool=None, is_joining_allowed: bool=True, lead_source: SimpleInputModel=None, name: str=None, number: int=None, order_number: str=None, our_reference: str=None, payment_term: int=None, probability: int=None, project_owner: SimpleInputModel=None, project_status: SimpleProjectStatusInputModel=None, sales_person: SimpleInputModel=None, sales_status: SimpleSalesStatusInputModel=None, start_date: date=None, use_overtime_multipliers: bool=True, use_products_from_setting: bool=True, use_worktypes_from_setting: bool=True, your_reference: str=None):
        """ProjectInputModelBase - a model defined in OpenAPI

        :param billing_contact: The billing_contact of this ProjectInputModelBase.
        :param business_unit: The business_unit of this ProjectInputModelBase.
        :param completion_estimate_percentage: The completion_estimate_percentage of this ProjectInputModelBase.
        :param cost_center: The cost_center of this ProjectInputModelBase.
        :param currency: The currency of this ProjectInputModelBase.
        :param customer: The customer of this ProjectInputModelBase.
        :param customer_contact: The customer_contact of this ProjectInputModelBase.
        :param deadline: The deadline of this ProjectInputModelBase.
        :param description: The description of this ProjectInputModelBase.
        :param expected_order_date: The expected_order_date of this ProjectInputModelBase.
        :param expected_value: The expected_value of this ProjectInputModelBase.
        :param internal_name: The internal_name of this ProjectInputModelBase.
        :param invoice_notes: The invoice_notes of this ProjectInputModelBase.
        :param invoice_template: The invoice_template of this ProjectInputModelBase.
        :param is_closed: The is_closed of this ProjectInputModelBase.
        :param is_internal: The is_internal of this ProjectInputModelBase.
        :param is_joining_allowed: The is_joining_allowed of this ProjectInputModelBase.
        :param lead_source: The lead_source of this ProjectInputModelBase.
        :param name: The name of this ProjectInputModelBase.
        :param number: The number of this ProjectInputModelBase.
        :param order_number: The order_number of this ProjectInputModelBase.
        :param our_reference: The our_reference of this ProjectInputModelBase.
        :param payment_term: The payment_term of this ProjectInputModelBase.
        :param probability: The probability of this ProjectInputModelBase.
        :param project_owner: The project_owner of this ProjectInputModelBase.
        :param project_status: The project_status of this ProjectInputModelBase.
        :param sales_person: The sales_person of this ProjectInputModelBase.
        :param sales_status: The sales_status of this ProjectInputModelBase.
        :param start_date: The start_date of this ProjectInputModelBase.
        :param use_overtime_multipliers: The use_overtime_multipliers of this ProjectInputModelBase.
        :param use_products_from_setting: The use_products_from_setting of this ProjectInputModelBase.
        :param use_worktypes_from_setting: The use_worktypes_from_setting of this ProjectInputModelBase.
        :param your_reference: The your_reference of this ProjectInputModelBase.
        """
        self.openapi_types = {
            'billing_contact': SimpleInputModel,
            'business_unit': SimpleInputRequiredModel,
            'completion_estimate_percentage': int,
            'cost_center': SimpleInputModel,
            'currency': SimpleInputRequiredModel,
            'customer': SimpleInputRequiredModel,
            'customer_contact': SimpleInputModel,
            'deadline': date,
            'description': str,
            'expected_order_date': date,
            'expected_value': MoneyInputModelWithNullableAmount,
            'internal_name': str,
            'invoice_notes': str,
            'invoice_template': InvoiceTemplateSubModel,
            'is_closed': bool,
            'is_internal': bool,
            'is_joining_allowed': bool,
            'lead_source': SimpleInputModel,
            'name': str,
            'number': int,
            'order_number': str,
            'our_reference': str,
            'payment_term': int,
            'probability': int,
            'project_owner': SimpleInputModel,
            'project_status': SimpleProjectStatusInputModel,
            'sales_person': SimpleInputModel,
            'sales_status': SimpleSalesStatusInputModel,
            'start_date': date,
            'use_overtime_multipliers': bool,
            'use_products_from_setting': bool,
            'use_worktypes_from_setting': bool,
            'your_reference': str
        }

        self.attribute_map = {
            'billing_contact': 'billingContact',
            'business_unit': 'businessUnit',
            'completion_estimate_percentage': 'completionEstimatePercentage',
            'cost_center': 'costCenter',
            'currency': 'currency',
            'customer': 'customer',
            'customer_contact': 'customerContact',
            'deadline': 'deadline',
            'description': 'description',
            'expected_order_date': 'expectedOrderDate',
            'expected_value': 'expectedValue',
            'internal_name': 'internalName',
            'invoice_notes': 'invoiceNotes',
            'invoice_template': 'invoiceTemplate',
            'is_closed': 'isClosed',
            'is_internal': 'isInternal',
            'is_joining_allowed': 'isJoiningAllowed',
            'lead_source': 'leadSource',
            'name': 'name',
            'number': 'number',
            'order_number': 'orderNumber',
            'our_reference': 'ourReference',
            'payment_term': 'paymentTerm',
            'probability': 'probability',
            'project_owner': 'projectOwner',
            'project_status': 'projectStatus',
            'sales_person': 'salesPerson',
            'sales_status': 'salesStatus',
            'start_date': 'startDate',
            'use_overtime_multipliers': 'useOvertimeMultipliers',
            'use_products_from_setting': 'useProductsFromSetting',
            'use_worktypes_from_setting': 'useWorktypesFromSetting',
            'your_reference': 'yourReference'
        }

        self._billing_contact = billing_contact
        self._business_unit = business_unit
        self._completion_estimate_percentage = completion_estimate_percentage
        self._cost_center = cost_center
        self._currency = currency
        self._customer = customer
        self._customer_contact = customer_contact
        self._deadline = deadline
        self._description = description
        self._expected_order_date = expected_order_date
        self._expected_value = expected_value
        self._internal_name = internal_name
        self._invoice_notes = invoice_notes
        self._invoice_template = invoice_template
        self._is_closed = is_closed
        self._is_internal = is_internal
        self._is_joining_allowed = is_joining_allowed
        self._lead_source = lead_source
        self._name = name
        self._number = number
        self._order_number = order_number
        self._our_reference = our_reference
        self._payment_term = payment_term
        self._probability = probability
        self._project_owner = project_owner
        self._project_status = project_status
        self._sales_person = sales_person
        self._sales_status = sales_status
        self._start_date = start_date
        self._use_overtime_multipliers = use_overtime_multipliers
        self._use_products_from_setting = use_products_from_setting
        self._use_worktypes_from_setting = use_worktypes_from_setting
        self._your_reference = your_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectInputModelBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectInputModelBase of this ProjectInputModelBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_contact(self):
        """Gets the billing_contact of this ProjectInputModelBase.


        :return: The billing_contact of this ProjectInputModelBase.
        :rtype: SimpleInputModel
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """Sets the billing_contact of this ProjectInputModelBase.


        :param billing_contact: The billing_contact of this ProjectInputModelBase.
        :type billing_contact: SimpleInputModel
        """

        self._billing_contact = billing_contact

    @property
    def business_unit(self):
        """Gets the business_unit of this ProjectInputModelBase.


        :return: The business_unit of this ProjectInputModelBase.
        :rtype: SimpleInputRequiredModel
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this ProjectInputModelBase.


        :param business_unit: The business_unit of this ProjectInputModelBase.
        :type business_unit: SimpleInputRequiredModel
        """

        self._business_unit = business_unit

    @property
    def completion_estimate_percentage(self):
        """Gets the completion_estimate_percentage of this ProjectInputModelBase.


        :return: The completion_estimate_percentage of this ProjectInputModelBase.
        :rtype: int
        """
        return self._completion_estimate_percentage

    @completion_estimate_percentage.setter
    def completion_estimate_percentage(self, completion_estimate_percentage):
        """Sets the completion_estimate_percentage of this ProjectInputModelBase.


        :param completion_estimate_percentage: The completion_estimate_percentage of this ProjectInputModelBase.
        :type completion_estimate_percentage: int
        """

        self._completion_estimate_percentage = completion_estimate_percentage

    @property
    def cost_center(self):
        """Gets the cost_center of this ProjectInputModelBase.


        :return: The cost_center of this ProjectInputModelBase.
        :rtype: SimpleInputModel
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this ProjectInputModelBase.


        :param cost_center: The cost_center of this ProjectInputModelBase.
        :type cost_center: SimpleInputModel
        """

        self._cost_center = cost_center

    @property
    def currency(self):
        """Gets the currency of this ProjectInputModelBase.


        :return: The currency of this ProjectInputModelBase.
        :rtype: SimpleInputRequiredModel
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProjectInputModelBase.


        :param currency: The currency of this ProjectInputModelBase.
        :type currency: SimpleInputRequiredModel
        """

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this ProjectInputModelBase.


        :return: The customer of this ProjectInputModelBase.
        :rtype: SimpleInputRequiredModel
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ProjectInputModelBase.


        :param customer: The customer of this ProjectInputModelBase.
        :type customer: SimpleInputRequiredModel
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def customer_contact(self):
        """Gets the customer_contact of this ProjectInputModelBase.


        :return: The customer_contact of this ProjectInputModelBase.
        :rtype: SimpleInputModel
        """
        return self._customer_contact

    @customer_contact.setter
    def customer_contact(self, customer_contact):
        """Sets the customer_contact of this ProjectInputModelBase.


        :param customer_contact: The customer_contact of this ProjectInputModelBase.
        :type customer_contact: SimpleInputModel
        """

        self._customer_contact = customer_contact

    @property
    def deadline(self):
        """Gets the deadline of this ProjectInputModelBase.


        :return: The deadline of this ProjectInputModelBase.
        :rtype: date
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this ProjectInputModelBase.


        :param deadline: The deadline of this ProjectInputModelBase.
        :type deadline: date
        """

        self._deadline = deadline

    @property
    def description(self):
        """Gets the description of this ProjectInputModelBase.


        :return: The description of this ProjectInputModelBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectInputModelBase.


        :param description: The description of this ProjectInputModelBase.
        :type description: str
        """

        self._description = description

    @property
    def expected_order_date(self):
        """Gets the expected_order_date of this ProjectInputModelBase.


        :return: The expected_order_date of this ProjectInputModelBase.
        :rtype: date
        """
        return self._expected_order_date

    @expected_order_date.setter
    def expected_order_date(self, expected_order_date):
        """Sets the expected_order_date of this ProjectInputModelBase.


        :param expected_order_date: The expected_order_date of this ProjectInputModelBase.
        :type expected_order_date: date
        """

        self._expected_order_date = expected_order_date

    @property
    def expected_value(self):
        """Gets the expected_value of this ProjectInputModelBase.


        :return: The expected_value of this ProjectInputModelBase.
        :rtype: MoneyInputModelWithNullableAmount
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this ProjectInputModelBase.


        :param expected_value: The expected_value of this ProjectInputModelBase.
        :type expected_value: MoneyInputModelWithNullableAmount
        """

        self._expected_value = expected_value

    @property
    def internal_name(self):
        """Gets the internal_name of this ProjectInputModelBase.


        :return: The internal_name of this ProjectInputModelBase.
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this ProjectInputModelBase.


        :param internal_name: The internal_name of this ProjectInputModelBase.
        :type internal_name: str
        """

        self._internal_name = internal_name

    @property
    def invoice_notes(self):
        """Gets the invoice_notes of this ProjectInputModelBase.


        :return: The invoice_notes of this ProjectInputModelBase.
        :rtype: str
        """
        return self._invoice_notes

    @invoice_notes.setter
    def invoice_notes(self, invoice_notes):
        """Sets the invoice_notes of this ProjectInputModelBase.


        :param invoice_notes: The invoice_notes of this ProjectInputModelBase.
        :type invoice_notes: str
        """

        self._invoice_notes = invoice_notes

    @property
    def invoice_template(self):
        """Gets the invoice_template of this ProjectInputModelBase.


        :return: The invoice_template of this ProjectInputModelBase.
        :rtype: InvoiceTemplateSubModel
        """
        return self._invoice_template

    @invoice_template.setter
    def invoice_template(self, invoice_template):
        """Sets the invoice_template of this ProjectInputModelBase.


        :param invoice_template: The invoice_template of this ProjectInputModelBase.
        :type invoice_template: InvoiceTemplateSubModel
        """

        self._invoice_template = invoice_template

    @property
    def is_closed(self):
        """Gets the is_closed of this ProjectInputModelBase.


        :return: The is_closed of this ProjectInputModelBase.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this ProjectInputModelBase.


        :param is_closed: The is_closed of this ProjectInputModelBase.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def is_internal(self):
        """Gets the is_internal of this ProjectInputModelBase.


        :return: The is_internal of this ProjectInputModelBase.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this ProjectInputModelBase.


        :param is_internal: The is_internal of this ProjectInputModelBase.
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def is_joining_allowed(self):
        """Gets the is_joining_allowed of this ProjectInputModelBase.


        :return: The is_joining_allowed of this ProjectInputModelBase.
        :rtype: bool
        """
        return self._is_joining_allowed

    @is_joining_allowed.setter
    def is_joining_allowed(self, is_joining_allowed):
        """Sets the is_joining_allowed of this ProjectInputModelBase.


        :param is_joining_allowed: The is_joining_allowed of this ProjectInputModelBase.
        :type is_joining_allowed: bool
        """

        self._is_joining_allowed = is_joining_allowed

    @property
    def lead_source(self):
        """Gets the lead_source of this ProjectInputModelBase.


        :return: The lead_source of this ProjectInputModelBase.
        :rtype: SimpleInputModel
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this ProjectInputModelBase.


        :param lead_source: The lead_source of this ProjectInputModelBase.
        :type lead_source: SimpleInputModel
        """

        self._lead_source = lead_source

    @property
    def name(self):
        """Gets the name of this ProjectInputModelBase.


        :return: The name of this ProjectInputModelBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectInputModelBase.


        :param name: The name of this ProjectInputModelBase.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this ProjectInputModelBase.


        :return: The number of this ProjectInputModelBase.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProjectInputModelBase.


        :param number: The number of this ProjectInputModelBase.
        :type number: int
        """

        self._number = number

    @property
    def order_number(self):
        """Gets the order_number of this ProjectInputModelBase.


        :return: The order_number of this ProjectInputModelBase.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ProjectInputModelBase.


        :param order_number: The order_number of this ProjectInputModelBase.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def our_reference(self):
        """Gets the our_reference of this ProjectInputModelBase.


        :return: The our_reference of this ProjectInputModelBase.
        :rtype: str
        """
        return self._our_reference

    @our_reference.setter
    def our_reference(self, our_reference):
        """Sets the our_reference of this ProjectInputModelBase.


        :param our_reference: The our_reference of this ProjectInputModelBase.
        :type our_reference: str
        """

        self._our_reference = our_reference

    @property
    def payment_term(self):
        """Gets the payment_term of this ProjectInputModelBase.


        :return: The payment_term of this ProjectInputModelBase.
        :rtype: int
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this ProjectInputModelBase.


        :param payment_term: The payment_term of this ProjectInputModelBase.
        :type payment_term: int
        """

        self._payment_term = payment_term

    @property
    def probability(self):
        """Gets the probability of this ProjectInputModelBase.


        :return: The probability of this ProjectInputModelBase.
        :rtype: int
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this ProjectInputModelBase.


        :param probability: The probability of this ProjectInputModelBase.
        :type probability: int
        """

        self._probability = probability

    @property
    def project_owner(self):
        """Gets the project_owner of this ProjectInputModelBase.


        :return: The project_owner of this ProjectInputModelBase.
        :rtype: SimpleInputModel
        """
        return self._project_owner

    @project_owner.setter
    def project_owner(self, project_owner):
        """Sets the project_owner of this ProjectInputModelBase.


        :param project_owner: The project_owner of this ProjectInputModelBase.
        :type project_owner: SimpleInputModel
        """
        if project_owner is None:
            raise ValueError("Invalid value for `project_owner`, must not be `None`")

        self._project_owner = project_owner

    @property
    def project_status(self):
        """Gets the project_status of this ProjectInputModelBase.


        :return: The project_status of this ProjectInputModelBase.
        :rtype: SimpleProjectStatusInputModel
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """Sets the project_status of this ProjectInputModelBase.


        :param project_status: The project_status of this ProjectInputModelBase.
        :type project_status: SimpleProjectStatusInputModel
        """

        self._project_status = project_status

    @property
    def sales_person(self):
        """Gets the sales_person of this ProjectInputModelBase.


        :return: The sales_person of this ProjectInputModelBase.
        :rtype: SimpleInputModel
        """
        return self._sales_person

    @sales_person.setter
    def sales_person(self, sales_person):
        """Sets the sales_person of this ProjectInputModelBase.


        :param sales_person: The sales_person of this ProjectInputModelBase.
        :type sales_person: SimpleInputModel
        """

        self._sales_person = sales_person

    @property
    def sales_status(self):
        """Gets the sales_status of this ProjectInputModelBase.


        :return: The sales_status of this ProjectInputModelBase.
        :rtype: SimpleSalesStatusInputModel
        """
        return self._sales_status

    @sales_status.setter
    def sales_status(self, sales_status):
        """Sets the sales_status of this ProjectInputModelBase.


        :param sales_status: The sales_status of this ProjectInputModelBase.
        :type sales_status: SimpleSalesStatusInputModel
        """

        self._sales_status = sales_status

    @property
    def start_date(self):
        """Gets the start_date of this ProjectInputModelBase.


        :return: The start_date of this ProjectInputModelBase.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ProjectInputModelBase.


        :param start_date: The start_date of this ProjectInputModelBase.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def use_overtime_multipliers(self):
        """Gets the use_overtime_multipliers of this ProjectInputModelBase.


        :return: The use_overtime_multipliers of this ProjectInputModelBase.
        :rtype: bool
        """
        return self._use_overtime_multipliers

    @use_overtime_multipliers.setter
    def use_overtime_multipliers(self, use_overtime_multipliers):
        """Sets the use_overtime_multipliers of this ProjectInputModelBase.


        :param use_overtime_multipliers: The use_overtime_multipliers of this ProjectInputModelBase.
        :type use_overtime_multipliers: bool
        """

        self._use_overtime_multipliers = use_overtime_multipliers

    @property
    def use_products_from_setting(self):
        """Gets the use_products_from_setting of this ProjectInputModelBase.


        :return: The use_products_from_setting of this ProjectInputModelBase.
        :rtype: bool
        """
        return self._use_products_from_setting

    @use_products_from_setting.setter
    def use_products_from_setting(self, use_products_from_setting):
        """Sets the use_products_from_setting of this ProjectInputModelBase.


        :param use_products_from_setting: The use_products_from_setting of this ProjectInputModelBase.
        :type use_products_from_setting: bool
        """

        self._use_products_from_setting = use_products_from_setting

    @property
    def use_worktypes_from_setting(self):
        """Gets the use_worktypes_from_setting of this ProjectInputModelBase.


        :return: The use_worktypes_from_setting of this ProjectInputModelBase.
        :rtype: bool
        """
        return self._use_worktypes_from_setting

    @use_worktypes_from_setting.setter
    def use_worktypes_from_setting(self, use_worktypes_from_setting):
        """Sets the use_worktypes_from_setting of this ProjectInputModelBase.


        :param use_worktypes_from_setting: The use_worktypes_from_setting of this ProjectInputModelBase.
        :type use_worktypes_from_setting: bool
        """

        self._use_worktypes_from_setting = use_worktypes_from_setting

    @property
    def your_reference(self):
        """Gets the your_reference of this ProjectInputModelBase.


        :return: The your_reference of this ProjectInputModelBase.
        :rtype: str
        """
        return self._your_reference

    @your_reference.setter
    def your_reference(self, your_reference):
        """Sets the your_reference of this ProjectInputModelBase.


        :param your_reference: The your_reference of this ProjectInputModelBase.
        :type your_reference: str
        """

        self._your_reference = your_reference
