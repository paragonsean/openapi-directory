# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_property_type import CustomPropertyType
from openapi_server.models.permission_level import PermissionLevel
from openapi_server import util


class UserCustomPropertyInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=True, name: str=None, parameters: str=None, permission: PermissionLevel=None, type: CustomPropertyType=None):
        """UserCustomPropertyInputModel - a model defined in OpenAPI

        :param is_active: The is_active of this UserCustomPropertyInputModel.
        :param name: The name of this UserCustomPropertyInputModel.
        :param parameters: The parameters of this UserCustomPropertyInputModel.
        :param permission: The permission of this UserCustomPropertyInputModel.
        :param type: The type of this UserCustomPropertyInputModel.
        """
        self.openapi_types = {
            'is_active': bool,
            'name': str,
            'parameters': str,
            'permission': PermissionLevel,
            'type': CustomPropertyType
        }

        self.attribute_map = {
            'is_active': 'isActive',
            'name': 'name',
            'parameters': 'parameters',
            'permission': 'permission',
            'type': 'type'
        }

        self._is_active = is_active
        self._name = name
        self._parameters = parameters
        self._permission = permission
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCustomPropertyInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCustomPropertyInputModel of this UserCustomPropertyInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this UserCustomPropertyInputModel.


        :return: The is_active of this UserCustomPropertyInputModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserCustomPropertyInputModel.


        :param is_active: The is_active of this UserCustomPropertyInputModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this UserCustomPropertyInputModel.


        :return: The name of this UserCustomPropertyInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCustomPropertyInputModel.


        :param name: The name of this UserCustomPropertyInputModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this UserCustomPropertyInputModel.


        :return: The parameters of this UserCustomPropertyInputModel.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this UserCustomPropertyInputModel.


        :param parameters: The parameters of this UserCustomPropertyInputModel.
        :type parameters: str
        """

        self._parameters = parameters

    @property
    def permission(self):
        """Gets the permission of this UserCustomPropertyInputModel.


        :return: The permission of this UserCustomPropertyInputModel.
        :rtype: PermissionLevel
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this UserCustomPropertyInputModel.


        :param permission: The permission of this UserCustomPropertyInputModel.
        :type permission: PermissionLevel
        """

        self._permission = permission

    @property
    def type(self):
        """Gets the type of this UserCustomPropertyInputModel.


        :return: The type of this UserCustomPropertyInputModel.
        :rtype: CustomPropertyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserCustomPropertyInputModel.


        :param type: The type of this UserCustomPropertyInputModel.
        :type type: CustomPropertyType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
