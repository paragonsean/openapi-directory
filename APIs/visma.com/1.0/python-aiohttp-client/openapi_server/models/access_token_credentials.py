# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grant_type import GrantType
from openapi_server import util


class AccessTokenCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, code: str=None, grant_type: GrantType=None, redirect_uri: str=None, refresh_token: str=None, scope: str=None, state: str=None):
        """AccessTokenCredentials - a model defined in OpenAPI

        :param client_id: The client_id of this AccessTokenCredentials.
        :param client_secret: The client_secret of this AccessTokenCredentials.
        :param code: The code of this AccessTokenCredentials.
        :param grant_type: The grant_type of this AccessTokenCredentials.
        :param redirect_uri: The redirect_uri of this AccessTokenCredentials.
        :param refresh_token: The refresh_token of this AccessTokenCredentials.
        :param scope: The scope of this AccessTokenCredentials.
        :param state: The state of this AccessTokenCredentials.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'code': str,
            'grant_type': GrantType,
            'redirect_uri': str,
            'refresh_token': str,
            'scope': str,
            'state': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'code': 'code',
            'grant_type': 'grant_type',
            'redirect_uri': 'redirect_uri',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'state': 'state'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._code = code
        self._grant_type = grant_type
        self._redirect_uri = redirect_uri
        self._refresh_token = refresh_token
        self._scope = scope
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessTokenCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessTokenCredentials of this AccessTokenCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this AccessTokenCredentials.


        :return: The client_id of this AccessTokenCredentials.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AccessTokenCredentials.


        :param client_id: The client_id of this AccessTokenCredentials.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this AccessTokenCredentials.


        :return: The client_secret of this AccessTokenCredentials.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AccessTokenCredentials.


        :param client_secret: The client_secret of this AccessTokenCredentials.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def code(self):
        """Gets the code of this AccessTokenCredentials.


        :return: The code of this AccessTokenCredentials.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AccessTokenCredentials.


        :param code: The code of this AccessTokenCredentials.
        :type code: str
        """

        self._code = code

    @property
    def grant_type(self):
        """Gets the grant_type of this AccessTokenCredentials.


        :return: The grant_type of this AccessTokenCredentials.
        :rtype: GrantType
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this AccessTokenCredentials.


        :param grant_type: The grant_type of this AccessTokenCredentials.
        :type grant_type: GrantType
        """

        self._grant_type = grant_type

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this AccessTokenCredentials.


        :return: The redirect_uri of this AccessTokenCredentials.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this AccessTokenCredentials.


        :param redirect_uri: The redirect_uri of this AccessTokenCredentials.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AccessTokenCredentials.


        :return: The refresh_token of this AccessTokenCredentials.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AccessTokenCredentials.


        :param refresh_token: The refresh_token of this AccessTokenCredentials.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this AccessTokenCredentials.


        :return: The scope of this AccessTokenCredentials.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AccessTokenCredentials.


        :param scope: The scope of this AccessTokenCredentials.
        :type scope: str
        """

        self._scope = scope

    @property
    def state(self):
        """Gets the state of this AccessTokenCredentials.


        :return: The state of this AccessTokenCredentials.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccessTokenCredentials.


        :param state: The state of this AccessTokenCredentials.
        :type state: str
        """

        self._state = state
