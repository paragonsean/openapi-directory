# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HolidayModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_guid: str=None, _date: date=None, guid: str=None, is_active: bool=True, is_public_holiday: bool=None, is_recurring_yearly: bool=None, name: str=None, recurring_end_year: int=None):
        """HolidayModel - a model defined in OpenAPI

        :param country_guid: The country_guid of this HolidayModel.
        :param _date: The _date of this HolidayModel.
        :param guid: The guid of this HolidayModel.
        :param is_active: The is_active of this HolidayModel.
        :param is_public_holiday: The is_public_holiday of this HolidayModel.
        :param is_recurring_yearly: The is_recurring_yearly of this HolidayModel.
        :param name: The name of this HolidayModel.
        :param recurring_end_year: The recurring_end_year of this HolidayModel.
        """
        self.openapi_types = {
            'country_guid': str,
            '_date': date,
            'guid': str,
            'is_active': bool,
            'is_public_holiday': bool,
            'is_recurring_yearly': bool,
            'name': str,
            'recurring_end_year': int
        }

        self.attribute_map = {
            'country_guid': 'countryGuid',
            '_date': 'date',
            'guid': 'guid',
            'is_active': 'isActive',
            'is_public_holiday': 'isPublicHoliday',
            'is_recurring_yearly': 'isRecurringYearly',
            'name': 'name',
            'recurring_end_year': 'recurringEndYear'
        }

        self._country_guid = country_guid
        self.__date = _date
        self._guid = guid
        self._is_active = is_active
        self._is_public_holiday = is_public_holiday
        self._is_recurring_yearly = is_recurring_yearly
        self._name = name
        self._recurring_end_year = recurring_end_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HolidayModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HolidayModel of this HolidayModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_guid(self):
        """Gets the country_guid of this HolidayModel.


        :return: The country_guid of this HolidayModel.
        :rtype: str
        """
        return self._country_guid

    @country_guid.setter
    def country_guid(self, country_guid):
        """Sets the country_guid of this HolidayModel.


        :param country_guid: The country_guid of this HolidayModel.
        :type country_guid: str
        """
        if country_guid is None:
            raise ValueError("Invalid value for `country_guid`, must not be `None`")
        if country_guid is not None and len(country_guid) < 1:
            raise ValueError("Invalid value for `country_guid`, length must be greater than or equal to `1`")

        self._country_guid = country_guid

    @property
    def _date(self):
        """Gets the _date of this HolidayModel.


        :return: The _date of this HolidayModel.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HolidayModel.


        :param _date: The _date of this HolidayModel.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def guid(self):
        """Gets the guid of this HolidayModel.


        :return: The guid of this HolidayModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this HolidayModel.


        :param guid: The guid of this HolidayModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_active(self):
        """Gets the is_active of this HolidayModel.


        :return: The is_active of this HolidayModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this HolidayModel.


        :param is_active: The is_active of this HolidayModel.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_public_holiday(self):
        """Gets the is_public_holiday of this HolidayModel.


        :return: The is_public_holiday of this HolidayModel.
        :rtype: bool
        """
        return self._is_public_holiday

    @is_public_holiday.setter
    def is_public_holiday(self, is_public_holiday):
        """Sets the is_public_holiday of this HolidayModel.


        :param is_public_holiday: The is_public_holiday of this HolidayModel.
        :type is_public_holiday: bool
        """

        self._is_public_holiday = is_public_holiday

    @property
    def is_recurring_yearly(self):
        """Gets the is_recurring_yearly of this HolidayModel.


        :return: The is_recurring_yearly of this HolidayModel.
        :rtype: bool
        """
        return self._is_recurring_yearly

    @is_recurring_yearly.setter
    def is_recurring_yearly(self, is_recurring_yearly):
        """Sets the is_recurring_yearly of this HolidayModel.


        :param is_recurring_yearly: The is_recurring_yearly of this HolidayModel.
        :type is_recurring_yearly: bool
        """

        self._is_recurring_yearly = is_recurring_yearly

    @property
    def name(self):
        """Gets the name of this HolidayModel.


        :return: The name of this HolidayModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HolidayModel.


        :param name: The name of this HolidayModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def recurring_end_year(self):
        """Gets the recurring_end_year of this HolidayModel.


        :return: The recurring_end_year of this HolidayModel.
        :rtype: int
        """
        return self._recurring_end_year

    @recurring_end_year.setter
    def recurring_end_year(self, recurring_end_year):
        """Sets the recurring_end_year of this HolidayModel.


        :param recurring_end_year: The recurring_end_year of this HolidayModel.
        :type recurring_end_year: int
        """
        if recurring_end_year is not None and recurring_end_year > 2075:
            raise ValueError("Invalid value for `recurring_end_year`, must be a value less than or equal to `2075`")
        if recurring_end_year is not None and recurring_end_year < 1900:
            raise ValueError("Invalid value for `recurring_end_year`, must be a value greater than or equal to `1900`")

        self._recurring_end_year = recurring_end_year
