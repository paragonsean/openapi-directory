# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TravelReimbursementSubModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guid: str=None, is_approved: bool=None, is_locked: bool=None, status: str=None):
        """TravelReimbursementSubModel - a model defined in OpenAPI

        :param guid: The guid of this TravelReimbursementSubModel.
        :param is_approved: The is_approved of this TravelReimbursementSubModel.
        :param is_locked: The is_locked of this TravelReimbursementSubModel.
        :param status: The status of this TravelReimbursementSubModel.
        """
        self.openapi_types = {
            'guid': str,
            'is_approved': bool,
            'is_locked': bool,
            'status': str
        }

        self.attribute_map = {
            'guid': 'guid',
            'is_approved': 'isApproved',
            'is_locked': 'isLocked',
            'status': 'status'
        }

        self._guid = guid
        self._is_approved = is_approved
        self._is_locked = is_locked
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TravelReimbursementSubModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TravelReimbursementSubModel of this TravelReimbursementSubModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self):
        """Gets the guid of this TravelReimbursementSubModel.


        :return: The guid of this TravelReimbursementSubModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this TravelReimbursementSubModel.


        :param guid: The guid of this TravelReimbursementSubModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def is_approved(self):
        """Gets the is_approved of this TravelReimbursementSubModel.


        :return: The is_approved of this TravelReimbursementSubModel.
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this TravelReimbursementSubModel.


        :param is_approved: The is_approved of this TravelReimbursementSubModel.
        :type is_approved: bool
        """

        self._is_approved = is_approved

    @property
    def is_locked(self):
        """Gets the is_locked of this TravelReimbursementSubModel.


        :return: The is_locked of this TravelReimbursementSubModel.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this TravelReimbursementSubModel.


        :param is_locked: The is_locked of this TravelReimbursementSubModel.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def status(self):
        """Gets the status of this TravelReimbursementSubModel.


        :return: The status of this TravelReimbursementSubModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TravelReimbursementSubModel.


        :param status: The status of this TravelReimbursementSubModel.
        :type status: str
        """

        self._status = status
