# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_input_model import MoneyInputModel
from openapi_server.models.simple_input_model import SimpleInputModel
from openapi_server.models.simple_input_required_model import SimpleInputRequiredModel
from openapi_server import util


class WorkHourInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, end_time: datetime=None, event_date: date=None, invoice: SimpleInputModel=None, invoice_quantity: float=None, invoice_row_comment: str=None, invoice_row_description: str=None, is_approved: bool=None, is_billable: bool=None, overtime: SimpleInputModel=None, phase: SimpleInputRequiredModel=None, planned_invoice_quantity: float=None, quantity: float=None, start_time: datetime=None, unit_price: MoneyInputModel=None, user: SimpleInputRequiredModel=None, work_type: SimpleInputRequiredModel=None):
        """WorkHourInputModel - a model defined in OpenAPI

        :param description: The description of this WorkHourInputModel.
        :param end_time: The end_time of this WorkHourInputModel.
        :param event_date: The event_date of this WorkHourInputModel.
        :param invoice: The invoice of this WorkHourInputModel.
        :param invoice_quantity: The invoice_quantity of this WorkHourInputModel.
        :param invoice_row_comment: The invoice_row_comment of this WorkHourInputModel.
        :param invoice_row_description: The invoice_row_description of this WorkHourInputModel.
        :param is_approved: The is_approved of this WorkHourInputModel.
        :param is_billable: The is_billable of this WorkHourInputModel.
        :param overtime: The overtime of this WorkHourInputModel.
        :param phase: The phase of this WorkHourInputModel.
        :param planned_invoice_quantity: The planned_invoice_quantity of this WorkHourInputModel.
        :param quantity: The quantity of this WorkHourInputModel.
        :param start_time: The start_time of this WorkHourInputModel.
        :param unit_price: The unit_price of this WorkHourInputModel.
        :param user: The user of this WorkHourInputModel.
        :param work_type: The work_type of this WorkHourInputModel.
        """
        self.openapi_types = {
            'description': str,
            'end_time': datetime,
            'event_date': date,
            'invoice': SimpleInputModel,
            'invoice_quantity': float,
            'invoice_row_comment': str,
            'invoice_row_description': str,
            'is_approved': bool,
            'is_billable': bool,
            'overtime': SimpleInputModel,
            'phase': SimpleInputRequiredModel,
            'planned_invoice_quantity': float,
            'quantity': float,
            'start_time': datetime,
            'unit_price': MoneyInputModel,
            'user': SimpleInputRequiredModel,
            'work_type': SimpleInputRequiredModel
        }

        self.attribute_map = {
            'description': 'description',
            'end_time': 'endTime',
            'event_date': 'eventDate',
            'invoice': 'invoice',
            'invoice_quantity': 'invoiceQuantity',
            'invoice_row_comment': 'invoiceRowComment',
            'invoice_row_description': 'invoiceRowDescription',
            'is_approved': 'isApproved',
            'is_billable': 'isBillable',
            'overtime': 'overtime',
            'phase': 'phase',
            'planned_invoice_quantity': 'plannedInvoiceQuantity',
            'quantity': 'quantity',
            'start_time': 'startTime',
            'unit_price': 'unitPrice',
            'user': 'user',
            'work_type': 'workType'
        }

        self._description = description
        self._end_time = end_time
        self._event_date = event_date
        self._invoice = invoice
        self._invoice_quantity = invoice_quantity
        self._invoice_row_comment = invoice_row_comment
        self._invoice_row_description = invoice_row_description
        self._is_approved = is_approved
        self._is_billable = is_billable
        self._overtime = overtime
        self._phase = phase
        self._planned_invoice_quantity = planned_invoice_quantity
        self._quantity = quantity
        self._start_time = start_time
        self._unit_price = unit_price
        self._user = user
        self._work_type = work_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkHourInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkHourInputModel of this WorkHourInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this WorkHourInputModel.


        :return: The description of this WorkHourInputModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkHourInputModel.


        :param description: The description of this WorkHourInputModel.
        :type description: str
        """

        self._description = description

    @property
    def end_time(self):
        """Gets the end_time of this WorkHourInputModel.


        :return: The end_time of this WorkHourInputModel.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkHourInputModel.


        :param end_time: The end_time of this WorkHourInputModel.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def event_date(self):
        """Gets the event_date of this WorkHourInputModel.


        :return: The event_date of this WorkHourInputModel.
        :rtype: date
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this WorkHourInputModel.


        :param event_date: The event_date of this WorkHourInputModel.
        :type event_date: date
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")

        self._event_date = event_date

    @property
    def invoice(self):
        """Gets the invoice of this WorkHourInputModel.


        :return: The invoice of this WorkHourInputModel.
        :rtype: SimpleInputModel
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this WorkHourInputModel.


        :param invoice: The invoice of this WorkHourInputModel.
        :type invoice: SimpleInputModel
        """

        self._invoice = invoice

    @property
    def invoice_quantity(self):
        """Gets the invoice_quantity of this WorkHourInputModel.


        :return: The invoice_quantity of this WorkHourInputModel.
        :rtype: float
        """
        return self._invoice_quantity

    @invoice_quantity.setter
    def invoice_quantity(self, invoice_quantity):
        """Sets the invoice_quantity of this WorkHourInputModel.


        :param invoice_quantity: The invoice_quantity of this WorkHourInputModel.
        :type invoice_quantity: float
        """

        self._invoice_quantity = invoice_quantity

    @property
    def invoice_row_comment(self):
        """Gets the invoice_row_comment of this WorkHourInputModel.


        :return: The invoice_row_comment of this WorkHourInputModel.
        :rtype: str
        """
        return self._invoice_row_comment

    @invoice_row_comment.setter
    def invoice_row_comment(self, invoice_row_comment):
        """Sets the invoice_row_comment of this WorkHourInputModel.


        :param invoice_row_comment: The invoice_row_comment of this WorkHourInputModel.
        :type invoice_row_comment: str
        """

        self._invoice_row_comment = invoice_row_comment

    @property
    def invoice_row_description(self):
        """Gets the invoice_row_description of this WorkHourInputModel.


        :return: The invoice_row_description of this WorkHourInputModel.
        :rtype: str
        """
        return self._invoice_row_description

    @invoice_row_description.setter
    def invoice_row_description(self, invoice_row_description):
        """Sets the invoice_row_description of this WorkHourInputModel.


        :param invoice_row_description: The invoice_row_description of this WorkHourInputModel.
        :type invoice_row_description: str
        """

        self._invoice_row_description = invoice_row_description

    @property
    def is_approved(self):
        """Gets the is_approved of this WorkHourInputModel.


        :return: The is_approved of this WorkHourInputModel.
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this WorkHourInputModel.


        :param is_approved: The is_approved of this WorkHourInputModel.
        :type is_approved: bool
        """

        self._is_approved = is_approved

    @property
    def is_billable(self):
        """Gets the is_billable of this WorkHourInputModel.


        :return: The is_billable of this WorkHourInputModel.
        :rtype: bool
        """
        return self._is_billable

    @is_billable.setter
    def is_billable(self, is_billable):
        """Sets the is_billable of this WorkHourInputModel.


        :param is_billable: The is_billable of this WorkHourInputModel.
        :type is_billable: bool
        """

        self._is_billable = is_billable

    @property
    def overtime(self):
        """Gets the overtime of this WorkHourInputModel.


        :return: The overtime of this WorkHourInputModel.
        :rtype: SimpleInputModel
        """
        return self._overtime

    @overtime.setter
    def overtime(self, overtime):
        """Sets the overtime of this WorkHourInputModel.


        :param overtime: The overtime of this WorkHourInputModel.
        :type overtime: SimpleInputModel
        """

        self._overtime = overtime

    @property
    def phase(self):
        """Gets the phase of this WorkHourInputModel.


        :return: The phase of this WorkHourInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this WorkHourInputModel.


        :param phase: The phase of this WorkHourInputModel.
        :type phase: SimpleInputRequiredModel
        """
        if phase is None:
            raise ValueError("Invalid value for `phase`, must not be `None`")

        self._phase = phase

    @property
    def planned_invoice_quantity(self):
        """Gets the planned_invoice_quantity of this WorkHourInputModel.


        :return: The planned_invoice_quantity of this WorkHourInputModel.
        :rtype: float
        """
        return self._planned_invoice_quantity

    @planned_invoice_quantity.setter
    def planned_invoice_quantity(self, planned_invoice_quantity):
        """Sets the planned_invoice_quantity of this WorkHourInputModel.


        :param planned_invoice_quantity: The planned_invoice_quantity of this WorkHourInputModel.
        :type planned_invoice_quantity: float
        """

        self._planned_invoice_quantity = planned_invoice_quantity

    @property
    def quantity(self):
        """Gets the quantity of this WorkHourInputModel.


        :return: The quantity of this WorkHourInputModel.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this WorkHourInputModel.


        :param quantity: The quantity of this WorkHourInputModel.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def start_time(self):
        """Gets the start_time of this WorkHourInputModel.


        :return: The start_time of this WorkHourInputModel.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkHourInputModel.


        :param start_time: The start_time of this WorkHourInputModel.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def unit_price(self):
        """Gets the unit_price of this WorkHourInputModel.


        :return: The unit_price of this WorkHourInputModel.
        :rtype: MoneyInputModel
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this WorkHourInputModel.


        :param unit_price: The unit_price of this WorkHourInputModel.
        :type unit_price: MoneyInputModel
        """

        self._unit_price = unit_price

    @property
    def user(self):
        """Gets the user of this WorkHourInputModel.


        :return: The user of this WorkHourInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WorkHourInputModel.


        :param user: The user of this WorkHourInputModel.
        :type user: SimpleInputRequiredModel
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def work_type(self):
        """Gets the work_type of this WorkHourInputModel.


        :return: The work_type of this WorkHourInputModel.
        :rtype: SimpleInputRequiredModel
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this WorkHourInputModel.


        :param work_type: The work_type of this WorkHourInputModel.
        :type work_type: SimpleInputRequiredModel
        """
        if work_type is None:
            raise ValueError("Invalid value for `work_type`, must not be `None`")

        self._work_type = work_type
