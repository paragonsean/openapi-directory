# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.day_ordinal import DayOrdinal
from openapi_server.models.day_ordinal_option import DayOrdinalOption
from openapi_server.models.months import Months
from openapi_server import util


class YearlyModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_month: int=None, day_ordinal: DayOrdinal=None, day_ordinal_option: DayOrdinalOption=None, month: Months=None):
        """YearlyModel - a model defined in OpenAPI

        :param day_of_month: The day_of_month of this YearlyModel.
        :param day_ordinal: The day_ordinal of this YearlyModel.
        :param day_ordinal_option: The day_ordinal_option of this YearlyModel.
        :param month: The month of this YearlyModel.
        """
        self.openapi_types = {
            'day_of_month': int,
            'day_ordinal': DayOrdinal,
            'day_ordinal_option': DayOrdinalOption,
            'month': Months
        }

        self.attribute_map = {
            'day_of_month': 'dayOfMonth',
            'day_ordinal': 'dayOrdinal',
            'day_ordinal_option': 'dayOrdinalOption',
            'month': 'month'
        }

        self._day_of_month = day_of_month
        self._day_ordinal = day_ordinal
        self._day_ordinal_option = day_ordinal_option
        self._month = month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YearlyModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YearlyModel of this YearlyModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_month(self):
        """Gets the day_of_month of this YearlyModel.


        :return: The day_of_month of this YearlyModel.
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this YearlyModel.


        :param day_of_month: The day_of_month of this YearlyModel.
        :type day_of_month: int
        """

        self._day_of_month = day_of_month

    @property
    def day_ordinal(self):
        """Gets the day_ordinal of this YearlyModel.


        :return: The day_ordinal of this YearlyModel.
        :rtype: DayOrdinal
        """
        return self._day_ordinal

    @day_ordinal.setter
    def day_ordinal(self, day_ordinal):
        """Sets the day_ordinal of this YearlyModel.


        :param day_ordinal: The day_ordinal of this YearlyModel.
        :type day_ordinal: DayOrdinal
        """

        self._day_ordinal = day_ordinal

    @property
    def day_ordinal_option(self):
        """Gets the day_ordinal_option of this YearlyModel.


        :return: The day_ordinal_option of this YearlyModel.
        :rtype: DayOrdinalOption
        """
        return self._day_ordinal_option

    @day_ordinal_option.setter
    def day_ordinal_option(self, day_ordinal_option):
        """Sets the day_ordinal_option of this YearlyModel.


        :param day_ordinal_option: The day_ordinal_option of this YearlyModel.
        :type day_ordinal_option: DayOrdinalOption
        """

        self._day_ordinal_option = day_ordinal_option

    @property
    def month(self):
        """Gets the month of this YearlyModel.


        :return: The month of this YearlyModel.
        :rtype: Months
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this YearlyModel.


        :param month: The month of this YearlyModel.
        :type month: Months
        """

        self._month = month
