# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_language import CountryLanguage
from openapi_server.models.country_regions_status import CountryRegionsStatus
from openapi_server.models.country_timezone import CountryTimezone
from openapi_server.models.currency_base_model import CurrencyBaseModel
from openapi_server import util


class CountryModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code2: str=None, code3: str=None, company_register_url: str=None, currency: CurrencyBaseModel=None, default_culture: str=None, default_language: CountryLanguage=None, english_name: str=None, guid: str=None, has_regions: CountryRegionsStatus=None, is_in_eu: bool=None, is_registration_country: bool=None, name: str=None, timezone: CountryTimezone=None):
        """CountryModel - a model defined in OpenAPI

        :param code2: The code2 of this CountryModel.
        :param code3: The code3 of this CountryModel.
        :param company_register_url: The company_register_url of this CountryModel.
        :param currency: The currency of this CountryModel.
        :param default_culture: The default_culture of this CountryModel.
        :param default_language: The default_language of this CountryModel.
        :param english_name: The english_name of this CountryModel.
        :param guid: The guid of this CountryModel.
        :param has_regions: The has_regions of this CountryModel.
        :param is_in_eu: The is_in_eu of this CountryModel.
        :param is_registration_country: The is_registration_country of this CountryModel.
        :param name: The name of this CountryModel.
        :param timezone: The timezone of this CountryModel.
        """
        self.openapi_types = {
            'code2': str,
            'code3': str,
            'company_register_url': str,
            'currency': CurrencyBaseModel,
            'default_culture': str,
            'default_language': CountryLanguage,
            'english_name': str,
            'guid': str,
            'has_regions': CountryRegionsStatus,
            'is_in_eu': bool,
            'is_registration_country': bool,
            'name': str,
            'timezone': CountryTimezone
        }

        self.attribute_map = {
            'code2': 'code2',
            'code3': 'code3',
            'company_register_url': 'companyRegisterUrl',
            'currency': 'currency',
            'default_culture': 'defaultCulture',
            'default_language': 'defaultLanguage',
            'english_name': 'englishName',
            'guid': 'guid',
            'has_regions': 'hasRegions',
            'is_in_eu': 'isInEU',
            'is_registration_country': 'isRegistrationCountry',
            'name': 'name',
            'timezone': 'timezone'
        }

        self._code2 = code2
        self._code3 = code3
        self._company_register_url = company_register_url
        self._currency = currency
        self._default_culture = default_culture
        self._default_language = default_language
        self._english_name = english_name
        self._guid = guid
        self._has_regions = has_regions
        self._is_in_eu = is_in_eu
        self._is_registration_country = is_registration_country
        self._name = name
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountryModel of this CountryModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code2(self):
        """Gets the code2 of this CountryModel.


        :return: The code2 of this CountryModel.
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this CountryModel.


        :param code2: The code2 of this CountryModel.
        :type code2: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this CountryModel.


        :return: The code3 of this CountryModel.
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this CountryModel.


        :param code3: The code3 of this CountryModel.
        :type code3: str
        """

        self._code3 = code3

    @property
    def company_register_url(self):
        """Gets the company_register_url of this CountryModel.


        :return: The company_register_url of this CountryModel.
        :rtype: str
        """
        return self._company_register_url

    @company_register_url.setter
    def company_register_url(self, company_register_url):
        """Sets the company_register_url of this CountryModel.


        :param company_register_url: The company_register_url of this CountryModel.
        :type company_register_url: str
        """

        self._company_register_url = company_register_url

    @property
    def currency(self):
        """Gets the currency of this CountryModel.


        :return: The currency of this CountryModel.
        :rtype: CurrencyBaseModel
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CountryModel.


        :param currency: The currency of this CountryModel.
        :type currency: CurrencyBaseModel
        """

        self._currency = currency

    @property
    def default_culture(self):
        """Gets the default_culture of this CountryModel.


        :return: The default_culture of this CountryModel.
        :rtype: str
        """
        return self._default_culture

    @default_culture.setter
    def default_culture(self, default_culture):
        """Sets the default_culture of this CountryModel.


        :param default_culture: The default_culture of this CountryModel.
        :type default_culture: str
        """

        self._default_culture = default_culture

    @property
    def default_language(self):
        """Gets the default_language of this CountryModel.


        :return: The default_language of this CountryModel.
        :rtype: CountryLanguage
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this CountryModel.


        :param default_language: The default_language of this CountryModel.
        :type default_language: CountryLanguage
        """

        self._default_language = default_language

    @property
    def english_name(self):
        """Gets the english_name of this CountryModel.


        :return: The english_name of this CountryModel.
        :rtype: str
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this CountryModel.


        :param english_name: The english_name of this CountryModel.
        :type english_name: str
        """

        self._english_name = english_name

    @property
    def guid(self):
        """Gets the guid of this CountryModel.


        :return: The guid of this CountryModel.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CountryModel.


        :param guid: The guid of this CountryModel.
        :type guid: str
        """

        self._guid = guid

    @property
    def has_regions(self):
        """Gets the has_regions of this CountryModel.


        :return: The has_regions of this CountryModel.
        :rtype: CountryRegionsStatus
        """
        return self._has_regions

    @has_regions.setter
    def has_regions(self, has_regions):
        """Sets the has_regions of this CountryModel.


        :param has_regions: The has_regions of this CountryModel.
        :type has_regions: CountryRegionsStatus
        """

        self._has_regions = has_regions

    @property
    def is_in_eu(self):
        """Gets the is_in_eu of this CountryModel.


        :return: The is_in_eu of this CountryModel.
        :rtype: bool
        """
        return self._is_in_eu

    @is_in_eu.setter
    def is_in_eu(self, is_in_eu):
        """Sets the is_in_eu of this CountryModel.


        :param is_in_eu: The is_in_eu of this CountryModel.
        :type is_in_eu: bool
        """

        self._is_in_eu = is_in_eu

    @property
    def is_registration_country(self):
        """Gets the is_registration_country of this CountryModel.


        :return: The is_registration_country of this CountryModel.
        :rtype: bool
        """
        return self._is_registration_country

    @is_registration_country.setter
    def is_registration_country(self, is_registration_country):
        """Sets the is_registration_country of this CountryModel.


        :param is_registration_country: The is_registration_country of this CountryModel.
        :type is_registration_country: bool
        """

        self._is_registration_country = is_registration_country

    @property
    def name(self):
        """Gets the name of this CountryModel.


        :return: The name of this CountryModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountryModel.


        :param name: The name of this CountryModel.
        :type name: str
        """

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this CountryModel.


        :return: The timezone of this CountryModel.
        :rtype: CountryTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CountryModel.


        :param timezone: The timezone of this CountryModel.
        :type timezone: CountryTimezone
        """

        self._timezone = timezone
