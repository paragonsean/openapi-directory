/**
 * Betriebsstellen
 * This REST-API enables you to query station and stop infos
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStation.h
 *
 * 
 */

#ifndef OAIStation_H
#define OAIStation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStation : public OAIObject {
public:
    OAIStation();
    OAIStation(QString json);
    ~OAIStation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getRb() const;
    void setRb(const qint32 &rb);
    bool is_rb_Set() const;
    bool is_rb_Valid() const;

    QString getUic() const;
    void setUic(const QString &uic);
    bool is_uic_Set() const;
    bool is_uic_Valid() const;

    QString getAbbrev() const;
    void setAbbrev(const QString &abbrev);
    bool is_abbrev_Set() const;
    bool is_abbrev_Valid() const;

    bool isBorderStation() const;
    void setBorderStation(const bool &border_station);
    bool is_border_station_Set() const;
    bool is_border_station_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLocationCode() const;
    void setLocationCode(const QString &location_code);
    bool is_location_code_Set() const;
    bool is_location_code_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRShort() const;
    void setRShort(const QString &r_short);
    bool is_r_short_Set() const;
    bool is_r_short_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool isTimeTableRelevant() const;
    void setTimeTableRelevant(const bool &time_table_relevant);
    bool is_time_table_relevant_Set() const;
    bool is_time_table_relevant_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getValidFrom() const;
    void setValidFrom(const QString &valid_from);
    bool is_valid_from_Set() const;
    bool is_valid_from_Valid() const;

    QString getValidTill() const;
    void setValidTill(const QString &valid_till);
    bool is_valid_till_Set() const;
    bool is_valid_till_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_rb;
    bool m_rb_isSet;
    bool m_rb_isValid;

    QString m_uic;
    bool m_uic_isSet;
    bool m_uic_isValid;

    QString m_abbrev;
    bool m_abbrev_isSet;
    bool m_abbrev_isValid;

    bool m_border_station;
    bool m_border_station_isSet;
    bool m_border_station_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_location_code;
    bool m_location_code_isSet;
    bool m_location_code_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_r_short;
    bool m_r_short_isSet;
    bool m_r_short_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_time_table_relevant;
    bool m_time_table_relevant_isSet;
    bool m_time_table_relevant_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_valid_from;
    bool m_valid_from_isSet;
    bool m_valid_from_isValid;

    QString m_valid_till;
    bool m_valid_till_isSet;
    bool m_valid_till_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStation)

#endif // OAIStation_H
