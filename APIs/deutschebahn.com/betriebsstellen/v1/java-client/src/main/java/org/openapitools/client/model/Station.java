/*
 * Betriebsstellen
 * This REST-API enables you to query station and stop infos
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Station
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:25.971263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Station {
  public static final String SERIALIZED_NAME_R_B = "RB";
  @SerializedName(SERIALIZED_NAME_R_B)
  private Integer RB;

  public static final String SERIALIZED_NAME_U_I_C = "UIC";
  @SerializedName(SERIALIZED_NAME_U_I_C)
  private String UIC;

  public static final String SERIALIZED_NAME_ABBREV = "abbrev";
  @SerializedName(SERIALIZED_NAME_ABBREV)
  private String abbrev;

  public static final String SERIALIZED_NAME_BORDER_STATION = "borderStation";
  @SerializedName(SERIALIZED_NAME_BORDER_STATION)
  private Boolean borderStation;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHORT = "short";
  @SerializedName(SERIALIZED_NAME_SHORT)
  private String _short;

  /**
   * State of operation
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_USE("in use"),
    
    OUT_OF_SERVICE("out of service"),
    
    FORMERLY("formerly"),
    
    PLANNED("planned"),
    
    STUDY("study");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIME_TABLE_RELEVANT = "timeTableRelevant";
  @SerializedName(SERIALIZED_NAME_TIME_TABLE_RELEVANT)
  private Boolean timeTableRelevant;

  /**
   * Type of station or halt
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ABZW("Abzw"),
    
    ANST("Anst"),
    
    AWANST("Awanst"),
    
    BF("Bf");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private String validFrom;

  public static final String SERIALIZED_NAME_VALID_TILL = "validTill";
  @SerializedName(SERIALIZED_NAME_VALID_TILL)
  private String validTill;

  public Station() {
  }

  public Station RB(Integer RB) {
    this.RB = RB;
    return this;
  }

  /**
   * Regional code
   * @return RB
   */
  @javax.annotation.Nullable
  public Integer getRB() {
    return RB;
  }

  public void setRB(Integer RB) {
    this.RB = RB;
  }


  public Station UIC(String UIC) {
    this.UIC = UIC;
    return this;
  }

  /**
   * UIC RICS code
   * @return UIC
   */
  @javax.annotation.Nullable
  public String getUIC() {
    return UIC;
  }

  public void setUIC(String UIC) {
    this.UIC = UIC;
  }


  public Station abbrev(String abbrev) {
    this.abbrev = abbrev;
    return this;
  }

  /**
   * Abbrevation name of station or halt
   * @return abbrev
   */
  @javax.annotation.Nullable
  public String getAbbrev() {
    return abbrev;
  }

  public void setAbbrev(String abbrev) {
    this.abbrev = abbrev;
  }


  public Station borderStation(Boolean borderStation) {
    this.borderStation = borderStation;
    return this;
  }

  /**
   * Station is at a country border
   * @return borderStation
   */
  @javax.annotation.Nullable
  public Boolean getBorderStation() {
    return borderStation;
  }

  public void setBorderStation(Boolean borderStation) {
    this.borderStation = borderStation;
  }


  public Station id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Identifying number
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Station locationCode(String locationCode) {
    this.locationCode = locationCode;
    return this;
  }

  /**
   * Primary location code
   * @return locationCode
   */
  @javax.annotation.Nullable
  public String getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public Station name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Long name of station or halt
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Station _short(String _short) {
    this._short = _short;
    return this;
  }

  /**
   * Short name of station or halt
   * @return _short
   */
  @javax.annotation.Nullable
  public String getShort() {
    return _short;
  }

  public void setShort(String _short) {
    this._short = _short;
  }


  public Station status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * State of operation
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Station timeTableRelevant(Boolean timeTableRelevant) {
    this.timeTableRelevant = timeTableRelevant;
    return this;
  }

  /**
   * Relevant for time table
   * @return timeTableRelevant
   */
  @javax.annotation.Nullable
  public Boolean getTimeTableRelevant() {
    return timeTableRelevant;
  }

  public void setTimeTableRelevant(Boolean timeTableRelevant) {
    this.timeTableRelevant = timeTableRelevant;
  }


  public Station type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of station or halt
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Station validFrom(String validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Start date for validity
   * @return validFrom
   */
  @javax.annotation.Nullable
  public String getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(String validFrom) {
    this.validFrom = validFrom;
  }


  public Station validTill(String validTill) {
    this.validTill = validTill;
    return this;
  }

  /**
   * End date for validity or null if still valid
   * @return validTill
   */
  @javax.annotation.Nullable
  public String getValidTill() {
    return validTill;
  }

  public void setValidTill(String validTill) {
    this.validTill = validTill;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Station station = (Station) o;
    return Objects.equals(this.RB, station.RB) &&
        Objects.equals(this.UIC, station.UIC) &&
        Objects.equals(this.abbrev, station.abbrev) &&
        Objects.equals(this.borderStation, station.borderStation) &&
        Objects.equals(this.id, station.id) &&
        Objects.equals(this.locationCode, station.locationCode) &&
        Objects.equals(this.name, station.name) &&
        Objects.equals(this._short, station._short) &&
        Objects.equals(this.status, station.status) &&
        Objects.equals(this.timeTableRelevant, station.timeTableRelevant) &&
        Objects.equals(this.type, station.type) &&
        Objects.equals(this.validFrom, station.validFrom) &&
        Objects.equals(this.validTill, station.validTill);
  }

  @Override
  public int hashCode() {
    return Objects.hash(RB, UIC, abbrev, borderStation, id, locationCode, name, _short, status, timeTableRelevant, type, validFrom, validTill);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Station {\n");
    sb.append("    RB: ").append(toIndentedString(RB)).append("\n");
    sb.append("    UIC: ").append(toIndentedString(UIC)).append("\n");
    sb.append("    abbrev: ").append(toIndentedString(abbrev)).append("\n");
    sb.append("    borderStation: ").append(toIndentedString(borderStation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _short: ").append(toIndentedString(_short)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeTableRelevant: ").append(toIndentedString(timeTableRelevant)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTill: ").append(toIndentedString(validTill)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RB");
    openapiFields.add("UIC");
    openapiFields.add("abbrev");
    openapiFields.add("borderStation");
    openapiFields.add("id");
    openapiFields.add("locationCode");
    openapiFields.add("name");
    openapiFields.add("short");
    openapiFields.add("status");
    openapiFields.add("timeTableRelevant");
    openapiFields.add("type");
    openapiFields.add("validFrom");
    openapiFields.add("validTill");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Station
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Station.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Station is not found in the empty JSON string", Station.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Station.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Station` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("UIC") != null && !jsonObj.get("UIC").isJsonNull()) && !jsonObj.get("UIC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UIC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UIC").toString()));
      }
      if ((jsonObj.get("abbrev") != null && !jsonObj.get("abbrev").isJsonNull()) && !jsonObj.get("abbrev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abbrev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abbrev").toString()));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("short") != null && !jsonObj.get("short").isJsonNull()) && !jsonObj.get("short").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("validFrom") != null && !jsonObj.get("validFrom").isJsonNull()) && !jsonObj.get("validFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validFrom").toString()));
      }
      if ((jsonObj.get("validTill") != null && !jsonObj.get("validTill").isJsonNull()) && !jsonObj.get("validTill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validTill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validTill").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Station.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Station' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Station> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Station.class));

       return (TypeAdapter<T>) new TypeAdapter<Station>() {
           @Override
           public void write(JsonWriter out, Station value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Station read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Station given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Station
   * @throws IOException if the JSON string is invalid with respect to Station
   */
  public static Station fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Station.class);
  }

  /**
   * Convert an instance of Station to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

