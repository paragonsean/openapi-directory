/**
 * Betriebsstellen
 * This REST-API enables you to query station and stop infos
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Station model module.
 * @module model/Station
 * @version v1
 */
class Station {
    /**
     * Constructs a new <code>Station</code>.
     * @alias module:model/Station
     */
    constructor() { 
        
        Station.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Station</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Station} obj Optional instance to populate.
     * @return {module:model/Station} The populated <code>Station</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Station();

            if (data.hasOwnProperty('RB')) {
                obj['RB'] = ApiClient.convertToType(data['RB'], 'Number');
            }
            if (data.hasOwnProperty('UIC')) {
                obj['UIC'] = ApiClient.convertToType(data['UIC'], 'String');
            }
            if (data.hasOwnProperty('abbrev')) {
                obj['abbrev'] = ApiClient.convertToType(data['abbrev'], 'String');
            }
            if (data.hasOwnProperty('borderStation')) {
                obj['borderStation'] = ApiClient.convertToType(data['borderStation'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('locationCode')) {
                obj['locationCode'] = ApiClient.convertToType(data['locationCode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('short')) {
                obj['short'] = ApiClient.convertToType(data['short'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeTableRelevant')) {
                obj['timeTableRelevant'] = ApiClient.convertToType(data['timeTableRelevant'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validFrom')) {
                obj['validFrom'] = ApiClient.convertToType(data['validFrom'], 'String');
            }
            if (data.hasOwnProperty('validTill')) {
                obj['validTill'] = ApiClient.convertToType(data['validTill'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Station</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Station</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['UIC'] && !(typeof data['UIC'] === 'string' || data['UIC'] instanceof String)) {
            throw new Error("Expected the field `UIC` to be a primitive type in the JSON string but got " + data['UIC']);
        }
        // ensure the json data is a string
        if (data['abbrev'] && !(typeof data['abbrev'] === 'string' || data['abbrev'] instanceof String)) {
            throw new Error("Expected the field `abbrev` to be a primitive type in the JSON string but got " + data['abbrev']);
        }
        // ensure the json data is a string
        if (data['locationCode'] && !(typeof data['locationCode'] === 'string' || data['locationCode'] instanceof String)) {
            throw new Error("Expected the field `locationCode` to be a primitive type in the JSON string but got " + data['locationCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['short'] && !(typeof data['short'] === 'string' || data['short'] instanceof String)) {
            throw new Error("Expected the field `short` to be a primitive type in the JSON string but got " + data['short']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['validFrom'] && !(typeof data['validFrom'] === 'string' || data['validFrom'] instanceof String)) {
            throw new Error("Expected the field `validFrom` to be a primitive type in the JSON string but got " + data['validFrom']);
        }
        // ensure the json data is a string
        if (data['validTill'] && !(typeof data['validTill'] === 'string' || data['validTill'] instanceof String)) {
            throw new Error("Expected the field `validTill` to be a primitive type in the JSON string but got " + data['validTill']);
        }

        return true;
    }


}



/**
 * Regional code
 * @member {Number} RB
 */
Station.prototype['RB'] = undefined;

/**
 * UIC RICS code
 * @member {String} UIC
 */
Station.prototype['UIC'] = undefined;

/**
 * Abbrevation name of station or halt
 * @member {String} abbrev
 */
Station.prototype['abbrev'] = undefined;

/**
 * Station is at a country border
 * @member {Boolean} borderStation
 */
Station.prototype['borderStation'] = undefined;

/**
 * Identifying number
 * @member {Number} id
 */
Station.prototype['id'] = undefined;

/**
 * Primary location code
 * @member {String} locationCode
 */
Station.prototype['locationCode'] = undefined;

/**
 * Long name of station or halt
 * @member {String} name
 */
Station.prototype['name'] = undefined;

/**
 * Short name of station or halt
 * @member {String} short
 */
Station.prototype['short'] = undefined;

/**
 * State of operation
 * @member {module:model/Station.StatusEnum} status
 */
Station.prototype['status'] = undefined;

/**
 * Relevant for time table
 * @member {Boolean} timeTableRelevant
 */
Station.prototype['timeTableRelevant'] = undefined;

/**
 * Type of station or halt
 * @member {module:model/Station.TypeEnum} type
 */
Station.prototype['type'] = undefined;

/**
 * Start date for validity
 * @member {String} validFrom
 */
Station.prototype['validFrom'] = undefined;

/**
 * End date for validity or null if still valid
 * @member {String} validTill
 */
Station.prototype['validTill'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Station['StatusEnum'] = {

    /**
     * value: "in use"
     * @const
     */
    "in use": "in use",

    /**
     * value: "out of service"
     * @const
     */
    "out of service": "out of service",

    /**
     * value: "formerly"
     * @const
     */
    "formerly": "formerly",

    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",

    /**
     * value: "study"
     * @const
     */
    "study": "study"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Station['TypeEnum'] = {

    /**
     * value: "Abzw"
     * @const
     */
    "Abzw": "Abzw",

    /**
     * value: "Anst"
     * @const
     */
    "Anst": "Anst",

    /**
     * value: "Awanst"
     * @const
     */
    "Awanst": "Awanst",

    /**
     * value: "Bf"
     * @const
     */
    "Bf": "Bf"
};



export default Station;

