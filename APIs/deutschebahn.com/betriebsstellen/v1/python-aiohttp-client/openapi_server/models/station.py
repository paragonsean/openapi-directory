# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Station(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rb: int=None, uic: str=None, abbrev: str=None, border_station: bool=None, id: int=None, location_code: str=None, name: str=None, short: str=None, status: str=None, time_table_relevant: bool=None, type: str=None, valid_from: str=None, valid_till: str=None):
        """Station - a model defined in OpenAPI

        :param rb: The rb of this Station.
        :param uic: The uic of this Station.
        :param abbrev: The abbrev of this Station.
        :param border_station: The border_station of this Station.
        :param id: The id of this Station.
        :param location_code: The location_code of this Station.
        :param name: The name of this Station.
        :param short: The short of this Station.
        :param status: The status of this Station.
        :param time_table_relevant: The time_table_relevant of this Station.
        :param type: The type of this Station.
        :param valid_from: The valid_from of this Station.
        :param valid_till: The valid_till of this Station.
        """
        self.openapi_types = {
            'rb': int,
            'uic': str,
            'abbrev': str,
            'border_station': bool,
            'id': int,
            'location_code': str,
            'name': str,
            'short': str,
            'status': str,
            'time_table_relevant': bool,
            'type': str,
            'valid_from': str,
            'valid_till': str
        }

        self.attribute_map = {
            'rb': 'RB',
            'uic': 'UIC',
            'abbrev': 'abbrev',
            'border_station': 'borderStation',
            'id': 'id',
            'location_code': 'locationCode',
            'name': 'name',
            'short': 'short',
            'status': 'status',
            'time_table_relevant': 'timeTableRelevant',
            'type': 'type',
            'valid_from': 'validFrom',
            'valid_till': 'validTill'
        }

        self._rb = rb
        self._uic = uic
        self._abbrev = abbrev
        self._border_station = border_station
        self._id = id
        self._location_code = location_code
        self._name = name
        self._short = short
        self._status = status
        self._time_table_relevant = time_table_relevant
        self._type = type
        self._valid_from = valid_from
        self._valid_till = valid_till

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Station':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Station of this Station.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rb(self):
        """Gets the rb of this Station.

        Regional code

        :return: The rb of this Station.
        :rtype: int
        """
        return self._rb

    @rb.setter
    def rb(self, rb):
        """Sets the rb of this Station.

        Regional code

        :param rb: The rb of this Station.
        :type rb: int
        """

        self._rb = rb

    @property
    def uic(self):
        """Gets the uic of this Station.

        UIC RICS code

        :return: The uic of this Station.
        :rtype: str
        """
        return self._uic

    @uic.setter
    def uic(self, uic):
        """Sets the uic of this Station.

        UIC RICS code

        :param uic: The uic of this Station.
        :type uic: str
        """

        self._uic = uic

    @property
    def abbrev(self):
        """Gets the abbrev of this Station.

        Abbrevation name of station or halt

        :return: The abbrev of this Station.
        :rtype: str
        """
        return self._abbrev

    @abbrev.setter
    def abbrev(self, abbrev):
        """Sets the abbrev of this Station.

        Abbrevation name of station or halt

        :param abbrev: The abbrev of this Station.
        :type abbrev: str
        """

        self._abbrev = abbrev

    @property
    def border_station(self):
        """Gets the border_station of this Station.

        Station is at a country border

        :return: The border_station of this Station.
        :rtype: bool
        """
        return self._border_station

    @border_station.setter
    def border_station(self, border_station):
        """Sets the border_station of this Station.

        Station is at a country border

        :param border_station: The border_station of this Station.
        :type border_station: bool
        """

        self._border_station = border_station

    @property
    def id(self):
        """Gets the id of this Station.

        Identifying number

        :return: The id of this Station.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Station.

        Identifying number

        :param id: The id of this Station.
        :type id: int
        """

        self._id = id

    @property
    def location_code(self):
        """Gets the location_code of this Station.

        Primary location code

        :return: The location_code of this Station.
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this Station.

        Primary location code

        :param location_code: The location_code of this Station.
        :type location_code: str
        """

        self._location_code = location_code

    @property
    def name(self):
        """Gets the name of this Station.

        Long name of station or halt

        :return: The name of this Station.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Station.

        Long name of station or halt

        :param name: The name of this Station.
        :type name: str
        """

        self._name = name

    @property
    def short(self):
        """Gets the short of this Station.

        Short name of station or halt

        :return: The short of this Station.
        :rtype: str
        """
        return self._short

    @short.setter
    def short(self, short):
        """Sets the short of this Station.

        Short name of station or halt

        :param short: The short of this Station.
        :type short: str
        """

        self._short = short

    @property
    def status(self):
        """Gets the status of this Station.

        State of operation

        :return: The status of this Station.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Station.

        State of operation

        :param status: The status of this Station.
        :type status: str
        """
        allowed_values = ["in use", "out of service", "formerly", "planned", "study"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_table_relevant(self):
        """Gets the time_table_relevant of this Station.

        Relevant for time table

        :return: The time_table_relevant of this Station.
        :rtype: bool
        """
        return self._time_table_relevant

    @time_table_relevant.setter
    def time_table_relevant(self, time_table_relevant):
        """Sets the time_table_relevant of this Station.

        Relevant for time table

        :param time_table_relevant: The time_table_relevant of this Station.
        :type time_table_relevant: bool
        """

        self._time_table_relevant = time_table_relevant

    @property
    def type(self):
        """Gets the type of this Station.

        Type of station or halt

        :return: The type of this Station.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Station.

        Type of station or halt

        :param type: The type of this Station.
        :type type: str
        """
        allowed_values = ["Abzw", "Anst", "Awanst", "Bf"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def valid_from(self):
        """Gets the valid_from of this Station.

        Start date for validity

        :return: The valid_from of this Station.
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Station.

        Start date for validity

        :param valid_from: The valid_from of this Station.
        :type valid_from: str
        """

        self._valid_from = valid_from

    @property
    def valid_till(self):
        """Gets the valid_till of this Station.

        End date for validity or null if still valid

        :return: The valid_till of this Station.
        :rtype: str
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this Station.

        End date for validity or null if still valid

        :param valid_till: The valid_till of this Station.
        :type valid_till: str
        """

        self._valid_till = valid_till
