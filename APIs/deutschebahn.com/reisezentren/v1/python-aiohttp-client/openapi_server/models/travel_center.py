# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.travel_center_opening_times import TravelCenterOpeningTimes
from openapi_server import util


class TravelCenter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, id: int=None, lat: float=None, lon: float=None, name: str=None, opening_times: TravelCenterOpeningTimes=None, post_code: str=None, type: str=None):
        """TravelCenter - a model defined in OpenAPI

        :param address: The address of this TravelCenter.
        :param city: The city of this TravelCenter.
        :param id: The id of this TravelCenter.
        :param lat: The lat of this TravelCenter.
        :param lon: The lon of this TravelCenter.
        :param name: The name of this TravelCenter.
        :param opening_times: The opening_times of this TravelCenter.
        :param post_code: The post_code of this TravelCenter.
        :param type: The type of this TravelCenter.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'id': int,
            'lat': float,
            'lon': float,
            'name': str,
            'opening_times': TravelCenterOpeningTimes,
            'post_code': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'id': 'id',
            'lat': 'lat',
            'lon': 'lon',
            'name': 'name',
            'opening_times': 'openingTimes',
            'post_code': 'postCode',
            'type': 'type'
        }

        self._address = address
        self._city = city
        self._id = id
        self._lat = lat
        self._lon = lon
        self._name = name
        self._opening_times = opening_times
        self._post_code = post_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TravelCenter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TravelCenter of this TravelCenter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this TravelCenter.

        Street address of travel center

        :return: The address of this TravelCenter.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TravelCenter.

        Street address of travel center

        :param address: The address of this TravelCenter.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this TravelCenter.

        City of travel center

        :return: The city of this TravelCenter.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TravelCenter.

        City of travel center

        :param city: The city of this TravelCenter.
        :type city: str
        """

        self._city = city

    @property
    def id(self):
        """Gets the id of this TravelCenter.

        Identifying number

        :return: The id of this TravelCenter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TravelCenter.

        Identifying number

        :param id: The id of this TravelCenter.
        :type id: int
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this TravelCenter.

        Latitude of travel center location

        :return: The lat of this TravelCenter.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this TravelCenter.

        Latitude of travel center location

        :param lat: The lat of this TravelCenter.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this TravelCenter.

        Longitude of travel center location

        :return: The lon of this TravelCenter.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this TravelCenter.

        Longitude of travel center location

        :param lon: The lon of this TravelCenter.
        :type lon: float
        """

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this TravelCenter.

        Name of travel center

        :return: The name of this TravelCenter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TravelCenter.

        Name of travel center

        :param name: The name of this TravelCenter.
        :type name: str
        """

        self._name = name

    @property
    def opening_times(self):
        """Gets the opening_times of this TravelCenter.


        :return: The opening_times of this TravelCenter.
        :rtype: TravelCenterOpeningTimes
        """
        return self._opening_times

    @opening_times.setter
    def opening_times(self, opening_times):
        """Sets the opening_times of this TravelCenter.


        :param opening_times: The opening_times of this TravelCenter.
        :type opening_times: TravelCenterOpeningTimes
        """

        self._opening_times = opening_times

    @property
    def post_code(self):
        """Gets the post_code of this TravelCenter.

        Post code of travel center

        :return: The post_code of this TravelCenter.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this TravelCenter.

        Post code of travel center

        :param post_code: The post_code of this TravelCenter.
        :type post_code: str
        """

        self._post_code = post_code

    @property
    def type(self):
        """Gets the type of this TravelCenter.

        Type of travel center

        :return: The type of this TravelCenter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TravelCenter.

        Type of travel center

        :param type: The type of this TravelCenter.
        :type type: str
        """
        allowed_values = ["Reisezentrum", "Mobility Center"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
