/**
 * Reisezentren-API
 * This REST-API enables you to query information about travel centers in Germany.
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITravelCenter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITravelCenter::OAITravelCenter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITravelCenter::OAITravelCenter() {
    this->initializeModel();
}

OAITravelCenter::~OAITravelCenter() {}

void OAITravelCenter::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opening_times_isSet = false;
    m_opening_times_isValid = false;

    m_post_code_isSet = false;
    m_post_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITravelCenter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITravelCenter::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_opening_times_isValid = ::OpenAPI::fromJsonValue(m_opening_times, json[QString("openingTimes")]);
    m_opening_times_isSet = !json[QString("openingTimes")].isNull() && m_opening_times_isValid;

    m_post_code_isValid = ::OpenAPI::fromJsonValue(m_post_code, json[QString("postCode")]);
    m_post_code_isSet = !json[QString("postCode")].isNull() && m_post_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITravelCenter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITravelCenter::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opening_times.isSet()) {
        obj.insert(QString("openingTimes"), ::OpenAPI::toJsonValue(m_opening_times));
    }
    if (m_post_code_isSet) {
        obj.insert(QString("postCode"), ::OpenAPI::toJsonValue(m_post_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITravelCenter::getAddress() const {
    return m_address;
}
void OAITravelCenter::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAITravelCenter::is_address_Set() const{
    return m_address_isSet;
}

bool OAITravelCenter::is_address_Valid() const{
    return m_address_isValid;
}

QString OAITravelCenter::getCity() const {
    return m_city;
}
void OAITravelCenter::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITravelCenter::is_city_Set() const{
    return m_city_isSet;
}

bool OAITravelCenter::is_city_Valid() const{
    return m_city_isValid;
}

qint32 OAITravelCenter::getId() const {
    return m_id;
}
void OAITravelCenter::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITravelCenter::is_id_Set() const{
    return m_id_isSet;
}

bool OAITravelCenter::is_id_Valid() const{
    return m_id_isValid;
}

double OAITravelCenter::getLat() const {
    return m_lat;
}
void OAITravelCenter::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAITravelCenter::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAITravelCenter::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAITravelCenter::getLon() const {
    return m_lon;
}
void OAITravelCenter::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAITravelCenter::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAITravelCenter::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAITravelCenter::getName() const {
    return m_name;
}
void OAITravelCenter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITravelCenter::is_name_Set() const{
    return m_name_isSet;
}

bool OAITravelCenter::is_name_Valid() const{
    return m_name_isValid;
}

OAITravelCenter_openingTimes OAITravelCenter::getOpeningTimes() const {
    return m_opening_times;
}
void OAITravelCenter::setOpeningTimes(const OAITravelCenter_openingTimes &opening_times) {
    m_opening_times = opening_times;
    m_opening_times_isSet = true;
}

bool OAITravelCenter::is_opening_times_Set() const{
    return m_opening_times_isSet;
}

bool OAITravelCenter::is_opening_times_Valid() const{
    return m_opening_times_isValid;
}

QString OAITravelCenter::getPostCode() const {
    return m_post_code;
}
void OAITravelCenter::setPostCode(const QString &post_code) {
    m_post_code = post_code;
    m_post_code_isSet = true;
}

bool OAITravelCenter::is_post_code_Set() const{
    return m_post_code_isSet;
}

bool OAITravelCenter::is_post_code_Valid() const{
    return m_post_code_isValid;
}

QString OAITravelCenter::getType() const {
    return m_type;
}
void OAITravelCenter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITravelCenter::is_type_Set() const{
    return m_type_isSet;
}

bool OAITravelCenter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITravelCenter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_times.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITravelCenter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
