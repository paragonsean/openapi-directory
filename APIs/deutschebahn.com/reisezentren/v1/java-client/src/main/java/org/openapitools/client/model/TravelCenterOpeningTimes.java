/*
 * Reisezentren-API
 * This REST-API enables you to query information about travel centers in Germany.
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Opening times of the travel center, ordered by week day
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:26.998147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TravelCenterOpeningTimes {
  public static final String SERIALIZED_NAME_FRI = "fri";
  @SerializedName(SERIALIZED_NAME_FRI)
  private List<String> fri = new ArrayList<>();

  public static final String SERIALIZED_NAME_MON = "mon";
  @SerializedName(SERIALIZED_NAME_MON)
  private List<String> mon = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAT = "sat";
  @SerializedName(SERIALIZED_NAME_SAT)
  private List<String> sat = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUN = "sun";
  @SerializedName(SERIALIZED_NAME_SUN)
  private List<String> sun = new ArrayList<>();

  public static final String SERIALIZED_NAME_THU = "thu";
  @SerializedName(SERIALIZED_NAME_THU)
  private List<String> thu = new ArrayList<>();

  public static final String SERIALIZED_NAME_TUE = "tue";
  @SerializedName(SERIALIZED_NAME_TUE)
  private List<String> tue = new ArrayList<>();

  public static final String SERIALIZED_NAME_WED = "wed";
  @SerializedName(SERIALIZED_NAME_WED)
  private List<String> wed = new ArrayList<>();

  public TravelCenterOpeningTimes() {
  }

  public TravelCenterOpeningTimes fri(List<String> fri) {
    this.fri = fri;
    return this;
  }

  public TravelCenterOpeningTimes addFriItem(String friItem) {
    if (this.fri == null) {
      this.fri = new ArrayList<>();
    }
    this.fri.add(friItem);
    return this;
  }

  /**
   * Get fri
   * @return fri
   */
  @javax.annotation.Nullable
  public List<String> getFri() {
    return fri;
  }

  public void setFri(List<String> fri) {
    this.fri = fri;
  }


  public TravelCenterOpeningTimes mon(List<String> mon) {
    this.mon = mon;
    return this;
  }

  public TravelCenterOpeningTimes addMonItem(String monItem) {
    if (this.mon == null) {
      this.mon = new ArrayList<>();
    }
    this.mon.add(monItem);
    return this;
  }

  /**
   * Get mon
   * @return mon
   */
  @javax.annotation.Nullable
  public List<String> getMon() {
    return mon;
  }

  public void setMon(List<String> mon) {
    this.mon = mon;
  }


  public TravelCenterOpeningTimes sat(List<String> sat) {
    this.sat = sat;
    return this;
  }

  public TravelCenterOpeningTimes addSatItem(String satItem) {
    if (this.sat == null) {
      this.sat = new ArrayList<>();
    }
    this.sat.add(satItem);
    return this;
  }

  /**
   * Get sat
   * @return sat
   */
  @javax.annotation.Nullable
  public List<String> getSat() {
    return sat;
  }

  public void setSat(List<String> sat) {
    this.sat = sat;
  }


  public TravelCenterOpeningTimes sun(List<String> sun) {
    this.sun = sun;
    return this;
  }

  public TravelCenterOpeningTimes addSunItem(String sunItem) {
    if (this.sun == null) {
      this.sun = new ArrayList<>();
    }
    this.sun.add(sunItem);
    return this;
  }

  /**
   * Get sun
   * @return sun
   */
  @javax.annotation.Nullable
  public List<String> getSun() {
    return sun;
  }

  public void setSun(List<String> sun) {
    this.sun = sun;
  }


  public TravelCenterOpeningTimes thu(List<String> thu) {
    this.thu = thu;
    return this;
  }

  public TravelCenterOpeningTimes addThuItem(String thuItem) {
    if (this.thu == null) {
      this.thu = new ArrayList<>();
    }
    this.thu.add(thuItem);
    return this;
  }

  /**
   * Get thu
   * @return thu
   */
  @javax.annotation.Nullable
  public List<String> getThu() {
    return thu;
  }

  public void setThu(List<String> thu) {
    this.thu = thu;
  }


  public TravelCenterOpeningTimes tue(List<String> tue) {
    this.tue = tue;
    return this;
  }

  public TravelCenterOpeningTimes addTueItem(String tueItem) {
    if (this.tue == null) {
      this.tue = new ArrayList<>();
    }
    this.tue.add(tueItem);
    return this;
  }

  /**
   * Get tue
   * @return tue
   */
  @javax.annotation.Nullable
  public List<String> getTue() {
    return tue;
  }

  public void setTue(List<String> tue) {
    this.tue = tue;
  }


  public TravelCenterOpeningTimes wed(List<String> wed) {
    this.wed = wed;
    return this;
  }

  public TravelCenterOpeningTimes addWedItem(String wedItem) {
    if (this.wed == null) {
      this.wed = new ArrayList<>();
    }
    this.wed.add(wedItem);
    return this;
  }

  /**
   * Get wed
   * @return wed
   */
  @javax.annotation.Nullable
  public List<String> getWed() {
    return wed;
  }

  public void setWed(List<String> wed) {
    this.wed = wed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TravelCenterOpeningTimes travelCenterOpeningTimes = (TravelCenterOpeningTimes) o;
    return Objects.equals(this.fri, travelCenterOpeningTimes.fri) &&
        Objects.equals(this.mon, travelCenterOpeningTimes.mon) &&
        Objects.equals(this.sat, travelCenterOpeningTimes.sat) &&
        Objects.equals(this.sun, travelCenterOpeningTimes.sun) &&
        Objects.equals(this.thu, travelCenterOpeningTimes.thu) &&
        Objects.equals(this.tue, travelCenterOpeningTimes.tue) &&
        Objects.equals(this.wed, travelCenterOpeningTimes.wed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fri, mon, sat, sun, thu, tue, wed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TravelCenterOpeningTimes {\n");
    sb.append("    fri: ").append(toIndentedString(fri)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    sat: ").append(toIndentedString(sat)).append("\n");
    sb.append("    sun: ").append(toIndentedString(sun)).append("\n");
    sb.append("    thu: ").append(toIndentedString(thu)).append("\n");
    sb.append("    tue: ").append(toIndentedString(tue)).append("\n");
    sb.append("    wed: ").append(toIndentedString(wed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fri");
    openapiFields.add("mon");
    openapiFields.add("sat");
    openapiFields.add("sun");
    openapiFields.add("thu");
    openapiFields.add("tue");
    openapiFields.add("wed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TravelCenterOpeningTimes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TravelCenterOpeningTimes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TravelCenterOpeningTimes is not found in the empty JSON string", TravelCenterOpeningTimes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TravelCenterOpeningTimes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TravelCenterOpeningTimes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fri") != null && !jsonObj.get("fri").isJsonNull() && !jsonObj.get("fri").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri` to be an array in the JSON string but got `%s`", jsonObj.get("fri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mon") != null && !jsonObj.get("mon").isJsonNull() && !jsonObj.get("mon").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon` to be an array in the JSON string but got `%s`", jsonObj.get("mon").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sat") != null && !jsonObj.get("sat").isJsonNull() && !jsonObj.get("sat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat` to be an array in the JSON string but got `%s`", jsonObj.get("sat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sun") != null && !jsonObj.get("sun").isJsonNull() && !jsonObj.get("sun").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun` to be an array in the JSON string but got `%s`", jsonObj.get("sun").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("thu") != null && !jsonObj.get("thu").isJsonNull() && !jsonObj.get("thu").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu` to be an array in the JSON string but got `%s`", jsonObj.get("thu").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tue") != null && !jsonObj.get("tue").isJsonNull() && !jsonObj.get("tue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue` to be an array in the JSON string but got `%s`", jsonObj.get("tue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wed") != null && !jsonObj.get("wed").isJsonNull() && !jsonObj.get("wed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed` to be an array in the JSON string but got `%s`", jsonObj.get("wed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TravelCenterOpeningTimes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TravelCenterOpeningTimes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TravelCenterOpeningTimes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TravelCenterOpeningTimes.class));

       return (TypeAdapter<T>) new TypeAdapter<TravelCenterOpeningTimes>() {
           @Override
           public void write(JsonWriter out, TravelCenterOpeningTimes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TravelCenterOpeningTimes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TravelCenterOpeningTimes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TravelCenterOpeningTimes
   * @throws IOException if the JSON string is invalid with respect to TravelCenterOpeningTimes
   */
  public static TravelCenterOpeningTimes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TravelCenterOpeningTimes.class);
  }

  /**
   * Convert an instance of TravelCenterOpeningTimes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

