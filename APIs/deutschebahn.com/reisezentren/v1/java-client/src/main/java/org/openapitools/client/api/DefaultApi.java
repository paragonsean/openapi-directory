/*
 * Reisezentren-API
 * This REST-API enables you to query information about travel centers in Germany.
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.TravelCenter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reisezentrenGet
     * @param name A station name or part of it (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List has been created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel centers could be found matching the given name </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Filtering required - specify a name fragment of at least 3 characters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenGetCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reisezentren";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reisezentrenGetValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        return reisezentrenGetCall(name, _callback);

    }

    /**
     * Get all station infos
     * Get all station infos
     * @param name A station name or part of it (optional)
     * @return List&lt;TravelCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List has been created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel centers could be found matching the given name </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Filtering required - specify a name fragment of at least 3 characters </td><td>  -  </td></tr>
     </table>
     */
    public List<TravelCenter> reisezentrenGet(String name) throws ApiException {
        ApiResponse<List<TravelCenter>> localVarResp = reisezentrenGetWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get all station infos
     * Get all station infos
     * @param name A station name or part of it (optional)
     * @return ApiResponse&lt;List&lt;TravelCenter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List has been created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel centers could be found matching the given name </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Filtering required - specify a name fragment of at least 3 characters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TravelCenter>> reisezentrenGetWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = reisezentrenGetValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<List<TravelCenter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all station infos (asynchronously)
     * Get all station infos
     * @param name A station name or part of it (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List has been created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel centers could be found matching the given name </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Filtering required - specify a name fragment of at least 3 characters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenGetAsync(String name, final ApiCallback<List<TravelCenter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reisezentrenGetValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<List<TravelCenter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reisezentrenIdGet
     * @param id Station id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The travel center was found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel center found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reisezentren/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reisezentrenIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reisezentrenIdGet(Async)");
        }

        return reisezentrenIdGetCall(id, _callback);

    }

    /**
     * Get information about a specific station
     * Get information about a specific station
     * @param id Station id (required)
     * @return TravelCenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The travel center was found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel center found </td><td>  -  </td></tr>
     </table>
     */
    public TravelCenter reisezentrenIdGet(String id) throws ApiException {
        ApiResponse<TravelCenter> localVarResp = reisezentrenIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get information about a specific station
     * Get information about a specific station
     * @param id Station id (required)
     * @return ApiResponse&lt;TravelCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The travel center was found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel center found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelCenter> reisezentrenIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = reisezentrenIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TravelCenter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a specific station (asynchronously)
     * Get information about a specific station
     * @param id Station id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The travel center was found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No travel center found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenIdGetAsync(String id, final ApiCallback<TravelCenter> _callback) throws ApiException {

        okhttp3.Call localVarCall = reisezentrenIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TravelCenter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reisezentrenLocLatLonDistGet
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param dist Radius (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenLocLatLonDistGetCall(Float lat, Float lon, Float dist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reisezentren/loc/{lat}/{lon}/{dist}"
            .replace("{" + "lat" + "}", localVarApiClient.escapeString(lat.toString()))
            .replace("{" + "lon" + "}", localVarApiClient.escapeString(lon.toString()))
            .replace("{" + "dist" + "}", localVarApiClient.escapeString(dist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reisezentrenLocLatLonDistGetValidateBeforeCall(Float lat, Float lon, Float dist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling reisezentrenLocLatLonDistGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling reisezentrenLocLatLonDistGet(Async)");
        }

        // verify the required parameter 'dist' is set
        if (dist == null) {
            throw new ApiException("Missing the required parameter 'dist' when calling reisezentrenLocLatLonDistGet(Async)");
        }

        return reisezentrenLocLatLonDistGetCall(lat, lon, dist, _callback);

    }

    /**
     * Get stations in a given radius
     * Get stations in a given radius
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param dist Radius (required)
     * @return TravelCenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public TravelCenter reisezentrenLocLatLonDistGet(Float lat, Float lon, Float dist) throws ApiException {
        ApiResponse<TravelCenter> localVarResp = reisezentrenLocLatLonDistGetWithHttpInfo(lat, lon, dist);
        return localVarResp.getData();
    }

    /**
     * Get stations in a given radius
     * Get stations in a given radius
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param dist Radius (required)
     * @return ApiResponse&lt;TravelCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelCenter> reisezentrenLocLatLonDistGetWithHttpInfo(Float lat, Float lon, Float dist) throws ApiException {
        okhttp3.Call localVarCall = reisezentrenLocLatLonDistGetValidateBeforeCall(lat, lon, dist, null);
        Type localVarReturnType = new TypeToken<TravelCenter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get stations in a given radius (asynchronously)
     * Get stations in a given radius
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param dist Radius (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenLocLatLonDistGetAsync(Float lat, Float lon, Float dist, final ApiCallback<TravelCenter> _callback) throws ApiException {

        okhttp3.Call localVarCall = reisezentrenLocLatLonDistGetValidateBeforeCall(lat, lon, dist, _callback);
        Type localVarReturnType = new TypeToken<TravelCenter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reisezentrenLocLatLonGet
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenLocLatLonGetCall(Float lat, Float lon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reisezentren/loc/{lat}/{lon}"
            .replace("{" + "lat" + "}", localVarApiClient.escapeString(lat.toString()))
            .replace("{" + "lon" + "}", localVarApiClient.escapeString(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reisezentrenLocLatLonGetValidateBeforeCall(Float lat, Float lon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling reisezentrenLocLatLonGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling reisezentrenLocLatLonGet(Async)");
        }

        return reisezentrenLocLatLonGetCall(lat, lon, _callback);

    }

    /**
     * Get information about a station near a location
     * Get information about a station near a location
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @return TravelCenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public TravelCenter reisezentrenLocLatLonGet(Float lat, Float lon) throws ApiException {
        ApiResponse<TravelCenter> localVarResp = reisezentrenLocLatLonGetWithHttpInfo(lat, lon);
        return localVarResp.getData();
    }

    /**
     * Get information about a station near a location
     * Get information about a station near a location
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @return ApiResponse&lt;TravelCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TravelCenter> reisezentrenLocLatLonGetWithHttpInfo(Float lat, Float lon) throws ApiException {
        okhttp3.Call localVarCall = reisezentrenLocLatLonGetValidateBeforeCall(lat, lon, null);
        Type localVarReturnType = new TypeToken<TravelCenter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a station near a location (asynchronously)
     * Get information about a station near a location
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A station was found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reisezentrenLocLatLonGetAsync(Float lat, Float lon, final ApiCallback<TravelCenter> _callback) throws ApiException {

        okhttp3.Call localVarCall = reisezentrenLocLatLonGetValidateBeforeCall(lat, lon, _callback);
        Type localVarReturnType = new TypeToken<TravelCenter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
