/**
 * Reisezentren-API
 * This REST-API enables you to query information about travel centers in Germany.
 *
 * The version of the OpenAPI document: v1
 * Contact: Joachim.Schirrmacher@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TravelCenterOpeningTimes from './TravelCenterOpeningTimes';

/**
 * The TravelCenter model module.
 * @module model/TravelCenter
 * @version v1
 */
class TravelCenter {
    /**
     * Constructs a new <code>TravelCenter</code>.
     * @alias module:model/TravelCenter
     */
    constructor() { 
        
        TravelCenter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TravelCenter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TravelCenter} obj Optional instance to populate.
     * @return {module:model/TravelCenter} The populated <code>TravelCenter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TravelCenter();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('openingTimes')) {
                obj['openingTimes'] = TravelCenterOpeningTimes.constructFromObject(data['openingTimes']);
            }
            if (data.hasOwnProperty('postCode')) {
                obj['postCode'] = ApiClient.convertToType(data['postCode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TravelCenter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TravelCenter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `openingTimes`
        if (data['openingTimes']) { // data not null
          TravelCenterOpeningTimes.validateJSON(data['openingTimes']);
        }
        // ensure the json data is a string
        if (data['postCode'] && !(typeof data['postCode'] === 'string' || data['postCode'] instanceof String)) {
            throw new Error("Expected the field `postCode` to be a primitive type in the JSON string but got " + data['postCode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Street address of travel center
 * @member {String} address
 */
TravelCenter.prototype['address'] = undefined;

/**
 * City of travel center
 * @member {String} city
 */
TravelCenter.prototype['city'] = undefined;

/**
 * Identifying number
 * @member {Number} id
 */
TravelCenter.prototype['id'] = undefined;

/**
 * Latitude of travel center location
 * @member {Number} lat
 */
TravelCenter.prototype['lat'] = undefined;

/**
 * Longitude of travel center location
 * @member {Number} lon
 */
TravelCenter.prototype['lon'] = undefined;

/**
 * Name of travel center
 * @member {String} name
 */
TravelCenter.prototype['name'] = undefined;

/**
 * @member {module:model/TravelCenterOpeningTimes} openingTimes
 */
TravelCenter.prototype['openingTimes'] = undefined;

/**
 * Post code of travel center
 * @member {String} postCode
 */
TravelCenter.prototype['postCode'] = undefined;

/**
 * Type of travel center
 * @member {module:model/TravelCenter.TypeEnum} type
 */
TravelCenter.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TravelCenter['TypeEnum'] = {

    /**
     * value: "Reisezentrum"
     * @const
     */
    "Reisezentrum": "Reisezentrum",

    /**
     * value: "Mobility Center"
     * @const
     */
    "Mobility Center": "Mobility Center"
};



export default TravelCenter;

