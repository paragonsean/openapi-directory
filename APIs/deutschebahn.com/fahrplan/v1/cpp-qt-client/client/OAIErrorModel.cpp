/**
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorModel::OAIErrorModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorModel::OAIErrorModel() {
    this->initializeModel();
}

OAIErrorModel::~OAIErrorModel() {}

void OAIErrorModel::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_internal_code_isSet = false;
    m_internal_code_isValid = false;

    m_internal_message_isSet = false;
    m_internal_message_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIErrorModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorModel::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_internal_code_isValid = ::OpenAPI::fromJsonValue(m_internal_code, json[QString("internal_code")]);
    m_internal_code_isSet = !json[QString("internal_code")].isNull() && m_internal_code_isValid;

    m_internal_message_isValid = ::OpenAPI::fromJsonValue(m_internal_message, json[QString("internal_message")]);
    m_internal_message_isSet = !json[QString("internal_message")].isNull() && m_internal_message_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIErrorModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorModel::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_internal_code_isSet) {
        obj.insert(QString("internal_code"), ::OpenAPI::toJsonValue(m_internal_code));
    }
    if (m_internal_message_isSet) {
        obj.insert(QString("internal_message"), ::OpenAPI::toJsonValue(m_internal_message));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

qint32 OAIErrorModel::getCode() const {
    return m_code;
}
void OAIErrorModel::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorModel::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorModel::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAIErrorModel::getInternalCode() const {
    return m_internal_code;
}
void OAIErrorModel::setInternalCode(const qint32 &internal_code) {
    m_internal_code = internal_code;
    m_internal_code_isSet = true;
}

bool OAIErrorModel::is_internal_code_Set() const{
    return m_internal_code_isSet;
}

bool OAIErrorModel::is_internal_code_Valid() const{
    return m_internal_code_isValid;
}

QString OAIErrorModel::getInternalMessage() const {
    return m_internal_message;
}
void OAIErrorModel::setInternalMessage(const QString &internal_message) {
    m_internal_message = internal_message;
    m_internal_message_isSet = true;
}

bool OAIErrorModel::is_internal_message_Set() const{
    return m_internal_message_isSet;
}

bool OAIErrorModel::is_internal_message_Valid() const{
    return m_internal_message_isValid;
}

QString OAIErrorModel::getMessage() const {
    return m_message;
}
void OAIErrorModel::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorModel::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorModel::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIErrorModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
