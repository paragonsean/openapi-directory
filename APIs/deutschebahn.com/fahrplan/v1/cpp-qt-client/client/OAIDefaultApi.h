/**
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBoardResponse.h"
#include "OAIErrorModel.h"
#include "OAIJourneyResponse.h"
#include "OAILocationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  date QString [required]
    */
    virtual void arrivalBoardIdGet(const QString &id, const QString &date);

    /**
    * @param[in]  id QString [required]
    * @param[in]  date QString [required]
    */
    virtual void departureBoardIdGet(const QString &id, const QString &date);

    /**
    * @param[in]  id QString [required]
    */
    virtual void journeyDetailsIdGet(const QString &id);

    /**
    * @param[in]  name QString [required]
    */
    virtual void locationNameGet(const QString &name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void arrivalBoardIdGetCallback(OAIHttpRequestWorker *worker);
    void departureBoardIdGetCallback(OAIHttpRequestWorker *worker);
    void journeyDetailsIdGetCallback(OAIHttpRequestWorker *worker);
    void locationNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void arrivalBoardIdGetSignal(OAIBoardResponse summary);
    void departureBoardIdGetSignal(OAIBoardResponse summary);
    void journeyDetailsIdGetSignal(OAIJourneyResponse summary);
    void locationNameGetSignal(OAILocationResponse summary);


    void arrivalBoardIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBoardResponse summary);
    void departureBoardIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBoardResponse summary);
    void journeyDetailsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIJourneyResponse summary);
    void locationNameGetSignalFull(OAIHttpRequestWorker *worker, OAILocationResponse summary);

    Q_DECL_DEPRECATED_X("Use arrivalBoardIdGetSignalError() instead")
    void arrivalBoardIdGetSignalE(OAIBoardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void arrivalBoardIdGetSignalError(OAIBoardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departureBoardIdGetSignalError() instead")
    void departureBoardIdGetSignalE(OAIBoardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void departureBoardIdGetSignalError(OAIBoardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journeyDetailsIdGetSignalError() instead")
    void journeyDetailsIdGetSignalE(OAIJourneyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journeyDetailsIdGetSignalError(OAIJourneyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationNameGetSignalError() instead")
    void locationNameGetSignalE(OAILocationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationNameGetSignalError(OAILocationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use arrivalBoardIdGetSignalErrorFull() instead")
    void arrivalBoardIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void arrivalBoardIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departureBoardIdGetSignalErrorFull() instead")
    void departureBoardIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void departureBoardIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journeyDetailsIdGetSignalErrorFull() instead")
    void journeyDetailsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journeyDetailsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationNameGetSignalErrorFull() instead")
    void locationNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
