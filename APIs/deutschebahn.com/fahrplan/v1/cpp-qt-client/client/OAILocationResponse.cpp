/**
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationResponse::OAILocationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationResponse::OAILocationResponse() {
    this->initializeModel();
}

OAILocationResponse::~OAILocationResponse() {}

void OAILocationResponse::initializeModel() {

    m_locations_isSet = false;
    m_locations_isValid = false;
}

void OAILocationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationResponse::fromJsonObject(QJsonObject json) {

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;
}

QString OAILocationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    return obj;
}

QSet<OAILocation> OAILocationResponse::getLocations() const {
    return m_locations;
}
void OAILocationResponse::setLocations(const QSet<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAILocationResponse::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAILocationResponse::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAILocationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_locations_isValid && true;
}

} // namespace OpenAPI
