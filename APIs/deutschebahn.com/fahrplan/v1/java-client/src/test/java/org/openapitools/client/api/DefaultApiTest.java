/*
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BoardResponse;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.JourneyResponse;
import org.openapitools.client.model.LocationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get arrival board of a location
     *
     * Get arrival board at a given location at a given daten and time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void arrivalBoardIdGetTest() throws ApiException {
        String id = null;
        String date = null;
        BoardResponse response = api.arrivalBoardIdGet(id, date);
        // TODO: test validations
    }

    /**
     * Get departure board of a location
     *
     * Get departure board at a given location at a given daten and time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void departureBoardIdGetTest() throws ApiException {
        String id = null;
        String date = null;
        BoardResponse response = api.departureBoardIdGet(id, date);
        // TODO: test validations
    }

    /**
     * Get details about a single journey
     *
     * Retrieve details of a journey. The id of journey should come from an arrival board or a departure board.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void journeyDetailsIdGetTest() throws ApiException {
        String id = null;
        JourneyResponse response = api.journeyDetailsIdGet(id);
        // TODO: test validations
    }

    /**
     * Get location information
     *
     * Get information about locations matching the given name or name fragment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationNameGetTest() throws ApiException {
        String name = null;
        LocationResponse response = api.locationNameGet(name);
        // TODO: test validations
    }

}
