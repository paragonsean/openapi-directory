/*
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BoardResponse;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.JourneyResponse;
import org.openapitools.client.model.LocationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for arrivalBoardIdGet
     * @param id Id of location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> arrival board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call arrivalBoardIdGetCall(String id, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/arrivalBoard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call arrivalBoardIdGetValidateBeforeCall(String id, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling arrivalBoardIdGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling arrivalBoardIdGet(Async)");
        }

        return arrivalBoardIdGetCall(id, date, _callback);

    }

    /**
     * Get arrival board of a location
     * Get arrival board at a given location at a given daten and time.
     * @param id Id of location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @return BoardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> arrival board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public BoardResponse arrivalBoardIdGet(String id, String date) throws ApiException {
        ApiResponse<BoardResponse> localVarResp = arrivalBoardIdGetWithHttpInfo(id, date);
        return localVarResp.getData();
    }

    /**
     * Get arrival board of a location
     * Get arrival board at a given location at a given daten and time.
     * @param id Id of location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @return ApiResponse&lt;BoardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> arrival board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardResponse> arrivalBoardIdGetWithHttpInfo(String id, String date) throws ApiException {
        okhttp3.Call localVarCall = arrivalBoardIdGetValidateBeforeCall(id, date, null);
        Type localVarReturnType = new TypeToken<BoardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get arrival board of a location (asynchronously)
     * Get arrival board at a given location at a given daten and time.
     * @param id Id of location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> arrival board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call arrivalBoardIdGetAsync(String id, String date, final ApiCallback<BoardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = arrivalBoardIdGetValidateBeforeCall(id, date, _callback);
        Type localVarReturnType = new TypeToken<BoardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for departureBoardIdGet
     * @param id Id of a location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> departure board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departureBoardIdGetCall(String id, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departureBoard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departureBoardIdGetValidateBeforeCall(String id, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling departureBoardIdGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling departureBoardIdGet(Async)");
        }

        return departureBoardIdGetCall(id, date, _callback);

    }

    /**
     * Get departure board of a location
     * Get departure board at a given location at a given daten and time.
     * @param id Id of a location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @return BoardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> departure board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public BoardResponse departureBoardIdGet(String id, String date) throws ApiException {
        ApiResponse<BoardResponse> localVarResp = departureBoardIdGetWithHttpInfo(id, date);
        return localVarResp.getData();
    }

    /**
     * Get departure board of a location
     * Get departure board at a given location at a given daten and time.
     * @param id Id of a location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @return ApiResponse&lt;BoardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> departure board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardResponse> departureBoardIdGetWithHttpInfo(String id, String date) throws ApiException {
        okhttp3.Call localVarCall = departureBoardIdGetValidateBeforeCall(id, date, null);
        Type localVarReturnType = new TypeToken<BoardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get departure board of a location (asynchronously)
     * Get departure board at a given location at a given daten and time.
     * @param id Id of a location. Use attribute &#39;id&#39; from the result of &#39;location&#39; (required)
     * @param date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> departure board </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid date/time specification. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departureBoardIdGetAsync(String id, String date, final ApiCallback<BoardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = departureBoardIdGetValidateBeforeCall(id, date, _callback);
        Type localVarReturnType = new TypeToken<BoardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for journeyDetailsIdGet
     * @param id Id of a journey. Use attribute &#39;detailsId&#39; from the result of  &#39;arrivalBoard&#39; or &#39;departureBoard&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> journey details, locations of a journey </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journeyDetailsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/journeyDetails/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call journeyDetailsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling journeyDetailsIdGet(Async)");
        }

        return journeyDetailsIdGetCall(id, _callback);

    }

    /**
     * Get details about a single journey
     * Retrieve details of a journey. The id of journey should come from an arrival board or a departure board.
     * @param id Id of a journey. Use attribute &#39;detailsId&#39; from the result of  &#39;arrivalBoard&#39; or &#39;departureBoard&#39; (required)
     * @return JourneyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> journey details, locations of a journey </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public JourneyResponse journeyDetailsIdGet(String id) throws ApiException {
        ApiResponse<JourneyResponse> localVarResp = journeyDetailsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get details about a single journey
     * Retrieve details of a journey. The id of journey should come from an arrival board or a departure board.
     * @param id Id of a journey. Use attribute &#39;detailsId&#39; from the result of  &#39;arrivalBoard&#39; or &#39;departureBoard&#39; (required)
     * @return ApiResponse&lt;JourneyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> journey details, locations of a journey </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JourneyResponse> journeyDetailsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = journeyDetailsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JourneyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about a single journey (asynchronously)
     * Retrieve details of a journey. The id of journey should come from an arrival board or a departure board.
     * @param id Id of a journey. Use attribute &#39;detailsId&#39; from the result of  &#39;arrivalBoard&#39; or &#39;departureBoard&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> journey details, locations of a journey </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journeyDetailsIdGetAsync(String id, final ApiCallback<JourneyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = journeyDetailsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JourneyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationNameGet
     * @param name Name or name fragment of a location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationNameGetCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/location/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationNameGetValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling locationNameGet(Async)");
        }

        return locationNameGetCall(name, _callback);

    }

    /**
     * Get location information
     * Get information about locations matching the given name or name fragment
     * @param name Name or name fragment of a location (required)
     * @return LocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public LocationResponse locationNameGet(String name) throws ApiException {
        ApiResponse<LocationResponse> localVarResp = locationNameGetWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get location information
     * Get information about locations matching the given name or name fragment
     * @param name Name or name fragment of a location (required)
     * @return ApiResponse&lt;LocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationResponse> locationNameGetWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = locationNameGetValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<LocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get location information (asynchronously)
     * Get information about locations matching the given name or name fragment
     * @param name Name or name fragment of a location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationNameGetAsync(String name, final ApiCallback<LocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationNameGetValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<LocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
