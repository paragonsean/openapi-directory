/*
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Board;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoardResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:22.457166-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoardResponse {
  public static final String SERIALIZED_NAME_BOARDS = "boards";
  @SerializedName(SERIALIZED_NAME_BOARDS)
  private Set<Board> boards = new LinkedHashSet<>();

  public BoardResponse() {
  }

  public BoardResponse boards(Set<Board> boards) {
    this.boards = boards;
    return this;
  }

  public BoardResponse addBoardsItem(Board boardsItem) {
    if (this.boards == null) {
      this.boards = new LinkedHashSet<>();
    }
    this.boards.add(boardsItem);
    return this;
  }

  /**
   * Get boards
   * @return boards
   */
  @javax.annotation.Nonnull
  public Set<Board> getBoards() {
    return boards;
  }

  public void setBoards(Set<Board> boards) {
    this.boards = boards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardResponse boardResponse = (BoardResponse) o;
    return Objects.equals(this.boards, boardResponse.boards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardResponse {\n");
    sb.append("    boards: ").append(toIndentedString(boards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("boards");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardResponse is not found in the empty JSON string", BoardResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BoardResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("boards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boards` to be an array in the JSON string but got `%s`", jsonObj.get("boards").toString()));
      }

      JsonArray jsonArrayboards = jsonObj.getAsJsonArray("boards");
      // validate the required field `boards` (array)
      for (int i = 0; i < jsonArrayboards.size(); i++) {
        Board.validateJsonElement(jsonArrayboards.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardResponse>() {
           @Override
           public void write(JsonWriter out, BoardResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardResponse
   * @throws IOException if the JSON string is invalid with respect to BoardResponse
   */
  public static BoardResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardResponse.class);
  }

  /**
   * Convert an instance of BoardResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

