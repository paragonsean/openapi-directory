/*
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrainLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:22.457166-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainLocation {
  public static final String SERIALIZED_NAME_ARR_TIME = "arrTime";
  @SerializedName(SERIALIZED_NAME_ARR_TIME)
  private String arrTime;

  public static final String SERIALIZED_NAME_DEP_TIME = "depTime";
  @SerializedName(SERIALIZED_NAME_DEP_TIME)
  private String depTime;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private BigDecimal lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private BigDecimal lon;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_NAME = "stopName";
  @SerializedName(SERIALIZED_NAME_STOP_NAME)
  private String stopName;

  public static final String SERIALIZED_NAME_TRAIN = "train";
  @SerializedName(SERIALIZED_NAME_TRAIN)
  private String train;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TrainLocation() {
  }

  public TrainLocation arrTime(String arrTime) {
    this.arrTime = arrTime;
    return this;
  }

  /**
   * 
   * @return arrTime
   */
  @javax.annotation.Nonnull
  public String getArrTime() {
    return arrTime;
  }

  public void setArrTime(String arrTime) {
    this.arrTime = arrTime;
  }


  public TrainLocation depTime(String depTime) {
    this.depTime = depTime;
    return this;
  }

  /**
   * 
   * @return depTime
   */
  @javax.annotation.Nonnull
  public String getDepTime() {
    return depTime;
  }

  public void setDepTime(String depTime) {
    this.depTime = depTime;
  }


  public TrainLocation lat(BigDecimal lat) {
    this.lat = lat;
    return this;
  }

  /**
   * 
   * @return lat
   */
  @javax.annotation.Nonnull
  public BigDecimal getLat() {
    return lat;
  }

  public void setLat(BigDecimal lat) {
    this.lat = lat;
  }


  public TrainLocation lon(BigDecimal lon) {
    this.lon = lon;
    return this;
  }

  /**
   * 
   * @return lon
   */
  @javax.annotation.Nonnull
  public BigDecimal getLon() {
    return lon;
  }

  public void setLon(BigDecimal lon) {
    this.lon = lon;
  }


  public TrainLocation operator(String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * 
   * @return operator
   */
  @javax.annotation.Nonnull
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }


  public TrainLocation stopId(String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * 
   * @return stopId
   */
  @javax.annotation.Nonnull
  public String getStopId() {
    return stopId;
  }

  public void setStopId(String stopId) {
    this.stopId = stopId;
  }


  public TrainLocation stopName(String stopName) {
    this.stopName = stopName;
    return this;
  }

  /**
   * 
   * @return stopName
   */
  @javax.annotation.Nonnull
  public String getStopName() {
    return stopName;
  }

  public void setStopName(String stopName) {
    this.stopName = stopName;
  }


  public TrainLocation train(String train) {
    this.train = train;
    return this;
  }

  /**
   * 
   * @return train
   */
  @javax.annotation.Nonnull
  public String getTrain() {
    return train;
  }

  public void setTrain(String train) {
    this.train = train;
  }


  public TrainLocation type(String type) {
    this.type = type;
    return this;
  }

  /**
   * 
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainLocation trainLocation = (TrainLocation) o;
    return Objects.equals(this.arrTime, trainLocation.arrTime) &&
        Objects.equals(this.depTime, trainLocation.depTime) &&
        Objects.equals(this.lat, trainLocation.lat) &&
        Objects.equals(this.lon, trainLocation.lon) &&
        Objects.equals(this.operator, trainLocation.operator) &&
        Objects.equals(this.stopId, trainLocation.stopId) &&
        Objects.equals(this.stopName, trainLocation.stopName) &&
        Objects.equals(this.train, trainLocation.train) &&
        Objects.equals(this.type, trainLocation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrTime, depTime, lat, lon, operator, stopId, stopName, train, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainLocation {\n");
    sb.append("    arrTime: ").append(toIndentedString(arrTime)).append("\n");
    sb.append("    depTime: ").append(toIndentedString(depTime)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopName: ").append(toIndentedString(stopName)).append("\n");
    sb.append("    train: ").append(toIndentedString(train)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrTime");
    openapiFields.add("depTime");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("operator");
    openapiFields.add("stopId");
    openapiFields.add("stopName");
    openapiFields.add("train");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arrTime");
    openapiRequiredFields.add("depTime");
    openapiRequiredFields.add("lat");
    openapiRequiredFields.add("lon");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("stopId");
    openapiRequiredFields.add("stopName");
    openapiRequiredFields.add("train");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainLocation is not found in the empty JSON string", TrainLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrainLocation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("arrTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrTime").toString()));
      }
      if (!jsonObj.get("depTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depTime").toString()));
      }
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if (!jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if (!jsonObj.get("stopName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopName").toString()));
      }
      if (!jsonObj.get("train").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `train` to be a primitive type in the JSON string but got `%s`", jsonObj.get("train").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainLocation>() {
           @Override
           public void write(JsonWriter out, TrainLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainLocation
   * @throws IOException if the JSON string is invalid with respect to TrainLocation
   */
  public static TrainLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainLocation.class);
  }

  /**
   * Convert an instance of TrainLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

