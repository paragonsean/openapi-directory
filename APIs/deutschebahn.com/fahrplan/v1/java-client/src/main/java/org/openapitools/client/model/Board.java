/*
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Board
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:22.457166-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Board {
  public static final String SERIALIZED_NAME_BOARD_ID = "boardId";
  @SerializedName(SERIALIZED_NAME_BOARD_ID)
  private String boardId;

  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DETAILS_ID = "detailsId";
  @SerializedName(SERIALIZED_NAME_DETAILS_ID)
  private String detailsId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_NAME = "stopName";
  @SerializedName(SERIALIZED_NAME_STOP_NAME)
  private String stopName;

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private String track;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Board() {
  }

  public Board boardId(String boardId) {
    this.boardId = boardId;
    return this;
  }

  /**
   * 
   * @return boardId
   */
  @javax.annotation.Nonnull
  public String getBoardId() {
    return boardId;
  }

  public void setBoardId(String boardId) {
    this.boardId = boardId;
  }


  public Board dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * 
   * @return dateTime
   */
  @javax.annotation.Nonnull
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public Board detailsId(String detailsId) {
    this.detailsId = detailsId;
    return this;
  }

  /**
   * 
   * @return detailsId
   */
  @javax.annotation.Nonnull
  public String getDetailsId() {
    return detailsId;
  }

  public void setDetailsId(String detailsId) {
    this.detailsId = detailsId;
  }


  public Board name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of train
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Board origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * 
   * @return origin
   */
  @javax.annotation.Nonnull
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public Board stopId(String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * 
   * @return stopId
   */
  @javax.annotation.Nonnull
  public String getStopId() {
    return stopId;
  }

  public void setStopId(String stopId) {
    this.stopId = stopId;
  }


  public Board stopName(String stopName) {
    this.stopName = stopName;
    return this;
  }

  /**
   * 
   * @return stopName
   */
  @javax.annotation.Nonnull
  public String getStopName() {
    return stopName;
  }

  public void setStopName(String stopName) {
    this.stopName = stopName;
  }


  public Board track(String track) {
    this.track = track;
    return this;
  }

  /**
   * 
   * @return track
   */
  @javax.annotation.Nonnull
  public String getTrack() {
    return track;
  }

  public void setTrack(String track) {
    this.track = track;
  }


  public Board type(String type) {
    this.type = type;
    return this;
  }

  /**
   * 
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Board board = (Board) o;
    return Objects.equals(this.boardId, board.boardId) &&
        Objects.equals(this.dateTime, board.dateTime) &&
        Objects.equals(this.detailsId, board.detailsId) &&
        Objects.equals(this.name, board.name) &&
        Objects.equals(this.origin, board.origin) &&
        Objects.equals(this.stopId, board.stopId) &&
        Objects.equals(this.stopName, board.stopName) &&
        Objects.equals(this.track, board.track) &&
        Objects.equals(this.type, board.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardId, dateTime, detailsId, name, origin, stopId, stopName, track, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Board {\n");
    sb.append("    boardId: ").append(toIndentedString(boardId)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    detailsId: ").append(toIndentedString(detailsId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopName: ").append(toIndentedString(stopName)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardId");
    openapiFields.add("dateTime");
    openapiFields.add("detailsId");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("stopId");
    openapiFields.add("stopName");
    openapiFields.add("track");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("boardId");
    openapiRequiredFields.add("dateTime");
    openapiRequiredFields.add("detailsId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("stopId");
    openapiRequiredFields.add("stopName");
    openapiRequiredFields.add("track");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Board
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Board.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Board is not found in the empty JSON string", Board.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Board.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Board` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Board.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("boardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardId").toString()));
      }
      if (!jsonObj.get("dateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTime").toString()));
      }
      if (!jsonObj.get("detailsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailsId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if (!jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if (!jsonObj.get("stopName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopName").toString()));
      }
      if (!jsonObj.get("track").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Board.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Board' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Board> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Board.class));

       return (TypeAdapter<T>) new TypeAdapter<Board>() {
           @Override
           public void write(JsonWriter out, Board value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Board read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Board given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Board
   * @throws IOException if the JSON string is invalid with respect to Board
   */
  public static Board fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Board.class);
  }

  /**
   * Convert an instance of Board to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

