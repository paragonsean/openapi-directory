/**
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BoardResponse from '../model/BoardResponse';
import ErrorModel from '../model/ErrorModel';
import JourneyResponse from '../model/JourneyResponse';
import LocationResponse from '../model/LocationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the arrivalBoardIdGet operation.
     * @callback module:api/DefaultApi~arrivalBoardIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get arrival board of a location
     * Get arrival board at a given location at a given daten and time.
     * @param {String} id Id of location. Use attribute 'id' from the result of 'location'
     * @param {String} date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30
     * @param {module:api/DefaultApi~arrivalBoardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardResponse}
     */
    arrivalBoardIdGet(id, date, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling arrivalBoardIdGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling arrivalBoardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardResponse;
      return this.apiClient.callApi(
        '/arrivalBoard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departureBoardIdGet operation.
     * @callback module:api/DefaultApi~departureBoardIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get departure board of a location
     * Get departure board at a given location at a given daten and time.
     * @param {String} id Id of a location. Use attribute 'id' from the result of 'location'
     * @param {String} date Date and time in ISO-8601 format, yyyy-mm-ddThh:mm:ss, example: 2017-04-01 or 2017-04-01T10:30
     * @param {module:api/DefaultApi~departureBoardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardResponse}
     */
    departureBoardIdGet(id, date, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling departureBoardIdGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling departureBoardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardResponse;
      return this.apiClient.callApi(
        '/departureBoard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the journeyDetailsIdGet operation.
     * @callback module:api/DefaultApi~journeyDetailsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JourneyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a single journey
     * Retrieve details of a journey. The id of journey should come from an arrival board or a departure board.
     * @param {String} id Id of a journey. Use attribute 'detailsId' from the result of  'arrivalBoard' or 'departureBoard'
     * @param {module:api/DefaultApi~journeyDetailsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JourneyResponse}
     */
    journeyDetailsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journeyDetailsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JourneyResponse;
      return this.apiClient.callApi(
        '/journeyDetails/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationNameGet operation.
     * @callback module:api/DefaultApi~locationNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get location information
     * Get information about locations matching the given name or name fragment
     * @param {String} name Name or name fragment of a location
     * @param {module:api/DefaultApi~locationNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationResponse}
     */
    locationNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling locationNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationResponse;
      return this.apiClient.callApi(
        '/location/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
