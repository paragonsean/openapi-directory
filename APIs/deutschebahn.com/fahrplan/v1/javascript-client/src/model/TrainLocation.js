/**
 * Fahrplan-Free
 * A RESTful webservice to request a railway journey - FREE plan with restricted access (max. 10 requests per minute). Please ignore the message in the API Console about the access token.  Register to use an less restricted version, which requires an access token.
 *
 * The version of the OpenAPI document: v1
 * Contact: DBOpenData@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrainLocation model module.
 * @module model/TrainLocation
 * @version v1
 */
class TrainLocation {
    /**
     * Constructs a new <code>TrainLocation</code>.
     * @alias module:model/TrainLocation
     * @param arrTime {String} 
     * @param depTime {String} 
     * @param lat {Number} 
     * @param lon {Number} 
     * @param operator {String} 
     * @param stopId {String} 
     * @param stopName {String} 
     * @param train {String} 
     * @param type {String} 
     */
    constructor(arrTime, depTime, lat, lon, operator, stopId, stopName, train, type) { 
        
        TrainLocation.initialize(this, arrTime, depTime, lat, lon, operator, stopId, stopName, train, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arrTime, depTime, lat, lon, operator, stopId, stopName, train, type) { 
        obj['arrTime'] = arrTime;
        obj['depTime'] = depTime;
        obj['lat'] = lat;
        obj['lon'] = lon;
        obj['operator'] = operator;
        obj['stopId'] = stopId;
        obj['stopName'] = stopName;
        obj['train'] = train;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TrainLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainLocation} obj Optional instance to populate.
     * @return {module:model/TrainLocation} The populated <code>TrainLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainLocation();

            if (data.hasOwnProperty('arrTime')) {
                obj['arrTime'] = ApiClient.convertToType(data['arrTime'], 'String');
            }
            if (data.hasOwnProperty('depTime')) {
                obj['depTime'] = ApiClient.convertToType(data['depTime'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('stopId')) {
                obj['stopId'] = ApiClient.convertToType(data['stopId'], 'String');
            }
            if (data.hasOwnProperty('stopName')) {
                obj['stopName'] = ApiClient.convertToType(data['stopName'], 'String');
            }
            if (data.hasOwnProperty('train')) {
                obj['train'] = ApiClient.convertToType(data['train'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrainLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['arrTime'] && !(typeof data['arrTime'] === 'string' || data['arrTime'] instanceof String)) {
            throw new Error("Expected the field `arrTime` to be a primitive type in the JSON string but got " + data['arrTime']);
        }
        // ensure the json data is a string
        if (data['depTime'] && !(typeof data['depTime'] === 'string' || data['depTime'] instanceof String)) {
            throw new Error("Expected the field `depTime` to be a primitive type in the JSON string but got " + data['depTime']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['stopId'] && !(typeof data['stopId'] === 'string' || data['stopId'] instanceof String)) {
            throw new Error("Expected the field `stopId` to be a primitive type in the JSON string but got " + data['stopId']);
        }
        // ensure the json data is a string
        if (data['stopName'] && !(typeof data['stopName'] === 'string' || data['stopName'] instanceof String)) {
            throw new Error("Expected the field `stopName` to be a primitive type in the JSON string but got " + data['stopName']);
        }
        // ensure the json data is a string
        if (data['train'] && !(typeof data['train'] === 'string' || data['train'] instanceof String)) {
            throw new Error("Expected the field `train` to be a primitive type in the JSON string but got " + data['train']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

TrainLocation.RequiredProperties = ["arrTime", "depTime", "lat", "lon", "operator", "stopId", "stopName", "train", "type"];

/**
 * 
 * @member {String} arrTime
 */
TrainLocation.prototype['arrTime'] = undefined;

/**
 * 
 * @member {String} depTime
 */
TrainLocation.prototype['depTime'] = undefined;

/**
 * 
 * @member {Number} lat
 */
TrainLocation.prototype['lat'] = undefined;

/**
 * 
 * @member {Number} lon
 */
TrainLocation.prototype['lon'] = undefined;

/**
 * 
 * @member {String} operator
 */
TrainLocation.prototype['operator'] = undefined;

/**
 * 
 * @member {String} stopId
 */
TrainLocation.prototype['stopId'] = undefined;

/**
 * 
 * @member {String} stopName
 */
TrainLocation.prototype['stopName'] = undefined;

/**
 * 
 * @member {String} train
 */
TrainLocation.prototype['train'] = undefined;

/**
 * 
 * @member {String} type
 */
TrainLocation.prototype['type'] = undefined;






export default TrainLocation;

