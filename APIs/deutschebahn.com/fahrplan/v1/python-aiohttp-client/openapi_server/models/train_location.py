# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrainLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arr_time: str=None, dep_time: str=None, lat: float=None, lon: float=None, operator: str=None, stop_id: str=None, stop_name: str=None, train: str=None, type: str=None):
        """TrainLocation - a model defined in OpenAPI

        :param arr_time: The arr_time of this TrainLocation.
        :param dep_time: The dep_time of this TrainLocation.
        :param lat: The lat of this TrainLocation.
        :param lon: The lon of this TrainLocation.
        :param operator: The operator of this TrainLocation.
        :param stop_id: The stop_id of this TrainLocation.
        :param stop_name: The stop_name of this TrainLocation.
        :param train: The train of this TrainLocation.
        :param type: The type of this TrainLocation.
        """
        self.openapi_types = {
            'arr_time': str,
            'dep_time': str,
            'lat': float,
            'lon': float,
            'operator': str,
            'stop_id': str,
            'stop_name': str,
            'train': str,
            'type': str
        }

        self.attribute_map = {
            'arr_time': 'arrTime',
            'dep_time': 'depTime',
            'lat': 'lat',
            'lon': 'lon',
            'operator': 'operator',
            'stop_id': 'stopId',
            'stop_name': 'stopName',
            'train': 'train',
            'type': 'type'
        }

        self._arr_time = arr_time
        self._dep_time = dep_time
        self._lat = lat
        self._lon = lon
        self._operator = operator
        self._stop_id = stop_id
        self._stop_name = stop_name
        self._train = train
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainLocation of this TrainLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arr_time(self):
        """Gets the arr_time of this TrainLocation.

        

        :return: The arr_time of this TrainLocation.
        :rtype: str
        """
        return self._arr_time

    @arr_time.setter
    def arr_time(self, arr_time):
        """Sets the arr_time of this TrainLocation.

        

        :param arr_time: The arr_time of this TrainLocation.
        :type arr_time: str
        """
        if arr_time is None:
            raise ValueError("Invalid value for `arr_time`, must not be `None`")

        self._arr_time = arr_time

    @property
    def dep_time(self):
        """Gets the dep_time of this TrainLocation.

        

        :return: The dep_time of this TrainLocation.
        :rtype: str
        """
        return self._dep_time

    @dep_time.setter
    def dep_time(self, dep_time):
        """Sets the dep_time of this TrainLocation.

        

        :param dep_time: The dep_time of this TrainLocation.
        :type dep_time: str
        """
        if dep_time is None:
            raise ValueError("Invalid value for `dep_time`, must not be `None`")

        self._dep_time = dep_time

    @property
    def lat(self):
        """Gets the lat of this TrainLocation.

        

        :return: The lat of this TrainLocation.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this TrainLocation.

        

        :param lat: The lat of this TrainLocation.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this TrainLocation.

        

        :return: The lon of this TrainLocation.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this TrainLocation.

        

        :param lon: The lon of this TrainLocation.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def operator(self):
        """Gets the operator of this TrainLocation.

        

        :return: The operator of this TrainLocation.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this TrainLocation.

        

        :param operator: The operator of this TrainLocation.
        :type operator: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def stop_id(self):
        """Gets the stop_id of this TrainLocation.

        

        :return: The stop_id of this TrainLocation.
        :rtype: str
        """
        return self._stop_id

    @stop_id.setter
    def stop_id(self, stop_id):
        """Sets the stop_id of this TrainLocation.

        

        :param stop_id: The stop_id of this TrainLocation.
        :type stop_id: str
        """
        if stop_id is None:
            raise ValueError("Invalid value for `stop_id`, must not be `None`")

        self._stop_id = stop_id

    @property
    def stop_name(self):
        """Gets the stop_name of this TrainLocation.

        

        :return: The stop_name of this TrainLocation.
        :rtype: str
        """
        return self._stop_name

    @stop_name.setter
    def stop_name(self, stop_name):
        """Sets the stop_name of this TrainLocation.

        

        :param stop_name: The stop_name of this TrainLocation.
        :type stop_name: str
        """
        if stop_name is None:
            raise ValueError("Invalid value for `stop_name`, must not be `None`")

        self._stop_name = stop_name

    @property
    def train(self):
        """Gets the train of this TrainLocation.

        

        :return: The train of this TrainLocation.
        :rtype: str
        """
        return self._train

    @train.setter
    def train(self, train):
        """Sets the train of this TrainLocation.

        

        :param train: The train of this TrainLocation.
        :type train: str
        """
        if train is None:
            raise ValueError("Invalid value for `train`, must not be `None`")

        self._train = train

    @property
    def type(self):
        """Gets the type of this TrainLocation.

        

        :return: The type of this TrainLocation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrainLocation.

        

        :param type: The type of this TrainLocation.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
