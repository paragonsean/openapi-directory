# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.board import Board
from openapi_server import util


class BoardResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boards: list[Board]=None):
        """BoardResponse - a model defined in OpenAPI

        :param boards: The boards of this BoardResponse.
        """
        self.openapi_types = {
            'boards': list[Board]
        }

        self.attribute_map = {
            'boards': 'boards'
        }

        self._boards = boards

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoardResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoardResponse of this BoardResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boards(self):
        """Gets the boards of this BoardResponse.


        :return: The boards of this BoardResponse.
        :rtype: list[Board]
        """
        return self._boards

    @boards.setter
    def boards(self, boards):
        """Sets the boards of this BoardResponse.


        :param boards: The boards of this BoardResponse.
        :type boards: list[Board]
        """
        if boards is None:
            raise ValueError("Invalid value for `boards`, must not be `None`")
        if boards is not None and len(boards) < 1:
            raise ValueError("Invalid value for `boards`, number of items must be greater than or equal to `1`")

        self._boards = boards
