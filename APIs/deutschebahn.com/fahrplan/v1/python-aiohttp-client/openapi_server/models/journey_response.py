# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.train_location import TrainLocation
from openapi_server import util


class JourneyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, train_locs: list[TrainLocation]=None):
        """JourneyResponse - a model defined in OpenAPI

        :param train_locs: The train_locs of this JourneyResponse.
        """
        self.openapi_types = {
            'train_locs': list[TrainLocation]
        }

        self.attribute_map = {
            'train_locs': 'train_locs'
        }

        self._train_locs = train_locs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JourneyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JourneyResponse of this JourneyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def train_locs(self):
        """Gets the train_locs of this JourneyResponse.


        :return: The train_locs of this JourneyResponse.
        :rtype: list[TrainLocation]
        """
        return self._train_locs

    @train_locs.setter
    def train_locs(self, train_locs):
        """Sets the train_locs of this JourneyResponse.


        :param train_locs: The train_locs of this JourneyResponse.
        :type train_locs: list[TrainLocation]
        """
        if train_locs is None:
            raise ValueError("Invalid value for `train_locs`, must not be `None`")
        if train_locs is not None and len(train_locs) < 1:
            raise ValueError("Invalid value for `train_locs`, number of items must be greater than or equal to `1`")

        self._train_locs = train_locs
