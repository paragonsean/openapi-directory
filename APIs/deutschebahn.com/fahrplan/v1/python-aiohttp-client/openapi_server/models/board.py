# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Board(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board_id: str=None, date_time: str=None, details_id: str=None, name: str=None, origin: str=None, stop_id: str=None, stop_name: str=None, track: str=None, type: str=None):
        """Board - a model defined in OpenAPI

        :param board_id: The board_id of this Board.
        :param date_time: The date_time of this Board.
        :param details_id: The details_id of this Board.
        :param name: The name of this Board.
        :param origin: The origin of this Board.
        :param stop_id: The stop_id of this Board.
        :param stop_name: The stop_name of this Board.
        :param track: The track of this Board.
        :param type: The type of this Board.
        """
        self.openapi_types = {
            'board_id': str,
            'date_time': str,
            'details_id': str,
            'name': str,
            'origin': str,
            'stop_id': str,
            'stop_name': str,
            'track': str,
            'type': str
        }

        self.attribute_map = {
            'board_id': 'boardId',
            'date_time': 'dateTime',
            'details_id': 'detailsId',
            'name': 'name',
            'origin': 'origin',
            'stop_id': 'stopId',
            'stop_name': 'stopName',
            'track': 'track',
            'type': 'type'
        }

        self._board_id = board_id
        self._date_time = date_time
        self._details_id = details_id
        self._name = name
        self._origin = origin
        self._stop_id = stop_id
        self._stop_name = stop_name
        self._track = track
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Board':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Board of this Board.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board_id(self):
        """Gets the board_id of this Board.

        

        :return: The board_id of this Board.
        :rtype: str
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id):
        """Sets the board_id of this Board.

        

        :param board_id: The board_id of this Board.
        :type board_id: str
        """
        if board_id is None:
            raise ValueError("Invalid value for `board_id`, must not be `None`")

        self._board_id = board_id

    @property
    def date_time(self):
        """Gets the date_time of this Board.

        

        :return: The date_time of this Board.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this Board.

        

        :param date_time: The date_time of this Board.
        :type date_time: str
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")

        self._date_time = date_time

    @property
    def details_id(self):
        """Gets the details_id of this Board.

        

        :return: The details_id of this Board.
        :rtype: str
        """
        return self._details_id

    @details_id.setter
    def details_id(self, details_id):
        """Sets the details_id of this Board.

        

        :param details_id: The details_id of this Board.
        :type details_id: str
        """
        if details_id is None:
            raise ValueError("Invalid value for `details_id`, must not be `None`")

        self._details_id = details_id

    @property
    def name(self):
        """Gets the name of this Board.

        Name of train

        :return: The name of this Board.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Board.

        Name of train

        :param name: The name of this Board.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this Board.

        

        :return: The origin of this Board.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Board.

        

        :param origin: The origin of this Board.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def stop_id(self):
        """Gets the stop_id of this Board.

        

        :return: The stop_id of this Board.
        :rtype: str
        """
        return self._stop_id

    @stop_id.setter
    def stop_id(self, stop_id):
        """Sets the stop_id of this Board.

        

        :param stop_id: The stop_id of this Board.
        :type stop_id: str
        """
        if stop_id is None:
            raise ValueError("Invalid value for `stop_id`, must not be `None`")

        self._stop_id = stop_id

    @property
    def stop_name(self):
        """Gets the stop_name of this Board.

        

        :return: The stop_name of this Board.
        :rtype: str
        """
        return self._stop_name

    @stop_name.setter
    def stop_name(self, stop_name):
        """Sets the stop_name of this Board.

        

        :param stop_name: The stop_name of this Board.
        :type stop_name: str
        """
        if stop_name is None:
            raise ValueError("Invalid value for `stop_name`, must not be `None`")

        self._stop_name = stop_name

    @property
    def track(self):
        """Gets the track of this Board.

        

        :return: The track of this Board.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this Board.

        

        :param track: The track of this Board.
        :type track: str
        """
        if track is None:
            raise ValueError("Invalid value for `track`, must not be `None`")

        self._track = track

    @property
    def type(self):
        """Gets the type of this Board.

        

        :return: The type of this Board.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Board.

        

        :param type: The type of this Board.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
