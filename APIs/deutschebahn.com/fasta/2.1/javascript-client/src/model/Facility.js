/**
 * FaSta - Station Facilities Status
 * A RESTful webservice to retrieve data about the operational state of public elevators and escalators in german railway stations.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: michael.binzen@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Facility model module.
 * @module model/Facility
 * @version 2.1
 */
class Facility {
    /**
     * Constructs a new <code>Facility</code>.
     * A facility provided by this API is either a public elevator or escalator located at a German railway station.
     * @alias module:model/Facility
     * @param equipmentnumber {Number} Unique identifier of the facility.
     * @param state {module:model/Facility.StateEnum} Operational state of the facility.
     * @param stationnumber {Number} Number of the station the facility belongs to.
     * @param type {module:model/Facility.TypeEnum} Type of the facility.
     */
    constructor(equipmentnumber, state, stationnumber, type) { 
        
        Facility.initialize(this, equipmentnumber, state, stationnumber, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, equipmentnumber, state, stationnumber, type) { 
        obj['equipmentnumber'] = equipmentnumber;
        obj['state'] = state;
        obj['stationnumber'] = stationnumber;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Facility</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Facility} obj Optional instance to populate.
     * @return {module:model/Facility} The populated <code>Facility</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Facility();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('equipmentnumber')) {
                obj['equipmentnumber'] = ApiClient.convertToType(data['equipmentnumber'], 'Number');
            }
            if (data.hasOwnProperty('geocoordX')) {
                obj['geocoordX'] = ApiClient.convertToType(data['geocoordX'], 'Number');
            }
            if (data.hasOwnProperty('geocoordY')) {
                obj['geocoordY'] = ApiClient.convertToType(data['geocoordY'], 'Number');
            }
            if (data.hasOwnProperty('operatorname')) {
                obj['operatorname'] = ApiClient.convertToType(data['operatorname'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateExplanation')) {
                obj['stateExplanation'] = ApiClient.convertToType(data['stateExplanation'], 'String');
            }
            if (data.hasOwnProperty('stationnumber')) {
                obj['stationnumber'] = ApiClient.convertToType(data['stationnumber'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Facility</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Facility</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Facility.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['operatorname'] && !(typeof data['operatorname'] === 'string' || data['operatorname'] instanceof String)) {
            throw new Error("Expected the field `operatorname` to be a primitive type in the JSON string but got " + data['operatorname']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateExplanation'] && !(typeof data['stateExplanation'] === 'string' || data['stateExplanation'] instanceof String)) {
            throw new Error("Expected the field `stateExplanation` to be a primitive type in the JSON string but got " + data['stateExplanation']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Facility.RequiredProperties = ["equipmentnumber", "state", "stationnumber", "type"];

/**
 * Textual description of the facility.
 * @member {String} description
 */
Facility.prototype['description'] = undefined;

/**
 * Unique identifier of the facility.
 * @member {Number} equipmentnumber
 */
Facility.prototype['equipmentnumber'] = undefined;

/**
 * Longitude component of geocoordinate in WGS84 format.
 * @member {Number} geocoordX
 */
Facility.prototype['geocoordX'] = undefined;

/**
 * Latitude component of geocoordinate in WGS84 format.
 * @member {Number} geocoordY
 */
Facility.prototype['geocoordY'] = undefined;

/**
 * The name of the operator of the facility.
 * @member {String} operatorname
 */
Facility.prototype['operatorname'] = undefined;

/**
 * Operational state of the facility.
 * @member {module:model/Facility.StateEnum} state
 */
Facility.prototype['state'] = undefined;

/**
 * Detailed description of the state.
 * @member {String} stateExplanation
 */
Facility.prototype['stateExplanation'] = undefined;

/**
 * Number of the station the facility belongs to.
 * @member {Number} stationnumber
 */
Facility.prototype['stationnumber'] = undefined;

/**
 * Type of the facility.
 * @member {module:model/Facility.TypeEnum} type
 */
Facility.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Facility['StateEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Facility['TypeEnum'] = {

    /**
     * value: "ESCALATOR"
     * @const
     */
    "ESCALATOR": "ESCALATOR",

    /**
     * value: "ELEVATOR"
     * @const
     */
    "ELEVATOR": "ELEVATOR"
};



export default Facility;

