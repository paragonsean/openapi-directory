/**
 * FaSta - Station Facilities Status
 * A RESTful webservice to retrieve data about the operational state of public elevators and escalators in german railway stations.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: michael.binzen@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Facility from './Facility';

/**
 * The Station model module.
 * @module model/Station
 * @version 2.1
 */
class Station {
    /**
     * Constructs a new <code>Station</code>.
     * @alias module:model/Station
     * @param name {String} Name of the station.
     * @param stationnumber {Number} Unique identifier of the station.
     */
    constructor(name, stationnumber) { 
        
        Station.initialize(this, name, stationnumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, stationnumber) { 
        obj['name'] = name;
        obj['stationnumber'] = stationnumber;
    }

    /**
     * Constructs a <code>Station</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Station} obj Optional instance to populate.
     * @return {module:model/Station} The populated <code>Station</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Station();

            if (data.hasOwnProperty('facilities')) {
                obj['facilities'] = ApiClient.convertToType(data['facilities'], [Facility]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stationnumber')) {
                obj['stationnumber'] = ApiClient.convertToType(data['stationnumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Station</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Station</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Station.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['facilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facilities'])) {
                throw new Error("Expected the field `facilities` to be an array in the JSON data but got " + data['facilities']);
            }
            // validate the optional field `facilities` (array)
            for (const item of data['facilities']) {
                Facility.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Station.RequiredProperties = ["name", "stationnumber"];

/**
 * @member {Array.<module:model/Facility>} facilities
 */
Station.prototype['facilities'] = undefined;

/**
 * Name of the station.
 * @member {String} name
 */
Station.prototype['name'] = undefined;

/**
 * Unique identifier of the station.
 * @member {Number} stationnumber
 */
Station.prototype['stationnumber'] = undefined;






export default Station;

