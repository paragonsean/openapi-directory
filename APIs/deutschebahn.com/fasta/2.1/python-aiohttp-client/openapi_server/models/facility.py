# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Facility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, equipmentnumber: int=None, geocoord_x: float=None, geocoord_y: float=None, operatorname: str=None, state: str=None, state_explanation: str=None, stationnumber: int=None, type: str=None):
        """Facility - a model defined in OpenAPI

        :param description: The description of this Facility.
        :param equipmentnumber: The equipmentnumber of this Facility.
        :param geocoord_x: The geocoord_x of this Facility.
        :param geocoord_y: The geocoord_y of this Facility.
        :param operatorname: The operatorname of this Facility.
        :param state: The state of this Facility.
        :param state_explanation: The state_explanation of this Facility.
        :param stationnumber: The stationnumber of this Facility.
        :param type: The type of this Facility.
        """
        self.openapi_types = {
            'description': str,
            'equipmentnumber': int,
            'geocoord_x': float,
            'geocoord_y': float,
            'operatorname': str,
            'state': str,
            'state_explanation': str,
            'stationnumber': int,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'equipmentnumber': 'equipmentnumber',
            'geocoord_x': 'geocoordX',
            'geocoord_y': 'geocoordY',
            'operatorname': 'operatorname',
            'state': 'state',
            'state_explanation': 'stateExplanation',
            'stationnumber': 'stationnumber',
            'type': 'type'
        }

        self._description = description
        self._equipmentnumber = equipmentnumber
        self._geocoord_x = geocoord_x
        self._geocoord_y = geocoord_y
        self._operatorname = operatorname
        self._state = state
        self._state_explanation = state_explanation
        self._stationnumber = stationnumber
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Facility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The facility of this Facility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Facility.

        Textual description of the facility.

        :return: The description of this Facility.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Facility.

        Textual description of the facility.

        :param description: The description of this Facility.
        :type description: str
        """

        self._description = description

    @property
    def equipmentnumber(self):
        """Gets the equipmentnumber of this Facility.

        Unique identifier of the facility.

        :return: The equipmentnumber of this Facility.
        :rtype: int
        """
        return self._equipmentnumber

    @equipmentnumber.setter
    def equipmentnumber(self, equipmentnumber):
        """Sets the equipmentnumber of this Facility.

        Unique identifier of the facility.

        :param equipmentnumber: The equipmentnumber of this Facility.
        :type equipmentnumber: int
        """
        if equipmentnumber is None:
            raise ValueError("Invalid value for `equipmentnumber`, must not be `None`")

        self._equipmentnumber = equipmentnumber

    @property
    def geocoord_x(self):
        """Gets the geocoord_x of this Facility.

        Longitude component of geocoordinate in WGS84 format.

        :return: The geocoord_x of this Facility.
        :rtype: float
        """
        return self._geocoord_x

    @geocoord_x.setter
    def geocoord_x(self, geocoord_x):
        """Sets the geocoord_x of this Facility.

        Longitude component of geocoordinate in WGS84 format.

        :param geocoord_x: The geocoord_x of this Facility.
        :type geocoord_x: float
        """

        self._geocoord_x = geocoord_x

    @property
    def geocoord_y(self):
        """Gets the geocoord_y of this Facility.

        Latitude component of geocoordinate in WGS84 format.

        :return: The geocoord_y of this Facility.
        :rtype: float
        """
        return self._geocoord_y

    @geocoord_y.setter
    def geocoord_y(self, geocoord_y):
        """Sets the geocoord_y of this Facility.

        Latitude component of geocoordinate in WGS84 format.

        :param geocoord_y: The geocoord_y of this Facility.
        :type geocoord_y: float
        """

        self._geocoord_y = geocoord_y

    @property
    def operatorname(self):
        """Gets the operatorname of this Facility.

        The name of the operator of the facility.

        :return: The operatorname of this Facility.
        :rtype: str
        """
        return self._operatorname

    @operatorname.setter
    def operatorname(self, operatorname):
        """Sets the operatorname of this Facility.

        The name of the operator of the facility.

        :param operatorname: The operatorname of this Facility.
        :type operatorname: str
        """

        self._operatorname = operatorname

    @property
    def state(self):
        """Gets the state of this Facility.

        Operational state of the facility.

        :return: The state of this Facility.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Facility.

        Operational state of the facility.

        :param state: The state of this Facility.
        :type state: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "UNKNOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_explanation(self):
        """Gets the state_explanation of this Facility.

        Detailed description of the state.

        :return: The state_explanation of this Facility.
        :rtype: str
        """
        return self._state_explanation

    @state_explanation.setter
    def state_explanation(self, state_explanation):
        """Sets the state_explanation of this Facility.

        Detailed description of the state.

        :param state_explanation: The state_explanation of this Facility.
        :type state_explanation: str
        """

        self._state_explanation = state_explanation

    @property
    def stationnumber(self):
        """Gets the stationnumber of this Facility.

        Number of the station the facility belongs to.

        :return: The stationnumber of this Facility.
        :rtype: int
        """
        return self._stationnumber

    @stationnumber.setter
    def stationnumber(self, stationnumber):
        """Sets the stationnumber of this Facility.

        Number of the station the facility belongs to.

        :param stationnumber: The stationnumber of this Facility.
        :type stationnumber: int
        """
        if stationnumber is None:
            raise ValueError("Invalid value for `stationnumber`, must not be `None`")

        self._stationnumber = stationnumber

    @property
    def type(self):
        """Gets the type of this Facility.

        Type of the facility.

        :return: The type of this Facility.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Facility.

        Type of the facility.

        :param type: The type of this Facility.
        :type type: str
        """
        allowed_values = ["ESCALATOR", "ELEVATOR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
