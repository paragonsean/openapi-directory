# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facility import Facility
from openapi_server import util


class Station(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facilities: List[Facility]=None, name: str=None, stationnumber: int=None):
        """Station - a model defined in OpenAPI

        :param facilities: The facilities of this Station.
        :param name: The name of this Station.
        :param stationnumber: The stationnumber of this Station.
        """
        self.openapi_types = {
            'facilities': List[Facility],
            'name': str,
            'stationnumber': int
        }

        self.attribute_map = {
            'facilities': 'facilities',
            'name': 'name',
            'stationnumber': 'stationnumber'
        }

        self._facilities = facilities
        self._name = name
        self._stationnumber = stationnumber

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Station':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The station of this Station.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facilities(self):
        """Gets the facilities of this Station.


        :return: The facilities of this Station.
        :rtype: List[Facility]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this Station.


        :param facilities: The facilities of this Station.
        :type facilities: List[Facility]
        """

        self._facilities = facilities

    @property
    def name(self):
        """Gets the name of this Station.

        Name of the station.

        :return: The name of this Station.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Station.

        Name of the station.

        :param name: The name of this Station.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def stationnumber(self):
        """Gets the stationnumber of this Station.

        Unique identifier of the station.

        :return: The stationnumber of this Station.
        :rtype: int
        """
        return self._stationnumber

    @stationnumber.setter
    def stationnumber(self, stationnumber):
        """Sets the stationnumber of this Station.

        Unique identifier of the station.

        :param stationnumber: The stationnumber of this Station.
        :type stationnumber: int
        """
        if stationnumber is None:
            raise ValueError("Invalid value for `stationnumber`, must not be `None`")

        self._stationnumber = stationnumber
