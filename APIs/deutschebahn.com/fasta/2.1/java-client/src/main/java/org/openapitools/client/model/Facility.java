/*
 * FaSta - Station Facilities Status
 * A RESTful webservice to retrieve data about the operational state of public elevators and escalators in german railway stations.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: michael.binzen@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A facility provided by this API is either a public elevator or escalator located at a German railway station.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:24.514116-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Facility {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EQUIPMENTNUMBER = "equipmentnumber";
  @SerializedName(SERIALIZED_NAME_EQUIPMENTNUMBER)
  private Long equipmentnumber;

  public static final String SERIALIZED_NAME_GEOCOORD_X = "geocoordX";
  @SerializedName(SERIALIZED_NAME_GEOCOORD_X)
  private Double geocoordX;

  public static final String SERIALIZED_NAME_GEOCOORD_Y = "geocoordY";
  @SerializedName(SERIALIZED_NAME_GEOCOORD_Y)
  private Double geocoordY;

  public static final String SERIALIZED_NAME_OPERATORNAME = "operatorname";
  @SerializedName(SERIALIZED_NAME_OPERATORNAME)
  private String operatorname;

  /**
   * Operational state of the facility.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_EXPLANATION = "stateExplanation";
  @SerializedName(SERIALIZED_NAME_STATE_EXPLANATION)
  private String stateExplanation;

  public static final String SERIALIZED_NAME_STATIONNUMBER = "stationnumber";
  @SerializedName(SERIALIZED_NAME_STATIONNUMBER)
  private Long stationnumber;

  /**
   * Type of the facility.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ESCALATOR("ESCALATOR"),
    
    ELEVATOR("ELEVATOR");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Facility() {
  }

  public Facility description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Textual description of the facility.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Facility equipmentnumber(Long equipmentnumber) {
    this.equipmentnumber = equipmentnumber;
    return this;
  }

  /**
   * Unique identifier of the facility.
   * @return equipmentnumber
   */
  @javax.annotation.Nonnull
  public Long getEquipmentnumber() {
    return equipmentnumber;
  }

  public void setEquipmentnumber(Long equipmentnumber) {
    this.equipmentnumber = equipmentnumber;
  }


  public Facility geocoordX(Double geocoordX) {
    this.geocoordX = geocoordX;
    return this;
  }

  /**
   * Longitude component of geocoordinate in WGS84 format.
   * @return geocoordX
   */
  @javax.annotation.Nullable
  public Double getGeocoordX() {
    return geocoordX;
  }

  public void setGeocoordX(Double geocoordX) {
    this.geocoordX = geocoordX;
  }


  public Facility geocoordY(Double geocoordY) {
    this.geocoordY = geocoordY;
    return this;
  }

  /**
   * Latitude component of geocoordinate in WGS84 format.
   * @return geocoordY
   */
  @javax.annotation.Nullable
  public Double getGeocoordY() {
    return geocoordY;
  }

  public void setGeocoordY(Double geocoordY) {
    this.geocoordY = geocoordY;
  }


  public Facility operatorname(String operatorname) {
    this.operatorname = operatorname;
    return this;
  }

  /**
   * The name of the operator of the facility.
   * @return operatorname
   */
  @javax.annotation.Nullable
  public String getOperatorname() {
    return operatorname;
  }

  public void setOperatorname(String operatorname) {
    this.operatorname = operatorname;
  }


  public Facility state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Operational state of the facility.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Facility stateExplanation(String stateExplanation) {
    this.stateExplanation = stateExplanation;
    return this;
  }

  /**
   * Detailed description of the state.
   * @return stateExplanation
   */
  @javax.annotation.Nullable
  public String getStateExplanation() {
    return stateExplanation;
  }

  public void setStateExplanation(String stateExplanation) {
    this.stateExplanation = stateExplanation;
  }


  public Facility stationnumber(Long stationnumber) {
    this.stationnumber = stationnumber;
    return this;
  }

  /**
   * Number of the station the facility belongs to.
   * @return stationnumber
   */
  @javax.annotation.Nonnull
  public Long getStationnumber() {
    return stationnumber;
  }

  public void setStationnumber(Long stationnumber) {
    this.stationnumber = stationnumber;
  }


  public Facility type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the facility.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Facility facility = (Facility) o;
    return Objects.equals(this.description, facility.description) &&
        Objects.equals(this.equipmentnumber, facility.equipmentnumber) &&
        Objects.equals(this.geocoordX, facility.geocoordX) &&
        Objects.equals(this.geocoordY, facility.geocoordY) &&
        Objects.equals(this.operatorname, facility.operatorname) &&
        Objects.equals(this.state, facility.state) &&
        Objects.equals(this.stateExplanation, facility.stateExplanation) &&
        Objects.equals(this.stationnumber, facility.stationnumber) &&
        Objects.equals(this.type, facility.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, equipmentnumber, geocoordX, geocoordY, operatorname, state, stateExplanation, stationnumber, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Facility {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    equipmentnumber: ").append(toIndentedString(equipmentnumber)).append("\n");
    sb.append("    geocoordX: ").append(toIndentedString(geocoordX)).append("\n");
    sb.append("    geocoordY: ").append(toIndentedString(geocoordY)).append("\n");
    sb.append("    operatorname: ").append(toIndentedString(operatorname)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateExplanation: ").append(toIndentedString(stateExplanation)).append("\n");
    sb.append("    stationnumber: ").append(toIndentedString(stationnumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("equipmentnumber");
    openapiFields.add("geocoordX");
    openapiFields.add("geocoordY");
    openapiFields.add("operatorname");
    openapiFields.add("state");
    openapiFields.add("stateExplanation");
    openapiFields.add("stationnumber");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("equipmentnumber");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("stationnumber");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Facility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Facility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Facility is not found in the empty JSON string", Facility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Facility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Facility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Facility.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("operatorname") != null && !jsonObj.get("operatorname").isJsonNull()) && !jsonObj.get("operatorname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatorname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatorname").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("stateExplanation") != null && !jsonObj.get("stateExplanation").isJsonNull()) && !jsonObj.get("stateExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateExplanation").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Facility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Facility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Facility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Facility.class));

       return (TypeAdapter<T>) new TypeAdapter<Facility>() {
           @Override
           public void write(JsonWriter out, Facility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Facility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Facility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Facility
   * @throws IOException if the JSON string is invalid with respect to Facility
   */
  public static Facility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Facility.class);
  }

  /**
   * Convert an instance of Facility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

