/*
 * FaSta - Station Facilities Status
 * A RESTful webservice to retrieve data about the operational state of public elevators and escalators in german railway stations.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: michael.binzen@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Facility;
import java.util.Set;
import org.openapitools.client.model.Station;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for findFacilities
     * @param type Type of the facility. (optional)
     * @param state Operational state of the facility. (optional)
     * @param equipmentnumbers List of equipmentnumbers to select. (optional)
     * @param stationnumber Number of the station the facilities belong to. (optional)
     * @param area Geo coordinate rectangle in WGS84-format to filter facilities by geographical position. Parameters must be 4 numbers exactly as follows: longitudeWest, latitudeSouth, longitudeEast, latitudeNorth. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facility data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The given filters contained invalid values. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findFacilitiesCall(Set<String> type, Set<String> state, Set<Long> equipmentnumbers, Long stationnumber, List<String> area, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "type", type));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "state", state));
        }

        if (equipmentnumbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "equipmentnumbers", equipmentnumbers));
        }

        if (stationnumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stationnumber", stationnumber));
        }

        if (area != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "area", area));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findFacilitiesValidateBeforeCall(Set<String> type, Set<String> state, Set<Long> equipmentnumbers, Long stationnumber, List<String> area, final ApiCallback _callback) throws ApiException {
        return findFacilitiesCall(type, state, equipmentnumbers, stationnumber, area, _callback);

    }

    /**
     * 
     * Access to public facilities (escalators and elevators) in railway stations
     * @param type Type of the facility. (optional)
     * @param state Operational state of the facility. (optional)
     * @param equipmentnumbers List of equipmentnumbers to select. (optional)
     * @param stationnumber Number of the station the facilities belong to. (optional)
     * @param area Geo coordinate rectangle in WGS84-format to filter facilities by geographical position. Parameters must be 4 numbers exactly as follows: longitudeWest, latitudeSouth, longitudeEast, latitudeNorth. (optional)
     * @return List&lt;Facility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facility data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The given filters contained invalid values. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public List<Facility> findFacilities(Set<String> type, Set<String> state, Set<Long> equipmentnumbers, Long stationnumber, List<String> area) throws ApiException {
        ApiResponse<List<Facility>> localVarResp = findFacilitiesWithHttpInfo(type, state, equipmentnumbers, stationnumber, area);
        return localVarResp.getData();
    }

    /**
     * 
     * Access to public facilities (escalators and elevators) in railway stations
     * @param type Type of the facility. (optional)
     * @param state Operational state of the facility. (optional)
     * @param equipmentnumbers List of equipmentnumbers to select. (optional)
     * @param stationnumber Number of the station the facilities belong to. (optional)
     * @param area Geo coordinate rectangle in WGS84-format to filter facilities by geographical position. Parameters must be 4 numbers exactly as follows: longitudeWest, latitudeSouth, longitudeEast, latitudeNorth. (optional)
     * @return ApiResponse&lt;List&lt;Facility&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facility data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The given filters contained invalid values. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Facility>> findFacilitiesWithHttpInfo(Set<String> type, Set<String> state, Set<Long> equipmentnumbers, Long stationnumber, List<String> area) throws ApiException {
        okhttp3.Call localVarCall = findFacilitiesValidateBeforeCall(type, state, equipmentnumbers, stationnumber, area, null);
        Type localVarReturnType = new TypeToken<List<Facility>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Access to public facilities (escalators and elevators) in railway stations
     * @param type Type of the facility. (optional)
     * @param state Operational state of the facility. (optional)
     * @param equipmentnumbers List of equipmentnumbers to select. (optional)
     * @param stationnumber Number of the station the facilities belong to. (optional)
     * @param area Geo coordinate rectangle in WGS84-format to filter facilities by geographical position. Parameters must be 4 numbers exactly as follows: longitudeWest, latitudeSouth, longitudeEast, latitudeNorth. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facility data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The given filters contained invalid values. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findFacilitiesAsync(Set<String> type, Set<String> state, Set<Long> equipmentnumbers, Long stationnumber, List<String> area, final ApiCallback<List<Facility>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findFacilitiesValidateBeforeCall(type, state, equipmentnumbers, stationnumber, area, _callback);
        Type localVarReturnType = new TypeToken<List<Facility>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findStationByStationNumber
     * @param stationnumber Number of the station to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> station data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested station could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findStationByStationNumberCall(Long stationnumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stations/{stationnumber}"
            .replace("{" + "stationnumber" + "}", localVarApiClient.escapeString(stationnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findStationByStationNumberValidateBeforeCall(Long stationnumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationnumber' is set
        if (stationnumber == null) {
            throw new ApiException("Missing the required parameter 'stationnumber' when calling findStationByStationNumber(Async)");
        }

        return findStationByStationNumberCall(stationnumber, _callback);

    }

    /**
     * 
     * Returns information about a station (and its corresponding facilities) identified by a stationnumber.
     * @param stationnumber Number of the station to fetch. (required)
     * @return Station
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> station data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested station could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public Station findStationByStationNumber(Long stationnumber) throws ApiException {
        ApiResponse<Station> localVarResp = findStationByStationNumberWithHttpInfo(stationnumber);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a station (and its corresponding facilities) identified by a stationnumber.
     * @param stationnumber Number of the station to fetch. (required)
     * @return ApiResponse&lt;Station&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> station data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested station could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Station> findStationByStationNumberWithHttpInfo(Long stationnumber) throws ApiException {
        okhttp3.Call localVarCall = findStationByStationNumberValidateBeforeCall(stationnumber, null);
        Type localVarReturnType = new TypeToken<Station>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a station (and its corresponding facilities) identified by a stationnumber.
     * @param stationnumber Number of the station to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> station data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested station could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findStationByStationNumberAsync(Long stationnumber, final ApiCallback<Station> _callback) throws ApiException {

        okhttp3.Call localVarCall = findStationByStationNumberValidateBeforeCall(stationnumber, _callback);
        Type localVarReturnType = new TypeToken<Station>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacilityByEquipmentNumber
     * @param equipmentnumber Equipmentnumber of the facility to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facility data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested facility could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilityByEquipmentNumberCall(Long equipmentnumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facilities/{equipmentnumber}"
            .replace("{" + "equipmentnumber" + "}", localVarApiClient.escapeString(equipmentnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacilityByEquipmentNumberValidateBeforeCall(Long equipmentnumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'equipmentnumber' is set
        if (equipmentnumber == null) {
            throw new ApiException("Missing the required parameter 'equipmentnumber' when calling getFacilityByEquipmentNumber(Async)");
        }

        return getFacilityByEquipmentNumberCall(equipmentnumber, _callback);

    }

    /**
     * 
     * Returns the facility identified by its equipmentnumber.
     * @param equipmentnumber Equipmentnumber of the facility to fetch. (required)
     * @return Facility
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facility data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested facility could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public Facility getFacilityByEquipmentNumber(Long equipmentnumber) throws ApiException {
        ApiResponse<Facility> localVarResp = getFacilityByEquipmentNumberWithHttpInfo(equipmentnumber);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the facility identified by its equipmentnumber.
     * @param equipmentnumber Equipmentnumber of the facility to fetch. (required)
     * @return ApiResponse&lt;Facility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facility data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested facility could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Facility> getFacilityByEquipmentNumberWithHttpInfo(Long equipmentnumber) throws ApiException {
        okhttp3.Call localVarCall = getFacilityByEquipmentNumberValidateBeforeCall(equipmentnumber, null);
        Type localVarReturnType = new TypeToken<Facility>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the facility identified by its equipmentnumber.
     * @param equipmentnumber Equipmentnumber of the facility to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facility data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested facility could not be found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The requested representation format is not available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A processing error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service has been disabled temporarily. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilityByEquipmentNumberAsync(Long equipmentnumber, final ApiCallback<Facility> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacilityByEquipmentNumberValidateBeforeCall(equipmentnumber, _callback);
        Type localVarReturnType = new TypeToken<Facility>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
