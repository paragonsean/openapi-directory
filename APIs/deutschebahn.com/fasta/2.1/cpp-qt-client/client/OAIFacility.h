/**
 * FaSta - Station Facilities Status
 * A RESTful webservice to retrieve data about the operational state of public elevators and escalators in german railway stations.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: michael.binzen@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFacility.h
 *
 * A facility provided by this API is either a public elevator or escalator located at a German railway station.
 */

#ifndef OAIFacility_H
#define OAIFacility_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFacility : public OAIObject {
public:
    OAIFacility();
    OAIFacility(QString json);
    ~OAIFacility() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint64 getEquipmentnumber() const;
    void setEquipmentnumber(const qint64 &equipmentnumber);
    bool is_equipmentnumber_Set() const;
    bool is_equipmentnumber_Valid() const;

    double getGeocoordX() const;
    void setGeocoordX(const double &geocoord_x);
    bool is_geocoord_x_Set() const;
    bool is_geocoord_x_Valid() const;

    double getGeocoordY() const;
    void setGeocoordY(const double &geocoord_y);
    bool is_geocoord_y_Set() const;
    bool is_geocoord_y_Valid() const;

    QString getOperatorname() const;
    void setOperatorname(const QString &operatorname);
    bool is_operatorname_Set() const;
    bool is_operatorname_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateExplanation() const;
    void setStateExplanation(const QString &state_explanation);
    bool is_state_explanation_Set() const;
    bool is_state_explanation_Valid() const;

    qint64 getStationnumber() const;
    void setStationnumber(const qint64 &stationnumber);
    bool is_stationnumber_Set() const;
    bool is_stationnumber_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint64 m_equipmentnumber;
    bool m_equipmentnumber_isSet;
    bool m_equipmentnumber_isValid;

    double m_geocoord_x;
    bool m_geocoord_x_isSet;
    bool m_geocoord_x_isValid;

    double m_geocoord_y;
    bool m_geocoord_y_isSet;
    bool m_geocoord_y_isValid;

    QString m_operatorname;
    bool m_operatorname_isSet;
    bool m_operatorname_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_explanation;
    bool m_state_explanation_isSet;
    bool m_state_explanation_isValid;

    qint64 m_stationnumber;
    bool m_stationnumber_isSet;
    bool m_stationnumber_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFacility)

#endif // OAIFacility_H
