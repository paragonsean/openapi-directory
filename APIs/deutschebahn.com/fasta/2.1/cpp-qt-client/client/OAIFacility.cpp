/**
 * FaSta - Station Facilities Status
 * A RESTful webservice to retrieve data about the operational state of public elevators and escalators in german railway stations.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: michael.binzen@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacility::OAIFacility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacility::OAIFacility() {
    this->initializeModel();
}

OAIFacility::~OAIFacility() {}

void OAIFacility::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_equipmentnumber_isSet = false;
    m_equipmentnumber_isValid = false;

    m_geocoord_x_isSet = false;
    m_geocoord_x_isValid = false;

    m_geocoord_y_isSet = false;
    m_geocoord_y_isValid = false;

    m_operatorname_isSet = false;
    m_operatorname_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_explanation_isSet = false;
    m_state_explanation_isValid = false;

    m_stationnumber_isSet = false;
    m_stationnumber_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFacility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacility::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_equipmentnumber_isValid = ::OpenAPI::fromJsonValue(m_equipmentnumber, json[QString("equipmentnumber")]);
    m_equipmentnumber_isSet = !json[QString("equipmentnumber")].isNull() && m_equipmentnumber_isValid;

    m_geocoord_x_isValid = ::OpenAPI::fromJsonValue(m_geocoord_x, json[QString("geocoordX")]);
    m_geocoord_x_isSet = !json[QString("geocoordX")].isNull() && m_geocoord_x_isValid;

    m_geocoord_y_isValid = ::OpenAPI::fromJsonValue(m_geocoord_y, json[QString("geocoordY")]);
    m_geocoord_y_isSet = !json[QString("geocoordY")].isNull() && m_geocoord_y_isValid;

    m_operatorname_isValid = ::OpenAPI::fromJsonValue(m_operatorname, json[QString("operatorname")]);
    m_operatorname_isSet = !json[QString("operatorname")].isNull() && m_operatorname_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_explanation_isValid = ::OpenAPI::fromJsonValue(m_state_explanation, json[QString("stateExplanation")]);
    m_state_explanation_isSet = !json[QString("stateExplanation")].isNull() && m_state_explanation_isValid;

    m_stationnumber_isValid = ::OpenAPI::fromJsonValue(m_stationnumber, json[QString("stationnumber")]);
    m_stationnumber_isSet = !json[QString("stationnumber")].isNull() && m_stationnumber_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFacility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacility::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_equipmentnumber_isSet) {
        obj.insert(QString("equipmentnumber"), ::OpenAPI::toJsonValue(m_equipmentnumber));
    }
    if (m_geocoord_x_isSet) {
        obj.insert(QString("geocoordX"), ::OpenAPI::toJsonValue(m_geocoord_x));
    }
    if (m_geocoord_y_isSet) {
        obj.insert(QString("geocoordY"), ::OpenAPI::toJsonValue(m_geocoord_y));
    }
    if (m_operatorname_isSet) {
        obj.insert(QString("operatorname"), ::OpenAPI::toJsonValue(m_operatorname));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_explanation_isSet) {
        obj.insert(QString("stateExplanation"), ::OpenAPI::toJsonValue(m_state_explanation));
    }
    if (m_stationnumber_isSet) {
        obj.insert(QString("stationnumber"), ::OpenAPI::toJsonValue(m_stationnumber));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFacility::getDescription() const {
    return m_description;
}
void OAIFacility::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFacility::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFacility::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIFacility::getEquipmentnumber() const {
    return m_equipmentnumber;
}
void OAIFacility::setEquipmentnumber(const qint64 &equipmentnumber) {
    m_equipmentnumber = equipmentnumber;
    m_equipmentnumber_isSet = true;
}

bool OAIFacility::is_equipmentnumber_Set() const{
    return m_equipmentnumber_isSet;
}

bool OAIFacility::is_equipmentnumber_Valid() const{
    return m_equipmentnumber_isValid;
}

double OAIFacility::getGeocoordX() const {
    return m_geocoord_x;
}
void OAIFacility::setGeocoordX(const double &geocoord_x) {
    m_geocoord_x = geocoord_x;
    m_geocoord_x_isSet = true;
}

bool OAIFacility::is_geocoord_x_Set() const{
    return m_geocoord_x_isSet;
}

bool OAIFacility::is_geocoord_x_Valid() const{
    return m_geocoord_x_isValid;
}

double OAIFacility::getGeocoordY() const {
    return m_geocoord_y;
}
void OAIFacility::setGeocoordY(const double &geocoord_y) {
    m_geocoord_y = geocoord_y;
    m_geocoord_y_isSet = true;
}

bool OAIFacility::is_geocoord_y_Set() const{
    return m_geocoord_y_isSet;
}

bool OAIFacility::is_geocoord_y_Valid() const{
    return m_geocoord_y_isValid;
}

QString OAIFacility::getOperatorname() const {
    return m_operatorname;
}
void OAIFacility::setOperatorname(const QString &operatorname) {
    m_operatorname = operatorname;
    m_operatorname_isSet = true;
}

bool OAIFacility::is_operatorname_Set() const{
    return m_operatorname_isSet;
}

bool OAIFacility::is_operatorname_Valid() const{
    return m_operatorname_isValid;
}

QString OAIFacility::getState() const {
    return m_state;
}
void OAIFacility::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFacility::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFacility::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIFacility::getStateExplanation() const {
    return m_state_explanation;
}
void OAIFacility::setStateExplanation(const QString &state_explanation) {
    m_state_explanation = state_explanation;
    m_state_explanation_isSet = true;
}

bool OAIFacility::is_state_explanation_Set() const{
    return m_state_explanation_isSet;
}

bool OAIFacility::is_state_explanation_Valid() const{
    return m_state_explanation_isValid;
}

qint64 OAIFacility::getStationnumber() const {
    return m_stationnumber;
}
void OAIFacility::setStationnumber(const qint64 &stationnumber) {
    m_stationnumber = stationnumber;
    m_stationnumber_isSet = true;
}

bool OAIFacility::is_stationnumber_Set() const{
    return m_stationnumber_isSet;
}

bool OAIFacility::is_stationnumber_Valid() const{
    return m_stationnumber_isValid;
}

QString OAIFacility::getType() const {
    return m_type;
}
void OAIFacility::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFacility::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFacility::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFacility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipmentnumber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geocoord_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geocoord_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operatorname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stationnumber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacility::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_equipmentnumber_isValid && m_state_isValid && m_stationnumber_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
