/*
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GeographicPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RiL100Identifier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:18.691369-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RiL100Identifier {
  public static final String SERIALIZED_NAME_GEOGRAPHIC_COORDINATE = "geographicCoordinate";
  @SerializedName(SERIALIZED_NAME_GEOGRAPHIC_COORDINATE)
  private GeographicPoint geographicCoordinate;

  public static final String SERIALIZED_NAME_HAS_STEAM_PERMISSION = "hasSteamPermission";
  @SerializedName(SERIALIZED_NAME_HAS_STEAM_PERMISSION)
  private Boolean hasSteamPermission;

  public static final String SERIALIZED_NAME_IS_MAIN = "isMain";
  @SerializedName(SERIALIZED_NAME_IS_MAIN)
  private Boolean isMain;

  public static final String SERIALIZED_NAME_RIL_IDENTIFIER = "rilIdentifier";
  @SerializedName(SERIALIZED_NAME_RIL_IDENTIFIER)
  private String rilIdentifier;

  public RiL100Identifier() {
  }

  public RiL100Identifier geographicCoordinate(GeographicPoint geographicCoordinate) {
    this.geographicCoordinate = geographicCoordinate;
    return this;
  }

  /**
   * Get geographicCoordinate
   * @return geographicCoordinate
   */
  @javax.annotation.Nullable
  public GeographicPoint getGeographicCoordinate() {
    return geographicCoordinate;
  }

  public void setGeographicCoordinate(GeographicPoint geographicCoordinate) {
    this.geographicCoordinate = geographicCoordinate;
  }


  public RiL100Identifier hasSteamPermission(Boolean hasSteamPermission) {
    this.hasSteamPermission = hasSteamPermission;
    return this;
  }

  /**
   * permission for steam engines y/n
   * @return hasSteamPermission
   */
  @javax.annotation.Nullable
  public Boolean getHasSteamPermission() {
    return hasSteamPermission;
  }

  public void setHasSteamPermission(Boolean hasSteamPermission) {
    this.hasSteamPermission = hasSteamPermission;
  }


  public RiL100Identifier isMain(Boolean isMain) {
    this.isMain = isMain;
    return this;
  }

  /**
   * is stations main Ril100. Determination of Station&amp;Service AG
   * @return isMain
   */
  @javax.annotation.Nullable
  public Boolean getIsMain() {
    return isMain;
  }

  public void setIsMain(Boolean isMain) {
    this.isMain = isMain;
  }


  public RiL100Identifier rilIdentifier(String rilIdentifier) {
    this.rilIdentifier = rilIdentifier;
    return this;
  }

  /**
   * Unique identifier of &#39;Betriebsstelle&#39; according to Ril100
   * @return rilIdentifier
   */
  @javax.annotation.Nullable
  public String getRilIdentifier() {
    return rilIdentifier;
  }

  public void setRilIdentifier(String rilIdentifier) {
    this.rilIdentifier = rilIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiL100Identifier riL100Identifier = (RiL100Identifier) o;
    return Objects.equals(this.geographicCoordinate, riL100Identifier.geographicCoordinate) &&
        Objects.equals(this.hasSteamPermission, riL100Identifier.hasSteamPermission) &&
        Objects.equals(this.isMain, riL100Identifier.isMain) &&
        Objects.equals(this.rilIdentifier, riL100Identifier.rilIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geographicCoordinate, hasSteamPermission, isMain, rilIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiL100Identifier {\n");
    sb.append("    geographicCoordinate: ").append(toIndentedString(geographicCoordinate)).append("\n");
    sb.append("    hasSteamPermission: ").append(toIndentedString(hasSteamPermission)).append("\n");
    sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
    sb.append("    rilIdentifier: ").append(toIndentedString(rilIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("geographicCoordinate");
    openapiFields.add("hasSteamPermission");
    openapiFields.add("isMain");
    openapiFields.add("rilIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RiL100Identifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RiL100Identifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RiL100Identifier is not found in the empty JSON string", RiL100Identifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RiL100Identifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RiL100Identifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `geographicCoordinate`
      if (jsonObj.get("geographicCoordinate") != null && !jsonObj.get("geographicCoordinate").isJsonNull()) {
        GeographicPoint.validateJsonElement(jsonObj.get("geographicCoordinate"));
      }
      if ((jsonObj.get("rilIdentifier") != null && !jsonObj.get("rilIdentifier").isJsonNull()) && !jsonObj.get("rilIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rilIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rilIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RiL100Identifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RiL100Identifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RiL100Identifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RiL100Identifier.class));

       return (TypeAdapter<T>) new TypeAdapter<RiL100Identifier>() {
           @Override
           public void write(JsonWriter out, RiL100Identifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RiL100Identifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RiL100Identifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RiL100Identifier
   * @throws IOException if the JSON string is invalid with respect to RiL100Identifier
   */
  public static RiL100Identifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RiL100Identifier.class);
  }

  /**
   * Convert an instance of RiL100Identifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

