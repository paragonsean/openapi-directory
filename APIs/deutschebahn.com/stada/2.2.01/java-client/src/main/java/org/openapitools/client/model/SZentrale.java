/*
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 3-S-Zentralen are 7/24 hours operating centers for german railway stations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:18.691369-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SZentrale {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_INTERNAL_FAX_NUMBER = "internalFaxNumber";
  @SerializedName(SERIALIZED_NAME_INTERNAL_FAX_NUMBER)
  private String internalFaxNumber;

  public static final String SERIALIZED_NAME_INTERNAL_PHONE_NUMBER = "internalPhoneNumber";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PHONE_NUMBER)
  private String internalPhoneNumber;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_NUMBER = "mobilePhoneNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_NUMBER)
  private String mobilePhoneNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PUBLIC_FAX_NUMBER = "publicFaxNumber";
  @SerializedName(SERIALIZED_NAME_PUBLIC_FAX_NUMBER)
  private String publicFaxNumber;

  public static final String SERIALIZED_NAME_PUBLIC_PHONE_NUMBER = "publicPhoneNumber";
  @SerializedName(SERIALIZED_NAME_PUBLIC_PHONE_NUMBER)
  private String publicPhoneNumber;

  public SZentrale() {
  }

  public SZentrale address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public SZentrale email(String email) {
    this.email = email;
    return this;
  }

  /**
   * email adress of the 3-S-Zentrale (no longer supported!)
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SZentrale internalFaxNumber(String internalFaxNumber) {
    this.internalFaxNumber = internalFaxNumber;
    return this;
  }

  /**
   * internal fax number
   * @return internalFaxNumber
   */
  @javax.annotation.Nullable
  public String getInternalFaxNumber() {
    return internalFaxNumber;
  }

  public void setInternalFaxNumber(String internalFaxNumber) {
    this.internalFaxNumber = internalFaxNumber;
  }


  public SZentrale internalPhoneNumber(String internalPhoneNumber) {
    this.internalPhoneNumber = internalPhoneNumber;
    return this;
  }

  /**
   * internal phone number
   * @return internalPhoneNumber
   */
  @javax.annotation.Nullable
  public String getInternalPhoneNumber() {
    return internalPhoneNumber;
  }

  public void setInternalPhoneNumber(String internalPhoneNumber) {
    this.internalPhoneNumber = internalPhoneNumber;
  }


  public SZentrale mobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  /**
   * mobile phone number (no longer supported!)
   * @return mobilePhoneNumber
   */
  @javax.annotation.Nullable
  public String getMobilePhoneNumber() {
    return mobilePhoneNumber;
  }

  public void setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
  }


  public SZentrale name(String name) {
    this.name = name;
    return this;
  }

  /**
   * unique identifier of 3SZentrale
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SZentrale number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * unique identifier for SZentrale
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public SZentrale publicFaxNumber(String publicFaxNumber) {
    this.publicFaxNumber = publicFaxNumber;
    return this;
  }

  /**
   * public fax number
   * @return publicFaxNumber
   */
  @javax.annotation.Nullable
  public String getPublicFaxNumber() {
    return publicFaxNumber;
  }

  public void setPublicFaxNumber(String publicFaxNumber) {
    this.publicFaxNumber = publicFaxNumber;
  }


  public SZentrale publicPhoneNumber(String publicPhoneNumber) {
    this.publicPhoneNumber = publicPhoneNumber;
    return this;
  }

  /**
   * Get publicPhoneNumber
   * @return publicPhoneNumber
   */
  @javax.annotation.Nullable
  public String getPublicPhoneNumber() {
    return publicPhoneNumber;
  }

  public void setPublicPhoneNumber(String publicPhoneNumber) {
    this.publicPhoneNumber = publicPhoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SZentrale szentrale = (SZentrale) o;
    return Objects.equals(this.address, szentrale.address) &&
        Objects.equals(this.email, szentrale.email) &&
        Objects.equals(this.internalFaxNumber, szentrale.internalFaxNumber) &&
        Objects.equals(this.internalPhoneNumber, szentrale.internalPhoneNumber) &&
        Objects.equals(this.mobilePhoneNumber, szentrale.mobilePhoneNumber) &&
        Objects.equals(this.name, szentrale.name) &&
        Objects.equals(this.number, szentrale.number) &&
        Objects.equals(this.publicFaxNumber, szentrale.publicFaxNumber) &&
        Objects.equals(this.publicPhoneNumber, szentrale.publicPhoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, internalFaxNumber, internalPhoneNumber, mobilePhoneNumber, name, number, publicFaxNumber, publicPhoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SZentrale {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    internalFaxNumber: ").append(toIndentedString(internalFaxNumber)).append("\n");
    sb.append("    internalPhoneNumber: ").append(toIndentedString(internalPhoneNumber)).append("\n");
    sb.append("    mobilePhoneNumber: ").append(toIndentedString(mobilePhoneNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    publicFaxNumber: ").append(toIndentedString(publicFaxNumber)).append("\n");
    sb.append("    publicPhoneNumber: ").append(toIndentedString(publicPhoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("email");
    openapiFields.add("internalFaxNumber");
    openapiFields.add("internalPhoneNumber");
    openapiFields.add("mobilePhoneNumber");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("publicFaxNumber");
    openapiFields.add("publicPhoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SZentrale
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SZentrale.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SZentrale is not found in the empty JSON string", SZentrale.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SZentrale.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SZentrale` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("internalFaxNumber") != null && !jsonObj.get("internalFaxNumber").isJsonNull()) && !jsonObj.get("internalFaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalFaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalFaxNumber").toString()));
      }
      if ((jsonObj.get("internalPhoneNumber") != null && !jsonObj.get("internalPhoneNumber").isJsonNull()) && !jsonObj.get("internalPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalPhoneNumber").toString()));
      }
      if ((jsonObj.get("mobilePhoneNumber") != null && !jsonObj.get("mobilePhoneNumber").isJsonNull()) && !jsonObj.get("mobilePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("publicFaxNumber") != null && !jsonObj.get("publicFaxNumber").isJsonNull()) && !jsonObj.get("publicFaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicFaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicFaxNumber").toString()));
      }
      if ((jsonObj.get("publicPhoneNumber") != null && !jsonObj.get("publicPhoneNumber").isJsonNull()) && !jsonObj.get("publicPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicPhoneNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SZentrale.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SZentrale' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SZentrale> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SZentrale.class));

       return (TypeAdapter<T>) new TypeAdapter<SZentrale>() {
           @Override
           public void write(JsonWriter out, SZentrale value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SZentrale read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SZentrale given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SZentrale
   * @throws IOException if the JSON string is invalid with respect to SZentrale
   */
  public static SZentrale fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SZentrale.class);
  }

  /**
   * Convert an instance of SZentrale to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

