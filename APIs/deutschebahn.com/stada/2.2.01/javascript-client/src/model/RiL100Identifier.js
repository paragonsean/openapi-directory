/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeographicPoint from './GeographicPoint';

/**
 * The RiL100Identifier model module.
 * @module model/RiL100Identifier
 * @version 2.2.01
 */
class RiL100Identifier {
    /**
     * Constructs a new <code>RiL100Identifier</code>.
     * @alias module:model/RiL100Identifier
     */
    constructor() { 
        
        RiL100Identifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RiL100Identifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RiL100Identifier} obj Optional instance to populate.
     * @return {module:model/RiL100Identifier} The populated <code>RiL100Identifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RiL100Identifier();

            if (data.hasOwnProperty('geographicCoordinate')) {
                obj['geographicCoordinate'] = GeographicPoint.constructFromObject(data['geographicCoordinate']);
            }
            if (data.hasOwnProperty('hasSteamPermission')) {
                obj['hasSteamPermission'] = ApiClient.convertToType(data['hasSteamPermission'], 'Boolean');
            }
            if (data.hasOwnProperty('isMain')) {
                obj['isMain'] = ApiClient.convertToType(data['isMain'], 'Boolean');
            }
            if (data.hasOwnProperty('rilIdentifier')) {
                obj['rilIdentifier'] = ApiClient.convertToType(data['rilIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RiL100Identifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RiL100Identifier</code>.
     */
    static validateJSON(data) {
        // validate the optional field `geographicCoordinate`
        if (data['geographicCoordinate']) { // data not null
          GeographicPoint.validateJSON(data['geographicCoordinate']);
        }
        // ensure the json data is a string
        if (data['rilIdentifier'] && !(typeof data['rilIdentifier'] === 'string' || data['rilIdentifier'] instanceof String)) {
            throw new Error("Expected the field `rilIdentifier` to be a primitive type in the JSON string but got " + data['rilIdentifier']);
        }

        return true;
    }


}



/**
 * @member {module:model/GeographicPoint} geographicCoordinate
 */
RiL100Identifier.prototype['geographicCoordinate'] = undefined;

/**
 * permission for steam engines y/n
 * @member {Boolean} hasSteamPermission
 */
RiL100Identifier.prototype['hasSteamPermission'] = undefined;

/**
 * is stations main Ril100. Determination of Station&Service AG
 * @member {Boolean} isMain
 */
RiL100Identifier.prototype['isMain'] = undefined;

/**
 * Unique identifier of 'Betriebsstelle' according to Ril100
 * @member {String} rilIdentifier
 */
RiL100Identifier.prototype['rilIdentifier'] = undefined;






export default RiL100Identifier;

