/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Aufgabentraeger from './Aufgabentraeger';
import EVANumber from './EVANumber';
import Partial from './Partial';
import RegionalBereichRef from './RegionalBereichRef';
import RiL100Identifier from './RiL100Identifier';
import SZentraleRef from './SZentraleRef';
import Schedule from './Schedule';
import StationManagementRef from './StationManagementRef';
import TimetableOffice from './TimetableOffice';

/**
 * The Station model module.
 * @module model/Station
 * @version 2.2.01
 */
class Station {
    /**
     * Constructs a new <code>Station</code>.
     * @alias module:model/Station
     */
    constructor() { 
        
        Station.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Station</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Station} obj Optional instance to populate.
     * @return {module:model/Station} The populated <code>Station</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Station();

            if (data.hasOwnProperty('DBinformation')) {
                obj['DBinformation'] = Schedule.constructFromObject(data['DBinformation']);
            }
            if (data.hasOwnProperty('aufgabentraeger')) {
                obj['aufgabentraeger'] = Aufgabentraeger.constructFromObject(data['aufgabentraeger']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'Number');
            }
            if (data.hasOwnProperty('evaNumbers')) {
                obj['evaNumbers'] = ApiClient.convertToType(data['evaNumbers'], [EVANumber]);
            }
            if (data.hasOwnProperty('federalState')) {
                obj['federalState'] = ApiClient.convertToType(data['federalState'], 'String');
            }
            if (data.hasOwnProperty('hasBicycleParking')) {
                obj['hasBicycleParking'] = ApiClient.convertToType(data['hasBicycleParking'], 'Boolean');
            }
            if (data.hasOwnProperty('hasCarRental')) {
                obj['hasCarRental'] = ApiClient.convertToType(data['hasCarRental'], 'Boolean');
            }
            if (data.hasOwnProperty('hasDBLounge')) {
                obj['hasDBLounge'] = ApiClient.convertToType(data['hasDBLounge'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLocalPublicTransport')) {
                obj['hasLocalPublicTransport'] = ApiClient.convertToType(data['hasLocalPublicTransport'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLockerSystem')) {
                obj['hasLockerSystem'] = ApiClient.convertToType(data['hasLockerSystem'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLostAndFound')) {
                obj['hasLostAndFound'] = ApiClient.convertToType(data['hasLostAndFound'], 'Boolean');
            }
            if (data.hasOwnProperty('hasMobilityService')) {
                obj['hasMobilityService'] = ApiClient.convertToType(data['hasMobilityService'], 'String');
            }
            if (data.hasOwnProperty('hasParking')) {
                obj['hasParking'] = ApiClient.convertToType(data['hasParking'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPublicFacilities')) {
                obj['hasPublicFacilities'] = ApiClient.convertToType(data['hasPublicFacilities'], 'Boolean');
            }
            if (data.hasOwnProperty('hasRailwayMission')) {
                obj['hasRailwayMission'] = ApiClient.convertToType(data['hasRailwayMission'], 'Boolean');
            }
            if (data.hasOwnProperty('hasSteplessAccess')) {
                obj['hasSteplessAccess'] = Partial.constructFromObject(data['hasSteplessAccess']);
            }
            if (data.hasOwnProperty('hasTaxiRank')) {
                obj['hasTaxiRank'] = ApiClient.convertToType(data['hasTaxiRank'], 'Boolean');
            }
            if (data.hasOwnProperty('hasTravelCenter')) {
                obj['hasTravelCenter'] = ApiClient.convertToType(data['hasTravelCenter'], 'Boolean');
            }
            if (data.hasOwnProperty('hasTravelNecessities')) {
                obj['hasTravelNecessities'] = ApiClient.convertToType(data['hasTravelNecessities'], 'Boolean');
            }
            if (data.hasOwnProperty('hasWiFi')) {
                obj['hasWiFi'] = ApiClient.convertToType(data['hasWiFi'], 'Boolean');
            }
            if (data.hasOwnProperty('localServiceStaff')) {
                obj['localServiceStaff'] = Schedule.constructFromObject(data['localServiceStaff']);
            }
            if (data.hasOwnProperty('mailingAdress')) {
                obj['mailingAdress'] = Address.constructFromObject(data['mailingAdress']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('priceCategory')) {
                obj['priceCategory'] = ApiClient.convertToType(data['priceCategory'], 'Number');
            }
            if (data.hasOwnProperty('regionalbereich')) {
                obj['regionalbereich'] = RegionalBereichRef.constructFromObject(data['regionalbereich']);
            }
            if (data.hasOwnProperty('riL100Identifiers')) {
                obj['riL100Identifiers'] = ApiClient.convertToType(data['riL100Identifiers'], [RiL100Identifier]);
            }
            if (data.hasOwnProperty('stationManagement')) {
                obj['stationManagement'] = StationManagementRef.constructFromObject(data['stationManagement']);
            }
            if (data.hasOwnProperty('szentrale')) {
                obj['szentrale'] = SZentraleRef.constructFromObject(data['szentrale']);
            }
            if (data.hasOwnProperty('timetableOffice')) {
                obj['timetableOffice'] = TimetableOffice.constructFromObject(data['timetableOffice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Station</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Station</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DBinformation`
        if (data['DBinformation']) { // data not null
          Schedule.validateJSON(data['DBinformation']);
        }
        // validate the optional field `aufgabentraeger`
        if (data['aufgabentraeger']) { // data not null
          Aufgabentraeger.validateJSON(data['aufgabentraeger']);
        }
        if (data['evaNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['evaNumbers'])) {
                throw new Error("Expected the field `evaNumbers` to be an array in the JSON data but got " + data['evaNumbers']);
            }
            // validate the optional field `evaNumbers` (array)
            for (const item of data['evaNumbers']) {
                EVANumber.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['federalState'] && !(typeof data['federalState'] === 'string' || data['federalState'] instanceof String)) {
            throw new Error("Expected the field `federalState` to be a primitive type in the JSON string but got " + data['federalState']);
        }
        // ensure the json data is a string
        if (data['hasMobilityService'] && !(typeof data['hasMobilityService'] === 'string' || data['hasMobilityService'] instanceof String)) {
            throw new Error("Expected the field `hasMobilityService` to be a primitive type in the JSON string but got " + data['hasMobilityService']);
        }
        // validate the optional field `localServiceStaff`
        if (data['localServiceStaff']) { // data not null
          Schedule.validateJSON(data['localServiceStaff']);
        }
        // validate the optional field `mailingAdress`
        if (data['mailingAdress']) { // data not null
          Address.validateJSON(data['mailingAdress']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `regionalbereich`
        if (data['regionalbereich']) { // data not null
          RegionalBereichRef.validateJSON(data['regionalbereich']);
        }
        if (data['riL100Identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['riL100Identifiers'])) {
                throw new Error("Expected the field `riL100Identifiers` to be an array in the JSON data but got " + data['riL100Identifiers']);
            }
            // validate the optional field `riL100Identifiers` (array)
            for (const item of data['riL100Identifiers']) {
                RiL100Identifier.validateJSON(item);
            };
        }
        // validate the optional field `stationManagement`
        if (data['stationManagement']) { // data not null
          StationManagementRef.validateJSON(data['stationManagement']);
        }
        // validate the optional field `szentrale`
        if (data['szentrale']) { // data not null
          SZentraleRef.validateJSON(data['szentrale']);
        }
        // validate the optional field `timetableOffice`
        if (data['timetableOffice']) { // data not null
          TimetableOffice.validateJSON(data['timetableOffice']);
        }

        return true;
    }


}



/**
 * @member {module:model/Schedule} DBinformation
 */
Station.prototype['DBinformation'] = undefined;

/**
 * @member {module:model/Aufgabentraeger} aufgabentraeger
 */
Station.prototype['aufgabentraeger'] = undefined;

/**
 * the stations category (-1...7). Stations with category -1 or 0 are not in production, e.g. planned, saled, without train stops.
 * @member {Number} category
 */
Station.prototype['category'] = undefined;

/**
 * station related EVA-Numbers
 * @member {Array.<module:model/EVANumber>} evaNumbers
 */
Station.prototype['evaNumbers'] = undefined;

/**
 * german federal state
 * @member {String} federalState
 */
Station.prototype['federalState'] = undefined;

/**
 * public bicycle parking y/n
 * @member {Boolean} hasBicycleParking
 */
Station.prototype['hasBicycleParking'] = undefined;

/**
 * car sharing or car rental y/n
 * @member {Boolean} hasCarRental
 */
Station.prototype['hasCarRental'] = undefined;

/**
 * DB lounge y/n
 * @member {Boolean} hasDBLounge
 */
Station.prototype['hasDBLounge'] = undefined;

/**
 * local public transport y/n
 * @member {Boolean} hasLocalPublicTransport
 */
Station.prototype['hasLocalPublicTransport'] = undefined;

/**
 * public facilities y/n
 * @member {Boolean} hasLockerSystem
 */
Station.prototype['hasLockerSystem'] = undefined;

/**
 * lost and found y/n
 * @member {Boolean} hasLostAndFound
 */
Station.prototype['hasLostAndFound'] = undefined;

/**
 * values are 'no', 'yes, advance notification is requested...' or 'yes, advance notification is required...'
 * @member {String} hasMobilityService
 */
Station.prototype['hasMobilityService'] = undefined;

/**
 * public parking y/n
 * @member {Boolean} hasParking
 */
Station.prototype['hasParking'] = undefined;

/**
 * public facilities y/n
 * @member {Boolean} hasPublicFacilities
 */
Station.prototype['hasPublicFacilities'] = undefined;

/**
 * railway mission y/n
 * @member {Boolean} hasRailwayMission
 */
Station.prototype['hasRailwayMission'] = undefined;

/**
 * @member {module:model/Partial} hasSteplessAccess
 */
Station.prototype['hasSteplessAccess'] = undefined;

/**
 * taxi rank in front of the station y/n
 * @member {Boolean} hasTaxiRank
 */
Station.prototype['hasTaxiRank'] = undefined;

/**
 * local travel center y/n
 * @member {Boolean} hasTravelCenter
 */
Station.prototype['hasTravelCenter'] = undefined;

/**
 * a shop for travel necessities y/n
 * @member {Boolean} hasTravelNecessities
 */
Station.prototype['hasTravelNecessities'] = undefined;

/**
 * public Wi-Fi is available y/n
 * @member {Boolean} hasWiFi
 */
Station.prototype['hasWiFi'] = undefined;

/**
 * @member {module:model/Schedule} localServiceStaff
 */
Station.prototype['localServiceStaff'] = undefined;

/**
 * @member {module:model/Address} mailingAdress
 */
Station.prototype['mailingAdress'] = undefined;

/**
 * the stations name
 * @member {String} name
 */
Station.prototype['name'] = undefined;

/**
 * unique identifier representing a specific railway station
 * @member {Number} number
 */
Station.prototype['number'] = undefined;

/**
 * determines in some respect the price for train stops at a specific station (1..7)
 * @member {Number} priceCategory
 */
Station.prototype['priceCategory'] = undefined;

/**
 * @member {module:model/RegionalBereichRef} regionalbereich
 */
Station.prototype['regionalbereich'] = undefined;

/**
 * station related Ril100s
 * @member {Array.<module:model/RiL100Identifier>} riL100Identifiers
 */
Station.prototype['riL100Identifiers'] = undefined;

/**
 * @member {module:model/StationManagementRef} stationManagement
 */
Station.prototype['stationManagement'] = undefined;

/**
 * @member {module:model/SZentraleRef} szentrale
 */
Station.prototype['szentrale'] = undefined;

/**
 * @member {module:model/TimetableOffice} timetableOffice
 */
Station.prototype['timetableOffice'] = undefined;






export default Station;

