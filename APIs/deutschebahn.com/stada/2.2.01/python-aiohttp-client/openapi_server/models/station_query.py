# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.station import Station
from openapi_server import util


class StationQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=None, offset: int=None, result: List[Station]=None, total: int=None):
        """StationQuery - a model defined in OpenAPI

        :param limit: The limit of this StationQuery.
        :param offset: The offset of this StationQuery.
        :param result: The result of this StationQuery.
        :param total: The total of this StationQuery.
        """
        self.openapi_types = {
            'limit': int,
            'offset': int,
            'result': List[Station],
            'total': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'offset': 'offset',
            'result': 'result',
            'total': 'total'
        }

        self._limit = limit
        self._offset = offset
        self._result = result
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationQuery of this StationQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this StationQuery.

        maximum number of result objects to be returned

        :return: The limit of this StationQuery.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this StationQuery.

        maximum number of result objects to be returned

        :param limit: The limit of this StationQuery.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this StationQuery.

        offset of the first result object with respect to the total number  of hits produced by the query

        :return: The offset of this StationQuery.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this StationQuery.

        offset of the first result object with respect to the total number  of hits produced by the query

        :param offset: The offset of this StationQuery.
        :type offset: int
        """

        self._offset = offset

    @property
    def result(self):
        """Gets the result of this StationQuery.

        result objects produced by that query

        :return: The result of this StationQuery.
        :rtype: List[Station]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this StationQuery.

        result objects produced by that query

        :param result: The result of this StationQuery.
        :type result: List[Station]
        """

        self._result = result

    @property
    def total(self):
        """Gets the total of this StationQuery.

        total number of hits produced by that query

        :return: The total of this StationQuery.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this StationQuery.

        total number of hits produced by that query

        :param total: The total of this StationQuery.
        :type total: int
        """

        self._total = total
