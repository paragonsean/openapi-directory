# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geographic_point import GeographicPoint
from openapi_server import util


class RiL100Identifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geographic_coordinate: GeographicPoint=None, has_steam_permission: bool=None, is_main: bool=None, ril_identifier: str=None):
        """RiL100Identifier - a model defined in OpenAPI

        :param geographic_coordinate: The geographic_coordinate of this RiL100Identifier.
        :param has_steam_permission: The has_steam_permission of this RiL100Identifier.
        :param is_main: The is_main of this RiL100Identifier.
        :param ril_identifier: The ril_identifier of this RiL100Identifier.
        """
        self.openapi_types = {
            'geographic_coordinate': GeographicPoint,
            'has_steam_permission': bool,
            'is_main': bool,
            'ril_identifier': str
        }

        self.attribute_map = {
            'geographic_coordinate': 'geographicCoordinate',
            'has_steam_permission': 'hasSteamPermission',
            'is_main': 'isMain',
            'ril_identifier': 'rilIdentifier'
        }

        self._geographic_coordinate = geographic_coordinate
        self._has_steam_permission = has_steam_permission
        self._is_main = is_main
        self._ril_identifier = ril_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RiL100Identifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RiL100Identifier of this RiL100Identifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geographic_coordinate(self):
        """Gets the geographic_coordinate of this RiL100Identifier.


        :return: The geographic_coordinate of this RiL100Identifier.
        :rtype: GeographicPoint
        """
        return self._geographic_coordinate

    @geographic_coordinate.setter
    def geographic_coordinate(self, geographic_coordinate):
        """Sets the geographic_coordinate of this RiL100Identifier.


        :param geographic_coordinate: The geographic_coordinate of this RiL100Identifier.
        :type geographic_coordinate: GeographicPoint
        """

        self._geographic_coordinate = geographic_coordinate

    @property
    def has_steam_permission(self):
        """Gets the has_steam_permission of this RiL100Identifier.

        permission for steam engines y/n

        :return: The has_steam_permission of this RiL100Identifier.
        :rtype: bool
        """
        return self._has_steam_permission

    @has_steam_permission.setter
    def has_steam_permission(self, has_steam_permission):
        """Sets the has_steam_permission of this RiL100Identifier.

        permission for steam engines y/n

        :param has_steam_permission: The has_steam_permission of this RiL100Identifier.
        :type has_steam_permission: bool
        """

        self._has_steam_permission = has_steam_permission

    @property
    def is_main(self):
        """Gets the is_main of this RiL100Identifier.

        is stations main Ril100. Determination of Station&Service AG

        :return: The is_main of this RiL100Identifier.
        :rtype: bool
        """
        return self._is_main

    @is_main.setter
    def is_main(self, is_main):
        """Sets the is_main of this RiL100Identifier.

        is stations main Ril100. Determination of Station&Service AG

        :param is_main: The is_main of this RiL100Identifier.
        :type is_main: bool
        """

        self._is_main = is_main

    @property
    def ril_identifier(self):
        """Gets the ril_identifier of this RiL100Identifier.

        Unique identifier of 'Betriebsstelle' according to Ril100

        :return: The ril_identifier of this RiL100Identifier.
        :rtype: str
        """
        return self._ril_identifier

    @ril_identifier.setter
    def ril_identifier(self, ril_identifier):
        """Sets the ril_identifier of this RiL100Identifier.

        Unique identifier of 'Betriebsstelle' according to Ril100

        :param ril_identifier: The ril_identifier of this RiL100Identifier.
        :type ril_identifier: str
        """

        self._ril_identifier = ril_identifier
