/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISZentraleQuery.h"
#include "OAIStationQuery.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offset qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  searchstring QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  federalstate QString [optional]
    * @param[in]  eva qint64 [optional]
    * @param[in]  ril QString [optional]
    * @param[in]  logicaloperator QString [optional]
    */
    virtual void stationsGet(const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &searchstring = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &federalstate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &eva = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &ril = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &logicaloperator = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void stationsIdGet(const qint32 &id);

    /**
    * @param[in]  offset qint64 [optional]
    * @param[in]  limit qint64 [optional]
    */
    virtual void szentralenGet(const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void szentralenIdGet(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void stationsGetCallback(OAIHttpRequestWorker *worker);
    void stationsIdGetCallback(OAIHttpRequestWorker *worker);
    void szentralenGetCallback(OAIHttpRequestWorker *worker);
    void szentralenIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void stationsGetSignal(OAIStationQuery summary);
    void stationsIdGetSignal(OAIStationQuery summary);
    void szentralenGetSignal(OAISZentraleQuery summary);
    void szentralenIdGetSignal(OAISZentraleQuery summary);


    void stationsGetSignalFull(OAIHttpRequestWorker *worker, OAIStationQuery summary);
    void stationsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIStationQuery summary);
    void szentralenGetSignalFull(OAIHttpRequestWorker *worker, OAISZentraleQuery summary);
    void szentralenIdGetSignalFull(OAIHttpRequestWorker *worker, OAISZentraleQuery summary);

    Q_DECL_DEPRECATED_X("Use stationsGetSignalError() instead")
    void stationsGetSignalE(OAIStationQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stationsGetSignalError(OAIStationQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stationsIdGetSignalError() instead")
    void stationsIdGetSignalE(OAIStationQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stationsIdGetSignalError(OAIStationQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use szentralenGetSignalError() instead")
    void szentralenGetSignalE(OAISZentraleQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void szentralenGetSignalError(OAISZentraleQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use szentralenIdGetSignalError() instead")
    void szentralenIdGetSignalE(OAISZentraleQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void szentralenIdGetSignalError(OAISZentraleQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use stationsGetSignalErrorFull() instead")
    void stationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stationsIdGetSignalErrorFull() instead")
    void stationsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stationsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use szentralenGetSignalErrorFull() instead")
    void szentralenGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void szentralenGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use szentralenIdGetSignalErrorFull() instead")
    void szentralenIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void szentralenIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
