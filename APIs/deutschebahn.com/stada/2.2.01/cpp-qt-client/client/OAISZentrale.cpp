/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISZentrale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISZentrale::OAISZentrale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISZentrale::OAISZentrale() {
    this->initializeModel();
}

OAISZentrale::~OAISZentrale() {}

void OAISZentrale::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_internal_fax_number_isSet = false;
    m_internal_fax_number_isValid = false;

    m_internal_phone_number_isSet = false;
    m_internal_phone_number_isValid = false;

    m_mobile_phone_number_isSet = false;
    m_mobile_phone_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_public_fax_number_isSet = false;
    m_public_fax_number_isValid = false;

    m_public_phone_number_isSet = false;
    m_public_phone_number_isValid = false;
}

void OAISZentrale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISZentrale::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_internal_fax_number_isValid = ::OpenAPI::fromJsonValue(m_internal_fax_number, json[QString("internalFaxNumber")]);
    m_internal_fax_number_isSet = !json[QString("internalFaxNumber")].isNull() && m_internal_fax_number_isValid;

    m_internal_phone_number_isValid = ::OpenAPI::fromJsonValue(m_internal_phone_number, json[QString("internalPhoneNumber")]);
    m_internal_phone_number_isSet = !json[QString("internalPhoneNumber")].isNull() && m_internal_phone_number_isValid;

    m_mobile_phone_number_isValid = ::OpenAPI::fromJsonValue(m_mobile_phone_number, json[QString("mobilePhoneNumber")]);
    m_mobile_phone_number_isSet = !json[QString("mobilePhoneNumber")].isNull() && m_mobile_phone_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_public_fax_number_isValid = ::OpenAPI::fromJsonValue(m_public_fax_number, json[QString("publicFaxNumber")]);
    m_public_fax_number_isSet = !json[QString("publicFaxNumber")].isNull() && m_public_fax_number_isValid;

    m_public_phone_number_isValid = ::OpenAPI::fromJsonValue(m_public_phone_number, json[QString("publicPhoneNumber")]);
    m_public_phone_number_isSet = !json[QString("publicPhoneNumber")].isNull() && m_public_phone_number_isValid;
}

QString OAISZentrale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISZentrale::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_internal_fax_number_isSet) {
        obj.insert(QString("internalFaxNumber"), ::OpenAPI::toJsonValue(m_internal_fax_number));
    }
    if (m_internal_phone_number_isSet) {
        obj.insert(QString("internalPhoneNumber"), ::OpenAPI::toJsonValue(m_internal_phone_number));
    }
    if (m_mobile_phone_number_isSet) {
        obj.insert(QString("mobilePhoneNumber"), ::OpenAPI::toJsonValue(m_mobile_phone_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_public_fax_number_isSet) {
        obj.insert(QString("publicFaxNumber"), ::OpenAPI::toJsonValue(m_public_fax_number));
    }
    if (m_public_phone_number_isSet) {
        obj.insert(QString("publicPhoneNumber"), ::OpenAPI::toJsonValue(m_public_phone_number));
    }
    return obj;
}

OAIAddress OAISZentrale::getAddress() const {
    return m_address;
}
void OAISZentrale::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISZentrale::is_address_Set() const{
    return m_address_isSet;
}

bool OAISZentrale::is_address_Valid() const{
    return m_address_isValid;
}

QString OAISZentrale::getEmail() const {
    return m_email;
}
void OAISZentrale::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISZentrale::is_email_Set() const{
    return m_email_isSet;
}

bool OAISZentrale::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISZentrale::getInternalFaxNumber() const {
    return m_internal_fax_number;
}
void OAISZentrale::setInternalFaxNumber(const QString &internal_fax_number) {
    m_internal_fax_number = internal_fax_number;
    m_internal_fax_number_isSet = true;
}

bool OAISZentrale::is_internal_fax_number_Set() const{
    return m_internal_fax_number_isSet;
}

bool OAISZentrale::is_internal_fax_number_Valid() const{
    return m_internal_fax_number_isValid;
}

QString OAISZentrale::getInternalPhoneNumber() const {
    return m_internal_phone_number;
}
void OAISZentrale::setInternalPhoneNumber(const QString &internal_phone_number) {
    m_internal_phone_number = internal_phone_number;
    m_internal_phone_number_isSet = true;
}

bool OAISZentrale::is_internal_phone_number_Set() const{
    return m_internal_phone_number_isSet;
}

bool OAISZentrale::is_internal_phone_number_Valid() const{
    return m_internal_phone_number_isValid;
}

QString OAISZentrale::getMobilePhoneNumber() const {
    return m_mobile_phone_number;
}
void OAISZentrale::setMobilePhoneNumber(const QString &mobile_phone_number) {
    m_mobile_phone_number = mobile_phone_number;
    m_mobile_phone_number_isSet = true;
}

bool OAISZentrale::is_mobile_phone_number_Set() const{
    return m_mobile_phone_number_isSet;
}

bool OAISZentrale::is_mobile_phone_number_Valid() const{
    return m_mobile_phone_number_isValid;
}

QString OAISZentrale::getName() const {
    return m_name;
}
void OAISZentrale::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISZentrale::is_name_Set() const{
    return m_name_isSet;
}

bool OAISZentrale::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISZentrale::getNumber() const {
    return m_number;
}
void OAISZentrale::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISZentrale::is_number_Set() const{
    return m_number_isSet;
}

bool OAISZentrale::is_number_Valid() const{
    return m_number_isValid;
}

QString OAISZentrale::getPublicFaxNumber() const {
    return m_public_fax_number;
}
void OAISZentrale::setPublicFaxNumber(const QString &public_fax_number) {
    m_public_fax_number = public_fax_number;
    m_public_fax_number_isSet = true;
}

bool OAISZentrale::is_public_fax_number_Set() const{
    return m_public_fax_number_isSet;
}

bool OAISZentrale::is_public_fax_number_Valid() const{
    return m_public_fax_number_isValid;
}

QString OAISZentrale::getPublicPhoneNumber() const {
    return m_public_phone_number;
}
void OAISZentrale::setPublicPhoneNumber(const QString &public_phone_number) {
    m_public_phone_number = public_phone_number;
    m_public_phone_number_isSet = true;
}

bool OAISZentrale::is_public_phone_number_Set() const{
    return m_public_phone_number_isSet;
}

bool OAISZentrale::is_public_phone_number_Valid() const{
    return m_public_phone_number_isValid;
}

bool OAISZentrale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISZentrale::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
