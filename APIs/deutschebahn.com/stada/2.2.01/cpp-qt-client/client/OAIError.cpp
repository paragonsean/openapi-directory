/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_err_msg_isSet = false;
    m_err_msg_isValid = false;

    m_err_no_isSet = false;
    m_err_no_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_err_msg_isValid = ::OpenAPI::fromJsonValue(m_err_msg, json[QString("errMsg")]);
    m_err_msg_isSet = !json[QString("errMsg")].isNull() && m_err_msg_isValid;

    m_err_no_isValid = ::OpenAPI::fromJsonValue(m_err_no, json[QString("errNo")]);
    m_err_no_isSet = !json[QString("errNo")].isNull() && m_err_no_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_err_msg_isSet) {
        obj.insert(QString("errMsg"), ::OpenAPI::toJsonValue(m_err_msg));
    }
    if (m_err_no_isSet) {
        obj.insert(QString("errNo"), ::OpenAPI::toJsonValue(m_err_no));
    }
    return obj;
}

QString OAIError::getErrMsg() const {
    return m_err_msg;
}
void OAIError::setErrMsg(const QString &err_msg) {
    m_err_msg = err_msg;
    m_err_msg_isSet = true;
}

bool OAIError::is_err_msg_Set() const{
    return m_err_msg_isSet;
}

bool OAIError::is_err_msg_Valid() const{
    return m_err_msg_isValid;
}

qint32 OAIError::getErrNo() const {
    return m_err_no;
}
void OAIError::setErrNo(const qint32 &err_no) {
    m_err_no = err_no;
    m_err_no_isSet = true;
}

bool OAIError::is_err_no_Set() const{
    return m_err_no_isSet;
}

bool OAIError::is_err_no_Valid() const{
    return m_err_no_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_err_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_err_no_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
