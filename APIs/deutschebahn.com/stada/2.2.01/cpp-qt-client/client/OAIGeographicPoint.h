/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeographicPoint.h
 *
 * GEOJSON object of type point. By default WGS84 is the coordinate system in GEOJSON.
 */

#ifndef OAIGeographicPoint_H
#define OAIGeographicPoint_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGeographicPoint : public OAIObject {
public:
    OAIGeographicPoint();
    OAIGeographicPoint(QString json);
    ~OAIGeographicPoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<double> getCoordinates() const;
    void setCoordinates(const QList<double> &coordinates);
    bool is_coordinates_Set() const;
    bool is_coordinates_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<double> m_coordinates;
    bool m_coordinates_isSet;
    bool m_coordinates_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeographicPoint)

#endif // OAIGeographicPoint_H
