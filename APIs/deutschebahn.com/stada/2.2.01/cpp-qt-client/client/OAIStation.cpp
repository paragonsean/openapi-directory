/**
 * Stationsdatenbereitstellung
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStation::OAIStation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStation::OAIStation() {
    this->initializeModel();
}

OAIStation::~OAIStation() {}

void OAIStation::initializeModel() {

    m_d_binformation_isSet = false;
    m_d_binformation_isValid = false;

    m_aufgabentraeger_isSet = false;
    m_aufgabentraeger_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_eva_numbers_isSet = false;
    m_eva_numbers_isValid = false;

    m_federal_state_isSet = false;
    m_federal_state_isValid = false;

    m_has_bicycle_parking_isSet = false;
    m_has_bicycle_parking_isValid = false;

    m_has_car_rental_isSet = false;
    m_has_car_rental_isValid = false;

    m_has_db_lounge_isSet = false;
    m_has_db_lounge_isValid = false;

    m_has_local_public_transport_isSet = false;
    m_has_local_public_transport_isValid = false;

    m_has_locker_system_isSet = false;
    m_has_locker_system_isValid = false;

    m_has_lost_and_found_isSet = false;
    m_has_lost_and_found_isValid = false;

    m_has_mobility_service_isSet = false;
    m_has_mobility_service_isValid = false;

    m_has_parking_isSet = false;
    m_has_parking_isValid = false;

    m_has_public_facilities_isSet = false;
    m_has_public_facilities_isValid = false;

    m_has_railway_mission_isSet = false;
    m_has_railway_mission_isValid = false;

    m_has_stepless_access_isSet = false;
    m_has_stepless_access_isValid = false;

    m_has_taxi_rank_isSet = false;
    m_has_taxi_rank_isValid = false;

    m_has_travel_center_isSet = false;
    m_has_travel_center_isValid = false;

    m_has_travel_necessities_isSet = false;
    m_has_travel_necessities_isValid = false;

    m_has_wi_fi_isSet = false;
    m_has_wi_fi_isValid = false;

    m_local_service_staff_isSet = false;
    m_local_service_staff_isValid = false;

    m_mailing_adress_isSet = false;
    m_mailing_adress_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_category_isSet = false;
    m_price_category_isValid = false;

    m_regionalbereich_isSet = false;
    m_regionalbereich_isValid = false;

    m_ri_l100_identifiers_isSet = false;
    m_ri_l100_identifiers_isValid = false;

    m_station_management_isSet = false;
    m_station_management_isValid = false;

    m_szentrale_isSet = false;
    m_szentrale_isValid = false;

    m_timetable_office_isSet = false;
    m_timetable_office_isValid = false;
}

void OAIStation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStation::fromJsonObject(QJsonObject json) {

    m_d_binformation_isValid = ::OpenAPI::fromJsonValue(m_d_binformation, json[QString("DBinformation")]);
    m_d_binformation_isSet = !json[QString("DBinformation")].isNull() && m_d_binformation_isValid;

    m_aufgabentraeger_isValid = ::OpenAPI::fromJsonValue(m_aufgabentraeger, json[QString("aufgabentraeger")]);
    m_aufgabentraeger_isSet = !json[QString("aufgabentraeger")].isNull() && m_aufgabentraeger_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_eva_numbers_isValid = ::OpenAPI::fromJsonValue(m_eva_numbers, json[QString("evaNumbers")]);
    m_eva_numbers_isSet = !json[QString("evaNumbers")].isNull() && m_eva_numbers_isValid;

    m_federal_state_isValid = ::OpenAPI::fromJsonValue(m_federal_state, json[QString("federalState")]);
    m_federal_state_isSet = !json[QString("federalState")].isNull() && m_federal_state_isValid;

    m_has_bicycle_parking_isValid = ::OpenAPI::fromJsonValue(m_has_bicycle_parking, json[QString("hasBicycleParking")]);
    m_has_bicycle_parking_isSet = !json[QString("hasBicycleParking")].isNull() && m_has_bicycle_parking_isValid;

    m_has_car_rental_isValid = ::OpenAPI::fromJsonValue(m_has_car_rental, json[QString("hasCarRental")]);
    m_has_car_rental_isSet = !json[QString("hasCarRental")].isNull() && m_has_car_rental_isValid;

    m_has_db_lounge_isValid = ::OpenAPI::fromJsonValue(m_has_db_lounge, json[QString("hasDBLounge")]);
    m_has_db_lounge_isSet = !json[QString("hasDBLounge")].isNull() && m_has_db_lounge_isValid;

    m_has_local_public_transport_isValid = ::OpenAPI::fromJsonValue(m_has_local_public_transport, json[QString("hasLocalPublicTransport")]);
    m_has_local_public_transport_isSet = !json[QString("hasLocalPublicTransport")].isNull() && m_has_local_public_transport_isValid;

    m_has_locker_system_isValid = ::OpenAPI::fromJsonValue(m_has_locker_system, json[QString("hasLockerSystem")]);
    m_has_locker_system_isSet = !json[QString("hasLockerSystem")].isNull() && m_has_locker_system_isValid;

    m_has_lost_and_found_isValid = ::OpenAPI::fromJsonValue(m_has_lost_and_found, json[QString("hasLostAndFound")]);
    m_has_lost_and_found_isSet = !json[QString("hasLostAndFound")].isNull() && m_has_lost_and_found_isValid;

    m_has_mobility_service_isValid = ::OpenAPI::fromJsonValue(m_has_mobility_service, json[QString("hasMobilityService")]);
    m_has_mobility_service_isSet = !json[QString("hasMobilityService")].isNull() && m_has_mobility_service_isValid;

    m_has_parking_isValid = ::OpenAPI::fromJsonValue(m_has_parking, json[QString("hasParking")]);
    m_has_parking_isSet = !json[QString("hasParking")].isNull() && m_has_parking_isValid;

    m_has_public_facilities_isValid = ::OpenAPI::fromJsonValue(m_has_public_facilities, json[QString("hasPublicFacilities")]);
    m_has_public_facilities_isSet = !json[QString("hasPublicFacilities")].isNull() && m_has_public_facilities_isValid;

    m_has_railway_mission_isValid = ::OpenAPI::fromJsonValue(m_has_railway_mission, json[QString("hasRailwayMission")]);
    m_has_railway_mission_isSet = !json[QString("hasRailwayMission")].isNull() && m_has_railway_mission_isValid;

    m_has_stepless_access_isValid = ::OpenAPI::fromJsonValue(m_has_stepless_access, json[QString("hasSteplessAccess")]);
    m_has_stepless_access_isSet = !json[QString("hasSteplessAccess")].isNull() && m_has_stepless_access_isValid;

    m_has_taxi_rank_isValid = ::OpenAPI::fromJsonValue(m_has_taxi_rank, json[QString("hasTaxiRank")]);
    m_has_taxi_rank_isSet = !json[QString("hasTaxiRank")].isNull() && m_has_taxi_rank_isValid;

    m_has_travel_center_isValid = ::OpenAPI::fromJsonValue(m_has_travel_center, json[QString("hasTravelCenter")]);
    m_has_travel_center_isSet = !json[QString("hasTravelCenter")].isNull() && m_has_travel_center_isValid;

    m_has_travel_necessities_isValid = ::OpenAPI::fromJsonValue(m_has_travel_necessities, json[QString("hasTravelNecessities")]);
    m_has_travel_necessities_isSet = !json[QString("hasTravelNecessities")].isNull() && m_has_travel_necessities_isValid;

    m_has_wi_fi_isValid = ::OpenAPI::fromJsonValue(m_has_wi_fi, json[QString("hasWiFi")]);
    m_has_wi_fi_isSet = !json[QString("hasWiFi")].isNull() && m_has_wi_fi_isValid;

    m_local_service_staff_isValid = ::OpenAPI::fromJsonValue(m_local_service_staff, json[QString("localServiceStaff")]);
    m_local_service_staff_isSet = !json[QString("localServiceStaff")].isNull() && m_local_service_staff_isValid;

    m_mailing_adress_isValid = ::OpenAPI::fromJsonValue(m_mailing_adress, json[QString("mailingAdress")]);
    m_mailing_adress_isSet = !json[QString("mailingAdress")].isNull() && m_mailing_adress_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_category_isValid = ::OpenAPI::fromJsonValue(m_price_category, json[QString("priceCategory")]);
    m_price_category_isSet = !json[QString("priceCategory")].isNull() && m_price_category_isValid;

    m_regionalbereich_isValid = ::OpenAPI::fromJsonValue(m_regionalbereich, json[QString("regionalbereich")]);
    m_regionalbereich_isSet = !json[QString("regionalbereich")].isNull() && m_regionalbereich_isValid;

    m_ri_l100_identifiers_isValid = ::OpenAPI::fromJsonValue(m_ri_l100_identifiers, json[QString("riL100Identifiers")]);
    m_ri_l100_identifiers_isSet = !json[QString("riL100Identifiers")].isNull() && m_ri_l100_identifiers_isValid;

    m_station_management_isValid = ::OpenAPI::fromJsonValue(m_station_management, json[QString("stationManagement")]);
    m_station_management_isSet = !json[QString("stationManagement")].isNull() && m_station_management_isValid;

    m_szentrale_isValid = ::OpenAPI::fromJsonValue(m_szentrale, json[QString("szentrale")]);
    m_szentrale_isSet = !json[QString("szentrale")].isNull() && m_szentrale_isValid;

    m_timetable_office_isValid = ::OpenAPI::fromJsonValue(m_timetable_office, json[QString("timetableOffice")]);
    m_timetable_office_isSet = !json[QString("timetableOffice")].isNull() && m_timetable_office_isValid;
}

QString OAIStation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStation::asJsonObject() const {
    QJsonObject obj;
    if (m_d_binformation.isSet()) {
        obj.insert(QString("DBinformation"), ::OpenAPI::toJsonValue(m_d_binformation));
    }
    if (m_aufgabentraeger.isSet()) {
        obj.insert(QString("aufgabentraeger"), ::OpenAPI::toJsonValue(m_aufgabentraeger));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_eva_numbers.size() > 0) {
        obj.insert(QString("evaNumbers"), ::OpenAPI::toJsonValue(m_eva_numbers));
    }
    if (m_federal_state_isSet) {
        obj.insert(QString("federalState"), ::OpenAPI::toJsonValue(m_federal_state));
    }
    if (m_has_bicycle_parking_isSet) {
        obj.insert(QString("hasBicycleParking"), ::OpenAPI::toJsonValue(m_has_bicycle_parking));
    }
    if (m_has_car_rental_isSet) {
        obj.insert(QString("hasCarRental"), ::OpenAPI::toJsonValue(m_has_car_rental));
    }
    if (m_has_db_lounge_isSet) {
        obj.insert(QString("hasDBLounge"), ::OpenAPI::toJsonValue(m_has_db_lounge));
    }
    if (m_has_local_public_transport_isSet) {
        obj.insert(QString("hasLocalPublicTransport"), ::OpenAPI::toJsonValue(m_has_local_public_transport));
    }
    if (m_has_locker_system_isSet) {
        obj.insert(QString("hasLockerSystem"), ::OpenAPI::toJsonValue(m_has_locker_system));
    }
    if (m_has_lost_and_found_isSet) {
        obj.insert(QString("hasLostAndFound"), ::OpenAPI::toJsonValue(m_has_lost_and_found));
    }
    if (m_has_mobility_service_isSet) {
        obj.insert(QString("hasMobilityService"), ::OpenAPI::toJsonValue(m_has_mobility_service));
    }
    if (m_has_parking_isSet) {
        obj.insert(QString("hasParking"), ::OpenAPI::toJsonValue(m_has_parking));
    }
    if (m_has_public_facilities_isSet) {
        obj.insert(QString("hasPublicFacilities"), ::OpenAPI::toJsonValue(m_has_public_facilities));
    }
    if (m_has_railway_mission_isSet) {
        obj.insert(QString("hasRailwayMission"), ::OpenAPI::toJsonValue(m_has_railway_mission));
    }
    if (m_has_stepless_access.isSet()) {
        obj.insert(QString("hasSteplessAccess"), ::OpenAPI::toJsonValue(m_has_stepless_access));
    }
    if (m_has_taxi_rank_isSet) {
        obj.insert(QString("hasTaxiRank"), ::OpenAPI::toJsonValue(m_has_taxi_rank));
    }
    if (m_has_travel_center_isSet) {
        obj.insert(QString("hasTravelCenter"), ::OpenAPI::toJsonValue(m_has_travel_center));
    }
    if (m_has_travel_necessities_isSet) {
        obj.insert(QString("hasTravelNecessities"), ::OpenAPI::toJsonValue(m_has_travel_necessities));
    }
    if (m_has_wi_fi_isSet) {
        obj.insert(QString("hasWiFi"), ::OpenAPI::toJsonValue(m_has_wi_fi));
    }
    if (m_local_service_staff.isSet()) {
        obj.insert(QString("localServiceStaff"), ::OpenAPI::toJsonValue(m_local_service_staff));
    }
    if (m_mailing_adress.isSet()) {
        obj.insert(QString("mailingAdress"), ::OpenAPI::toJsonValue(m_mailing_adress));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_category_isSet) {
        obj.insert(QString("priceCategory"), ::OpenAPI::toJsonValue(m_price_category));
    }
    if (m_regionalbereich.isSet()) {
        obj.insert(QString("regionalbereich"), ::OpenAPI::toJsonValue(m_regionalbereich));
    }
    if (m_ri_l100_identifiers.size() > 0) {
        obj.insert(QString("riL100Identifiers"), ::OpenAPI::toJsonValue(m_ri_l100_identifiers));
    }
    if (m_station_management.isSet()) {
        obj.insert(QString("stationManagement"), ::OpenAPI::toJsonValue(m_station_management));
    }
    if (m_szentrale.isSet()) {
        obj.insert(QString("szentrale"), ::OpenAPI::toJsonValue(m_szentrale));
    }
    if (m_timetable_office.isSet()) {
        obj.insert(QString("timetableOffice"), ::OpenAPI::toJsonValue(m_timetable_office));
    }
    return obj;
}

OAISchedule OAIStation::getDBinformation() const {
    return m_d_binformation;
}
void OAIStation::setDBinformation(const OAISchedule &d_binformation) {
    m_d_binformation = d_binformation;
    m_d_binformation_isSet = true;
}

bool OAIStation::is_d_binformation_Set() const{
    return m_d_binformation_isSet;
}

bool OAIStation::is_d_binformation_Valid() const{
    return m_d_binformation_isValid;
}

OAIAufgabentraeger OAIStation::getAufgabentraeger() const {
    return m_aufgabentraeger;
}
void OAIStation::setAufgabentraeger(const OAIAufgabentraeger &aufgabentraeger) {
    m_aufgabentraeger = aufgabentraeger;
    m_aufgabentraeger_isSet = true;
}

bool OAIStation::is_aufgabentraeger_Set() const{
    return m_aufgabentraeger_isSet;
}

bool OAIStation::is_aufgabentraeger_Valid() const{
    return m_aufgabentraeger_isValid;
}

qint32 OAIStation::getCategory() const {
    return m_category;
}
void OAIStation::setCategory(const qint32 &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIStation::is_category_Set() const{
    return m_category_isSet;
}

bool OAIStation::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIEVANumber> OAIStation::getEvaNumbers() const {
    return m_eva_numbers;
}
void OAIStation::setEvaNumbers(const QList<OAIEVANumber> &eva_numbers) {
    m_eva_numbers = eva_numbers;
    m_eva_numbers_isSet = true;
}

bool OAIStation::is_eva_numbers_Set() const{
    return m_eva_numbers_isSet;
}

bool OAIStation::is_eva_numbers_Valid() const{
    return m_eva_numbers_isValid;
}

QString OAIStation::getFederalState() const {
    return m_federal_state;
}
void OAIStation::setFederalState(const QString &federal_state) {
    m_federal_state = federal_state;
    m_federal_state_isSet = true;
}

bool OAIStation::is_federal_state_Set() const{
    return m_federal_state_isSet;
}

bool OAIStation::is_federal_state_Valid() const{
    return m_federal_state_isValid;
}

bool OAIStation::isHasBicycleParking() const {
    return m_has_bicycle_parking;
}
void OAIStation::setHasBicycleParking(const bool &has_bicycle_parking) {
    m_has_bicycle_parking = has_bicycle_parking;
    m_has_bicycle_parking_isSet = true;
}

bool OAIStation::is_has_bicycle_parking_Set() const{
    return m_has_bicycle_parking_isSet;
}

bool OAIStation::is_has_bicycle_parking_Valid() const{
    return m_has_bicycle_parking_isValid;
}

bool OAIStation::isHasCarRental() const {
    return m_has_car_rental;
}
void OAIStation::setHasCarRental(const bool &has_car_rental) {
    m_has_car_rental = has_car_rental;
    m_has_car_rental_isSet = true;
}

bool OAIStation::is_has_car_rental_Set() const{
    return m_has_car_rental_isSet;
}

bool OAIStation::is_has_car_rental_Valid() const{
    return m_has_car_rental_isValid;
}

bool OAIStation::isHasDbLounge() const {
    return m_has_db_lounge;
}
void OAIStation::setHasDbLounge(const bool &has_db_lounge) {
    m_has_db_lounge = has_db_lounge;
    m_has_db_lounge_isSet = true;
}

bool OAIStation::is_has_db_lounge_Set() const{
    return m_has_db_lounge_isSet;
}

bool OAIStation::is_has_db_lounge_Valid() const{
    return m_has_db_lounge_isValid;
}

bool OAIStation::isHasLocalPublicTransport() const {
    return m_has_local_public_transport;
}
void OAIStation::setHasLocalPublicTransport(const bool &has_local_public_transport) {
    m_has_local_public_transport = has_local_public_transport;
    m_has_local_public_transport_isSet = true;
}

bool OAIStation::is_has_local_public_transport_Set() const{
    return m_has_local_public_transport_isSet;
}

bool OAIStation::is_has_local_public_transport_Valid() const{
    return m_has_local_public_transport_isValid;
}

bool OAIStation::isHasLockerSystem() const {
    return m_has_locker_system;
}
void OAIStation::setHasLockerSystem(const bool &has_locker_system) {
    m_has_locker_system = has_locker_system;
    m_has_locker_system_isSet = true;
}

bool OAIStation::is_has_locker_system_Set() const{
    return m_has_locker_system_isSet;
}

bool OAIStation::is_has_locker_system_Valid() const{
    return m_has_locker_system_isValid;
}

bool OAIStation::isHasLostAndFound() const {
    return m_has_lost_and_found;
}
void OAIStation::setHasLostAndFound(const bool &has_lost_and_found) {
    m_has_lost_and_found = has_lost_and_found;
    m_has_lost_and_found_isSet = true;
}

bool OAIStation::is_has_lost_and_found_Set() const{
    return m_has_lost_and_found_isSet;
}

bool OAIStation::is_has_lost_and_found_Valid() const{
    return m_has_lost_and_found_isValid;
}

QString OAIStation::getHasMobilityService() const {
    return m_has_mobility_service;
}
void OAIStation::setHasMobilityService(const QString &has_mobility_service) {
    m_has_mobility_service = has_mobility_service;
    m_has_mobility_service_isSet = true;
}

bool OAIStation::is_has_mobility_service_Set() const{
    return m_has_mobility_service_isSet;
}

bool OAIStation::is_has_mobility_service_Valid() const{
    return m_has_mobility_service_isValid;
}

bool OAIStation::isHasParking() const {
    return m_has_parking;
}
void OAIStation::setHasParking(const bool &has_parking) {
    m_has_parking = has_parking;
    m_has_parking_isSet = true;
}

bool OAIStation::is_has_parking_Set() const{
    return m_has_parking_isSet;
}

bool OAIStation::is_has_parking_Valid() const{
    return m_has_parking_isValid;
}

bool OAIStation::isHasPublicFacilities() const {
    return m_has_public_facilities;
}
void OAIStation::setHasPublicFacilities(const bool &has_public_facilities) {
    m_has_public_facilities = has_public_facilities;
    m_has_public_facilities_isSet = true;
}

bool OAIStation::is_has_public_facilities_Set() const{
    return m_has_public_facilities_isSet;
}

bool OAIStation::is_has_public_facilities_Valid() const{
    return m_has_public_facilities_isValid;
}

bool OAIStation::isHasRailwayMission() const {
    return m_has_railway_mission;
}
void OAIStation::setHasRailwayMission(const bool &has_railway_mission) {
    m_has_railway_mission = has_railway_mission;
    m_has_railway_mission_isSet = true;
}

bool OAIStation::is_has_railway_mission_Set() const{
    return m_has_railway_mission_isSet;
}

bool OAIStation::is_has_railway_mission_Valid() const{
    return m_has_railway_mission_isValid;
}

OAIPartial OAIStation::getHasSteplessAccess() const {
    return m_has_stepless_access;
}
void OAIStation::setHasSteplessAccess(const OAIPartial &has_stepless_access) {
    m_has_stepless_access = has_stepless_access;
    m_has_stepless_access_isSet = true;
}

bool OAIStation::is_has_stepless_access_Set() const{
    return m_has_stepless_access_isSet;
}

bool OAIStation::is_has_stepless_access_Valid() const{
    return m_has_stepless_access_isValid;
}

bool OAIStation::isHasTaxiRank() const {
    return m_has_taxi_rank;
}
void OAIStation::setHasTaxiRank(const bool &has_taxi_rank) {
    m_has_taxi_rank = has_taxi_rank;
    m_has_taxi_rank_isSet = true;
}

bool OAIStation::is_has_taxi_rank_Set() const{
    return m_has_taxi_rank_isSet;
}

bool OAIStation::is_has_taxi_rank_Valid() const{
    return m_has_taxi_rank_isValid;
}

bool OAIStation::isHasTravelCenter() const {
    return m_has_travel_center;
}
void OAIStation::setHasTravelCenter(const bool &has_travel_center) {
    m_has_travel_center = has_travel_center;
    m_has_travel_center_isSet = true;
}

bool OAIStation::is_has_travel_center_Set() const{
    return m_has_travel_center_isSet;
}

bool OAIStation::is_has_travel_center_Valid() const{
    return m_has_travel_center_isValid;
}

bool OAIStation::isHasTravelNecessities() const {
    return m_has_travel_necessities;
}
void OAIStation::setHasTravelNecessities(const bool &has_travel_necessities) {
    m_has_travel_necessities = has_travel_necessities;
    m_has_travel_necessities_isSet = true;
}

bool OAIStation::is_has_travel_necessities_Set() const{
    return m_has_travel_necessities_isSet;
}

bool OAIStation::is_has_travel_necessities_Valid() const{
    return m_has_travel_necessities_isValid;
}

bool OAIStation::isHasWiFi() const {
    return m_has_wi_fi;
}
void OAIStation::setHasWiFi(const bool &has_wi_fi) {
    m_has_wi_fi = has_wi_fi;
    m_has_wi_fi_isSet = true;
}

bool OAIStation::is_has_wi_fi_Set() const{
    return m_has_wi_fi_isSet;
}

bool OAIStation::is_has_wi_fi_Valid() const{
    return m_has_wi_fi_isValid;
}

OAISchedule OAIStation::getLocalServiceStaff() const {
    return m_local_service_staff;
}
void OAIStation::setLocalServiceStaff(const OAISchedule &local_service_staff) {
    m_local_service_staff = local_service_staff;
    m_local_service_staff_isSet = true;
}

bool OAIStation::is_local_service_staff_Set() const{
    return m_local_service_staff_isSet;
}

bool OAIStation::is_local_service_staff_Valid() const{
    return m_local_service_staff_isValid;
}

OAIAddress OAIStation::getMailingAdress() const {
    return m_mailing_adress;
}
void OAIStation::setMailingAdress(const OAIAddress &mailing_adress) {
    m_mailing_adress = mailing_adress;
    m_mailing_adress_isSet = true;
}

bool OAIStation::is_mailing_adress_Set() const{
    return m_mailing_adress_isSet;
}

bool OAIStation::is_mailing_adress_Valid() const{
    return m_mailing_adress_isValid;
}

QString OAIStation::getName() const {
    return m_name;
}
void OAIStation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStation::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStation::getNumber() const {
    return m_number;
}
void OAIStation::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIStation::is_number_Set() const{
    return m_number_isSet;
}

bool OAIStation::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIStation::getPriceCategory() const {
    return m_price_category;
}
void OAIStation::setPriceCategory(const qint32 &price_category) {
    m_price_category = price_category;
    m_price_category_isSet = true;
}

bool OAIStation::is_price_category_Set() const{
    return m_price_category_isSet;
}

bool OAIStation::is_price_category_Valid() const{
    return m_price_category_isValid;
}

OAIRegionalBereichRef OAIStation::getRegionalbereich() const {
    return m_regionalbereich;
}
void OAIStation::setRegionalbereich(const OAIRegionalBereichRef &regionalbereich) {
    m_regionalbereich = regionalbereich;
    m_regionalbereich_isSet = true;
}

bool OAIStation::is_regionalbereich_Set() const{
    return m_regionalbereich_isSet;
}

bool OAIStation::is_regionalbereich_Valid() const{
    return m_regionalbereich_isValid;
}

QList<OAIRiL100Identifier> OAIStation::getRiL100Identifiers() const {
    return m_ri_l100_identifiers;
}
void OAIStation::setRiL100Identifiers(const QList<OAIRiL100Identifier> &ri_l100_identifiers) {
    m_ri_l100_identifiers = ri_l100_identifiers;
    m_ri_l100_identifiers_isSet = true;
}

bool OAIStation::is_ri_l100_identifiers_Set() const{
    return m_ri_l100_identifiers_isSet;
}

bool OAIStation::is_ri_l100_identifiers_Valid() const{
    return m_ri_l100_identifiers_isValid;
}

OAIStationManagementRef OAIStation::getStationManagement() const {
    return m_station_management;
}
void OAIStation::setStationManagement(const OAIStationManagementRef &station_management) {
    m_station_management = station_management;
    m_station_management_isSet = true;
}

bool OAIStation::is_station_management_Set() const{
    return m_station_management_isSet;
}

bool OAIStation::is_station_management_Valid() const{
    return m_station_management_isValid;
}

OAISZentraleRef OAIStation::getSzentrale() const {
    return m_szentrale;
}
void OAIStation::setSzentrale(const OAISZentraleRef &szentrale) {
    m_szentrale = szentrale;
    m_szentrale_isSet = true;
}

bool OAIStation::is_szentrale_Set() const{
    return m_szentrale_isSet;
}

bool OAIStation::is_szentrale_Valid() const{
    return m_szentrale_isValid;
}

OAITimetableOffice OAIStation::getTimetableOffice() const {
    return m_timetable_office;
}
void OAIStation::setTimetableOffice(const OAITimetableOffice &timetable_office) {
    m_timetable_office = timetable_office;
    m_timetable_office_isSet = true;
}

bool OAIStation::is_timetable_office_Set() const{
    return m_timetable_office_isSet;
}

bool OAIStation::is_timetable_office_Valid() const{
    return m_timetable_office_isValid;
}

bool OAIStation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_d_binformation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aufgabentraeger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eva_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_bicycle_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_car_rental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_db_lounge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_local_public_transport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_locker_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_lost_and_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_mobility_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_public_facilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_railway_mission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_stepless_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_taxi_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_travel_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_travel_necessities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_wi_fi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_service_staff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_adress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regionalbereich.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ri_l100_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_management.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_szentrale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timetable_office.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
