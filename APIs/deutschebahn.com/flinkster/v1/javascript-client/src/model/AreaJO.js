/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressJO from './AddressJO';
import GeometryJO from './GeometryJO';
import LinkJO from './LinkJO';
import ProviderJO from './ProviderJO';

/**
 * The AreaJO model module.
 * @module model/AreaJO
 * @version v1
 */
class AreaJO {
    /**
     * Constructs a new <code>AreaJO</code>.
     * @alias module:model/AreaJO
     */
    constructor() { 
        
        AreaJO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AreaJO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AreaJO} obj Optional instance to populate.
     * @return {module:model/AreaJO} The populated <code>AreaJO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AreaJO();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ApiClient.convertToType(data['_links'], [LinkJO]);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = AddressJO.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expand')) {
                obj['expand'] = ApiClient.convertToType(data['expand'], 'String');
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = GeometryJO.constructFromObject(data['geometry']);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ProviderJO.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('providerAreaId')) {
                obj['providerAreaId'] = ApiClient.convertToType(data['providerAreaId'], 'String');
            }
            if (data.hasOwnProperty('providerNetworkIds')) {
                obj['providerNetworkIds'] = ApiClient.convertToType(data['providerNetworkIds'], ['Number']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AreaJO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AreaJO</code>.
     */
    static validateJSON(data) {
        if (data['_links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['_links'])) {
                throw new Error("Expected the field `_links` to be an array in the JSON data but got " + data['_links']);
            }
            // validate the optional field `_links` (array)
            for (const item of data['_links']) {
                LinkJO.validateJSON(item);
            };
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          AddressJO.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expand'] && !(typeof data['expand'] === 'string' || data['expand'] instanceof String)) {
            throw new Error("Expected the field `expand` to be a primitive type in the JSON string but got " + data['expand']);
        }
        // validate the optional field `geometry`
        if (data['geometry']) { // data not null
          GeometryJO.validateJSON(data['geometry']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          ProviderJO.validateJSON(data['provider']);
        }
        // ensure the json data is a string
        if (data['providerAreaId'] && !(typeof data['providerAreaId'] === 'string' || data['providerAreaId'] instanceof String)) {
            throw new Error("Expected the field `providerAreaId` to be a primitive type in the JSON string but got " + data['providerAreaId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['providerNetworkIds'])) {
            throw new Error("Expected the field `providerNetworkIds` to be an array in the JSON data but got " + data['providerNetworkIds']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/LinkJO>} _links
 */
AreaJO.prototype['_links'] = undefined;

/**
 * @member {module:model/AddressJO} address
 */
AreaJO.prototype['address'] = undefined;

/**
 * @member {Object.<String, Object>} attributes
 */
AreaJO.prototype['attributes'] = undefined;

/**
 * @member {String} description
 */
AreaJO.prototype['description'] = undefined;

/**
 * @member {String} expand
 */
AreaJO.prototype['expand'] = undefined;

/**
 * @member {module:model/GeometryJO} geometry
 */
AreaJO.prototype['geometry'] = undefined;

/**
 * @member {String} href
 */
AreaJO.prototype['href'] = undefined;

/**
 * @member {String} name
 */
AreaJO.prototype['name'] = undefined;

/**
 * @member {module:model/ProviderJO} provider
 */
AreaJO.prototype['provider'] = undefined;

/**
 * @member {String} providerAreaId
 */
AreaJO.prototype['providerAreaId'] = undefined;

/**
 * @member {Array.<Number>} providerNetworkIds
 */
AreaJO.prototype['providerNetworkIds'] = undefined;

/**
 * @member {module:model/AreaJO.TypeEnum} type
 */
AreaJO.prototype['type'] = undefined;

/**
 * @member {String} uid
 */
AreaJO.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AreaJO['TypeEnum'] = {

    /**
     * value: "STATION"
     * @const
     */
    "STATION": "STATION",

    /**
     * value: "OPERATIONAREA"
     * @const
     */
    "OPERATIONAREA": "OPERATIONAREA",

    /**
     * value: "PARKINGAREA"
     * @const
     */
    "PARKINGAREA": "PARKINGAREA",

    /**
     * value: "GASSTATION"
     * @const
     */
    "GASSTATION": "GASSTATION",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};



export default AreaJO;

