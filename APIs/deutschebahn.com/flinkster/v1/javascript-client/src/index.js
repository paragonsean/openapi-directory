/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AddressJO from './model/AddressJO';
import AreaJO from './model/AreaJO';
import BookingProposalJO from './model/BookingProposalJO';
import CategoryJO from './model/CategoryJO';
import Crs from './model/Crs';
import ErrorJO from './model/ErrorJO';
import Feature from './model/Feature';
import FeatureCollection from './model/FeatureCollection';
import GeoJsonObject from './model/GeoJsonObject';
import GeometryJO from './model/GeometryJO';
import JsonCollection from './model/JsonCollection';
import JsonCollectionPriceJO from './model/JsonCollectionPriceJO';
import JsonObject from './model/JsonObject';
import LineString from './model/LineString';
import LinkJO from './model/LinkJO';
import LngLatAlt from './model/LngLatAlt';
import MultiLineString from './model/MultiLineString';
import MultiPoint from './model/MultiPoint';
import MultiPolygon from './model/MultiPolygon';
import Point from './model/Point';
import Polygon from './model/Polygon';
import PriceJO from './model/PriceJO';
import ProviderJO from './model/ProviderJO';
import RentalObjectJO from './model/RentalObjectJO';
import AreasApi from './api/AreasApi';
import BookingproposalsApi from './api/BookingproposalsApi';
import CategoriesApi from './api/CategoriesApi';
import IndexApi from './api/IndexApi';
import PricesApi from './api/PricesApi';
import ProvidernetworksApi from './api/ProvidernetworksApi';
import ProvidersApi from './api/ProvidersApi';
import RentalobjectsApi from './api/RentalobjectsApi';


/**
* This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter &#39;providernetwork&#39; to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FlinksterApiNg = require('index'); // See note below*.
* var xxxSvc = new FlinksterApiNg.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FlinksterApiNg.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FlinksterApiNg.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FlinksterApiNg.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AddressJO model constructor.
     * @property {module:model/AddressJO}
     */
    AddressJO,

    /**
     * The AreaJO model constructor.
     * @property {module:model/AreaJO}
     */
    AreaJO,

    /**
     * The BookingProposalJO model constructor.
     * @property {module:model/BookingProposalJO}
     */
    BookingProposalJO,

    /**
     * The CategoryJO model constructor.
     * @property {module:model/CategoryJO}
     */
    CategoryJO,

    /**
     * The Crs model constructor.
     * @property {module:model/Crs}
     */
    Crs,

    /**
     * The ErrorJO model constructor.
     * @property {module:model/ErrorJO}
     */
    ErrorJO,

    /**
     * The Feature model constructor.
     * @property {module:model/Feature}
     */
    Feature,

    /**
     * The FeatureCollection model constructor.
     * @property {module:model/FeatureCollection}
     */
    FeatureCollection,

    /**
     * The GeoJsonObject model constructor.
     * @property {module:model/GeoJsonObject}
     */
    GeoJsonObject,

    /**
     * The GeometryJO model constructor.
     * @property {module:model/GeometryJO}
     */
    GeometryJO,

    /**
     * The JsonCollection model constructor.
     * @property {module:model/JsonCollection}
     */
    JsonCollection,

    /**
     * The JsonCollectionPriceJO model constructor.
     * @property {module:model/JsonCollectionPriceJO}
     */
    JsonCollectionPriceJO,

    /**
     * The JsonObject model constructor.
     * @property {module:model/JsonObject}
     */
    JsonObject,

    /**
     * The LineString model constructor.
     * @property {module:model/LineString}
     */
    LineString,

    /**
     * The LinkJO model constructor.
     * @property {module:model/LinkJO}
     */
    LinkJO,

    /**
     * The LngLatAlt model constructor.
     * @property {module:model/LngLatAlt}
     */
    LngLatAlt,

    /**
     * The MultiLineString model constructor.
     * @property {module:model/MultiLineString}
     */
    MultiLineString,

    /**
     * The MultiPoint model constructor.
     * @property {module:model/MultiPoint}
     */
    MultiPoint,

    /**
     * The MultiPolygon model constructor.
     * @property {module:model/MultiPolygon}
     */
    MultiPolygon,

    /**
     * The Point model constructor.
     * @property {module:model/Point}
     */
    Point,

    /**
     * The Polygon model constructor.
     * @property {module:model/Polygon}
     */
    Polygon,

    /**
     * The PriceJO model constructor.
     * @property {module:model/PriceJO}
     */
    PriceJO,

    /**
     * The ProviderJO model constructor.
     * @property {module:model/ProviderJO}
     */
    ProviderJO,

    /**
     * The RentalObjectJO model constructor.
     * @property {module:model/RentalObjectJO}
     */
    RentalObjectJO,

    /**
    * The AreasApi service constructor.
    * @property {module:api/AreasApi}
    */
    AreasApi,

    /**
    * The BookingproposalsApi service constructor.
    * @property {module:api/BookingproposalsApi}
    */
    BookingproposalsApi,

    /**
    * The CategoriesApi service constructor.
    * @property {module:api/CategoriesApi}
    */
    CategoriesApi,

    /**
    * The IndexApi service constructor.
    * @property {module:api/IndexApi}
    */
    IndexApi,

    /**
    * The PricesApi service constructor.
    * @property {module:api/PricesApi}
    */
    PricesApi,

    /**
    * The ProvidernetworksApi service constructor.
    * @property {module:api/ProvidernetworksApi}
    */
    ProvidernetworksApi,

    /**
    * The ProvidersApi service constructor.
    * @property {module:api/ProvidersApi}
    */
    ProvidersApi,

    /**
    * The RentalobjectsApi service constructor.
    * @property {module:api/RentalobjectsApi}
    */
    RentalobjectsApi
};
