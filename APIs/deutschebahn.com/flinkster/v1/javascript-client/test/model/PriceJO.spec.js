/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlinksterApiNg);
  }
}(this, function(expect, FlinksterApiNg) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlinksterApiNg.PriceJO();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PriceJO', function() {
    it('should create an instance of PriceJO', function() {
      // uncomment below and update the code to test PriceJO
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be.a(FlinksterApiNg.PriceJO);
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property expand (base name: "expand")', function() {
      // uncomment below and update the code to test the property expand
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property grossamount (base name: "grossamount")', function() {
      // uncomment below and update the code to test the property grossamount
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property href (base name: "href")', function() {
      // uncomment below and update the code to test the property href
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property preferredprice (base name: "preferredprice")', function() {
      // uncomment below and update the code to test the property preferredprice
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property taxrate (base name: "taxrate")', function() {
      // uncomment below and update the code to test the property taxrate
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new FlinksterApiNg.PriceJO();
      //expect(instance).to.be();
    });

  });

}));
