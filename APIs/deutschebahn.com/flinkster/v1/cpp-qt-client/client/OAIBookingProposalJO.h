/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBookingProposalJO.h
 *
 * 
 */

#ifndef OAIBookingProposalJO_H
#define OAIBookingProposalJO_H

#include <QJsonObject>

#include "OAIAreaJO.h"
#include "OAIGeoJsonObject.h"
#include "OAIJsonCollectionPriceJO.h"
#include "OAILinkJO.h"
#include "OAIObject.h"
#include "OAIRentalObjectJO.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILinkJO;
class OAIAreaJO;
class OAIGeoJsonObject;
class OAIJsonCollectionPriceJO;
class OAIRentalObjectJO;

class OAIBookingProposalJO : public OAIObject {
public:
    OAIBookingProposalJO();
    OAIBookingProposalJO(QString json);
    ~OAIBookingProposalJO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAILinkJO> getLinks() const;
    void setLinks(const QList<OAILinkJO> &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    OAIAreaJO getArea() const;
    void setArea(const OAIAreaJO &area);
    bool is_area_Set() const;
    bool is_area_Valid() const;

    QMap<QString, OAIObject> getAttributes() const;
    void setAttributes(const QMap<QString, OAIObject> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QString getExpand() const;
    void setExpand(const QString &expand);
    bool is_expand_Set() const;
    bool is_expand_Valid() const;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGeoJsonObject getPosition() const;
    void setPosition(const OAIGeoJsonObject &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIJsonCollectionPriceJO getPrice() const;
    void setPrice(const OAIJsonCollectionPriceJO &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    OAIRentalObjectJO getRentalObject() const;
    void setRentalObject(const OAIRentalObjectJO &rental_object);
    bool is_rental_object_Set() const;
    bool is_rental_object_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAILinkJO> m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    OAIAreaJO m_area;
    bool m_area_isSet;
    bool m_area_isValid;

    QMap<QString, OAIObject> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QString m_expand;
    bool m_expand_isSet;
    bool m_expand_isValid;

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGeoJsonObject m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIJsonCollectionPriceJO m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    OAIRentalObjectJO m_rental_object;
    bool m_rental_object_isSet;
    bool m_rental_object_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBookingProposalJO)

#endif // OAIBookingProposalJO_H
