/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeometryJO.h
 *
 * 
 */

#ifndef OAIGeometryJO_H
#define OAIGeometryJO_H

#include <QJsonObject>

#include "OAIGeoJsonObject.h"
#include "OAIPoint.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPoint;
class OAIGeoJsonObject;

class OAIGeometryJO : public OAIObject {
public:
    OAIGeometryJO();
    OAIGeometryJO(QString json);
    ~OAIGeometryJO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPoint getCentroid() const;
    void setCentroid(const OAIPoint &centroid);
    bool is_centroid_Set() const;
    bool is_centroid_Valid() const;

    OAIGeoJsonObject getPosition() const;
    void setPosition(const OAIGeoJsonObject &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPoint m_centroid;
    bool m_centroid_isSet;
    bool m_centroid_isValid;

    OAIGeoJsonObject m_position;
    bool m_position_isSet;
    bool m_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeometryJO)

#endif // OAIGeometryJO_H
