/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorJO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorJO::OAIErrorJO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorJO::OAIErrorJO() {
    this->initializeModel();
}

OAIErrorJO::~OAIErrorJO() {}

void OAIErrorJO::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIErrorJO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorJO::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIErrorJO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorJO::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QMap<QString, QString> OAIErrorJO::getAttributes() const {
    return m_attributes;
}
void OAIErrorJO::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIErrorJO::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIErrorJO::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAIErrorJO::getCode() const {
    return m_code;
}
void OAIErrorJO::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorJO::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorJO::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIErrorJO::getLevel() const {
    return m_level;
}
void OAIErrorJO::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIErrorJO::is_level_Set() const{
    return m_level_isSet;
}

bool OAIErrorJO::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIErrorJO::getMessage() const {
    return m_message;
}
void OAIErrorJO::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorJO::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorJO::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIErrorJO::getName() const {
    return m_name;
}
void OAIErrorJO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIErrorJO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIErrorJO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIErrorJO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorJO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
