/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiPoint::OAIMultiPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiPoint::OAIMultiPoint() {
    this->initializeModel();
}

OAIMultiPoint::~OAIMultiPoint() {}

void OAIMultiPoint::initializeModel() {

    m_bbox_isSet = false;
    m_bbox_isValid = false;

    m_crs_isSet = false;
    m_crs_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;
}

void OAIMultiPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiPoint::fromJsonObject(QJsonObject json) {

    m_bbox_isValid = ::OpenAPI::fromJsonValue(m_bbox, json[QString("bbox")]);
    m_bbox_isSet = !json[QString("bbox")].isNull() && m_bbox_isValid;

    m_crs_isValid = ::OpenAPI::fromJsonValue(m_crs, json[QString("crs")]);
    m_crs_isSet = !json[QString("crs")].isNull() && m_crs_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;
}

QString OAIMultiPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_bbox.size() > 0) {
        obj.insert(QString("bbox"), ::OpenAPI::toJsonValue(m_bbox));
    }
    if (m_crs.isSet()) {
        obj.insert(QString("crs"), ::OpenAPI::toJsonValue(m_crs));
    }
    if (m_coordinates.size() > 0) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    return obj;
}

QList<double> OAIMultiPoint::getBbox() const {
    return m_bbox;
}
void OAIMultiPoint::setBbox(const QList<double> &bbox) {
    m_bbox = bbox;
    m_bbox_isSet = true;
}

bool OAIMultiPoint::is_bbox_Set() const{
    return m_bbox_isSet;
}

bool OAIMultiPoint::is_bbox_Valid() const{
    return m_bbox_isValid;
}

OAICrs OAIMultiPoint::getCrs() const {
    return m_crs;
}
void OAIMultiPoint::setCrs(const OAICrs &crs) {
    m_crs = crs;
    m_crs_isSet = true;
}

bool OAIMultiPoint::is_crs_Set() const{
    return m_crs_isSet;
}

bool OAIMultiPoint::is_crs_Valid() const{
    return m_crs_isValid;
}

QList<OAILngLatAlt> OAIMultiPoint::getCoordinates() const {
    return m_coordinates;
}
void OAIMultiPoint::setCoordinates(const QList<OAILngLatAlt> &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIMultiPoint::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIMultiPoint::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

bool OAIMultiPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bbox.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_crs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
