/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonCollectionPriceJO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonCollectionPriceJO::OAIJsonCollectionPriceJO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonCollectionPriceJO::OAIJsonCollectionPriceJO() {
    this->initializeModel();
}

OAIJsonCollectionPriceJO::~OAIJsonCollectionPriceJO() {}

void OAIJsonCollectionPriceJO::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIJsonCollectionPriceJO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonCollectionPriceJO::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIJsonCollectionPriceJO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonCollectionPriceJO::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QList<OAILinkJO> OAIJsonCollectionPriceJO::getLinks() const {
    return m__links;
}
void OAIJsonCollectionPriceJO::setLinks(const QList<OAILinkJO> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIJsonCollectionPriceJO::is__links_Set() const{
    return m__links_isSet;
}

bool OAIJsonCollectionPriceJO::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIJsonCollectionPriceJO::getHref() const {
    return m_href;
}
void OAIJsonCollectionPriceJO::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIJsonCollectionPriceJO::is_href_Set() const{
    return m_href_isSet;
}

bool OAIJsonCollectionPriceJO::is_href_Valid() const{
    return m_href_isValid;
}

QList<OAIPriceJO> OAIJsonCollectionPriceJO::getItems() const {
    return m_items;
}
void OAIJsonCollectionPriceJO::setItems(const QList<OAIPriceJO> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIJsonCollectionPriceJO::is_items_Set() const{
    return m_items_isSet;
}

bool OAIJsonCollectionPriceJO::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIJsonCollectionPriceJO::getLimit() const {
    return m_limit;
}
void OAIJsonCollectionPriceJO::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIJsonCollectionPriceJO::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIJsonCollectionPriceJO::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIJsonCollectionPriceJO::getOffset() const {
    return m_offset;
}
void OAIJsonCollectionPriceJO::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIJsonCollectionPriceJO::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIJsonCollectionPriceJO::is_offset_Valid() const{
    return m_offset_isValid;
}

qint64 OAIJsonCollectionPriceJO::getSize() const {
    return m_size;
}
void OAIJsonCollectionPriceJO::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIJsonCollectionPriceJO::is_size_Set() const{
    return m_size_isSet;
}

bool OAIJsonCollectionPriceJO::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIJsonCollectionPriceJO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonCollectionPriceJO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
