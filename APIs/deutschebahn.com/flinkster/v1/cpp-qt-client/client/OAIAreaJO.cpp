/**
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAreaJO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAreaJO::OAIAreaJO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAreaJO::OAIAreaJO() {
    this->initializeModel();
}

OAIAreaJO::~OAIAreaJO() {}

void OAIAreaJO::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provider_area_id_isSet = false;
    m_provider_area_id_isValid = false;

    m_provider_network_ids_isSet = false;
    m_provider_network_ids_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIAreaJO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAreaJO::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provider_area_id_isValid = ::OpenAPI::fromJsonValue(m_provider_area_id, json[QString("providerAreaId")]);
    m_provider_area_id_isSet = !json[QString("providerAreaId")].isNull() && m_provider_area_id_isValid;

    m_provider_network_ids_isValid = ::OpenAPI::fromJsonValue(m_provider_network_ids, json[QString("providerNetworkIds")]);
    m_provider_network_ids_isSet = !json[QString("providerNetworkIds")].isNull() && m_provider_network_ids_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIAreaJO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAreaJO::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provider_area_id_isSet) {
        obj.insert(QString("providerAreaId"), ::OpenAPI::toJsonValue(m_provider_area_id));
    }
    if (m_provider_network_ids.size() > 0) {
        obj.insert(QString("providerNetworkIds"), ::OpenAPI::toJsonValue(m_provider_network_ids));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QList<OAILinkJO> OAIAreaJO::getLinks() const {
    return m__links;
}
void OAIAreaJO::setLinks(const QList<OAILinkJO> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAreaJO::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAreaJO::is__links_Valid() const{
    return m__links_isValid;
}

OAIAddressJO OAIAreaJO::getAddress() const {
    return m_address;
}
void OAIAreaJO::setAddress(const OAIAddressJO &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAreaJO::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAreaJO::is_address_Valid() const{
    return m_address_isValid;
}

QMap<QString, OAIObject> OAIAreaJO::getAttributes() const {
    return m_attributes;
}
void OAIAreaJO::setAttributes(const QMap<QString, OAIObject> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAreaJO::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAreaJO::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIAreaJO::getDescription() const {
    return m_description;
}
void OAIAreaJO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAreaJO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAreaJO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAreaJO::getExpand() const {
    return m_expand;
}
void OAIAreaJO::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIAreaJO::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIAreaJO::is_expand_Valid() const{
    return m_expand_isValid;
}

OAIGeometryJO OAIAreaJO::getGeometry() const {
    return m_geometry;
}
void OAIAreaJO::setGeometry(const OAIGeometryJO &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIAreaJO::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIAreaJO::is_geometry_Valid() const{
    return m_geometry_isValid;
}

QString OAIAreaJO::getHref() const {
    return m_href;
}
void OAIAreaJO::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIAreaJO::is_href_Set() const{
    return m_href_isSet;
}

bool OAIAreaJO::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIAreaJO::getName() const {
    return m_name;
}
void OAIAreaJO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAreaJO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAreaJO::is_name_Valid() const{
    return m_name_isValid;
}

OAIProviderJO OAIAreaJO::getProvider() const {
    return m_provider;
}
void OAIAreaJO::setProvider(const OAIProviderJO &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIAreaJO::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIAreaJO::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIAreaJO::getProviderAreaId() const {
    return m_provider_area_id;
}
void OAIAreaJO::setProviderAreaId(const QString &provider_area_id) {
    m_provider_area_id = provider_area_id;
    m_provider_area_id_isSet = true;
}

bool OAIAreaJO::is_provider_area_id_Set() const{
    return m_provider_area_id_isSet;
}

bool OAIAreaJO::is_provider_area_id_Valid() const{
    return m_provider_area_id_isValid;
}

QList<qint32> OAIAreaJO::getProviderNetworkIds() const {
    return m_provider_network_ids;
}
void OAIAreaJO::setProviderNetworkIds(const QList<qint32> &provider_network_ids) {
    m_provider_network_ids = provider_network_ids;
    m_provider_network_ids_isSet = true;
}

bool OAIAreaJO::is_provider_network_ids_Set() const{
    return m_provider_network_ids_isSet;
}

bool OAIAreaJO::is_provider_network_ids_Valid() const{
    return m_provider_network_ids_isValid;
}

QString OAIAreaJO::getType() const {
    return m_type;
}
void OAIAreaJO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAreaJO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAreaJO::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAreaJO::getUid() const {
    return m_uid;
}
void OAIAreaJO::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIAreaJO::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIAreaJO::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIAreaJO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_area_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_network_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAreaJO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
