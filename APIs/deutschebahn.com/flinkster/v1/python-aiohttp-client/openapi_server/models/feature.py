# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs import Crs
from openapi_server.models.geo_json_object import GeoJsonObject
from openapi_server import util


class Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox: List[float]=None, crs: Crs=None, geometry: GeoJsonObject=None, id: str=None, properties: Dict[str, object]=None):
        """Feature - a model defined in OpenAPI

        :param bbox: The bbox of this Feature.
        :param crs: The crs of this Feature.
        :param geometry: The geometry of this Feature.
        :param id: The id of this Feature.
        :param properties: The properties of this Feature.
        """
        self.openapi_types = {
            'bbox': List[float],
            'crs': Crs,
            'geometry': GeoJsonObject,
            'id': str,
            'properties': Dict[str, object]
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'crs': 'crs',
            'geometry': 'geometry',
            'id': 'id',
            'properties': 'properties'
        }

        self._bbox = bbox
        self._crs = crs
        self._geometry = geometry
        self._id = id
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feature of this Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this Feature.


        :return: The bbox of this Feature.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Feature.


        :param bbox: The bbox of this Feature.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def crs(self):
        """Gets the crs of this Feature.


        :return: The crs of this Feature.
        :rtype: Crs
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this Feature.


        :param crs: The crs of this Feature.
        :type crs: Crs
        """

        self._crs = crs

    @property
    def geometry(self):
        """Gets the geometry of this Feature.


        :return: The geometry of this Feature.
        :rtype: GeoJsonObject
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Feature.


        :param geometry: The geometry of this Feature.
        :type geometry: GeoJsonObject
        """

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this Feature.


        :return: The id of this Feature.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feature.


        :param id: The id of this Feature.
        :type id: str
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this Feature.


        :return: The properties of this Feature.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Feature.


        :param properties: The properties of this Feature.
        :type properties: Dict[str, object]
        """

        self._properties = properties
