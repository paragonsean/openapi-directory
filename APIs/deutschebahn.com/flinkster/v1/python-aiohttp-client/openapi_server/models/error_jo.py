# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorJO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, code: int=None, level: str=None, message: str=None, name: str=None):
        """ErrorJO - a model defined in OpenAPI

        :param attributes: The attributes of this ErrorJO.
        :param code: The code of this ErrorJO.
        :param level: The level of this ErrorJO.
        :param message: The message of this ErrorJO.
        :param name: The name of this ErrorJO.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'code': int,
            'level': str,
            'message': str,
            'name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'code': 'code',
            'level': 'level',
            'message': 'message',
            'name': 'name'
        }

        self._attributes = attributes
        self._code = code
        self._level = level
        self._message = message
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorJO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorJO of this ErrorJO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ErrorJO.


        :return: The attributes of this ErrorJO.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ErrorJO.


        :param attributes: The attributes of this ErrorJO.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def code(self):
        """Gets the code of this ErrorJO.


        :return: The code of this ErrorJO.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorJO.


        :param code: The code of this ErrorJO.
        :type code: int
        """

        self._code = code

    @property
    def level(self):
        """Gets the level of this ErrorJO.


        :return: The level of this ErrorJO.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ErrorJO.


        :param level: The level of this ErrorJO.
        :type level: str
        """
        allowed_values = ["INFO", "WARNING", "ERROR"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self):
        """Gets the message of this ErrorJO.


        :return: The message of this ErrorJO.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorJO.


        :param message: The message of this ErrorJO.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this ErrorJO.


        :return: The name of this ErrorJO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ErrorJO.


        :param name: The name of this ErrorJO.
        :type name: str
        """

        self._name = name
