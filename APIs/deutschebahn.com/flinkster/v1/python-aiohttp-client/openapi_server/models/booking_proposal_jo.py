# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.area_jo import AreaJO
from openapi_server.models.geo_json_object import GeoJsonObject
from openapi_server.models.json_collection_price_jo import JsonCollectionPriceJO
from openapi_server.models.link_jo import LinkJO
from openapi_server.models.rental_object_jo import RentalObjectJO
from openapi_server import util


class BookingProposalJO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[LinkJO]=None, area: AreaJO=None, attributes: Dict[str, object]=None, description: str=None, distance: float=None, expand: str=None, href: str=None, name: str=None, position: GeoJsonObject=None, price: JsonCollectionPriceJO=None, rental_object: RentalObjectJO=None, uid: str=None):
        """BookingProposalJO - a model defined in OpenAPI

        :param links: The links of this BookingProposalJO.
        :param area: The area of this BookingProposalJO.
        :param attributes: The attributes of this BookingProposalJO.
        :param description: The description of this BookingProposalJO.
        :param distance: The distance of this BookingProposalJO.
        :param expand: The expand of this BookingProposalJO.
        :param href: The href of this BookingProposalJO.
        :param name: The name of this BookingProposalJO.
        :param position: The position of this BookingProposalJO.
        :param price: The price of this BookingProposalJO.
        :param rental_object: The rental_object of this BookingProposalJO.
        :param uid: The uid of this BookingProposalJO.
        """
        self.openapi_types = {
            'links': List[LinkJO],
            'area': AreaJO,
            'attributes': Dict[str, object],
            'description': str,
            'distance': float,
            'expand': str,
            'href': str,
            'name': str,
            'position': GeoJsonObject,
            'price': JsonCollectionPriceJO,
            'rental_object': RentalObjectJO,
            'uid': str
        }

        self.attribute_map = {
            'links': '_links',
            'area': 'area',
            'attributes': 'attributes',
            'description': 'description',
            'distance': 'distance',
            'expand': 'expand',
            'href': 'href',
            'name': 'name',
            'position': 'position',
            'price': 'price',
            'rental_object': 'rentalObject',
            'uid': 'uid'
        }

        self._links = links
        self._area = area
        self._attributes = attributes
        self._description = description
        self._distance = distance
        self._expand = expand
        self._href = href
        self._name = name
        self._position = position
        self._price = price
        self._rental_object = rental_object
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingProposalJO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BookingProposalJO of this BookingProposalJO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this BookingProposalJO.


        :return: The links of this BookingProposalJO.
        :rtype: List[LinkJO]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BookingProposalJO.


        :param links: The links of this BookingProposalJO.
        :type links: List[LinkJO]
        """

        self._links = links

    @property
    def area(self):
        """Gets the area of this BookingProposalJO.


        :return: The area of this BookingProposalJO.
        :rtype: AreaJO
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this BookingProposalJO.


        :param area: The area of this BookingProposalJO.
        :type area: AreaJO
        """

        self._area = area

    @property
    def attributes(self):
        """Gets the attributes of this BookingProposalJO.


        :return: The attributes of this BookingProposalJO.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BookingProposalJO.


        :param attributes: The attributes of this BookingProposalJO.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this BookingProposalJO.


        :return: The description of this BookingProposalJO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BookingProposalJO.


        :param description: The description of this BookingProposalJO.
        :type description: str
        """

        self._description = description

    @property
    def distance(self):
        """Gets the distance of this BookingProposalJO.


        :return: The distance of this BookingProposalJO.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this BookingProposalJO.


        :param distance: The distance of this BookingProposalJO.
        :type distance: float
        """

        self._distance = distance

    @property
    def expand(self):
        """Gets the expand of this BookingProposalJO.


        :return: The expand of this BookingProposalJO.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this BookingProposalJO.


        :param expand: The expand of this BookingProposalJO.
        :type expand: str
        """

        self._expand = expand

    @property
    def href(self):
        """Gets the href of this BookingProposalJO.


        :return: The href of this BookingProposalJO.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BookingProposalJO.


        :param href: The href of this BookingProposalJO.
        :type href: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this BookingProposalJO.


        :return: The name of this BookingProposalJO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BookingProposalJO.


        :param name: The name of this BookingProposalJO.
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this BookingProposalJO.


        :return: The position of this BookingProposalJO.
        :rtype: GeoJsonObject
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BookingProposalJO.


        :param position: The position of this BookingProposalJO.
        :type position: GeoJsonObject
        """

        self._position = position

    @property
    def price(self):
        """Gets the price of this BookingProposalJO.


        :return: The price of this BookingProposalJO.
        :rtype: JsonCollectionPriceJO
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BookingProposalJO.


        :param price: The price of this BookingProposalJO.
        :type price: JsonCollectionPriceJO
        """

        self._price = price

    @property
    def rental_object(self):
        """Gets the rental_object of this BookingProposalJO.


        :return: The rental_object of this BookingProposalJO.
        :rtype: RentalObjectJO
        """
        return self._rental_object

    @rental_object.setter
    def rental_object(self, rental_object):
        """Sets the rental_object of this BookingProposalJO.


        :param rental_object: The rental_object of this BookingProposalJO.
        :type rental_object: RentalObjectJO
        """

        self._rental_object = rental_object

    @property
    def uid(self):
        """Gets the uid of this BookingProposalJO.


        :return: The uid of this BookingProposalJO.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this BookingProposalJO.


        :param uid: The uid of this BookingProposalJO.
        :type uid: str
        """

        self._uid = uid
