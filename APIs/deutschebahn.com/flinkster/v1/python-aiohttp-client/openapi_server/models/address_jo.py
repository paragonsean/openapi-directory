# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressJO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, district: str=None, iso_country_code: str=None, number: str=None, street: str=None, zip: str=None):
        """AddressJO - a model defined in OpenAPI

        :param city: The city of this AddressJO.
        :param district: The district of this AddressJO.
        :param iso_country_code: The iso_country_code of this AddressJO.
        :param number: The number of this AddressJO.
        :param street: The street of this AddressJO.
        :param zip: The zip of this AddressJO.
        """
        self.openapi_types = {
            'city': str,
            'district': str,
            'iso_country_code': str,
            'number': str,
            'street': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'district': 'district',
            'iso_country_code': 'isoCountryCode',
            'number': 'number',
            'street': 'street',
            'zip': 'zip'
        }

        self._city = city
        self._district = district
        self._iso_country_code = iso_country_code
        self._number = number
        self._street = street
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressJO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressJO of this AddressJO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this AddressJO.


        :return: The city of this AddressJO.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressJO.


        :param city: The city of this AddressJO.
        :type city: str
        """

        self._city = city

    @property
    def district(self):
        """Gets the district of this AddressJO.


        :return: The district of this AddressJO.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this AddressJO.


        :param district: The district of this AddressJO.
        :type district: str
        """

        self._district = district

    @property
    def iso_country_code(self):
        """Gets the iso_country_code of this AddressJO.


        :return: The iso_country_code of this AddressJO.
        :rtype: str
        """
        return self._iso_country_code

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code):
        """Sets the iso_country_code of this AddressJO.


        :param iso_country_code: The iso_country_code of this AddressJO.
        :type iso_country_code: str
        """

        self._iso_country_code = iso_country_code

    @property
    def number(self):
        """Gets the number of this AddressJO.


        :return: The number of this AddressJO.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AddressJO.


        :param number: The number of this AddressJO.
        :type number: str
        """

        self._number = number

    @property
    def street(self):
        """Gets the street of this AddressJO.


        :return: The street of this AddressJO.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this AddressJO.


        :param street: The street of this AddressJO.
        :type street: str
        """

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this AddressJO.


        :return: The zip of this AddressJO.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AddressJO.


        :param zip: The zip of this AddressJO.
        :type zip: str
        """

        self._zip = zip
