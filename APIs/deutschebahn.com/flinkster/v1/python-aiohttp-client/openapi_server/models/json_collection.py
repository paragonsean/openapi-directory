# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_object import JsonObject
from openapi_server.models.link_jo import LinkJO
from openapi_server import util


class JsonCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[LinkJO]=None, href: str=None, items: List[JsonObject]=None, limit: int=None, offset: int=None, size: int=None):
        """JsonCollection - a model defined in OpenAPI

        :param links: The links of this JsonCollection.
        :param href: The href of this JsonCollection.
        :param items: The items of this JsonCollection.
        :param limit: The limit of this JsonCollection.
        :param offset: The offset of this JsonCollection.
        :param size: The size of this JsonCollection.
        """
        self.openapi_types = {
            'links': List[LinkJO],
            'href': str,
            'items': List[JsonObject],
            'limit': int,
            'offset': int,
            'size': int
        }

        self.attribute_map = {
            'links': '_links',
            'href': 'href',
            'items': 'items',
            'limit': 'limit',
            'offset': 'offset',
            'size': 'size'
        }

        self._links = links
        self._href = href
        self._items = items
        self._limit = limit
        self._offset = offset
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonCollection of this JsonCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this JsonCollection.


        :return: The links of this JsonCollection.
        :rtype: List[LinkJO]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this JsonCollection.


        :param links: The links of this JsonCollection.
        :type links: List[LinkJO]
        """

        self._links = links

    @property
    def href(self):
        """Gets the href of this JsonCollection.


        :return: The href of this JsonCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this JsonCollection.


        :param href: The href of this JsonCollection.
        :type href: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this JsonCollection.


        :return: The items of this JsonCollection.
        :rtype: List[JsonObject]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this JsonCollection.


        :param items: The items of this JsonCollection.
        :type items: List[JsonObject]
        """

        self._items = items

    @property
    def limit(self):
        """Gets the limit of this JsonCollection.


        :return: The limit of this JsonCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this JsonCollection.


        :param limit: The limit of this JsonCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this JsonCollection.


        :return: The offset of this JsonCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this JsonCollection.


        :param offset: The offset of this JsonCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def size(self):
        """Gets the size of this JsonCollection.


        :return: The size of this JsonCollection.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this JsonCollection.


        :param size: The size of this JsonCollection.
        :type size: int
        """

        self._size = size
