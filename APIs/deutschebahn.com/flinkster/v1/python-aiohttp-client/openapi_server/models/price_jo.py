# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_jo import LinkJO
from openapi_server import util


class PriceJO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[LinkJO]=None, attributes: Dict[str, object]=None, currency: str=None, description: str=None, expand: str=None, grossamount: float=None, href: str=None, interval: int=None, name: str=None, preferredprice: bool=False, taxrate: float=None, type: str=None, uid: str=None):
        """PriceJO - a model defined in OpenAPI

        :param links: The links of this PriceJO.
        :param attributes: The attributes of this PriceJO.
        :param currency: The currency of this PriceJO.
        :param description: The description of this PriceJO.
        :param expand: The expand of this PriceJO.
        :param grossamount: The grossamount of this PriceJO.
        :param href: The href of this PriceJO.
        :param interval: The interval of this PriceJO.
        :param name: The name of this PriceJO.
        :param preferredprice: The preferredprice of this PriceJO.
        :param taxrate: The taxrate of this PriceJO.
        :param type: The type of this PriceJO.
        :param uid: The uid of this PriceJO.
        """
        self.openapi_types = {
            'links': List[LinkJO],
            'attributes': Dict[str, object],
            'currency': str,
            'description': str,
            'expand': str,
            'grossamount': float,
            'href': str,
            'interval': int,
            'name': str,
            'preferredprice': bool,
            'taxrate': float,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'links': '_links',
            'attributes': 'attributes',
            'currency': 'currency',
            'description': 'description',
            'expand': 'expand',
            'grossamount': 'grossamount',
            'href': 'href',
            'interval': 'interval',
            'name': 'name',
            'preferredprice': 'preferredprice',
            'taxrate': 'taxrate',
            'type': 'type',
            'uid': 'uid'
        }

        self._links = links
        self._attributes = attributes
        self._currency = currency
        self._description = description
        self._expand = expand
        self._grossamount = grossamount
        self._href = href
        self._interval = interval
        self._name = name
        self._preferredprice = preferredprice
        self._taxrate = taxrate
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceJO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceJO of this PriceJO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PriceJO.


        :return: The links of this PriceJO.
        :rtype: List[LinkJO]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PriceJO.


        :param links: The links of this PriceJO.
        :type links: List[LinkJO]
        """

        self._links = links

    @property
    def attributes(self):
        """Gets the attributes of this PriceJO.


        :return: The attributes of this PriceJO.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PriceJO.


        :param attributes: The attributes of this PriceJO.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def currency(self):
        """Gets the currency of this PriceJO.


        :return: The currency of this PriceJO.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PriceJO.


        :param currency: The currency of this PriceJO.
        :type currency: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this PriceJO.


        :return: The description of this PriceJO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PriceJO.


        :param description: The description of this PriceJO.
        :type description: str
        """

        self._description = description

    @property
    def expand(self):
        """Gets the expand of this PriceJO.


        :return: The expand of this PriceJO.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this PriceJO.


        :param expand: The expand of this PriceJO.
        :type expand: str
        """

        self._expand = expand

    @property
    def grossamount(self):
        """Gets the grossamount of this PriceJO.


        :return: The grossamount of this PriceJO.
        :rtype: float
        """
        return self._grossamount

    @grossamount.setter
    def grossamount(self, grossamount):
        """Sets the grossamount of this PriceJO.


        :param grossamount: The grossamount of this PriceJO.
        :type grossamount: float
        """

        self._grossamount = grossamount

    @property
    def href(self):
        """Gets the href of this PriceJO.


        :return: The href of this PriceJO.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PriceJO.


        :param href: The href of this PriceJO.
        :type href: str
        """

        self._href = href

    @property
    def interval(self):
        """Gets the interval of this PriceJO.


        :return: The interval of this PriceJO.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this PriceJO.


        :param interval: The interval of this PriceJO.
        :type interval: int
        """

        self._interval = interval

    @property
    def name(self):
        """Gets the name of this PriceJO.


        :return: The name of this PriceJO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PriceJO.


        :param name: The name of this PriceJO.
        :type name: str
        """

        self._name = name

    @property
    def preferredprice(self):
        """Gets the preferredprice of this PriceJO.


        :return: The preferredprice of this PriceJO.
        :rtype: bool
        """
        return self._preferredprice

    @preferredprice.setter
    def preferredprice(self, preferredprice):
        """Sets the preferredprice of this PriceJO.


        :param preferredprice: The preferredprice of this PriceJO.
        :type preferredprice: bool
        """

        self._preferredprice = preferredprice

    @property
    def taxrate(self):
        """Gets the taxrate of this PriceJO.


        :return: The taxrate of this PriceJO.
        :rtype: float
        """
        return self._taxrate

    @taxrate.setter
    def taxrate(self, taxrate):
        """Sets the taxrate of this PriceJO.


        :param taxrate: The taxrate of this PriceJO.
        :type taxrate: float
        """

        self._taxrate = taxrate

    @property
    def type(self):
        """Gets the type of this PriceJO.


        :return: The type of this PriceJO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PriceJO.


        :param type: The type of this PriceJO.
        :type type: str
        """
        allowed_values = ["TIME", "DISTANCE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this PriceJO.


        :return: The uid of this PriceJO.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PriceJO.


        :param uid: The uid of this PriceJO.
        :type uid: str
        """

        self._uid = uid
