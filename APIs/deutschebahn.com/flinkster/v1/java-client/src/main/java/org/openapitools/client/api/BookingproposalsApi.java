/*
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorJO;
import org.openapitools.client.model.RentalObjectJO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BookingproposalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BookingproposalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BookingproposalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listBookingProposals
     * @param lat  (optional)
     * @param lon  (optional)
     * @param radius  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param providernetwork  (optional)
     * @param begin  (optional)
     * @param end  (optional)
     * @param expand  (optional)
     * @param view  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookingProposalsCall(Double lat, Double lon, Integer radius, Integer offset, Integer limit, String providernetwork, String begin, String end, String expand, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bookingproposals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (providernetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providernetwork", providernetwork));
        }

        if (begin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begin", begin));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBookingProposalsValidateBeforeCall(Double lat, Double lon, Integer radius, Integer offset, Integer limit, String providernetwork, String begin, String end, String expand, String view, final ApiCallback _callback) throws ApiException {
        return listBookingProposalsCall(lat, lon, radius, offset, limit, providernetwork, begin, end, expand, view, _callback);

    }

    /**
     * Query for available RentalObjects of a specific view
     * Here you can query all bookable Rental Objects with different Parameters (Time, Location,...)
     * @param lat  (optional)
     * @param lon  (optional)
     * @param radius  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param providernetwork  (optional)
     * @param begin  (optional)
     * @param end  (optional)
     * @param expand  (optional)
     * @param view  (optional)
     * @return RentalObjectJO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public RentalObjectJO listBookingProposals(Double lat, Double lon, Integer radius, Integer offset, Integer limit, String providernetwork, String begin, String end, String expand, String view) throws ApiException {
        ApiResponse<RentalObjectJO> localVarResp = listBookingProposalsWithHttpInfo(lat, lon, radius, offset, limit, providernetwork, begin, end, expand, view);
        return localVarResp.getData();
    }

    /**
     * Query for available RentalObjects of a specific view
     * Here you can query all bookable Rental Objects with different Parameters (Time, Location,...)
     * @param lat  (optional)
     * @param lon  (optional)
     * @param radius  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param providernetwork  (optional)
     * @param begin  (optional)
     * @param end  (optional)
     * @param expand  (optional)
     * @param view  (optional)
     * @return ApiResponse&lt;RentalObjectJO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RentalObjectJO> listBookingProposalsWithHttpInfo(Double lat, Double lon, Integer radius, Integer offset, Integer limit, String providernetwork, String begin, String end, String expand, String view) throws ApiException {
        okhttp3.Call localVarCall = listBookingProposalsValidateBeforeCall(lat, lon, radius, offset, limit, providernetwork, begin, end, expand, view, null);
        Type localVarReturnType = new TypeToken<RentalObjectJO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query for available RentalObjects of a specific view (asynchronously)
     * Here you can query all bookable Rental Objects with different Parameters (Time, Location,...)
     * @param lat  (optional)
     * @param lon  (optional)
     * @param radius  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param providernetwork  (optional)
     * @param begin  (optional)
     * @param end  (optional)
     * @param expand  (optional)
     * @param view  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookingProposalsAsync(Double lat, Double lon, Integer radius, Integer offset, Integer limit, String providernetwork, String begin, String end, String expand, String view, final ApiCallback<RentalObjectJO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBookingProposalsValidateBeforeCall(lat, lon, radius, offset, limit, providernetwork, begin, end, expand, view, _callback);
        Type localVarReturnType = new TypeToken<RentalObjectJO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
