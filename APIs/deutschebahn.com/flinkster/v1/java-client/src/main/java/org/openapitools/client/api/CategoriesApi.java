/*
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CategoryJO;
import org.openapitools.client.model.ErrorJO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCategory
     * @param providernetworkUID Provider Network UID (required)
     * @param categoryUID  (required)
     * @param expand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryCall(String providernetworkUID, String categoryUID, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providernetworks/{providernetworkUID}/categories/{categoryUID}"
            .replace("{" + "providernetworkUID" + "}", localVarApiClient.escapeString(providernetworkUID.toString()))
            .replace("{" + "categoryUID" + "}", localVarApiClient.escapeString(categoryUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryValidateBeforeCall(String providernetworkUID, String categoryUID, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providernetworkUID' is set
        if (providernetworkUID == null) {
            throw new ApiException("Missing the required parameter 'providernetworkUID' when calling getCategory(Async)");
        }

        // verify the required parameter 'categoryUID' is set
        if (categoryUID == null) {
            throw new ApiException("Missing the required parameter 'categoryUID' when calling getCategory(Async)");
        }

        return getCategoryCall(providernetworkUID, categoryUID, expand, _callback);

    }

    /**
     * Get a Category by UID
     * Search for categorie.
     * @param providernetworkUID Provider Network UID (required)
     * @param categoryUID  (required)
     * @param expand  (optional)
     * @return CategoryJO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryJO getCategory(String providernetworkUID, String categoryUID, String expand) throws ApiException {
        ApiResponse<CategoryJO> localVarResp = getCategoryWithHttpInfo(providernetworkUID, categoryUID, expand);
        return localVarResp.getData();
    }

    /**
     * Get a Category by UID
     * Search for categorie.
     * @param providernetworkUID Provider Network UID (required)
     * @param categoryUID  (required)
     * @param expand  (optional)
     * @return ApiResponse&lt;CategoryJO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryJO> getCategoryWithHttpInfo(String providernetworkUID, String categoryUID, String expand) throws ApiException {
        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(providernetworkUID, categoryUID, expand, null);
        Type localVarReturnType = new TypeToken<CategoryJO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Category by UID (asynchronously)
     * Search for categorie.
     * @param providernetworkUID Provider Network UID (required)
     * @param categoryUID  (required)
     * @param expand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAsync(String providernetworkUID, String categoryUID, String expand, final ApiCallback<CategoryJO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(providernetworkUID, categoryUID, expand, _callback);
        Type localVarReturnType = new TypeToken<CategoryJO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCategories
     * @param providernetworkUID  (required)
     * @param expand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCategoriesCall(String providernetworkUID, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providernetworks/{providernetworkUID}/categories"
            .replace("{" + "providernetworkUID" + "}", localVarApiClient.escapeString(providernetworkUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(String providernetworkUID, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providernetworkUID' is set
        if (providernetworkUID == null) {
            throw new ApiException("Missing the required parameter 'providernetworkUID' when calling listCategories(Async)");
        }

        return listCategoriesCall(providernetworkUID, expand, _callback);

    }

    /**
     * Lists all categories
     * Search for categorie.
     * @param providernetworkUID  (required)
     * @param expand  (optional)
     * @return CategoryJO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryJO listCategories(String providernetworkUID, String expand) throws ApiException {
        ApiResponse<CategoryJO> localVarResp = listCategoriesWithHttpInfo(providernetworkUID, expand);
        return localVarResp.getData();
    }

    /**
     * Lists all categories
     * Search for categorie.
     * @param providernetworkUID  (required)
     * @param expand  (optional)
     * @return ApiResponse&lt;CategoryJO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryJO> listCategoriesWithHttpInfo(String providernetworkUID, String expand) throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(providernetworkUID, expand, null);
        Type localVarReturnType = new TypeToken<CategoryJO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all categories (asynchronously)
     * Search for categorie.
     * @param providernetworkUID  (required)
     * @param expand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request One or more parameters have invalid values. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Provider is not allowed to use this interface. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCategoriesAsync(String providernetworkUID, String expand, final ApiCallback<CategoryJO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(providernetworkUID, expand, _callback);
        Type localVarReturnType = new TypeToken<CategoryJO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
