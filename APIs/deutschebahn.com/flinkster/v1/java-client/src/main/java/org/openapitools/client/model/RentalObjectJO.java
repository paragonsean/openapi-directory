/*
 * Flinkster_API_NG
 * This REST-API enables you to query for private transport sharing offers provided by companies and cities in Germany, Netherland and Austria.  You can search for informations about the rental stations (points or areas) where you can find the rentals by utilizing the /areas/ ressource.  With the help of the proximity search in the /bookingproposals/ URI you can request the availabilities of the rentalobjects for spontaneous or planed usage in the future.   Feel free to browse through data by setting the parameter 'providernetwork' to the value:   1: Search for car sharing offers provided by the Flinkster platform (http://www.flinkster.de) 2: Finding bike rental offers from Call a Bike (http://www.callabike.de)   You can find more details in the documentation section (Unfortunately only available in german language).  Have lots of fun and we are lucky to take notice of your products or getting your feedback.
 *
 * The version of the OpenAPI document: v1
 * Contact: partner@flinkster.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CategoryJO;
import org.openapitools.client.model.LinkJO;
import org.openapitools.client.model.ProviderJO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RentalObjectJO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:23.126351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RentalObjectJO {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<LinkJO> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryJO category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  private String expand;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private ProviderJO provider;

  public static final String SERIALIZED_NAME_PROVIDER_NETWORK_IDS = "providerNetworkIds";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NETWORK_IDS)
  private List<Integer> providerNetworkIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_RENTAL_OBJECT_ID = "providerRentalObjectId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_RENTAL_OBJECT_ID)
  private String providerRentalObjectId;

  /**
   * Gets or Sets rentalModel
   */
  @JsonAdapter(RentalModelEnum.Adapter.class)
  public enum RentalModelEnum {
    FREEFLOATING("FREEFLOATING"),
    
    FREEFLOATINGWITHSTATION("FREEFLOATINGWITHSTATION"),
    
    STATIONBASED("STATIONBASED"),
    
    PARKINGAREA("PARKINGAREA"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    RentalModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RentalModelEnum fromValue(String value) {
      for (RentalModelEnum b : RentalModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RentalModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RentalModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RentalModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RentalModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RentalModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENTAL_MODEL = "rentalModel";
  @SerializedName(SERIALIZED_NAME_RENTAL_MODEL)
  private RentalModelEnum rentalModel;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VEHICLE("VEHICLE"),
    
    VEHICLEPOOL("VEHICLEPOOL"),
    
    BIKE("BIKE"),
    
    PEDELEC("PEDELEC"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public RentalObjectJO() {
  }

  public RentalObjectJO links(List<LinkJO> links) {
    this.links = links;
    return this;
  }

  public RentalObjectJO addLinksItem(LinkJO linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<LinkJO> getLinks() {
    return links;
  }

  public void setLinks(List<LinkJO> links) {
    this.links = links;
  }


  public RentalObjectJO attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public RentalObjectJO putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public RentalObjectJO category(CategoryJO category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryJO getCategory() {
    return category;
  }

  public void setCategory(CategoryJO category) {
    this.category = category;
  }


  public RentalObjectJO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RentalObjectJO expand(String expand) {
    this.expand = expand;
    return this;
  }

  /**
   * Get expand
   * @return expand
   */
  @javax.annotation.Nullable
  public String getExpand() {
    return expand;
  }

  public void setExpand(String expand) {
    this.expand = expand;
  }


  public RentalObjectJO href(String href) {
    this.href = href;
    return this;
  }

  /**
   * Get href
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public RentalObjectJO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RentalObjectJO provider(ProviderJO provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public ProviderJO getProvider() {
    return provider;
  }

  public void setProvider(ProviderJO provider) {
    this.provider = provider;
  }


  public RentalObjectJO providerNetworkIds(List<Integer> providerNetworkIds) {
    this.providerNetworkIds = providerNetworkIds;
    return this;
  }

  public RentalObjectJO addProviderNetworkIdsItem(Integer providerNetworkIdsItem) {
    if (this.providerNetworkIds == null) {
      this.providerNetworkIds = new ArrayList<>();
    }
    this.providerNetworkIds.add(providerNetworkIdsItem);
    return this;
  }

  /**
   * Get providerNetworkIds
   * @return providerNetworkIds
   */
  @javax.annotation.Nullable
  public List<Integer> getProviderNetworkIds() {
    return providerNetworkIds;
  }

  public void setProviderNetworkIds(List<Integer> providerNetworkIds) {
    this.providerNetworkIds = providerNetworkIds;
  }


  public RentalObjectJO providerRentalObjectId(String providerRentalObjectId) {
    this.providerRentalObjectId = providerRentalObjectId;
    return this;
  }

  /**
   * Get providerRentalObjectId
   * @return providerRentalObjectId
   */
  @javax.annotation.Nullable
  public String getProviderRentalObjectId() {
    return providerRentalObjectId;
  }

  public void setProviderRentalObjectId(String providerRentalObjectId) {
    this.providerRentalObjectId = providerRentalObjectId;
  }


  public RentalObjectJO rentalModel(RentalModelEnum rentalModel) {
    this.rentalModel = rentalModel;
    return this;
  }

  /**
   * Get rentalModel
   * @return rentalModel
   */
  @javax.annotation.Nullable
  public RentalModelEnum getRentalModel() {
    return rentalModel;
  }

  public void setRentalModel(RentalModelEnum rentalModel) {
    this.rentalModel = rentalModel;
  }


  public RentalObjectJO type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public RentalObjectJO uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RentalObjectJO rentalObjectJO = (RentalObjectJO) o;
    return Objects.equals(this.links, rentalObjectJO.links) &&
        Objects.equals(this.attributes, rentalObjectJO.attributes) &&
        Objects.equals(this.category, rentalObjectJO.category) &&
        Objects.equals(this.description, rentalObjectJO.description) &&
        Objects.equals(this.expand, rentalObjectJO.expand) &&
        Objects.equals(this.href, rentalObjectJO.href) &&
        Objects.equals(this.name, rentalObjectJO.name) &&
        Objects.equals(this.provider, rentalObjectJO.provider) &&
        Objects.equals(this.providerNetworkIds, rentalObjectJO.providerNetworkIds) &&
        Objects.equals(this.providerRentalObjectId, rentalObjectJO.providerRentalObjectId) &&
        Objects.equals(this.rentalModel, rentalObjectJO.rentalModel) &&
        Objects.equals(this.type, rentalObjectJO.type) &&
        Objects.equals(this.uid, rentalObjectJO.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, attributes, category, description, expand, href, name, provider, providerNetworkIds, providerRentalObjectId, rentalModel, type, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RentalObjectJO {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerNetworkIds: ").append(toIndentedString(providerNetworkIds)).append("\n");
    sb.append("    providerRentalObjectId: ").append(toIndentedString(providerRentalObjectId)).append("\n");
    sb.append("    rentalModel: ").append(toIndentedString(rentalModel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("attributes");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("expand");
    openapiFields.add("href");
    openapiFields.add("name");
    openapiFields.add("provider");
    openapiFields.add("providerNetworkIds");
    openapiFields.add("providerRentalObjectId");
    openapiFields.add("rentalModel");
    openapiFields.add("type");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RentalObjectJO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RentalObjectJO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RentalObjectJO is not found in the empty JSON string", RentalObjectJO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RentalObjectJO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RentalObjectJO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            LinkJO.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryJO.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) && !jsonObj.get("expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        ProviderJO.validateJsonElement(jsonObj.get("provider"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("providerNetworkIds") != null && !jsonObj.get("providerNetworkIds").isJsonNull() && !jsonObj.get("providerNetworkIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerNetworkIds` to be an array in the JSON string but got `%s`", jsonObj.get("providerNetworkIds").toString()));
      }
      if ((jsonObj.get("providerRentalObjectId") != null && !jsonObj.get("providerRentalObjectId").isJsonNull()) && !jsonObj.get("providerRentalObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerRentalObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerRentalObjectId").toString()));
      }
      if ((jsonObj.get("rentalModel") != null && !jsonObj.get("rentalModel").isJsonNull()) && !jsonObj.get("rentalModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rentalModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rentalModel").toString()));
      }
      // validate the optional field `rentalModel`
      if (jsonObj.get("rentalModel") != null && !jsonObj.get("rentalModel").isJsonNull()) {
        RentalModelEnum.validateJsonElement(jsonObj.get("rentalModel"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RentalObjectJO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RentalObjectJO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RentalObjectJO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RentalObjectJO.class));

       return (TypeAdapter<T>) new TypeAdapter<RentalObjectJO>() {
           @Override
           public void write(JsonWriter out, RentalObjectJO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RentalObjectJO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RentalObjectJO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RentalObjectJO
   * @throws IOException if the JSON string is invalid with respect to RentalObjectJO
   */
  public static RentalObjectJO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RentalObjectJO.class);
  }

  /**
   * Convert an instance of RentalObjectJO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

