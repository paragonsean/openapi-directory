/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosisResponse_Public.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosisResponse_Public::OAIDiagnosisResponse_Public(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosisResponse_Public::OAIDiagnosisResponse_Public() {
    this->initializeModel();
}

OAIDiagnosisResponse_Public::~OAIDiagnosisResponse_Public() {}

void OAIDiagnosisResponse_Public::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_should_stop_isSet = false;
    m_should_stop_isValid = false;
}

void OAIDiagnosisResponse_Public::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosisResponse_Public::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_should_stop_isValid = ::OpenAPI::fromJsonValue(m_should_stop, json[QString("should_stop")]);
    m_should_stop_isSet = !json[QString("should_stop")].isNull() && m_should_stop_isValid;
}

QString OAIDiagnosisResponse_Public::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosisResponse_Public::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_extras.size() > 0) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_question.isSet()) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_should_stop_isSet) {
        obj.insert(QString("should_stop"), ::OpenAPI::toJsonValue(m_should_stop));
    }
    return obj;
}

QList<OAIConditionProbability_Public> OAIDiagnosisResponse_Public::getConditions() const {
    return m_conditions;
}
void OAIDiagnosisResponse_Public::setConditions(const QList<OAIConditionProbability_Public> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIDiagnosisResponse_Public::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIDiagnosisResponse_Public::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QMap<QString, OAIObject> OAIDiagnosisResponse_Public::getExtras() const {
    return m_extras;
}
void OAIDiagnosisResponse_Public::setExtras(const QMap<QString, OAIObject> &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIDiagnosisResponse_Public::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIDiagnosisResponse_Public::is_extras_Valid() const{
    return m_extras_isValid;
}

OAIQuestion_Public OAIDiagnosisResponse_Public::getQuestion() const {
    return m_question;
}
void OAIDiagnosisResponse_Public::setQuestion(const OAIQuestion_Public &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIDiagnosisResponse_Public::is_question_Set() const{
    return m_question_isSet;
}

bool OAIDiagnosisResponse_Public::is_question_Valid() const{
    return m_question_isValid;
}

bool OAIDiagnosisResponse_Public::isShouldStop() const {
    return m_should_stop;
}
void OAIDiagnosisResponse_Public::setShouldStop(const bool &should_stop) {
    m_should_stop = should_stop;
    m_should_stop_isSet = true;
}

bool OAIDiagnosisResponse_Public::is_should_stop_Set() const{
    return m_should_stop_isSet;
}

bool OAIDiagnosisResponse_Public::is_should_stop_Valid() const{
    return m_should_stop_isValid;
}

bool OAIDiagnosisResponse_Public::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_stop_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosisResponse_Public::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
