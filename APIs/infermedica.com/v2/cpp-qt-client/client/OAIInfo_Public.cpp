/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfo_Public.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfo_Public::OAIInfo_Public(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfo_Public::OAIInfo_Public() {
    this->initializeModel();
}

OAIInfo_Public::~OAIInfo_Public() {}

void OAIInfo_Public::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_conditions_count_isSet = false;
    m_conditions_count_isValid = false;

    m_lab_tests_count_isSet = false;
    m_lab_tests_count_isValid = false;

    m_risk_factors_count_isSet = false;
    m_risk_factors_count_isValid = false;

    m_symptoms_count_isSet = false;
    m_symptoms_count_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIInfo_Public::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfo_Public::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_conditions_count_isValid = ::OpenAPI::fromJsonValue(m_conditions_count, json[QString("conditions_count")]);
    m_conditions_count_isSet = !json[QString("conditions_count")].isNull() && m_conditions_count_isValid;

    m_lab_tests_count_isValid = ::OpenAPI::fromJsonValue(m_lab_tests_count, json[QString("lab_tests_count")]);
    m_lab_tests_count_isSet = !json[QString("lab_tests_count")].isNull() && m_lab_tests_count_isValid;

    m_risk_factors_count_isValid = ::OpenAPI::fromJsonValue(m_risk_factors_count, json[QString("risk_factors_count")]);
    m_risk_factors_count_isSet = !json[QString("risk_factors_count")].isNull() && m_risk_factors_count_isValid;

    m_symptoms_count_isValid = ::OpenAPI::fromJsonValue(m_symptoms_count, json[QString("symptoms_count")]);
    m_symptoms_count_isSet = !json[QString("symptoms_count")].isNull() && m_symptoms_count_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIInfo_Public::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfo_Public::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_conditions_count_isSet) {
        obj.insert(QString("conditions_count"), ::OpenAPI::toJsonValue(m_conditions_count));
    }
    if (m_lab_tests_count_isSet) {
        obj.insert(QString("lab_tests_count"), ::OpenAPI::toJsonValue(m_lab_tests_count));
    }
    if (m_risk_factors_count_isSet) {
        obj.insert(QString("risk_factors_count"), ::OpenAPI::toJsonValue(m_risk_factors_count));
    }
    if (m_symptoms_count_isSet) {
        obj.insert(QString("symptoms_count"), ::OpenAPI::toJsonValue(m_symptoms_count));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIInfo_Public::getApiVersion() const {
    return m_api_version;
}
void OAIInfo_Public::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIInfo_Public::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIInfo_Public::is_api_version_Valid() const{
    return m_api_version_isValid;
}

qint32 OAIInfo_Public::getConditionsCount() const {
    return m_conditions_count;
}
void OAIInfo_Public::setConditionsCount(const qint32 &conditions_count) {
    m_conditions_count = conditions_count;
    m_conditions_count_isSet = true;
}

bool OAIInfo_Public::is_conditions_count_Set() const{
    return m_conditions_count_isSet;
}

bool OAIInfo_Public::is_conditions_count_Valid() const{
    return m_conditions_count_isValid;
}

qint32 OAIInfo_Public::getLabTestsCount() const {
    return m_lab_tests_count;
}
void OAIInfo_Public::setLabTestsCount(const qint32 &lab_tests_count) {
    m_lab_tests_count = lab_tests_count;
    m_lab_tests_count_isSet = true;
}

bool OAIInfo_Public::is_lab_tests_count_Set() const{
    return m_lab_tests_count_isSet;
}

bool OAIInfo_Public::is_lab_tests_count_Valid() const{
    return m_lab_tests_count_isValid;
}

qint32 OAIInfo_Public::getRiskFactorsCount() const {
    return m_risk_factors_count;
}
void OAIInfo_Public::setRiskFactorsCount(const qint32 &risk_factors_count) {
    m_risk_factors_count = risk_factors_count;
    m_risk_factors_count_isSet = true;
}

bool OAIInfo_Public::is_risk_factors_count_Set() const{
    return m_risk_factors_count_isSet;
}

bool OAIInfo_Public::is_risk_factors_count_Valid() const{
    return m_risk_factors_count_isValid;
}

qint32 OAIInfo_Public::getSymptomsCount() const {
    return m_symptoms_count;
}
void OAIInfo_Public::setSymptomsCount(const qint32 &symptoms_count) {
    m_symptoms_count = symptoms_count;
    m_symptoms_count_isSet = true;
}

bool OAIInfo_Public::is_symptoms_count_Set() const{
    return m_symptoms_count_isSet;
}

bool OAIInfo_Public::is_symptoms_count_Valid() const{
    return m_symptoms_count_isValid;
}

QString OAIInfo_Public::getUpdatedAt() const {
    return m_updated_at;
}
void OAIInfo_Public::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIInfo_Public::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIInfo_Public::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIInfo_Public::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_tests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_factors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symptoms_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfo_Public::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conditions_count_isValid && m_lab_tests_count_isValid && m_risk_factors_count_isValid && m_symptoms_count_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
