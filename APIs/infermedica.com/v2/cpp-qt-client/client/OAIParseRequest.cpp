/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParseRequest::OAIParseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParseRequest::OAIParseRequest() {
    this->initializeModel();
}

OAIParseRequest::~OAIParseRequest() {}

void OAIParseRequest::initializeModel() {

    m_concept_types_isSet = false;
    m_concept_types_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_correct_spelling_isSet = false;
    m_correct_spelling_isValid = false;

    m_include_tokens_isSet = false;
    m_include_tokens_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIParseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParseRequest::fromJsonObject(QJsonObject json) {

    m_concept_types_isValid = ::OpenAPI::fromJsonValue(m_concept_types, json[QString("concept_types")]);
    m_concept_types_isSet = !json[QString("concept_types")].isNull() && m_concept_types_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_correct_spelling_isValid = ::OpenAPI::fromJsonValue(m_correct_spelling, json[QString("correct_spelling")]);
    m_correct_spelling_isSet = !json[QString("correct_spelling")].isNull() && m_correct_spelling_isValid;

    m_include_tokens_isValid = ::OpenAPI::fromJsonValue(m_include_tokens, json[QString("include_tokens")]);
    m_include_tokens_isSet = !json[QString("include_tokens")].isNull() && m_include_tokens_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIParseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_concept_types.size() > 0) {
        obj.insert(QString("concept_types"), ::OpenAPI::toJsonValue(m_concept_types));
    }
    if (m_context.size() > 0) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_correct_spelling_isSet) {
        obj.insert(QString("correct_spelling"), ::OpenAPI::toJsonValue(m_correct_spelling));
    }
    if (m_include_tokens_isSet) {
        obj.insert(QString("include_tokens"), ::OpenAPI::toJsonValue(m_include_tokens));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList<QString> OAIParseRequest::getConceptTypes() const {
    return m_concept_types;
}
void OAIParseRequest::setConceptTypes(const QList<QString> &concept_types) {
    m_concept_types = concept_types;
    m_concept_types_isSet = true;
}

bool OAIParseRequest::is_concept_types_Set() const{
    return m_concept_types_isSet;
}

bool OAIParseRequest::is_concept_types_Valid() const{
    return m_concept_types_isValid;
}

QList<QString> OAIParseRequest::getContext() const {
    return m_context;
}
void OAIParseRequest::setContext(const QList<QString> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIParseRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIParseRequest::is_context_Valid() const{
    return m_context_isValid;
}

bool OAIParseRequest::isCorrectSpelling() const {
    return m_correct_spelling;
}
void OAIParseRequest::setCorrectSpelling(const bool &correct_spelling) {
    m_correct_spelling = correct_spelling;
    m_correct_spelling_isSet = true;
}

bool OAIParseRequest::is_correct_spelling_Set() const{
    return m_correct_spelling_isSet;
}

bool OAIParseRequest::is_correct_spelling_Valid() const{
    return m_correct_spelling_isValid;
}

bool OAIParseRequest::isIncludeTokens() const {
    return m_include_tokens;
}
void OAIParseRequest::setIncludeTokens(const bool &include_tokens) {
    m_include_tokens = include_tokens;
    m_include_tokens_isSet = true;
}

bool OAIParseRequest::is_include_tokens_Set() const{
    return m_include_tokens_isSet;
}

bool OAIParseRequest::is_include_tokens_Valid() const{
    return m_include_tokens_isValid;
}

QString OAIParseRequest::getText() const {
    return m_text;
}
void OAIParseRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIParseRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIParseRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIParseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concept_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_correct_spelling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
