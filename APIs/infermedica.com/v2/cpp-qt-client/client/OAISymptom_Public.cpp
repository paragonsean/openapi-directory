/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymptom_Public.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymptom_Public::OAISymptom_Public(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymptom_Public::OAISymptom_Public() {
    this->initializeModel();
}

OAISymptom_Public::~OAISymptom_Public() {}

void OAISymptom_Public::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_source_isSet = false;
    m_image_source_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_relation_isSet = false;
    m_parent_relation_isValid = false;

    m_sex_filter_isSet = false;
    m_sex_filter_isValid = false;
}

void OAISymptom_Public::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymptom_Public::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("common_name")]);
    m_common_name_isSet = !json[QString("common_name")].isNull() && m_common_name_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_source_isValid = ::OpenAPI::fromJsonValue(m_image_source, json[QString("image_source")]);
    m_image_source_isSet = !json[QString("image_source")].isNull() && m_image_source_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_parent_relation_isValid = ::OpenAPI::fromJsonValue(m_parent_relation, json[QString("parent_relation")]);
    m_parent_relation_isSet = !json[QString("parent_relation")].isNull() && m_parent_relation_isValid;

    m_sex_filter_isValid = ::OpenAPI::fromJsonValue(m_sex_filter, json[QString("sex_filter")]);
    m_sex_filter_isSet = !json[QString("sex_filter")].isNull() && m_sex_filter_isValid;
}

QString OAISymptom_Public::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymptom_Public::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_children_isSet) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("common_name"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_extras.size() > 0) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_source_isSet) {
        obj.insert(QString("image_source"), ::OpenAPI::toJsonValue(m_image_source));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_relation_isSet) {
        obj.insert(QString("parent_relation"), ::OpenAPI::toJsonValue(m_parent_relation));
    }
    if (m_sex_filter_isSet) {
        obj.insert(QString("sex_filter"), ::OpenAPI::toJsonValue(m_sex_filter));
    }
    return obj;
}

QString OAISymptom_Public::getCategory() const {
    return m_category;
}
void OAISymptom_Public::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISymptom_Public::is_category_Set() const{
    return m_category_isSet;
}

bool OAISymptom_Public::is_category_Valid() const{
    return m_category_isValid;
}

OAIObject OAISymptom_Public::getChildren() const {
    return m_children;
}
void OAISymptom_Public::setChildren(const OAIObject &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAISymptom_Public::is_children_Set() const{
    return m_children_isSet;
}

bool OAISymptom_Public::is_children_Valid() const{
    return m_children_isValid;
}

QString OAISymptom_Public::getCommonName() const {
    return m_common_name;
}
void OAISymptom_Public::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAISymptom_Public::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAISymptom_Public::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QMap<QString, OAIObject> OAISymptom_Public::getExtras() const {
    return m_extras;
}
void OAISymptom_Public::setExtras(const QMap<QString, OAIObject> &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAISymptom_Public::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAISymptom_Public::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAISymptom_Public::getId() const {
    return m_id;
}
void OAISymptom_Public::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISymptom_Public::is_id_Set() const{
    return m_id_isSet;
}

bool OAISymptom_Public::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISymptom_Public::getImageSource() const {
    return m_image_source;
}
void OAISymptom_Public::setImageSource(const QString &image_source) {
    m_image_source = image_source;
    m_image_source_isSet = true;
}

bool OAISymptom_Public::is_image_source_Set() const{
    return m_image_source_isSet;
}

bool OAISymptom_Public::is_image_source_Valid() const{
    return m_image_source_isValid;
}

QString OAISymptom_Public::getImageUrl() const {
    return m_image_url;
}
void OAISymptom_Public::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAISymptom_Public::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAISymptom_Public::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAISymptom_Public::getName() const {
    return m_name;
}
void OAISymptom_Public::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISymptom_Public::is_name_Set() const{
    return m_name_isSet;
}

bool OAISymptom_Public::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISymptom_Public::getParentId() const {
    return m_parent_id;
}
void OAISymptom_Public::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAISymptom_Public::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAISymptom_Public::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAISymptom_Public::getParentRelation() const {
    return m_parent_relation;
}
void OAISymptom_Public::setParentRelation(const QString &parent_relation) {
    m_parent_relation = parent_relation;
    m_parent_relation_isSet = true;
}

bool OAISymptom_Public::is_parent_relation_Set() const{
    return m_parent_relation_isSet;
}

bool OAISymptom_Public::is_parent_relation_Valid() const{
    return m_parent_relation_isValid;
}

QString OAISymptom_Public::getSexFilter() const {
    return m_sex_filter;
}
void OAISymptom_Public::setSexFilter(const QString &sex_filter) {
    m_sex_filter = sex_filter;
    m_sex_filter_isSet = true;
}

bool OAISymptom_Public::is_sex_filter_Set() const{
    return m_sex_filter_isSet;
}

bool OAISymptom_Public::is_sex_filter_Valid() const{
    return m_sex_filter_isValid;
}

bool OAISymptom_Public::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_relation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sex_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymptom_Public::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_sex_filter_isValid && true;
}

} // namespace OpenAPI
