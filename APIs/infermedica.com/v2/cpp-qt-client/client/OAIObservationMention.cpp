/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObservationMention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObservationMention::OAIObservationMention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObservationMention::OAIObservationMention() {
    this->initializeModel();
}

OAIObservationMention::~OAIObservationMention() {}

void OAIObservationMention::initializeModel() {

    m_choice_id_isSet = false;
    m_choice_id_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_head_position_isSet = false;
    m_head_position_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_orth_isSet = false;
    m_orth_isValid = false;

    m_positions_isSet = false;
    m_positions_isValid = false;
}

void OAIObservationMention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObservationMention::fromJsonObject(QJsonObject json) {

    m_choice_id_isValid = ::OpenAPI::fromJsonValue(m_choice_id, json[QString("choice_id")]);
    m_choice_id_isSet = !json[QString("choice_id")].isNull() && m_choice_id_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("common_name")]);
    m_common_name_isSet = !json[QString("common_name")].isNull() && m_common_name_isValid;

    m_head_position_isValid = ::OpenAPI::fromJsonValue(m_head_position, json[QString("head_position")]);
    m_head_position_isSet = !json[QString("head_position")].isNull() && m_head_position_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_orth_isValid = ::OpenAPI::fromJsonValue(m_orth, json[QString("orth")]);
    m_orth_isSet = !json[QString("orth")].isNull() && m_orth_isValid;

    m_positions_isValid = ::OpenAPI::fromJsonValue(m_positions, json[QString("positions")]);
    m_positions_isSet = !json[QString("positions")].isNull() && m_positions_isValid;
}

QString OAIObservationMention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObservationMention::asJsonObject() const {
    QJsonObject obj;
    if (m_choice_id_isSet) {
        obj.insert(QString("choice_id"), ::OpenAPI::toJsonValue(m_choice_id));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("common_name"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_head_position_isSet) {
        obj.insert(QString("head_position"), ::OpenAPI::toJsonValue(m_head_position));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_orth_isSet) {
        obj.insert(QString("orth"), ::OpenAPI::toJsonValue(m_orth));
    }
    if (m_positions.size() > 0) {
        obj.insert(QString("positions"), ::OpenAPI::toJsonValue(m_positions));
    }
    return obj;
}

QString OAIObservationMention::getChoiceId() const {
    return m_choice_id;
}
void OAIObservationMention::setChoiceId(const QString &choice_id) {
    m_choice_id = choice_id;
    m_choice_id_isSet = true;
}

bool OAIObservationMention::is_choice_id_Set() const{
    return m_choice_id_isSet;
}

bool OAIObservationMention::is_choice_id_Valid() const{
    return m_choice_id_isValid;
}

QString OAIObservationMention::getCommonName() const {
    return m_common_name;
}
void OAIObservationMention::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAIObservationMention::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAIObservationMention::is_common_name_Valid() const{
    return m_common_name_isValid;
}

qint32 OAIObservationMention::getHeadPosition() const {
    return m_head_position;
}
void OAIObservationMention::setHeadPosition(const qint32 &head_position) {
    m_head_position = head_position;
    m_head_position_isSet = true;
}

bool OAIObservationMention::is_head_position_Set() const{
    return m_head_position_isSet;
}

bool OAIObservationMention::is_head_position_Valid() const{
    return m_head_position_isValid;
}

QString OAIObservationMention::getId() const {
    return m_id;
}
void OAIObservationMention::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObservationMention::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObservationMention::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIObservationMention::getName() const {
    return m_name;
}
void OAIObservationMention::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObservationMention::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObservationMention::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObservationMention::getOrth() const {
    return m_orth;
}
void OAIObservationMention::setOrth(const QString &orth) {
    m_orth = orth;
    m_orth_isSet = true;
}

bool OAIObservationMention::is_orth_Set() const{
    return m_orth_isSet;
}

bool OAIObservationMention::is_orth_Valid() const{
    return m_orth_isValid;
}

QList<qint32> OAIObservationMention::getPositions() const {
    return m_positions;
}
void OAIObservationMention::setPositions(const QList<qint32> &positions) {
    m_positions = positions;
    m_positions_isSet = true;
}

bool OAIObservationMention::is_positions_Set() const{
    return m_positions_isSet;
}

bool OAIObservationMention::is_positions_Valid() const{
    return m_positions_isValid;
}

bool OAIObservationMention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObservationMention::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_choice_id_isValid && m_head_position_isValid && m_id_isValid && m_name_isValid && m_orth_isValid && m_positions_isValid && true;
}

} // namespace OpenAPI
