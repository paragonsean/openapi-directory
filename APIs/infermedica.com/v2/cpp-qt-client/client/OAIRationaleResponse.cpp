/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRationaleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRationaleResponse::OAIRationaleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRationaleResponse::OAIRationaleResponse() {
    this->initializeModel();
}

OAIRationaleResponse::~OAIRationaleResponse() {}

void OAIRationaleResponse::initializeModel() {

    m_condition_params_isSet = false;
    m_condition_params_isValid = false;

    m_observation_params_isSet = false;
    m_observation_params_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRationaleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRationaleResponse::fromJsonObject(QJsonObject json) {

    m_condition_params_isValid = ::OpenAPI::fromJsonValue(m_condition_params, json[QString("condition_params")]);
    m_condition_params_isSet = !json[QString("condition_params")].isNull() && m_condition_params_isValid;

    m_observation_params_isValid = ::OpenAPI::fromJsonValue(m_observation_params, json[QString("observation_params")]);
    m_observation_params_isSet = !json[QString("observation_params")].isNull() && m_observation_params_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRationaleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRationaleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_params.size() > 0) {
        obj.insert(QString("condition_params"), ::OpenAPI::toJsonValue(m_condition_params));
    }
    if (m_observation_params.size() > 0) {
        obj.insert(QString("observation_params"), ::OpenAPI::toJsonValue(m_observation_params));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIRationaleParam> OAIRationaleResponse::getConditionParams() const {
    return m_condition_params;
}
void OAIRationaleResponse::setConditionParams(const QList<OAIRationaleParam> &condition_params) {
    m_condition_params = condition_params;
    m_condition_params_isSet = true;
}

bool OAIRationaleResponse::is_condition_params_Set() const{
    return m_condition_params_isSet;
}

bool OAIRationaleResponse::is_condition_params_Valid() const{
    return m_condition_params_isValid;
}

QList<OAIRationaleParam> OAIRationaleResponse::getObservationParams() const {
    return m_observation_params;
}
void OAIRationaleResponse::setObservationParams(const QList<OAIRationaleParam> &observation_params) {
    m_observation_params = observation_params;
    m_observation_params_isSet = true;
}

bool OAIRationaleResponse::is_observation_params_Set() const{
    return m_observation_params_isSet;
}

bool OAIRationaleResponse::is_observation_params_Valid() const{
    return m_observation_params_isValid;
}

QString OAIRationaleResponse::getType() const {
    return m_type;
}
void OAIRationaleResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRationaleResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRationaleResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRationaleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRationaleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
