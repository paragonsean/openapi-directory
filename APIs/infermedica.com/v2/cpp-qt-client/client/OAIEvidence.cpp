/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvidence::OAIEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvidence::OAIEvidence() {
    this->initializeModel();
}

OAIEvidence::~OAIEvidence() {}

void OAIEvidence::initializeModel() {

    m_choice_id_isSet = false;
    m_choice_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_observed_at_isSet = false;
    m_observed_at_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvidence::fromJsonObject(QJsonObject json) {

    m_choice_id_isValid = ::OpenAPI::fromJsonValue(m_choice_id, json[QString("choice_id")]);
    m_choice_id_isSet = !json[QString("choice_id")].isNull() && m_choice_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_observed_at_isValid = ::OpenAPI::fromJsonValue(m_observed_at, json[QString("observed_at")]);
    m_observed_at_isSet = !json[QString("observed_at")].isNull() && m_observed_at_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_choice_id_isSet) {
        obj.insert(QString("choice_id"), ::OpenAPI::toJsonValue(m_choice_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_observed_at_isSet) {
        obj.insert(QString("observed_at"), ::OpenAPI::toJsonValue(m_observed_at));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIEvidence::getChoiceId() const {
    return m_choice_id;
}
void OAIEvidence::setChoiceId(const QString &choice_id) {
    m_choice_id = choice_id;
    m_choice_id_isSet = true;
}

bool OAIEvidence::is_choice_id_Set() const{
    return m_choice_id_isSet;
}

bool OAIEvidence::is_choice_id_Valid() const{
    return m_choice_id_isValid;
}

QString OAIEvidence::getId() const {
    return m_id;
}
void OAIEvidence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvidence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvidence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEvidence::getObservedAt() const {
    return m_observed_at;
}
void OAIEvidence::setObservedAt(const QString &observed_at) {
    m_observed_at = observed_at;
    m_observed_at_isSet = true;
}

bool OAIEvidence::is_observed_at_Set() const{
    return m_observed_at_isSet;
}

bool OAIEvidence::is_observed_at_Valid() const{
    return m_observed_at_isValid;
}

QString OAIEvidence::getSource() const {
    return m_source;
}
void OAIEvidence::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEvidence::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEvidence::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_choice_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
