/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplanationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplanationResponse::OAIExplanationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplanationResponse::OAIExplanationResponse() {
    this->initializeModel();
}

OAIExplanationResponse::~OAIExplanationResponse() {}

void OAIExplanationResponse::initializeModel() {

    m_conflicting_evidence_isSet = false;
    m_conflicting_evidence_isValid = false;

    m_supporting_evidence_isSet = false;
    m_supporting_evidence_isValid = false;

    m_unconfirmed_evidence_isSet = false;
    m_unconfirmed_evidence_isValid = false;
}

void OAIExplanationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplanationResponse::fromJsonObject(QJsonObject json) {

    m_conflicting_evidence_isValid = ::OpenAPI::fromJsonValue(m_conflicting_evidence, json[QString("conflicting_evidence")]);
    m_conflicting_evidence_isSet = !json[QString("conflicting_evidence")].isNull() && m_conflicting_evidence_isValid;

    m_supporting_evidence_isValid = ::OpenAPI::fromJsonValue(m_supporting_evidence, json[QString("supporting_evidence")]);
    m_supporting_evidence_isSet = !json[QString("supporting_evidence")].isNull() && m_supporting_evidence_isValid;

    m_unconfirmed_evidence_isValid = ::OpenAPI::fromJsonValue(m_unconfirmed_evidence, json[QString("unconfirmed_evidence")]);
    m_unconfirmed_evidence_isSet = !json[QString("unconfirmed_evidence")].isNull() && m_unconfirmed_evidence_isValid;
}

QString OAIExplanationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplanationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conflicting_evidence.size() > 0) {
        obj.insert(QString("conflicting_evidence"), ::OpenAPI::toJsonValue(m_conflicting_evidence));
    }
    if (m_supporting_evidence.size() > 0) {
        obj.insert(QString("supporting_evidence"), ::OpenAPI::toJsonValue(m_supporting_evidence));
    }
    if (m_unconfirmed_evidence.size() > 0) {
        obj.insert(QString("unconfirmed_evidence"), ::OpenAPI::toJsonValue(m_unconfirmed_evidence));
    }
    return obj;
}

QList<OAIExplanationEvidence> OAIExplanationResponse::getConflictingEvidence() const {
    return m_conflicting_evidence;
}
void OAIExplanationResponse::setConflictingEvidence(const QList<OAIExplanationEvidence> &conflicting_evidence) {
    m_conflicting_evidence = conflicting_evidence;
    m_conflicting_evidence_isSet = true;
}

bool OAIExplanationResponse::is_conflicting_evidence_Set() const{
    return m_conflicting_evidence_isSet;
}

bool OAIExplanationResponse::is_conflicting_evidence_Valid() const{
    return m_conflicting_evidence_isValid;
}

QList<OAIExplanationEvidence> OAIExplanationResponse::getSupportingEvidence() const {
    return m_supporting_evidence;
}
void OAIExplanationResponse::setSupportingEvidence(const QList<OAIExplanationEvidence> &supporting_evidence) {
    m_supporting_evidence = supporting_evidence;
    m_supporting_evidence_isSet = true;
}

bool OAIExplanationResponse::is_supporting_evidence_Set() const{
    return m_supporting_evidence_isSet;
}

bool OAIExplanationResponse::is_supporting_evidence_Valid() const{
    return m_supporting_evidence_isValid;
}

QList<OAIExplanationEvidence> OAIExplanationResponse::getUnconfirmedEvidence() const {
    return m_unconfirmed_evidence;
}
void OAIExplanationResponse::setUnconfirmedEvidence(const QList<OAIExplanationEvidence> &unconfirmed_evidence) {
    m_unconfirmed_evidence = unconfirmed_evidence;
    m_unconfirmed_evidence_isSet = true;
}

bool OAIExplanationResponse::is_unconfirmed_evidence_Set() const{
    return m_unconfirmed_evidence_isSet;
}

bool OAIExplanationResponse::is_unconfirmed_evidence_Valid() const{
    return m_unconfirmed_evidence_isValid;
}

bool OAIExplanationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflicting_evidence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporting_evidence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unconfirmed_evidence.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplanationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conflicting_evidence_isValid && m_supporting_evidence_isValid && m_unconfirmed_evidence_isValid && true;
}

} // namespace OpenAPI
