/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriageResponse::OAITriageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriageResponse::OAITriageResponse() {
    this->initializeModel();
}

OAITriageResponse::~OAITriageResponse() {}

void OAITriageResponse::initializeModel() {

    m_root_cause_isSet = false;
    m_root_cause_isValid = false;

    m_serious_isSet = false;
    m_serious_isValid = false;

    m_teleconsultation_applicable_isSet = false;
    m_teleconsultation_applicable_isValid = false;

    m_triage_level_isSet = false;
    m_triage_level_isValid = false;
}

void OAITriageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriageResponse::fromJsonObject(QJsonObject json) {

    m_root_cause_isValid = ::OpenAPI::fromJsonValue(m_root_cause, json[QString("root_cause")]);
    m_root_cause_isSet = !json[QString("root_cause")].isNull() && m_root_cause_isValid;

    m_serious_isValid = ::OpenAPI::fromJsonValue(m_serious, json[QString("serious")]);
    m_serious_isSet = !json[QString("serious")].isNull() && m_serious_isValid;

    m_teleconsultation_applicable_isValid = ::OpenAPI::fromJsonValue(m_teleconsultation_applicable, json[QString("teleconsultation_applicable")]);
    m_teleconsultation_applicable_isSet = !json[QString("teleconsultation_applicable")].isNull() && m_teleconsultation_applicable_isValid;

    m_triage_level_isValid = ::OpenAPI::fromJsonValue(m_triage_level, json[QString("triage_level")]);
    m_triage_level_isSet = !json[QString("triage_level")].isNull() && m_triage_level_isValid;
}

QString OAITriageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_root_cause_isSet) {
        obj.insert(QString("root_cause"), ::OpenAPI::toJsonValue(m_root_cause));
    }
    if (m_serious.size() > 0) {
        obj.insert(QString("serious"), ::OpenAPI::toJsonValue(m_serious));
    }
    if (m_teleconsultation_applicable_isSet) {
        obj.insert(QString("teleconsultation_applicable"), ::OpenAPI::toJsonValue(m_teleconsultation_applicable));
    }
    if (m_triage_level_isSet) {
        obj.insert(QString("triage_level"), ::OpenAPI::toJsonValue(m_triage_level));
    }
    return obj;
}

QString OAITriageResponse::getRootCause() const {
    return m_root_cause;
}
void OAITriageResponse::setRootCause(const QString &root_cause) {
    m_root_cause = root_cause;
    m_root_cause_isSet = true;
}

bool OAITriageResponse::is_root_cause_Set() const{
    return m_root_cause_isSet;
}

bool OAITriageResponse::is_root_cause_Valid() const{
    return m_root_cause_isValid;
}

QSet<OAISeriousObservation> OAITriageResponse::getSerious() const {
    return m_serious;
}
void OAITriageResponse::setSerious(const QSet<OAISeriousObservation> &serious) {
    m_serious = serious;
    m_serious_isSet = true;
}

bool OAITriageResponse::is_serious_Set() const{
    return m_serious_isSet;
}

bool OAITriageResponse::is_serious_Valid() const{
    return m_serious_isValid;
}

bool OAITriageResponse::isTeleconsultationApplicable() const {
    return m_teleconsultation_applicable;
}
void OAITriageResponse::setTeleconsultationApplicable(const bool &teleconsultation_applicable) {
    m_teleconsultation_applicable = teleconsultation_applicable;
    m_teleconsultation_applicable_isSet = true;
}

bool OAITriageResponse::is_teleconsultation_applicable_Set() const{
    return m_teleconsultation_applicable_isSet;
}

bool OAITriageResponse::is_teleconsultation_applicable_Valid() const{
    return m_teleconsultation_applicable_isValid;
}

QString OAITriageResponse::getTriageLevel() const {
    return m_triage_level;
}
void OAITriageResponse::setTriageLevel(const QString &triage_level) {
    m_triage_level = triage_level;
    m_triage_level_isSet = true;
}

bool OAITriageResponse::is_triage_level_Set() const{
    return m_triage_level_isSet;
}

bool OAITriageResponse::is_triage_level_Valid() const{
    return m_triage_level_isValid;
}

bool OAITriageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_root_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serious.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleconsultation_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triage_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
