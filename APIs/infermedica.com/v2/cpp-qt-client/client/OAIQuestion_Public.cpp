/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestion_Public.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestion_Public::OAIQuestion_Public(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestion_Public::OAIQuestion_Public() {
    this->initializeModel();
}

OAIQuestion_Public::~OAIQuestion_Public() {}

void OAIQuestion_Public::initializeModel() {

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIQuestion_Public::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestion_Public::fromJsonObject(QJsonObject json) {

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIQuestion_Public::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestion_Public::asJsonObject() const {
    QJsonObject obj;
    if (m_extras.size() > 0) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, OAIObject> OAIQuestion_Public::getExtras() const {
    return m_extras;
}
void OAIQuestion_Public::setExtras(const QMap<QString, OAIObject> &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIQuestion_Public::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIQuestion_Public::is_extras_Valid() const{
    return m_extras_isValid;
}

QList<OAIQuestionItem_Public> OAIQuestion_Public::getItems() const {
    return m_items;
}
void OAIQuestion_Public::setItems(const QList<OAIQuestionItem_Public> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIQuestion_Public::is_items_Set() const{
    return m_items_isSet;
}

bool OAIQuestion_Public::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIQuestion_Public::getText() const {
    return m_text;
}
void OAIQuestion_Public::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIQuestion_Public::is_text_Set() const{
    return m_text_isSet;
}

bool OAIQuestion_Public::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIQuestion_Public::getType() const {
    return m_type;
}
void OAIQuestion_Public::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQuestion_Public::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQuestion_Public::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIQuestion_Public::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extras.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestion_Public::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
