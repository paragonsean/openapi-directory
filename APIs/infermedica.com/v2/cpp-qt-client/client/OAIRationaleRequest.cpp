/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRationaleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRationaleRequest::OAIRationaleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRationaleRequest::OAIRationaleRequest() {
    this->initializeModel();
}

OAIRationaleRequest::~OAIRationaleRequest() {}

void OAIRationaleRequest::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_evaluated_at_isSet = false;
    m_evaluated_at_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_sex_isSet = false;
    m_sex_isValid = false;
}

void OAIRationaleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRationaleRequest::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_evaluated_at_isValid = ::OpenAPI::fromJsonValue(m_evaluated_at, json[QString("evaluated_at")]);
    m_evaluated_at_isSet = !json[QString("evaluated_at")].isNull() && m_evaluated_at_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_sex_isValid = ::OpenAPI::fromJsonValue(m_sex, json[QString("sex")]);
    m_sex_isSet = !json[QString("sex")].isNull() && m_sex_isValid;
}

QString OAIRationaleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRationaleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_evaluated_at_isSet) {
        obj.insert(QString("evaluated_at"), ::OpenAPI::toJsonValue(m_evaluated_at));
    }
    if (m_evidence.size() > 0) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_extras.size() > 0) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_sex_isSet) {
        obj.insert(QString("sex"), ::OpenAPI::toJsonValue(m_sex));
    }
    return obj;
}

OAIObject OAIRationaleRequest::getAge() const {
    return m_age;
}
void OAIRationaleRequest::setAge(const OAIObject &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIRationaleRequest::is_age_Set() const{
    return m_age_isSet;
}

bool OAIRationaleRequest::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIRationaleRequest::getEvaluatedAt() const {
    return m_evaluated_at;
}
void OAIRationaleRequest::setEvaluatedAt(const QString &evaluated_at) {
    m_evaluated_at = evaluated_at;
    m_evaluated_at_isSet = true;
}

bool OAIRationaleRequest::is_evaluated_at_Set() const{
    return m_evaluated_at_isSet;
}

bool OAIRationaleRequest::is_evaluated_at_Valid() const{
    return m_evaluated_at_isValid;
}

QList<OAIEvidence> OAIRationaleRequest::getEvidence() const {
    return m_evidence;
}
void OAIRationaleRequest::setEvidence(const QList<OAIEvidence> &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAIRationaleRequest::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAIRationaleRequest::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QMap<QString, OAIObject> OAIRationaleRequest::getExtras() const {
    return m_extras;
}
void OAIRationaleRequest::setExtras(const QMap<QString, OAIObject> &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIRationaleRequest::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIRationaleRequest::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAIRationaleRequest::getSex() const {
    return m_sex;
}
void OAIRationaleRequest::setSex(const QString &sex) {
    m_sex = sex;
    m_sex_isSet = true;
}

bool OAIRationaleRequest::is_sex_Set() const{
    return m_sex_isSet;
}

bool OAIRationaleRequest::is_sex_Valid() const{
    return m_sex_isValid;
}

bool OAIRationaleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRationaleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_age_isValid && m_sex_isValid && true;
}

} // namespace OpenAPI
