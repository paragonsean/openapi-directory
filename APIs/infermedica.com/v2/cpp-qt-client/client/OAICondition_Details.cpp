/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICondition_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICondition_Details::OAICondition_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICondition_Details::OAICondition_Details() {
    this->initializeModel();
}

OAICondition_Details::~OAICondition_Details() {}

void OAICondition_Details::initializeModel() {

    m_acuteness_isSet = false;
    m_acuteness_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prevalence_isSet = false;
    m_prevalence_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_sex_filter_isSet = false;
    m_sex_filter_isValid = false;

    m_triage_level_isSet = false;
    m_triage_level_isValid = false;
}

void OAICondition_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICondition_Details::fromJsonObject(QJsonObject json) {

    m_acuteness_isValid = ::OpenAPI::fromJsonValue(m_acuteness, json[QString("acuteness")]);
    m_acuteness_isSet = !json[QString("acuteness")].isNull() && m_acuteness_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("common_name")]);
    m_common_name_isSet = !json[QString("common_name")].isNull() && m_common_name_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prevalence_isValid = ::OpenAPI::fromJsonValue(m_prevalence, json[QString("prevalence")]);
    m_prevalence_isSet = !json[QString("prevalence")].isNull() && m_prevalence_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_sex_filter_isValid = ::OpenAPI::fromJsonValue(m_sex_filter, json[QString("sex_filter")]);
    m_sex_filter_isSet = !json[QString("sex_filter")].isNull() && m_sex_filter_isValid;

    m_triage_level_isValid = ::OpenAPI::fromJsonValue(m_triage_level, json[QString("triage_level")]);
    m_triage_level_isSet = !json[QString("triage_level")].isNull() && m_triage_level_isValid;
}

QString OAICondition_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICondition_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_acuteness_isSet) {
        obj.insert(QString("acuteness"), ::OpenAPI::toJsonValue(m_acuteness));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("common_name"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_extras.size() > 0) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prevalence_isSet) {
        obj.insert(QString("prevalence"), ::OpenAPI::toJsonValue(m_prevalence));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_sex_filter_isSet) {
        obj.insert(QString("sex_filter"), ::OpenAPI::toJsonValue(m_sex_filter));
    }
    if (m_triage_level_isSet) {
        obj.insert(QString("triage_level"), ::OpenAPI::toJsonValue(m_triage_level));
    }
    return obj;
}

QString OAICondition_Details::getAcuteness() const {
    return m_acuteness;
}
void OAICondition_Details::setAcuteness(const QString &acuteness) {
    m_acuteness = acuteness;
    m_acuteness_isSet = true;
}

bool OAICondition_Details::is_acuteness_Set() const{
    return m_acuteness_isSet;
}

bool OAICondition_Details::is_acuteness_Valid() const{
    return m_acuteness_isValid;
}

QList<QString> OAICondition_Details::getCategories() const {
    return m_categories;
}
void OAICondition_Details::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAICondition_Details::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAICondition_Details::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAICondition_Details::getCommonName() const {
    return m_common_name;
}
void OAICondition_Details::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAICondition_Details::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAICondition_Details::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QMap<QString, OAIObject> OAICondition_Details::getExtras() const {
    return m_extras;
}
void OAICondition_Details::setExtras(const QMap<QString, OAIObject> &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAICondition_Details::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAICondition_Details::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAICondition_Details::getId() const {
    return m_id;
}
void OAICondition_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICondition_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAICondition_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICondition_Details::getName() const {
    return m_name;
}
void OAICondition_Details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICondition_Details::is_name_Set() const{
    return m_name_isSet;
}

bool OAICondition_Details::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICondition_Details::getPrevalence() const {
    return m_prevalence;
}
void OAICondition_Details::setPrevalence(const QString &prevalence) {
    m_prevalence = prevalence;
    m_prevalence_isSet = true;
}

bool OAICondition_Details::is_prevalence_Set() const{
    return m_prevalence_isSet;
}

bool OAICondition_Details::is_prevalence_Valid() const{
    return m_prevalence_isValid;
}

QString OAICondition_Details::getSeverity() const {
    return m_severity;
}
void OAICondition_Details::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICondition_Details::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICondition_Details::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAICondition_Details::getSexFilter() const {
    return m_sex_filter;
}
void OAICondition_Details::setSexFilter(const QString &sex_filter) {
    m_sex_filter = sex_filter;
    m_sex_filter_isSet = true;
}

bool OAICondition_Details::is_sex_filter_Set() const{
    return m_sex_filter_isSet;
}

bool OAICondition_Details::is_sex_filter_Valid() const{
    return m_sex_filter_isValid;
}

QString OAICondition_Details::getTriageLevel() const {
    return m_triage_level;
}
void OAICondition_Details::setTriageLevel(const QString &triage_level) {
    m_triage_level = triage_level;
    m_triage_level_isSet = true;
}

bool OAICondition_Details::is_triage_level_Set() const{
    return m_triage_level_isSet;
}

bool OAICondition_Details::is_triage_level_Valid() const{
    return m_triage_level_isValid;
}

bool OAICondition_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acuteness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prevalence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sex_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triage_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICondition_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_id_isValid && m_name_isValid && m_sex_filter_isValid && true;
}

} // namespace OpenAPI
