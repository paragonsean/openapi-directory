/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evidence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Evidence {
  /**
   * Gets or Sets choiceId
   */
  @JsonAdapter(ChoiceIdEnum.Adapter.class)
  public enum ChoiceIdEnum {
    PRESENT("present"),
    
    ABSENT("absent"),
    
    UNKNOWN("unknown");

    private String value;

    ChoiceIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChoiceIdEnum fromValue(String value) {
      for (ChoiceIdEnum b : ChoiceIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChoiceIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChoiceIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChoiceIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChoiceIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChoiceIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHOICE_ID = "choice_id";
  @SerializedName(SERIALIZED_NAME_CHOICE_ID)
  private ChoiceIdEnum choiceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBSERVED_AT = "observed_at";
  @SerializedName(SERIALIZED_NAME_OBSERVED_AT)
  private String observedAt;

  /**
   * Flag describing evidence origin
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    INITIAL("initial"),
    
    SUGGEST("suggest"),
    
    PREDEFINED("predefined"),
    
    RED_FLAGS("red_flags");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public Evidence() {
  }

  public Evidence choiceId(ChoiceIdEnum choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  /**
   * Get choiceId
   * @return choiceId
   */
  @javax.annotation.Nonnull
  public ChoiceIdEnum getChoiceId() {
    return choiceId;
  }

  public void setChoiceId(ChoiceIdEnum choiceId) {
    this.choiceId = choiceId;
  }


  public Evidence id(String id) {
    this.id = id;
    return this;
  }

  /**
   * id of observation or condition
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Evidence observedAt(String observedAt) {
    this.observedAt = observedAt;
    return this;
  }

  /**
   * time when evidence was observed in ISO 8601 format
   * @return observedAt
   */
  @javax.annotation.Nullable
  public String getObservedAt() {
    return observedAt;
  }

  public void setObservedAt(String observedAt) {
    this.observedAt = observedAt;
  }


  public Evidence source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * Flag describing evidence origin
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Evidence evidence = (Evidence) o;
    return Objects.equals(this.choiceId, evidence.choiceId) &&
        Objects.equals(this.id, evidence.id) &&
        Objects.equals(this.observedAt, evidence.observedAt) &&
        Objects.equals(this.source, evidence.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(choiceId, id, observedAt, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Evidence {\n");
    sb.append("    choiceId: ").append(toIndentedString(choiceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    observedAt: ").append(toIndentedString(observedAt)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("choice_id");
    openapiFields.add("id");
    openapiFields.add("observed_at");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("choice_id");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Evidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Evidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Evidence is not found in the empty JSON string", Evidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Evidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Evidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Evidence.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("choice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `choice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("choice_id").toString()));
      }
      // validate the required field `choice_id`
      ChoiceIdEnum.validateJsonElement(jsonObj.get("choice_id"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("observed_at") != null && !jsonObj.get("observed_at").isJsonNull()) && !jsonObj.get("observed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observed_at").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Evidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Evidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Evidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Evidence.class));

       return (TypeAdapter<T>) new TypeAdapter<Evidence>() {
           @Override
           public void write(JsonWriter out, Evidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Evidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Evidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Evidence
   * @throws IOException if the JSON string is invalid with respect to Evidence
   */
  public static Evidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Evidence.class);
  }

  /**
   * Convert an instance of Evidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

