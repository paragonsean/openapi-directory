/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.SeriousObservation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TriageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TriageResponse {
  /**
   * Gets or Sets rootCause
   */
  @JsonAdapter(RootCauseEnum.Adapter.class)
  public enum RootCauseEnum {
    R1("r1"),
    
    R2("r2"),
    
    R3("r3"),
    
    R4("r4"),
    
    R5("r5"),
    
    R6("r6"),
    
    R7("r7"),
    
    R8("r8"),
    
    R9("r9"),
    
    R10("r10"),
    
    R11("r11"),
    
    R12("r12");

    private String value;

    RootCauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RootCauseEnum fromValue(String value) {
      for (RootCauseEnum b : RootCauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RootCauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RootCauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RootCauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RootCauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RootCauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOT_CAUSE = "root_cause";
  @SerializedName(SERIALIZED_NAME_ROOT_CAUSE)
  private RootCauseEnum rootCause;

  public static final String SERIALIZED_NAME_SERIOUS = "serious";
  @SerializedName(SERIALIZED_NAME_SERIOUS)
  private Set<SeriousObservation> serious = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TELECONSULTATION_APPLICABLE = "teleconsultation_applicable";
  @SerializedName(SERIALIZED_NAME_TELECONSULTATION_APPLICABLE)
  private Boolean teleconsultationApplicable;

  /**
   * Gets or Sets triageLevel
   */
  @JsonAdapter(TriageLevelEnum.Adapter.class)
  public enum TriageLevelEnum {
    EMERGENCY_AMBULANCE("emergency_ambulance"),
    
    EMERGENCY("emergency"),
    
    CONSULTATION_24("consultation_24"),
    
    CONSULTATION("consultation"),
    
    SELF_CARE("self_care");

    private String value;

    TriageLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriageLevelEnum fromValue(String value) {
      for (TriageLevelEnum b : TriageLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriageLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriageLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriageLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriageLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriageLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIAGE_LEVEL = "triage_level";
  @SerializedName(SERIALIZED_NAME_TRIAGE_LEVEL)
  private TriageLevelEnum triageLevel;

  public TriageResponse() {
  }

  public TriageResponse rootCause(RootCauseEnum rootCause) {
    this.rootCause = rootCause;
    return this;
  }

  /**
   * Get rootCause
   * @return rootCause
   */
  @javax.annotation.Nullable
  public RootCauseEnum getRootCause() {
    return rootCause;
  }

  public void setRootCause(RootCauseEnum rootCause) {
    this.rootCause = rootCause;
  }


  public TriageResponse serious(Set<SeriousObservation> serious) {
    this.serious = serious;
    return this;
  }

  public TriageResponse addSeriousItem(SeriousObservation seriousItem) {
    if (this.serious == null) {
      this.serious = new LinkedHashSet<>();
    }
    this.serious.add(seriousItem);
    return this;
  }

  /**
   * Get serious
   * @return serious
   */
  @javax.annotation.Nullable
  public Set<SeriousObservation> getSerious() {
    return serious;
  }

  public void setSerious(Set<SeriousObservation> serious) {
    this.serious = serious;
  }


  public TriageResponse teleconsultationApplicable(Boolean teleconsultationApplicable) {
    this.teleconsultationApplicable = teleconsultationApplicable;
    return this;
  }

  /**
   * Get teleconsultationApplicable
   * @return teleconsultationApplicable
   */
  @javax.annotation.Nullable
  public Boolean getTeleconsultationApplicable() {
    return teleconsultationApplicable;
  }

  public void setTeleconsultationApplicable(Boolean teleconsultationApplicable) {
    this.teleconsultationApplicable = teleconsultationApplicable;
  }


  public TriageResponse triageLevel(TriageLevelEnum triageLevel) {
    this.triageLevel = triageLevel;
    return this;
  }

  /**
   * Get triageLevel
   * @return triageLevel
   */
  @javax.annotation.Nullable
  public TriageLevelEnum getTriageLevel() {
    return triageLevel;
  }

  public void setTriageLevel(TriageLevelEnum triageLevel) {
    this.triageLevel = triageLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriageResponse triageResponse = (TriageResponse) o;
    return Objects.equals(this.rootCause, triageResponse.rootCause) &&
        Objects.equals(this.serious, triageResponse.serious) &&
        Objects.equals(this.teleconsultationApplicable, triageResponse.teleconsultationApplicable) &&
        Objects.equals(this.triageLevel, triageResponse.triageLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootCause, serious, teleconsultationApplicable, triageLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriageResponse {\n");
    sb.append("    rootCause: ").append(toIndentedString(rootCause)).append("\n");
    sb.append("    serious: ").append(toIndentedString(serious)).append("\n");
    sb.append("    teleconsultationApplicable: ").append(toIndentedString(teleconsultationApplicable)).append("\n");
    sb.append("    triageLevel: ").append(toIndentedString(triageLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("root_cause");
    openapiFields.add("serious");
    openapiFields.add("teleconsultation_applicable");
    openapiFields.add("triage_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TriageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TriageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TriageResponse is not found in the empty JSON string", TriageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TriageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TriageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("root_cause") != null && !jsonObj.get("root_cause").isJsonNull()) && !jsonObj.get("root_cause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_cause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_cause").toString()));
      }
      // validate the optional field `root_cause`
      if (jsonObj.get("root_cause") != null && !jsonObj.get("root_cause").isJsonNull()) {
        RootCauseEnum.validateJsonElement(jsonObj.get("root_cause"));
      }
      if (jsonObj.get("serious") != null && !jsonObj.get("serious").isJsonNull()) {
        JsonArray jsonArrayserious = jsonObj.getAsJsonArray("serious");
        if (jsonArrayserious != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serious").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serious` to be an array in the JSON string but got `%s`", jsonObj.get("serious").toString()));
          }

          // validate the optional field `serious` (array)
          for (int i = 0; i < jsonArrayserious.size(); i++) {
            SeriousObservation.validateJsonElement(jsonArrayserious.get(i));
          };
        }
      }
      if ((jsonObj.get("triage_level") != null && !jsonObj.get("triage_level").isJsonNull()) && !jsonObj.get("triage_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triage_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triage_level").toString()));
      }
      // validate the optional field `triage_level`
      if (jsonObj.get("triage_level") != null && !jsonObj.get("triage_level").isJsonNull()) {
        TriageLevelEnum.validateJsonElement(jsonObj.get("triage_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TriageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TriageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TriageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TriageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TriageResponse>() {
           @Override
           public void write(JsonWriter out, TriageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TriageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TriageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TriageResponse
   * @throws IOException if the JSON string is invalid with respect to TriageResponse
   */
  public static TriageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TriageResponse.class);
  }

  /**
   * Convert an instance of TriageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

