/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ParseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParseRequest {
  /**
   * Gets or Sets conceptTypes
   */
  @JsonAdapter(ConceptTypesEnum.Adapter.class)
  public enum ConceptTypesEnum {
    SYMPTOM("symptom"),
    
    RISK_FACTOR("risk_factor");

    private String value;

    ConceptTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConceptTypesEnum fromValue(String value) {
      for (ConceptTypesEnum b : ConceptTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConceptTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConceptTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConceptTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConceptTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConceptTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONCEPT_TYPES = "concept_types";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TYPES)
  private List<ConceptTypesEnum> conceptTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private List<String> context = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORRECT_SPELLING = "correct_spelling";
  @SerializedName(SERIALIZED_NAME_CORRECT_SPELLING)
  private Boolean correctSpelling;

  public static final String SERIALIZED_NAME_INCLUDE_TOKENS = "include_tokens";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TOKENS)
  private Boolean includeTokens;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public ParseRequest() {
  }

  public ParseRequest conceptTypes(List<ConceptTypesEnum> conceptTypes) {
    this.conceptTypes = conceptTypes;
    return this;
  }

  public ParseRequest addConceptTypesItem(ConceptTypesEnum conceptTypesItem) {
    if (this.conceptTypes == null) {
      this.conceptTypes = new ArrayList<>();
    }
    this.conceptTypes.add(conceptTypesItem);
    return this;
  }

  /**
   * list of concept types that should be captured
   * @return conceptTypes
   */
  @javax.annotation.Nullable
  public List<ConceptTypesEnum> getConceptTypes() {
    return conceptTypes;
  }

  public void setConceptTypes(List<ConceptTypesEnum> conceptTypes) {
    this.conceptTypes = conceptTypes;
  }


  public ParseRequest context(List<String> context) {
    this.context = context;
    return this;
  }

  public ParseRequest addContextItem(String contextItem) {
    if (this.context == null) {
      this.context = new ArrayList<>();
    }
    this.context.add(contextItem);
    return this;
  }

  /**
   * ordered list of ids of present symptoms that were already captured and can be used as context
   * @return context
   */
  @javax.annotation.Nullable
  public List<String> getContext() {
    return context;
  }

  public void setContext(List<String> context) {
    this.context = context;
  }


  public ParseRequest correctSpelling(Boolean correctSpelling) {
    this.correctSpelling = correctSpelling;
    return this;
  }

  /**
   * correct spelling of input text before proper analysis
   * @return correctSpelling
   */
  @javax.annotation.Nullable
  public Boolean getCorrectSpelling() {
    return correctSpelling;
  }

  public void setCorrectSpelling(Boolean correctSpelling) {
    this.correctSpelling = correctSpelling;
  }


  public ParseRequest includeTokens(Boolean includeTokens) {
    this.includeTokens = includeTokens;
    return this;
  }

  /**
   * include tokenization details in output
   * @return includeTokens
   */
  @javax.annotation.Nullable
  public Boolean getIncludeTokens() {
    return includeTokens;
  }

  public void setIncludeTokens(Boolean includeTokens) {
    this.includeTokens = includeTokens;
  }


  public ParseRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * user text to process
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParseRequest parseRequest = (ParseRequest) o;
    return Objects.equals(this.conceptTypes, parseRequest.conceptTypes) &&
        Objects.equals(this.context, parseRequest.context) &&
        Objects.equals(this.correctSpelling, parseRequest.correctSpelling) &&
        Objects.equals(this.includeTokens, parseRequest.includeTokens) &&
        Objects.equals(this.text, parseRequest.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conceptTypes, context, correctSpelling, includeTokens, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParseRequest {\n");
    sb.append("    conceptTypes: ").append(toIndentedString(conceptTypes)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    correctSpelling: ").append(toIndentedString(correctSpelling)).append("\n");
    sb.append("    includeTokens: ").append(toIndentedString(includeTokens)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concept_types");
    openapiFields.add("context");
    openapiFields.add("correct_spelling");
    openapiFields.add("include_tokens");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParseRequest is not found in the empty JSON string", ParseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("concept_types") != null && !jsonObj.get("concept_types").isJsonNull() && !jsonObj.get("concept_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_types` to be an array in the JSON string but got `%s`", jsonObj.get("concept_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull() && !jsonObj.get("context").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be an array in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ParseRequest>() {
           @Override
           public void write(JsonWriter out, ParseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParseRequest
   * @throws IOException if the JSON string is invalid with respect to ParseRequest
   */
  public static ParseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParseRequest.class);
  }

  /**
   * Convert an instance of ParseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

