/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Evidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExplanationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExplanationRequest {
  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Object age;

  public static final String SERIALIZED_NAME_EVALUATED_AT = "evaluated_at";
  @SerializedName(SERIALIZED_NAME_EVALUATED_AT)
  private String evaluatedAt;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private List<Evidence> evidence = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private Map<String, Object> extras = new HashMap<>();

  /**
   * Gets or Sets sex
   */
  @JsonAdapter(SexEnum.Adapter.class)
  public enum SexEnum {
    MALE("male"),
    
    FEMALE("female");

    private String value;

    SexEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexEnum fromValue(String value) {
      for (SexEnum b : SexEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEX = "sex";
  @SerializedName(SERIALIZED_NAME_SEX)
  private SexEnum sex;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public ExplanationRequest() {
  }

  public ExplanationRequest(
     String evaluatedAt
  ) {
    this();
    this.evaluatedAt = evaluatedAt;
  }

  public ExplanationRequest age(Object age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nonnull
  public Object getAge() {
    return age;
  }

  public void setAge(Object age) {
    this.age = age;
  }


  /**
   * time when diagnosis was evaluated in ISO 8601 format
   * @return evaluatedAt
   */
  @javax.annotation.Nullable
  public String getEvaluatedAt() {
    return evaluatedAt;
  }



  public ExplanationRequest evidence(List<Evidence> evidence) {
    this.evidence = evidence;
    return this;
  }

  public ExplanationRequest addEvidenceItem(Evidence evidenceItem) {
    if (this.evidence == null) {
      this.evidence = new ArrayList<>();
    }
    this.evidence.add(evidenceItem);
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public List<Evidence> getEvidence() {
    return evidence;
  }

  public void setEvidence(List<Evidence> evidence) {
    this.evidence = evidence;
  }


  public ExplanationRequest extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public ExplanationRequest putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

  /**
   * Get extras
   * @return extras
   */
  @javax.annotation.Nullable
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }


  public ExplanationRequest sex(SexEnum sex) {
    this.sex = sex;
    return this;
  }

  /**
   * Get sex
   * @return sex
   */
  @javax.annotation.Nonnull
  public SexEnum getSex() {
    return sex;
  }

  public void setSex(SexEnum sex) {
    this.sex = sex;
  }


  public ExplanationRequest target(String target) {
    this.target = target;
    return this;
  }

  /**
   * target condition id
   * @return target
   */
  @javax.annotation.Nonnull
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplanationRequest explanationRequest = (ExplanationRequest) o;
    return Objects.equals(this.age, explanationRequest.age) &&
        Objects.equals(this.evaluatedAt, explanationRequest.evaluatedAt) &&
        Objects.equals(this.evidence, explanationRequest.evidence) &&
        Objects.equals(this.extras, explanationRequest.extras) &&
        Objects.equals(this.sex, explanationRequest.sex) &&
        Objects.equals(this.target, explanationRequest.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, evaluatedAt, evidence, extras, sex, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplanationRequest {\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    evaluatedAt: ").append(toIndentedString(evaluatedAt)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("age");
    openapiFields.add("evaluated_at");
    openapiFields.add("evidence");
    openapiFields.add("extras");
    openapiFields.add("sex");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("age");
    openapiRequiredFields.add("sex");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExplanationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExplanationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExplanationRequest is not found in the empty JSON string", ExplanationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExplanationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExplanationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExplanationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evaluated_at") != null && !jsonObj.get("evaluated_at").isJsonNull()) && !jsonObj.get("evaluated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluated_at").toString()));
      }
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        JsonArray jsonArrayevidence = jsonObj.getAsJsonArray("evidence");
        if (jsonArrayevidence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("evidence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `evidence` to be an array in the JSON string but got `%s`", jsonObj.get("evidence").toString()));
          }

          // validate the optional field `evidence` (array)
          for (int i = 0; i < jsonArrayevidence.size(); i++) {
            Evidence.validateJsonElement(jsonArrayevidence.get(i));
          };
        }
      }
      if (!jsonObj.get("sex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex").toString()));
      }
      // validate the required field `sex`
      SexEnum.validateJsonElement(jsonObj.get("sex"));
      if (!jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExplanationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExplanationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExplanationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExplanationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExplanationRequest>() {
           @Override
           public void write(JsonWriter out, ExplanationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExplanationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExplanationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExplanationRequest
   * @throws IOException if the JSON string is invalid with respect to ExplanationRequest
   */
  public static ExplanationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExplanationRequest.class);
  }

  /**
   * Convert an instance of ExplanationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

