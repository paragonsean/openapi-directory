/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConditionPublic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConditionPublic {
  /**
   * Gets or Sets acuteness
   */
  @JsonAdapter(AcutenessEnum.Adapter.class)
  public enum AcutenessEnum {
    CHRONIC("chronic"),
    
    CHRONIC_WITH_EXACERBATIONS("chronic_with_exacerbations"),
    
    ACUTE_POTENTIALLY_CHRONIC("acute_potentially_chronic"),
    
    ACUTE("acute");

    private String value;

    AcutenessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcutenessEnum fromValue(String value) {
      for (AcutenessEnum b : AcutenessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcutenessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcutenessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcutenessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcutenessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcutenessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACUTENESS = "acuteness";
  @SerializedName(SERIALIZED_NAME_ACUTENESS)
  private AcutenessEnum acuteness;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMON_NAME = "common_name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private Map<String, Object> extras = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets prevalence
   */
  @JsonAdapter(PrevalenceEnum.Adapter.class)
  public enum PrevalenceEnum {
    VERY_RARE("very_rare"),
    
    RARE("rare"),
    
    MODERATE("moderate"),
    
    COMMON("common");

    private String value;

    PrevalenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrevalenceEnum fromValue(String value) {
      for (PrevalenceEnum b : PrevalenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrevalenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrevalenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrevalenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrevalenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrevalenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREVALENCE = "prevalence";
  @SerializedName(SERIALIZED_NAME_PREVALENCE)
  private PrevalenceEnum prevalence;

  /**
   * Gets or Sets severity
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    MILD("mild"),
    
    MODERATE("moderate"),
    
    SEVERE("severe");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * Gets or Sets sexFilter
   */
  @JsonAdapter(SexFilterEnum.Adapter.class)
  public enum SexFilterEnum {
    BOTH("both"),
    
    MALE("male"),
    
    FEMALE("female");

    private String value;

    SexFilterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexFilterEnum fromValue(String value) {
      for (SexFilterEnum b : SexFilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexFilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexFilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexFilterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexFilterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexFilterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEX_FILTER = "sex_filter";
  @SerializedName(SERIALIZED_NAME_SEX_FILTER)
  private SexFilterEnum sexFilter;

  /**
   * Gets or Sets triageLevel
   */
  @JsonAdapter(TriageLevelEnum.Adapter.class)
  public enum TriageLevelEnum {
    EMERGENCY_AMBULANCE("emergency_ambulance"),
    
    EMERGENCY("emergency"),
    
    CONSULTATION_24("consultation_24"),
    
    CONSULTATION("consultation"),
    
    SELF_CARE("self_care");

    private String value;

    TriageLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriageLevelEnum fromValue(String value) {
      for (TriageLevelEnum b : TriageLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriageLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriageLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriageLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriageLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriageLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIAGE_LEVEL = "triage_level";
  @SerializedName(SERIALIZED_NAME_TRIAGE_LEVEL)
  private TriageLevelEnum triageLevel;

  public ConditionPublic() {
  }

  public ConditionPublic acuteness(AcutenessEnum acuteness) {
    this.acuteness = acuteness;
    return this;
  }

  /**
   * Get acuteness
   * @return acuteness
   */
  @javax.annotation.Nullable
  public AcutenessEnum getAcuteness() {
    return acuteness;
  }

  public void setAcuteness(AcutenessEnum acuteness) {
    this.acuteness = acuteness;
  }


  public ConditionPublic categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public ConditionPublic addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public ConditionPublic commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public ConditionPublic extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public ConditionPublic putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

  /**
   * additional content, like custom properties or images
   * @return extras
   */
  @javax.annotation.Nullable
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }


  public ConditionPublic id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConditionPublic name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConditionPublic prevalence(PrevalenceEnum prevalence) {
    this.prevalence = prevalence;
    return this;
  }

  /**
   * Get prevalence
   * @return prevalence
   */
  @javax.annotation.Nullable
  public PrevalenceEnum getPrevalence() {
    return prevalence;
  }

  public void setPrevalence(PrevalenceEnum prevalence) {
    this.prevalence = prevalence;
  }


  public ConditionPublic severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public ConditionPublic sexFilter(SexFilterEnum sexFilter) {
    this.sexFilter = sexFilter;
    return this;
  }

  /**
   * Get sexFilter
   * @return sexFilter
   */
  @javax.annotation.Nonnull
  public SexFilterEnum getSexFilter() {
    return sexFilter;
  }

  public void setSexFilter(SexFilterEnum sexFilter) {
    this.sexFilter = sexFilter;
  }


  public ConditionPublic triageLevel(TriageLevelEnum triageLevel) {
    this.triageLevel = triageLevel;
    return this;
  }

  /**
   * Get triageLevel
   * @return triageLevel
   */
  @javax.annotation.Nullable
  public TriageLevelEnum getTriageLevel() {
    return triageLevel;
  }

  public void setTriageLevel(TriageLevelEnum triageLevel) {
    this.triageLevel = triageLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionPublic conditionPublic = (ConditionPublic) o;
    return Objects.equals(this.acuteness, conditionPublic.acuteness) &&
        Objects.equals(this.categories, conditionPublic.categories) &&
        Objects.equals(this.commonName, conditionPublic.commonName) &&
        Objects.equals(this.extras, conditionPublic.extras) &&
        Objects.equals(this.id, conditionPublic.id) &&
        Objects.equals(this.name, conditionPublic.name) &&
        Objects.equals(this.prevalence, conditionPublic.prevalence) &&
        Objects.equals(this.severity, conditionPublic.severity) &&
        Objects.equals(this.sexFilter, conditionPublic.sexFilter) &&
        Objects.equals(this.triageLevel, conditionPublic.triageLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acuteness, categories, commonName, extras, id, name, prevalence, severity, sexFilter, triageLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionPublic {\n");
    sb.append("    acuteness: ").append(toIndentedString(acuteness)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prevalence: ").append(toIndentedString(prevalence)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    sexFilter: ").append(toIndentedString(sexFilter)).append("\n");
    sb.append("    triageLevel: ").append(toIndentedString(triageLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acuteness");
    openapiFields.add("categories");
    openapiFields.add("common_name");
    openapiFields.add("extras");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("prevalence");
    openapiFields.add("severity");
    openapiFields.add("sex_filter");
    openapiFields.add("triage_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sex_filter");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConditionPublic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConditionPublic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConditionPublic is not found in the empty JSON string", ConditionPublic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConditionPublic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConditionPublic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConditionPublic.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acuteness") != null && !jsonObj.get("acuteness").isJsonNull()) && !jsonObj.get("acuteness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acuteness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acuteness").toString()));
      }
      // validate the optional field `acuteness`
      if (jsonObj.get("acuteness") != null && !jsonObj.get("acuteness").isJsonNull()) {
        AcutenessEnum.validateJsonElement(jsonObj.get("acuteness"));
      }
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("common_name") != null && !jsonObj.get("common_name").isJsonNull()) && !jsonObj.get("common_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("prevalence") != null && !jsonObj.get("prevalence").isJsonNull()) && !jsonObj.get("prevalence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevalence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevalence").toString()));
      }
      // validate the optional field `prevalence`
      if (jsonObj.get("prevalence") != null && !jsonObj.get("prevalence").isJsonNull()) {
        PrevalenceEnum.validateJsonElement(jsonObj.get("prevalence"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if (!jsonObj.get("sex_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex_filter").toString()));
      }
      // validate the required field `sex_filter`
      SexFilterEnum.validateJsonElement(jsonObj.get("sex_filter"));
      if ((jsonObj.get("triage_level") != null && !jsonObj.get("triage_level").isJsonNull()) && !jsonObj.get("triage_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triage_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triage_level").toString()));
      }
      // validate the optional field `triage_level`
      if (jsonObj.get("triage_level") != null && !jsonObj.get("triage_level").isJsonNull()) {
        TriageLevelEnum.validateJsonElement(jsonObj.get("triage_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConditionPublic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConditionPublic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConditionPublic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConditionPublic.class));

       return (TypeAdapter<T>) new TypeAdapter<ConditionPublic>() {
           @Override
           public void write(JsonWriter out, ConditionPublic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConditionPublic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConditionPublic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConditionPublic
   * @throws IOException if the JSON string is invalid with respect to ConditionPublic
   */
  public static ConditionPublic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConditionPublic.class);
  }

  /**
   * Convert an instance of ConditionPublic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

