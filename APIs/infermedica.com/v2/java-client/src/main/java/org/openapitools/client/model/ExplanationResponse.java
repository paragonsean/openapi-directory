/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExplanationEvidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExplanationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExplanationResponse {
  public static final String SERIALIZED_NAME_CONFLICTING_EVIDENCE = "conflicting_evidence";
  @SerializedName(SERIALIZED_NAME_CONFLICTING_EVIDENCE)
  private List<ExplanationEvidence> conflictingEvidence = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTING_EVIDENCE = "supporting_evidence";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_EVIDENCE)
  private List<ExplanationEvidence> supportingEvidence = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNCONFIRMED_EVIDENCE = "unconfirmed_evidence";
  @SerializedName(SERIALIZED_NAME_UNCONFIRMED_EVIDENCE)
  private List<ExplanationEvidence> unconfirmedEvidence = new ArrayList<>();

  public ExplanationResponse() {
  }

  public ExplanationResponse conflictingEvidence(List<ExplanationEvidence> conflictingEvidence) {
    this.conflictingEvidence = conflictingEvidence;
    return this;
  }

  public ExplanationResponse addConflictingEvidenceItem(ExplanationEvidence conflictingEvidenceItem) {
    if (this.conflictingEvidence == null) {
      this.conflictingEvidence = new ArrayList<>();
    }
    this.conflictingEvidence.add(conflictingEvidenceItem);
    return this;
  }

  /**
   * conflicting evidence
   * @return conflictingEvidence
   */
  @javax.annotation.Nonnull
  public List<ExplanationEvidence> getConflictingEvidence() {
    return conflictingEvidence;
  }

  public void setConflictingEvidence(List<ExplanationEvidence> conflictingEvidence) {
    this.conflictingEvidence = conflictingEvidence;
  }


  public ExplanationResponse supportingEvidence(List<ExplanationEvidence> supportingEvidence) {
    this.supportingEvidence = supportingEvidence;
    return this;
  }

  public ExplanationResponse addSupportingEvidenceItem(ExplanationEvidence supportingEvidenceItem) {
    if (this.supportingEvidence == null) {
      this.supportingEvidence = new ArrayList<>();
    }
    this.supportingEvidence.add(supportingEvidenceItem);
    return this;
  }

  /**
   * supporting evidence
   * @return supportingEvidence
   */
  @javax.annotation.Nonnull
  public List<ExplanationEvidence> getSupportingEvidence() {
    return supportingEvidence;
  }

  public void setSupportingEvidence(List<ExplanationEvidence> supportingEvidence) {
    this.supportingEvidence = supportingEvidence;
  }


  public ExplanationResponse unconfirmedEvidence(List<ExplanationEvidence> unconfirmedEvidence) {
    this.unconfirmedEvidence = unconfirmedEvidence;
    return this;
  }

  public ExplanationResponse addUnconfirmedEvidenceItem(ExplanationEvidence unconfirmedEvidenceItem) {
    if (this.unconfirmedEvidence == null) {
      this.unconfirmedEvidence = new ArrayList<>();
    }
    this.unconfirmedEvidence.add(unconfirmedEvidenceItem);
    return this;
  }

  /**
   * unconfirmed evidence
   * @return unconfirmedEvidence
   */
  @javax.annotation.Nonnull
  public List<ExplanationEvidence> getUnconfirmedEvidence() {
    return unconfirmedEvidence;
  }

  public void setUnconfirmedEvidence(List<ExplanationEvidence> unconfirmedEvidence) {
    this.unconfirmedEvidence = unconfirmedEvidence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplanationResponse explanationResponse = (ExplanationResponse) o;
    return Objects.equals(this.conflictingEvidence, explanationResponse.conflictingEvidence) &&
        Objects.equals(this.supportingEvidence, explanationResponse.supportingEvidence) &&
        Objects.equals(this.unconfirmedEvidence, explanationResponse.unconfirmedEvidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictingEvidence, supportingEvidence, unconfirmedEvidence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplanationResponse {\n");
    sb.append("    conflictingEvidence: ").append(toIndentedString(conflictingEvidence)).append("\n");
    sb.append("    supportingEvidence: ").append(toIndentedString(supportingEvidence)).append("\n");
    sb.append("    unconfirmedEvidence: ").append(toIndentedString(unconfirmedEvidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conflicting_evidence");
    openapiFields.add("supporting_evidence");
    openapiFields.add("unconfirmed_evidence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conflicting_evidence");
    openapiRequiredFields.add("supporting_evidence");
    openapiRequiredFields.add("unconfirmed_evidence");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExplanationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExplanationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExplanationResponse is not found in the empty JSON string", ExplanationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExplanationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExplanationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExplanationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("conflicting_evidence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflicting_evidence` to be an array in the JSON string but got `%s`", jsonObj.get("conflicting_evidence").toString()));
      }

      JsonArray jsonArrayconflictingEvidence = jsonObj.getAsJsonArray("conflicting_evidence");
      // validate the required field `conflicting_evidence` (array)
      for (int i = 0; i < jsonArrayconflictingEvidence.size(); i++) {
        ExplanationEvidence.validateJsonElement(jsonArrayconflictingEvidence.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("supporting_evidence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supporting_evidence` to be an array in the JSON string but got `%s`", jsonObj.get("supporting_evidence").toString()));
      }

      JsonArray jsonArraysupportingEvidence = jsonObj.getAsJsonArray("supporting_evidence");
      // validate the required field `supporting_evidence` (array)
      for (int i = 0; i < jsonArraysupportingEvidence.size(); i++) {
        ExplanationEvidence.validateJsonElement(jsonArraysupportingEvidence.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("unconfirmed_evidence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unconfirmed_evidence` to be an array in the JSON string but got `%s`", jsonObj.get("unconfirmed_evidence").toString()));
      }

      JsonArray jsonArrayunconfirmedEvidence = jsonObj.getAsJsonArray("unconfirmed_evidence");
      // validate the required field `unconfirmed_evidence` (array)
      for (int i = 0; i < jsonArrayunconfirmedEvidence.size(); i++) {
        ExplanationEvidence.validateJsonElement(jsonArrayunconfirmedEvidence.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExplanationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExplanationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExplanationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExplanationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ExplanationResponse>() {
           @Override
           public void write(JsonWriter out, ExplanationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExplanationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExplanationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExplanationResponse
   * @throws IOException if the JSON string is invalid with respect to ExplanationResponse
   */
  public static ExplanationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExplanationResponse.class);
  }

  /**
   * Convert an instance of ExplanationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

