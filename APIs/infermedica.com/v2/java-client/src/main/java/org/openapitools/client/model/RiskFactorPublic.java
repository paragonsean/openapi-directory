/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RiskFactorPublic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:38.619616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RiskFactorPublic {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_COMMON_NAME = "common_name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private Map<String, Object> extras = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_SOURCE = "image_source";
  @SerializedName(SERIALIZED_NAME_IMAGE_SOURCE)
  private String imageSource;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets sexFilter
   */
  @JsonAdapter(SexFilterEnum.Adapter.class)
  public enum SexFilterEnum {
    BOTH("both"),
    
    MALE("male"),
    
    FEMALE("female");

    private String value;

    SexFilterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexFilterEnum fromValue(String value) {
      for (SexFilterEnum b : SexFilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexFilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexFilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexFilterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexFilterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexFilterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEX_FILTER = "sex_filter";
  @SerializedName(SERIALIZED_NAME_SEX_FILTER)
  private SexFilterEnum sexFilter;

  public RiskFactorPublic() {
  }

  public RiskFactorPublic category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public RiskFactorPublic commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public RiskFactorPublic extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public RiskFactorPublic putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

  /**
   * additional content, like custom properties or images
   * @return extras
   */
  @javax.annotation.Nullable
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }


  public RiskFactorPublic id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RiskFactorPublic imageSource(String imageSource) {
    this.imageSource = imageSource;
    return this;
  }

  /**
   * Get imageSource
   * @return imageSource
   */
  @javax.annotation.Nullable
  public String getImageSource() {
    return imageSource;
  }

  public void setImageSource(String imageSource) {
    this.imageSource = imageSource;
  }


  public RiskFactorPublic imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public RiskFactorPublic name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RiskFactorPublic sexFilter(SexFilterEnum sexFilter) {
    this.sexFilter = sexFilter;
    return this;
  }

  /**
   * Get sexFilter
   * @return sexFilter
   */
  @javax.annotation.Nonnull
  public SexFilterEnum getSexFilter() {
    return sexFilter;
  }

  public void setSexFilter(SexFilterEnum sexFilter) {
    this.sexFilter = sexFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskFactorPublic riskFactorPublic = (RiskFactorPublic) o;
    return Objects.equals(this.category, riskFactorPublic.category) &&
        Objects.equals(this.commonName, riskFactorPublic.commonName) &&
        Objects.equals(this.extras, riskFactorPublic.extras) &&
        Objects.equals(this.id, riskFactorPublic.id) &&
        Objects.equals(this.imageSource, riskFactorPublic.imageSource) &&
        Objects.equals(this.imageUrl, riskFactorPublic.imageUrl) &&
        Objects.equals(this.name, riskFactorPublic.name) &&
        Objects.equals(this.sexFilter, riskFactorPublic.sexFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, commonName, extras, id, imageSource, imageUrl, name, sexFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskFactorPublic {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageSource: ").append(toIndentedString(imageSource)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sexFilter: ").append(toIndentedString(sexFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("common_name");
    openapiFields.add("extras");
    openapiFields.add("id");
    openapiFields.add("image_source");
    openapiFields.add("image_url");
    openapiFields.add("name");
    openapiFields.add("sex_filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sex_filter");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RiskFactorPublic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RiskFactorPublic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RiskFactorPublic is not found in the empty JSON string", RiskFactorPublic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RiskFactorPublic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RiskFactorPublic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RiskFactorPublic.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("common_name") != null && !jsonObj.get("common_name").isJsonNull()) && !jsonObj.get("common_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image_source") != null && !jsonObj.get("image_source").isJsonNull()) && !jsonObj.get("image_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_source").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("sex_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex_filter").toString()));
      }
      // validate the required field `sex_filter`
      SexFilterEnum.validateJsonElement(jsonObj.get("sex_filter"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RiskFactorPublic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RiskFactorPublic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RiskFactorPublic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RiskFactorPublic.class));

       return (TypeAdapter<T>) new TypeAdapter<RiskFactorPublic>() {
           @Override
           public void write(JsonWriter out, RiskFactorPublic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RiskFactorPublic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RiskFactorPublic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RiskFactorPublic
   * @throws IOException if the JSON string is invalid with respect to RiskFactorPublic
   */
  public static RiskFactorPublic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RiskFactorPublic.class);
  }

  /**
   * Convert an instance of RiskFactorPublic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

