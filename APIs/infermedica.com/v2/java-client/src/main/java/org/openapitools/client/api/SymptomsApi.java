/*
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SymptomDetails;
import org.openapitools.client.model.SymptomPublic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SymptomsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SymptomsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SymptomsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllSymptoms
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSymptomsCall(Integer ageValue, String ageUnit, Boolean enableTriage5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/symptoms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age.value", ageValue));
        }

        if (ageUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age.unit", ageUnit));
        }

        if (enableTriage5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable_triage_5", enableTriage5));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSymptomsValidateBeforeCall(Integer ageValue, String ageUnit, Boolean enableTriage5, final ApiCallback _callback) throws ApiException {
        return getAllSymptomsCall(ageValue, ageUnit, enableTriage5, _callback);

    }

    /**
     * List all symptoms
     * Returns a list of all available symptoms.
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @return List&lt;SymptomPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<SymptomPublic> getAllSymptoms(Integer ageValue, String ageUnit, Boolean enableTriage5) throws ApiException {
        ApiResponse<List<SymptomPublic>> localVarResp = getAllSymptomsWithHttpInfo(ageValue, ageUnit, enableTriage5);
        return localVarResp.getData();
    }

    /**
     * List all symptoms
     * Returns a list of all available symptoms.
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @return ApiResponse&lt;List&lt;SymptomPublic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SymptomPublic>> getAllSymptomsWithHttpInfo(Integer ageValue, String ageUnit, Boolean enableTriage5) throws ApiException {
        okhttp3.Call localVarCall = getAllSymptomsValidateBeforeCall(ageValue, ageUnit, enableTriage5, null);
        Type localVarReturnType = new TypeToken<List<SymptomPublic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all symptoms (asynchronously)
     * Returns a list of all available symptoms.
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSymptomsAsync(Integer ageValue, String ageUnit, Boolean enableTriage5, final ApiCallback<List<SymptomPublic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSymptomsValidateBeforeCall(ageValue, ageUnit, enableTriage5, _callback);
        Type localVarReturnType = new TypeToken<List<SymptomPublic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSymptom
     * @param id symptoms id (required)
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id specified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> symptom not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSymptomCall(String id, Integer ageValue, String ageUnit, Boolean enableTriage5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/symptoms/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age.value", ageValue));
        }

        if (ageUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age.unit", ageUnit));
        }

        if (enableTriage5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable_triage_5", enableTriage5));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSymptomValidateBeforeCall(String id, Integer ageValue, String ageUnit, Boolean enableTriage5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSymptom(Async)");
        }

        return getSymptomCall(id, ageValue, ageUnit, enableTriage5, _callback);

    }

    /**
     * Get symptoms by id
     * Returns details of a single symptom specified by id parameter.
     * @param id symptoms id (required)
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @return SymptomDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id specified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> symptom not found </td><td>  -  </td></tr>
     </table>
     */
    public SymptomDetails getSymptom(String id, Integer ageValue, String ageUnit, Boolean enableTriage5) throws ApiException {
        ApiResponse<SymptomDetails> localVarResp = getSymptomWithHttpInfo(id, ageValue, ageUnit, enableTriage5);
        return localVarResp.getData();
    }

    /**
     * Get symptoms by id
     * Returns details of a single symptom specified by id parameter.
     * @param id symptoms id (required)
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @return ApiResponse&lt;SymptomDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id specified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> symptom not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymptomDetails> getSymptomWithHttpInfo(String id, Integer ageValue, String ageUnit, Boolean enableTriage5) throws ApiException {
        okhttp3.Call localVarCall = getSymptomValidateBeforeCall(id, ageValue, ageUnit, enableTriage5, null);
        Type localVarReturnType = new TypeToken<SymptomDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get symptoms by id (asynchronously)
     * Returns details of a single symptom specified by id parameter.
     * @param id symptoms id (required)
     * @param ageValue age value (optional)
     * @param ageUnit unit in which age value was provided (optional, default to year)
     * @param enableTriage5 enable 5-level triage values (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id specified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> symptom not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSymptomAsync(String id, Integer ageValue, String ageUnit, Boolean enableTriage5, final ApiCallback<SymptomDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSymptomValidateBeforeCall(id, ageValue, ageUnit, enableTriage5, _callback);
        Type localVarReturnType = new TypeToken<SymptomDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
