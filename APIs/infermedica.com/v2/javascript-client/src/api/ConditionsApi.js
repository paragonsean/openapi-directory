/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConditionDetails from '../model/ConditionDetails';
import ConditionPublic from '../model/ConditionPublic';

/**
* Conditions service.
* @module api/ConditionsApi
* @version v2
*/
export default class ConditionsApi {

    /**
    * Constructs a new ConditionsApi. 
    * @alias module:api/ConditionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllConditions operation.
     * @callback module:api/ConditionsApi~getAllConditionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConditionPublic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all conditions
     * Returns a list of all available conditions.
     * @param {Object} opts Optional parameters
     * @param {Number} [ageValue] age value
     * @param {module:model/String} [ageUnit = 'year')] unit in which age value was provided
     * @param {Boolean} [enableTriage5] enable 5-level triage values
     * @param {module:api/ConditionsApi~getAllConditionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConditionPublic>}
     */
    getAllConditions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'age.value': opts['ageValue'],
        'age.unit': opts['ageUnit'],
        'enable_triage_5': opts['enableTriage5']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConditionPublic];
      return this.apiClient.callApi(
        '/conditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCondition operation.
     * @callback module:api/ConditionsApi~getConditionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConditionDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get condition by id
     * Returns details of a single condition specified by id parameter.
     * @param {String} id condition id
     * @param {Object} opts Optional parameters
     * @param {Number} [ageValue] age value
     * @param {module:model/String} [ageUnit = 'year')] unit in which age value was provided
     * @param {Boolean} [enableTriage5] enable 5-level triage values
     * @param {module:api/ConditionsApi~getConditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConditionDetails}
     */
    getCondition(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCondition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'age.value': opts['ageValue'],
        'age.unit': opts['ageUnit'],
        'enable_triage_5': opts['enableTriage5']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConditionDetails;
      return this.apiClient.callApi(
        '/conditions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
