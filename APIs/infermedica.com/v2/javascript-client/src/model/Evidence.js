/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Evidence model module.
 * @module model/Evidence
 * @version v2
 */
class Evidence {
    /**
     * Constructs a new <code>Evidence</code>.
     * @alias module:model/Evidence
     * @param choiceId {module:model/Evidence.ChoiceIdEnum} 
     * @param id {String} id of observation or condition
     */
    constructor(choiceId, id) { 
        
        Evidence.initialize(this, choiceId, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, choiceId, id) { 
        obj['choice_id'] = choiceId;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Evidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Evidence} obj Optional instance to populate.
     * @return {module:model/Evidence} The populated <code>Evidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Evidence();

            if (data.hasOwnProperty('choice_id')) {
                obj['choice_id'] = ApiClient.convertToType(data['choice_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('observed_at')) {
                obj['observed_at'] = ApiClient.convertToType(data['observed_at'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Evidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Evidence</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Evidence.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['choice_id'] && !(typeof data['choice_id'] === 'string' || data['choice_id'] instanceof String)) {
            throw new Error("Expected the field `choice_id` to be a primitive type in the JSON string but got " + data['choice_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['observed_at'] && !(typeof data['observed_at'] === 'string' || data['observed_at'] instanceof String)) {
            throw new Error("Expected the field `observed_at` to be a primitive type in the JSON string but got " + data['observed_at']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

Evidence.RequiredProperties = ["choice_id", "id"];

/**
 * @member {module:model/Evidence.ChoiceIdEnum} choice_id
 */
Evidence.prototype['choice_id'] = undefined;

/**
 * id of observation or condition
 * @member {String} id
 */
Evidence.prototype['id'] = undefined;

/**
 * time when evidence was observed in ISO 8601 format
 * @member {String} observed_at
 */
Evidence.prototype['observed_at'] = undefined;

/**
 * Flag describing evidence origin
 * @member {module:model/Evidence.SourceEnum} source
 */
Evidence.prototype['source'] = undefined;





/**
 * Allowed values for the <code>choice_id</code> property.
 * @enum {String}
 * @readonly
 */
Evidence['ChoiceIdEnum'] = {

    /**
     * value: "present"
     * @const
     */
    "present": "present",

    /**
     * value: "absent"
     * @const
     */
    "absent": "absent",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
Evidence['SourceEnum'] = {

    /**
     * value: "initial"
     * @const
     */
    "initial": "initial",

    /**
     * value: "suggest"
     * @const
     */
    "suggest": "suggest",

    /**
     * value: "predefined"
     * @const
     */
    "predefined": "predefined",

    /**
     * value: "red_flags"
     * @const
     */
    "red_flags": "red_flags"
};



export default Evidence;

