/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObservationMention from './ObservationMention';

/**
 * The ParseResponse model module.
 * @module model/ParseResponse
 * @version v2
 */
class ParseResponse {
    /**
     * Constructs a new <code>ParseResponse</code>.
     * @alias module:model/ParseResponse
     * @param mentions {Array.<module:model/ObservationMention>} list of recognized symptom or risk factor mentions
     * @param obvious {Boolean} indicates that entire input text has been parsed successfully and unambiguously
     */
    constructor(mentions, obvious) { 
        
        ParseResponse.initialize(this, mentions, obvious);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mentions, obvious) { 
        obj['mentions'] = mentions;
        obj['obvious'] = obvious;
    }

    /**
     * Constructs a <code>ParseResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParseResponse} obj Optional instance to populate.
     * @return {module:model/ParseResponse} The populated <code>ParseResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParseResponse();

            if (data.hasOwnProperty('mentions')) {
                obj['mentions'] = ApiClient.convertToType(data['mentions'], [ObservationMention]);
            }
            if (data.hasOwnProperty('obvious')) {
                obj['obvious'] = ApiClient.convertToType(data['obvious'], 'Boolean');
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParseResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParseResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParseResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['mentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mentions'])) {
                throw new Error("Expected the field `mentions` to be an array in the JSON data but got " + data['mentions']);
            }
            // validate the optional field `mentions` (array)
            for (const item of data['mentions']) {
                ObservationMention.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tokens'])) {
            throw new Error("Expected the field `tokens` to be an array in the JSON data but got " + data['tokens']);
        }

        return true;
    }


}

ParseResponse.RequiredProperties = ["mentions", "obvious"];

/**
 * list of recognized symptom or risk factor mentions
 * @member {Array.<module:model/ObservationMention>} mentions
 */
ParseResponse.prototype['mentions'] = undefined;

/**
 * indicates that entire input text has been parsed successfully and unambiguously
 * @member {Boolean} obvious
 */
ParseResponse.prototype['obvious'] = undefined;

/**
 * @member {Array.<String>} tokens
 */
ParseResponse.prototype['tokens'] = undefined;






export default ParseResponse;

