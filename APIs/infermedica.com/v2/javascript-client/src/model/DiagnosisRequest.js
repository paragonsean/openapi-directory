/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Evidence from './Evidence';

/**
 * The DiagnosisRequest model module.
 * @module model/DiagnosisRequest
 * @version v2
 */
class DiagnosisRequest {
    /**
     * Constructs a new <code>DiagnosisRequest</code>.
     * @alias module:model/DiagnosisRequest
     * @param age {Object} 
     * @param sex {module:model/DiagnosisRequest.SexEnum} 
     */
    constructor(age, sex) { 
        
        DiagnosisRequest.initialize(this, age, sex);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, age, sex) { 
        obj['age'] = age;
        obj['sex'] = sex;
    }

    /**
     * Constructs a <code>DiagnosisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosisRequest} obj Optional instance to populate.
     * @return {module:model/DiagnosisRequest} The populated <code>DiagnosisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosisRequest();

            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], Object);
            }
            if (data.hasOwnProperty('evaluated_at')) {
                obj['evaluated_at'] = ApiClient.convertToType(data['evaluated_at'], 'String');
            }
            if (data.hasOwnProperty('evidence')) {
                obj['evidence'] = ApiClient.convertToType(data['evidence'], [Evidence]);
            }
            if (data.hasOwnProperty('extras')) {
                obj['extras'] = ApiClient.convertToType(data['extras'], {'String': Object});
            }
            if (data.hasOwnProperty('sex')) {
                obj['sex'] = ApiClient.convertToType(data['sex'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosisRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiagnosisRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['evaluated_at'] && !(typeof data['evaluated_at'] === 'string' || data['evaluated_at'] instanceof String)) {
            throw new Error("Expected the field `evaluated_at` to be a primitive type in the JSON string but got " + data['evaluated_at']);
        }
        if (data['evidence']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['evidence'])) {
                throw new Error("Expected the field `evidence` to be an array in the JSON data but got " + data['evidence']);
            }
            // validate the optional field `evidence` (array)
            for (const item of data['evidence']) {
                Evidence.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sex'] && !(typeof data['sex'] === 'string' || data['sex'] instanceof String)) {
            throw new Error("Expected the field `sex` to be a primitive type in the JSON string but got " + data['sex']);
        }

        return true;
    }


}

DiagnosisRequest.RequiredProperties = ["age", "sex"];

/**
 * @member {Object} age
 */
DiagnosisRequest.prototype['age'] = undefined;

/**
 * time when diagnosis was evaluated in ISO 8601 format
 * @member {String} evaluated_at
 */
DiagnosisRequest.prototype['evaluated_at'] = undefined;

/**
 * @member {Array.<module:model/Evidence>} evidence
 */
DiagnosisRequest.prototype['evidence'] = undefined;

/**
 * @member {Object.<String, Object>} extras
 */
DiagnosisRequest.prototype['extras'] = undefined;

/**
 * @member {module:model/DiagnosisRequest.SexEnum} sex
 */
DiagnosisRequest.prototype['sex'] = undefined;





/**
 * Allowed values for the <code>sex</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosisRequest['SexEnum'] = {

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female"
};



export default DiagnosisRequest;

