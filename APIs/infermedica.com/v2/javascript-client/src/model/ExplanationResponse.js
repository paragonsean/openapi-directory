/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExplanationEvidence from './ExplanationEvidence';

/**
 * The ExplanationResponse model module.
 * @module model/ExplanationResponse
 * @version v2
 */
class ExplanationResponse {
    /**
     * Constructs a new <code>ExplanationResponse</code>.
     * @alias module:model/ExplanationResponse
     * @param conflictingEvidence {Array.<module:model/ExplanationEvidence>} conflicting evidence
     * @param supportingEvidence {Array.<module:model/ExplanationEvidence>} supporting evidence
     * @param unconfirmedEvidence {Array.<module:model/ExplanationEvidence>} unconfirmed evidence
     */
    constructor(conflictingEvidence, supportingEvidence, unconfirmedEvidence) { 
        
        ExplanationResponse.initialize(this, conflictingEvidence, supportingEvidence, unconfirmedEvidence);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conflictingEvidence, supportingEvidence, unconfirmedEvidence) { 
        obj['conflicting_evidence'] = conflictingEvidence;
        obj['supporting_evidence'] = supportingEvidence;
        obj['unconfirmed_evidence'] = unconfirmedEvidence;
    }

    /**
     * Constructs a <code>ExplanationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExplanationResponse} obj Optional instance to populate.
     * @return {module:model/ExplanationResponse} The populated <code>ExplanationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExplanationResponse();

            if (data.hasOwnProperty('conflicting_evidence')) {
                obj['conflicting_evidence'] = ApiClient.convertToType(data['conflicting_evidence'], [ExplanationEvidence]);
            }
            if (data.hasOwnProperty('supporting_evidence')) {
                obj['supporting_evidence'] = ApiClient.convertToType(data['supporting_evidence'], [ExplanationEvidence]);
            }
            if (data.hasOwnProperty('unconfirmed_evidence')) {
                obj['unconfirmed_evidence'] = ApiClient.convertToType(data['unconfirmed_evidence'], [ExplanationEvidence]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExplanationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExplanationResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExplanationResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['conflicting_evidence']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conflicting_evidence'])) {
                throw new Error("Expected the field `conflicting_evidence` to be an array in the JSON data but got " + data['conflicting_evidence']);
            }
            // validate the optional field `conflicting_evidence` (array)
            for (const item of data['conflicting_evidence']) {
                ExplanationEvidence.validateJSON(item);
            };
        }
        if (data['supporting_evidence']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supporting_evidence'])) {
                throw new Error("Expected the field `supporting_evidence` to be an array in the JSON data but got " + data['supporting_evidence']);
            }
            // validate the optional field `supporting_evidence` (array)
            for (const item of data['supporting_evidence']) {
                ExplanationEvidence.validateJSON(item);
            };
        }
        if (data['unconfirmed_evidence']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unconfirmed_evidence'])) {
                throw new Error("Expected the field `unconfirmed_evidence` to be an array in the JSON data but got " + data['unconfirmed_evidence']);
            }
            // validate the optional field `unconfirmed_evidence` (array)
            for (const item of data['unconfirmed_evidence']) {
                ExplanationEvidence.validateJSON(item);
            };
        }

        return true;
    }


}

ExplanationResponse.RequiredProperties = ["conflicting_evidence", "supporting_evidence", "unconfirmed_evidence"];

/**
 * conflicting evidence
 * @member {Array.<module:model/ExplanationEvidence>} conflicting_evidence
 */
ExplanationResponse.prototype['conflicting_evidence'] = undefined;

/**
 * supporting evidence
 * @member {Array.<module:model/ExplanationEvidence>} supporting_evidence
 */
ExplanationResponse.prototype['supporting_evidence'] = undefined;

/**
 * unconfirmed evidence
 * @member {Array.<module:model/ExplanationEvidence>} unconfirmed_evidence
 */
ExplanationResponse.prototype['unconfirmed_evidence'] = undefined;






export default ExplanationResponse;

