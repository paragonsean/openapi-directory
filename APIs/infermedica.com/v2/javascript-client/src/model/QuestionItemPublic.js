/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChoicePublic from './ChoicePublic';

/**
 * The QuestionItemPublic model module.
 * @module model/QuestionItemPublic
 * @version v2
 */
class QuestionItemPublic {
    /**
     * Constructs a new <code>QuestionItemPublic</code>.
     * @alias module:model/QuestionItemPublic
     * @param choices {Array.<module:model/ChoicePublic>} list of available answer choices
     * @param id {String} observation id
     * @param name {String} name or alias of observation
     */
    constructor(choices, id, name) { 
        
        QuestionItemPublic.initialize(this, choices, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, choices, id, name) { 
        obj['choices'] = choices;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>QuestionItemPublic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionItemPublic} obj Optional instance to populate.
     * @return {module:model/QuestionItemPublic} The populated <code>QuestionItemPublic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionItemPublic();

            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], [ChoicePublic]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionItemPublic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionItemPublic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuestionItemPublic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['choices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['choices'])) {
                throw new Error("Expected the field `choices` to be an array in the JSON data but got " + data['choices']);
            }
            // validate the optional field `choices` (array)
            for (const item of data['choices']) {
                ChoicePublic.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

QuestionItemPublic.RequiredProperties = ["choices", "id", "name"];

/**
 * list of available answer choices
 * @member {Array.<module:model/ChoicePublic>} choices
 */
QuestionItemPublic.prototype['choices'] = undefined;

/**
 * observation id
 * @member {String} id
 */
QuestionItemPublic.prototype['id'] = undefined;

/**
 * name or alias of observation
 * @member {String} name
 */
QuestionItemPublic.prototype['name'] = undefined;






export default QuestionItemPublic;

