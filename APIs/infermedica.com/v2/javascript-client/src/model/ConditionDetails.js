/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConditionDetails model module.
 * @module model/ConditionDetails
 * @version v2
 */
class ConditionDetails {
    /**
     * Constructs a new <code>ConditionDetails</code>.
     * @alias module:model/ConditionDetails
     * @param categories {Array.<String>} 
     * @param id {String} 
     * @param name {String} 
     * @param sexFilter {module:model/ConditionDetails.SexFilterEnum} 
     */
    constructor(categories, id, name, sexFilter) { 
        
        ConditionDetails.initialize(this, categories, id, name, sexFilter);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, id, name, sexFilter) { 
        obj['categories'] = categories;
        obj['id'] = id;
        obj['name'] = name;
        obj['sex_filter'] = sexFilter;
    }

    /**
     * Constructs a <code>ConditionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionDetails} obj Optional instance to populate.
     * @return {module:model/ConditionDetails} The populated <code>ConditionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionDetails();

            if (data.hasOwnProperty('acuteness')) {
                obj['acuteness'] = ApiClient.convertToType(data['acuteness'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('extras')) {
                obj['extras'] = ApiClient.convertToType(data['extras'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prevalence')) {
                obj['prevalence'] = ApiClient.convertToType(data['prevalence'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('sex_filter')) {
                obj['sex_filter'] = ApiClient.convertToType(data['sex_filter'], 'String');
            }
            if (data.hasOwnProperty('triage_level')) {
                obj['triage_level'] = ApiClient.convertToType(data['triage_level'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConditionDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['acuteness'] && !(typeof data['acuteness'] === 'string' || data['acuteness'] instanceof String)) {
            throw new Error("Expected the field `acuteness` to be a primitive type in the JSON string but got " + data['acuteness']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['prevalence'] && !(typeof data['prevalence'] === 'string' || data['prevalence'] instanceof String)) {
            throw new Error("Expected the field `prevalence` to be a primitive type in the JSON string but got " + data['prevalence']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['sex_filter'] && !(typeof data['sex_filter'] === 'string' || data['sex_filter'] instanceof String)) {
            throw new Error("Expected the field `sex_filter` to be a primitive type in the JSON string but got " + data['sex_filter']);
        }
        // ensure the json data is a string
        if (data['triage_level'] && !(typeof data['triage_level'] === 'string' || data['triage_level'] instanceof String)) {
            throw new Error("Expected the field `triage_level` to be a primitive type in the JSON string but got " + data['triage_level']);
        }

        return true;
    }


}

ConditionDetails.RequiredProperties = ["categories", "id", "name", "sex_filter"];

/**
 * @member {module:model/ConditionDetails.AcutenessEnum} acuteness
 */
ConditionDetails.prototype['acuteness'] = undefined;

/**
 * @member {Array.<String>} categories
 */
ConditionDetails.prototype['categories'] = undefined;

/**
 * @member {String} common_name
 */
ConditionDetails.prototype['common_name'] = undefined;

/**
 * additional content, like custom properties or images
 * @member {Object.<String, Object>} extras
 */
ConditionDetails.prototype['extras'] = undefined;

/**
 * @member {String} id
 */
ConditionDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ConditionDetails.prototype['name'] = undefined;

/**
 * @member {module:model/ConditionDetails.PrevalenceEnum} prevalence
 */
ConditionDetails.prototype['prevalence'] = undefined;

/**
 * @member {module:model/ConditionDetails.SeverityEnum} severity
 */
ConditionDetails.prototype['severity'] = undefined;

/**
 * @member {module:model/ConditionDetails.SexFilterEnum} sex_filter
 */
ConditionDetails.prototype['sex_filter'] = undefined;

/**
 * @member {module:model/ConditionDetails.TriageLevelEnum} triage_level
 */
ConditionDetails.prototype['triage_level'] = undefined;





/**
 * Allowed values for the <code>acuteness</code> property.
 * @enum {String}
 * @readonly
 */
ConditionDetails['AcutenessEnum'] = {

    /**
     * value: "chronic"
     * @const
     */
    "chronic": "chronic",

    /**
     * value: "chronic_with_exacerbations"
     * @const
     */
    "chronic_with_exacerbations": "chronic_with_exacerbations",

    /**
     * value: "acute_potentially_chronic"
     * @const
     */
    "acute_potentially_chronic": "acute_potentially_chronic",

    /**
     * value: "acute"
     * @const
     */
    "acute": "acute"
};


/**
 * Allowed values for the <code>prevalence</code> property.
 * @enum {String}
 * @readonly
 */
ConditionDetails['PrevalenceEnum'] = {

    /**
     * value: "very_rare"
     * @const
     */
    "very_rare": "very_rare",

    /**
     * value: "rare"
     * @const
     */
    "rare": "rare",

    /**
     * value: "moderate"
     * @const
     */
    "moderate": "moderate",

    /**
     * value: "common"
     * @const
     */
    "common": "common"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
ConditionDetails['SeverityEnum'] = {

    /**
     * value: "mild"
     * @const
     */
    "mild": "mild",

    /**
     * value: "moderate"
     * @const
     */
    "moderate": "moderate",

    /**
     * value: "severe"
     * @const
     */
    "severe": "severe"
};


/**
 * Allowed values for the <code>sex_filter</code> property.
 * @enum {String}
 * @readonly
 */
ConditionDetails['SexFilterEnum'] = {

    /**
     * value: "both"
     * @const
     */
    "both": "both",

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female"
};


/**
 * Allowed values for the <code>triage_level</code> property.
 * @enum {String}
 * @readonly
 */
ConditionDetails['TriageLevelEnum'] = {

    /**
     * value: "emergency_ambulance"
     * @const
     */
    "emergency_ambulance": "emergency_ambulance",

    /**
     * value: "emergency"
     * @const
     */
    "emergency": "emergency",

    /**
     * value: "consultation_24"
     * @const
     */
    "consultation_24": "consultation_24",

    /**
     * value: "consultation"
     * @const
     */
    "consultation": "consultation",

    /**
     * value: "self_care"
     * @const
     */
    "self_care": "self_care"
};



export default ConditionDetails;

