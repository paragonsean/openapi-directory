/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabTestResultPublic from './LabTestResultPublic';

/**
 * The LabTestPublic model module.
 * @module model/LabTestPublic
 * @version v2
 */
class LabTestPublic {
    /**
     * Constructs a new <code>LabTestPublic</code>.
     * @alias module:model/LabTestPublic
     * @param id {String} 
     * @param name {String} 
     */
    constructor(id, name) { 
        
        LabTestPublic.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>LabTestPublic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabTestPublic} obj Optional instance to populate.
     * @return {module:model/LabTestPublic} The populated <code>LabTestPublic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabTestPublic();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [LabTestResultPublic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabTestPublic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabTestPublic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LabTestPublic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                LabTestResultPublic.validateJSON(item);
            };
        }

        return true;
    }


}

LabTestPublic.RequiredProperties = ["id", "name"];

/**
 * @member {String} category
 */
LabTestPublic.prototype['category'] = undefined;

/**
 * @member {String} common_name
 */
LabTestPublic.prototype['common_name'] = undefined;

/**
 * @member {String} id
 */
LabTestPublic.prototype['id'] = undefined;

/**
 * @member {String} name
 */
LabTestPublic.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/LabTestResultPublic>} results
 */
LabTestPublic.prototype['results'] = undefined;






export default LabTestPublic;

