/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RationaleParam from './RationaleParam';

/**
 * The RationaleResponse model module.
 * @module model/RationaleResponse
 * @version v2
 */
class RationaleResponse {
    /**
     * Constructs a new <code>RationaleResponse</code>.
     * @alias module:model/RationaleResponse
     * @param type {module:model/RationaleResponse.TypeEnum} type
     */
    constructor(type) { 
        
        RationaleResponse.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RationaleResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RationaleResponse} obj Optional instance to populate.
     * @return {module:model/RationaleResponse} The populated <code>RationaleResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RationaleResponse();

            if (data.hasOwnProperty('condition_params')) {
                obj['condition_params'] = ApiClient.convertToType(data['condition_params'], [RationaleParam]);
            }
            if (data.hasOwnProperty('observation_params')) {
                obj['observation_params'] = ApiClient.convertToType(data['observation_params'], [RationaleParam]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RationaleResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RationaleResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RationaleResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['condition_params']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['condition_params'])) {
                throw new Error("Expected the field `condition_params` to be an array in the JSON data but got " + data['condition_params']);
            }
            // validate the optional field `condition_params` (array)
            for (const item of data['condition_params']) {
                RationaleParam.validateJSON(item);
            };
        }
        if (data['observation_params']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['observation_params'])) {
                throw new Error("Expected the field `observation_params` to be an array in the JSON data but got " + data['observation_params']);
            }
            // validate the optional field `observation_params` (array)
            for (const item of data['observation_params']) {
                RationaleParam.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RationaleResponse.RequiredProperties = ["type"];

/**
 * condition params
 * @member {Array.<module:model/RationaleParam>} condition_params
 */
RationaleResponse.prototype['condition_params'] = undefined;

/**
 * observation params
 * @member {Array.<module:model/RationaleParam>} observation_params
 */
RationaleResponse.prototype['observation_params'] = undefined;

/**
 * type
 * @member {module:model/RationaleResponse.TypeEnum} type
 */
RationaleResponse.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RationaleResponse['TypeEnum'] = {

    /**
     * value: "r0"
     * @const
     */
    "r0": "r0",

    /**
     * value: "r1"
     * @const
     */
    "r1": "r1",

    /**
     * value: "r2"
     * @const
     */
    "r2": "r2",

    /**
     * value: "r3"
     * @const
     */
    "r3": "r3",

    /**
     * value: "r4"
     * @const
     */
    "r4": "r4",

    /**
     * value: "r5"
     * @const
     */
    "r5": "r5",

    /**
     * value: "r6"
     * @const
     */
    "r6": "r6"
};



export default RationaleResponse;

