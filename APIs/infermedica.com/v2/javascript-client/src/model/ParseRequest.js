/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParseRequest model module.
 * @module model/ParseRequest
 * @version v2
 */
class ParseRequest {
    /**
     * Constructs a new <code>ParseRequest</code>.
     * @alias module:model/ParseRequest
     * @param text {String} user text to process
     */
    constructor(text) { 
        
        ParseRequest.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>ParseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParseRequest} obj Optional instance to populate.
     * @return {module:model/ParseRequest} The populated <code>ParseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParseRequest();

            if (data.hasOwnProperty('concept_types')) {
                obj['concept_types'] = ApiClient.convertToType(data['concept_types'], ['String']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], ['String']);
            }
            if (data.hasOwnProperty('correct_spelling')) {
                obj['correct_spelling'] = ApiClient.convertToType(data['correct_spelling'], 'Boolean');
            }
            if (data.hasOwnProperty('include_tokens')) {
                obj['include_tokens'] = ApiClient.convertToType(data['include_tokens'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParseRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParseRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['concept_types'])) {
            throw new Error("Expected the field `concept_types` to be an array in the JSON data but got " + data['concept_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['context'])) {
            throw new Error("Expected the field `context` to be an array in the JSON data but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

ParseRequest.RequiredProperties = ["text"];

/**
 * list of concept types that should be captured
 * @member {Array.<module:model/ParseRequest.ConceptTypesEnum>} concept_types
 */
ParseRequest.prototype['concept_types'] = undefined;

/**
 * ordered list of ids of present symptoms that were already captured and can be used as context
 * @member {Array.<String>} context
 */
ParseRequest.prototype['context'] = undefined;

/**
 * correct spelling of input text before proper analysis
 * @member {Boolean} correct_spelling
 */
ParseRequest.prototype['correct_spelling'] = undefined;

/**
 * include tokenization details in output
 * @member {Boolean} include_tokens
 */
ParseRequest.prototype['include_tokens'] = undefined;

/**
 * user text to process
 * @member {String} text
 */
ParseRequest.prototype['text'] = undefined;





/**
 * Allowed values for the <code>conceptTypes</code> property.
 * @enum {String}
 * @readonly
 */
ParseRequest['ConceptTypesEnum'] = {

    /**
     * value: "symptom"
     * @const
     */
    "symptom": "symptom",

    /**
     * value: "risk_factor"
     * @const
     */
    "risk_factor": "risk_factor"
};



export default ParseRequest;

