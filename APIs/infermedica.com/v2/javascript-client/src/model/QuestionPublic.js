/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuestionItemPublic from './QuestionItemPublic';

/**
 * The QuestionPublic model module.
 * @module model/QuestionPublic
 * @version v2
 */
class QuestionPublic {
    /**
     * Constructs a new <code>QuestionPublic</code>.
     * @alias module:model/QuestionPublic
     * @param items {Array.<module:model/QuestionItemPublic>} one or more observations to evaluate
     * @param text {String} question text
     */
    constructor(items, text) { 
        
        QuestionPublic.initialize(this, items, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items, text) { 
        obj['items'] = items;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>QuestionPublic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionPublic} obj Optional instance to populate.
     * @return {module:model/QuestionPublic} The populated <code>QuestionPublic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionPublic();

            if (data.hasOwnProperty('extras')) {
                obj['extras'] = ApiClient.convertToType(data['extras'], {'String': Object});
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [QuestionItemPublic]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionPublic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionPublic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuestionPublic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                QuestionItemPublic.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

QuestionPublic.RequiredProperties = ["items", "text"];

/**
 * additional content, like images or HTML
 * @member {Object.<String, Object>} extras
 */
QuestionPublic.prototype['extras'] = undefined;

/**
 * one or more observations to evaluate
 * @member {Array.<module:model/QuestionItemPublic>} items
 */
QuestionPublic.prototype['items'] = undefined;

/**
 * question text
 * @member {String} text
 */
QuestionPublic.prototype['text'] = undefined;

/**
 * @member {module:model/QuestionPublic.TypeEnum} type
 */
QuestionPublic.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
QuestionPublic['TypeEnum'] = {

    /**
     * value: "single"
     * @const
     */
    "single": "single",

    /**
     * value: "group_single"
     * @const
     */
    "group_single": "group_single",

    /**
     * value: "group_multiple"
     * @const
     */
    "group_multiple": "group_multiple"
};



export default QuestionPublic;

