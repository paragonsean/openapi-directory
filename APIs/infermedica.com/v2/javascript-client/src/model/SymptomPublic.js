/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SymptomPublic model module.
 * @module model/SymptomPublic
 * @version v2
 */
class SymptomPublic {
    /**
     * Constructs a new <code>SymptomPublic</code>.
     * @alias module:model/SymptomPublic
     * @param id {String} 
     * @param name {String} 
     * @param sexFilter {module:model/SymptomPublic.SexFilterEnum} 
     */
    constructor(id, name, sexFilter) { 
        
        SymptomPublic.initialize(this, id, name, sexFilter);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, sexFilter) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['sex_filter'] = sexFilter;
    }

    /**
     * Constructs a <code>SymptomPublic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SymptomPublic} obj Optional instance to populate.
     * @return {module:model/SymptomPublic} The populated <code>SymptomPublic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SymptomPublic();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], Object);
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('extras')) {
                obj['extras'] = ApiClient.convertToType(data['extras'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image_source')) {
                obj['image_source'] = ApiClient.convertToType(data['image_source'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'String');
            }
            if (data.hasOwnProperty('parent_relation')) {
                obj['parent_relation'] = ApiClient.convertToType(data['parent_relation'], 'String');
            }
            if (data.hasOwnProperty('sex_filter')) {
                obj['sex_filter'] = ApiClient.convertToType(data['sex_filter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SymptomPublic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SymptomPublic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SymptomPublic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image_source'] && !(typeof data['image_source'] === 'string' || data['image_source'] instanceof String)) {
            throw new Error("Expected the field `image_source` to be a primitive type in the JSON string but got " + data['image_source']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parent_id'] && !(typeof data['parent_id'] === 'string' || data['parent_id'] instanceof String)) {
            throw new Error("Expected the field `parent_id` to be a primitive type in the JSON string but got " + data['parent_id']);
        }
        // ensure the json data is a string
        if (data['parent_relation'] && !(typeof data['parent_relation'] === 'string' || data['parent_relation'] instanceof String)) {
            throw new Error("Expected the field `parent_relation` to be a primitive type in the JSON string but got " + data['parent_relation']);
        }
        // ensure the json data is a string
        if (data['sex_filter'] && !(typeof data['sex_filter'] === 'string' || data['sex_filter'] instanceof String)) {
            throw new Error("Expected the field `sex_filter` to be a primitive type in the JSON string but got " + data['sex_filter']);
        }

        return true;
    }


}

SymptomPublic.RequiredProperties = ["id", "name", "sex_filter"];

/**
 * @member {String} category
 */
SymptomPublic.prototype['category'] = undefined;

/**
 * list of child symptoms
 * @member {Object} children
 */
SymptomPublic.prototype['children'] = undefined;

/**
 * @member {String} common_name
 */
SymptomPublic.prototype['common_name'] = undefined;

/**
 * additional content, like custom properties or images
 * @member {Object.<String, Object>} extras
 */
SymptomPublic.prototype['extras'] = undefined;

/**
 * @member {String} id
 */
SymptomPublic.prototype['id'] = undefined;

/**
 * @member {String} image_source
 */
SymptomPublic.prototype['image_source'] = undefined;

/**
 * @member {String} image_url
 */
SymptomPublic.prototype['image_url'] = undefined;

/**
 * @member {String} name
 */
SymptomPublic.prototype['name'] = undefined;

/**
 * id of parent symptom
 * @member {String} parent_id
 */
SymptomPublic.prototype['parent_id'] = undefined;

/**
 * type of relation with parent symptom
 * @member {module:model/SymptomPublic.ParentRelationEnum} parent_relation
 */
SymptomPublic.prototype['parent_relation'] = undefined;

/**
 * @member {module:model/SymptomPublic.SexFilterEnum} sex_filter
 */
SymptomPublic.prototype['sex_filter'] = undefined;





/**
 * Allowed values for the <code>parent_relation</code> property.
 * @enum {String}
 * @readonly
 */
SymptomPublic['ParentRelationEnum'] = {

    /**
     * value: "base"
     * @const
     */
    "base": "base",

    /**
     * value: "duration"
     * @const
     */
    "duration": "duration",

    /**
     * value: "severity"
     * @const
     */
    "severity": "severity",

    /**
     * value: "character"
     * @const
     */
    "character": "character",

    /**
     * value: "exacerbating_factor"
     * @const
     */
    "exacerbating_factor": "exacerbating_factor",

    /**
     * value: "diminishing_factor"
     * @const
     */
    "diminishing_factor": "diminishing_factor",

    /**
     * value: "location"
     * @const
     */
    "location": "location",

    /**
     * value: "radiation"
     * @const
     */
    "radiation": "radiation"
};


/**
 * Allowed values for the <code>sex_filter</code> property.
 * @enum {String}
 * @readonly
 */
SymptomPublic['SexFilterEnum'] = {

    /**
     * value: "both"
     * @const
     */
    "both": "both",

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female"
};



export default SymptomPublic;

