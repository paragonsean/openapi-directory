/**
 * Infermedica API
 * Empower your healthcare services with intelligent diagnostic insights of Infermedica API.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObservationMention model module.
 * @module model/ObservationMention
 * @version v2
 */
class ObservationMention {
    /**
     * Constructs a new <code>ObservationMention</code>.
     * @alias module:model/ObservationMention
     * @param choiceId {module:model/ObservationMention.ChoiceIdEnum} 
     * @param headPosition {Number} 
     * @param id {String} observation id
     * @param name {String} observation name
     * @param orth {String} 
     * @param positions {Array.<Number>} 
     */
    constructor(choiceId, headPosition, id, name, orth, positions) { 
        
        ObservationMention.initialize(this, choiceId, headPosition, id, name, orth, positions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, choiceId, headPosition, id, name, orth, positions) { 
        obj['choice_id'] = choiceId;
        obj['head_position'] = headPosition;
        obj['id'] = id;
        obj['name'] = name;
        obj['orth'] = orth;
        obj['positions'] = positions;
    }

    /**
     * Constructs a <code>ObservationMention</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObservationMention} obj Optional instance to populate.
     * @return {module:model/ObservationMention} The populated <code>ObservationMention</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObservationMention();

            if (data.hasOwnProperty('choice_id')) {
                obj['choice_id'] = ApiClient.convertToType(data['choice_id'], 'String');
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('head_position')) {
                obj['head_position'] = ApiClient.convertToType(data['head_position'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orth')) {
                obj['orth'] = ApiClient.convertToType(data['orth'], 'String');
            }
            if (data.hasOwnProperty('positions')) {
                obj['positions'] = ApiClient.convertToType(data['positions'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObservationMention</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObservationMention</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObservationMention.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['choice_id'] && !(typeof data['choice_id'] === 'string' || data['choice_id'] instanceof String)) {
            throw new Error("Expected the field `choice_id` to be a primitive type in the JSON string but got " + data['choice_id']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orth'] && !(typeof data['orth'] === 'string' || data['orth'] instanceof String)) {
            throw new Error("Expected the field `orth` to be a primitive type in the JSON string but got " + data['orth']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['positions'])) {
            throw new Error("Expected the field `positions` to be an array in the JSON data but got " + data['positions']);
        }

        return true;
    }


}

ObservationMention.RequiredProperties = ["choice_id", "head_position", "id", "name", "orth", "positions"];

/**
 * @member {module:model/ObservationMention.ChoiceIdEnum} choice_id
 */
ObservationMention.prototype['choice_id'] = undefined;

/**
 * observation common name
 * @member {String} common_name
 */
ObservationMention.prototype['common_name'] = undefined;

/**
 * @member {Number} head_position
 */
ObservationMention.prototype['head_position'] = undefined;

/**
 * observation id
 * @member {String} id
 */
ObservationMention.prototype['id'] = undefined;

/**
 * observation name
 * @member {String} name
 */
ObservationMention.prototype['name'] = undefined;

/**
 * @member {String} orth
 */
ObservationMention.prototype['orth'] = undefined;

/**
 * @member {Array.<Number>} positions
 */
ObservationMention.prototype['positions'] = undefined;





/**
 * Allowed values for the <code>choice_id</code> property.
 * @enum {String}
 * @readonly
 */
ObservationMention['ChoiceIdEnum'] = {

    /**
     * value: "present"
     * @const
     */
    "present": "present",

    /**
     * value: "absent"
     * @const
     */
    "absent": "absent",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default ObservationMention;

