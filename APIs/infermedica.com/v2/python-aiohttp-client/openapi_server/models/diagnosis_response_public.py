# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_probability_public import ConditionProbabilityPublic
from openapi_server.models.question_public import QuestionPublic
from openapi_server import util


class DiagnosisResponsePublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[ConditionProbabilityPublic]=None, extras: Dict[str, object]=None, question: QuestionPublic=None, should_stop: bool=None):
        """DiagnosisResponsePublic - a model defined in OpenAPI

        :param conditions: The conditions of this DiagnosisResponsePublic.
        :param extras: The extras of this DiagnosisResponsePublic.
        :param question: The question of this DiagnosisResponsePublic.
        :param should_stop: The should_stop of this DiagnosisResponsePublic.
        """
        self.openapi_types = {
            'conditions': List[ConditionProbabilityPublic],
            'extras': Dict[str, object],
            'question': QuestionPublic,
            'should_stop': bool
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'extras': 'extras',
            'question': 'question',
            'should_stop': 'should_stop'
        }

        self._conditions = conditions
        self._extras = extras
        self._question = question
        self._should_stop = should_stop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosisResponsePublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosisResponse_Public of this DiagnosisResponsePublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this DiagnosisResponsePublic.


        :return: The conditions of this DiagnosisResponsePublic.
        :rtype: List[ConditionProbabilityPublic]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this DiagnosisResponsePublic.


        :param conditions: The conditions of this DiagnosisResponsePublic.
        :type conditions: List[ConditionProbabilityPublic]
        """

        self._conditions = conditions

    @property
    def extras(self):
        """Gets the extras of this DiagnosisResponsePublic.


        :return: The extras of this DiagnosisResponsePublic.
        :rtype: Dict[str, object]
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this DiagnosisResponsePublic.


        :param extras: The extras of this DiagnosisResponsePublic.
        :type extras: Dict[str, object]
        """

        self._extras = extras

    @property
    def question(self):
        """Gets the question of this DiagnosisResponsePublic.


        :return: The question of this DiagnosisResponsePublic.
        :rtype: QuestionPublic
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this DiagnosisResponsePublic.


        :param question: The question of this DiagnosisResponsePublic.
        :type question: QuestionPublic
        """

        self._question = question

    @property
    def should_stop(self):
        """Gets the should_stop of this DiagnosisResponsePublic.


        :return: The should_stop of this DiagnosisResponsePublic.
        :rtype: bool
        """
        return self._should_stop

    @should_stop.setter
    def should_stop(self, should_stop):
        """Sets the should_stop of this DiagnosisResponsePublic.


        :param should_stop: The should_stop of this DiagnosisResponsePublic.
        :type should_stop: bool
        """

        self._should_stop = should_stop
