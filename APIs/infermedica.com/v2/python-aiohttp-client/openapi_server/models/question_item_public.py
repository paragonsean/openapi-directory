# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.choice_public import ChoicePublic
from openapi_server import util


class QuestionItemPublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choices: List[ChoicePublic]=None, id: str=None, name: str=None):
        """QuestionItemPublic - a model defined in OpenAPI

        :param choices: The choices of this QuestionItemPublic.
        :param id: The id of this QuestionItemPublic.
        :param name: The name of this QuestionItemPublic.
        """
        self.openapi_types = {
            'choices': List[ChoicePublic],
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'choices': 'choices',
            'id': 'id',
            'name': 'name'
        }

        self._choices = choices
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionItemPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuestionItem_Public of this QuestionItemPublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choices(self):
        """Gets the choices of this QuestionItemPublic.

        list of available answer choices

        :return: The choices of this QuestionItemPublic.
        :rtype: List[ChoicePublic]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this QuestionItemPublic.

        list of available answer choices

        :param choices: The choices of this QuestionItemPublic.
        :type choices: List[ChoicePublic]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")

        self._choices = choices

    @property
    def id(self):
        """Gets the id of this QuestionItemPublic.

        observation id

        :return: The id of this QuestionItemPublic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionItemPublic.

        observation id

        :param id: The id of this QuestionItemPublic.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this QuestionItemPublic.

        name or alias of observation

        :return: The name of this QuestionItemPublic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuestionItemPublic.

        name or alias of observation

        :param name: The name of this QuestionItemPublic.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
