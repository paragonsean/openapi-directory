# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Evidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice_id: str=None, id: str=None, observed_at: str=None, source: str=None):
        """Evidence - a model defined in OpenAPI

        :param choice_id: The choice_id of this Evidence.
        :param id: The id of this Evidence.
        :param observed_at: The observed_at of this Evidence.
        :param source: The source of this Evidence.
        """
        self.openapi_types = {
            'choice_id': str,
            'id': str,
            'observed_at': str,
            'source': str
        }

        self.attribute_map = {
            'choice_id': 'choice_id',
            'id': 'id',
            'observed_at': 'observed_at',
            'source': 'source'
        }

        self._choice_id = choice_id
        self._id = id
        self._observed_at = observed_at
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Evidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Evidence of this Evidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice_id(self):
        """Gets the choice_id of this Evidence.


        :return: The choice_id of this Evidence.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this Evidence.


        :param choice_id: The choice_id of this Evidence.
        :type choice_id: str
        """
        allowed_values = ["present", "absent", "unknown"]  # noqa: E501
        if choice_id not in allowed_values:
            raise ValueError(
                "Invalid value for `choice_id` ({0}), must be one of {1}"
                .format(choice_id, allowed_values)
            )

        self._choice_id = choice_id

    @property
    def id(self):
        """Gets the id of this Evidence.

        id of observation or condition

        :return: The id of this Evidence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Evidence.

        id of observation or condition

        :param id: The id of this Evidence.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def observed_at(self):
        """Gets the observed_at of this Evidence.

        time when evidence was observed in ISO 8601 format

        :return: The observed_at of this Evidence.
        :rtype: str
        """
        return self._observed_at

    @observed_at.setter
    def observed_at(self, observed_at):
        """Sets the observed_at of this Evidence.

        time when evidence was observed in ISO 8601 format

        :param observed_at: The observed_at of this Evidence.
        :type observed_at: str
        """

        self._observed_at = observed_at

    @property
    def source(self):
        """Gets the source of this Evidence.

        Flag describing evidence origin

        :return: The source of this Evidence.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Evidence.

        Flag describing evidence origin

        :param source: The source of this Evidence.
        :type source: str
        """
        allowed_values = ["initial", "suggest", "predefined", "red_flags"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
