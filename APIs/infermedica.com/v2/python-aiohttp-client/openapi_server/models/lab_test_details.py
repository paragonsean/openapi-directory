# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lab_test_result_details import LabTestResultDetails
from openapi_server import util


class LabTestDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, common_name: str=None, id: str=None, name: str=None, results: List[LabTestResultDetails]=None):
        """LabTestDetails - a model defined in OpenAPI

        :param category: The category of this LabTestDetails.
        :param common_name: The common_name of this LabTestDetails.
        :param id: The id of this LabTestDetails.
        :param name: The name of this LabTestDetails.
        :param results: The results of this LabTestDetails.
        """
        self.openapi_types = {
            'category': str,
            'common_name': str,
            'id': str,
            'name': str,
            'results': List[LabTestResultDetails]
        }

        self.attribute_map = {
            'category': 'category',
            'common_name': 'common_name',
            'id': 'id',
            'name': 'name',
            'results': 'results'
        }

        self._category = category
        self._common_name = common_name
        self._id = id
        self._name = name
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabTestDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabTest_Details of this LabTestDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this LabTestDetails.


        :return: The category of this LabTestDetails.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LabTestDetails.


        :param category: The category of this LabTestDetails.
        :type category: str
        """

        self._category = category

    @property
    def common_name(self):
        """Gets the common_name of this LabTestDetails.


        :return: The common_name of this LabTestDetails.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this LabTestDetails.


        :param common_name: The common_name of this LabTestDetails.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def id(self):
        """Gets the id of this LabTestDetails.


        :return: The id of this LabTestDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabTestDetails.


        :param id: The id of this LabTestDetails.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this LabTestDetails.


        :return: The name of this LabTestDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabTestDetails.


        :param name: The name of this LabTestDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def results(self):
        """Gets the results of this LabTestDetails.


        :return: The results of this LabTestDetails.
        :rtype: List[LabTestResultDetails]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this LabTestDetails.


        :param results: The results of this LabTestDetails.
        :type results: List[LabTestResultDetails]
        """

        self._results = results
