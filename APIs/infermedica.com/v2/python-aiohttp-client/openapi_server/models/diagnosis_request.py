# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evidence import Evidence
from openapi_server import util


class DiagnosisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: object=None, evaluated_at: str=None, evidence: List[Evidence]=None, extras: Dict[str, object]=None, sex: str=None):
        """DiagnosisRequest - a model defined in OpenAPI

        :param age: The age of this DiagnosisRequest.
        :param evaluated_at: The evaluated_at of this DiagnosisRequest.
        :param evidence: The evidence of this DiagnosisRequest.
        :param extras: The extras of this DiagnosisRequest.
        :param sex: The sex of this DiagnosisRequest.
        """
        self.openapi_types = {
            'age': object,
            'evaluated_at': str,
            'evidence': List[Evidence],
            'extras': Dict[str, object],
            'sex': str
        }

        self.attribute_map = {
            'age': 'age',
            'evaluated_at': 'evaluated_at',
            'evidence': 'evidence',
            'extras': 'extras',
            'sex': 'sex'
        }

        self._age = age
        self._evaluated_at = evaluated_at
        self._evidence = evidence
        self._extras = extras
        self._sex = sex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosisRequest of this DiagnosisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this DiagnosisRequest.


        :return: The age of this DiagnosisRequest.
        :rtype: object
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this DiagnosisRequest.


        :param age: The age of this DiagnosisRequest.
        :type age: object
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")

        self._age = age

    @property
    def evaluated_at(self):
        """Gets the evaluated_at of this DiagnosisRequest.

        time when diagnosis was evaluated in ISO 8601 format

        :return: The evaluated_at of this DiagnosisRequest.
        :rtype: str
        """
        return self._evaluated_at

    @evaluated_at.setter
    def evaluated_at(self, evaluated_at):
        """Sets the evaluated_at of this DiagnosisRequest.

        time when diagnosis was evaluated in ISO 8601 format

        :param evaluated_at: The evaluated_at of this DiagnosisRequest.
        :type evaluated_at: str
        """

        self._evaluated_at = evaluated_at

    @property
    def evidence(self):
        """Gets the evidence of this DiagnosisRequest.


        :return: The evidence of this DiagnosisRequest.
        :rtype: List[Evidence]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this DiagnosisRequest.


        :param evidence: The evidence of this DiagnosisRequest.
        :type evidence: List[Evidence]
        """

        self._evidence = evidence

    @property
    def extras(self):
        """Gets the extras of this DiagnosisRequest.


        :return: The extras of this DiagnosisRequest.
        :rtype: Dict[str, object]
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this DiagnosisRequest.


        :param extras: The extras of this DiagnosisRequest.
        :type extras: Dict[str, object]
        """

        self._extras = extras

    @property
    def sex(self):
        """Gets the sex of this DiagnosisRequest.


        :return: The sex of this DiagnosisRequest.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this DiagnosisRequest.


        :param sex: The sex of this DiagnosisRequest.
        :type sex: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if sex not in allowed_values:
            raise ValueError(
                "Invalid value for `sex` ({0}), must be one of {1}"
                .format(sex, allowed_values)
            )

        self._sex = sex
