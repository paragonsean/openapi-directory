# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.serious_observation import SeriousObservation
from openapi_server import util


class TriageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, root_cause: str=None, serious: list[SeriousObservation]=None, teleconsultation_applicable: bool=None, triage_level: str=None):
        """TriageResponse - a model defined in OpenAPI

        :param root_cause: The root_cause of this TriageResponse.
        :param serious: The serious of this TriageResponse.
        :param teleconsultation_applicable: The teleconsultation_applicable of this TriageResponse.
        :param triage_level: The triage_level of this TriageResponse.
        """
        self.openapi_types = {
            'root_cause': str,
            'serious': list[SeriousObservation],
            'teleconsultation_applicable': bool,
            'triage_level': str
        }

        self.attribute_map = {
            'root_cause': 'root_cause',
            'serious': 'serious',
            'teleconsultation_applicable': 'teleconsultation_applicable',
            'triage_level': 'triage_level'
        }

        self._root_cause = root_cause
        self._serious = serious
        self._teleconsultation_applicable = teleconsultation_applicable
        self._triage_level = triage_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriageResponse of this TriageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def root_cause(self):
        """Gets the root_cause of this TriageResponse.


        :return: The root_cause of this TriageResponse.
        :rtype: str
        """
        return self._root_cause

    @root_cause.setter
    def root_cause(self, root_cause):
        """Sets the root_cause of this TriageResponse.


        :param root_cause: The root_cause of this TriageResponse.
        :type root_cause: str
        """
        allowed_values = ["r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12"]  # noqa: E501
        if root_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `root_cause` ({0}), must be one of {1}"
                .format(root_cause, allowed_values)
            )

        self._root_cause = root_cause

    @property
    def serious(self):
        """Gets the serious of this TriageResponse.


        :return: The serious of this TriageResponse.
        :rtype: list[SeriousObservation]
        """
        return self._serious

    @serious.setter
    def serious(self, serious):
        """Sets the serious of this TriageResponse.


        :param serious: The serious of this TriageResponse.
        :type serious: list[SeriousObservation]
        """

        self._serious = serious

    @property
    def teleconsultation_applicable(self):
        """Gets the teleconsultation_applicable of this TriageResponse.


        :return: The teleconsultation_applicable of this TriageResponse.
        :rtype: bool
        """
        return self._teleconsultation_applicable

    @teleconsultation_applicable.setter
    def teleconsultation_applicable(self, teleconsultation_applicable):
        """Sets the teleconsultation_applicable of this TriageResponse.


        :param teleconsultation_applicable: The teleconsultation_applicable of this TriageResponse.
        :type teleconsultation_applicable: bool
        """

        self._teleconsultation_applicable = teleconsultation_applicable

    @property
    def triage_level(self):
        """Gets the triage_level of this TriageResponse.


        :return: The triage_level of this TriageResponse.
        :rtype: str
        """
        return self._triage_level

    @triage_level.setter
    def triage_level(self, triage_level):
        """Sets the triage_level of this TriageResponse.


        :param triage_level: The triage_level of this TriageResponse.
        :type triage_level: str
        """
        allowed_values = ["emergency_ambulance", "emergency", "consultation_24", "consultation", "self_care"]  # noqa: E501
        if triage_level not in allowed_values:
            raise ValueError(
                "Invalid value for `triage_level` ({0}), must be one of {1}"
                .format(triage_level, allowed_values)
            )

        self._triage_level = triage_level
