# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.explanation_evidence import ExplanationEvidence
from openapi_server import util


class ExplanationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflicting_evidence: List[ExplanationEvidence]=None, supporting_evidence: List[ExplanationEvidence]=None, unconfirmed_evidence: List[ExplanationEvidence]=None):
        """ExplanationResponse - a model defined in OpenAPI

        :param conflicting_evidence: The conflicting_evidence of this ExplanationResponse.
        :param supporting_evidence: The supporting_evidence of this ExplanationResponse.
        :param unconfirmed_evidence: The unconfirmed_evidence of this ExplanationResponse.
        """
        self.openapi_types = {
            'conflicting_evidence': List[ExplanationEvidence],
            'supporting_evidence': List[ExplanationEvidence],
            'unconfirmed_evidence': List[ExplanationEvidence]
        }

        self.attribute_map = {
            'conflicting_evidence': 'conflicting_evidence',
            'supporting_evidence': 'supporting_evidence',
            'unconfirmed_evidence': 'unconfirmed_evidence'
        }

        self._conflicting_evidence = conflicting_evidence
        self._supporting_evidence = supporting_evidence
        self._unconfirmed_evidence = unconfirmed_evidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExplanationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExplanationResponse of this ExplanationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflicting_evidence(self):
        """Gets the conflicting_evidence of this ExplanationResponse.

        conflicting evidence

        :return: The conflicting_evidence of this ExplanationResponse.
        :rtype: List[ExplanationEvidence]
        """
        return self._conflicting_evidence

    @conflicting_evidence.setter
    def conflicting_evidence(self, conflicting_evidence):
        """Sets the conflicting_evidence of this ExplanationResponse.

        conflicting evidence

        :param conflicting_evidence: The conflicting_evidence of this ExplanationResponse.
        :type conflicting_evidence: List[ExplanationEvidence]
        """
        if conflicting_evidence is None:
            raise ValueError("Invalid value for `conflicting_evidence`, must not be `None`")

        self._conflicting_evidence = conflicting_evidence

    @property
    def supporting_evidence(self):
        """Gets the supporting_evidence of this ExplanationResponse.

        supporting evidence

        :return: The supporting_evidence of this ExplanationResponse.
        :rtype: List[ExplanationEvidence]
        """
        return self._supporting_evidence

    @supporting_evidence.setter
    def supporting_evidence(self, supporting_evidence):
        """Sets the supporting_evidence of this ExplanationResponse.

        supporting evidence

        :param supporting_evidence: The supporting_evidence of this ExplanationResponse.
        :type supporting_evidence: List[ExplanationEvidence]
        """
        if supporting_evidence is None:
            raise ValueError("Invalid value for `supporting_evidence`, must not be `None`")

        self._supporting_evidence = supporting_evidence

    @property
    def unconfirmed_evidence(self):
        """Gets the unconfirmed_evidence of this ExplanationResponse.

        unconfirmed evidence

        :return: The unconfirmed_evidence of this ExplanationResponse.
        :rtype: List[ExplanationEvidence]
        """
        return self._unconfirmed_evidence

    @unconfirmed_evidence.setter
    def unconfirmed_evidence(self, unconfirmed_evidence):
        """Sets the unconfirmed_evidence of this ExplanationResponse.

        unconfirmed evidence

        :param unconfirmed_evidence: The unconfirmed_evidence of this ExplanationResponse.
        :type unconfirmed_evidence: List[ExplanationEvidence]
        """
        if unconfirmed_evidence is None:
            raise ValueError("Invalid value for `unconfirmed_evidence`, must not be `None`")

        self._unconfirmed_evidence = unconfirmed_evidence
