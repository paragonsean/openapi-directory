# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SymptomDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, children: object=None, common_name: str=None, extras: Dict[str, object]=None, id: str=None, image_source: str=None, image_url: str=None, name: str=None, parent_id: str=None, parent_relation: str=None, question: str=None, sex_filter: str=None):
        """SymptomDetails - a model defined in OpenAPI

        :param category: The category of this SymptomDetails.
        :param children: The children of this SymptomDetails.
        :param common_name: The common_name of this SymptomDetails.
        :param extras: The extras of this SymptomDetails.
        :param id: The id of this SymptomDetails.
        :param image_source: The image_source of this SymptomDetails.
        :param image_url: The image_url of this SymptomDetails.
        :param name: The name of this SymptomDetails.
        :param parent_id: The parent_id of this SymptomDetails.
        :param parent_relation: The parent_relation of this SymptomDetails.
        :param question: The question of this SymptomDetails.
        :param sex_filter: The sex_filter of this SymptomDetails.
        """
        self.openapi_types = {
            'category': str,
            'children': object,
            'common_name': str,
            'extras': Dict[str, object],
            'id': str,
            'image_source': str,
            'image_url': str,
            'name': str,
            'parent_id': str,
            'parent_relation': str,
            'question': str,
            'sex_filter': str
        }

        self.attribute_map = {
            'category': 'category',
            'children': 'children',
            'common_name': 'common_name',
            'extras': 'extras',
            'id': 'id',
            'image_source': 'image_source',
            'image_url': 'image_url',
            'name': 'name',
            'parent_id': 'parent_id',
            'parent_relation': 'parent_relation',
            'question': 'question',
            'sex_filter': 'sex_filter'
        }

        self._category = category
        self._children = children
        self._common_name = common_name
        self._extras = extras
        self._id = id
        self._image_source = image_source
        self._image_url = image_url
        self._name = name
        self._parent_id = parent_id
        self._parent_relation = parent_relation
        self._question = question
        self._sex_filter = sex_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymptomDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Symptom_Details of this SymptomDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this SymptomDetails.


        :return: The category of this SymptomDetails.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SymptomDetails.


        :param category: The category of this SymptomDetails.
        :type category: str
        """

        self._category = category

    @property
    def children(self):
        """Gets the children of this SymptomDetails.

        list of child symptoms

        :return: The children of this SymptomDetails.
        :rtype: object
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this SymptomDetails.

        list of child symptoms

        :param children: The children of this SymptomDetails.
        :type children: object
        """

        self._children = children

    @property
    def common_name(self):
        """Gets the common_name of this SymptomDetails.


        :return: The common_name of this SymptomDetails.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this SymptomDetails.


        :param common_name: The common_name of this SymptomDetails.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def extras(self):
        """Gets the extras of this SymptomDetails.

        additional content, like custom properties or images

        :return: The extras of this SymptomDetails.
        :rtype: Dict[str, object]
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this SymptomDetails.

        additional content, like custom properties or images

        :param extras: The extras of this SymptomDetails.
        :type extras: Dict[str, object]
        """

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this SymptomDetails.


        :return: The id of this SymptomDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SymptomDetails.


        :param id: The id of this SymptomDetails.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_source(self):
        """Gets the image_source of this SymptomDetails.


        :return: The image_source of this SymptomDetails.
        :rtype: str
        """
        return self._image_source

    @image_source.setter
    def image_source(self, image_source):
        """Sets the image_source of this SymptomDetails.


        :param image_source: The image_source of this SymptomDetails.
        :type image_source: str
        """

        self._image_source = image_source

    @property
    def image_url(self):
        """Gets the image_url of this SymptomDetails.


        :return: The image_url of this SymptomDetails.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this SymptomDetails.


        :param image_url: The image_url of this SymptomDetails.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this SymptomDetails.


        :return: The name of this SymptomDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SymptomDetails.


        :param name: The name of this SymptomDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this SymptomDetails.

        id of parent symptom

        :return: The parent_id of this SymptomDetails.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SymptomDetails.

        id of parent symptom

        :param parent_id: The parent_id of this SymptomDetails.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def parent_relation(self):
        """Gets the parent_relation of this SymptomDetails.

        type of relation with parent symptom

        :return: The parent_relation of this SymptomDetails.
        :rtype: str
        """
        return self._parent_relation

    @parent_relation.setter
    def parent_relation(self, parent_relation):
        """Sets the parent_relation of this SymptomDetails.

        type of relation with parent symptom

        :param parent_relation: The parent_relation of this SymptomDetails.
        :type parent_relation: str
        """
        allowed_values = ["base", "duration", "severity", "character", "exacerbating_factor", "diminishing_factor", "location", "radiation"]  # noqa: E501
        if parent_relation not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_relation` ({0}), must be one of {1}"
                .format(parent_relation, allowed_values)
            )

        self._parent_relation = parent_relation

    @property
    def question(self):
        """Gets the question of this SymptomDetails.

        only available in object details, not in listing

        :return: The question of this SymptomDetails.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this SymptomDetails.

        only available in object details, not in listing

        :param question: The question of this SymptomDetails.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question

    @property
    def sex_filter(self):
        """Gets the sex_filter of this SymptomDetails.


        :return: The sex_filter of this SymptomDetails.
        :rtype: str
        """
        return self._sex_filter

    @sex_filter.setter
    def sex_filter(self, sex_filter):
        """Sets the sex_filter of this SymptomDetails.


        :param sex_filter: The sex_filter of this SymptomDetails.
        :type sex_filter: str
        """
        allowed_values = ["both", "male", "female"]  # noqa: E501
        if sex_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `sex_filter` ({0}), must be one of {1}"
                .format(sex_filter, allowed_values)
            )

        self._sex_filter = sex_filter
