# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionProbabilityPublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_name: str=None, id: str=None, name: str=None, probability: float=None):
        """ConditionProbabilityPublic - a model defined in OpenAPI

        :param common_name: The common_name of this ConditionProbabilityPublic.
        :param id: The id of this ConditionProbabilityPublic.
        :param name: The name of this ConditionProbabilityPublic.
        :param probability: The probability of this ConditionProbabilityPublic.
        """
        self.openapi_types = {
            'common_name': str,
            'id': str,
            'name': str,
            'probability': float
        }

        self.attribute_map = {
            'common_name': 'common_name',
            'id': 'id',
            'name': 'name',
            'probability': 'probability'
        }

        self._common_name = common_name
        self._id = id
        self._name = name
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionProbabilityPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionProbability_Public of this ConditionProbabilityPublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_name(self):
        """Gets the common_name of this ConditionProbabilityPublic.

        condition common name

        :return: The common_name of this ConditionProbabilityPublic.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this ConditionProbabilityPublic.

        condition common name

        :param common_name: The common_name of this ConditionProbabilityPublic.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def id(self):
        """Gets the id of this ConditionProbabilityPublic.

        condition id

        :return: The id of this ConditionProbabilityPublic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConditionProbabilityPublic.

        condition id

        :param id: The id of this ConditionProbabilityPublic.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConditionProbabilityPublic.

        condition name

        :return: The name of this ConditionProbabilityPublic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConditionProbabilityPublic.

        condition name

        :param name: The name of this ConditionProbabilityPublic.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def probability(self):
        """Gets the probability of this ConditionProbabilityPublic.


        :return: The probability of this ConditionProbabilityPublic.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this ConditionProbabilityPublic.


        :param probability: The probability of this ConditionProbabilityPublic.
        :type probability: float
        """
        if probability is None:
            raise ValueError("Invalid value for `probability`, must not be `None`")

        self._probability = probability
