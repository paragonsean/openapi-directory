# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concept_types: List[str]=None, context: List[str]=None, correct_spelling: bool=None, include_tokens: bool=None, text: str=None):
        """ParseRequest - a model defined in OpenAPI

        :param concept_types: The concept_types of this ParseRequest.
        :param context: The context of this ParseRequest.
        :param correct_spelling: The correct_spelling of this ParseRequest.
        :param include_tokens: The include_tokens of this ParseRequest.
        :param text: The text of this ParseRequest.
        """
        self.openapi_types = {
            'concept_types': List[str],
            'context': List[str],
            'correct_spelling': bool,
            'include_tokens': bool,
            'text': str
        }

        self.attribute_map = {
            'concept_types': 'concept_types',
            'context': 'context',
            'correct_spelling': 'correct_spelling',
            'include_tokens': 'include_tokens',
            'text': 'text'
        }

        self._concept_types = concept_types
        self._context = context
        self._correct_spelling = correct_spelling
        self._include_tokens = include_tokens
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParseRequest of this ParseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concept_types(self):
        """Gets the concept_types of this ParseRequest.

        list of concept types that should be captured

        :return: The concept_types of this ParseRequest.
        :rtype: List[str]
        """
        return self._concept_types

    @concept_types.setter
    def concept_types(self, concept_types):
        """Sets the concept_types of this ParseRequest.

        list of concept types that should be captured

        :param concept_types: The concept_types of this ParseRequest.
        :type concept_types: List[str]
        """
        allowed_values = ["symptom", "risk_factor"]  # noqa: E501
        if not set(concept_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `concept_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(concept_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._concept_types = concept_types

    @property
    def context(self):
        """Gets the context of this ParseRequest.

        ordered list of ids of present symptoms that were already captured and can be used as context

        :return: The context of this ParseRequest.
        :rtype: List[str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ParseRequest.

        ordered list of ids of present symptoms that were already captured and can be used as context

        :param context: The context of this ParseRequest.
        :type context: List[str]
        """

        self._context = context

    @property
    def correct_spelling(self):
        """Gets the correct_spelling of this ParseRequest.

        correct spelling of input text before proper analysis

        :return: The correct_spelling of this ParseRequest.
        :rtype: bool
        """
        return self._correct_spelling

    @correct_spelling.setter
    def correct_spelling(self, correct_spelling):
        """Sets the correct_spelling of this ParseRequest.

        correct spelling of input text before proper analysis

        :param correct_spelling: The correct_spelling of this ParseRequest.
        :type correct_spelling: bool
        """

        self._correct_spelling = correct_spelling

    @property
    def include_tokens(self):
        """Gets the include_tokens of this ParseRequest.

        include tokenization details in output

        :return: The include_tokens of this ParseRequest.
        :rtype: bool
        """
        return self._include_tokens

    @include_tokens.setter
    def include_tokens(self, include_tokens):
        """Sets the include_tokens of this ParseRequest.

        include tokenization details in output

        :param include_tokens: The include_tokens of this ParseRequest.
        :type include_tokens: bool
        """

        self._include_tokens = include_tokens

    @property
    def text(self):
        """Gets the text of this ParseRequest.

        user text to process

        :return: The text of this ParseRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ParseRequest.

        user text to process

        :param text: The text of this ParseRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
