# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rationale_param import RationaleParam
from openapi_server import util


class RationaleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_params: List[RationaleParam]=None, observation_params: List[RationaleParam]=None, type: str=None):
        """RationaleResponse - a model defined in OpenAPI

        :param condition_params: The condition_params of this RationaleResponse.
        :param observation_params: The observation_params of this RationaleResponse.
        :param type: The type of this RationaleResponse.
        """
        self.openapi_types = {
            'condition_params': List[RationaleParam],
            'observation_params': List[RationaleParam],
            'type': str
        }

        self.attribute_map = {
            'condition_params': 'condition_params',
            'observation_params': 'observation_params',
            'type': 'type'
        }

        self._condition_params = condition_params
        self._observation_params = observation_params
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RationaleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RationaleResponse of this RationaleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_params(self):
        """Gets the condition_params of this RationaleResponse.

        condition params

        :return: The condition_params of this RationaleResponse.
        :rtype: List[RationaleParam]
        """
        return self._condition_params

    @condition_params.setter
    def condition_params(self, condition_params):
        """Sets the condition_params of this RationaleResponse.

        condition params

        :param condition_params: The condition_params of this RationaleResponse.
        :type condition_params: List[RationaleParam]
        """

        self._condition_params = condition_params

    @property
    def observation_params(self):
        """Gets the observation_params of this RationaleResponse.

        observation params

        :return: The observation_params of this RationaleResponse.
        :rtype: List[RationaleParam]
        """
        return self._observation_params

    @observation_params.setter
    def observation_params(self, observation_params):
        """Sets the observation_params of this RationaleResponse.

        observation params

        :param observation_params: The observation_params of this RationaleResponse.
        :type observation_params: List[RationaleParam]
        """

        self._observation_params = observation_params

    @property
    def type(self):
        """Gets the type of this RationaleResponse.

        type

        :return: The type of this RationaleResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RationaleResponse.

        type

        :param type: The type of this RationaleResponse.
        :type type: str
        """
        allowed_values = ["r0", "r1", "r2", "r3", "r4", "r5", "r6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
