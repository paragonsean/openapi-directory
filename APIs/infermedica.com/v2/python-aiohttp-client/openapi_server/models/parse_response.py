# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.observation_mention import ObservationMention
from openapi_server import util


class ParseResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mentions: List[ObservationMention]=None, obvious: bool=None, tokens: List[str]=None):
        """ParseResponse - a model defined in OpenAPI

        :param mentions: The mentions of this ParseResponse.
        :param obvious: The obvious of this ParseResponse.
        :param tokens: The tokens of this ParseResponse.
        """
        self.openapi_types = {
            'mentions': List[ObservationMention],
            'obvious': bool,
            'tokens': List[str]
        }

        self.attribute_map = {
            'mentions': 'mentions',
            'obvious': 'obvious',
            'tokens': 'tokens'
        }

        self._mentions = mentions
        self._obvious = obvious
        self._tokens = tokens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParseResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParseResponse of this ParseResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mentions(self):
        """Gets the mentions of this ParseResponse.

        list of recognized symptom or risk factor mentions

        :return: The mentions of this ParseResponse.
        :rtype: List[ObservationMention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this ParseResponse.

        list of recognized symptom or risk factor mentions

        :param mentions: The mentions of this ParseResponse.
        :type mentions: List[ObservationMention]
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")

        self._mentions = mentions

    @property
    def obvious(self):
        """Gets the obvious of this ParseResponse.

        indicates that entire input text has been parsed successfully and unambiguously

        :return: The obvious of this ParseResponse.
        :rtype: bool
        """
        return self._obvious

    @obvious.setter
    def obvious(self, obvious):
        """Sets the obvious of this ParseResponse.

        indicates that entire input text has been parsed successfully and unambiguously

        :param obvious: The obvious of this ParseResponse.
        :type obvious: bool
        """
        if obvious is None:
            raise ValueError("Invalid value for `obvious`, must not be `None`")

        self._obvious = obvious

    @property
    def tokens(self):
        """Gets the tokens of this ParseResponse.


        :return: The tokens of this ParseResponse.
        :rtype: List[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this ParseResponse.


        :param tokens: The tokens of this ParseResponse.
        :type tokens: List[str]
        """

        self._tokens = tokens
