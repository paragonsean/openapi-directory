# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.question_item_public import QuestionItemPublic
from openapi_server import util


class QuestionPublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extras: Dict[str, object]=None, items: List[QuestionItemPublic]=None, text: str=None, type: str=None):
        """QuestionPublic - a model defined in OpenAPI

        :param extras: The extras of this QuestionPublic.
        :param items: The items of this QuestionPublic.
        :param text: The text of this QuestionPublic.
        :param type: The type of this QuestionPublic.
        """
        self.openapi_types = {
            'extras': Dict[str, object],
            'items': List[QuestionItemPublic],
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'extras': 'extras',
            'items': 'items',
            'text': 'text',
            'type': 'type'
        }

        self._extras = extras
        self._items = items
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Question_Public of this QuestionPublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extras(self):
        """Gets the extras of this QuestionPublic.

        additional content, like images or HTML

        :return: The extras of this QuestionPublic.
        :rtype: Dict[str, object]
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this QuestionPublic.

        additional content, like images or HTML

        :param extras: The extras of this QuestionPublic.
        :type extras: Dict[str, object]
        """

        self._extras = extras

    @property
    def items(self):
        """Gets the items of this QuestionPublic.

        one or more observations to evaluate

        :return: The items of this QuestionPublic.
        :rtype: List[QuestionItemPublic]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this QuestionPublic.

        one or more observations to evaluate

        :param items: The items of this QuestionPublic.
        :type items: List[QuestionItemPublic]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def text(self):
        """Gets the text of this QuestionPublic.

        question text

        :return: The text of this QuestionPublic.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this QuestionPublic.

        question text

        :param text: The text of this QuestionPublic.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this QuestionPublic.


        :return: The type of this QuestionPublic.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuestionPublic.


        :param type: The type of this QuestionPublic.
        :type type: str
        """
        allowed_values = ["single", "group_single", "group_multiple"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
