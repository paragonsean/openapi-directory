# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acuteness: str=None, categories: List[str]=None, common_name: str=None, extras: Dict[str, object]=None, id: str=None, name: str=None, prevalence: str=None, severity: str=None, sex_filter: str=None, triage_level: str=None):
        """ConditionDetails - a model defined in OpenAPI

        :param acuteness: The acuteness of this ConditionDetails.
        :param categories: The categories of this ConditionDetails.
        :param common_name: The common_name of this ConditionDetails.
        :param extras: The extras of this ConditionDetails.
        :param id: The id of this ConditionDetails.
        :param name: The name of this ConditionDetails.
        :param prevalence: The prevalence of this ConditionDetails.
        :param severity: The severity of this ConditionDetails.
        :param sex_filter: The sex_filter of this ConditionDetails.
        :param triage_level: The triage_level of this ConditionDetails.
        """
        self.openapi_types = {
            'acuteness': str,
            'categories': List[str],
            'common_name': str,
            'extras': Dict[str, object],
            'id': str,
            'name': str,
            'prevalence': str,
            'severity': str,
            'sex_filter': str,
            'triage_level': str
        }

        self.attribute_map = {
            'acuteness': 'acuteness',
            'categories': 'categories',
            'common_name': 'common_name',
            'extras': 'extras',
            'id': 'id',
            'name': 'name',
            'prevalence': 'prevalence',
            'severity': 'severity',
            'sex_filter': 'sex_filter',
            'triage_level': 'triage_level'
        }

        self._acuteness = acuteness
        self._categories = categories
        self._common_name = common_name
        self._extras = extras
        self._id = id
        self._name = name
        self._prevalence = prevalence
        self._severity = severity
        self._sex_filter = sex_filter
        self._triage_level = triage_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition_Details of this ConditionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acuteness(self):
        """Gets the acuteness of this ConditionDetails.


        :return: The acuteness of this ConditionDetails.
        :rtype: str
        """
        return self._acuteness

    @acuteness.setter
    def acuteness(self, acuteness):
        """Sets the acuteness of this ConditionDetails.


        :param acuteness: The acuteness of this ConditionDetails.
        :type acuteness: str
        """
        allowed_values = ["chronic", "chronic_with_exacerbations", "acute_potentially_chronic", "acute"]  # noqa: E501
        if acuteness not in allowed_values:
            raise ValueError(
                "Invalid value for `acuteness` ({0}), must be one of {1}"
                .format(acuteness, allowed_values)
            )

        self._acuteness = acuteness

    @property
    def categories(self):
        """Gets the categories of this ConditionDetails.


        :return: The categories of this ConditionDetails.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ConditionDetails.


        :param categories: The categories of this ConditionDetails.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def common_name(self):
        """Gets the common_name of this ConditionDetails.


        :return: The common_name of this ConditionDetails.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this ConditionDetails.


        :param common_name: The common_name of this ConditionDetails.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def extras(self):
        """Gets the extras of this ConditionDetails.

        additional content, like custom properties or images

        :return: The extras of this ConditionDetails.
        :rtype: Dict[str, object]
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this ConditionDetails.

        additional content, like custom properties or images

        :param extras: The extras of this ConditionDetails.
        :type extras: Dict[str, object]
        """

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this ConditionDetails.


        :return: The id of this ConditionDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConditionDetails.


        :param id: The id of this ConditionDetails.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConditionDetails.


        :return: The name of this ConditionDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConditionDetails.


        :param name: The name of this ConditionDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prevalence(self):
        """Gets the prevalence of this ConditionDetails.


        :return: The prevalence of this ConditionDetails.
        :rtype: str
        """
        return self._prevalence

    @prevalence.setter
    def prevalence(self, prevalence):
        """Sets the prevalence of this ConditionDetails.


        :param prevalence: The prevalence of this ConditionDetails.
        :type prevalence: str
        """
        allowed_values = ["very_rare", "rare", "moderate", "common"]  # noqa: E501
        if prevalence not in allowed_values:
            raise ValueError(
                "Invalid value for `prevalence` ({0}), must be one of {1}"
                .format(prevalence, allowed_values)
            )

        self._prevalence = prevalence

    @property
    def severity(self):
        """Gets the severity of this ConditionDetails.


        :return: The severity of this ConditionDetails.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ConditionDetails.


        :param severity: The severity of this ConditionDetails.
        :type severity: str
        """
        allowed_values = ["mild", "moderate", "severe"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def sex_filter(self):
        """Gets the sex_filter of this ConditionDetails.


        :return: The sex_filter of this ConditionDetails.
        :rtype: str
        """
        return self._sex_filter

    @sex_filter.setter
    def sex_filter(self, sex_filter):
        """Sets the sex_filter of this ConditionDetails.


        :param sex_filter: The sex_filter of this ConditionDetails.
        :type sex_filter: str
        """
        allowed_values = ["both", "male", "female"]  # noqa: E501
        if sex_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `sex_filter` ({0}), must be one of {1}"
                .format(sex_filter, allowed_values)
            )

        self._sex_filter = sex_filter

    @property
    def triage_level(self):
        """Gets the triage_level of this ConditionDetails.


        :return: The triage_level of this ConditionDetails.
        :rtype: str
        """
        return self._triage_level

    @triage_level.setter
    def triage_level(self, triage_level):
        """Sets the triage_level of this ConditionDetails.


        :param triage_level: The triage_level of this ConditionDetails.
        :type triage_level: str
        """
        allowed_values = ["emergency_ambulance", "emergency", "consultation_24", "consultation", "self_care"]  # noqa: E501
        if triage_level not in allowed_values:
            raise ValueError(
                "Invalid value for `triage_level` ({0}), must be one of {1}"
                .format(triage_level, allowed_values)
            )

        self._triage_level = triage_level
