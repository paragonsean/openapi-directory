# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObservationMention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice_id: str=None, common_name: str=None, head_position: int=None, id: str=None, name: str=None, orth: str=None, positions: List[int]=None):
        """ObservationMention - a model defined in OpenAPI

        :param choice_id: The choice_id of this ObservationMention.
        :param common_name: The common_name of this ObservationMention.
        :param head_position: The head_position of this ObservationMention.
        :param id: The id of this ObservationMention.
        :param name: The name of this ObservationMention.
        :param orth: The orth of this ObservationMention.
        :param positions: The positions of this ObservationMention.
        """
        self.openapi_types = {
            'choice_id': str,
            'common_name': str,
            'head_position': int,
            'id': str,
            'name': str,
            'orth': str,
            'positions': List[int]
        }

        self.attribute_map = {
            'choice_id': 'choice_id',
            'common_name': 'common_name',
            'head_position': 'head_position',
            'id': 'id',
            'name': 'name',
            'orth': 'orth',
            'positions': 'positions'
        }

        self._choice_id = choice_id
        self._common_name = common_name
        self._head_position = head_position
        self._id = id
        self._name = name
        self._orth = orth
        self._positions = positions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObservationMention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObservationMention of this ObservationMention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice_id(self):
        """Gets the choice_id of this ObservationMention.


        :return: The choice_id of this ObservationMention.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this ObservationMention.


        :param choice_id: The choice_id of this ObservationMention.
        :type choice_id: str
        """
        allowed_values = ["present", "absent", "unknown"]  # noqa: E501
        if choice_id not in allowed_values:
            raise ValueError(
                "Invalid value for `choice_id` ({0}), must be one of {1}"
                .format(choice_id, allowed_values)
            )

        self._choice_id = choice_id

    @property
    def common_name(self):
        """Gets the common_name of this ObservationMention.

        observation common name

        :return: The common_name of this ObservationMention.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this ObservationMention.

        observation common name

        :param common_name: The common_name of this ObservationMention.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def head_position(self):
        """Gets the head_position of this ObservationMention.


        :return: The head_position of this ObservationMention.
        :rtype: int
        """
        return self._head_position

    @head_position.setter
    def head_position(self, head_position):
        """Sets the head_position of this ObservationMention.


        :param head_position: The head_position of this ObservationMention.
        :type head_position: int
        """
        if head_position is None:
            raise ValueError("Invalid value for `head_position`, must not be `None`")

        self._head_position = head_position

    @property
    def id(self):
        """Gets the id of this ObservationMention.

        observation id

        :return: The id of this ObservationMention.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObservationMention.

        observation id

        :param id: The id of this ObservationMention.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ObservationMention.

        observation name

        :return: The name of this ObservationMention.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObservationMention.

        observation name

        :param name: The name of this ObservationMention.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def orth(self):
        """Gets the orth of this ObservationMention.


        :return: The orth of this ObservationMention.
        :rtype: str
        """
        return self._orth

    @orth.setter
    def orth(self, orth):
        """Sets the orth of this ObservationMention.


        :param orth: The orth of this ObservationMention.
        :type orth: str
        """
        if orth is None:
            raise ValueError("Invalid value for `orth`, must not be `None`")

        self._orth = orth

    @property
    def positions(self):
        """Gets the positions of this ObservationMention.


        :return: The positions of this ObservationMention.
        :rtype: List[int]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this ObservationMention.


        :param positions: The positions of this ObservationMention.
        :type positions: List[int]
        """
        if positions is None:
            raise ValueError("Invalid value for `positions`, must not be `None`")

        self._positions = positions
