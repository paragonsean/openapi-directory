# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RiskFactorPublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, common_name: str=None, extras: Dict[str, object]=None, id: str=None, image_source: str=None, image_url: str=None, name: str=None, sex_filter: str=None):
        """RiskFactorPublic - a model defined in OpenAPI

        :param category: The category of this RiskFactorPublic.
        :param common_name: The common_name of this RiskFactorPublic.
        :param extras: The extras of this RiskFactorPublic.
        :param id: The id of this RiskFactorPublic.
        :param image_source: The image_source of this RiskFactorPublic.
        :param image_url: The image_url of this RiskFactorPublic.
        :param name: The name of this RiskFactorPublic.
        :param sex_filter: The sex_filter of this RiskFactorPublic.
        """
        self.openapi_types = {
            'category': str,
            'common_name': str,
            'extras': Dict[str, object],
            'id': str,
            'image_source': str,
            'image_url': str,
            'name': str,
            'sex_filter': str
        }

        self.attribute_map = {
            'category': 'category',
            'common_name': 'common_name',
            'extras': 'extras',
            'id': 'id',
            'image_source': 'image_source',
            'image_url': 'image_url',
            'name': 'name',
            'sex_filter': 'sex_filter'
        }

        self._category = category
        self._common_name = common_name
        self._extras = extras
        self._id = id
        self._image_source = image_source
        self._image_url = image_url
        self._name = name
        self._sex_filter = sex_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RiskFactorPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RiskFactor_Public of this RiskFactorPublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this RiskFactorPublic.


        :return: The category of this RiskFactorPublic.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RiskFactorPublic.


        :param category: The category of this RiskFactorPublic.
        :type category: str
        """

        self._category = category

    @property
    def common_name(self):
        """Gets the common_name of this RiskFactorPublic.


        :return: The common_name of this RiskFactorPublic.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this RiskFactorPublic.


        :param common_name: The common_name of this RiskFactorPublic.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def extras(self):
        """Gets the extras of this RiskFactorPublic.

        additional content, like custom properties or images

        :return: The extras of this RiskFactorPublic.
        :rtype: Dict[str, object]
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this RiskFactorPublic.

        additional content, like custom properties or images

        :param extras: The extras of this RiskFactorPublic.
        :type extras: Dict[str, object]
        """

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this RiskFactorPublic.


        :return: The id of this RiskFactorPublic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RiskFactorPublic.


        :param id: The id of this RiskFactorPublic.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_source(self):
        """Gets the image_source of this RiskFactorPublic.


        :return: The image_source of this RiskFactorPublic.
        :rtype: str
        """
        return self._image_source

    @image_source.setter
    def image_source(self, image_source):
        """Sets the image_source of this RiskFactorPublic.


        :param image_source: The image_source of this RiskFactorPublic.
        :type image_source: str
        """

        self._image_source = image_source

    @property
    def image_url(self):
        """Gets the image_url of this RiskFactorPublic.


        :return: The image_url of this RiskFactorPublic.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this RiskFactorPublic.


        :param image_url: The image_url of this RiskFactorPublic.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this RiskFactorPublic.


        :return: The name of this RiskFactorPublic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RiskFactorPublic.


        :param name: The name of this RiskFactorPublic.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sex_filter(self):
        """Gets the sex_filter of this RiskFactorPublic.


        :return: The sex_filter of this RiskFactorPublic.
        :rtype: str
        """
        return self._sex_filter

    @sex_filter.setter
    def sex_filter(self, sex_filter):
        """Sets the sex_filter of this RiskFactorPublic.


        :param sex_filter: The sex_filter of this RiskFactorPublic.
        :type sex_filter: str
        """
        allowed_values = ["both", "male", "female"]  # noqa: E501
        if sex_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `sex_filter` ({0}), must be one of {1}"
                .format(sex_filter, allowed_values)
            )

        self._sex_filter = sex_filter
