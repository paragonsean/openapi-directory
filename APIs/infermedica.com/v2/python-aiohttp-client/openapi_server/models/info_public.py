# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InfoPublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, conditions_count: int=None, lab_tests_count: int=None, risk_factors_count: int=None, symptoms_count: int=None, updated_at: str=None):
        """InfoPublic - a model defined in OpenAPI

        :param api_version: The api_version of this InfoPublic.
        :param conditions_count: The conditions_count of this InfoPublic.
        :param lab_tests_count: The lab_tests_count of this InfoPublic.
        :param risk_factors_count: The risk_factors_count of this InfoPublic.
        :param symptoms_count: The symptoms_count of this InfoPublic.
        :param updated_at: The updated_at of this InfoPublic.
        """
        self.openapi_types = {
            'api_version': str,
            'conditions_count': int,
            'lab_tests_count': int,
            'risk_factors_count': int,
            'symptoms_count': int,
            'updated_at': str
        }

        self.attribute_map = {
            'api_version': 'api_version',
            'conditions_count': 'conditions_count',
            'lab_tests_count': 'lab_tests_count',
            'risk_factors_count': 'risk_factors_count',
            'symptoms_count': 'symptoms_count',
            'updated_at': 'updated_at'
        }

        self._api_version = api_version
        self._conditions_count = conditions_count
        self._lab_tests_count = lab_tests_count
        self._risk_factors_count = risk_factors_count
        self._symptoms_count = symptoms_count
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Info_Public of this InfoPublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this InfoPublic.

        version of api release

        :return: The api_version of this InfoPublic.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this InfoPublic.

        version of api release

        :param api_version: The api_version of this InfoPublic.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def conditions_count(self):
        """Gets the conditions_count of this InfoPublic.


        :return: The conditions_count of this InfoPublic.
        :rtype: int
        """
        return self._conditions_count

    @conditions_count.setter
    def conditions_count(self, conditions_count):
        """Sets the conditions_count of this InfoPublic.


        :param conditions_count: The conditions_count of this InfoPublic.
        :type conditions_count: int
        """
        if conditions_count is None:
            raise ValueError("Invalid value for `conditions_count`, must not be `None`")

        self._conditions_count = conditions_count

    @property
    def lab_tests_count(self):
        """Gets the lab_tests_count of this InfoPublic.


        :return: The lab_tests_count of this InfoPublic.
        :rtype: int
        """
        return self._lab_tests_count

    @lab_tests_count.setter
    def lab_tests_count(self, lab_tests_count):
        """Sets the lab_tests_count of this InfoPublic.


        :param lab_tests_count: The lab_tests_count of this InfoPublic.
        :type lab_tests_count: int
        """
        if lab_tests_count is None:
            raise ValueError("Invalid value for `lab_tests_count`, must not be `None`")

        self._lab_tests_count = lab_tests_count

    @property
    def risk_factors_count(self):
        """Gets the risk_factors_count of this InfoPublic.


        :return: The risk_factors_count of this InfoPublic.
        :rtype: int
        """
        return self._risk_factors_count

    @risk_factors_count.setter
    def risk_factors_count(self, risk_factors_count):
        """Sets the risk_factors_count of this InfoPublic.


        :param risk_factors_count: The risk_factors_count of this InfoPublic.
        :type risk_factors_count: int
        """
        if risk_factors_count is None:
            raise ValueError("Invalid value for `risk_factors_count`, must not be `None`")

        self._risk_factors_count = risk_factors_count

    @property
    def symptoms_count(self):
        """Gets the symptoms_count of this InfoPublic.


        :return: The symptoms_count of this InfoPublic.
        :rtype: int
        """
        return self._symptoms_count

    @symptoms_count.setter
    def symptoms_count(self, symptoms_count):
        """Sets the symptoms_count of this InfoPublic.


        :param symptoms_count: The symptoms_count of this InfoPublic.
        :type symptoms_count: int
        """
        if symptoms_count is None:
            raise ValueError("Invalid value for `symptoms_count`, must not be `None`")

        self._symptoms_count = symptoms_count

    @property
    def updated_at(self):
        """Gets the updated_at of this InfoPublic.

        time of last model update in ISO 8601 format

        :return: The updated_at of this InfoPublic.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InfoPublic.

        time of last model update in ISO 8601 format

        :param updated_at: The updated_at of this InfoPublic.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
