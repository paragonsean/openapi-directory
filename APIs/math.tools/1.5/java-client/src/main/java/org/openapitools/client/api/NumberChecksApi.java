/*
 * Numbers API
 * All about Numbers. REST access with json/xml/jsonp result support. Below is the documentation for the Numbers API. You can try them out right here. Find more information and subscribe at [math.tools](https://math.tools/api/numbers/)   
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberChecksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NumberChecksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberChecksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for numbersIsCubeGet
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsCubeGetCall(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/is-cube";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersIsCubeGetValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersIsCubeGetCall(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a cube number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersIsCubeGet(Integer number) throws ApiException {
        numbersIsCubeGetWithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a cube number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersIsCubeGetWithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersIsCubeGetValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a cube number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsCubeGetAsync(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersIsCubeGetValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersIsPalindromeGet
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsPalindromeGetCall(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/is-palindrome";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersIsPalindromeGetValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersIsPalindromeGetCall(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a palindrome number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersIsPalindromeGet(Integer number) throws ApiException {
        numbersIsPalindromeGetWithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a palindrome number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersIsPalindromeGetWithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersIsPalindromeGetValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a palindrome number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsPalindromeGetAsync(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersIsPalindromeGetValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersIsSquareGet
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsSquareGetCall(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/is-square";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersIsSquareGetValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersIsSquareGetCall(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a square number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersIsSquareGet(Integer number) throws ApiException {
        numbersIsSquareGetWithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a square number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersIsSquareGetWithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersIsSquareGetValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a square number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsSquareGetAsync(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersIsSquareGetValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersIsTriangleGet
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsTriangleGetCall(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/is-triangle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersIsTriangleGetValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersIsTriangleGetCall(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a triangle number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersIsTriangleGet(Integer number) throws ApiException {
        numbersIsTriangleGetWithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a triangle number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersIsTriangleGetWithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersIsTriangleGetValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a triangle number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersIsTriangleGetAsync(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersIsTriangleGetValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsFermatPrimeGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsFermatPrimeGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-fermat-prime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsFermatPrimeGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsFermatPrimeGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a known fermat prime number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsFermatPrimeGet_0(Integer number) throws ApiException {
        numbersPrimeIsFermatPrimeGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a known fermat prime number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsFermatPrimeGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsFermatPrimeGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a known fermat prime number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsFermatPrimeGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsFermatPrimeGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsFibonacciPrimeGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsFibonacciPrimeGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-fibonacci-prime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsFibonacciPrimeGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsFibonacciPrimeGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a known fibonacci prime number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsFibonacciPrimeGet_0(Integer number) throws ApiException {
        numbersPrimeIsFibonacciPrimeGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a known fibonacci prime number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsFibonacciPrimeGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsFibonacciPrimeGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a known fibonacci prime number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsFibonacciPrimeGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsFibonacciPrimeGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsMersennePrimeGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsMersennePrimeGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-mersenne-prime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsMersennePrimeGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsMersennePrimeGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a known mersenne prime number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsMersennePrimeGet_0(Integer number) throws ApiException {
        numbersPrimeIsMersennePrimeGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a known mersenne prime number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsMersennePrimeGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsMersennePrimeGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a known mersenne prime number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsMersennePrimeGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsMersennePrimeGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsPartitionPrimeGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPartitionPrimeGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-partition-prime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsPartitionPrimeGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsPartitionPrimeGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a known partition prime number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsPartitionPrimeGet_0(Integer number) throws ApiException {
        numbersPrimeIsPartitionPrimeGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a known partition prime number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsPartitionPrimeGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsPartitionPrimeGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a known partition prime number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPartitionPrimeGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsPartitionPrimeGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsPellPrimeGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPellPrimeGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-pell-prime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsPellPrimeGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsPellPrimeGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a known pell prime number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsPellPrimeGet_0(Integer number) throws ApiException {
        numbersPrimeIsPellPrimeGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a known pell prime number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsPellPrimeGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsPellPrimeGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a known pell prime number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPellPrimeGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsPellPrimeGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsPerfectGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPerfectGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-perfect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsPerfectGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsPerfectGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a perfect number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsPerfectGet_0(Integer number) throws ApiException {
        numbersPrimeIsPerfectGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a perfect number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsPerfectGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsPerfectGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a perfect number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPerfectGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsPerfectGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersPrimeIsPrimeGet_0
     * @param number Number to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPrimeGet_0Call(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/prime/is-prime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersPrimeIsPrimeGet_0ValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        return numbersPrimeIsPrimeGet_0Call(number, _callback);

    }

    /**
     * 
     * Checks whether a given number is a known prime number or not.
     * @param number Number to check (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersPrimeIsPrimeGet_0(Integer number) throws ApiException {
        numbersPrimeIsPrimeGet_0WithHttpInfo(number);
    }

    /**
     * 
     * Checks whether a given number is a known prime number or not.
     * @param number Number to check (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersPrimeIsPrimeGet_0WithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = numbersPrimeIsPrimeGet_0ValidateBeforeCall(number, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a given number is a known prime number or not.
     * @param number Number to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersPrimeIsPrimeGet_0Async(Integer number, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersPrimeIsPrimeGet_0ValidateBeforeCall(number, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
