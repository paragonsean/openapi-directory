/*
 * Numbers API
 * All about Numbers. REST access with json/xml/jsonp result support. Below is the documentation for the Numbers API. You can try them out right here. Find more information and subscribe at [math.tools](https://math.tools/api/numbers/)   
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BaseConversionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BaseConversionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BaseConversionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for numbersBaseBinaryGet
     * @param number Number to convert to binary (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseBinaryGetCall(Integer number, Integer from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/base/binary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersBaseBinaryGetValidateBeforeCall(Integer number, Integer from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling numbersBaseBinaryGet(Async)");
        }

        return numbersBaseBinaryGetCall(number, from, _callback);

    }

    /**
     * 
     * Convert a given number to binary
     * @param number Number to convert to binary (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersBaseBinaryGet(Integer number, Integer from) throws ApiException {
        numbersBaseBinaryGetWithHttpInfo(number, from);
    }

    /**
     * 
     * Convert a given number to binary
     * @param number Number to convert to binary (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersBaseBinaryGetWithHttpInfo(Integer number, Integer from) throws ApiException {
        okhttp3.Call localVarCall = numbersBaseBinaryGetValidateBeforeCall(number, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Convert a given number to binary
     * @param number Number to convert to binary (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseBinaryGetAsync(Integer number, Integer from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersBaseBinaryGetValidateBeforeCall(number, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersBaseGet
     * @param number Number to convert to the target base (required)
     * @param to Target base to convert to (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseGetCall(Integer number, Integer to, Integer from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/base";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersBaseGetValidateBeforeCall(Integer number, Integer to, Integer from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling numbersBaseGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling numbersBaseGet(Async)");
        }

        return numbersBaseGetCall(number, to, from, _callback);

    }

    /**
     * 
     * Convert a given number from one base to another base
     * @param number Number to convert to the target base (required)
     * @param to Target base to convert to (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersBaseGet(Integer number, Integer to, Integer from) throws ApiException {
        numbersBaseGetWithHttpInfo(number, to, from);
    }

    /**
     * 
     * Convert a given number from one base to another base
     * @param number Number to convert to the target base (required)
     * @param to Target base to convert to (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersBaseGetWithHttpInfo(Integer number, Integer to, Integer from) throws ApiException {
        okhttp3.Call localVarCall = numbersBaseGetValidateBeforeCall(number, to, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Convert a given number from one base to another base
     * @param number Number to convert to the target base (required)
     * @param to Target base to convert to (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseGetAsync(Integer number, Integer to, Integer from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersBaseGetValidateBeforeCall(number, to, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersBaseHexGet
     * @param number Number to convert to hex (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseHexGetCall(Integer number, Integer from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/base/hex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersBaseHexGetValidateBeforeCall(Integer number, Integer from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling numbersBaseHexGet(Async)");
        }

        return numbersBaseHexGetCall(number, from, _callback);

    }

    /**
     * 
     * Convert a given number to hexadecimal
     * @param number Number to convert to hex (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersBaseHexGet(Integer number, Integer from) throws ApiException {
        numbersBaseHexGetWithHttpInfo(number, from);
    }

    /**
     * 
     * Convert a given number to hexadecimal
     * @param number Number to convert to hex (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersBaseHexGetWithHttpInfo(Integer number, Integer from) throws ApiException {
        okhttp3.Call localVarCall = numbersBaseHexGetValidateBeforeCall(number, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Convert a given number to hexadecimal
     * @param number Number to convert to hex (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseHexGetAsync(Integer number, Integer from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersBaseHexGetValidateBeforeCall(number, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for numbersBaseOctalGet
     * @param number Number to convert to octal (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseOctalGetCall(Integer number, Integer from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers/base/octal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Mathtools-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numbersBaseOctalGetValidateBeforeCall(Integer number, Integer from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling numbersBaseOctalGet(Async)");
        }

        return numbersBaseOctalGetCall(number, from, _callback);

    }

    /**
     * 
     * Convert a given number to octal
     * @param number Number to convert to octal (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public void numbersBaseOctalGet(Integer number, Integer from) throws ApiException {
        numbersBaseOctalGetWithHttpInfo(number, from);
    }

    /**
     * 
     * Convert a given number to octal
     * @param number Number to convert to octal (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> numbersBaseOctalGetWithHttpInfo(Integer number, Integer from) throws ApiException {
        okhttp3.Call localVarCall = numbersBaseOctalGetValidateBeforeCall(number, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Convert a given number to octal
     * @param number Number to convert to octal (required)
     * @param from Base of the supplied number (Optional base 10 assumed by default) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 success response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numbersBaseOctalGetAsync(Integer number, Integer from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = numbersBaseOctalGetValidateBeforeCall(number, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
