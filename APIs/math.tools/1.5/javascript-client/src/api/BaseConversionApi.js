/**
 * Numbers API
 * All about Numbers. REST access with json/xml/jsonp result support. Below is the documentation for the Numbers API. You can try them out right here. Find more information and subscribe at [math.tools](https://math.tools/api/numbers/)   
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* BaseConversion service.
* @module api/BaseConversionApi
* @version 1.5
*/
export default class BaseConversionApi {

    /**
    * Constructs a new BaseConversionApi. 
    * @alias module:api/BaseConversionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the numbersBaseBinaryGet operation.
     * @callback module:api/BaseConversionApi~numbersBaseBinaryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a given number to binary
     * @param {Number} number Number to convert to binary
     * @param {Object} opts Optional parameters
     * @param {Number} [from] Base of the supplied number (Optional base 10 assumed by default)
     * @param {module:api/BaseConversionApi~numbersBaseBinaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    numbersBaseBinaryGet(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling numbersBaseBinaryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Mathtools-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/numbers/base/binary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the numbersBaseGet operation.
     * @callback module:api/BaseConversionApi~numbersBaseGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a given number from one base to another base
     * @param {Number} number Number to convert to the target base
     * @param {Number} to Target base to convert to
     * @param {Object} opts Optional parameters
     * @param {Number} [from] Base of the supplied number (Optional base 10 assumed by default)
     * @param {module:api/BaseConversionApi~numbersBaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    numbersBaseGet(number, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling numbersBaseGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling numbersBaseGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'from': opts['from'],
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Mathtools-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/numbers/base', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the numbersBaseHexGet operation.
     * @callback module:api/BaseConversionApi~numbersBaseHexGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a given number to hexadecimal
     * @param {Number} number Number to convert to hex
     * @param {Object} opts Optional parameters
     * @param {Number} [from] Base of the supplied number (Optional base 10 assumed by default)
     * @param {module:api/BaseConversionApi~numbersBaseHexGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    numbersBaseHexGet(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling numbersBaseHexGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Mathtools-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/numbers/base/hex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the numbersBaseOctalGet operation.
     * @callback module:api/BaseConversionApi~numbersBaseOctalGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a given number to octal
     * @param {Number} number Number to convert to octal
     * @param {Object} opts Optional parameters
     * @param {Number} [from] Base of the supplied number (Optional base 10 assumed by default)
     * @param {module:api/BaseConversionApi~numbersBaseOctalGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    numbersBaseOctalGet(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling numbersBaseOctalGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Mathtools-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/numbers/base/octal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
