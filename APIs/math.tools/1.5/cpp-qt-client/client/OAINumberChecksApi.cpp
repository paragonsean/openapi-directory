/**
 * Numbers API
 * All about Numbers. REST access with json/xml/jsonp result support. Below is the documentation for the Numbers API. You can try them out right here. Find more information and subscribe at [math.tools](https://math.tools/api/numbers/)   
 *
 * The version of the OpenAPI document: 1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberChecksApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAINumberChecksApi::OAINumberChecksApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAINumberChecksApi::~OAINumberChecksApi() {
}

void OAINumberChecksApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.math.tools"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://api.math.tools"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("numbersIsCubeGet", defaultConf);
    _serverIndices.insert("numbersIsCubeGet", 0);
    _serverConfigs.insert("numbersIsPalindromeGet", defaultConf);
    _serverIndices.insert("numbersIsPalindromeGet", 0);
    _serverConfigs.insert("numbersIsSquareGet", defaultConf);
    _serverIndices.insert("numbersIsSquareGet", 0);
    _serverConfigs.insert("numbersIsTriangleGet", defaultConf);
    _serverIndices.insert("numbersIsTriangleGet", 0);
    _serverConfigs.insert("numbersPrimeIsFermatPrimeGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsFermatPrimeGet", 0);
    _serverConfigs.insert("numbersPrimeIsFibonacciPrimeGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsFibonacciPrimeGet", 0);
    _serverConfigs.insert("numbersPrimeIsMersennePrimeGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsMersennePrimeGet", 0);
    _serverConfigs.insert("numbersPrimeIsPartitionPrimeGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsPartitionPrimeGet", 0);
    _serverConfigs.insert("numbersPrimeIsPellPrimeGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsPellPrimeGet", 0);
    _serverConfigs.insert("numbersPrimeIsPerfectGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsPerfectGet", 0);
    _serverConfigs.insert("numbersPrimeIsPrimeGet", defaultConf);
    _serverIndices.insert("numbersPrimeIsPrimeGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAINumberChecksApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAINumberChecksApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAINumberChecksApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAINumberChecksApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAINumberChecksApi::setUsername(const QString &username) {
    _username = username;
}

void OAINumberChecksApi::setPassword(const QString &password) {
    _password = password;
}


void OAINumberChecksApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAINumberChecksApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAINumberChecksApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAINumberChecksApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAINumberChecksApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAINumberChecksApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAINumberChecksApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAINumberChecksApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAINumberChecksApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAINumberChecksApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAINumberChecksApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAINumberChecksApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAINumberChecksApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAINumberChecksApi::numbersIsCubeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersIsCubeGet"][_serverIndices.value("numbersIsCubeGet")].URL()+"/numbers/is-cube");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersIsCubeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersIsCubeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersIsCubeGetSignal();
        Q_EMIT numbersIsCubeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersIsCubeGetSignalE(error_type, error_str);
        Q_EMIT numbersIsCubeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersIsCubeGetSignalError(error_type, error_str);
        Q_EMIT numbersIsCubeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersIsPalindromeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersIsPalindromeGet"][_serverIndices.value("numbersIsPalindromeGet")].URL()+"/numbers/is-palindrome");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersIsPalindromeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersIsPalindromeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersIsPalindromeGetSignal();
        Q_EMIT numbersIsPalindromeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersIsPalindromeGetSignalE(error_type, error_str);
        Q_EMIT numbersIsPalindromeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersIsPalindromeGetSignalError(error_type, error_str);
        Q_EMIT numbersIsPalindromeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersIsSquareGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersIsSquareGet"][_serverIndices.value("numbersIsSquareGet")].URL()+"/numbers/is-square");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersIsSquareGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersIsSquareGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersIsSquareGetSignal();
        Q_EMIT numbersIsSquareGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersIsSquareGetSignalE(error_type, error_str);
        Q_EMIT numbersIsSquareGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersIsSquareGetSignalError(error_type, error_str);
        Q_EMIT numbersIsSquareGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersIsTriangleGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersIsTriangleGet"][_serverIndices.value("numbersIsTriangleGet")].URL()+"/numbers/is-triangle");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersIsTriangleGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersIsTriangleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersIsTriangleGetSignal();
        Q_EMIT numbersIsTriangleGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersIsTriangleGetSignalE(error_type, error_str);
        Q_EMIT numbersIsTriangleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersIsTriangleGetSignalError(error_type, error_str);
        Q_EMIT numbersIsTriangleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsFermatPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsFermatPrimeGet"][_serverIndices.value("numbersPrimeIsFermatPrimeGet")].URL()+"/numbers/prime/is-fermat-prime");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsFermatPrimeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsFermatPrimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsFermatPrimeGetSignal();
        Q_EMIT numbersPrimeIsFermatPrimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsFermatPrimeGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsFermatPrimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsFermatPrimeGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsFermatPrimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsFibonacciPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsFibonacciPrimeGet"][_serverIndices.value("numbersPrimeIsFibonacciPrimeGet")].URL()+"/numbers/prime/is-fibonacci-prime");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsFibonacciPrimeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsFibonacciPrimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsFibonacciPrimeGetSignal();
        Q_EMIT numbersPrimeIsFibonacciPrimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsFibonacciPrimeGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsFibonacciPrimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsFibonacciPrimeGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsFibonacciPrimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsMersennePrimeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsMersennePrimeGet"][_serverIndices.value("numbersPrimeIsMersennePrimeGet")].URL()+"/numbers/prime/is-mersenne-prime");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsMersennePrimeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsMersennePrimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsMersennePrimeGetSignal();
        Q_EMIT numbersPrimeIsMersennePrimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsMersennePrimeGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsMersennePrimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsMersennePrimeGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsMersennePrimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsPartitionPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsPartitionPrimeGet"][_serverIndices.value("numbersPrimeIsPartitionPrimeGet")].URL()+"/numbers/prime/is-partition-prime");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsPartitionPrimeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsPartitionPrimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsPartitionPrimeGetSignal();
        Q_EMIT numbersPrimeIsPartitionPrimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsPartitionPrimeGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsPartitionPrimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsPartitionPrimeGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsPartitionPrimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsPellPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsPellPrimeGet"][_serverIndices.value("numbersPrimeIsPellPrimeGet")].URL()+"/numbers/prime/is-pell-prime");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsPellPrimeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsPellPrimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsPellPrimeGetSignal();
        Q_EMIT numbersPrimeIsPellPrimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsPellPrimeGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsPellPrimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsPellPrimeGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsPellPrimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsPerfectGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsPerfectGet"][_serverIndices.value("numbersPrimeIsPerfectGet")].URL()+"/numbers/prime/is-perfect");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsPerfectGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsPerfectGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsPerfectGetSignal();
        Q_EMIT numbersPrimeIsPerfectGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsPerfectGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsPerfectGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsPerfectGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsPerfectGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::numbersPrimeIsPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number) {
    QString fullPath = QString(_serverConfigs["numbersPrimeIsPrimeGet"][_serverIndices.value("numbersPrimeIsPrimeGet")].URL()+"/numbers/prime/is-prime");
    
    if (_apiKeys.contains("X-Mathtools-Api-Secret")) {
        addHeaders("X-Mathtools-Api-Secret",_apiKeys.find("X-Mathtools-Api-Secret").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINumberChecksApi::numbersPrimeIsPrimeGetCallback);
    connect(this, &OAINumberChecksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINumberChecksApi::numbersPrimeIsPrimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT numbersPrimeIsPrimeGetSignal();
        Q_EMIT numbersPrimeIsPrimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT numbersPrimeIsPrimeGetSignalE(error_type, error_str);
        Q_EMIT numbersPrimeIsPrimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT numbersPrimeIsPrimeGetSignalError(error_type, error_str);
        Q_EMIT numbersPrimeIsPrimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINumberChecksApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
