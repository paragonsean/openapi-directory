/**
 * Numbers API
 * All about Numbers. REST access with json/xml/jsonp result support. Below is the documentation for the Numbers API. You can try them out right here. Find more information and subscribe at [math.tools](https://math.tools/api/numbers/)   
 *
 * The version of the OpenAPI document: 1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINumberChecksApi_H
#define OAI_OAINumberChecksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINumberChecksApi : public QObject {
    Q_OBJECT

public:
    OAINumberChecksApi(const int timeOut = 0);
    ~OAINumberChecksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersIsCubeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersIsPalindromeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersIsSquareGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersIsTriangleGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsFermatPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsFibonacciPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsMersennePrimeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsPartitionPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsPellPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsPerfectGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number qint32 [optional]
    */
    virtual void numbersPrimeIsPrimeGet(const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void numbersIsCubeGetCallback(OAIHttpRequestWorker *worker);
    void numbersIsPalindromeGetCallback(OAIHttpRequestWorker *worker);
    void numbersIsSquareGetCallback(OAIHttpRequestWorker *worker);
    void numbersIsTriangleGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsFermatPrimeGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsFibonacciPrimeGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsMersennePrimeGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPartitionPrimeGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPellPrimeGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPerfectGetCallback(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPrimeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void numbersIsCubeGetSignal();
    void numbersIsPalindromeGetSignal();
    void numbersIsSquareGetSignal();
    void numbersIsTriangleGetSignal();
    void numbersPrimeIsFermatPrimeGetSignal();
    void numbersPrimeIsFibonacciPrimeGetSignal();
    void numbersPrimeIsMersennePrimeGetSignal();
    void numbersPrimeIsPartitionPrimeGetSignal();
    void numbersPrimeIsPellPrimeGetSignal();
    void numbersPrimeIsPerfectGetSignal();
    void numbersPrimeIsPrimeGetSignal();


    void numbersIsCubeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersIsPalindromeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersIsSquareGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersIsTriangleGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsFermatPrimeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsFibonacciPrimeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsMersennePrimeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPartitionPrimeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPellPrimeGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPerfectGetSignalFull(OAIHttpRequestWorker *worker);
    void numbersPrimeIsPrimeGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use numbersIsCubeGetSignalError() instead")
    void numbersIsCubeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsCubeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersIsPalindromeGetSignalError() instead")
    void numbersIsPalindromeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsPalindromeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersIsSquareGetSignalError() instead")
    void numbersIsSquareGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsSquareGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersIsTriangleGetSignalError() instead")
    void numbersIsTriangleGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsTriangleGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsFermatPrimeGetSignalError() instead")
    void numbersPrimeIsFermatPrimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsFermatPrimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsFibonacciPrimeGetSignalError() instead")
    void numbersPrimeIsFibonacciPrimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsFibonacciPrimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsMersennePrimeGetSignalError() instead")
    void numbersPrimeIsMersennePrimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsMersennePrimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPartitionPrimeGetSignalError() instead")
    void numbersPrimeIsPartitionPrimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPartitionPrimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPellPrimeGetSignalError() instead")
    void numbersPrimeIsPellPrimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPellPrimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPerfectGetSignalError() instead")
    void numbersPrimeIsPerfectGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPerfectGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPrimeGetSignalError() instead")
    void numbersPrimeIsPrimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPrimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use numbersIsCubeGetSignalErrorFull() instead")
    void numbersIsCubeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsCubeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersIsPalindromeGetSignalErrorFull() instead")
    void numbersIsPalindromeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsPalindromeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersIsSquareGetSignalErrorFull() instead")
    void numbersIsSquareGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsSquareGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersIsTriangleGetSignalErrorFull() instead")
    void numbersIsTriangleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersIsTriangleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsFermatPrimeGetSignalErrorFull() instead")
    void numbersPrimeIsFermatPrimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsFermatPrimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsFibonacciPrimeGetSignalErrorFull() instead")
    void numbersPrimeIsFibonacciPrimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsFibonacciPrimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsMersennePrimeGetSignalErrorFull() instead")
    void numbersPrimeIsMersennePrimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsMersennePrimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPartitionPrimeGetSignalErrorFull() instead")
    void numbersPrimeIsPartitionPrimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPartitionPrimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPellPrimeGetSignalErrorFull() instead")
    void numbersPrimeIsPellPrimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPellPrimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPerfectGetSignalErrorFull() instead")
    void numbersPrimeIsPerfectGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPerfectGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use numbersPrimeIsPrimeGetSignalErrorFull() instead")
    void numbersPrimeIsPrimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void numbersPrimeIsPrimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
