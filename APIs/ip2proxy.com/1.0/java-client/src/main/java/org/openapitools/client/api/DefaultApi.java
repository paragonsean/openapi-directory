/*
 * IP2Proxy Proxy Detection
 * IP2Proxy allows instant detection of anonymous proxy, VPN, TOR exit nodes, search engine robots (SES), data center ranges (PX2-PX10), residential proxies (PX10) and VPN provider name (PX11) by IP address. It also returns the threat type of the proxy (PX9 or higher). Visit https://www.ip2location.com/web-service/ip2proxy for further information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rootGet
     * @param ip IP address (IPv4) for lookup purpose. If not present, the server IP address will be used for the lookup. (required)
     * @param key API key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Package name from PX1 to PX11. If not present, the web service will assume the PX1 package query. (optional)
     * @param format If not present, json format will be returned as the search result. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP2Proxy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(String ip, String key, String _package, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_package != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("package", _package));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "text/html; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(String ip, String key, String _package, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling rootGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling rootGet(Async)");
        }

        return rootGetCall(ip, key, _package, format, _callback);

    }

    /**
     * 
     * Check if an IP address is proxy
     * @param ip IP address (IPv4) for lookup purpose. If not present, the server IP address will be used for the lookup. (required)
     * @param key API key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Package name from PX1 to PX11. If not present, the web service will assume the PX1 package query. (optional)
     * @param format If not present, json format will be returned as the search result. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP2Proxy </td><td>  -  </td></tr>
     </table>
     */
    public String rootGet(String ip, String key, String _package, String format) throws ApiException {
        ApiResponse<String> localVarResp = rootGetWithHttpInfo(ip, key, _package, format);
        return localVarResp.getData();
    }

    /**
     * 
     * Check if an IP address is proxy
     * @param ip IP address (IPv4) for lookup purpose. If not present, the server IP address will be used for the lookup. (required)
     * @param key API key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Package name from PX1 to PX11. If not present, the web service will assume the PX1 package query. (optional)
     * @param format If not present, json format will be returned as the search result. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP2Proxy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> rootGetWithHttpInfo(String ip, String key, String _package, String format) throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ip, key, _package, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check if an IP address is proxy
     * @param ip IP address (IPv4) for lookup purpose. If not present, the server IP address will be used for the lookup. (required)
     * @param key API key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Package name from PX1 to PX11. If not present, the web service will assume the PX1 package query. (optional)
     * @param format If not present, json format will be returned as the search result. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP2Proxy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(String ip, String key, String _package, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ip, key, _package, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
