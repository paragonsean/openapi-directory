# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, number_of_line_items: int=None, order_number: str=None, order_status: str=None):
        """OrderHeader - a model defined in OpenAPI

        :param id: The id of this OrderHeader.
        :param number_of_line_items: The number_of_line_items of this OrderHeader.
        :param order_number: The order_number of this OrderHeader.
        :param order_status: The order_status of this OrderHeader.
        """
        self.openapi_types = {
            'id': str,
            'number_of_line_items': int,
            'order_number': str,
            'order_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'number_of_line_items': 'numberOfLineItems',
            'order_number': 'orderNumber',
            'order_status': 'orderStatus'
        }

        self._id = id
        self._number_of_line_items = number_of_line_items
        self._order_number = order_number
        self._order_status = order_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderHeader of this OrderHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrderHeader.


        :return: The id of this OrderHeader.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderHeader.


        :param id: The id of this OrderHeader.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def number_of_line_items(self):
        """Gets the number_of_line_items of this OrderHeader.


        :return: The number_of_line_items of this OrderHeader.
        :rtype: int
        """
        return self._number_of_line_items

    @number_of_line_items.setter
    def number_of_line_items(self, number_of_line_items):
        """Sets the number_of_line_items of this OrderHeader.


        :param number_of_line_items: The number_of_line_items of this OrderHeader.
        :type number_of_line_items: int
        """
        if number_of_line_items is None:
            raise ValueError("Invalid value for `number_of_line_items`, must not be `None`")
        if number_of_line_items is not None and number_of_line_items < 0:
            raise ValueError("Invalid value for `number_of_line_items`, must be a value greater than or equal to `0`")

        self._number_of_line_items = number_of_line_items

    @property
    def order_number(self):
        """Gets the order_number of this OrderHeader.


        :return: The order_number of this OrderHeader.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this OrderHeader.


        :param order_number: The order_number of this OrderHeader.
        :type order_number: str
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")

        self._order_number = order_number

    @property
    def order_status(self):
        """Gets the order_status of this OrderHeader.


        :return: The order_status of this OrderHeader.
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this OrderHeader.


        :param order_status: The order_status of this OrderHeader.
        :type order_status: str
        """
        allowed_values = ["Active", "Cancelled", "Completed"]  # noqa: E501
        if order_status not in allowed_values:
            raise ValueError(
                "Invalid value for `order_status` ({0}), must be one of {1}"
                .format(order_status, allowed_values)
            )

        self._order_status = order_status
