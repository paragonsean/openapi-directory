# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_line_item_quantities_inner import OrderLineItemQuantitiesInner
from openapi_server import util


class OrderLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changeable: bool=None, id: str=None, order_line_item_number: float=None, order_line_item_status: str=None, quantities: List[OrderLineItemQuantitiesInner]=None):
        """OrderLineItem - a model defined in OpenAPI

        :param changeable: The changeable of this OrderLineItem.
        :param id: The id of this OrderLineItem.
        :param order_line_item_number: The order_line_item_number of this OrderLineItem.
        :param order_line_item_status: The order_line_item_status of this OrderLineItem.
        :param quantities: The quantities of this OrderLineItem.
        """
        self.openapi_types = {
            'changeable': bool,
            'id': str,
            'order_line_item_number': float,
            'order_line_item_status': str,
            'quantities': List[OrderLineItemQuantitiesInner]
        }

        self.attribute_map = {
            'changeable': 'changeable',
            'id': 'id',
            'order_line_item_number': 'orderLineItemNumber',
            'order_line_item_status': 'orderLineItemStatus',
            'quantities': 'quantities'
        }

        self._changeable = changeable
        self._id = id
        self._order_line_item_number = order_line_item_number
        self._order_line_item_status = order_line_item_status
        self._quantities = quantities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItem of this OrderLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changeable(self):
        """Gets the changeable of this OrderLineItem.


        :return: The changeable of this OrderLineItem.
        :rtype: bool
        """
        return self._changeable

    @changeable.setter
    def changeable(self, changeable):
        """Sets the changeable of this OrderLineItem.


        :param changeable: The changeable of this OrderLineItem.
        :type changeable: bool
        """

        self._changeable = changeable

    @property
    def id(self):
        """Gets the id of this OrderLineItem.


        :return: The id of this OrderLineItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderLineItem.


        :param id: The id of this OrderLineItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def order_line_item_number(self):
        """Gets the order_line_item_number of this OrderLineItem.


        :return: The order_line_item_number of this OrderLineItem.
        :rtype: float
        """
        return self._order_line_item_number

    @order_line_item_number.setter
    def order_line_item_number(self, order_line_item_number):
        """Sets the order_line_item_number of this OrderLineItem.


        :param order_line_item_number: The order_line_item_number of this OrderLineItem.
        :type order_line_item_number: float
        """
        if order_line_item_number is None:
            raise ValueError("Invalid value for `order_line_item_number`, must not be `None`")
        if order_line_item_number is not None and order_line_item_number < 0:
            raise ValueError("Invalid value for `order_line_item_number`, must be a value greater than or equal to `0`")

        self._order_line_item_number = order_line_item_number

    @property
    def order_line_item_status(self):
        """Gets the order_line_item_status of this OrderLineItem.


        :return: The order_line_item_status of this OrderLineItem.
        :rtype: str
        """
        return self._order_line_item_status

    @order_line_item_status.setter
    def order_line_item_status(self, order_line_item_status):
        """Sets the order_line_item_status of this OrderLineItem.


        :param order_line_item_status: The order_line_item_status of this OrderLineItem.
        :type order_line_item_status: str
        """
        allowed_values = ["Cancelled", "Completed", "Confirmed", "Pending", "ProductionCompleted", "ShipmentCompleted"]  # noqa: E501
        if order_line_item_status not in allowed_values:
            raise ValueError(
                "Invalid value for `order_line_item_status` ({0}), must be one of {1}"
                .format(order_line_item_status, allowed_values)
            )

        self._order_line_item_status = order_line_item_status

    @property
    def quantities(self):
        """Gets the quantities of this OrderLineItem.


        :return: The quantities of this OrderLineItem.
        :rtype: List[OrderLineItemQuantitiesInner]
        """
        return self._quantities

    @quantities.setter
    def quantities(self, quantities):
        """Sets the quantities of this OrderLineItem.


        :param quantities: The quantities of this OrderLineItem.
        :type quantities: List[OrderLineItemQuantitiesInner]
        """

        self._quantities = quantities
