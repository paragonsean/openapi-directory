# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderLineItemQuantitiesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity_context: str=None, quantity_type: str=None, quantity_uom: str=None, quantity_value: float=None):
        """OrderLineItemQuantitiesInner - a model defined in OpenAPI

        :param quantity_context: The quantity_context of this OrderLineItemQuantitiesInner.
        :param quantity_type: The quantity_type of this OrderLineItemQuantitiesInner.
        :param quantity_uom: The quantity_uom of this OrderLineItemQuantitiesInner.
        :param quantity_value: The quantity_value of this OrderLineItemQuantitiesInner.
        """
        self.openapi_types = {
            'quantity_context': str,
            'quantity_type': str,
            'quantity_uom': str,
            'quantity_value': float
        }

        self.attribute_map = {
            'quantity_context': 'quantityContext',
            'quantity_type': 'quantityType',
            'quantity_uom': 'quantityUOM',
            'quantity_value': 'quantityValue'
        }

        self._quantity_context = quantity_context
        self._quantity_type = quantity_type
        self._quantity_uom = quantity_uom
        self._quantity_value = quantity_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemQuantitiesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItem_quantities_inner of this OrderLineItemQuantitiesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity_context(self):
        """Gets the quantity_context of this OrderLineItemQuantitiesInner.


        :return: The quantity_context of this OrderLineItemQuantitiesInner.
        :rtype: str
        """
        return self._quantity_context

    @quantity_context.setter
    def quantity_context(self, quantity_context):
        """Sets the quantity_context of this OrderLineItemQuantitiesInner.


        :param quantity_context: The quantity_context of this OrderLineItemQuantitiesInner.
        :type quantity_context: str
        """
        allowed_values = ["Confirmed", "Invoiced", "Ordered", "Produced", "Shipped"]  # noqa: E501
        if quantity_context not in allowed_values:
            raise ValueError(
                "Invalid value for `quantity_context` ({0}), must be one of {1}"
                .format(quantity_context, allowed_values)
            )

        self._quantity_context = quantity_context

    @property
    def quantity_type(self):
        """Gets the quantity_type of this OrderLineItemQuantitiesInner.


        :return: The quantity_type of this OrderLineItemQuantitiesInner.
        :rtype: str
        """
        return self._quantity_type

    @quantity_type.setter
    def quantity_type(self, quantity_type):
        """Sets the quantity_type of this OrderLineItemQuantitiesInner.


        :param quantity_type: The quantity_type of this OrderLineItemQuantitiesInner.
        :type quantity_type: str
        """
        allowed_values = ["Area", "Count", "GrossWeight", "Length", "NetNetWeight", "NetWeight", "NominalWeight", "TareWeight"]  # noqa: E501
        if quantity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `quantity_type` ({0}), must be one of {1}"
                .format(quantity_type, allowed_values)
            )

        self._quantity_type = quantity_type

    @property
    def quantity_uom(self):
        """Gets the quantity_uom of this OrderLineItemQuantitiesInner.


        :return: The quantity_uom of this OrderLineItemQuantitiesInner.
        :rtype: str
        """
        return self._quantity_uom

    @quantity_uom.setter
    def quantity_uom(self, quantity_uom):
        """Sets the quantity_uom of this OrderLineItemQuantitiesInner.


        :param quantity_uom: The quantity_uom of this OrderLineItemQuantitiesInner.
        :type quantity_uom: str
        """
        allowed_values = ["Bale", "Box", "Centimeter", "Decimeter", "Foot", "Gram", "HundredPounds", "Inch", "Kilogram", "Kilometer", "Meter", "MetricTon", "Millimeter", "Package", "PalletUnit", "Piece", "Pound", "PulpUnit", "Ream", "Reel", "Sheet", "ShortTon", "Skid", "SquareDecimeter", "SquareFoot", "SquareInch", "SquareMeter", "ThousandPieces", "ThousandSquareCentimeters", "ThousandSquareFeet", "ThousandSquareInches", "Yard"]  # noqa: E501
        if quantity_uom not in allowed_values:
            raise ValueError(
                "Invalid value for `quantity_uom` ({0}), must be one of {1}"
                .format(quantity_uom, allowed_values)
            )

        self._quantity_uom = quantity_uom

    @property
    def quantity_value(self):
        """Gets the quantity_value of this OrderLineItemQuantitiesInner.


        :return: The quantity_value of this OrderLineItemQuantitiesInner.
        :rtype: float
        """
        return self._quantity_value

    @quantity_value.setter
    def quantity_value(self, quantity_value):
        """Sets the quantity_value of this OrderLineItemQuantitiesInner.


        :param quantity_value: The quantity_value of this OrderLineItemQuantitiesInner.
        :type quantity_value: float
        """

        self._quantity_value = quantity_value
