/**
 * papiNet API
 * papinet API is a global initiative for the Forst and Paper supply chain.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderHeader::OAIOrderHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderHeader::OAIOrderHeader() {
    this->initializeModel();
}

OAIOrderHeader::~OAIOrderHeader() {}

void OAIOrderHeader::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_of_line_items_isSet = false;
    m_number_of_line_items_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_order_status_isSet = false;
    m_order_status_isValid = false;
}

void OAIOrderHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderHeader::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_of_line_items_isValid = ::OpenAPI::fromJsonValue(m_number_of_line_items, json[QString("numberOfLineItems")]);
    m_number_of_line_items_isSet = !json[QString("numberOfLineItems")].isNull() && m_number_of_line_items_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_order_status_isValid = ::OpenAPI::fromJsonValue(m_order_status, json[QString("orderStatus")]);
    m_order_status_isSet = !json[QString("orderStatus")].isNull() && m_order_status_isValid;
}

QString OAIOrderHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_of_line_items_isSet) {
        obj.insert(QString("numberOfLineItems"), ::OpenAPI::toJsonValue(m_number_of_line_items));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_order_status_isSet) {
        obj.insert(QString("orderStatus"), ::OpenAPI::toJsonValue(m_order_status));
    }
    return obj;
}

QString OAIOrderHeader::getId() const {
    return m_id;
}
void OAIOrderHeader::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderHeader::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderHeader::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIOrderHeader::getNumberOfLineItems() const {
    return m_number_of_line_items;
}
void OAIOrderHeader::setNumberOfLineItems(const qint32 &number_of_line_items) {
    m_number_of_line_items = number_of_line_items;
    m_number_of_line_items_isSet = true;
}

bool OAIOrderHeader::is_number_of_line_items_Set() const{
    return m_number_of_line_items_isSet;
}

bool OAIOrderHeader::is_number_of_line_items_Valid() const{
    return m_number_of_line_items_isValid;
}

QString OAIOrderHeader::getOrderNumber() const {
    return m_order_number;
}
void OAIOrderHeader::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIOrderHeader::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIOrderHeader::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIOrderHeader::getOrderStatus() const {
    return m_order_status;
}
void OAIOrderHeader::setOrderStatus(const QString &order_status) {
    m_order_status = order_status;
    m_order_status_isSet = true;
}

bool OAIOrderHeader::is_order_status_Set() const{
    return m_order_status_isSet;
}

bool OAIOrderHeader::is_order_status_Valid() const{
    return m_order_status_isValid;
}

bool OAIOrderHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_line_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_number_of_line_items_isValid && m_order_number_isValid && m_order_status_isValid && true;
}

} // namespace OpenAPI
