/**
 * papiNet API
 * papinet API is a global initiative for the Forst and Paper supply chain.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderLineItemQuantitiesInner model module.
 * @module model/OrderLineItemQuantitiesInner
 * @version 1.0.0
 */
class OrderLineItemQuantitiesInner {
    /**
     * Constructs a new <code>OrderLineItemQuantitiesInner</code>.
     * @alias module:model/OrderLineItemQuantitiesInner
     */
    constructor() { 
        
        OrderLineItemQuantitiesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderLineItemQuantitiesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItemQuantitiesInner} obj Optional instance to populate.
     * @return {module:model/OrderLineItemQuantitiesInner} The populated <code>OrderLineItemQuantitiesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItemQuantitiesInner();

            if (data.hasOwnProperty('quantityContext')) {
                obj['quantityContext'] = ApiClient.convertToType(data['quantityContext'], 'String');
            }
            if (data.hasOwnProperty('quantityType')) {
                obj['quantityType'] = ApiClient.convertToType(data['quantityType'], 'String');
            }
            if (data.hasOwnProperty('quantityUOM')) {
                obj['quantityUOM'] = ApiClient.convertToType(data['quantityUOM'], 'String');
            }
            if (data.hasOwnProperty('quantityValue')) {
                obj['quantityValue'] = ApiClient.convertToType(data['quantityValue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItemQuantitiesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItemQuantitiesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['quantityContext'] && !(typeof data['quantityContext'] === 'string' || data['quantityContext'] instanceof String)) {
            throw new Error("Expected the field `quantityContext` to be a primitive type in the JSON string but got " + data['quantityContext']);
        }
        // ensure the json data is a string
        if (data['quantityType'] && !(typeof data['quantityType'] === 'string' || data['quantityType'] instanceof String)) {
            throw new Error("Expected the field `quantityType` to be a primitive type in the JSON string but got " + data['quantityType']);
        }
        // ensure the json data is a string
        if (data['quantityUOM'] && !(typeof data['quantityUOM'] === 'string' || data['quantityUOM'] instanceof String)) {
            throw new Error("Expected the field `quantityUOM` to be a primitive type in the JSON string but got " + data['quantityUOM']);
        }

        return true;
    }


}



/**
 * @member {module:model/OrderLineItemQuantitiesInner.QuantityContextEnum} quantityContext
 */
OrderLineItemQuantitiesInner.prototype['quantityContext'] = undefined;

/**
 * @member {module:model/OrderLineItemQuantitiesInner.QuantityTypeEnum} quantityType
 */
OrderLineItemQuantitiesInner.prototype['quantityType'] = undefined;

/**
 * @member {module:model/OrderLineItemQuantitiesInner.QuantityUOMEnum} quantityUOM
 */
OrderLineItemQuantitiesInner.prototype['quantityUOM'] = undefined;

/**
 * @member {Number} quantityValue
 */
OrderLineItemQuantitiesInner.prototype['quantityValue'] = undefined;





/**
 * Allowed values for the <code>quantityContext</code> property.
 * @enum {String}
 * @readonly
 */
OrderLineItemQuantitiesInner['QuantityContextEnum'] = {

    /**
     * value: "Confirmed"
     * @const
     */
    "Confirmed": "Confirmed",

    /**
     * value: "Invoiced"
     * @const
     */
    "Invoiced": "Invoiced",

    /**
     * value: "Ordered"
     * @const
     */
    "Ordered": "Ordered",

    /**
     * value: "Produced"
     * @const
     */
    "Produced": "Produced",

    /**
     * value: "Shipped"
     * @const
     */
    "Shipped": "Shipped"
};


/**
 * Allowed values for the <code>quantityType</code> property.
 * @enum {String}
 * @readonly
 */
OrderLineItemQuantitiesInner['QuantityTypeEnum'] = {

    /**
     * value: "Area"
     * @const
     */
    "Area": "Area",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "GrossWeight"
     * @const
     */
    "GrossWeight": "GrossWeight",

    /**
     * value: "Length"
     * @const
     */
    "Length": "Length",

    /**
     * value: "NetNetWeight"
     * @const
     */
    "NetNetWeight": "NetNetWeight",

    /**
     * value: "NetWeight"
     * @const
     */
    "NetWeight": "NetWeight",

    /**
     * value: "NominalWeight"
     * @const
     */
    "NominalWeight": "NominalWeight",

    /**
     * value: "TareWeight"
     * @const
     */
    "TareWeight": "TareWeight"
};


/**
 * Allowed values for the <code>quantityUOM</code> property.
 * @enum {String}
 * @readonly
 */
OrderLineItemQuantitiesInner['QuantityUOMEnum'] = {

    /**
     * value: "Bale"
     * @const
     */
    "Bale": "Bale",

    /**
     * value: "Box"
     * @const
     */
    "Box": "Box",

    /**
     * value: "Centimeter"
     * @const
     */
    "Centimeter": "Centimeter",

    /**
     * value: "Decimeter"
     * @const
     */
    "Decimeter": "Decimeter",

    /**
     * value: "Foot"
     * @const
     */
    "Foot": "Foot",

    /**
     * value: "Gram"
     * @const
     */
    "Gram": "Gram",

    /**
     * value: "HundredPounds"
     * @const
     */
    "HundredPounds": "HundredPounds",

    /**
     * value: "Inch"
     * @const
     */
    "Inch": "Inch",

    /**
     * value: "Kilogram"
     * @const
     */
    "Kilogram": "Kilogram",

    /**
     * value: "Kilometer"
     * @const
     */
    "Kilometer": "Kilometer",

    /**
     * value: "Meter"
     * @const
     */
    "Meter": "Meter",

    /**
     * value: "MetricTon"
     * @const
     */
    "MetricTon": "MetricTon",

    /**
     * value: "Millimeter"
     * @const
     */
    "Millimeter": "Millimeter",

    /**
     * value: "Package"
     * @const
     */
    "Package": "Package",

    /**
     * value: "PalletUnit"
     * @const
     */
    "PalletUnit": "PalletUnit",

    /**
     * value: "Piece"
     * @const
     */
    "Piece": "Piece",

    /**
     * value: "Pound"
     * @const
     */
    "Pound": "Pound",

    /**
     * value: "PulpUnit"
     * @const
     */
    "PulpUnit": "PulpUnit",

    /**
     * value: "Ream"
     * @const
     */
    "Ream": "Ream",

    /**
     * value: "Reel"
     * @const
     */
    "Reel": "Reel",

    /**
     * value: "Sheet"
     * @const
     */
    "Sheet": "Sheet",

    /**
     * value: "ShortTon"
     * @const
     */
    "ShortTon": "ShortTon",

    /**
     * value: "Skid"
     * @const
     */
    "Skid": "Skid",

    /**
     * value: "SquareDecimeter"
     * @const
     */
    "SquareDecimeter": "SquareDecimeter",

    /**
     * value: "SquareFoot"
     * @const
     */
    "SquareFoot": "SquareFoot",

    /**
     * value: "SquareInch"
     * @const
     */
    "SquareInch": "SquareInch",

    /**
     * value: "SquareMeter"
     * @const
     */
    "SquareMeter": "SquareMeter",

    /**
     * value: "ThousandPieces"
     * @const
     */
    "ThousandPieces": "ThousandPieces",

    /**
     * value: "ThousandSquareCentimeters"
     * @const
     */
    "ThousandSquareCentimeters": "ThousandSquareCentimeters",

    /**
     * value: "ThousandSquareFeet"
     * @const
     */
    "ThousandSquareFeet": "ThousandSquareFeet",

    /**
     * value: "ThousandSquareInches"
     * @const
     */
    "ThousandSquareInches": "ThousandSquareInches",

    /**
     * value: "Yard"
     * @const
     */
    "Yard": "Yard"
};



export default OrderLineItemQuantitiesInner;

