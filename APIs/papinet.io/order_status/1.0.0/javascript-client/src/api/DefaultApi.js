/**
 * papiNet API
 * papinet API is a global initiative for the Forst and Paper supply chain.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListOfOrders from '../model/ListOfOrders';
import Order from '../model/Order';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ordersGet operation.
     * @callback module:api/DefaultApi~ordersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List `orders`
     * Gets a paginated list of all `orders`.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderStatus] Filter by status
     * @param {String} [offset] The number of items to skip before starting to collect the result set.
     * @param {String} [limit] The maximum number of items to return. If the value exceeds the maximum, then the maximum value will be used.
     * @param {module:api/DefaultApi~ordersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfOrders}
     */
    ordersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'orderStatus': opts['orderStatus'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOfOrders;
      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOrderIdGet operation.
     * @callback module:api/DefaultApi~ordersOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an `order`
     * Gets the details of a specific `order`, including a paginated list of all its lines.
     * @param {String} orderId UUID of the `order` to get
     * @param {module:api/DefaultApi~ordersOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    ordersOrderIdGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdGet");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
