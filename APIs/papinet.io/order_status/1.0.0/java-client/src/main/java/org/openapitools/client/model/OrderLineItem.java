/*
 * papiNet API
 * papinet API is a global initiative for the Forst and Paper supply chain.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.OrderLineItemQuantitiesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:34.596108-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItem {
  public static final String SERIALIZED_NAME_CHANGEABLE = "changeable";
  @SerializedName(SERIALIZED_NAME_CHANGEABLE)
  private Boolean changeable;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ORDER_LINE_ITEM_NUMBER = "orderLineItemNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_LINE_ITEM_NUMBER)
  private BigDecimal orderLineItemNumber;

  /**
   * Gets or Sets orderLineItemStatus
   */
  @JsonAdapter(OrderLineItemStatusEnum.Adapter.class)
  public enum OrderLineItemStatusEnum {
    CANCELLED("Cancelled"),
    
    COMPLETED("Completed"),
    
    CONFIRMED("Confirmed"),
    
    PENDING("Pending"),
    
    PRODUCTION_COMPLETED("ProductionCompleted"),
    
    SHIPMENT_COMPLETED("ShipmentCompleted");

    private String value;

    OrderLineItemStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderLineItemStatusEnum fromValue(String value) {
      for (OrderLineItemStatusEnum b : OrderLineItemStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderLineItemStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderLineItemStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderLineItemStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderLineItemStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderLineItemStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_LINE_ITEM_STATUS = "orderLineItemStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_LINE_ITEM_STATUS)
  private OrderLineItemStatusEnum orderLineItemStatus;

  public static final String SERIALIZED_NAME_QUANTITIES = "quantities";
  @SerializedName(SERIALIZED_NAME_QUANTITIES)
  private List<OrderLineItemQuantitiesInner> quantities = new ArrayList<>();

  public OrderLineItem() {
  }

  public OrderLineItem changeable(Boolean changeable) {
    this.changeable = changeable;
    return this;
  }

  /**
   * Get changeable
   * @return changeable
   */
  @javax.annotation.Nullable
  public Boolean getChangeable() {
    return changeable;
  }

  public void setChangeable(Boolean changeable) {
    this.changeable = changeable;
  }


  public OrderLineItem id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public OrderLineItem orderLineItemNumber(BigDecimal orderLineItemNumber) {
    this.orderLineItemNumber = orderLineItemNumber;
    return this;
  }

  /**
   * Get orderLineItemNumber
   * minimum: 0
   * @return orderLineItemNumber
   */
  @javax.annotation.Nonnull
  public BigDecimal getOrderLineItemNumber() {
    return orderLineItemNumber;
  }

  public void setOrderLineItemNumber(BigDecimal orderLineItemNumber) {
    this.orderLineItemNumber = orderLineItemNumber;
  }


  public OrderLineItem orderLineItemStatus(OrderLineItemStatusEnum orderLineItemStatus) {
    this.orderLineItemStatus = orderLineItemStatus;
    return this;
  }

  /**
   * Get orderLineItemStatus
   * @return orderLineItemStatus
   */
  @javax.annotation.Nonnull
  public OrderLineItemStatusEnum getOrderLineItemStatus() {
    return orderLineItemStatus;
  }

  public void setOrderLineItemStatus(OrderLineItemStatusEnum orderLineItemStatus) {
    this.orderLineItemStatus = orderLineItemStatus;
  }


  public OrderLineItem quantities(List<OrderLineItemQuantitiesInner> quantities) {
    this.quantities = quantities;
    return this;
  }

  public OrderLineItem addQuantitiesItem(OrderLineItemQuantitiesInner quantitiesItem) {
    if (this.quantities == null) {
      this.quantities = new ArrayList<>();
    }
    this.quantities.add(quantitiesItem);
    return this;
  }

  /**
   * Get quantities
   * @return quantities
   */
  @javax.annotation.Nullable
  public List<OrderLineItemQuantitiesInner> getQuantities() {
    return quantities;
  }

  public void setQuantities(List<OrderLineItemQuantitiesInner> quantities) {
    this.quantities = quantities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItem orderLineItem = (OrderLineItem) o;
    return Objects.equals(this.changeable, orderLineItem.changeable) &&
        Objects.equals(this.id, orderLineItem.id) &&
        Objects.equals(this.orderLineItemNumber, orderLineItem.orderLineItemNumber) &&
        Objects.equals(this.orderLineItemStatus, orderLineItem.orderLineItemStatus) &&
        Objects.equals(this.quantities, orderLineItem.quantities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeable, id, orderLineItemNumber, orderLineItemStatus, quantities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItem {\n");
    sb.append("    changeable: ").append(toIndentedString(changeable)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orderLineItemNumber: ").append(toIndentedString(orderLineItemNumber)).append("\n");
    sb.append("    orderLineItemStatus: ").append(toIndentedString(orderLineItemStatus)).append("\n");
    sb.append("    quantities: ").append(toIndentedString(quantities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeable");
    openapiFields.add("id");
    openapiFields.add("orderLineItemNumber");
    openapiFields.add("orderLineItemStatus");
    openapiFields.add("quantities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orderLineItemNumber");
    openapiRequiredFields.add("orderLineItemStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItem is not found in the empty JSON string", OrderLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLineItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("orderLineItemStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderLineItemStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderLineItemStatus").toString()));
      }
      // validate the required field `orderLineItemStatus`
      OrderLineItemStatusEnum.validateJsonElement(jsonObj.get("orderLineItemStatus"));
      if (jsonObj.get("quantities") != null && !jsonObj.get("quantities").isJsonNull()) {
        JsonArray jsonArrayquantities = jsonObj.getAsJsonArray("quantities");
        if (jsonArrayquantities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quantities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quantities` to be an array in the JSON string but got `%s`", jsonObj.get("quantities").toString()));
          }

          // validate the optional field `quantities` (array)
          for (int i = 0; i < jsonArrayquantities.size(); i++) {
            OrderLineItemQuantitiesInner.validateJsonElement(jsonArrayquantities.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItem>() {
           @Override
           public void write(JsonWriter out, OrderLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItem
   * @throws IOException if the JSON string is invalid with respect to OrderLineItem
   */
  public static OrderLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItem.class);
  }

  /**
   * Convert an instance of OrderLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

