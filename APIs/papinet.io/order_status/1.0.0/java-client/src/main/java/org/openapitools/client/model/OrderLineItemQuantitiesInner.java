/*
 * papiNet API
 * papinet API is a global initiative for the Forst and Paper supply chain.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLineItemQuantitiesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:34.596108-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItemQuantitiesInner {
  /**
   * Gets or Sets quantityContext
   */
  @JsonAdapter(QuantityContextEnum.Adapter.class)
  public enum QuantityContextEnum {
    CONFIRMED("Confirmed"),
    
    INVOICED("Invoiced"),
    
    ORDERED("Ordered"),
    
    PRODUCED("Produced"),
    
    SHIPPED("Shipped");

    private String value;

    QuantityContextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuantityContextEnum fromValue(String value) {
      for (QuantityContextEnum b : QuantityContextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuantityContextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuantityContextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuantityContextEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuantityContextEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuantityContextEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUANTITY_CONTEXT = "quantityContext";
  @SerializedName(SERIALIZED_NAME_QUANTITY_CONTEXT)
  private QuantityContextEnum quantityContext;

  /**
   * Gets or Sets quantityType
   */
  @JsonAdapter(QuantityTypeEnum.Adapter.class)
  public enum QuantityTypeEnum {
    AREA("Area"),
    
    COUNT("Count"),
    
    GROSS_WEIGHT("GrossWeight"),
    
    LENGTH("Length"),
    
    NET_NET_WEIGHT("NetNetWeight"),
    
    NET_WEIGHT("NetWeight"),
    
    NOMINAL_WEIGHT("NominalWeight"),
    
    TARE_WEIGHT("TareWeight");

    private String value;

    QuantityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuantityTypeEnum fromValue(String value) {
      for (QuantityTypeEnum b : QuantityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuantityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuantityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuantityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuantityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuantityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUANTITY_TYPE = "quantityType";
  @SerializedName(SERIALIZED_NAME_QUANTITY_TYPE)
  private QuantityTypeEnum quantityType;

  /**
   * Gets or Sets quantityUOM
   */
  @JsonAdapter(QuantityUOMEnum.Adapter.class)
  public enum QuantityUOMEnum {
    BALE("Bale"),
    
    BOX("Box"),
    
    CENTIMETER("Centimeter"),
    
    DECIMETER("Decimeter"),
    
    FOOT("Foot"),
    
    GRAM("Gram"),
    
    HUNDRED_POUNDS("HundredPounds"),
    
    INCH("Inch"),
    
    KILOGRAM("Kilogram"),
    
    KILOMETER("Kilometer"),
    
    METER("Meter"),
    
    METRIC_TON("MetricTon"),
    
    MILLIMETER("Millimeter"),
    
    PACKAGE("Package"),
    
    PALLET_UNIT("PalletUnit"),
    
    PIECE("Piece"),
    
    POUND("Pound"),
    
    PULP_UNIT("PulpUnit"),
    
    REAM("Ream"),
    
    REEL("Reel"),
    
    SHEET("Sheet"),
    
    SHORT_TON("ShortTon"),
    
    SKID("Skid"),
    
    SQUARE_DECIMETER("SquareDecimeter"),
    
    SQUARE_FOOT("SquareFoot"),
    
    SQUARE_INCH("SquareInch"),
    
    SQUARE_METER("SquareMeter"),
    
    THOUSAND_PIECES("ThousandPieces"),
    
    THOUSAND_SQUARE_CENTIMETERS("ThousandSquareCentimeters"),
    
    THOUSAND_SQUARE_FEET("ThousandSquareFeet"),
    
    THOUSAND_SQUARE_INCHES("ThousandSquareInches"),
    
    YARD("Yard");

    private String value;

    QuantityUOMEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuantityUOMEnum fromValue(String value) {
      for (QuantityUOMEnum b : QuantityUOMEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuantityUOMEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuantityUOMEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuantityUOMEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuantityUOMEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuantityUOMEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUANTITY_U_O_M = "quantityUOM";
  @SerializedName(SERIALIZED_NAME_QUANTITY_U_O_M)
  private QuantityUOMEnum quantityUOM;

  public static final String SERIALIZED_NAME_QUANTITY_VALUE = "quantityValue";
  @SerializedName(SERIALIZED_NAME_QUANTITY_VALUE)
  private BigDecimal quantityValue;

  public OrderLineItemQuantitiesInner() {
  }

  public OrderLineItemQuantitiesInner quantityContext(QuantityContextEnum quantityContext) {
    this.quantityContext = quantityContext;
    return this;
  }

  /**
   * Get quantityContext
   * @return quantityContext
   */
  @javax.annotation.Nullable
  public QuantityContextEnum getQuantityContext() {
    return quantityContext;
  }

  public void setQuantityContext(QuantityContextEnum quantityContext) {
    this.quantityContext = quantityContext;
  }


  public OrderLineItemQuantitiesInner quantityType(QuantityTypeEnum quantityType) {
    this.quantityType = quantityType;
    return this;
  }

  /**
   * Get quantityType
   * @return quantityType
   */
  @javax.annotation.Nullable
  public QuantityTypeEnum getQuantityType() {
    return quantityType;
  }

  public void setQuantityType(QuantityTypeEnum quantityType) {
    this.quantityType = quantityType;
  }


  public OrderLineItemQuantitiesInner quantityUOM(QuantityUOMEnum quantityUOM) {
    this.quantityUOM = quantityUOM;
    return this;
  }

  /**
   * Get quantityUOM
   * @return quantityUOM
   */
  @javax.annotation.Nullable
  public QuantityUOMEnum getQuantityUOM() {
    return quantityUOM;
  }

  public void setQuantityUOM(QuantityUOMEnum quantityUOM) {
    this.quantityUOM = quantityUOM;
  }


  public OrderLineItemQuantitiesInner quantityValue(BigDecimal quantityValue) {
    this.quantityValue = quantityValue;
    return this;
  }

  /**
   * Get quantityValue
   * @return quantityValue
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantityValue() {
    return quantityValue;
  }

  public void setQuantityValue(BigDecimal quantityValue) {
    this.quantityValue = quantityValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItemQuantitiesInner orderLineItemQuantitiesInner = (OrderLineItemQuantitiesInner) o;
    return Objects.equals(this.quantityContext, orderLineItemQuantitiesInner.quantityContext) &&
        Objects.equals(this.quantityType, orderLineItemQuantitiesInner.quantityType) &&
        Objects.equals(this.quantityUOM, orderLineItemQuantitiesInner.quantityUOM) &&
        Objects.equals(this.quantityValue, orderLineItemQuantitiesInner.quantityValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantityContext, quantityType, quantityUOM, quantityValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItemQuantitiesInner {\n");
    sb.append("    quantityContext: ").append(toIndentedString(quantityContext)).append("\n");
    sb.append("    quantityType: ").append(toIndentedString(quantityType)).append("\n");
    sb.append("    quantityUOM: ").append(toIndentedString(quantityUOM)).append("\n");
    sb.append("    quantityValue: ").append(toIndentedString(quantityValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantityContext");
    openapiFields.add("quantityType");
    openapiFields.add("quantityUOM");
    openapiFields.add("quantityValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItemQuantitiesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItemQuantitiesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItemQuantitiesInner is not found in the empty JSON string", OrderLineItemQuantitiesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItemQuantitiesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItemQuantitiesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("quantityContext") != null && !jsonObj.get("quantityContext").isJsonNull()) && !jsonObj.get("quantityContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantityContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantityContext").toString()));
      }
      // validate the optional field `quantityContext`
      if (jsonObj.get("quantityContext") != null && !jsonObj.get("quantityContext").isJsonNull()) {
        QuantityContextEnum.validateJsonElement(jsonObj.get("quantityContext"));
      }
      if ((jsonObj.get("quantityType") != null && !jsonObj.get("quantityType").isJsonNull()) && !jsonObj.get("quantityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantityType").toString()));
      }
      // validate the optional field `quantityType`
      if (jsonObj.get("quantityType") != null && !jsonObj.get("quantityType").isJsonNull()) {
        QuantityTypeEnum.validateJsonElement(jsonObj.get("quantityType"));
      }
      if ((jsonObj.get("quantityUOM") != null && !jsonObj.get("quantityUOM").isJsonNull()) && !jsonObj.get("quantityUOM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantityUOM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantityUOM").toString()));
      }
      // validate the optional field `quantityUOM`
      if (jsonObj.get("quantityUOM") != null && !jsonObj.get("quantityUOM").isJsonNull()) {
        QuantityUOMEnum.validateJsonElement(jsonObj.get("quantityUOM"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItemQuantitiesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItemQuantitiesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItemQuantitiesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItemQuantitiesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItemQuantitiesInner>() {
           @Override
           public void write(JsonWriter out, OrderLineItemQuantitiesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItemQuantitiesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItemQuantitiesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItemQuantitiesInner
   * @throws IOException if the JSON string is invalid with respect to OrderLineItemQuantitiesInner
   */
  public static OrderLineItemQuantitiesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItemQuantitiesInner.class);
  }

  /**
   * Convert an instance of OrderLineItemQuantitiesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

