/**
 * Orders API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion3Api.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIVersion3Api::OAIVersion3Api(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIVersion3Api::~OAIVersion3Api() {
}

void OAIVersion3Api::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://developer.walmart.com/orderProxy/order-api-doc-app/rest"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("acknowledgeOrders", defaultConf);
    _serverIndices.insert("acknowledgeOrders", 0);
    _serverConfigs.insert("cancelOrder", defaultConf);
    _serverIndices.insert("cancelOrder", 0);
    _serverConfigs.insert("getAllOrders", defaultConf);
    _serverIndices.insert("getAllOrders", 0);
    _serverConfigs.insert("getAllOrdersNext", defaultConf);
    _serverIndices.insert("getAllOrdersNext", 0);
    _serverConfigs.insert("getNextCursorReleasedOrders", defaultConf);
    _serverIndices.insert("getNextCursorReleasedOrders", 0);
    _serverConfigs.insert("getOrderByPurchaseOrderId", defaultConf);
    _serverIndices.insert("getOrderByPurchaseOrderId", 0);
    _serverConfigs.insert("getReleasedOrders", defaultConf);
    _serverIndices.insert("getReleasedOrders", 0);
    _serverConfigs.insert("refundOrder", defaultConf);
    _serverIndices.insert("refundOrder", 0);
    _serverConfigs.insert("shippingOrder", defaultConf);
    _serverIndices.insert("shippingOrder", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIVersion3Api::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIVersion3Api::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIVersion3Api::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIVersion3Api::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIVersion3Api::setUsername(const QString &username) {
    _username = username;
}

void OAIVersion3Api::setPassword(const QString &password) {
    _password = password;
}


void OAIVersion3Api::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIVersion3Api::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIVersion3Api::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIVersion3Api::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIVersion3Api::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIVersion3Api::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIVersion3Api::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIVersion3Api::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIVersion3Api::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIVersion3Api::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIVersion3Api::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIVersion3Api::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIVersion3Api::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIVersion3Api::acknowledgeOrders(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node) {
    QString fullPath = QString(_serverConfigs["acknowledgeOrders"][_serverIndices.value("acknowledgeOrders")].URL()+"/v3/orders/{purchaseOrderId}/acknowledge");
    
    
    {
        QString purchase_order_idPathParam("{");
        purchase_order_idPathParam.append("purchaseOrderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "purchaseOrderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"purchaseOrderId"+pathSuffix : pathPrefix;
        fullPath.replace(purchase_order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(purchase_order_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::acknowledgeOrdersCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::acknowledgeOrdersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT acknowledgeOrdersSignal();
        Q_EMIT acknowledgeOrdersSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT acknowledgeOrdersSignalE(error_type, error_str);
        Q_EMIT acknowledgeOrdersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT acknowledgeOrdersSignalError(error_type, error_str);
        Q_EMIT acknowledgeOrdersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::cancelOrder(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const QString &request_body, const ::OpenAPI::OptionalParam<QString> &ship_node) {
    QString fullPath = QString(_serverConfigs["cancelOrder"][_serverIndices.value("cancelOrder")].URL()+"/v3/orders/{purchaseOrderId}/cancel");
    
    
    {
        QString purchase_order_idPathParam("{");
        purchase_order_idPathParam.append("purchaseOrderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "purchaseOrderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"purchaseOrderId"+pathSuffix : pathPrefix;
        fullPath.replace(purchase_order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(purchase_order_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = request_body.toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::cancelOrderCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::cancelOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cancelOrderSignal();
        Q_EMIT cancelOrderSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cancelOrderSignalE(error_type, error_str);
        Q_EMIT cancelOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cancelOrderSignalError(error_type, error_str);
        Q_EMIT cancelOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::getAllOrders(const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node, const ::OpenAPI::OptionalParam<QString> &sku, const ::OpenAPI::OptionalParam<QString> &customer_order_id, const ::OpenAPI::OptionalParam<QString> &purchase_order_id, const ::OpenAPI::OptionalParam<QString> &status, const ::OpenAPI::OptionalParam<QString> &created_start_date, const ::OpenAPI::OptionalParam<QString> &created_end_date, const ::OpenAPI::OptionalParam<QString> &from_expected_ship_date, const ::OpenAPI::OptionalParam<QString> &to_expected_ship_date, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["getAllOrders"][_serverIndices.value("getAllOrders")].URL()+"/v3/orders");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    if (sku.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sku", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sku")).append(querySuffix).append(QUrl::toPercentEncoding(sku.stringValue()));
    }
    if (customer_order_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "customerOrderId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("customerOrderId")).append(querySuffix).append(QUrl::toPercentEncoding(customer_order_id.stringValue()));
    }
    if (purchase_order_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "purchaseOrderId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("purchaseOrderId")).append(querySuffix).append(QUrl::toPercentEncoding(purchase_order_id.stringValue()));
    }
    if (status.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status")).append(querySuffix).append(QUrl::toPercentEncoding(status.stringValue()));
    }
    if (created_start_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "createdStartDate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("createdStartDate")).append(querySuffix).append(QUrl::toPercentEncoding(created_start_date.stringValue()));
    }
    if (created_end_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "createdEndDate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("createdEndDate")).append(querySuffix).append(QUrl::toPercentEncoding(created_end_date.stringValue()));
    }
    if (from_expected_ship_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fromExpectedShipDate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fromExpectedShipDate")).append(querySuffix).append(QUrl::toPercentEncoding(from_expected_ship_date.stringValue()));
    }
    if (to_expected_ship_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "toExpectedShipDate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("toExpectedShipDate")).append(querySuffix).append(QUrl::toPercentEncoding(to_expected_ship_date.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::getAllOrdersCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::getAllOrdersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllOrdersSignal();
        Q_EMIT getAllOrdersSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllOrdersSignalE(error_type, error_str);
        Q_EMIT getAllOrdersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllOrdersSignalError(error_type, error_str);
        Q_EMIT getAllOrdersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::getAllOrdersNext(const QString &next_cursor, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id) {
    QString fullPath = QString(_serverConfigs["getAllOrdersNext"][_serverIndices.value("getAllOrdersNext")].URL()+"/v3/orders{nextCursor}");
    
    
    {
        QString next_cursorPathParam("{");
        next_cursorPathParam.append("nextCursor").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nextCursor", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nextCursor"+pathSuffix : pathPrefix;
        fullPath.replace(next_cursorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(next_cursor)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::getAllOrdersNextCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::getAllOrdersNextCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllOrdersNextSignal();
        Q_EMIT getAllOrdersNextSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllOrdersNextSignalE(error_type, error_str);
        Q_EMIT getAllOrdersNextSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllOrdersNextSignalError(error_type, error_str);
        Q_EMIT getAllOrdersNextSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::getNextCursorReleasedOrders(const QString &next_cursor, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id) {
    QString fullPath = QString(_serverConfigs["getNextCursorReleasedOrders"][_serverIndices.value("getNextCursorReleasedOrders")].URL()+"/v3/orders/released{nextCursor}");
    
    
    {
        QString next_cursorPathParam("{");
        next_cursorPathParam.append("nextCursor").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nextCursor", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nextCursor"+pathSuffix : pathPrefix;
        fullPath.replace(next_cursorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(next_cursor)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::getNextCursorReleasedOrdersCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::getNextCursorReleasedOrdersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNextCursorReleasedOrdersSignal();
        Q_EMIT getNextCursorReleasedOrdersSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNextCursorReleasedOrdersSignalE(error_type, error_str);
        Q_EMIT getNextCursorReleasedOrdersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNextCursorReleasedOrdersSignalError(error_type, error_str);
        Q_EMIT getNextCursorReleasedOrdersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::getOrderByPurchaseOrderId(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node) {
    QString fullPath = QString(_serverConfigs["getOrderByPurchaseOrderId"][_serverIndices.value("getOrderByPurchaseOrderId")].URL()+"/v3/orders/{purchaseOrderId}");
    
    
    {
        QString purchase_order_idPathParam("{");
        purchase_order_idPathParam.append("purchaseOrderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "purchaseOrderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"purchaseOrderId"+pathSuffix : pathPrefix;
        fullPath.replace(purchase_order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(purchase_order_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::getOrderByPurchaseOrderIdCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::getOrderByPurchaseOrderIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOrderByPurchaseOrderIdSignal();
        Q_EMIT getOrderByPurchaseOrderIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOrderByPurchaseOrderIdSignalE(error_type, error_str);
        Q_EMIT getOrderByPurchaseOrderIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOrderByPurchaseOrderIdSignalError(error_type, error_str);
        Q_EMIT getOrderByPurchaseOrderIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::getReleasedOrders(const QString &created_start_date, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["getReleasedOrders"][_serverIndices.value("getReleasedOrders")].URL()+"/v3/orders/released");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "createdStartDate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("createdStartDate")).append(querySuffix).append(QUrl::toPercentEncoding(created_start_date));
    }
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::getReleasedOrdersCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::getReleasedOrdersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getReleasedOrdersSignal();
        Q_EMIT getReleasedOrdersSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getReleasedOrdersSignalE(error_type, error_str);
        Q_EMIT getReleasedOrdersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getReleasedOrdersSignalError(error_type, error_str);
        Q_EMIT getReleasedOrdersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::refundOrder(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const QString &request_body, const ::OpenAPI::OptionalParam<QString> &ship_node) {
    QString fullPath = QString(_serverConfigs["refundOrder"][_serverIndices.value("refundOrder")].URL()+"/v3/orders/{purchaseOrderId}/refund");
    
    
    {
        QString purchase_order_idPathParam("{");
        purchase_order_idPathParam.append("purchaseOrderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "purchaseOrderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"purchaseOrderId"+pathSuffix : pathPrefix;
        fullPath.replace(purchase_order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(purchase_order_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = request_body.toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::refundOrderCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::refundOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT refundOrderSignal();
        Q_EMIT refundOrderSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT refundOrderSignalE(error_type, error_str);
        Q_EMIT refundOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT refundOrderSignalError(error_type, error_str);
        Q_EMIT refundOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::shippingOrder(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const QString &request_body, const ::OpenAPI::OptionalParam<QString> &ship_node) {
    QString fullPath = QString(_serverConfigs["shippingOrder"][_serverIndices.value("shippingOrder")].URL()+"/v3/orders/{purchaseOrderId}/shipping");
    
    
    {
        QString purchase_order_idPathParam("{");
        purchase_order_idPathParam.append("purchaseOrderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "purchaseOrderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"purchaseOrderId"+pathSuffix : pathPrefix;
        fullPath.replace(purchase_order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(purchase_order_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = request_body.toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_consumer_id).isEmpty()) {
            input.headers.insert("WM_CONSUMER.ID", ::OpenAPI::toStringValue(wm_consumer_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_timestamp).isEmpty()) {
            input.headers.insert("WM_SEC.TIMESTAMP", ::OpenAPI::toStringValue(wm_sec_timestamp));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_auth_signature).isEmpty()) {
            input.headers.insert("WM_SEC.AUTH_SIGNATURE", ::OpenAPI::toStringValue(wm_sec_auth_signature));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVersion3Api::shippingOrderCallback);
    connect(this, &OAIVersion3Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVersion3Api::shippingOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT shippingOrderSignal();
        Q_EMIT shippingOrderSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT shippingOrderSignalE(error_type, error_str);
        Q_EMIT shippingOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT shippingOrderSignalError(error_type, error_str);
        Q_EMIT shippingOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVersion3Api::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
