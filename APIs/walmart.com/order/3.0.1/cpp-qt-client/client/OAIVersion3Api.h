/**
 * Orders API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVersion3Api_H
#define OAI_OAIVersion3Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVersion3Api : public QObject {
    Q_OBJECT

public:
    OAIVersion3Api(const int timeOut = 0);
    ~OAIVersion3Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  ship_node QString [optional]
    */
    virtual void acknowledgeOrders(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  request_body QString [required]
    * @param[in]  ship_node QString [optional]
    */
    virtual void cancelOrder(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const QString &request_body, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  ship_node QString [optional]
    * @param[in]  sku QString [optional]
    * @param[in]  customer_order_id QString [optional]
    * @param[in]  purchase_order_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  created_start_date QString [optional]
    * @param[in]  created_end_date QString [optional]
    * @param[in]  from_expected_ship_date QString [optional]
    * @param[in]  to_expected_ship_date QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getAllOrders(const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &purchase_order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_expected_ship_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_expected_ship_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  next_cursor QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    */
    virtual void getAllOrdersNext(const QString &next_cursor, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id);

    /**
    * @param[in]  next_cursor QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    */
    virtual void getNextCursorReleasedOrders(const QString &next_cursor, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id);

    /**
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  ship_node QString [optional]
    */
    virtual void getOrderByPurchaseOrderId(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  created_start_date QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  ship_node QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getReleasedOrders(const QString &created_start_date, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  request_body QString [required]
    * @param[in]  ship_node QString [optional]
    */
    virtual void refundOrder(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const QString &request_body, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  request_body QString [required]
    * @param[in]  ship_node QString [optional]
    */
    virtual void shippingOrder(const QString &purchase_order_id, const QString &content_type, const QString &accept, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const QString &request_body, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acknowledgeOrdersCallback(OAIHttpRequestWorker *worker);
    void cancelOrderCallback(OAIHttpRequestWorker *worker);
    void getAllOrdersCallback(OAIHttpRequestWorker *worker);
    void getAllOrdersNextCallback(OAIHttpRequestWorker *worker);
    void getNextCursorReleasedOrdersCallback(OAIHttpRequestWorker *worker);
    void getOrderByPurchaseOrderIdCallback(OAIHttpRequestWorker *worker);
    void getReleasedOrdersCallback(OAIHttpRequestWorker *worker);
    void refundOrderCallback(OAIHttpRequestWorker *worker);
    void shippingOrderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acknowledgeOrdersSignal();
    void cancelOrderSignal();
    void getAllOrdersSignal();
    void getAllOrdersNextSignal();
    void getNextCursorReleasedOrdersSignal();
    void getOrderByPurchaseOrderIdSignal();
    void getReleasedOrdersSignal();
    void refundOrderSignal();
    void shippingOrderSignal();


    void acknowledgeOrdersSignalFull(OAIHttpRequestWorker *worker);
    void cancelOrderSignalFull(OAIHttpRequestWorker *worker);
    void getAllOrdersSignalFull(OAIHttpRequestWorker *worker);
    void getAllOrdersNextSignalFull(OAIHttpRequestWorker *worker);
    void getNextCursorReleasedOrdersSignalFull(OAIHttpRequestWorker *worker);
    void getOrderByPurchaseOrderIdSignalFull(OAIHttpRequestWorker *worker);
    void getReleasedOrdersSignalFull(OAIHttpRequestWorker *worker);
    void refundOrderSignalFull(OAIHttpRequestWorker *worker);
    void shippingOrderSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use acknowledgeOrdersSignalError() instead")
    void acknowledgeOrdersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void acknowledgeOrdersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelOrderSignalError() instead")
    void cancelOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrdersSignalError() instead")
    void getAllOrdersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrdersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrdersNextSignalError() instead")
    void getAllOrdersNextSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrdersNextSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextCursorReleasedOrdersSignalError() instead")
    void getNextCursorReleasedOrdersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNextCursorReleasedOrdersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderByPurchaseOrderIdSignalError() instead")
    void getOrderByPurchaseOrderIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderByPurchaseOrderIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReleasedOrdersSignalError() instead")
    void getReleasedOrdersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReleasedOrdersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refundOrderSignalError() instead")
    void refundOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refundOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shippingOrderSignalError() instead")
    void shippingOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shippingOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acknowledgeOrdersSignalErrorFull() instead")
    void acknowledgeOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acknowledgeOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelOrderSignalErrorFull() instead")
    void cancelOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrdersSignalErrorFull() instead")
    void getAllOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrdersNextSignalErrorFull() instead")
    void getAllOrdersNextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrdersNextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextCursorReleasedOrdersSignalErrorFull() instead")
    void getNextCursorReleasedOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextCursorReleasedOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderByPurchaseOrderIdSignalErrorFull() instead")
    void getOrderByPurchaseOrderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderByPurchaseOrderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReleasedOrdersSignalErrorFull() instead")
    void getReleasedOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReleasedOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refundOrderSignalErrorFull() instead")
    void refundOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refundOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shippingOrderSignalErrorFull() instead")
    void shippingOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shippingOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
