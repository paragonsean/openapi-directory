/*
 * Orders API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Version3Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Version3Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Version3Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acknowledgeOrders
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acknowledgeOrdersCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/orders/{purchaseOrderId}/acknowledge"
            .replace("{" + "purchaseOrderId" + "}", localVarApiClient.escapeString(purchaseOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acknowledgeOrdersValidateBeforeCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'purchaseOrderId' is set
        if (purchaseOrderId == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderId' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling acknowledgeOrders(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling acknowledgeOrders(Async)");
        }

        return acknowledgeOrdersCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, _callback);

    }

    /**
     * Acknowledge orders
     * You can acknowledge an entire order, including all of its order lines. Walmart business rules require to acknowledge orders within four hour of receipt of the order, except in extenuating circumstances.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void acknowledgeOrders(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode) throws ApiException {
        acknowledgeOrdersWithHttpInfo(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode);
    }

    /**
     * Acknowledge orders
     * You can acknowledge an entire order, including all of its order lines. Walmart business rules require to acknowledge orders within four hour of receipt of the order, except in extenuating circumstances.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acknowledgeOrdersWithHttpInfo(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode) throws ApiException {
        okhttp3.Call localVarCall = acknowledgeOrdersValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Acknowledge orders (asynchronously)
     * You can acknowledge an entire order, including all of its order lines. Walmart business rules require to acknowledge orders within four hour of receipt of the order, except in extenuating circumstances.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acknowledgeOrdersAsync(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acknowledgeOrdersValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelOrder
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOrderCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v3/orders/{purchaseOrderId}/cancel"
            .replace("{" + "purchaseOrderId" + "}", localVarApiClient.escapeString(purchaseOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrderValidateBeforeCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'purchaseOrderId' is set
        if (purchaseOrderId == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderId' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelOrder(Async)");
        }

        return cancelOrderCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, _callback);

    }

    /**
     * Cancel order lines
     * You can cancel one or more order lines. You must include a purchaseOrderLineNumber when cancelling an order. After cancelling your order, update the inventory for the cancelled order and send it in the next inventory feed.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void cancelOrder(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode) throws ApiException {
        cancelOrderWithHttpInfo(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode);
    }

    /**
     * Cancel order lines
     * You can cancel one or more order lines. You must include a purchaseOrderLineNumber when cancelling an order. After cancelling your order, update the inventory for the cancelled order and send it in the next inventory feed.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelOrderWithHttpInfo(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode) throws ApiException {
        okhttp3.Call localVarCall = cancelOrderValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel order lines (asynchronously)
     * You can cancel one or more order lines. You must include a purchaseOrderLineNumber when cancelling an order. After cancelling your order, update the inventory for the cancelled order and send it in the next inventory feed.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOrderAsync(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrderValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllOrders
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param sku Retrieves all orders with the specified SKU. (optional)
     * @param customerOrderId Retrives the details of the specified customerOrderId. (optional)
     * @param purchaseOrderId The purchase order ID associated with the order to retrieve. One customer order can have multiple purchase orders associated with it. (optional)
     * @param status The list of orders corresponding to the requested status. (optional)
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (optional)
     * @param createdEndDate Limit orders to those created before this date or timestamp. (optional)
     * @param fromExpectedShipDate Limit orders to those that have order lines with an expected ship date after this date. (optional)
     * @param toExpectedShipDate Limit orders to those that have order lines with an expected ship date before this date.  (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrdersCall(String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, String sku, String customerOrderId, String purchaseOrderId, String status, String createdStartDate, String createdEndDate, String fromExpectedShipDate, String toExpectedShipDate, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (customerOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerOrderId", customerOrderId));
        }

        if (purchaseOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaseOrderId", purchaseOrderId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (createdStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdStartDate", createdStartDate));
        }

        if (createdEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdEndDate", createdEndDate));
        }

        if (fromExpectedShipDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromExpectedShipDate", fromExpectedShipDate));
        }

        if (toExpectedShipDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toExpectedShipDate", toExpectedShipDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOrdersValidateBeforeCall(String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, String sku, String customerOrderId, String purchaseOrderId, String status, String createdStartDate, String createdEndDate, String fromExpectedShipDate, String toExpectedShipDate, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getAllOrders(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getAllOrders(Async)");
        }

        return getAllOrdersCall(contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, limit, _callback);

    }

    /**
     * Get all orders
     * You can display a list of all orders with the query parameter filter criteria.
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param sku Retrieves all orders with the specified SKU. (optional)
     * @param customerOrderId Retrives the details of the specified customerOrderId. (optional)
     * @param purchaseOrderId The purchase order ID associated with the order to retrieve. One customer order can have multiple purchase orders associated with it. (optional)
     * @param status The list of orders corresponding to the requested status. (optional)
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (optional)
     * @param createdEndDate Limit orders to those created before this date or timestamp. (optional)
     * @param fromExpectedShipDate Limit orders to those that have order lines with an expected ship date after this date. (optional)
     * @param toExpectedShipDate Limit orders to those that have order lines with an expected ship date before this date.  (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getAllOrders(String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, String sku, String customerOrderId, String purchaseOrderId, String status, String createdStartDate, String createdEndDate, String fromExpectedShipDate, String toExpectedShipDate, Integer limit) throws ApiException {
        getAllOrdersWithHttpInfo(contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, limit);
    }

    /**
     * Get all orders
     * You can display a list of all orders with the query parameter filter criteria.
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param sku Retrieves all orders with the specified SKU. (optional)
     * @param customerOrderId Retrives the details of the specified customerOrderId. (optional)
     * @param purchaseOrderId The purchase order ID associated with the order to retrieve. One customer order can have multiple purchase orders associated with it. (optional)
     * @param status The list of orders corresponding to the requested status. (optional)
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (optional)
     * @param createdEndDate Limit orders to those created before this date or timestamp. (optional)
     * @param fromExpectedShipDate Limit orders to those that have order lines with an expected ship date after this date. (optional)
     * @param toExpectedShipDate Limit orders to those that have order lines with an expected ship date before this date.  (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAllOrdersWithHttpInfo(String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, String sku, String customerOrderId, String purchaseOrderId, String status, String createdStartDate, String createdEndDate, String fromExpectedShipDate, String toExpectedShipDate, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllOrdersValidateBeforeCall(contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all orders (asynchronously)
     * You can display a list of all orders with the query parameter filter criteria.
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param sku Retrieves all orders with the specified SKU. (optional)
     * @param customerOrderId Retrives the details of the specified customerOrderId. (optional)
     * @param purchaseOrderId The purchase order ID associated with the order to retrieve. One customer order can have multiple purchase orders associated with it. (optional)
     * @param status The list of orders corresponding to the requested status. (optional)
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (optional)
     * @param createdEndDate Limit orders to those created before this date or timestamp. (optional)
     * @param fromExpectedShipDate Limit orders to those that have order lines with an expected ship date after this date. (optional)
     * @param toExpectedShipDate Limit orders to those that have order lines with an expected ship date before this date.  (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrdersAsync(String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, String sku, String customerOrderId, String purchaseOrderId, String status, String createdStartDate, String createdEndDate, String fromExpectedShipDate, String toExpectedShipDate, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOrdersValidateBeforeCall(contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllOrdersNext
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrdersNextCall(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/orders{nextCursor}"
            .replace("{" + "nextCursor" + "}", localVarApiClient.escapeString(nextCursor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOrdersNextValidateBeforeCall(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nextCursor' is set
        if (nextCursor == null) {
            throw new ApiException("Missing the required parameter 'nextCursor' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getAllOrdersNext(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getAllOrdersNext(Async)");
        }

        return getAllOrdersNextCall(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _callback);

    }

    /**
     * Get orders for next page
     * You can display a list of all orders with nextCursor path parameter pagination criteria.
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getAllOrdersNext(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID) throws ApiException {
        getAllOrdersNextWithHttpInfo(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID);
    }

    /**
     * Get orders for next page
     * You can display a list of all orders with nextCursor path parameter pagination criteria.
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAllOrdersNextWithHttpInfo(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID) throws ApiException {
        okhttp3.Call localVarCall = getAllOrdersNextValidateBeforeCall(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get orders for next page (asynchronously)
     * You can display a list of all orders with nextCursor path parameter pagination criteria.
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrdersNextAsync(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOrdersNextValidateBeforeCall(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNextCursorReleasedOrders
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextCursorReleasedOrdersCall(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/orders/released{nextCursor}"
            .replace("{" + "nextCursor" + "}", localVarApiClient.escapeString(nextCursor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextCursorReleasedOrdersValidateBeforeCall(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nextCursor' is set
        if (nextCursor == null) {
            throw new ApiException("Missing the required parameter 'nextCursor' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getNextCursorReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getNextCursorReleasedOrders(Async)");
        }

        return getNextCursorReleasedOrdersCall(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _callback);

    }

    /**
     * Get released orders for next page
     * You can display all released orders that have been created and are ready for fulfilment with nextCursor path parameter.
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getNextCursorReleasedOrders(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID) throws ApiException {
        getNextCursorReleasedOrdersWithHttpInfo(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID);
    }

    /**
     * Get released orders for next page
     * You can display all released orders that have been created and are ready for fulfilment with nextCursor path parameter.
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getNextCursorReleasedOrdersWithHttpInfo(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID) throws ApiException {
        okhttp3.Call localVarCall = getNextCursorReleasedOrdersValidateBeforeCall(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get released orders for next page (asynchronously)
     * You can display all released orders that have been created and are ready for fulfilment with nextCursor path parameter.
     * @param nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextCursorReleasedOrdersAsync(String nextCursor, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextCursorReleasedOrdersValidateBeforeCall(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderByPurchaseOrderId
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderByPurchaseOrderIdCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/orders/{purchaseOrderId}"
            .replace("{" + "purchaseOrderId" + "}", localVarApiClient.escapeString(purchaseOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderByPurchaseOrderIdValidateBeforeCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'purchaseOrderId' is set
        if (purchaseOrderId == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderId' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getOrderByPurchaseOrderId(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getOrderByPurchaseOrderId(Async)");
        }

        return getOrderByPurchaseOrderIdCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, _callback);

    }

    /**
     * Get an order
     * You can display details of a specific order based on the purchaseOrderId.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getOrderByPurchaseOrderId(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode) throws ApiException {
        getOrderByPurchaseOrderIdWithHttpInfo(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode);
    }

    /**
     * Get an order
     * You can display details of a specific order based on the purchaseOrderId.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrderByPurchaseOrderIdWithHttpInfo(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode) throws ApiException {
        okhttp3.Call localVarCall = getOrderByPurchaseOrderIdValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an order (asynchronously)
     * You can display details of a specific order based on the purchaseOrderId.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderByPurchaseOrderIdAsync(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderByPurchaseOrderIdValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReleasedOrders
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReleasedOrdersCall(String createdStartDate, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/orders/released";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (createdStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdStartDate", createdStartDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReleasedOrdersValidateBeforeCall(String createdStartDate, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createdStartDate' is set
        if (createdStartDate == null) {
            throw new ApiException("Missing the required parameter 'createdStartDate' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getReleasedOrders(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getReleasedOrders(Async)");
        }

        return getReleasedOrdersCall(createdStartDate, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, limit, _callback);

    }

    /**
     * Get all released orders
     * You can display all released orders that have been created and are ready for fulfilment.
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getReleasedOrders(String createdStartDate, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, Integer limit) throws ApiException {
        getReleasedOrdersWithHttpInfo(createdStartDate, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, limit);
    }

    /**
     * Get all released orders
     * You can display all released orders that have been created and are ready for fulfilment.
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getReleasedOrdersWithHttpInfo(String createdStartDate, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getReleasedOrdersValidateBeforeCall(createdStartDate, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all released orders (asynchronously)
     * You can display all released orders that have been created and are ready for fulfilment.
     * @param createdStartDate Limit orders to those created after this date or a timestamp. (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param shipNode Ship Node (optional)
     * @param limit The number of orders to be returned. Do not set this parameter to over 200 orders. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReleasedOrdersAsync(String createdStartDate, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String shipNode, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReleasedOrdersValidateBeforeCall(createdStartDate, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for refundOrder
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundOrderCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v3/orders/{purchaseOrderId}/refund"
            .replace("{" + "purchaseOrderId" + "}", localVarApiClient.escapeString(purchaseOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundOrderValidateBeforeCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'purchaseOrderId' is set
        if (purchaseOrderId == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderId' when calling refundOrder(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling refundOrder(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling refundOrder(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling refundOrder(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling refundOrder(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling refundOrder(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling refundOrder(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling refundOrder(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling refundOrder(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling refundOrder(Async)");
        }

        return refundOrderCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, _callback);

    }

    /**
     * Refund order lines
     * You can refund one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line item.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void refundOrder(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode) throws ApiException {
        refundOrderWithHttpInfo(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode);
    }

    /**
     * Refund order lines
     * You can refund one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line item.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> refundOrderWithHttpInfo(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode) throws ApiException {
        okhttp3.Call localVarCall = refundOrderValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refund order lines (asynchronously)
     * You can refund one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line item.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundOrderAsync(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundOrderValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingOrder
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingOrderCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v3/orders/{purchaseOrderId}/shipping"
            .replace("{" + "purchaseOrderId" + "}", localVarApiClient.escapeString(purchaseOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingOrderValidateBeforeCall(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'purchaseOrderId' is set
        if (purchaseOrderId == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderId' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling shippingOrder(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling shippingOrder(Async)");
        }

        return shippingOrderCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, _callback);

    }

    /**
     * Shipping updates
     * You can change the status of order lines to \&quot;Shipped\&quot; and trigger the charge to a customer. You must acknowledge your orders before sending a shipping update to avoid underselling. An order line, once marked as shipped, cannot be updated.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void shippingOrder(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode) throws ApiException {
        shippingOrderWithHttpInfo(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode);
    }

    /**
     * Shipping updates
     * You can change the status of order lines to \&quot;Shipped\&quot; and trigger the charge to a customer. You must acknowledge your orders before sending a shipping update to avoid underselling. An order line, once marked as shipped, cannot be updated.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shippingOrderWithHttpInfo(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode) throws ApiException {
        okhttp3.Call localVarCall = shippingOrderValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Shipping updates (asynchronously)
     * You can change the status of order lines to \&quot;Shipped\&quot; and trigger the charge to a customer. You must acknowledge your orders before sending a shipping update to avoid underselling. An order line, once marked as shipped, cannot be updated.
     * @param purchaseOrderId Purchase Order ID (required)
     * @param contentType application/xml, application/json (required)
     * @param accept application/xml, application/json (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param requestBody Request body (required)
     * @param shipNode Ship Node (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingOrderAsync(String purchaseOrderId, String contentType, String accept, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String requestBody, String shipNode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingOrderValidateBeforeCall(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
