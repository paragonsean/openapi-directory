/*
 * Orders API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Version3Api
 */
@Disabled
public class Version3ApiTest {

    private final Version3Api api = new Version3Api();

    /**
     * Acknowledge orders
     *
     * You can acknowledge an entire order, including all of its order lines. Walmart business rules require to acknowledge orders within four hour of receipt of the order, except in extenuating circumstances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acknowledgeOrdersTest() throws ApiException {
        String purchaseOrderId = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String shipNode = null;
        api.acknowledgeOrders(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode);
        // TODO: test validations
    }

    /**
     * Cancel order lines
     *
     * You can cancel one or more order lines. You must include a purchaseOrderLineNumber when cancelling an order. After cancelling your order, update the inventory for the cancelled order and send it in the next inventory feed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOrderTest() throws ApiException {
        String purchaseOrderId = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String requestBody = null;
        String shipNode = null;
        api.cancelOrder(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode);
        // TODO: test validations
    }

    /**
     * Get all orders
     *
     * You can display a list of all orders with the query parameter filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOrdersTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String shipNode = null;
        String sku = null;
        String customerOrderId = null;
        String purchaseOrderId = null;
        String status = null;
        String createdStartDate = null;
        String createdEndDate = null;
        String fromExpectedShipDate = null;
        String toExpectedShipDate = null;
        Integer limit = null;
        api.getAllOrders(contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, limit);
        // TODO: test validations
    }

    /**
     * Get orders for next page
     *
     * You can display a list of all orders with nextCursor path parameter pagination criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOrdersNextTest() throws ApiException {
        String nextCursor = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        api.getAllOrdersNext(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID);
        // TODO: test validations
    }

    /**
     * Get released orders for next page
     *
     * You can display all released orders that have been created and are ready for fulfilment with nextCursor path parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextCursorReleasedOrdersTest() throws ApiException {
        String nextCursor = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        api.getNextCursorReleasedOrders(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID);
        // TODO: test validations
    }

    /**
     * Get an order
     *
     * You can display details of a specific order based on the purchaseOrderId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderByPurchaseOrderIdTest() throws ApiException {
        String purchaseOrderId = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String shipNode = null;
        api.getOrderByPurchaseOrderId(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode);
        // TODO: test validations
    }

    /**
     * Get all released orders
     *
     * You can display all released orders that have been created and are ready for fulfilment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReleasedOrdersTest() throws ApiException {
        String createdStartDate = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String shipNode = null;
        Integer limit = null;
        api.getReleasedOrders(createdStartDate, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, shipNode, limit);
        // TODO: test validations
    }

    /**
     * Refund order lines
     *
     * You can refund one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refundOrderTest() throws ApiException {
        String purchaseOrderId = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String requestBody = null;
        String shipNode = null;
        api.refundOrder(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode);
        // TODO: test validations
    }

    /**
     * Shipping updates
     *
     * You can change the status of order lines to \&quot;Shipped\&quot; and trigger the charge to a customer. You must acknowledge your orders before sending a shipping update to avoid underselling. An order line, once marked as shipped, cannot be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shippingOrderTest() throws ApiException {
        String purchaseOrderId = null;
        String contentType = null;
        String accept = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        String WM_CONSUMER_ID = null;
        String WM_SEC_TIMESTAMP = null;
        String WM_SEC_AUTH_SIGNATURE = null;
        String WM_SVC_NAME = null;
        String WM_QOS_CORRELATION_ID = null;
        String requestBody = null;
        String shipNode = null;
        api.shippingOrder(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, shipNode);
        // TODO: test validations
    }

}
