/**
 * Orders API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Version3 service.
* @module api/Version3Api
* @version 3.0.1
*/
export default class Version3Api {

    /**
    * Constructs a new Version3Api. 
    * @alias module:api/Version3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgeOrders operation.
     * @callback module:api/Version3Api~acknowledgeOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge orders
     * You can acknowledge an entire order, including all of its order lines. Walmart business rules require to acknowledge orders within four hour of receipt of the order, except in extenuating circumstances.
     * @param {String} purchaseOrderId Purchase Order ID
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {module:api/Version3Api~acknowledgeOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    acknowledgeOrders(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling acknowledgeOrders");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling acknowledgeOrders");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling acknowledgeOrders");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling acknowledgeOrders");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling acknowledgeOrders");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling acknowledgeOrders");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling acknowledgeOrders");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling acknowledgeOrders");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling acknowledgeOrders");
      }

      let pathParams = {
        'purchaseOrderId': purchaseOrderId
      };
      let queryParams = {
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/{purchaseOrderId}/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback module:api/Version3Api~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order lines
     * You can cancel one or more order lines. You must include a purchaseOrderLineNumber when cancelling an order. After cancelling your order, update the inventory for the cancelled order and send it in the next inventory feed.
     * @param {String} purchaseOrderId Purchase Order ID
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {String} requestBody Request body
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {module:api/Version3Api~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelOrder(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling cancelOrder");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelOrder");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelOrder");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling cancelOrder");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling cancelOrder");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling cancelOrder");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling cancelOrder");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling cancelOrder");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling cancelOrder");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling cancelOrder");
      }

      let pathParams = {
        'purchaseOrderId': purchaseOrderId
      };
      let queryParams = {
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/xml', 'application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/{purchaseOrderId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOrders operation.
     * @callback module:api/Version3Api~getAllOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all orders
     * You can display a list of all orders with the query parameter filter criteria.
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {String} [sku] Retrieves all orders with the specified SKU.
     * @param {String} [customerOrderId] Retrives the details of the specified customerOrderId.
     * @param {String} [purchaseOrderId] The purchase order ID associated with the order to retrieve. One customer order can have multiple purchase orders associated with it.
     * @param {String} [status] The list of orders corresponding to the requested status.
     * @param {String} [createdStartDate] Limit orders to those created after this date or a timestamp.
     * @param {String} [createdEndDate] Limit orders to those created before this date or timestamp.
     * @param {String} [fromExpectedShipDate] Limit orders to those that have order lines with an expected ship date after this date.
     * @param {String} [toExpectedShipDate] Limit orders to those that have order lines with an expected ship date before this date. 
     * @param {Number} [limit = 10)] The number of orders to be returned. Do not set this parameter to over 200 orders.
     * @param {module:api/Version3Api~getAllOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllOrders(contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAllOrders");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllOrders");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getAllOrders");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling getAllOrders");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getAllOrders");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getAllOrders");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getAllOrders");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getAllOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'shipNode': opts['shipNode'],
        'sku': opts['sku'],
        'customerOrderId': opts['customerOrderId'],
        'purchaseOrderId': opts['purchaseOrderId'],
        'status': opts['status'],
        'createdStartDate': opts['createdStartDate'],
        'createdEndDate': opts['createdEndDate'],
        'fromExpectedShipDate': opts['fromExpectedShipDate'],
        'toExpectedShipDate': opts['toExpectedShipDate'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOrdersNext operation.
     * @callback module:api/Version3Api~getAllOrdersNextCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get orders for next page
     * You can display a list of all orders with nextCursor path parameter pagination criteria.
     * @param {String} nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call.
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {module:api/Version3Api~getAllOrdersNextCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllOrdersNext(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, callback) {
      let postBody = null;
      // verify the required parameter 'nextCursor' is set
      if (nextCursor === undefined || nextCursor === null) {
        throw new Error("Missing the required parameter 'nextCursor' when calling getAllOrdersNext");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAllOrdersNext");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllOrdersNext");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getAllOrdersNext");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling getAllOrdersNext");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getAllOrdersNext");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getAllOrdersNext");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getAllOrdersNext");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getAllOrdersNext");
      }

      let pathParams = {
        'nextCursor': nextCursor
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders{nextCursor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextCursorReleasedOrders operation.
     * @callback module:api/Version3Api~getNextCursorReleasedOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get released orders for next page
     * You can display all released orders that have been created and are ready for fulfilment with nextCursor path parameter.
     * @param {String} nextCursor Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call.
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {module:api/Version3Api~getNextCursorReleasedOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNextCursorReleasedOrders(nextCursor, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, callback) {
      let postBody = null;
      // verify the required parameter 'nextCursor' is set
      if (nextCursor === undefined || nextCursor === null) {
        throw new Error("Missing the required parameter 'nextCursor' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getNextCursorReleasedOrders");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getNextCursorReleasedOrders");
      }

      let pathParams = {
        'nextCursor': nextCursor
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/released{nextCursor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderByPurchaseOrderId operation.
     * @callback module:api/Version3Api~getOrderByPurchaseOrderIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an order
     * You can display details of a specific order based on the purchaseOrderId.
     * @param {String} purchaseOrderId Purchase Order ID
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {module:api/Version3Api~getOrderByPurchaseOrderIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrderByPurchaseOrderId(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getOrderByPurchaseOrderId");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getOrderByPurchaseOrderId");
      }

      let pathParams = {
        'purchaseOrderId': purchaseOrderId
      };
      let queryParams = {
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/{purchaseOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReleasedOrders operation.
     * @callback module:api/Version3Api~getReleasedOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all released orders
     * You can display all released orders that have been created and are ready for fulfilment.
     * @param {String} createdStartDate Limit orders to those created after this date or a timestamp.
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {Number} [limit] The number of orders to be returned. Do not set this parameter to over 200 orders.
     * @param {module:api/Version3Api~getReleasedOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReleasedOrders(createdStartDate, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'createdStartDate' is set
      if (createdStartDate === undefined || createdStartDate === null) {
        throw new Error("Missing the required parameter 'createdStartDate' when calling getReleasedOrders");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getReleasedOrders");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getReleasedOrders");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling getReleasedOrders");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling getReleasedOrders");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getReleasedOrders");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getReleasedOrders");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getReleasedOrders");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getReleasedOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'shipNode': opts['shipNode'],
        'createdStartDate': createdStartDate,
        'limit': opts['limit']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/released', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refundOrder operation.
     * @callback module:api/Version3Api~refundOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund order lines
     * You can refund one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line item.
     * @param {String} purchaseOrderId Purchase Order ID
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {String} requestBody Request body
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {module:api/Version3Api~refundOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refundOrder(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling refundOrder");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling refundOrder");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling refundOrder");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling refundOrder");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling refundOrder");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling refundOrder");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling refundOrder");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling refundOrder");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling refundOrder");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling refundOrder");
      }

      let pathParams = {
        'purchaseOrderId': purchaseOrderId
      };
      let queryParams = {
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/xml', 'application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/{purchaseOrderId}/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shippingOrder operation.
     * @callback module:api/Version3Api~shippingOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shipping updates
     * You can change the status of order lines to \"Shipped\" and trigger the charge to a customer. You must acknowledge your orders before sending a shipping update to avoid underselling. An order line, once marked as shipped, cannot be updated.
     * @param {String} purchaseOrderId Purchase Order ID
     * @param {module:model/String} contentType application/xml, application/json
     * @param {module:model/String} accept application/xml, application/json
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {String} requestBody Request body
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] Ship Node
     * @param {module:api/Version3Api~shippingOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shippingOrder(purchaseOrderId, contentType, accept, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling shippingOrder");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling shippingOrder");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling shippingOrder");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling shippingOrder");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling shippingOrder");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling shippingOrder");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling shippingOrder");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling shippingOrder");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling shippingOrder");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling shippingOrder");
      }

      let pathParams = {
        'purchaseOrderId': purchaseOrderId
      };
      let queryParams = {
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/xml', 'application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/orders/{purchaseOrderId}/shipping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
