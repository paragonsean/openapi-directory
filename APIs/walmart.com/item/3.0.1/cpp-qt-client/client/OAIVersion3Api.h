/**
 * Item API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVersion3Api_H
#define OAI_OAIVersion3Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVersion3Api : public QObject {
    Q_OBJECT

public:
    OAIVersion3Api(const int timeOut = 0);
    ~OAIVersion3Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  feed_type QString [optional]
    */
    virtual void v3doPostMultiPart(const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &feed_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feed_id QString [required]
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  include_details QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void v3getAllItemsStatus(const QString &feed_id, const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &include_details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_consumer_channel_type QString [required]
    * @param[in]  wm_consumer_id QString [required]
    * @param[in]  wm_sec_timestamp QString [required]
    * @param[in]  wm_sec_auth_signature QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  feed_id QString [optional]
    * @param[in]  include_details QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void v3getFeedItemStatus(const QString &wm_consumer_channel_type, const QString &wm_consumer_id, const QString &wm_sec_timestamp, const QString &wm_sec_auth_signature, const QString &wm_svc_name, const QString &wm_qos_correlation_id, const ::OpenAPI::OptionalParam<QString> &feed_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v3doPostMultiPartCallback(OAIHttpRequestWorker *worker);
    void v3getAllItemsStatusCallback(OAIHttpRequestWorker *worker);
    void v3getFeedItemStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v3doPostMultiPartSignal();
    void v3getAllItemsStatusSignal();
    void v3getFeedItemStatusSignal();


    void v3doPostMultiPartSignalFull(OAIHttpRequestWorker *worker);
    void v3getAllItemsStatusSignalFull(OAIHttpRequestWorker *worker);
    void v3getFeedItemStatusSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v3doPostMultiPartSignalError() instead")
    void v3doPostMultiPartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3doPostMultiPartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3getAllItemsStatusSignalError() instead")
    void v3getAllItemsStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3getAllItemsStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3getFeedItemStatusSignalError() instead")
    void v3getFeedItemStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3getFeedItemStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v3doPostMultiPartSignalErrorFull() instead")
    void v3doPostMultiPartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3doPostMultiPartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3getAllItemsStatusSignalErrorFull() instead")
    void v3getAllItemsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3getAllItemsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3getFeedItemStatusSignalErrorFull() instead")
    void v3getFeedItemStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3getFeedItemStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
