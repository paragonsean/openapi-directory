/*
 * Item API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Version2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Version2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Version2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2doPostMultiPart
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _file Feed File to upload (required)
     * @param feedType Feed Type (optional, default to item)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2doPostMultiPartCall(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, File _file, String feedType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (feedType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedType", feedType));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2doPostMultiPartValidateBeforeCall(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, File _file, String feedType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling v2doPostMultiPart(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling v2doPostMultiPart(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling v2doPostMultiPart(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling v2doPostMultiPart(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling v2doPostMultiPart(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling v2doPostMultiPart(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling v2doPostMultiPart(Async)");
        }

        return v2doPostMultiPartCall(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _file, feedType, _callback);

    }

    /**
     * Upload an item feed
     * You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _file Feed File to upload (required)
     * @param feedType Feed Type (optional, default to item)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void v2doPostMultiPart(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, File _file, String feedType) throws ApiException {
        v2doPostMultiPartWithHttpInfo(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _file, feedType);
    }

    /**
     * Upload an item feed
     * You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _file Feed File to upload (required)
     * @param feedType Feed Type (optional, default to item)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2doPostMultiPartWithHttpInfo(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, File _file, String feedType) throws ApiException {
        okhttp3.Call localVarCall = v2doPostMultiPartValidateBeforeCall(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _file, feedType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload an item feed (asynchronously)
     * You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param _file Feed File to upload (required)
     * @param feedType Feed Type (optional, default to item)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2doPostMultiPartAsync(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, File _file, String feedType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2doPostMultiPartValidateBeforeCall(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, _file, feedType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2getAllItemsStatus
     * @param feedId The feed ID (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param includeDetails Includes details of each entity in the feed. Do not set this parameter to true. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2getAllItemsStatusCall(String feedId, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String includeDetails, String offset, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/feeds/{feedId}"
            .replace("{" + "feedId" + "}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDetails", includeDetails));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2getAllItemsStatusValidateBeforeCall(String feedId, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String includeDetails, String offset, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling v2getAllItemsStatus(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling v2getAllItemsStatus(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling v2getAllItemsStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling v2getAllItemsStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling v2getAllItemsStatus(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling v2getAllItemsStatus(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling v2getAllItemsStatus(Async)");
        }

        return v2getAllItemsStatusCall(feedId, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, includeDetails, offset, limit, _callback);

    }

    /**
     * Get status of an item within a feed
     * You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.
     * @param feedId The feed ID (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param includeDetails Includes details of each entity in the feed. Do not set this parameter to true. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void v2getAllItemsStatus(String feedId, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String includeDetails, String offset, String limit) throws ApiException {
        v2getAllItemsStatusWithHttpInfo(feedId, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, includeDetails, offset, limit);
    }

    /**
     * Get status of an item within a feed
     * You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.
     * @param feedId The feed ID (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param includeDetails Includes details of each entity in the feed. Do not set this parameter to true. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2getAllItemsStatusWithHttpInfo(String feedId, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String includeDetails, String offset, String limit) throws ApiException {
        okhttp3.Call localVarCall = v2getAllItemsStatusValidateBeforeCall(feedId, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, includeDetails, offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get status of an item within a feed (asynchronously)
     * You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.
     * @param feedId The feed ID (required)
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param includeDetails Includes details of each entity in the feed. Do not set this parameter to true. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2getAllItemsStatusAsync(String feedId, String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String includeDetails, String offset, String limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2getAllItemsStatusValidateBeforeCall(feedId, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, includeDetails, offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2getFeedItemStatus
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param feedId The feed ID. (optional)
     * @param includeDetails Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2getFeedItemStatusCall(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String feedId, String includeDetails, String offset, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (feedId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedId", feedId));
        }

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDetails", includeDetails));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2getFeedItemStatusValidateBeforeCall(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String feedId, String includeDetails, String offset, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
        if (WM_CONSUMER_CHANNEL_TYPE == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling v2getFeedItemStatus(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling v2getFeedItemStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling v2getFeedItemStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling v2getFeedItemStatus(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling v2getFeedItemStatus(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling v2getFeedItemStatus(Async)");
        }

        return v2getFeedItemStatusCall(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, feedId, includeDetails, offset, limit, _callback);

    }

    /**
     * Get status of an item feed
     * You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param feedId The feed ID. (optional)
     * @param includeDetails Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void v2getFeedItemStatus(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String feedId, String includeDetails, String offset, String limit) throws ApiException {
        v2getFeedItemStatusWithHttpInfo(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, feedId, includeDetails, offset, limit);
    }

    /**
     * Get status of an item feed
     * You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param feedId The feed ID. (optional)
     * @param includeDetails Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2getFeedItemStatusWithHttpInfo(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String feedId, String includeDetails, String offset, String limit) throws ApiException {
        okhttp3.Call localVarCall = v2getFeedItemStatusValidateBeforeCall(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, feedId, includeDetails, offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get status of an item feed (asynchronously)
     * You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.
     * @param WM_CONSUMER_CHANNEL_TYPE Channel Type (required)
     * @param WM_CONSUMER_ID Your Consumer ID (required)
     * @param WM_SEC_TIMESTAMP Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE Authentication signature (required)
     * @param WM_SVC_NAME The Service name (required)
     * @param WM_QOS_CORRELATION_ID A Transaction ID (required)
     * @param feedId The feed ID. (optional)
     * @param includeDetails Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status. (optional, default to false)
     * @param offset The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true. (optional, default to 0)
     * @param limit The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2getFeedItemStatusAsync(String WM_CONSUMER_CHANNEL_TYPE, String WM_CONSUMER_ID, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_SVC_NAME, String WM_QOS_CORRELATION_ID, String feedId, String includeDetails, String offset, String limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2getFeedItemStatusValidateBeforeCall(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, feedId, includeDetails, offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
