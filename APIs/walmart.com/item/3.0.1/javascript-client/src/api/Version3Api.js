/**
 * Item API
 * Please make sure you use the correct version of the APIs for your use case. To find out the appropriate version, go to the API Docs  drop down on the menu.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Version3 service.
* @module api/Version3Api
* @version 3.0.1
*/
export default class Version3Api {

    /**
    * Constructs a new Version3Api. 
    * @alias module:api/Version3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v3doPostMultiPart operation.
     * @callback module:api/Version3Api~v3doPostMultiPartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an item feed
     * You can upload an item feed. If the feed successfully processed, it returns a feed ID. Use the returned feed ID to retrieve a feed status. You need your Consumer ID and the Private Key to upload an item.
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {File} file Feed File to upload
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [feedType = 'item')] Feed Type
     * @param {module:api/Version3Api~v3doPostMultiPartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3doPostMultiPart(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling v3doPostMultiPart");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling v3doPostMultiPart");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling v3doPostMultiPart");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling v3doPostMultiPart");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling v3doPostMultiPart");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling v3doPostMultiPart");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling v3doPostMultiPart");
      }

      let pathParams = {
      };
      let queryParams = {
        'feedType': opts['feedType']
      };
      let headerParams = {
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3getAllItemsStatus operation.
     * @callback module:api/Version3Api~v3getAllItemsStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of an item within a feed
     * You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.
     * @param {String} feedId The feed ID
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {Object} opts Optional parameters
     * @param {String} [includeDetails = 'false')] Includes details of each entity in the feed. Do not set this parameter to true.
     * @param {String} [offset = '0')] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
     * @param {String} [limit = '50')] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
     * @param {module:api/Version3Api~v3getAllItemsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3getAllItemsStatus(feedId, WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling v3getAllItemsStatus");
      }
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling v3getAllItemsStatus");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling v3getAllItemsStatus");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling v3getAllItemsStatus");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling v3getAllItemsStatus");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling v3getAllItemsStatus");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling v3getAllItemsStatus");
      }

      let pathParams = {
        'feedId': feedId
      };
      let queryParams = {
        'includeDetails': opts['includeDetails'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/feeds/{feedId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3getFeedItemStatus operation.
     * @callback module:api/Version3Api~v3getFeedItemStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of an item feed
     * You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.
     * @param {module:model/String} WM_CONSUMER_CHANNEL_TYPE Channel Type
     * @param {String} WM_CONSUMER_ID Your Consumer ID
     * @param {String} WM_SEC_TIMESTAMP Epoch timestamp
     * @param {String} WM_SEC_AUTH_SIGNATURE Authentication signature
     * @param {String} WM_SVC_NAME The Service name
     * @param {String} WM_QOS_CORRELATION_ID A Transaction ID
     * @param {Object} opts Optional parameters
     * @param {String} [feedId] The feed ID.
     * @param {String} [includeDetails = 'false')] Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.
     * @param {String} [offset = '0')] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
     * @param {String} [limit = '50')] The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.
     * @param {module:api/Version3Api~v3getFeedItemStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3getFeedItemStatus(WM_CONSUMER_CHANNEL_TYPE, WM_CONSUMER_ID, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_SVC_NAME, WM_QOS_CORRELATION_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'WM_CONSUMER_CHANNEL_TYPE' is set
      if (WM_CONSUMER_CHANNEL_TYPE === undefined || WM_CONSUMER_CHANNEL_TYPE === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_CHANNEL_TYPE' when calling v3getFeedItemStatus");
      }
      // verify the required parameter 'WM_CONSUMER_ID' is set
      if (WM_CONSUMER_ID === undefined || WM_CONSUMER_ID === null) {
        throw new Error("Missing the required parameter 'WM_CONSUMER_ID' when calling v3getFeedItemStatus");
      }
      // verify the required parameter 'WM_SEC_TIMESTAMP' is set
      if (WM_SEC_TIMESTAMP === undefined || WM_SEC_TIMESTAMP === null) {
        throw new Error("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling v3getFeedItemStatus");
      }
      // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
      if (WM_SEC_AUTH_SIGNATURE === undefined || WM_SEC_AUTH_SIGNATURE === null) {
        throw new Error("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling v3getFeedItemStatus");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling v3getFeedItemStatus");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling v3getFeedItemStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'feedId': opts['feedId'],
        'includeDetails': opts['includeDetails'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'WM_CONSUMER.CHANNEL.TYPE': WM_CONSUMER_CHANNEL_TYPE,
        'WM_CONSUMER.ID': WM_CONSUMER_ID,
        'WM_SEC.TIMESTAMP': WM_SEC_TIMESTAMP,
        'WM_SEC.AUTH_SIGNATURE': WM_SEC_AUTH_SIGNATURE,
        'WM_SVC.NAME': WM_SVC_NAME,
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
