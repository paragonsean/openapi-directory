# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_multi_node_inventory_for_sku_and_all_shipnodes200_response_nodes_inner_errors_inner import GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner
from openapi_server import util


class UpdateMultiNodeInventory200ResponseNodesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner]=None, ship_node: str=None, status: str=None):
        """UpdateMultiNodeInventory200ResponseNodesInner - a model defined in OpenAPI

        :param errors: The errors of this UpdateMultiNodeInventory200ResponseNodesInner.
        :param ship_node: The ship_node of this UpdateMultiNodeInventory200ResponseNodesInner.
        :param status: The status of this UpdateMultiNodeInventory200ResponseNodesInner.
        """
        self.openapi_types = {
            'errors': List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner],
            'ship_node': str,
            'status': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'ship_node': 'shipNode',
            'status': 'status'
        }

        self._errors = errors
        self._ship_node = ship_node
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMultiNodeInventory200ResponseNodesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateMultiNodeInventory_200_response_nodes_inner of this UpdateMultiNodeInventory200ResponseNodesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this UpdateMultiNodeInventory200ResponseNodesInner.

        Node Update Error description.

        :return: The errors of this UpdateMultiNodeInventory200ResponseNodesInner.
        :rtype: List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this UpdateMultiNodeInventory200ResponseNodesInner.

        Node Update Error description.

        :param errors: The errors of this UpdateMultiNodeInventory200ResponseNodesInner.
        :type errors: List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner]
        """

        self._errors = errors

    @property
    def ship_node(self):
        """Gets the ship_node of this UpdateMultiNodeInventory200ResponseNodesInner.

        ShipNode Id of the ship node for which the inventory is requested

        :return: The ship_node of this UpdateMultiNodeInventory200ResponseNodesInner.
        :rtype: str
        """
        return self._ship_node

    @ship_node.setter
    def ship_node(self, ship_node):
        """Sets the ship_node of this UpdateMultiNodeInventory200ResponseNodesInner.

        ShipNode Id of the ship node for which the inventory is requested

        :param ship_node: The ship_node of this UpdateMultiNodeInventory200ResponseNodesInner.
        :type ship_node: str
        """

        self._ship_node = ship_node

    @property
    def status(self):
        """Gets the status of this UpdateMultiNodeInventory200ResponseNodesInner.

        Node Update status. Example: 'Success'

        :return: The status of this UpdateMultiNodeInventory200ResponseNodesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateMultiNodeInventory200ResponseNodesInner.

        Node Update status. Example: 'Success'

        :param status: The status of this UpdateMultiNodeInventory200ResponseNodesInner.
        :type status: str
        """

        self._status = status
