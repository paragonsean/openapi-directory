# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShipNodes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avail_to_sell_qty: int=None, modified_date: str=None, on_hand_qty: int=None, ship_node_type: str=None):
        """ShipNodes - a model defined in OpenAPI

        :param avail_to_sell_qty: The avail_to_sell_qty of this ShipNodes.
        :param modified_date: The modified_date of this ShipNodes.
        :param on_hand_qty: The on_hand_qty of this ShipNodes.
        :param ship_node_type: The ship_node_type of this ShipNodes.
        """
        self.openapi_types = {
            'avail_to_sell_qty': int,
            'modified_date': str,
            'on_hand_qty': int,
            'ship_node_type': str
        }

        self.attribute_map = {
            'avail_to_sell_qty': 'availToSellQty',
            'modified_date': 'modifiedDate',
            'on_hand_qty': 'onHandQty',
            'ship_node_type': 'shipNodeType'
        }

        self._avail_to_sell_qty = avail_to_sell_qty
        self._modified_date = modified_date
        self._on_hand_qty = on_hand_qty
        self._ship_node_type = ship_node_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShipNodes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShipNodes of this ShipNodes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avail_to_sell_qty(self):
        """Gets the avail_to_sell_qty of this ShipNodes.

        The available quantity is the quantity of an item that is available to be allocated to orders.

        :return: The avail_to_sell_qty of this ShipNodes.
        :rtype: int
        """
        return self._avail_to_sell_qty

    @avail_to_sell_qty.setter
    def avail_to_sell_qty(self, avail_to_sell_qty):
        """Sets the avail_to_sell_qty of this ShipNodes.

        The available quantity is the quantity of an item that is available to be allocated to orders.

        :param avail_to_sell_qty: The avail_to_sell_qty of this ShipNodes.
        :type avail_to_sell_qty: int
        """

        self._avail_to_sell_qty = avail_to_sell_qty

    @property
    def modified_date(self):
        """Gets the modified_date of this ShipNodes.

        Last changes date for the item.

        :return: The modified_date of this ShipNodes.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ShipNodes.

        Last changes date for the item.

        :param modified_date: The modified_date of this ShipNodes.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def on_hand_qty(self):
        """Gets the on_hand_qty of this ShipNodes.

        The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.

        :return: The on_hand_qty of this ShipNodes.
        :rtype: int
        """
        return self._on_hand_qty

    @on_hand_qty.setter
    def on_hand_qty(self, on_hand_qty):
        """Sets the on_hand_qty of this ShipNodes.

        The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.

        :param on_hand_qty: The on_hand_qty of this ShipNodes.
        :type on_hand_qty: int
        """

        self._on_hand_qty = on_hand_qty

    @property
    def ship_node_type(self):
        """Gets the ship_node_type of this ShipNodes.

        Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.

        :return: The ship_node_type of this ShipNodes.
        :rtype: str
        """
        return self._ship_node_type

    @ship_node_type.setter
    def ship_node_type(self, ship_node_type):
        """Sets the ship_node_type of this ShipNodes.

        Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.

        :param ship_node_type: The ship_node_type of this ShipNodes.
        :type ship_node_type: str
        """

        self._ship_node_type = ship_node_type
