# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_multi_node_inventory_for_all_sku_and_all_ship_nodes200_response_elements_inventories_inner_nodes_inner_reserved_qty import GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty
from openapi_server import util


class GetInventory200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty=None, sku: str=None):
        """GetInventory200Response - a model defined in OpenAPI

        :param quantity: The quantity of this GetInventory200Response.
        :param sku: The sku of this GetInventory200Response.
        """
        self.openapi_types = {
            'quantity': GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty,
            'sku': str
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'sku': 'sku'
        }

        self._quantity = quantity
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInventory200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getInventory_200_response of this GetInventory200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this GetInventory200Response.


        :return: The quantity of this GetInventory200Response.
        :rtype: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetInventory200Response.


        :param quantity: The quantity of this GetInventory200Response.
        :type quantity: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this GetInventory200Response.

        A seller-provided Product ID. Response will have decoded value.

        :return: The sku of this GetInventory200Response.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GetInventory200Response.

        A seller-provided Product ID. Response will have decoded value.

        :param sku: The sku of this GetInventory200Response.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
