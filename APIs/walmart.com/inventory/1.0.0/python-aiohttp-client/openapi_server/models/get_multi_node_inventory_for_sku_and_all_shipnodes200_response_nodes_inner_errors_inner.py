# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_multi_node_inventory_for_sku_and_all_shipnodes200_response_nodes_inner_errors_inner_causes_inner import GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner
from openapi_server import util


class GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, causes: List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner]=None, code: str=None, description: str=None, error_identifiers: Dict[str, object]=None, _field: str=None, info: str=None, severity: str=None):
        """GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner - a model defined in OpenAPI

        :param category: The category of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param causes: The causes of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param code: The code of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param description: The description of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param error_identifiers: The error_identifiers of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param _field: The _field of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param info: The info of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :param severity: The severity of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        """
        self.openapi_types = {
            'category': str,
            'causes': List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner],
            'code': str,
            'description': str,
            'error_identifiers': Dict[str, object],
            '_field': str,
            'info': str,
            'severity': str
        }

        self.attribute_map = {
            'category': 'category',
            'causes': 'causes',
            'code': 'code',
            'description': 'description',
            'error_identifiers': 'errorIdentifiers',
            '_field': 'field',
            'info': 'info',
            'severity': 'severity'
        }

        self._category = category
        self._causes = causes
        self._code = code
        self._description = description
        self._error_identifiers = error_identifiers
        self.__field = _field
        self._info = info
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The category of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param category: The category of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type category: str
        """
        allowed_values = ["APPLICATION", "SYSTEM", "REQUEST", "DATA"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def causes(self):
        """Gets the causes of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The causes of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param causes: The causes of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type causes: List[GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner]
        """

        self._causes = causes

    @property
    def code(self):
        """Gets the code of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The code of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param code: The code of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def description(self):
        """Gets the description of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The description of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param description: The description of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type description: str
        """

        self._description = description

    @property
    def error_identifiers(self):
        """Gets the error_identifiers of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The error_identifiers of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: Dict[str, object]
        """
        return self._error_identifiers

    @error_identifiers.setter
    def error_identifiers(self, error_identifiers):
        """Sets the error_identifiers of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param error_identifiers: The error_identifiers of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type error_identifiers: Dict[str, object]
        """

        self._error_identifiers = error_identifiers

    @property
    def _field(self):
        """Gets the _field of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The _field of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param _field: The _field of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type _field: str
        """

        self.__field = _field

    @property
    def info(self):
        """Gets the info of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The info of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param info: The info of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type info: str
        """

        self._info = info

    @property
    def severity(self):
        """Gets the severity of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :return: The severity of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.


        :param severity: The severity of this GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.
        :type severity: str
        """
        allowed_values = ["INFO", "WARN", "ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
