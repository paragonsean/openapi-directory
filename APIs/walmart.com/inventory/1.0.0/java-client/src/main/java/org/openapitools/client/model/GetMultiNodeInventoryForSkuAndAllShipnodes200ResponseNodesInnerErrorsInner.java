/*
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:26.397081-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner {
  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    APPLICATION("APPLICATION"),
    
    SYSTEM("SYSTEM"),
    
    REQUEST("REQUEST"),
    
    DATA("DATA");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CAUSES = "causes";
  @SerializedName(SERIALIZED_NAME_CAUSES)
  private List<GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner> causes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ERROR_IDENTIFIERS = "errorIdentifiers";
  @SerializedName(SERIALIZED_NAME_ERROR_IDENTIFIERS)
  private Map<String, Object> errorIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private String info;

  /**
   * Gets or Sets severity
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("INFO"),
    
    WARN("WARN"),
    
    ERROR("ERROR");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner() {
  }

  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner causes(List<GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner> causes) {
    this.causes = causes;
    return this;
  }

  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner addCausesItem(GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner causesItem) {
    if (this.causes == null) {
      this.causes = new ArrayList<>();
    }
    this.causes.add(causesItem);
    return this;
  }

  /**
   * Get causes
   * @return causes
   */
  @javax.annotation.Nullable
  public List<GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner> getCauses() {
    return causes;
  }

  public void setCauses(List<GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner> causes) {
    this.causes = causes;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner errorIdentifiers(Map<String, Object> errorIdentifiers) {
    this.errorIdentifiers = errorIdentifiers;
    return this;
  }

  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner putErrorIdentifiersItem(String key, Object errorIdentifiersItem) {
    if (this.errorIdentifiers == null) {
      this.errorIdentifiers = new HashMap<>();
    }
    this.errorIdentifiers.put(key, errorIdentifiersItem);
    return this;
  }

  /**
   * Get errorIdentifiers
   * @return errorIdentifiers
   */
  @javax.annotation.Nullable
  public Map<String, Object> getErrorIdentifiers() {
    return errorIdentifiers;
  }

  public void setErrorIdentifiers(Map<String, Object> errorIdentifiers) {
    this.errorIdentifiers = errorIdentifiers;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner info(String info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }


  public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner = (GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner) o;
    return Objects.equals(this.category, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.category) &&
        Objects.equals(this.causes, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.causes) &&
        Objects.equals(this.code, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.code) &&
        Objects.equals(this.description, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.description) &&
        Objects.equals(this.errorIdentifiers, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.errorIdentifiers) &&
        Objects.equals(this.field, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.field) &&
        Objects.equals(this.info, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.info) &&
        Objects.equals(this.severity, getMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.severity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, causes, code, description, errorIdentifiers, field, info, severity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    causes: ").append(toIndentedString(causes)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    errorIdentifiers: ").append(toIndentedString(errorIdentifiers)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("causes");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("errorIdentifiers");
    openapiFields.add("field");
    openapiFields.add("info");
    openapiFields.add("severity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner is not found in the empty JSON string", GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if (jsonObj.get("causes") != null && !jsonObj.get("causes").isJsonNull()) {
        JsonArray jsonArraycauses = jsonObj.getAsJsonArray("causes");
        if (jsonArraycauses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("causes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `causes` to be an array in the JSON string but got `%s`", jsonObj.get("causes").toString()));
          }

          // validate the optional field `causes` (array)
          for (int i = 0; i < jsonArraycauses.size(); i++) {
            GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInnerCausesInner.validateJsonElement(jsonArraycauses.get(i));
          };
        }
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) && !jsonObj.get("info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner>() {
           @Override
           public void write(JsonWriter out, GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner
   * @throws IOException if the JSON string is invalid with respect to GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner
   */
  public static GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner.class);
  }

  /**
   * Convert an instance of GetMultiNodeInventoryForSkuAndAllShipnodes200ResponseNodesInnerErrorsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

