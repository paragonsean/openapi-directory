/*
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShipNodes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:26.397081-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShipNodes {
  public static final String SERIALIZED_NAME_AVAIL_TO_SELL_QTY = "availToSellQty";
  @SerializedName(SERIALIZED_NAME_AVAIL_TO_SELL_QTY)
  private Integer availToSellQty;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_ON_HAND_QTY = "onHandQty";
  @SerializedName(SERIALIZED_NAME_ON_HAND_QTY)
  private Integer onHandQty;

  public static final String SERIALIZED_NAME_SHIP_NODE_TYPE = "shipNodeType";
  @SerializedName(SERIALIZED_NAME_SHIP_NODE_TYPE)
  private String shipNodeType;

  public ShipNodes() {
  }

  public ShipNodes availToSellQty(Integer availToSellQty) {
    this.availToSellQty = availToSellQty;
    return this;
  }

  /**
   * The available quantity is the quantity of an item that is available to be allocated to orders.
   * @return availToSellQty
   */
  @javax.annotation.Nullable
  public Integer getAvailToSellQty() {
    return availToSellQty;
  }

  public void setAvailToSellQty(Integer availToSellQty) {
    this.availToSellQty = availToSellQty;
  }


  public ShipNodes modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Last changes date for the item.
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public ShipNodes onHandQty(Integer onHandQty) {
    this.onHandQty = onHandQty;
    return this;
  }

  /**
   * The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
   * @return onHandQty
   */
  @javax.annotation.Nullable
  public Integer getOnHandQty() {
    return onHandQty;
  }

  public void setOnHandQty(Integer onHandQty) {
    this.onHandQty = onHandQty;
  }


  public ShipNodes shipNodeType(String shipNodeType) {
    this.shipNodeType = shipNodeType;
    return this;
  }

  /**
   * Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is &#39;WFSFulfilled&#39;. In later phase we will also add seller fulfilled inventory.
   * @return shipNodeType
   */
  @javax.annotation.Nullable
  public String getShipNodeType() {
    return shipNodeType;
  }

  public void setShipNodeType(String shipNodeType) {
    this.shipNodeType = shipNodeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipNodes shipNodes = (ShipNodes) o;
    return Objects.equals(this.availToSellQty, shipNodes.availToSellQty) &&
        Objects.equals(this.modifiedDate, shipNodes.modifiedDate) &&
        Objects.equals(this.onHandQty, shipNodes.onHandQty) &&
        Objects.equals(this.shipNodeType, shipNodes.shipNodeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availToSellQty, modifiedDate, onHandQty, shipNodeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipNodes {\n");
    sb.append("    availToSellQty: ").append(toIndentedString(availToSellQty)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    onHandQty: ").append(toIndentedString(onHandQty)).append("\n");
    sb.append("    shipNodeType: ").append(toIndentedString(shipNodeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availToSellQty");
    openapiFields.add("modifiedDate");
    openapiFields.add("onHandQty");
    openapiFields.add("shipNodeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShipNodes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShipNodes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipNodes is not found in the empty JSON string", ShipNodes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShipNodes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipNodes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
      if ((jsonObj.get("shipNodeType") != null && !jsonObj.get("shipNodeType").isJsonNull()) && !jsonObj.get("shipNodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipNodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipNodeType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipNodes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipNodes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipNodes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipNodes.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipNodes>() {
           @Override
           public void write(JsonWriter out, ShipNodes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipNodes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShipNodes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShipNodes
   * @throws IOException if the JSON string is invalid with respect to ShipNodes
   */
  public static ShipNodes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipNodes.class);
  }

  /**
   * Convert an instance of ShipNodes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

