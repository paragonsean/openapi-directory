/*
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerAvailToSellQty;
import org.openapitools.client.model.GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerInputQty;
import org.openapitools.client.model.GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAllInventoriesNodeDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:26.397081-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAllInventoriesNodeDTO {
  public static final String SERIALIZED_NAME_AVAIL_TO_SELL_QTY = "availToSellQty";
  @SerializedName(SERIALIZED_NAME_AVAIL_TO_SELL_QTY)
  private GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerAvailToSellQty availToSellQty;

  public static final String SERIALIZED_NAME_INPUT_QTY = "inputQty";
  @SerializedName(SERIALIZED_NAME_INPUT_QTY)
  private GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerInputQty inputQty;

  public static final String SERIALIZED_NAME_RESERVED_QTY = "reservedQty";
  @SerializedName(SERIALIZED_NAME_RESERVED_QTY)
  private GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty reservedQty;

  public static final String SERIALIZED_NAME_SHIP_NODE = "shipNode";
  @SerializedName(SERIALIZED_NAME_SHIP_NODE)
  private String shipNode;

  public GetAllInventoriesNodeDTO() {
  }

  public GetAllInventoriesNodeDTO availToSellQty(GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerAvailToSellQty availToSellQty) {
    this.availToSellQty = availToSellQty;
    return this;
  }

  /**
   * Get availToSellQty
   * @return availToSellQty
   */
  @javax.annotation.Nullable
  public GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerAvailToSellQty getAvailToSellQty() {
    return availToSellQty;
  }

  public void setAvailToSellQty(GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerAvailToSellQty availToSellQty) {
    this.availToSellQty = availToSellQty;
  }


  public GetAllInventoriesNodeDTO inputQty(GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerInputQty inputQty) {
    this.inputQty = inputQty;
    return this;
  }

  /**
   * Get inputQty
   * @return inputQty
   */
  @javax.annotation.Nullable
  public GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerInputQty getInputQty() {
    return inputQty;
  }

  public void setInputQty(GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerInputQty inputQty) {
    this.inputQty = inputQty;
  }


  public GetAllInventoriesNodeDTO reservedQty(GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty reservedQty) {
    this.reservedQty = reservedQty;
    return this;
  }

  /**
   * Get reservedQty
   * @return reservedQty
   */
  @javax.annotation.Nullable
  public GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty getReservedQty() {
    return reservedQty;
  }

  public void setReservedQty(GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty reservedQty) {
    this.reservedQty = reservedQty;
  }


  public GetAllInventoriesNodeDTO shipNode(String shipNode) {
    this.shipNode = shipNode;
    return this;
  }

  /**
   * ShipNode Id of the ship node for which the inventory is requested
   * @return shipNode
   */
  @javax.annotation.Nullable
  public String getShipNode() {
    return shipNode;
  }

  public void setShipNode(String shipNode) {
    this.shipNode = shipNode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAllInventoriesNodeDTO getAllInventoriesNodeDTO = (GetAllInventoriesNodeDTO) o;
    return Objects.equals(this.availToSellQty, getAllInventoriesNodeDTO.availToSellQty) &&
        Objects.equals(this.inputQty, getAllInventoriesNodeDTO.inputQty) &&
        Objects.equals(this.reservedQty, getAllInventoriesNodeDTO.reservedQty) &&
        Objects.equals(this.shipNode, getAllInventoriesNodeDTO.shipNode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availToSellQty, inputQty, reservedQty, shipNode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAllInventoriesNodeDTO {\n");
    sb.append("    availToSellQty: ").append(toIndentedString(availToSellQty)).append("\n");
    sb.append("    inputQty: ").append(toIndentedString(inputQty)).append("\n");
    sb.append("    reservedQty: ").append(toIndentedString(reservedQty)).append("\n");
    sb.append("    shipNode: ").append(toIndentedString(shipNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availToSellQty");
    openapiFields.add("inputQty");
    openapiFields.add("reservedQty");
    openapiFields.add("shipNode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAllInventoriesNodeDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAllInventoriesNodeDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAllInventoriesNodeDTO is not found in the empty JSON string", GetAllInventoriesNodeDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAllInventoriesNodeDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAllInventoriesNodeDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `availToSellQty`
      if (jsonObj.get("availToSellQty") != null && !jsonObj.get("availToSellQty").isJsonNull()) {
        GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerAvailToSellQty.validateJsonElement(jsonObj.get("availToSellQty"));
      }
      // validate the optional field `inputQty`
      if (jsonObj.get("inputQty") != null && !jsonObj.get("inputQty").isJsonNull()) {
        GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerInputQty.validateJsonElement(jsonObj.get("inputQty"));
      }
      // validate the optional field `reservedQty`
      if (jsonObj.get("reservedQty") != null && !jsonObj.get("reservedQty").isJsonNull()) {
        GetMultiNodeInventoryForAllSkuAndAllShipNodes200ResponseElementsInventoriesInnerNodesInnerReservedQty.validateJsonElement(jsonObj.get("reservedQty"));
      }
      if ((jsonObj.get("shipNode") != null && !jsonObj.get("shipNode").isJsonNull()) && !jsonObj.get("shipNode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipNode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipNode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAllInventoriesNodeDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAllInventoriesNodeDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAllInventoriesNodeDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAllInventoriesNodeDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAllInventoriesNodeDTO>() {
           @Override
           public void write(JsonWriter out, GetAllInventoriesNodeDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAllInventoriesNodeDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAllInventoriesNodeDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAllInventoriesNodeDTO
   * @throws IOException if the JSON string is invalid with respect to GetAllInventoriesNodeDTO
   */
  public static GetAllInventoriesNodeDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAllInventoriesNodeDTO.class);
  }

  /**
   * Convert an instance of GetAllInventoriesNodeDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

