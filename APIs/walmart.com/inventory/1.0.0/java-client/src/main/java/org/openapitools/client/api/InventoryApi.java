/*
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.GetInventory200Response;
import org.openapitools.client.model.GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response;
import org.openapitools.client.model.GetMultiNodeInventoryForSkuAndAllShipnodes200Response;
import org.openapitools.client.model.GetWFSInventory200Response;
import org.openapitools.client.model.UpdateBulkInventory200Response;
import org.openapitools.client.model.UpdateMultiNodeInventory200Response;
import org.openapitools.client.model.UpdateMultiNodeInventoryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getInventory
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode The shipNode for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInventoryValidateBeforeCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling getInventory(Async)");
        }

        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getInventory(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getInventory(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getInventory(Async)");
        }

        return getInventoryCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Inventory
     * You can use this API to get the inventory for a given item.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode The shipNode for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetInventory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetInventory200Response getInventory(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetInventory200Response> localVarResp = getInventoryWithHttpInfo(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Inventory
     * You can use this API to get the inventory for a given item.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode The shipNode for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetInventory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInventory200Response> getInventoryWithHttpInfo(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getInventoryValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetInventory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inventory (asynchronously)
     * You can use this API to get the inventory for a given item.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode The shipNode for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryAsync(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetInventory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInventoryValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetInventory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultiNodeInventoryForAllSkuAndAllShipNodes
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param limit The number of items returned. Cannot be more than 50. (optional, default to 10)
     * @param nextCursor String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiNodeInventoryForAllSkuAndAllShipNodesCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String limit, String nextCursor, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/inventories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nextCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextCursor", nextCursor));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiNodeInventoryForAllSkuAndAllShipNodesValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String limit, String nextCursor, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getMultiNodeInventoryForAllSkuAndAllShipNodes(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getMultiNodeInventoryForAllSkuAndAllShipNodes(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getMultiNodeInventoryForAllSkuAndAllShipNodes(Async)");
        }

        return getMultiNodeInventoryForAllSkuAndAllShipNodesCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, limit, nextCursor, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Multiple Item Inventory for All Ship Nodes
     * This API will retrieve the inventory count for all of a seller&#39;s items across all ship nodes by item to ship node mapping. Inventory can be zero or non-zero. Please note that NextCursor value changes and it needs to be passed on from the previous call to next call.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param limit The number of items returned. Cannot be more than 50. (optional, default to 10)
     * @param nextCursor String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response getMultiNodeInventoryForAllSkuAndAllShipNodes(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String limit, String nextCursor, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response> localVarResp = getMultiNodeInventoryForAllSkuAndAllShipNodesWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, limit, nextCursor, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Multiple Item Inventory for All Ship Nodes
     * This API will retrieve the inventory count for all of a seller&#39;s items across all ship nodes by item to ship node mapping. Inventory can be zero or non-zero. Please note that NextCursor value changes and it needs to be passed on from the previous call to next call.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param limit The number of items returned. Cannot be more than 50. (optional, default to 10)
     * @param nextCursor String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response> getMultiNodeInventoryForAllSkuAndAllShipNodesWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String limit, String nextCursor, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getMultiNodeInventoryForAllSkuAndAllShipNodesValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, limit, nextCursor, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Multiple Item Inventory for All Ship Nodes (asynchronously)
     * This API will retrieve the inventory count for all of a seller&#39;s items across all ship nodes by item to ship node mapping. Inventory can be zero or non-zero. Please note that NextCursor value changes and it needs to be passed on from the previous call to next call.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param limit The number of items returned. Cannot be more than 50. (optional, default to 10)
     * @param nextCursor String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiNodeInventoryForAllSkuAndAllShipNodesAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String limit, String nextCursor, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultiNodeInventoryForAllSkuAndAllShipNodesValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, limit, nextCursor, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultiNodeInventoryForSkuAndAllShipnodes
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode ShipNode Id of the ship node for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiNodeInventoryForSkuAndAllShipnodesCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/inventories/{sku}"
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiNodeInventoryForSkuAndAllShipnodesValidateBeforeCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling getMultiNodeInventoryForSkuAndAllShipnodes(Async)");
        }

        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getMultiNodeInventoryForSkuAndAllShipnodes(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getMultiNodeInventoryForSkuAndAllShipnodes(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getMultiNodeInventoryForSkuAndAllShipnodes(Async)");
        }

        return getMultiNodeInventoryForSkuAndAllShipnodesCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Single Item Inventory by Ship Node
     * This API will retrieve the inventory count for an item across all ship nodes or one specific ship node. You can specify the ship node for which you want to fetch the inventory
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode ShipNode Id of the ship node for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetMultiNodeInventoryForSkuAndAllShipnodes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetMultiNodeInventoryForSkuAndAllShipnodes200Response getMultiNodeInventoryForSkuAndAllShipnodes(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetMultiNodeInventoryForSkuAndAllShipnodes200Response> localVarResp = getMultiNodeInventoryForSkuAndAllShipnodesWithHttpInfo(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Single Item Inventory by Ship Node
     * This API will retrieve the inventory count for an item across all ship nodes or one specific ship node. You can specify the ship node for which you want to fetch the inventory
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode ShipNode Id of the ship node for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetMultiNodeInventoryForSkuAndAllShipnodes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMultiNodeInventoryForSkuAndAllShipnodes200Response> getMultiNodeInventoryForSkuAndAllShipnodesWithHttpInfo(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getMultiNodeInventoryForSkuAndAllShipnodesValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetMultiNodeInventoryForSkuAndAllShipnodes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single Item Inventory by Ship Node (asynchronously)
     * This API will retrieve the inventory count for an item across all ship nodes or one specific ship node. You can specify the ship node for which you want to fetch the inventory
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param shipNode ShipNode Id of the ship node for which the inventory is requested (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiNodeInventoryForSkuAndAllShipnodesAsync(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetMultiNodeInventoryForSkuAndAllShipnodes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultiNodeInventoryForSkuAndAllShipnodesValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetMultiNodeInventoryForSkuAndAllShipnodes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWFSInventory
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (optional)
     * @param fromModifiedDate last inventory modified date - starting range. (optional)
     * @param toModifiedDate last inventory modified date - starting range. (optional)
     * @param limit Number of Sku to be returned. Cannot be larger than 300. (optional, default to 10)
     * @param offset Offset is the number of records you wish to skip before selecting records. (optional, default to 0)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWFSInventoryCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String sku, String fromModifiedDate, String toModifiedDate, String limit, String offset, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/fulfillment/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (fromModifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromModifiedDate", fromModifiedDate));
        }

        if (toModifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toModifiedDate", toModifiedDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWFSInventoryValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String sku, String fromModifiedDate, String toModifiedDate, String limit, String offset, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getWFSInventory(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getWFSInventory(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getWFSInventory(Async)");
        }

        return getWFSInventoryCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, sku, fromModifiedDate, toModifiedDate, limit, offset, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * WFS Inventory
     * You can use this API to get the current Available to Sell inventory quantities for all WFS items in your catalog. You can also query specific SKUs or filter to only items updated after a specific date in order to reduce the response size.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (optional)
     * @param fromModifiedDate last inventory modified date - starting range. (optional)
     * @param toModifiedDate last inventory modified date - starting range. (optional)
     * @param limit Number of Sku to be returned. Cannot be larger than 300. (optional, default to 10)
     * @param offset Offset is the number of records you wish to skip before selecting records. (optional, default to 0)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetWFSInventory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetWFSInventory200Response getWFSInventory(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String sku, String fromModifiedDate, String toModifiedDate, String limit, String offset, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetWFSInventory200Response> localVarResp = getWFSInventoryWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, sku, fromModifiedDate, toModifiedDate, limit, offset, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * WFS Inventory
     * You can use this API to get the current Available to Sell inventory quantities for all WFS items in your catalog. You can also query specific SKUs or filter to only items updated after a specific date in order to reduce the response size.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (optional)
     * @param fromModifiedDate last inventory modified date - starting range. (optional)
     * @param toModifiedDate last inventory modified date - starting range. (optional)
     * @param limit Number of Sku to be returned. Cannot be larger than 300. (optional, default to 10)
     * @param offset Offset is the number of records you wish to skip before selecting records. (optional, default to 0)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetWFSInventory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWFSInventory200Response> getWFSInventoryWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String sku, String fromModifiedDate, String toModifiedDate, String limit, String offset, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getWFSInventoryValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, sku, fromModifiedDate, toModifiedDate, limit, offset, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetWFSInventory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * WFS Inventory (asynchronously)
     * You can use this API to get the current Available to Sell inventory quantities for all WFS items in your catalog. You can also query specific SKUs or filter to only items updated after a specific date in order to reduce the response size.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (optional)
     * @param fromModifiedDate last inventory modified date - starting range. (optional)
     * @param toModifiedDate last inventory modified date - starting range. (optional)
     * @param limit Number of Sku to be returned. Cannot be larger than 300. (optional, default to 10)
     * @param offset Offset is the number of records you wish to skip before selecting records. (optional, default to 0)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWFSInventoryAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String sku, String fromModifiedDate, String toModifiedDate, String limit, String offset, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetWFSInventory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWFSInventoryValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, sku, fromModifiedDate, toModifiedDate, limit, offset, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetWFSInventory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBulkInventory
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param shipNode The shipNode for which the inventory is to be updated. Not required in case of Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBulkInventoryCall(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (feedType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedType", feedType));
        }

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBulkInventoryValidateBeforeCall(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedType' is set
        if (feedType == null) {
            throw new ApiException("Missing the required parameter 'feedType' when calling updateBulkInventory(Async)");
        }

        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateBulkInventory(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateBulkInventory(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling updateBulkInventory(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling updateBulkInventory(Async)");
        }

        return updateBulkInventoryCall(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Bulk Item Inventory Update
     * Updates inventory for items in bulk.  Seller Can either use feed type \&quot;inventory\&quot; or \&quot;MP_INVENTORY\&quot;  * Inventory spec 1.4 feed type: inventory  * Inventory spec 1.5 feed type: MP_INVENTORY   Please Note: Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) only supports JSON Request and Responses. Refer to \&quot;MultiNode_Bulk_Inventory_Update_Request.json\&quot; for the corresponding request sample    Refer to the &lt;a href&#x3D;\&quot;https://developer.walmart.com/doc/us/us-mp/us-mp-inventory/\&quot;&gt;guide section&lt;/a&gt; for more detailed guide around each of the feed types    Refer to the throttling limits before uploading the Feed Files.
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param shipNode The shipNode for which the inventory is to be updated. Not required in case of Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return UpdateBulkInventory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBulkInventory200Response updateBulkInventory(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<UpdateBulkInventory200Response> localVarResp = updateBulkInventoryWithHttpInfo(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, shipNode, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Bulk Item Inventory Update
     * Updates inventory for items in bulk.  Seller Can either use feed type \&quot;inventory\&quot; or \&quot;MP_INVENTORY\&quot;  * Inventory spec 1.4 feed type: inventory  * Inventory spec 1.5 feed type: MP_INVENTORY   Please Note: Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) only supports JSON Request and Responses. Refer to \&quot;MultiNode_Bulk_Inventory_Update_Request.json\&quot; for the corresponding request sample    Refer to the &lt;a href&#x3D;\&quot;https://developer.walmart.com/doc/us/us-mp/us-mp-inventory/\&quot;&gt;guide section&lt;/a&gt; for more detailed guide around each of the feed types    Refer to the throttling limits before uploading the Feed Files.
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param shipNode The shipNode for which the inventory is to be updated. Not required in case of Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;UpdateBulkInventory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateBulkInventory200Response> updateBulkInventoryWithHttpInfo(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateBulkInventoryValidateBeforeCall(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, shipNode, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<UpdateBulkInventory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Item Inventory Update (asynchronously)
     * Updates inventory for items in bulk.  Seller Can either use feed type \&quot;inventory\&quot; or \&quot;MP_INVENTORY\&quot;  * Inventory spec 1.4 feed type: inventory  * Inventory spec 1.5 feed type: MP_INVENTORY   Please Note: Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) only supports JSON Request and Responses. Refer to \&quot;MultiNode_Bulk_Inventory_Update_Request.json\&quot; for the corresponding request sample    Refer to the &lt;a href&#x3D;\&quot;https://developer.walmart.com/doc/us/us-mp/us-mp-inventory/\&quot;&gt;guide section&lt;/a&gt; for more detailed guide around each of the feed types    Refer to the throttling limits before uploading the Feed Files.
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param shipNode The shipNode for which the inventory is to be updated. Not required in case of Multi Node Inventory Update Feed (feedType&#x3D;MP_INVENTORY) (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBulkInventoryAsync(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<UpdateBulkInventory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBulkInventoryValidateBeforeCall(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<UpdateBulkInventory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInventoryForAnItem
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getInventory200Response File fields (required)
     * @param shipNode The shipNode for which the inventory is to be updated. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInventoryForAnItemCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetInventory200Response getInventory200Response, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getInventory200Response;

        // create path and map variables
        String localVarPath = "/v3/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (shipNode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipNode", shipNode));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInventoryForAnItemValidateBeforeCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetInventory200Response getInventory200Response, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling updateInventoryForAnItem(Async)");
        }

        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateInventoryForAnItem(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateInventoryForAnItem(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling updateInventoryForAnItem(Async)");
        }

        // verify the required parameter 'getInventory200Response' is set
        if (getInventory200Response == null) {
            throw new ApiException("Missing the required parameter 'getInventory200Response' when calling updateInventoryForAnItem(Async)");
        }

        return updateInventoryForAnItemCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getInventory200Response, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Update inventory
     * Updates the inventory for a given item.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getInventory200Response File fields (required)
     * @param shipNode The shipNode for which the inventory is to be updated. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetInventory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetInventory200Response updateInventoryForAnItem(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetInventory200Response getInventory200Response, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetInventory200Response> localVarResp = updateInventoryForAnItemWithHttpInfo(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getInventory200Response, shipNode, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Update inventory
     * Updates the inventory for a given item.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getInventory200Response File fields (required)
     * @param shipNode The shipNode for which the inventory is to be updated. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetInventory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInventory200Response> updateInventoryForAnItemWithHttpInfo(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetInventory200Response getInventory200Response, String shipNode, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateInventoryForAnItemValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getInventory200Response, shipNode, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetInventory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update inventory (asynchronously)
     * Updates the inventory for a given item.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’, &#39;{&#39;, &#39;}&#39; as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getInventory200Response File fields (required)
     * @param shipNode The shipNode for which the inventory is to be updated. (optional)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInventoryForAnItemAsync(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetInventory200Response getInventory200Response, String shipNode, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetInventory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInventoryForAnItemValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getInventory200Response, shipNode, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetInventory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMultiNodeInventory
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updateMultiNodeInventoryRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMultiNodeInventoryCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdateMultiNodeInventoryRequest updateMultiNodeInventoryRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMultiNodeInventoryRequest;

        // create path and map variables
        String localVarPath = "/v3/inventories/{sku}"
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMultiNodeInventoryValidateBeforeCall(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdateMultiNodeInventoryRequest updateMultiNodeInventoryRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling updateMultiNodeInventory(Async)");
        }

        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateMultiNodeInventory(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateMultiNodeInventory(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling updateMultiNodeInventory(Async)");
        }

        // verify the required parameter 'updateMultiNodeInventoryRequest' is set
        if (updateMultiNodeInventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMultiNodeInventoryRequest' when calling updateMultiNodeInventory(Async)");
        }

        return updateMultiNodeInventoryCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updateMultiNodeInventoryRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Update Item Inventory per Ship Node
     * This API will update the inventory for an item across one or more fulfillment centers, known as ship nodes.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updateMultiNodeInventoryRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return UpdateMultiNodeInventory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMultiNodeInventory200Response updateMultiNodeInventory(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdateMultiNodeInventoryRequest updateMultiNodeInventoryRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<UpdateMultiNodeInventory200Response> localVarResp = updateMultiNodeInventoryWithHttpInfo(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updateMultiNodeInventoryRequest, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Update Item Inventory per Ship Node
     * This API will update the inventory for an item across one or more fulfillment centers, known as ship nodes.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updateMultiNodeInventoryRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;UpdateMultiNodeInventory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateMultiNodeInventory200Response> updateMultiNodeInventoryWithHttpInfo(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdateMultiNodeInventoryRequest updateMultiNodeInventoryRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateMultiNodeInventoryValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updateMultiNodeInventoryRequest, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<UpdateMultiNodeInventory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Inventory per Ship Node (asynchronously)
     * This API will update the inventory for an item across one or more fulfillment centers, known as ship nodes.
     * @param sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: &#39;:&#39;, &#39;/&#39;, &#39;?&#39;, &#39;#&#39;, &#39;[&#39;, &#39;]&#39;, &#39;@&#39;, &#39;!&#39;, &#39;$&#39;, &#39;&amp;&#39;, \&quot;&#39;\&quot;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;;&#39;, &#39;&#x3D;&#39;, ‘ ’ as well as &#39;%&#39; itself if it&#39;s a part of sku. Make sure to encode space with %20. Other characters don&#39;t need to be encoded. (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updateMultiNodeInventoryRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMultiNodeInventoryAsync(String sku, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdateMultiNodeInventoryRequest updateMultiNodeInventoryRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<UpdateMultiNodeInventory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMultiNodeInventoryValidateBeforeCall(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updateMultiNodeInventoryRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<UpdateMultiNodeInventory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
