/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetInventory200Response from '../model/GetInventory200Response';
import GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response from '../model/GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response';
import GetMultiNodeInventoryForSkuAndAllShipnodes200Response from '../model/GetMultiNodeInventoryForSkuAndAllShipnodes200Response';
import GetWFSInventory200Response from '../model/GetWFSInventory200Response';
import UpdateBulkInventory200Response from '../model/UpdateBulkInventory200Response';
import UpdateMultiNodeInventory200Response from '../model/UpdateMultiNodeInventory200Response';
import UpdateMultiNodeInventoryRequest from '../model/UpdateMultiNodeInventoryRequest';

/**
* Inventory service.
* @module api/InventoryApi
* @version 1.0.0
*/
export default class InventoryApi {

    /**
    * Constructs a new InventoryApi. 
    * @alias module:api/InventoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInventory operation.
     * @callback module:api/InventoryApi~getInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInventory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory
     * You can use this API to get the inventory for a given item.
     * @param {String} sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] The shipNode for which the inventory is requested
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~getInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInventory200Response}
     */
    getInventory(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling getInventory");
      }
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getInventory");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getInventory");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getInventory");
      }

      let pathParams = {
      };
      let queryParams = {
        'sku': sku,
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GetInventory200Response;
      return this.apiClient.callApi(
        '/v3/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultiNodeInventoryForAllSkuAndAllShipNodes operation.
     * @callback module:api/InventoryApi~getMultiNodeInventoryForAllSkuAndAllShipNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Multiple Item Inventory for All Ship Nodes
     * This API will retrieve the inventory count for all of a seller's items across all ship nodes by item to ship node mapping. Inventory can be zero or non-zero. Please note that NextCursor value changes and it needs to be passed on from the previous call to next call.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {Object} opts Optional parameters
     * @param {String} [limit = '10')] The number of items returned. Cannot be more than 50.
     * @param {String} [nextCursor] String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items.
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~getMultiNodeInventoryForAllSkuAndAllShipNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response}
     */
    getMultiNodeInventoryForAllSkuAndAllShipNodes(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getMultiNodeInventoryForAllSkuAndAllShipNodes");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getMultiNodeInventoryForAllSkuAndAllShipNodes");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getMultiNodeInventoryForAllSkuAndAllShipNodes");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextCursor': opts['nextCursor']
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultiNodeInventoryForAllSkuAndAllShipNodes200Response;
      return this.apiClient.callApi(
        '/v3/inventories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultiNodeInventoryForSkuAndAllShipnodes operation.
     * @callback module:api/InventoryApi~getMultiNodeInventoryForSkuAndAllShipnodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultiNodeInventoryForSkuAndAllShipnodes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Item Inventory by Ship Node
     * This API will retrieve the inventory count for an item across all ship nodes or one specific ship node. You can specify the ship node for which you want to fetch the inventory
     * @param {String} sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] ShipNode Id of the ship node for which the inventory is requested
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~getMultiNodeInventoryForSkuAndAllShipnodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultiNodeInventoryForSkuAndAllShipnodes200Response}
     */
    getMultiNodeInventoryForSkuAndAllShipnodes(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling getMultiNodeInventoryForSkuAndAllShipnodes");
      }
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getMultiNodeInventoryForSkuAndAllShipnodes");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getMultiNodeInventoryForSkuAndAllShipnodes");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getMultiNodeInventoryForSkuAndAllShipnodes");
      }

      let pathParams = {
        'sku': sku
      };
      let queryParams = {
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultiNodeInventoryForSkuAndAllShipnodes200Response;
      return this.apiClient.callApi(
        '/v3/inventories/{sku}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWFSInventory operation.
     * @callback module:api/InventoryApi~getWFSInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWFSInventory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WFS Inventory
     * You can use this API to get the current Available to Sell inventory quantities for all WFS items in your catalog. You can also query specific SKUs or filter to only items updated after a specific date in order to reduce the response size.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {Object} opts Optional parameters
     * @param {String} [sku] An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
     * @param {String} [fromModifiedDate] last inventory modified date - starting range.
     * @param {String} [toModifiedDate] last inventory modified date - starting range.
     * @param {String} [limit = '10')] Number of Sku to be returned. Cannot be larger than 300.
     * @param {String} [offset = '0')] Offset is the number of records you wish to skip before selecting records.
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~getWFSInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWFSInventory200Response}
     */
    getWFSInventory(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getWFSInventory");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getWFSInventory");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getWFSInventory");
      }

      let pathParams = {
      };
      let queryParams = {
        'sku': opts['sku'],
        'fromModifiedDate': opts['fromModifiedDate'],
        'toModifiedDate': opts['toModifiedDate'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWFSInventory200Response;
      return this.apiClient.callApi(
        '/v3/fulfillment/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBulkInventory operation.
     * @callback module:api/InventoryApi~updateBulkInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBulkInventory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Item Inventory Update
     * Updates inventory for items in bulk.  Seller Can either use feed type \"inventory\" or \"MP_INVENTORY\"  * Inventory spec 1.4 feed type: inventory  * Inventory spec 1.5 feed type: MP_INVENTORY   Please Note: Multi Node Inventory Update Feed (feedType=MP_INVENTORY) only supports JSON Request and Responses. Refer to \"MultiNode_Bulk_Inventory_Update_Request.json\" for the corresponding request sample    Refer to the <a href=\"https://developer.walmart.com/doc/us/us-mp/us-mp-inventory/\">guide section</a> for more detailed guide around each of the feed types    Refer to the throttling limits before uploading the Feed Files.
     * @param {module:model/String} feedType The feed Type
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {File} file Feed file to upload
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] The shipNode for which the inventory is to be updated. Not required in case of Multi Node Inventory Update Feed (feedType=MP_INVENTORY)
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~updateBulkInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBulkInventory200Response}
     */
    updateBulkInventory(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedType' is set
      if (feedType === undefined || feedType === null) {
        throw new Error("Missing the required parameter 'feedType' when calling updateBulkInventory");
      }
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateBulkInventory");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateBulkInventory");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling updateBulkInventory");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling updateBulkInventory");
      }

      let pathParams = {
      };
      let queryParams = {
        'feedType': feedType,
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = UpdateBulkInventory200Response;
      return this.apiClient.callApi(
        '/v3/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventoryForAnItem operation.
     * @callback module:api/InventoryApi~updateInventoryForAnItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInventory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update inventory
     * Updates the inventory for a given item.
     * @param {String} sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {module:model/GetInventory200Response} getInventory200Response File fields
     * @param {Object} opts Optional parameters
     * @param {String} [shipNode] The shipNode for which the inventory is to be updated.
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~updateInventoryForAnItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInventory200Response}
     */
    updateInventoryForAnItem(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getInventory200Response, opts, callback) {
      opts = opts || {};
      let postBody = getInventory200Response;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling updateInventoryForAnItem");
      }
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateInventoryForAnItem");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateInventoryForAnItem");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling updateInventoryForAnItem");
      }
      // verify the required parameter 'getInventory200Response' is set
      if (getInventory200Response === undefined || getInventory200Response === null) {
        throw new Error("Missing the required parameter 'getInventory200Response' when calling updateInventoryForAnItem");
      }

      let pathParams = {
      };
      let queryParams = {
        'sku': sku,
        'shipNode': opts['shipNode']
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GetInventory200Response;
      return this.apiClient.callApi(
        '/v3/inventory', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMultiNodeInventory operation.
     * @callback module:api/InventoryApi~updateMultiNodeInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMultiNodeInventory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Item Inventory per Ship Node
     * This API will update the inventory for an item across one or more fulfillment centers, known as ship nodes.
     * @param {String} sku An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {module:model/UpdateMultiNodeInventoryRequest} updateMultiNodeInventoryRequest Request fields
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/InventoryApi~updateMultiNodeInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMultiNodeInventory200Response}
     */
    updateMultiNodeInventory(sku, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updateMultiNodeInventoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMultiNodeInventoryRequest;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling updateMultiNodeInventory");
      }
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateMultiNodeInventory");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateMultiNodeInventory");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling updateMultiNodeInventory");
      }
      // verify the required parameter 'updateMultiNodeInventoryRequest' is set
      if (updateMultiNodeInventoryRequest === undefined || updateMultiNodeInventoryRequest === null) {
        throw new Error("Missing the required parameter 'updateMultiNodeInventoryRequest' when calling updateMultiNodeInventory");
      }

      let pathParams = {
        'sku': sku
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMultiNodeInventory200Response;
      return this.apiClient.callApi(
        '/v3/inventories/{sku}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
