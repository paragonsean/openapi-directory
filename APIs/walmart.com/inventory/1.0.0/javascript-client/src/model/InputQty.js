/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputQty model module.
 * @module model/InputQty
 * @version 1.0.0
 */
class InputQty {
    /**
     * Constructs a new <code>InputQty</code>.
     * Quantity of an item that is input by the seller
     * @alias module:model/InputQty
     * @param amount {Number} Inventory Count
     * @param unit {module:model/InputQty.UnitEnum} The unit of measurement. Example: 'EACH'
     */
    constructor(amount, unit) { 
        
        InputQty.initialize(this, amount, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, unit) { 
        obj['amount'] = amount;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>InputQty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputQty} obj Optional instance to populate.
     * @return {module:model/InputQty} The populated <code>InputQty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputQty();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputQty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputQty</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputQty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

InputQty.RequiredProperties = ["amount", "unit"];

/**
 * Inventory Count
 * @member {Number} amount
 */
InputQty.prototype['amount'] = undefined;

/**
 * The unit of measurement. Example: 'EACH'
 * @member {module:model/InputQty.UnitEnum} unit
 */
InputQty.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
InputQty['UnitEnum'] = {

    /**
     * value: "EACH"
     * @const
     */
    "EACH": "EACH"
};



export default InputQty;

