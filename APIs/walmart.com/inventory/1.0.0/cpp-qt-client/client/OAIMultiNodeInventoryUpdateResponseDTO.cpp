/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiNodeInventoryUpdateResponseDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiNodeInventoryUpdateResponseDTO::OAIMultiNodeInventoryUpdateResponseDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiNodeInventoryUpdateResponseDTO::OAIMultiNodeInventoryUpdateResponseDTO() {
    this->initializeModel();
}

OAIMultiNodeInventoryUpdateResponseDTO::~OAIMultiNodeInventoryUpdateResponseDTO() {}

void OAIMultiNodeInventoryUpdateResponseDTO::initializeModel() {

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIMultiNodeInventoryUpdateResponseDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiNodeInventoryUpdateResponseDTO::fromJsonObject(QJsonObject json) {

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIMultiNodeInventoryUpdateResponseDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiNodeInventoryUpdateResponseDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

QList<OAIUpdateMultiNodeInventory_200_response_nodes_inner> OAIMultiNodeInventoryUpdateResponseDTO::getNodes() const {
    return m_nodes;
}
void OAIMultiNodeInventoryUpdateResponseDTO::setNodes(const QList<OAIUpdateMultiNodeInventory_200_response_nodes_inner> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIMultiNodeInventoryUpdateResponseDTO::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIMultiNodeInventoryUpdateResponseDTO::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIMultiNodeInventoryUpdateResponseDTO::getSku() const {
    return m_sku;
}
void OAIMultiNodeInventoryUpdateResponseDTO::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIMultiNodeInventoryUpdateResponseDTO::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIMultiNodeInventoryUpdateResponseDTO::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIMultiNodeInventoryUpdateResponseDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiNodeInventoryUpdateResponseDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
