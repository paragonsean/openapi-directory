/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMultiNodeInventory_request_inventories_nodes_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::OAIUpdateMultiNodeInventory_request_inventories_nodes_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::OAIUpdateMultiNodeInventory_request_inventories_nodes_inner() {
    this->initializeModel();
}

OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::~OAIUpdateMultiNodeInventory_request_inventories_nodes_inner() {}

void OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::initializeModel() {

    m_input_qty_isSet = false;
    m_input_qty_isValid = false;

    m_ship_node_isSet = false;
    m_ship_node_isValid = false;
}

void OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::fromJsonObject(QJsonObject json) {

    m_input_qty_isValid = ::OpenAPI::fromJsonValue(m_input_qty, json[QString("inputQty")]);
    m_input_qty_isSet = !json[QString("inputQty")].isNull() && m_input_qty_isValid;

    m_ship_node_isValid = ::OpenAPI::fromJsonValue(m_ship_node, json[QString("shipNode")]);
    m_ship_node_isSet = !json[QString("shipNode")].isNull() && m_ship_node_isValid;
}

QString OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_input_qty.isSet()) {
        obj.insert(QString("inputQty"), ::OpenAPI::toJsonValue(m_input_qty));
    }
    if (m_ship_node_isSet) {
        obj.insert(QString("shipNode"), ::OpenAPI::toJsonValue(m_ship_node));
    }
    return obj;
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_elements_inventories_inner_nodes_inner_reservedQty OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::getInputQty() const {
    return m_input_qty;
}
void OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::setInputQty(const OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_elements_inventories_inner_nodes_inner_reservedQty &input_qty) {
    m_input_qty = input_qty;
    m_input_qty_isSet = true;
}

bool OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::is_input_qty_Set() const{
    return m_input_qty_isSet;
}

bool OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::is_input_qty_Valid() const{
    return m_input_qty_isValid;
}

QString OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::getShipNode() const {
    return m_ship_node;
}
void OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::setShipNode(const QString &ship_node) {
    m_ship_node = ship_node;
    m_ship_node_isSet = true;
}

bool OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::is_ship_node_Set() const{
    return m_ship_node_isSet;
}

bool OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::is_ship_node_Valid() const{
    return m_ship_node_isValid;
}

bool OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_node_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMultiNodeInventory_request_inventories_nodes_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_qty_isValid && m_ship_node_isValid && true;
}

} // namespace OpenAPI
