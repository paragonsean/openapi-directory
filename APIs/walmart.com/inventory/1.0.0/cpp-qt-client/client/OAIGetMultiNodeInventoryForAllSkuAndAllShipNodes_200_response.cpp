/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response() {
    this->initializeModel();
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::~OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response() {}

void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.isSet()) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_elements OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::getElements() const {
    return m_elements;
}
void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::setElements(const OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_elements &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::is_elements_Valid() const{
    return m_elements_isValid;
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::getMeta() const {
    return m_meta;
}
void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::setMeta(const OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
