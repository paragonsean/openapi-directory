/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta() {
    this->initializeModel();
}

OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::~OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta() {}

void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::initializeModel() {

    m_next_cursor_isSet = false;
    m_next_cursor_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::fromJsonObject(QJsonObject json) {

    m_next_cursor_isValid = ::OpenAPI::fromJsonValue(m_next_cursor, json[QString("nextCursor")]);
    m_next_cursor_isSet = !json[QString("nextCursor")].isNull() && m_next_cursor_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_next_cursor_isSet) {
        obj.insert(QString("nextCursor"), ::OpenAPI::toJsonValue(m_next_cursor));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QString OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::getNextCursor() const {
    return m_next_cursor;
}
void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::setNextCursor(const QString &next_cursor) {
    m_next_cursor = next_cursor;
    m_next_cursor_isSet = true;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::is_next_cursor_Set() const{
    return m_next_cursor_isSet;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::is_next_cursor_Valid() const{
    return m_next_cursor_isValid;
}

double OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::getTotalCount() const {
    return m_total_count;
}
void OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::setTotalCount(const double &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
