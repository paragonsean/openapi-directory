/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWFSInventory_200_response_headers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWFSInventory_200_response_headers::OAIGetWFSInventory_200_response_headers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWFSInventory_200_response_headers::OAIGetWFSInventory_200_response_headers() {
    this->initializeModel();
}

OAIGetWFSInventory_200_response_headers::~OAIGetWFSInventory_200_response_headers() {}

void OAIGetWFSInventory_200_response_headers::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIGetWFSInventory_200_response_headers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWFSInventory_200_response_headers::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIGetWFSInventory_200_response_headers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWFSInventory_200_response_headers::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAIGetWFSInventory_200_response_headers::getLimit() const {
    return m_limit;
}
void OAIGetWFSInventory_200_response_headers::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGetWFSInventory_200_response_headers::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGetWFSInventory_200_response_headers::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIGetWFSInventory_200_response_headers::getOffset() const {
    return m_offset;
}
void OAIGetWFSInventory_200_response_headers::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIGetWFSInventory_200_response_headers::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGetWFSInventory_200_response_headers::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAIGetWFSInventory_200_response_headers::getTotalCount() const {
    return m_total_count;
}
void OAIGetWFSInventory_200_response_headers::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIGetWFSInventory_200_response_headers::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIGetWFSInventory_200_response_headers::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIGetWFSInventory_200_response_headers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWFSInventory_200_response_headers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
