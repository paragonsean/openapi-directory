/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner() {
    this->initializeModel();
}

OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::~OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner() {}

void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_causes_isSet = false;
    m_causes_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_identifiers_isSet = false;
    m_error_identifiers_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_causes_isValid = ::OpenAPI::fromJsonValue(m_causes, json[QString("causes")]);
    m_causes_isSet = !json[QString("causes")].isNull() && m_causes_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_identifiers_isValid = ::OpenAPI::fromJsonValue(m_error_identifiers, json[QString("errorIdentifiers")]);
    m_error_identifiers_isSet = !json[QString("errorIdentifiers")].isNull() && m_error_identifiers_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_causes.size() > 0) {
        obj.insert(QString("causes"), ::OpenAPI::toJsonValue(m_causes));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_identifiers.size() > 0) {
        obj.insert(QString("errorIdentifiers"), ::OpenAPI::toJsonValue(m_error_identifiers));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getCategory() const {
    return m_category;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_category_Set() const{
    return m_category_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner_causes_inner> OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getCauses() const {
    return m_causes;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setCauses(const QList<OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner_causes_inner> &causes) {
    m_causes = causes;
    m_causes_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_causes_Set() const{
    return m_causes_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_causes_Valid() const{
    return m_causes_isValid;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getCode() const {
    return m_code;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getDescription() const {
    return m_description;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, OAIObject> OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getErrorIdentifiers() const {
    return m_error_identifiers;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setErrorIdentifiers(const QMap<QString, OAIObject> &error_identifiers) {
    m_error_identifiers = error_identifiers;
    m_error_identifiers_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_error_identifiers_Set() const{
    return m_error_identifiers_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_error_identifiers_Valid() const{
    return m_error_identifiers_isValid;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getField() const {
    return m_field;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_field_Set() const{
    return m_field_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getInfo() const {
    return m_info;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_info_Set() const{
    return m_info_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_info_Valid() const{
    return m_info_isValid;
}

QString OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::getSeverity() const {
    return m_severity;
}
void OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_causes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response_nodes_inner_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
