/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWFSInventory_200_response_payload_inventory_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWFSInventory_200_response_payload_inventory_inner::OAIGetWFSInventory_200_response_payload_inventory_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWFSInventory_200_response_payload_inventory_inner::OAIGetWFSInventory_200_response_payload_inventory_inner() {
    this->initializeModel();
}

OAIGetWFSInventory_200_response_payload_inventory_inner::~OAIGetWFSInventory_200_response_payload_inventory_inner() {}

void OAIGetWFSInventory_200_response_payload_inventory_inner::initializeModel() {

    m_ship_nodes_isSet = false;
    m_ship_nodes_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIGetWFSInventory_200_response_payload_inventory_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWFSInventory_200_response_payload_inventory_inner::fromJsonObject(QJsonObject json) {

    m_ship_nodes_isValid = ::OpenAPI::fromJsonValue(m_ship_nodes, json[QString("shipNodes")]);
    m_ship_nodes_isSet = !json[QString("shipNodes")].isNull() && m_ship_nodes_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIGetWFSInventory_200_response_payload_inventory_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWFSInventory_200_response_payload_inventory_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ship_nodes.size() > 0) {
        obj.insert(QString("shipNodes"), ::OpenAPI::toJsonValue(m_ship_nodes));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

QList<OAIGetWFSInventory_200_response_payload_inventory_inner_shipNodes_inner> OAIGetWFSInventory_200_response_payload_inventory_inner::getShipNodes() const {
    return m_ship_nodes;
}
void OAIGetWFSInventory_200_response_payload_inventory_inner::setShipNodes(const QList<OAIGetWFSInventory_200_response_payload_inventory_inner_shipNodes_inner> &ship_nodes) {
    m_ship_nodes = ship_nodes;
    m_ship_nodes_isSet = true;
}

bool OAIGetWFSInventory_200_response_payload_inventory_inner::is_ship_nodes_Set() const{
    return m_ship_nodes_isSet;
}

bool OAIGetWFSInventory_200_response_payload_inventory_inner::is_ship_nodes_Valid() const{
    return m_ship_nodes_isValid;
}

QString OAIGetWFSInventory_200_response_payload_inventory_inner::getSku() const {
    return m_sku;
}
void OAIGetWFSInventory_200_response_payload_inventory_inner::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIGetWFSInventory_200_response_payload_inventory_inner::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIGetWFSInventory_200_response_payload_inventory_inner::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIGetWFSInventory_200_response_payload_inventory_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ship_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWFSInventory_200_response_payload_inventory_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
