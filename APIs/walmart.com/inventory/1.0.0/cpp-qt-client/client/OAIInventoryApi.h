/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryApi_H
#define OAI_OAIInventoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetInventory_200_response.h"
#include "OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response.h"
#include "OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response.h"
#include "OAIGetWFSInventory_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAIUpdateBulkInventory_200_response.h"
#include "OAIUpdateMultiNodeInventory_200_response.h"
#include "OAIUpdateMultiNodeInventory_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryApi(const int timeOut = 0);
    ~OAIInventoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sku QString [required]
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  ship_node QString [optional]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void getInventory(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  next_cursor QString [optional]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void getMultiNodeInventoryForAllSkuAndAllShipNodes(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sku QString [required]
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  ship_node QString [optional]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void getMultiNodeInventoryForSkuAndAllShipnodes(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  sku QString [optional]
    * @param[in]  from_modified_date QString [optional]
    * @param[in]  to_modified_date QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void getWFSInventory(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_modified_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_modified_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feed_type QString [required]
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  ship_node QString [optional]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void updateBulkInventory(const QString &feed_type, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sku QString [required]
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  oai_get_inventory_200_response OAIGetInventory_200_response [required]
    * @param[in]  ship_node QString [optional]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void updateInventoryForAnItem(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIGetInventory_200_response &oai_get_inventory_200_response, const ::OpenAPI::OptionalParam<QString> &ship_node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sku QString [required]
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  oai_update_multi_node_inventory_request OAIUpdateMultiNodeInventory_request [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void updateMultiNodeInventory(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIUpdateMultiNodeInventory_request &oai_update_multi_node_inventory_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getInventoryCallback(OAIHttpRequestWorker *worker);
    void getMultiNodeInventoryForAllSkuAndAllShipNodesCallback(OAIHttpRequestWorker *worker);
    void getMultiNodeInventoryForSkuAndAllShipnodesCallback(OAIHttpRequestWorker *worker);
    void getWFSInventoryCallback(OAIHttpRequestWorker *worker);
    void updateBulkInventoryCallback(OAIHttpRequestWorker *worker);
    void updateInventoryForAnItemCallback(OAIHttpRequestWorker *worker);
    void updateMultiNodeInventoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getInventorySignal(OAIGetInventory_200_response summary);
    void getMultiNodeInventoryForAllSkuAndAllShipNodesSignal(OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response summary);
    void getMultiNodeInventoryForSkuAndAllShipnodesSignal(OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response summary);
    void getWFSInventorySignal(OAIGetWFSInventory_200_response summary);
    void updateBulkInventorySignal(OAIUpdateBulkInventory_200_response summary);
    void updateInventoryForAnItemSignal(OAIGetInventory_200_response summary);
    void updateMultiNodeInventorySignal(OAIUpdateMultiNodeInventory_200_response summary);


    void getInventorySignalFull(OAIHttpRequestWorker *worker, OAIGetInventory_200_response summary);
    void getMultiNodeInventoryForAllSkuAndAllShipNodesSignalFull(OAIHttpRequestWorker *worker, OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response summary);
    void getMultiNodeInventoryForSkuAndAllShipnodesSignalFull(OAIHttpRequestWorker *worker, OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response summary);
    void getWFSInventorySignalFull(OAIHttpRequestWorker *worker, OAIGetWFSInventory_200_response summary);
    void updateBulkInventorySignalFull(OAIHttpRequestWorker *worker, OAIUpdateBulkInventory_200_response summary);
    void updateInventoryForAnItemSignalFull(OAIHttpRequestWorker *worker, OAIGetInventory_200_response summary);
    void updateMultiNodeInventorySignalFull(OAIHttpRequestWorker *worker, OAIUpdateMultiNodeInventory_200_response summary);

    Q_DECL_DEPRECATED_X("Use getInventorySignalError() instead")
    void getInventorySignalE(OAIGetInventory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInventorySignalError(OAIGetInventory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiNodeInventoryForAllSkuAndAllShipNodesSignalError() instead")
    void getMultiNodeInventoryForAllSkuAndAllShipNodesSignalE(OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiNodeInventoryForAllSkuAndAllShipNodesSignalError(OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiNodeInventoryForSkuAndAllShipnodesSignalError() instead")
    void getMultiNodeInventoryForSkuAndAllShipnodesSignalE(OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiNodeInventoryForSkuAndAllShipnodesSignalError(OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWFSInventorySignalError() instead")
    void getWFSInventorySignalE(OAIGetWFSInventory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWFSInventorySignalError(OAIGetWFSInventory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBulkInventorySignalError() instead")
    void updateBulkInventorySignalE(OAIUpdateBulkInventory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBulkInventorySignalError(OAIUpdateBulkInventory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInventoryForAnItemSignalError() instead")
    void updateInventoryForAnItemSignalE(OAIGetInventory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInventoryForAnItemSignalError(OAIGetInventory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMultiNodeInventorySignalError() instead")
    void updateMultiNodeInventorySignalE(OAIUpdateMultiNodeInventory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMultiNodeInventorySignalError(OAIUpdateMultiNodeInventory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getInventorySignalErrorFull() instead")
    void getInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiNodeInventoryForAllSkuAndAllShipNodesSignalErrorFull() instead")
    void getMultiNodeInventoryForAllSkuAndAllShipNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiNodeInventoryForAllSkuAndAllShipNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiNodeInventoryForSkuAndAllShipnodesSignalErrorFull() instead")
    void getMultiNodeInventoryForSkuAndAllShipnodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiNodeInventoryForSkuAndAllShipnodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWFSInventorySignalErrorFull() instead")
    void getWFSInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWFSInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBulkInventorySignalErrorFull() instead")
    void updateBulkInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBulkInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInventoryForAnItemSignalErrorFull() instead")
    void updateInventoryForAnItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInventoryForAnItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMultiNodeInventorySignalErrorFull() instead")
    void updateMultiNodeInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMultiNodeInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
