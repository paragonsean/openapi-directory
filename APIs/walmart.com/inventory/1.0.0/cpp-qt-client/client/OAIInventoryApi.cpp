/**
 * Inventory Management
 * Maintaining up-to-date inventory for your items on Walmart.com ensures a great experience for your customers and greater sales opportunities for you.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIInventoryApi::OAIInventoryApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIInventoryApi::~OAIInventoryApi() {
}

void OAIInventoryApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://marketplace.walmartapis.com"),
    "Production URL",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://sandbox.walmartapis.com"),
    "Sandbox URL",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getInventory", defaultConf);
    _serverIndices.insert("getInventory", 0);
    _serverConfigs.insert("getMultiNodeInventoryForAllSkuAndAllShipNodes", defaultConf);
    _serverIndices.insert("getMultiNodeInventoryForAllSkuAndAllShipNodes", 0);
    _serverConfigs.insert("getMultiNodeInventoryForSkuAndAllShipnodes", defaultConf);
    _serverIndices.insert("getMultiNodeInventoryForSkuAndAllShipnodes", 0);
    _serverConfigs.insert("getWFSInventory", defaultConf);
    _serverIndices.insert("getWFSInventory", 0);
    _serverConfigs.insert("updateBulkInventory", defaultConf);
    _serverIndices.insert("updateBulkInventory", 0);
    _serverConfigs.insert("updateInventoryForAnItem", defaultConf);
    _serverIndices.insert("updateInventoryForAnItem", 0);
    _serverConfigs.insert("updateMultiNodeInventory", defaultConf);
    _serverIndices.insert("updateMultiNodeInventory", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIInventoryApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIInventoryApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIInventoryApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIInventoryApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIInventoryApi::setUsername(const QString &username) {
    _username = username;
}

void OAIInventoryApi::setPassword(const QString &password) {
    _password = password;
}


void OAIInventoryApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIInventoryApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIInventoryApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIInventoryApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInventoryApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInventoryApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIInventoryApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIInventoryApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIInventoryApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIInventoryApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIInventoryApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIInventoryApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIInventoryApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIInventoryApi::getInventory(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &ship_node, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["getInventory"][_serverIndices.value("getInventory")].URL()+"/v3/inventory");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sku", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sku")).append(querySuffix).append(QUrl::toPercentEncoding(sku));
    }
    if (ship_node.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::getInventoryCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::getInventoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetInventory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getInventorySignal(output);
        Q_EMIT getInventorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getInventorySignalE(output, error_type, error_str);
        Q_EMIT getInventorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getInventorySignalError(output, error_type, error_str);
        Q_EMIT getInventorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::getMultiNodeInventoryForAllSkuAndAllShipNodes(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &next_cursor, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["getMultiNodeInventoryForAllSkuAndAllShipNodes"][_serverIndices.value("getMultiNodeInventoryForAllSkuAndAllShipNodes")].URL()+"/v3/inventories");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (next_cursor.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nextCursor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nextCursor")).append(querySuffix).append(QUrl::toPercentEncoding(next_cursor.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::getMultiNodeInventoryForAllSkuAndAllShipNodesCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::getMultiNodeInventoryForAllSkuAndAllShipNodesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetMultiNodeInventoryForAllSkuAndAllShipNodes_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMultiNodeInventoryForAllSkuAndAllShipNodesSignal(output);
        Q_EMIT getMultiNodeInventoryForAllSkuAndAllShipNodesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMultiNodeInventoryForAllSkuAndAllShipNodesSignalE(output, error_type, error_str);
        Q_EMIT getMultiNodeInventoryForAllSkuAndAllShipNodesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMultiNodeInventoryForAllSkuAndAllShipNodesSignalError(output, error_type, error_str);
        Q_EMIT getMultiNodeInventoryForAllSkuAndAllShipNodesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::getMultiNodeInventoryForSkuAndAllShipnodes(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &ship_node, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["getMultiNodeInventoryForSkuAndAllShipnodes"][_serverIndices.value("getMultiNodeInventoryForSkuAndAllShipnodes")].URL()+"/v3/inventories/{sku}");
    
    
    {
        QString skuPathParam("{");
        skuPathParam.append("sku").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sku", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sku"+pathSuffix : pathPrefix;
        fullPath.replace(skuPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sku)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (ship_node.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::getMultiNodeInventoryForSkuAndAllShipnodesCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::getMultiNodeInventoryForSkuAndAllShipnodesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetMultiNodeInventoryForSkuAndAllShipnodes_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMultiNodeInventoryForSkuAndAllShipnodesSignal(output);
        Q_EMIT getMultiNodeInventoryForSkuAndAllShipnodesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMultiNodeInventoryForSkuAndAllShipnodesSignalE(output, error_type, error_str);
        Q_EMIT getMultiNodeInventoryForSkuAndAllShipnodesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMultiNodeInventoryForSkuAndAllShipnodesSignalError(output, error_type, error_str);
        Q_EMIT getMultiNodeInventoryForSkuAndAllShipnodesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::getWFSInventory(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &sku, const ::OpenAPI::OptionalParam<QString> &from_modified_date, const ::OpenAPI::OptionalParam<QString> &to_modified_date, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["getWFSInventory"][_serverIndices.value("getWFSInventory")].URL()+"/v3/fulfillment/inventory");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (sku.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sku", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sku")).append(querySuffix).append(QUrl::toPercentEncoding(sku.stringValue()));
    }
    if (from_modified_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fromModifiedDate", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fromModifiedDate")).append(querySuffix).append(QUrl::toPercentEncoding(from_modified_date.stringValue()));
    }
    if (to_modified_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "toModifiedDate", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("toModifiedDate")).append(querySuffix).append(QUrl::toPercentEncoding(to_modified_date.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::getWFSInventoryCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::getWFSInventoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetWFSInventory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWFSInventorySignal(output);
        Q_EMIT getWFSInventorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWFSInventorySignalE(output, error_type, error_str);
        Q_EMIT getWFSInventorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWFSInventorySignalError(output, error_type, error_str);
        Q_EMIT getWFSInventorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::updateBulkInventory(const QString &feed_type, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &ship_node, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["updateBulkInventory"][_serverIndices.value("updateBulkInventory")].URL()+"/v3/feeds");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "feedType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("feedType")).append(querySuffix).append(QUrl::toPercentEncoding(feed_type));
    }
    if (ship_node.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("file", file.local_filename, file.request_filename, file.mime_type);
    }

    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::updateBulkInventoryCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::updateBulkInventoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateBulkInventory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateBulkInventorySignal(output);
        Q_EMIT updateBulkInventorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateBulkInventorySignalE(output, error_type, error_str);
        Q_EMIT updateBulkInventorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateBulkInventorySignalError(output, error_type, error_str);
        Q_EMIT updateBulkInventorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::updateInventoryForAnItem(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIGetInventory_200_response &oai_get_inventory_200_response, const ::OpenAPI::OptionalParam<QString> &ship_node, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["updateInventoryForAnItem"][_serverIndices.value("updateInventoryForAnItem")].URL()+"/v3/inventory");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sku", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sku")).append(querySuffix).append(QUrl::toPercentEncoding(sku));
    }
    if (ship_node.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "shipNode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("shipNode")).append(querySuffix).append(QUrl::toPercentEncoding(ship_node.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_get_inventory_200_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::updateInventoryForAnItemCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::updateInventoryForAnItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetInventory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateInventoryForAnItemSignal(output);
        Q_EMIT updateInventoryForAnItemSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateInventoryForAnItemSignalE(output, error_type, error_str);
        Q_EMIT updateInventoryForAnItemSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateInventoryForAnItemSignalError(output, error_type, error_str);
        Q_EMIT updateInventoryForAnItemSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::updateMultiNodeInventory(const QString &sku, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIUpdateMultiNodeInventory_request &oai_update_multi_node_inventory_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["updateMultiNodeInventory"][_serverIndices.value("updateMultiNodeInventory")].URL()+"/v3/inventories/{sku}");
    
    
    {
        QString skuPathParam("{");
        skuPathParam.append("sku").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sku", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sku"+pathSuffix : pathPrefix;
        fullPath.replace(skuPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sku)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_multi_node_inventory_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryApi::updateMultiNodeInventoryCallback);
    connect(this, &OAIInventoryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInventoryApi::updateMultiNodeInventoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateMultiNodeInventory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateMultiNodeInventorySignal(output);
        Q_EMIT updateMultiNodeInventorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateMultiNodeInventorySignalE(output, error_type, error_str);
        Q_EMIT updateMultiNodeInventorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateMultiNodeInventorySignalError(output, error_type, error_str);
        Q_EMIT updateMultiNodeInventorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
