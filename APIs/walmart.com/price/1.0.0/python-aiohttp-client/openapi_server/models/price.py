# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_price_request_pricing_inner import UpdatePriceRequestPricingInner
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, definitions: object=None, offer_id: str=None, pricing: List[UpdatePriceRequestPricingInner]=None, replace_all: str=None, sku: str=None):
        """Price - a model defined in OpenAPI

        :param definitions: The definitions of this Price.
        :param offer_id: The offer_id of this Price.
        :param pricing: The pricing of this Price.
        :param replace_all: The replace_all of this Price.
        :param sku: The sku of this Price.
        """
        self.openapi_types = {
            'definitions': object,
            'offer_id': str,
            'pricing': List[UpdatePriceRequestPricingInner],
            'replace_all': str,
            'sku': str
        }

        self.attribute_map = {
            'definitions': 'definitions',
            'offer_id': 'offerId',
            'pricing': 'pricing',
            'replace_all': 'replaceAll',
            'sku': 'sku'
        }

        self._definitions = definitions
        self._offer_id = offer_id
        self._pricing = pricing
        self._replace_all = replace_all
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def definitions(self):
        """Gets the definitions of this Price.


        :return: The definitions of this Price.
        :rtype: object
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this Price.


        :param definitions: The definitions of this Price.
        :type definitions: object
        """

        self._definitions = definitions

    @property
    def offer_id(self):
        """Gets the offer_id of this Price.

        This is applicable only for promotions

        :return: The offer_id of this Price.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Price.

        This is applicable only for promotions

        :param offer_id: The offer_id of this Price.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def pricing(self):
        """Gets the pricing of this Price.


        :return: The pricing of this Price.
        :rtype: List[UpdatePriceRequestPricingInner]
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this Price.


        :param pricing: The pricing of this Price.
        :type pricing: List[UpdatePriceRequestPricingInner]
        """
        if pricing is None:
            raise ValueError("Invalid value for `pricing`, must not be `None`")

        self._pricing = pricing

    @property
    def replace_all(self):
        """Gets the replace_all of this Price.

        This is applicable only for promotions

        :return: The replace_all of this Price.
        :rtype: str
        """
        return self._replace_all

    @replace_all.setter
    def replace_all(self, replace_all):
        """Sets the replace_all of this Price.

        This is applicable only for promotions

        :param replace_all: The replace_all of this Price.
        :type replace_all: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if replace_all not in allowed_values:
            raise ValueError(
                "Invalid value for `replace_all` ({0}), must be one of {1}"
                .format(replace_all, allowed_values)
            )

        self._replace_all = replace_all

    @property
    def sku(self):
        """Gets the sku of this Price.


        :return: The sku of this Price.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Price.


        :param sku: The sku of this Price.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
