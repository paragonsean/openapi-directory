# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeedItemsHeaderRequestDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locale: str=None, mart: str=None, process_mode: str=None, selling_channel: str=None, subset: str=None, version: str=None):
        """FeedItemsHeaderRequestDTO - a model defined in OpenAPI

        :param locale: The locale of this FeedItemsHeaderRequestDTO.
        :param mart: The mart of this FeedItemsHeaderRequestDTO.
        :param process_mode: The process_mode of this FeedItemsHeaderRequestDTO.
        :param selling_channel: The selling_channel of this FeedItemsHeaderRequestDTO.
        :param subset: The subset of this FeedItemsHeaderRequestDTO.
        :param version: The version of this FeedItemsHeaderRequestDTO.
        """
        self.openapi_types = {
            'locale': str,
            'mart': str,
            'process_mode': str,
            'selling_channel': str,
            'subset': str,
            'version': str
        }

        self.attribute_map = {
            'locale': 'locale',
            'mart': 'mart',
            'process_mode': 'processMode',
            'selling_channel': 'sellingChannel',
            'subset': 'subset',
            'version': 'version'
        }

        self._locale = locale
        self._mart = mart
        self._process_mode = process_mode
        self._selling_channel = selling_channel
        self._subset = subset
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedItemsHeaderRequestDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedItemsHeaderRequestDTO of this FeedItemsHeaderRequestDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locale(self):
        """Gets the locale of this FeedItemsHeaderRequestDTO.


        :return: The locale of this FeedItemsHeaderRequestDTO.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this FeedItemsHeaderRequestDTO.


        :param locale: The locale of this FeedItemsHeaderRequestDTO.
        :type locale: str
        """

        self._locale = locale

    @property
    def mart(self):
        """Gets the mart of this FeedItemsHeaderRequestDTO.


        :return: The mart of this FeedItemsHeaderRequestDTO.
        :rtype: str
        """
        return self._mart

    @mart.setter
    def mart(self, mart):
        """Sets the mart of this FeedItemsHeaderRequestDTO.


        :param mart: The mart of this FeedItemsHeaderRequestDTO.
        :type mart: str
        """

        self._mart = mart

    @property
    def process_mode(self):
        """Gets the process_mode of this FeedItemsHeaderRequestDTO.


        :return: The process_mode of this FeedItemsHeaderRequestDTO.
        :rtype: str
        """
        return self._process_mode

    @process_mode.setter
    def process_mode(self, process_mode):
        """Sets the process_mode of this FeedItemsHeaderRequestDTO.


        :param process_mode: The process_mode of this FeedItemsHeaderRequestDTO.
        :type process_mode: str
        """

        self._process_mode = process_mode

    @property
    def selling_channel(self):
        """Gets the selling_channel of this FeedItemsHeaderRequestDTO.


        :return: The selling_channel of this FeedItemsHeaderRequestDTO.
        :rtype: str
        """
        return self._selling_channel

    @selling_channel.setter
    def selling_channel(self, selling_channel):
        """Sets the selling_channel of this FeedItemsHeaderRequestDTO.


        :param selling_channel: The selling_channel of this FeedItemsHeaderRequestDTO.
        :type selling_channel: str
        """

        self._selling_channel = selling_channel

    @property
    def subset(self):
        """Gets the subset of this FeedItemsHeaderRequestDTO.


        :return: The subset of this FeedItemsHeaderRequestDTO.
        :rtype: str
        """
        return self._subset

    @subset.setter
    def subset(self, subset):
        """Sets the subset of this FeedItemsHeaderRequestDTO.


        :param subset: The subset of this FeedItemsHeaderRequestDTO.
        :type subset: str
        """

        self._subset = subset

    @property
    def version(self):
        """Gets the version of this FeedItemsHeaderRequestDTO.


        :return: The version of this FeedItemsHeaderRequestDTO.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FeedItemsHeaderRequestDTO.


        :param version: The version of this FeedItemsHeaderRequestDTO.
        :type version: str
        """

        self._version = version
