# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_price200_response_errors_inner import UpdatePrice200ResponseErrorsInner
from openapi_server import util


class ItemPriceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[UpdatePrice200ResponseErrorsInner]=None, mart: str=None, message: str=None, sku: str=None, status_code: int=None):
        """ItemPriceResponse - a model defined in OpenAPI

        :param errors: The errors of this ItemPriceResponse.
        :param mart: The mart of this ItemPriceResponse.
        :param message: The message of this ItemPriceResponse.
        :param sku: The sku of this ItemPriceResponse.
        :param status_code: The status_code of this ItemPriceResponse.
        """
        self.openapi_types = {
            'errors': List[UpdatePrice200ResponseErrorsInner],
            'mart': str,
            'message': str,
            'sku': str,
            'status_code': int
        }

        self.attribute_map = {
            'errors': 'errors',
            'mart': 'mart',
            'message': 'message',
            'sku': 'sku',
            'status_code': 'statusCode'
        }

        self._errors = errors
        self._mart = mart
        self._message = message
        self._sku = sku
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemPriceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemPriceResponse of this ItemPriceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ItemPriceResponse.


        :return: The errors of this ItemPriceResponse.
        :rtype: List[UpdatePrice200ResponseErrorsInner]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ItemPriceResponse.


        :param errors: The errors of this ItemPriceResponse.
        :type errors: List[UpdatePrice200ResponseErrorsInner]
        """

        self._errors = errors

    @property
    def mart(self):
        """Gets the mart of this ItemPriceResponse.

        Marketplace name. Example: Walmart-US

        :return: The mart of this ItemPriceResponse.
        :rtype: str
        """
        return self._mart

    @mart.setter
    def mart(self, mart):
        """Sets the mart of this ItemPriceResponse.

        Marketplace name. Example: Walmart-US

        :param mart: The mart of this ItemPriceResponse.
        :type mart: str
        """

        self._mart = mart

    @property
    def message(self):
        """Gets the message of this ItemPriceResponse.

        A message of acknowledgement for a price update

        :return: The message of this ItemPriceResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ItemPriceResponse.

        A message of acknowledgement for a price update

        :param message: The message of this ItemPriceResponse.
        :type message: str
        """

        self._message = message

    @property
    def sku(self):
        """Gets the sku of this ItemPriceResponse.

        An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.

        :return: The sku of this ItemPriceResponse.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ItemPriceResponse.

        An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.

        :param sku: The sku of this ItemPriceResponse.
        :type sku: str
        """

        self._sku = sku

    @property
    def status_code(self):
        """Gets the status_code of this ItemPriceResponse.


        :return: The status_code of this ItemPriceResponse.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ItemPriceResponse.


        :param status_code: The status_code of this ItemPriceResponse.
        :type status_code: int
        """

        self._status_code = status_code
