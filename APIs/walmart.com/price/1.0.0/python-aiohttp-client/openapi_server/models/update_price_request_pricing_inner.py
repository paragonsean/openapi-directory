# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_price_request_pricing_inner_comparison_price import UpdatePriceRequestPricingInnerComparisonPrice
from openapi_server.models.update_price_request_pricing_inner_current_price import UpdatePriceRequestPricingInnerCurrentPrice
from openapi_server import util


class UpdatePriceRequestPricingInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_price: UpdatePriceRequestPricingInnerComparisonPrice=None, comparison_price_type: str=None, current_price: UpdatePriceRequestPricingInnerCurrentPrice=None, current_price_type: str=None, effective_date: datetime=None, expiration_date: datetime=None, price_display_codes: str=None, process_mode: str=None, promo_id: str=None):
        """UpdatePriceRequestPricingInner - a model defined in OpenAPI

        :param comparison_price: The comparison_price of this UpdatePriceRequestPricingInner.
        :param comparison_price_type: The comparison_price_type of this UpdatePriceRequestPricingInner.
        :param current_price: The current_price of this UpdatePriceRequestPricingInner.
        :param current_price_type: The current_price_type of this UpdatePriceRequestPricingInner.
        :param effective_date: The effective_date of this UpdatePriceRequestPricingInner.
        :param expiration_date: The expiration_date of this UpdatePriceRequestPricingInner.
        :param price_display_codes: The price_display_codes of this UpdatePriceRequestPricingInner.
        :param process_mode: The process_mode of this UpdatePriceRequestPricingInner.
        :param promo_id: The promo_id of this UpdatePriceRequestPricingInner.
        """
        self.openapi_types = {
            'comparison_price': UpdatePriceRequestPricingInnerComparisonPrice,
            'comparison_price_type': str,
            'current_price': UpdatePriceRequestPricingInnerCurrentPrice,
            'current_price_type': str,
            'effective_date': datetime,
            'expiration_date': datetime,
            'price_display_codes': str,
            'process_mode': str,
            'promo_id': str
        }

        self.attribute_map = {
            'comparison_price': 'comparisonPrice',
            'comparison_price_type': 'comparisonPriceType',
            'current_price': 'currentPrice',
            'current_price_type': 'currentPriceType',
            'effective_date': 'effectiveDate',
            'expiration_date': 'expirationDate',
            'price_display_codes': 'priceDisplayCodes',
            'process_mode': 'processMode',
            'promo_id': 'promoId'
        }

        self._comparison_price = comparison_price
        self._comparison_price_type = comparison_price_type
        self._current_price = current_price
        self._current_price_type = current_price_type
        self._effective_date = effective_date
        self._expiration_date = expiration_date
        self._price_display_codes = price_display_codes
        self._process_mode = process_mode
        self._promo_id = promo_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePriceRequestPricingInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updatePrice_request_pricing_inner of this UpdatePriceRequestPricingInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_price(self):
        """Gets the comparison_price of this UpdatePriceRequestPricingInner.


        :return: The comparison_price of this UpdatePriceRequestPricingInner.
        :rtype: UpdatePriceRequestPricingInnerComparisonPrice
        """
        return self._comparison_price

    @comparison_price.setter
    def comparison_price(self, comparison_price):
        """Sets the comparison_price of this UpdatePriceRequestPricingInner.


        :param comparison_price: The comparison_price of this UpdatePriceRequestPricingInner.
        :type comparison_price: UpdatePriceRequestPricingInnerComparisonPrice
        """

        self._comparison_price = comparison_price

    @property
    def comparison_price_type(self):
        """Gets the comparison_price_type of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :return: The comparison_price_type of this UpdatePriceRequestPricingInner.
        :rtype: str
        """
        return self._comparison_price_type

    @comparison_price_type.setter
    def comparison_price_type(self, comparison_price_type):
        """Sets the comparison_price_type of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :param comparison_price_type: The comparison_price_type of this UpdatePriceRequestPricingInner.
        :type comparison_price_type: str
        """
        allowed_values = ["BASE"]  # noqa: E501
        if comparison_price_type not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison_price_type` ({0}), must be one of {1}"
                .format(comparison_price_type, allowed_values)
            )

        self._comparison_price_type = comparison_price_type

    @property
    def current_price(self):
        """Gets the current_price of this UpdatePriceRequestPricingInner.


        :return: The current_price of this UpdatePriceRequestPricingInner.
        :rtype: UpdatePriceRequestPricingInnerCurrentPrice
        """
        return self._current_price

    @current_price.setter
    def current_price(self, current_price):
        """Sets the current_price of this UpdatePriceRequestPricingInner.


        :param current_price: The current_price of this UpdatePriceRequestPricingInner.
        :type current_price: UpdatePriceRequestPricingInnerCurrentPrice
        """
        if current_price is None:
            raise ValueError("Invalid value for `current_price`, must not be `None`")

        self._current_price = current_price

    @property
    def current_price_type(self):
        """Gets the current_price_type of this UpdatePriceRequestPricingInner.

        This is applicable only for both promotions and price

        :return: The current_price_type of this UpdatePriceRequestPricingInner.
        :rtype: str
        """
        return self._current_price_type

    @current_price_type.setter
    def current_price_type(self, current_price_type):
        """Sets the current_price_type of this UpdatePriceRequestPricingInner.

        This is applicable only for both promotions and price

        :param current_price_type: The current_price_type of this UpdatePriceRequestPricingInner.
        :type current_price_type: str
        """
        allowed_values = ["BASE", "REDUCED", "CLEARANCE"]  # noqa: E501
        if current_price_type not in allowed_values:
            raise ValueError(
                "Invalid value for `current_price_type` ({0}), must be one of {1}"
                .format(current_price_type, allowed_values)
            )

        self._current_price_type = current_price_type

    @property
    def effective_date(self):
        """Gets the effective_date of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :return: The effective_date of this UpdatePriceRequestPricingInner.
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :param effective_date: The effective_date of this UpdatePriceRequestPricingInner.
        :type effective_date: datetime
        """

        self._effective_date = effective_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :return: The expiration_date of this UpdatePriceRequestPricingInner.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :param expiration_date: The expiration_date of this UpdatePriceRequestPricingInner.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def price_display_codes(self):
        """Gets the price_display_codes of this UpdatePriceRequestPricingInner.

        Represent promo placement. This is applicable only for promotions

        :return: The price_display_codes of this UpdatePriceRequestPricingInner.
        :rtype: str
        """
        return self._price_display_codes

    @price_display_codes.setter
    def price_display_codes(self, price_display_codes):
        """Sets the price_display_codes of this UpdatePriceRequestPricingInner.

        Represent promo placement. This is applicable only for promotions

        :param price_display_codes: The price_display_codes of this UpdatePriceRequestPricingInner.
        :type price_display_codes: str
        """
        allowed_values = ["CART", "CHECKOUT"]  # noqa: E501
        if price_display_codes not in allowed_values:
            raise ValueError(
                "Invalid value for `price_display_codes` ({0}), must be one of {1}"
                .format(price_display_codes, allowed_values)
            )

        self._price_display_codes = price_display_codes

    @property
    def process_mode(self):
        """Gets the process_mode of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :return: The process_mode of this UpdatePriceRequestPricingInner.
        :rtype: str
        """
        return self._process_mode

    @process_mode.setter
    def process_mode(self, process_mode):
        """Sets the process_mode of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :param process_mode: The process_mode of this UpdatePriceRequestPricingInner.
        :type process_mode: str
        """
        allowed_values = ["UPSERT", "DELETE"]  # noqa: E501
        if process_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `process_mode` ({0}), must be one of {1}"
                .format(process_mode, allowed_values)
            )

        self._process_mode = process_mode

    @property
    def promo_id(self):
        """Gets the promo_id of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :return: The promo_id of this UpdatePriceRequestPricingInner.
        :rtype: str
        """
        return self._promo_id

    @promo_id.setter
    def promo_id(self, promo_id):
        """Sets the promo_id of this UpdatePriceRequestPricingInner.

        This is applicable only for promotions

        :param promo_id: The promo_id of this UpdatePriceRequestPricingInner.
        :type promo_id: str
        """

        self._promo_id = promo_id
