/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateStrategy200Response;
import org.openapitools.client.model.CreateStrategyRequest;
import org.openapitools.client.model.DeleteStrategy200Response;
import java.io.File;
import org.openapitools.client.model.GetRepricerFeed200Response;
import org.openapitools.client.model.GetRepricerFeedRequest;
import org.openapitools.client.model.GetStrategies200Response;
import org.openapitools.client.model.OptCapProgramInPrice200Response;
import org.openapitools.client.model.OptCapProgramInPriceRequest;
import org.openapitools.client.model.PriceBulkUploads200Response;
import org.openapitools.client.model.UpdatePrice200Response;
import org.openapitools.client.model.UpdatePriceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createStrategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStrategyCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStrategyRequest;

        // create path and map variables
        String localVarPath = "/v3/repricer/strategy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStrategyValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling createStrategy(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling createStrategy(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling createStrategy(Async)");
        }

        // verify the required parameter 'createStrategyRequest' is set
        if (createStrategyRequest == null) {
            throw new ApiException("Missing the required parameter 'createStrategyRequest' when calling createStrategy(Async)");
        }

        return createStrategyCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Create Repricer Strategy
     * Creates a new strategy for the seller
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return CreateStrategy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateStrategy200Response createStrategy(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<CreateStrategy200Response> localVarResp = createStrategyWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Create Repricer Strategy
     * Creates a new strategy for the seller
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;CreateStrategy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStrategy200Response> createStrategyWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createStrategyValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<CreateStrategy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Repricer Strategy (asynchronously)
     * Creates a new strategy for the seller
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStrategyAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<CreateStrategy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStrategyValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<CreateStrategy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStrategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStrategyCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/repricer/strategy/{strategyCollectionId}"
            .replace("{" + "strategyCollectionId" + "}", localVarApiClient.escapeString(strategyCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStrategyValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling deleteStrategy(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling deleteStrategy(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling deleteStrategy(Async)");
        }

        // verify the required parameter 'strategyCollectionId' is set
        if (strategyCollectionId == null) {
            throw new ApiException("Missing the required parameter 'strategyCollectionId' when calling deleteStrategy(Async)");
        }

        return deleteStrategyCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Delete Repricer Strategy
     * Deletes the strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return DeleteStrategy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStrategy200Response deleteStrategy(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<DeleteStrategy200Response> localVarResp = deleteStrategyWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Delete Repricer Strategy
     * Deletes the strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;DeleteStrategy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteStrategy200Response> deleteStrategyWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = deleteStrategyValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<DeleteStrategy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Repricer Strategy (asynchronously)
     * Deletes the strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStrategyAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<DeleteStrategy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStrategyValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<DeleteStrategy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepricerFeed
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getRepricerFeedRequest  (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepricerFeedCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetRepricerFeedRequest getRepricerFeedRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRepricerFeedRequest;

        // create path and map variables
        String localVarPath = "/v3/repricerFeeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepricerFeedValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetRepricerFeedRequest getRepricerFeedRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getRepricerFeed(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getRepricerFeed(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getRepricerFeed(Async)");
        }

        // verify the required parameter 'getRepricerFeedRequest' is set
        if (getRepricerFeedRequest == null) {
            throw new ApiException("Missing the required parameter 'getRepricerFeedRequest' when calling getRepricerFeed(Async)");
        }

        return getRepricerFeedCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getRepricerFeedRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Assign/Unassign items to/from Repricer Strategy
     * Add/Remove one or more items from a strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getRepricerFeedRequest  (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetRepricerFeed200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetRepricerFeed200Response getRepricerFeed(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetRepricerFeedRequest getRepricerFeedRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetRepricerFeed200Response> localVarResp = getRepricerFeedWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getRepricerFeedRequest, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Assign/Unassign items to/from Repricer Strategy
     * Add/Remove one or more items from a strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getRepricerFeedRequest  (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetRepricerFeed200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRepricerFeed200Response> getRepricerFeedWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetRepricerFeedRequest getRepricerFeedRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getRepricerFeedValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getRepricerFeedRequest, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetRepricerFeed200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign/Unassign items to/from Repricer Strategy (asynchronously)
     * Add/Remove one or more items from a strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param getRepricerFeedRequest  (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepricerFeedAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, GetRepricerFeedRequest getRepricerFeedRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetRepricerFeed200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepricerFeedValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getRepricerFeedRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetRepricerFeed200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStrategies
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStrategiesCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/repricer/strategies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStrategiesValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getStrategies(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getStrategies(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getStrategies(Async)");
        }

        return getStrategiesCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * List of Repricer Strategies
     * Get the list of strategies
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return GetStrategies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetStrategies200Response getStrategies(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<GetStrategies200Response> localVarResp = getStrategiesWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * List of Repricer Strategies
     * Get the list of strategies
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;GetStrategies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStrategies200Response> getStrategiesWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getStrategiesValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<GetStrategies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Repricer Strategies (asynchronously)
     * Get the list of strategies
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStrategiesAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<GetStrategies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStrategiesValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<GetStrategies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for optCapProgramInPrice
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param optCapProgramInPriceRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     * View Guide
     * @see <a href="/doc/us/mp/us-mp-price/#1290">Set up CAP SKU All Documentation</a>
     */
    public okhttp3.Call optCapProgramInPriceCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, OptCapProgramInPriceRequest optCapProgramInPriceRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = optCapProgramInPriceRequest;

        // create path and map variables
        String localVarPath = "/v3/cppreference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optCapProgramInPriceValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, OptCapProgramInPriceRequest optCapProgramInPriceRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling optCapProgramInPrice(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling optCapProgramInPrice(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling optCapProgramInPrice(Async)");
        }

        // verify the required parameter 'optCapProgramInPriceRequest' is set
        if (optCapProgramInPriceRequest == null) {
            throw new ApiException("Missing the required parameter 'optCapProgramInPriceRequest' when calling optCapProgramInPrice(Async)");
        }

        return optCapProgramInPriceCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, optCapProgramInPriceRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Set up CAP SKU All
     * This API helps Sellers to completely opt-in or opt-out from CAP program.  If the subsidyEnrolled value &#x3D; \&quot;true\&quot;, the Seller enrolls in the CAP program. All eligible SKUs (current and future) are by default opt-in. Seller should use the SKU opt-in/opt-out API to opt-out individual items.  If the subsidyEnrolled value &#x3D; \&quot;false\&quot;, the Seller stops participating in the CAP program and all eligible SKUs (current and future) are opt-out of the CAP program.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param optCapProgramInPriceRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return OptCapProgramInPrice200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     * View Guide
     * @see <a href="/doc/us/mp/us-mp-price/#1290">Set up CAP SKU All Documentation</a>
     */
    public OptCapProgramInPrice200Response optCapProgramInPrice(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, OptCapProgramInPriceRequest optCapProgramInPriceRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<OptCapProgramInPrice200Response> localVarResp = optCapProgramInPriceWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, optCapProgramInPriceRequest, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Set up CAP SKU All
     * This API helps Sellers to completely opt-in or opt-out from CAP program.  If the subsidyEnrolled value &#x3D; \&quot;true\&quot;, the Seller enrolls in the CAP program. All eligible SKUs (current and future) are by default opt-in. Seller should use the SKU opt-in/opt-out API to opt-out individual items.  If the subsidyEnrolled value &#x3D; \&quot;false\&quot;, the Seller stops participating in the CAP program and all eligible SKUs (current and future) are opt-out of the CAP program.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param optCapProgramInPriceRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;OptCapProgramInPrice200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     * View Guide
     * @see <a href="/doc/us/mp/us-mp-price/#1290">Set up CAP SKU All Documentation</a>
     */
    public ApiResponse<OptCapProgramInPrice200Response> optCapProgramInPriceWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, OptCapProgramInPriceRequest optCapProgramInPriceRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = optCapProgramInPriceValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, optCapProgramInPriceRequest, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<OptCapProgramInPrice200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set up CAP SKU All (asynchronously)
     * This API helps Sellers to completely opt-in or opt-out from CAP program.  If the subsidyEnrolled value &#x3D; \&quot;true\&quot;, the Seller enrolls in the CAP program. All eligible SKUs (current and future) are by default opt-in. Seller should use the SKU opt-in/opt-out API to opt-out individual items.  If the subsidyEnrolled value &#x3D; \&quot;false\&quot;, the Seller stops participating in the CAP program and all eligible SKUs (current and future) are opt-out of the CAP program.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param optCapProgramInPriceRequest Request fields (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     * View Guide
     * @see <a href="/doc/us/mp/us-mp-price/#1290">Set up CAP SKU All Documentation</a>
     */
    public okhttp3.Call optCapProgramInPriceAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, OptCapProgramInPriceRequest optCapProgramInPriceRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<OptCapProgramInPrice200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = optCapProgramInPriceValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, optCapProgramInPriceRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<OptCapProgramInPrice200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceBulkUploads
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceBulkUploadsCall(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (feedType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedType", feedType));
        }

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceBulkUploadsValidateBeforeCall(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedType' is set
        if (feedType == null) {
            throw new ApiException("Missing the required parameter 'feedType' when calling priceBulkUploads(Async)");
        }

        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling priceBulkUploads(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling priceBulkUploads(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling priceBulkUploads(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling priceBulkUploads(Async)");
        }

        return priceBulkUploadsCall(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Update bulk prices (Multiple)
     * Updates prices in bulk.  In one Feed you can update up to 10,000 items in bulk. To ensure optimal Feed processing time, we recommend sending no more than 1000 items in one Feed and keeping the Feed sizes below 10 MB.  The price sequence guarantee is observed by the bulk price update functionality, subject to the following rules:  The timestamp used to determine precedence is passed in the request headers. All price updates in the feed are considered to have the same timestamp. The timestamp in the XML file is used only for auditing. You can send a single SKU multiple times in one Feed. If a SKU is repeated in a Feed, the price will be set for that SKU on Walmart.com, but there is no guarantee as to which SKU&#39;s price within that feed will be used. This API should be used in preference to the update a price. It should be called no sooner than 24 hours after a new item is set up and a wpid (Walmart Part ID) is available. Thereafter, the bulk price update has an service level agreement (SLA) of 15 minutes.  After the update is submitted, wait for at least five minutes before verifying whether the bulk price update was successful. Individual SKU price update success or failure is only available after the entire feed is processed.  If a SKU&#39;s price update fails (for example, multiple price updates were sent for the same SKU in a single feed), an error will be returned.
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return PriceBulkUploads200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public PriceBulkUploads200Response priceBulkUploads(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<PriceBulkUploads200Response> localVarResp = priceBulkUploadsWithHttpInfo(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Update bulk prices (Multiple)
     * Updates prices in bulk.  In one Feed you can update up to 10,000 items in bulk. To ensure optimal Feed processing time, we recommend sending no more than 1000 items in one Feed and keeping the Feed sizes below 10 MB.  The price sequence guarantee is observed by the bulk price update functionality, subject to the following rules:  The timestamp used to determine precedence is passed in the request headers. All price updates in the feed are considered to have the same timestamp. The timestamp in the XML file is used only for auditing. You can send a single SKU multiple times in one Feed. If a SKU is repeated in a Feed, the price will be set for that SKU on Walmart.com, but there is no guarantee as to which SKU&#39;s price within that feed will be used. This API should be used in preference to the update a price. It should be called no sooner than 24 hours after a new item is set up and a wpid (Walmart Part ID) is available. Thereafter, the bulk price update has an service level agreement (SLA) of 15 minutes.  After the update is submitted, wait for at least five minutes before verifying whether the bulk price update was successful. Individual SKU price update success or failure is only available after the entire feed is processed.  If a SKU&#39;s price update fails (for example, multiple price updates were sent for the same SKU in a single feed), an error will be returned.
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;PriceBulkUploads200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PriceBulkUploads200Response> priceBulkUploadsWithHttpInfo(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = priceBulkUploadsValidateBeforeCall(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<PriceBulkUploads200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update bulk prices (Multiple) (asynchronously)
     * Updates prices in bulk.  In one Feed you can update up to 10,000 items in bulk. To ensure optimal Feed processing time, we recommend sending no more than 1000 items in one Feed and keeping the Feed sizes below 10 MB.  The price sequence guarantee is observed by the bulk price update functionality, subject to the following rules:  The timestamp used to determine precedence is passed in the request headers. All price updates in the feed are considered to have the same timestamp. The timestamp in the XML file is used only for auditing. You can send a single SKU multiple times in one Feed. If a SKU is repeated in a Feed, the price will be set for that SKU on Walmart.com, but there is no guarantee as to which SKU&#39;s price within that feed will be used. This API should be used in preference to the update a price. It should be called no sooner than 24 hours after a new item is set up and a wpid (Walmart Part ID) is available. Thereafter, the bulk price update has an service level agreement (SLA) of 15 minutes.  After the update is submitted, wait for at least five minutes before verifying whether the bulk price update was successful. Individual SKU price update success or failure is only available after the entire feed is processed.  If a SKU&#39;s price update fails (for example, multiple price updates were sent for the same SKU in a single feed), an error will be returned.
     * @param feedType The feed Type (required)
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param _file Feed file to upload (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceBulkUploadsAsync(String feedType, String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, File _file, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<PriceBulkUploads200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceBulkUploadsValidateBeforeCall(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<PriceBulkUploads200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePrice
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updatePriceRequest The request body consists of a Feed file attached to the request. (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePriceCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdatePriceRequest updatePriceRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePriceRequest;

        // create path and map variables
        String localVarPath = "/v3/price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePriceValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdatePriceRequest updatePriceRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updatePrice(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updatePrice(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling updatePrice(Async)");
        }

        // verify the required parameter 'updatePriceRequest' is set
        if (updatePriceRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePriceRequest' when calling updatePrice(Async)");
        }

        return updatePriceCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updatePriceRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Update a price
     * Updates the regular price for a given item.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updatePriceRequest The request body consists of a Feed file attached to the request. (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return UpdatePrice200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrice200Response updatePrice(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdatePriceRequest updatePriceRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<UpdatePrice200Response> localVarResp = updatePriceWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updatePriceRequest, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Update a price
     * Updates the regular price for a given item.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updatePriceRequest The request body consists of a Feed file attached to the request. (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;UpdatePrice200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePrice200Response> updatePriceWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdatePriceRequest updatePriceRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updatePriceValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updatePriceRequest, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<UpdatePrice200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a price (asynchronously)
     * Updates the regular price for a given item.
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param updatePriceRequest The request body consists of a Feed file attached to the request. (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePriceAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, UpdatePriceRequest updatePriceRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<UpdatePrice200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePriceValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updatePriceRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<UpdatePrice200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStrategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStrategyCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStrategyRequest;

        // create path and map variables
        String localVarPath = "/v3/repricer/strategy/{strategyCollectionId}"
            .replace("{" + "strategyCollectionId" + "}", localVarApiClient.escapeString(strategyCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (WM_SEC_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("WM_SEC.ACCESS_TOKEN", localVarApiClient.parameterToString(WM_SEC_ACCESS_TOKEN));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStrategyValidateBeforeCall(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
        if (WM_SEC_ACCESS_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateStrategy(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateStrategy(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling updateStrategy(Async)");
        }

        // verify the required parameter 'strategyCollectionId' is set
        if (strategyCollectionId == null) {
            throw new ApiException("Missing the required parameter 'strategyCollectionId' when calling updateStrategy(Async)");
        }

        // verify the required parameter 'createStrategyRequest' is set
        if (createStrategyRequest == null) {
            throw new ApiException("Missing the required parameter 'createStrategyRequest' when calling updateStrategy(Async)");
        }

        return updateStrategyCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }

    /**
     * Update Repricer Strategy
     * Updates the existing strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return CreateStrategy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateStrategy200Response updateStrategy(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        ApiResponse<CreateStrategy200Response> localVarResp = updateStrategyWithHttpInfo(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE);
        return localVarResp.getData();
    }

    /**
     * Update Repricer Strategy
     * Updates the existing strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @return ApiResponse&lt;CreateStrategy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStrategy200Response> updateStrategyWithHttpInfo(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateStrategyValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<CreateStrategy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Repricer Strategy (asynchronously)
     * Updates the existing strategy
     * @param WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param strategyCollectionId Automatically added (required)
     * @param createStrategyRequest The request body will have the strategy related information (required)
     * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStrategyAsync(String WM_SEC_ACCESS_TOKEN, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String strategyCollectionId, CreateStrategyRequest createStrategyRequest, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<CreateStrategy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStrategyValidateBeforeCall(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<CreateStrategy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
