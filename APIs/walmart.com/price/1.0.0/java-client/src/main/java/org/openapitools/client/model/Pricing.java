/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UpdatePriceRequestPricingInnerComparisonPrice;
import org.openapitools.client.model.UpdatePriceRequestPricingInnerCurrentPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pricing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:24.889522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pricing {
  public static final String SERIALIZED_NAME_COMPARISON_PRICE = "comparisonPrice";
  @SerializedName(SERIALIZED_NAME_COMPARISON_PRICE)
  private UpdatePriceRequestPricingInnerComparisonPrice comparisonPrice;

  /**
   * This is applicable only for promotions
   */
  @JsonAdapter(ComparisonPriceTypeEnum.Adapter.class)
  public enum ComparisonPriceTypeEnum {
    BASE("BASE");

    private String value;

    ComparisonPriceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonPriceTypeEnum fromValue(String value) {
      for (ComparisonPriceTypeEnum b : ComparisonPriceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonPriceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonPriceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonPriceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonPriceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComparisonPriceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON_PRICE_TYPE = "comparisonPriceType";
  @SerializedName(SERIALIZED_NAME_COMPARISON_PRICE_TYPE)
  private ComparisonPriceTypeEnum comparisonPriceType;

  public static final String SERIALIZED_NAME_CURRENT_PRICE = "currentPrice";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE)
  private UpdatePriceRequestPricingInnerCurrentPrice currentPrice;

  /**
   * This is applicable only for both promotions and price
   */
  @JsonAdapter(CurrentPriceTypeEnum.Adapter.class)
  public enum CurrentPriceTypeEnum {
    BASE("BASE"),
    
    REDUCED("REDUCED"),
    
    CLEARANCE("CLEARANCE");

    private String value;

    CurrentPriceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentPriceTypeEnum fromValue(String value) {
      for (CurrentPriceTypeEnum b : CurrentPriceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentPriceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentPriceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentPriceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentPriceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrentPriceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_PRICE_TYPE = "currentPriceType";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE_TYPE)
  private CurrentPriceTypeEnum currentPriceType;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  /**
   * Represent promo placement. This is applicable only for promotions
   */
  @JsonAdapter(PriceDisplayCodesEnum.Adapter.class)
  public enum PriceDisplayCodesEnum {
    CART("CART"),
    
    CHECKOUT("CHECKOUT");

    private String value;

    PriceDisplayCodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriceDisplayCodesEnum fromValue(String value) {
      for (PriceDisplayCodesEnum b : PriceDisplayCodesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriceDisplayCodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriceDisplayCodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriceDisplayCodesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriceDisplayCodesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriceDisplayCodesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICE_DISPLAY_CODES = "priceDisplayCodes";
  @SerializedName(SERIALIZED_NAME_PRICE_DISPLAY_CODES)
  private PriceDisplayCodesEnum priceDisplayCodes;

  /**
   * This is applicable only for promotions
   */
  @JsonAdapter(ProcessModeEnum.Adapter.class)
  public enum ProcessModeEnum {
    UPSERT("UPSERT"),
    
    DELETE("DELETE");

    private String value;

    ProcessModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessModeEnum fromValue(String value) {
      for (ProcessModeEnum b : ProcessModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESS_MODE = "processMode";
  @SerializedName(SERIALIZED_NAME_PROCESS_MODE)
  private ProcessModeEnum processMode;

  public static final String SERIALIZED_NAME_PROMO_ID = "promoId";
  @SerializedName(SERIALIZED_NAME_PROMO_ID)
  private String promoId;

  public Pricing() {
  }

  public Pricing comparisonPrice(UpdatePriceRequestPricingInnerComparisonPrice comparisonPrice) {
    this.comparisonPrice = comparisonPrice;
    return this;
  }

  /**
   * Get comparisonPrice
   * @return comparisonPrice
   */
  @javax.annotation.Nullable
  public UpdatePriceRequestPricingInnerComparisonPrice getComparisonPrice() {
    return comparisonPrice;
  }

  public void setComparisonPrice(UpdatePriceRequestPricingInnerComparisonPrice comparisonPrice) {
    this.comparisonPrice = comparisonPrice;
  }


  public Pricing comparisonPriceType(ComparisonPriceTypeEnum comparisonPriceType) {
    this.comparisonPriceType = comparisonPriceType;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return comparisonPriceType
   */
  @javax.annotation.Nullable
  public ComparisonPriceTypeEnum getComparisonPriceType() {
    return comparisonPriceType;
  }

  public void setComparisonPriceType(ComparisonPriceTypeEnum comparisonPriceType) {
    this.comparisonPriceType = comparisonPriceType;
  }


  public Pricing currentPrice(UpdatePriceRequestPricingInnerCurrentPrice currentPrice) {
    this.currentPrice = currentPrice;
    return this;
  }

  /**
   * Get currentPrice
   * @return currentPrice
   */
  @javax.annotation.Nonnull
  public UpdatePriceRequestPricingInnerCurrentPrice getCurrentPrice() {
    return currentPrice;
  }

  public void setCurrentPrice(UpdatePriceRequestPricingInnerCurrentPrice currentPrice) {
    this.currentPrice = currentPrice;
  }


  public Pricing currentPriceType(CurrentPriceTypeEnum currentPriceType) {
    this.currentPriceType = currentPriceType;
    return this;
  }

  /**
   * This is applicable only for both promotions and price
   * @return currentPriceType
   */
  @javax.annotation.Nonnull
  public CurrentPriceTypeEnum getCurrentPriceType() {
    return currentPriceType;
  }

  public void setCurrentPriceType(CurrentPriceTypeEnum currentPriceType) {
    this.currentPriceType = currentPriceType;
  }


  public Pricing effectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public Pricing expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Pricing priceDisplayCodes(PriceDisplayCodesEnum priceDisplayCodes) {
    this.priceDisplayCodes = priceDisplayCodes;
    return this;
  }

  /**
   * Represent promo placement. This is applicable only for promotions
   * @return priceDisplayCodes
   */
  @javax.annotation.Nullable
  public PriceDisplayCodesEnum getPriceDisplayCodes() {
    return priceDisplayCodes;
  }

  public void setPriceDisplayCodes(PriceDisplayCodesEnum priceDisplayCodes) {
    this.priceDisplayCodes = priceDisplayCodes;
  }


  public Pricing processMode(ProcessModeEnum processMode) {
    this.processMode = processMode;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return processMode
   */
  @javax.annotation.Nullable
  public ProcessModeEnum getProcessMode() {
    return processMode;
  }

  public void setProcessMode(ProcessModeEnum processMode) {
    this.processMode = processMode;
  }


  public Pricing promoId(String promoId) {
    this.promoId = promoId;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return promoId
   */
  @javax.annotation.Nullable
  public String getPromoId() {
    return promoId;
  }

  public void setPromoId(String promoId) {
    this.promoId = promoId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pricing pricing = (Pricing) o;
    return Objects.equals(this.comparisonPrice, pricing.comparisonPrice) &&
        Objects.equals(this.comparisonPriceType, pricing.comparisonPriceType) &&
        Objects.equals(this.currentPrice, pricing.currentPrice) &&
        Objects.equals(this.currentPriceType, pricing.currentPriceType) &&
        Objects.equals(this.effectiveDate, pricing.effectiveDate) &&
        Objects.equals(this.expirationDate, pricing.expirationDate) &&
        Objects.equals(this.priceDisplayCodes, pricing.priceDisplayCodes) &&
        Objects.equals(this.processMode, pricing.processMode) &&
        Objects.equals(this.promoId, pricing.promoId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonPrice, comparisonPriceType, currentPrice, currentPriceType, effectiveDate, expirationDate, priceDisplayCodes, processMode, promoId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pricing {\n");
    sb.append("    comparisonPrice: ").append(toIndentedString(comparisonPrice)).append("\n");
    sb.append("    comparisonPriceType: ").append(toIndentedString(comparisonPriceType)).append("\n");
    sb.append("    currentPrice: ").append(toIndentedString(currentPrice)).append("\n");
    sb.append("    currentPriceType: ").append(toIndentedString(currentPriceType)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    priceDisplayCodes: ").append(toIndentedString(priceDisplayCodes)).append("\n");
    sb.append("    processMode: ").append(toIndentedString(processMode)).append("\n");
    sb.append("    promoId: ").append(toIndentedString(promoId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisonPrice");
    openapiFields.add("comparisonPriceType");
    openapiFields.add("currentPrice");
    openapiFields.add("currentPriceType");
    openapiFields.add("effectiveDate");
    openapiFields.add("expirationDate");
    openapiFields.add("priceDisplayCodes");
    openapiFields.add("processMode");
    openapiFields.add("promoId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentPrice");
    openapiRequiredFields.add("currentPriceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pricing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pricing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pricing is not found in the empty JSON string", Pricing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pricing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pricing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Pricing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `comparisonPrice`
      if (jsonObj.get("comparisonPrice") != null && !jsonObj.get("comparisonPrice").isJsonNull()) {
        UpdatePriceRequestPricingInnerComparisonPrice.validateJsonElement(jsonObj.get("comparisonPrice"));
      }
      if ((jsonObj.get("comparisonPriceType") != null && !jsonObj.get("comparisonPriceType").isJsonNull()) && !jsonObj.get("comparisonPriceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonPriceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonPriceType").toString()));
      }
      // validate the optional field `comparisonPriceType`
      if (jsonObj.get("comparisonPriceType") != null && !jsonObj.get("comparisonPriceType").isJsonNull()) {
        ComparisonPriceTypeEnum.validateJsonElement(jsonObj.get("comparisonPriceType"));
      }
      // validate the required field `currentPrice`
      UpdatePriceRequestPricingInnerCurrentPrice.validateJsonElement(jsonObj.get("currentPrice"));
      if (!jsonObj.get("currentPriceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPriceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPriceType").toString()));
      }
      // validate the required field `currentPriceType`
      CurrentPriceTypeEnum.validateJsonElement(jsonObj.get("currentPriceType"));
      if ((jsonObj.get("priceDisplayCodes") != null && !jsonObj.get("priceDisplayCodes").isJsonNull()) && !jsonObj.get("priceDisplayCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceDisplayCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceDisplayCodes").toString()));
      }
      // validate the optional field `priceDisplayCodes`
      if (jsonObj.get("priceDisplayCodes") != null && !jsonObj.get("priceDisplayCodes").isJsonNull()) {
        PriceDisplayCodesEnum.validateJsonElement(jsonObj.get("priceDisplayCodes"));
      }
      if ((jsonObj.get("processMode") != null && !jsonObj.get("processMode").isJsonNull()) && !jsonObj.get("processMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processMode").toString()));
      }
      // validate the optional field `processMode`
      if (jsonObj.get("processMode") != null && !jsonObj.get("processMode").isJsonNull()) {
        ProcessModeEnum.validateJsonElement(jsonObj.get("processMode"));
      }
      if ((jsonObj.get("promoId") != null && !jsonObj.get("promoId").isJsonNull()) && !jsonObj.get("promoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promoId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pricing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pricing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pricing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pricing.class));

       return (TypeAdapter<T>) new TypeAdapter<Pricing>() {
           @Override
           public void write(JsonWriter out, Pricing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pricing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pricing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pricing
   * @throws IOException if the JSON string is invalid with respect to Pricing
   */
  public static Pricing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pricing.class);
  }

  /**
   * Convert an instance of Pricing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

