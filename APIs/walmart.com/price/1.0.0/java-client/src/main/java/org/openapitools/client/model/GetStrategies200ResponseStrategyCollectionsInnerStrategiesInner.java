/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:24.889522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner {
  /**
   * Gets or Sets adjustmentType
   */
  @JsonAdapter(AdjustmentTypeEnum.Adapter.class)
  public enum AdjustmentTypeEnum {
    UNIT("UNIT"),
    
    PERCENTAGE("PERCENTAGE");

    private String value;

    AdjustmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdjustmentTypeEnum fromValue(String value) {
      for (AdjustmentTypeEnum b : AdjustmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdjustmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdjustmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdjustmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdjustmentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdjustmentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADJUSTMENT_TYPE = "adjustmentType";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_TYPE)
  private AdjustmentTypeEnum adjustmentType;

  public static final String SERIALIZED_NAME_ADJUSTMENT_VALUE = "adjustmentValue";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_VALUE)
  private Double adjustmentValue;

  /**
   * Gets or Sets strategyType
   */
  @JsonAdapter(StrategyTypeEnum.Adapter.class)
  public enum StrategyTypeEnum {
    BUY_BOX_PRICE("Buy Box Price"),
    
    EXTERNAL_PRICE("External Price"),
    
    COMPETITIVE_PRICE("Competitive Price");

    private String value;

    StrategyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StrategyTypeEnum fromValue(String value) {
      for (StrategyTypeEnum b : StrategyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StrategyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StrategyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StrategyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StrategyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StrategyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STRATEGY_TYPE = "strategyType";
  @SerializedName(SERIALIZED_NAME_STRATEGY_TYPE)
  private StrategyTypeEnum strategyType;

  public GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner() {
  }

  public GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner adjustmentType(AdjustmentTypeEnum adjustmentType) {
    this.adjustmentType = adjustmentType;
    return this;
  }

  /**
   * Get adjustmentType
   * @return adjustmentType
   */
  @javax.annotation.Nullable
  public AdjustmentTypeEnum getAdjustmentType() {
    return adjustmentType;
  }

  public void setAdjustmentType(AdjustmentTypeEnum adjustmentType) {
    this.adjustmentType = adjustmentType;
  }


  public GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner adjustmentValue(Double adjustmentValue) {
    this.adjustmentValue = adjustmentValue;
    return this;
  }

  /**
   * Get adjustmentValue
   * @return adjustmentValue
   */
  @javax.annotation.Nullable
  public Double getAdjustmentValue() {
    return adjustmentValue;
  }

  public void setAdjustmentValue(Double adjustmentValue) {
    this.adjustmentValue = adjustmentValue;
  }


  public GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner strategyType(StrategyTypeEnum strategyType) {
    this.strategyType = strategyType;
    return this;
  }

  /**
   * Get strategyType
   * @return strategyType
   */
  @javax.annotation.Nullable
  public StrategyTypeEnum getStrategyType() {
    return strategyType;
  }

  public void setStrategyType(StrategyTypeEnum strategyType) {
    this.strategyType = strategyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner getStrategies200ResponseStrategyCollectionsInnerStrategiesInner = (GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner) o;
    return Objects.equals(this.adjustmentType, getStrategies200ResponseStrategyCollectionsInnerStrategiesInner.adjustmentType) &&
        Objects.equals(this.adjustmentValue, getStrategies200ResponseStrategyCollectionsInnerStrategiesInner.adjustmentValue) &&
        Objects.equals(this.strategyType, getStrategies200ResponseStrategyCollectionsInnerStrategiesInner.strategyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustmentType, adjustmentValue, strategyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner {\n");
    sb.append("    adjustmentType: ").append(toIndentedString(adjustmentType)).append("\n");
    sb.append("    adjustmentValue: ").append(toIndentedString(adjustmentValue)).append("\n");
    sb.append("    strategyType: ").append(toIndentedString(strategyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustmentType");
    openapiFields.add("adjustmentValue");
    openapiFields.add("strategyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner is not found in the empty JSON string", GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adjustmentType") != null && !jsonObj.get("adjustmentType").isJsonNull()) && !jsonObj.get("adjustmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentType").toString()));
      }
      // validate the optional field `adjustmentType`
      if (jsonObj.get("adjustmentType") != null && !jsonObj.get("adjustmentType").isJsonNull()) {
        AdjustmentTypeEnum.validateJsonElement(jsonObj.get("adjustmentType"));
      }
      if ((jsonObj.get("strategyType") != null && !jsonObj.get("strategyType").isJsonNull()) && !jsonObj.get("strategyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategyType").toString()));
      }
      // validate the optional field `strategyType`
      if (jsonObj.get("strategyType") != null && !jsonObj.get("strategyType").isJsonNull()) {
        StrategyTypeEnum.validateJsonElement(jsonObj.get("strategyType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner>() {
           @Override
           public void write(JsonWriter out, GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner
   * @throws IOException if the JSON string is invalid with respect to GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner
   */
  public static GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner.class);
  }

  /**
   * Convert an instance of GetStrategies200ResponseStrategyCollectionsInnerStrategiesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

