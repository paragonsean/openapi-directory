/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetRepricerFeedRequestItemFeedHeader;
import org.openapitools.client.model.GetRepricerFeedRequestItemInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRepricerFeedRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:24.889522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRepricerFeedRequest {
  public static final String SERIALIZED_NAME_ITEM = "Item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private List<GetRepricerFeedRequestItemInner> item = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_FEED_HEADER = "ItemFeedHeader";
  @SerializedName(SERIALIZED_NAME_ITEM_FEED_HEADER)
  private GetRepricerFeedRequestItemFeedHeader itemFeedHeader;

  public GetRepricerFeedRequest() {
  }

  public GetRepricerFeedRequest item(List<GetRepricerFeedRequestItemInner> item) {
    this.item = item;
    return this;
  }

  public GetRepricerFeedRequest addItemItem(GetRepricerFeedRequestItemInner itemItem) {
    if (this.item == null) {
      this.item = new ArrayList<>();
    }
    this.item.add(itemItem);
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nullable
  public List<GetRepricerFeedRequestItemInner> getItem() {
    return item;
  }

  public void setItem(List<GetRepricerFeedRequestItemInner> item) {
    this.item = item;
  }


  public GetRepricerFeedRequest itemFeedHeader(GetRepricerFeedRequestItemFeedHeader itemFeedHeader) {
    this.itemFeedHeader = itemFeedHeader;
    return this;
  }

  /**
   * Get itemFeedHeader
   * @return itemFeedHeader
   */
  @javax.annotation.Nullable
  public GetRepricerFeedRequestItemFeedHeader getItemFeedHeader() {
    return itemFeedHeader;
  }

  public void setItemFeedHeader(GetRepricerFeedRequestItemFeedHeader itemFeedHeader) {
    this.itemFeedHeader = itemFeedHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRepricerFeedRequest getRepricerFeedRequest = (GetRepricerFeedRequest) o;
    return Objects.equals(this.item, getRepricerFeedRequest.item) &&
        Objects.equals(this.itemFeedHeader, getRepricerFeedRequest.itemFeedHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, itemFeedHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRepricerFeedRequest {\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    itemFeedHeader: ").append(toIndentedString(itemFeedHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Item");
    openapiFields.add("ItemFeedHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRepricerFeedRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRepricerFeedRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRepricerFeedRequest is not found in the empty JSON string", GetRepricerFeedRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRepricerFeedRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRepricerFeedRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Item") != null && !jsonObj.get("Item").isJsonNull()) {
        JsonArray jsonArrayitem = jsonObj.getAsJsonArray("Item");
        if (jsonArrayitem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Item").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Item` to be an array in the JSON string but got `%s`", jsonObj.get("Item").toString()));
          }

          // validate the optional field `Item` (array)
          for (int i = 0; i < jsonArrayitem.size(); i++) {
            GetRepricerFeedRequestItemInner.validateJsonElement(jsonArrayitem.get(i));
          };
        }
      }
      // validate the optional field `ItemFeedHeader`
      if (jsonObj.get("ItemFeedHeader") != null && !jsonObj.get("ItemFeedHeader").isJsonNull()) {
        GetRepricerFeedRequestItemFeedHeader.validateJsonElement(jsonObj.get("ItemFeedHeader"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRepricerFeedRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRepricerFeedRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRepricerFeedRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRepricerFeedRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRepricerFeedRequest>() {
           @Override
           public void write(JsonWriter out, GetRepricerFeedRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRepricerFeedRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRepricerFeedRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRepricerFeedRequest
   * @throws IOException if the JSON string is invalid with respect to GetRepricerFeedRequest
   */
  public static GetRepricerFeedRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRepricerFeedRequest.class);
  }

  /**
   * Convert an instance of GetRepricerFeedRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

