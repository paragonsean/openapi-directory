/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRepricerFeedRequestItemFeedHeader
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:24.889522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRepricerFeedRequestItemFeedHeader {
  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MART = "mart";
  @SerializedName(SERIALIZED_NAME_MART)
  private String mart;

  public static final String SERIALIZED_NAME_PROCESS_MODE = "processMode";
  @SerializedName(SERIALIZED_NAME_PROCESS_MODE)
  private String processMode;

  public static final String SERIALIZED_NAME_SELLING_CHANNEL = "sellingChannel";
  @SerializedName(SERIALIZED_NAME_SELLING_CHANNEL)
  private String sellingChannel;

  public static final String SERIALIZED_NAME_SUBSET = "subset";
  @SerializedName(SERIALIZED_NAME_SUBSET)
  private String subset;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GetRepricerFeedRequestItemFeedHeader() {
  }

  public GetRepricerFeedRequestItemFeedHeader locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public GetRepricerFeedRequestItemFeedHeader mart(String mart) {
    this.mart = mart;
    return this;
  }

  /**
   * Get mart
   * @return mart
   */
  @javax.annotation.Nullable
  public String getMart() {
    return mart;
  }

  public void setMart(String mart) {
    this.mart = mart;
  }


  public GetRepricerFeedRequestItemFeedHeader processMode(String processMode) {
    this.processMode = processMode;
    return this;
  }

  /**
   * Get processMode
   * @return processMode
   */
  @javax.annotation.Nullable
  public String getProcessMode() {
    return processMode;
  }

  public void setProcessMode(String processMode) {
    this.processMode = processMode;
  }


  public GetRepricerFeedRequestItemFeedHeader sellingChannel(String sellingChannel) {
    this.sellingChannel = sellingChannel;
    return this;
  }

  /**
   * Get sellingChannel
   * @return sellingChannel
   */
  @javax.annotation.Nullable
  public String getSellingChannel() {
    return sellingChannel;
  }

  public void setSellingChannel(String sellingChannel) {
    this.sellingChannel = sellingChannel;
  }


  public GetRepricerFeedRequestItemFeedHeader subset(String subset) {
    this.subset = subset;
    return this;
  }

  /**
   * Get subset
   * @return subset
   */
  @javax.annotation.Nullable
  public String getSubset() {
    return subset;
  }

  public void setSubset(String subset) {
    this.subset = subset;
  }


  public GetRepricerFeedRequestItemFeedHeader version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRepricerFeedRequestItemFeedHeader getRepricerFeedRequestItemFeedHeader = (GetRepricerFeedRequestItemFeedHeader) o;
    return Objects.equals(this.locale, getRepricerFeedRequestItemFeedHeader.locale) &&
        Objects.equals(this.mart, getRepricerFeedRequestItemFeedHeader.mart) &&
        Objects.equals(this.processMode, getRepricerFeedRequestItemFeedHeader.processMode) &&
        Objects.equals(this.sellingChannel, getRepricerFeedRequestItemFeedHeader.sellingChannel) &&
        Objects.equals(this.subset, getRepricerFeedRequestItemFeedHeader.subset) &&
        Objects.equals(this.version, getRepricerFeedRequestItemFeedHeader.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locale, mart, processMode, sellingChannel, subset, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRepricerFeedRequestItemFeedHeader {\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    mart: ").append(toIndentedString(mart)).append("\n");
    sb.append("    processMode: ").append(toIndentedString(processMode)).append("\n");
    sb.append("    sellingChannel: ").append(toIndentedString(sellingChannel)).append("\n");
    sb.append("    subset: ").append(toIndentedString(subset)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locale");
    openapiFields.add("mart");
    openapiFields.add("processMode");
    openapiFields.add("sellingChannel");
    openapiFields.add("subset");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRepricerFeedRequestItemFeedHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRepricerFeedRequestItemFeedHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRepricerFeedRequestItemFeedHeader is not found in the empty JSON string", GetRepricerFeedRequestItemFeedHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRepricerFeedRequestItemFeedHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRepricerFeedRequestItemFeedHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("mart") != null && !jsonObj.get("mart").isJsonNull()) && !jsonObj.get("mart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mart").toString()));
      }
      if ((jsonObj.get("processMode") != null && !jsonObj.get("processMode").isJsonNull()) && !jsonObj.get("processMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processMode").toString()));
      }
      if ((jsonObj.get("sellingChannel") != null && !jsonObj.get("sellingChannel").isJsonNull()) && !jsonObj.get("sellingChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellingChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellingChannel").toString()));
      }
      if ((jsonObj.get("subset") != null && !jsonObj.get("subset").isJsonNull()) && !jsonObj.get("subset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subset").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRepricerFeedRequestItemFeedHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRepricerFeedRequestItemFeedHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRepricerFeedRequestItemFeedHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRepricerFeedRequestItemFeedHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRepricerFeedRequestItemFeedHeader>() {
           @Override
           public void write(JsonWriter out, GetRepricerFeedRequestItemFeedHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRepricerFeedRequestItemFeedHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRepricerFeedRequestItemFeedHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRepricerFeedRequestItemFeedHeader
   * @throws IOException if the JSON string is invalid with respect to GetRepricerFeedRequestItemFeedHeader
   */
  public static GetRepricerFeedRequestItemFeedHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRepricerFeedRequestItemFeedHeader.class);
  }

  /**
   * Convert an instance of GetRepricerFeedRequestItemFeedHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

