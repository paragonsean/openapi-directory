/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdatePriceRequestPricingInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePriceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:24.889522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePriceRequest {
  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private Object definitions;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_PRICING = "pricing";
  @SerializedName(SERIALIZED_NAME_PRICING)
  private List<UpdatePriceRequestPricingInner> pricing = new ArrayList<>();

  /**
   * This is applicable only for promotions
   */
  @JsonAdapter(ReplaceAllEnum.Adapter.class)
  public enum ReplaceAllEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    ReplaceAllEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplaceAllEnum fromValue(String value) {
      for (ReplaceAllEnum b : ReplaceAllEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplaceAllEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplaceAllEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplaceAllEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplaceAllEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReplaceAllEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPLACE_ALL = "replaceAll";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL)
  private ReplaceAllEnum replaceAll;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public UpdatePriceRequest() {
  }

  public UpdatePriceRequest definitions(Object definitions) {
    this.definitions = definitions;
    return this;
  }

  /**
   * Get definitions
   * @return definitions
   */
  @javax.annotation.Nullable
  public Object getDefinitions() {
    return definitions;
  }

  public void setDefinitions(Object definitions) {
    this.definitions = definitions;
  }


  public UpdatePriceRequest offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public UpdatePriceRequest pricing(List<UpdatePriceRequestPricingInner> pricing) {
    this.pricing = pricing;
    return this;
  }

  public UpdatePriceRequest addPricingItem(UpdatePriceRequestPricingInner pricingItem) {
    if (this.pricing == null) {
      this.pricing = new ArrayList<>();
    }
    this.pricing.add(pricingItem);
    return this;
  }

  /**
   * Get pricing
   * @return pricing
   */
  @javax.annotation.Nonnull
  public List<UpdatePriceRequestPricingInner> getPricing() {
    return pricing;
  }

  public void setPricing(List<UpdatePriceRequestPricingInner> pricing) {
    this.pricing = pricing;
  }


  public UpdatePriceRequest replaceAll(ReplaceAllEnum replaceAll) {
    this.replaceAll = replaceAll;
    return this;
  }

  /**
   * This is applicable only for promotions
   * @return replaceAll
   */
  @javax.annotation.Nullable
  public ReplaceAllEnum getReplaceAll() {
    return replaceAll;
  }

  public void setReplaceAll(ReplaceAllEnum replaceAll) {
    this.replaceAll = replaceAll;
  }


  public UpdatePriceRequest sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nonnull
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePriceRequest updatePriceRequest = (UpdatePriceRequest) o;
    return Objects.equals(this.definitions, updatePriceRequest.definitions) &&
        Objects.equals(this.offerId, updatePriceRequest.offerId) &&
        Objects.equals(this.pricing, updatePriceRequest.pricing) &&
        Objects.equals(this.replaceAll, updatePriceRequest.replaceAll) &&
        Objects.equals(this.sku, updatePriceRequest.sku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definitions, offerId, pricing, replaceAll, sku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePriceRequest {\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    pricing: ").append(toIndentedString(pricing)).append("\n");
    sb.append("    replaceAll: ").append(toIndentedString(replaceAll)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("definitions");
    openapiFields.add("offerId");
    openapiFields.add("pricing");
    openapiFields.add("replaceAll");
    openapiFields.add("sku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pricing");
    openapiRequiredFields.add("sku");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePriceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePriceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePriceRequest is not found in the empty JSON string", UpdatePriceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePriceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePriceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePriceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("pricing").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing` to be an array in the JSON string but got `%s`", jsonObj.get("pricing").toString()));
      }

      JsonArray jsonArraypricing = jsonObj.getAsJsonArray("pricing");
      // validate the required field `pricing` (array)
      for (int i = 0; i < jsonArraypricing.size(); i++) {
        UpdatePriceRequestPricingInner.validateJsonElement(jsonArraypricing.get(i));
      };
      if ((jsonObj.get("replaceAll") != null && !jsonObj.get("replaceAll").isJsonNull()) && !jsonObj.get("replaceAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaceAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaceAll").toString()));
      }
      // validate the optional field `replaceAll`
      if (jsonObj.get("replaceAll") != null && !jsonObj.get("replaceAll").isJsonNull()) {
        ReplaceAllEnum.validateJsonElement(jsonObj.get("replaceAll"));
      }
      if (!jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePriceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePriceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePriceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePriceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePriceRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePriceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePriceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePriceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePriceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdatePriceRequest
   */
  public static UpdatePriceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePriceRequest.class);
  }

  /**
   * Convert an instance of UpdatePriceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

