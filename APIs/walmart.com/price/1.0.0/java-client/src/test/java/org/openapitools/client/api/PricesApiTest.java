/*
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateStrategy200Response;
import org.openapitools.client.model.CreateStrategyRequest;
import org.openapitools.client.model.DeleteStrategy200Response;
import java.io.File;
import org.openapitools.client.model.GetRepricerFeed200Response;
import org.openapitools.client.model.GetRepricerFeedRequest;
import org.openapitools.client.model.GetStrategies200Response;
import org.openapitools.client.model.OptCapProgramInPrice200Response;
import org.openapitools.client.model.OptCapProgramInPriceRequest;
import org.openapitools.client.model.PriceBulkUploads200Response;
import org.openapitools.client.model.UpdatePrice200Response;
import org.openapitools.client.model.UpdatePriceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PricesApi
 */
@Disabled
public class PricesApiTest {

    private final PricesApi api = new PricesApi();

    /**
     * Create Repricer Strategy
     *
     * Creates a new strategy for the seller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStrategyTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        CreateStrategyRequest createStrategyRequest = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        CreateStrategy200Response response = api.createStrategy(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * Delete Repricer Strategy
     *
     * Deletes the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStrategyTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        String strategyCollectionId = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        DeleteStrategy200Response response = api.deleteStrategy(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * Assign/Unassign items to/from Repricer Strategy
     *
     * Add/Remove one or more items from a strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepricerFeedTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        GetRepricerFeedRequest getRepricerFeedRequest = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        GetRepricerFeed200Response response = api.getRepricerFeed(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getRepricerFeedRequest, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * List of Repricer Strategies
     *
     * Get the list of strategies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStrategiesTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        GetStrategies200Response response = api.getStrategies(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * Set up CAP SKU All
     *
     * This API helps Sellers to completely opt-in or opt-out from CAP program.  If the subsidyEnrolled value &#x3D; \&quot;true\&quot;, the Seller enrolls in the CAP program. All eligible SKUs (current and future) are by default opt-in. Seller should use the SKU opt-in/opt-out API to opt-out individual items.  If the subsidyEnrolled value &#x3D; \&quot;false\&quot;, the Seller stops participating in the CAP program and all eligible SKUs (current and future) are opt-out of the CAP program.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optCapProgramInPriceTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        OptCapProgramInPriceRequest optCapProgramInPriceRequest = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        OptCapProgramInPrice200Response response = api.optCapProgramInPrice(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, optCapProgramInPriceRequest, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * Update bulk prices (Multiple)
     *
     * Updates prices in bulk.  In one Feed you can update up to 10,000 items in bulk. To ensure optimal Feed processing time, we recommend sending no more than 1000 items in one Feed and keeping the Feed sizes below 10 MB.  The price sequence guarantee is observed by the bulk price update functionality, subject to the following rules:  The timestamp used to determine precedence is passed in the request headers. All price updates in the feed are considered to have the same timestamp. The timestamp in the XML file is used only for auditing. You can send a single SKU multiple times in one Feed. If a SKU is repeated in a Feed, the price will be set for that SKU on Walmart.com, but there is no guarantee as to which SKU&#39;s price within that feed will be used. This API should be used in preference to the update a price. It should be called no sooner than 24 hours after a new item is set up and a wpid (Walmart Part ID) is available. Thereafter, the bulk price update has an service level agreement (SLA) of 15 minutes.  After the update is submitted, wait for at least five minutes before verifying whether the bulk price update was successful. Individual SKU price update success or failure is only available after the entire feed is processed.  If a SKU&#39;s price update fails (for example, multiple price updates were sent for the same SKU in a single feed), an error will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceBulkUploadsTest() throws ApiException {
        String feedType = null;
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        File _file = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        PriceBulkUploads200Response response = api.priceBulkUploads(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, _file, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * Update a price
     *
     * Updates the regular price for a given item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePriceTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        UpdatePriceRequest updatePriceRequest = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        UpdatePrice200Response response = api.updatePrice(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updatePriceRequest, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

    /**
     * Update Repricer Strategy
     *
     * Updates the existing strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStrategyTest() throws ApiException {
        String WM_SEC_ACCESS_TOKEN = null;
        String WM_QOS_CORRELATION_ID = null;
        String WM_SVC_NAME = null;
        String strategyCollectionId = null;
        CreateStrategyRequest createStrategyRequest = null;
        String WM_CONSUMER_CHANNEL_TYPE = null;
        CreateStrategy200Response response = api.updateStrategy(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, createStrategyRequest, WM_CONSUMER_CHANNEL_TYPE);
        // TODO: test validations
    }

}
