/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRepricerFeed_request_ItemFeedHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRepricerFeed_request_ItemFeedHeader::OAIGetRepricerFeed_request_ItemFeedHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRepricerFeed_request_ItemFeedHeader::OAIGetRepricerFeed_request_ItemFeedHeader() {
    this->initializeModel();
}

OAIGetRepricerFeed_request_ItemFeedHeader::~OAIGetRepricerFeed_request_ItemFeedHeader() {}

void OAIGetRepricerFeed_request_ItemFeedHeader::initializeModel() {

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_mart_isSet = false;
    m_mart_isValid = false;

    m_process_mode_isSet = false;
    m_process_mode_isValid = false;

    m_selling_channel_isSet = false;
    m_selling_channel_isValid = false;

    m_subset_isSet = false;
    m_subset_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetRepricerFeed_request_ItemFeedHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRepricerFeed_request_ItemFeedHeader::fromJsonObject(QJsonObject json) {

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_mart_isValid = ::OpenAPI::fromJsonValue(m_mart, json[QString("mart")]);
    m_mart_isSet = !json[QString("mart")].isNull() && m_mart_isValid;

    m_process_mode_isValid = ::OpenAPI::fromJsonValue(m_process_mode, json[QString("processMode")]);
    m_process_mode_isSet = !json[QString("processMode")].isNull() && m_process_mode_isValid;

    m_selling_channel_isValid = ::OpenAPI::fromJsonValue(m_selling_channel, json[QString("sellingChannel")]);
    m_selling_channel_isSet = !json[QString("sellingChannel")].isNull() && m_selling_channel_isValid;

    m_subset_isValid = ::OpenAPI::fromJsonValue(m_subset, json[QString("subset")]);
    m_subset_isSet = !json[QString("subset")].isNull() && m_subset_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRepricerFeed_request_ItemFeedHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_mart_isSet) {
        obj.insert(QString("mart"), ::OpenAPI::toJsonValue(m_mart));
    }
    if (m_process_mode_isSet) {
        obj.insert(QString("processMode"), ::OpenAPI::toJsonValue(m_process_mode));
    }
    if (m_selling_channel_isSet) {
        obj.insert(QString("sellingChannel"), ::OpenAPI::toJsonValue(m_selling_channel));
    }
    if (m_subset_isSet) {
        obj.insert(QString("subset"), ::OpenAPI::toJsonValue(m_subset));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::getLocale() const {
    return m_locale;
}
void OAIGetRepricerFeed_request_ItemFeedHeader::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::getMart() const {
    return m_mart;
}
void OAIGetRepricerFeed_request_ItemFeedHeader::setMart(const QString &mart) {
    m_mart = mart;
    m_mart_isSet = true;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_mart_Set() const{
    return m_mart_isSet;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_mart_Valid() const{
    return m_mart_isValid;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::getProcessMode() const {
    return m_process_mode;
}
void OAIGetRepricerFeed_request_ItemFeedHeader::setProcessMode(const QString &process_mode) {
    m_process_mode = process_mode;
    m_process_mode_isSet = true;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_process_mode_Set() const{
    return m_process_mode_isSet;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_process_mode_Valid() const{
    return m_process_mode_isValid;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::getSellingChannel() const {
    return m_selling_channel;
}
void OAIGetRepricerFeed_request_ItemFeedHeader::setSellingChannel(const QString &selling_channel) {
    m_selling_channel = selling_channel;
    m_selling_channel_isSet = true;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_selling_channel_Set() const{
    return m_selling_channel_isSet;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_selling_channel_Valid() const{
    return m_selling_channel_isValid;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::getSubset() const {
    return m_subset;
}
void OAIGetRepricerFeed_request_ItemFeedHeader::setSubset(const QString &subset) {
    m_subset = subset;
    m_subset_isSet = true;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_subset_Set() const{
    return m_subset_isSet;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_subset_Valid() const{
    return m_subset_isValid;
}

QString OAIGetRepricerFeed_request_ItemFeedHeader::getVersion() const {
    return m_version;
}
void OAIGetRepricerFeed_request_ItemFeedHeader::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRepricerFeed_request_ItemFeedHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
