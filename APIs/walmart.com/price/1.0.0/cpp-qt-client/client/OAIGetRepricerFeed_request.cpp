/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRepricerFeed_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRepricerFeed_request::OAIGetRepricerFeed_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRepricerFeed_request::OAIGetRepricerFeed_request() {
    this->initializeModel();
}

OAIGetRepricerFeed_request::~OAIGetRepricerFeed_request() {}

void OAIGetRepricerFeed_request::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_item_feed_header_isSet = false;
    m_item_feed_header_isValid = false;
}

void OAIGetRepricerFeed_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRepricerFeed_request::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;

    m_item_feed_header_isValid = ::OpenAPI::fromJsonValue(m_item_feed_header, json[QString("ItemFeedHeader")]);
    m_item_feed_header_isSet = !json[QString("ItemFeedHeader")].isNull() && m_item_feed_header_isValid;
}

QString OAIGetRepricerFeed_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRepricerFeed_request::asJsonObject() const {
    QJsonObject obj;
    if (m_item.size() > 0) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_item_feed_header.isSet()) {
        obj.insert(QString("ItemFeedHeader"), ::OpenAPI::toJsonValue(m_item_feed_header));
    }
    return obj;
}

QList<OAIGetRepricerFeed_request_Item_inner> OAIGetRepricerFeed_request::getItem() const {
    return m_item;
}
void OAIGetRepricerFeed_request::setItem(const QList<OAIGetRepricerFeed_request_Item_inner> &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIGetRepricerFeed_request::is_item_Set() const{
    return m_item_isSet;
}

bool OAIGetRepricerFeed_request::is_item_Valid() const{
    return m_item_isValid;
}

OAIGetRepricerFeed_request_ItemFeedHeader OAIGetRepricerFeed_request::getItemFeedHeader() const {
    return m_item_feed_header;
}
void OAIGetRepricerFeed_request::setItemFeedHeader(const OAIGetRepricerFeed_request_ItemFeedHeader &item_feed_header) {
    m_item_feed_header = item_feed_header;
    m_item_feed_header_isSet = true;
}

bool OAIGetRepricerFeed_request::is_item_feed_header_Set() const{
    return m_item_feed_header_isSet;
}

bool OAIGetRepricerFeed_request::is_item_feed_header_Valid() const{
    return m_item_feed_header_isValid;
}

bool OAIGetRepricerFeed_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_feed_header.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRepricerFeed_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
