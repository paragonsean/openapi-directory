/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStrategy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStrategy_request::OAICreateStrategy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStrategy_request::OAICreateStrategy_request() {
    this->initializeModel();
}

OAICreateStrategy_request::~OAICreateStrategy_request() {}

void OAICreateStrategy_request::initializeModel() {

    m_enable_repricer_for_promotion_isSet = false;
    m_enable_repricer_for_promotion_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_repricer_strategy_isSet = false;
    m_repricer_strategy_isValid = false;

    m_strategies_isSet = false;
    m_strategies_isValid = false;
}

void OAICreateStrategy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStrategy_request::fromJsonObject(QJsonObject json) {

    m_enable_repricer_for_promotion_isValid = ::OpenAPI::fromJsonValue(m_enable_repricer_for_promotion, json[QString("enableRepricerForPromotion")]);
    m_enable_repricer_for_promotion_isSet = !json[QString("enableRepricerForPromotion")].isNull() && m_enable_repricer_for_promotion_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_repricer_strategy_isValid = ::OpenAPI::fromJsonValue(m_repricer_strategy, json[QString("repricerStrategy")]);
    m_repricer_strategy_isSet = !json[QString("repricerStrategy")].isNull() && m_repricer_strategy_isValid;

    m_strategies_isValid = ::OpenAPI::fromJsonValue(m_strategies, json[QString("strategies")]);
    m_strategies_isSet = !json[QString("strategies")].isNull() && m_strategies_isValid;
}

QString OAICreateStrategy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStrategy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_repricer_for_promotion_isSet) {
        obj.insert(QString("enableRepricerForPromotion"), ::OpenAPI::toJsonValue(m_enable_repricer_for_promotion));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_repricer_strategy_isSet) {
        obj.insert(QString("repricerStrategy"), ::OpenAPI::toJsonValue(m_repricer_strategy));
    }
    if (m_strategies.size() > 0) {
        obj.insert(QString("strategies"), ::OpenAPI::toJsonValue(m_strategies));
    }
    return obj;
}

bool OAICreateStrategy_request::isEnableRepricerForPromotion() const {
    return m_enable_repricer_for_promotion;
}
void OAICreateStrategy_request::setEnableRepricerForPromotion(const bool &enable_repricer_for_promotion) {
    m_enable_repricer_for_promotion = enable_repricer_for_promotion;
    m_enable_repricer_for_promotion_isSet = true;
}

bool OAICreateStrategy_request::is_enable_repricer_for_promotion_Set() const{
    return m_enable_repricer_for_promotion_isSet;
}

bool OAICreateStrategy_request::is_enable_repricer_for_promotion_Valid() const{
    return m_enable_repricer_for_promotion_isValid;
}

bool OAICreateStrategy_request::isEnabled() const {
    return m_enabled;
}
void OAICreateStrategy_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateStrategy_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateStrategy_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICreateStrategy_request::getRepricerStrategy() const {
    return m_repricer_strategy;
}
void OAICreateStrategy_request::setRepricerStrategy(const QString &repricer_strategy) {
    m_repricer_strategy = repricer_strategy;
    m_repricer_strategy_isSet = true;
}

bool OAICreateStrategy_request::is_repricer_strategy_Set() const{
    return m_repricer_strategy_isSet;
}

bool OAICreateStrategy_request::is_repricer_strategy_Valid() const{
    return m_repricer_strategy_isValid;
}

QList<OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner> OAICreateStrategy_request::getStrategies() const {
    return m_strategies;
}
void OAICreateStrategy_request::setStrategies(const QList<OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner> &strategies) {
    m_strategies = strategies;
    m_strategies_isSet = true;
}

bool OAICreateStrategy_request::is_strategies_Set() const{
    return m_strategies_isSet;
}

bool OAICreateStrategy_request::is_strategies_Valid() const{
    return m_strategies_isValid;
}

bool OAICreateStrategy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_repricer_for_promotion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repricer_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStrategy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
