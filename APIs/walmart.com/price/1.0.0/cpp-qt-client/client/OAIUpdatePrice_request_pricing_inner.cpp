/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePrice_request_pricing_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePrice_request_pricing_inner::OAIUpdatePrice_request_pricing_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePrice_request_pricing_inner::OAIUpdatePrice_request_pricing_inner() {
    this->initializeModel();
}

OAIUpdatePrice_request_pricing_inner::~OAIUpdatePrice_request_pricing_inner() {}

void OAIUpdatePrice_request_pricing_inner::initializeModel() {

    m_comparison_price_isSet = false;
    m_comparison_price_isValid = false;

    m_comparison_price_type_isSet = false;
    m_comparison_price_type_isValid = false;

    m_current_price_isSet = false;
    m_current_price_isValid = false;

    m_current_price_type_isSet = false;
    m_current_price_type_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_price_display_codes_isSet = false;
    m_price_display_codes_isValid = false;

    m_process_mode_isSet = false;
    m_process_mode_isValid = false;

    m_promo_id_isSet = false;
    m_promo_id_isValid = false;
}

void OAIUpdatePrice_request_pricing_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePrice_request_pricing_inner::fromJsonObject(QJsonObject json) {

    m_comparison_price_isValid = ::OpenAPI::fromJsonValue(m_comparison_price, json[QString("comparisonPrice")]);
    m_comparison_price_isSet = !json[QString("comparisonPrice")].isNull() && m_comparison_price_isValid;

    m_comparison_price_type_isValid = ::OpenAPI::fromJsonValue(m_comparison_price_type, json[QString("comparisonPriceType")]);
    m_comparison_price_type_isSet = !json[QString("comparisonPriceType")].isNull() && m_comparison_price_type_isValid;

    m_current_price_isValid = ::OpenAPI::fromJsonValue(m_current_price, json[QString("currentPrice")]);
    m_current_price_isSet = !json[QString("currentPrice")].isNull() && m_current_price_isValid;

    m_current_price_type_isValid = ::OpenAPI::fromJsonValue(m_current_price_type, json[QString("currentPriceType")]);
    m_current_price_type_isSet = !json[QString("currentPriceType")].isNull() && m_current_price_type_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_price_display_codes_isValid = ::OpenAPI::fromJsonValue(m_price_display_codes, json[QString("priceDisplayCodes")]);
    m_price_display_codes_isSet = !json[QString("priceDisplayCodes")].isNull() && m_price_display_codes_isValid;

    m_process_mode_isValid = ::OpenAPI::fromJsonValue(m_process_mode, json[QString("processMode")]);
    m_process_mode_isSet = !json[QString("processMode")].isNull() && m_process_mode_isValid;

    m_promo_id_isValid = ::OpenAPI::fromJsonValue(m_promo_id, json[QString("promoId")]);
    m_promo_id_isSet = !json[QString("promoId")].isNull() && m_promo_id_isValid;
}

QString OAIUpdatePrice_request_pricing_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePrice_request_pricing_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison_price.isSet()) {
        obj.insert(QString("comparisonPrice"), ::OpenAPI::toJsonValue(m_comparison_price));
    }
    if (m_comparison_price_type_isSet) {
        obj.insert(QString("comparisonPriceType"), ::OpenAPI::toJsonValue(m_comparison_price_type));
    }
    if (m_current_price.isSet()) {
        obj.insert(QString("currentPrice"), ::OpenAPI::toJsonValue(m_current_price));
    }
    if (m_current_price_type_isSet) {
        obj.insert(QString("currentPriceType"), ::OpenAPI::toJsonValue(m_current_price_type));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_price_display_codes_isSet) {
        obj.insert(QString("priceDisplayCodes"), ::OpenAPI::toJsonValue(m_price_display_codes));
    }
    if (m_process_mode_isSet) {
        obj.insert(QString("processMode"), ::OpenAPI::toJsonValue(m_process_mode));
    }
    if (m_promo_id_isSet) {
        obj.insert(QString("promoId"), ::OpenAPI::toJsonValue(m_promo_id));
    }
    return obj;
}

OAIUpdatePrice_request_pricing_inner_comparisonPrice OAIUpdatePrice_request_pricing_inner::getComparisonPrice() const {
    return m_comparison_price;
}
void OAIUpdatePrice_request_pricing_inner::setComparisonPrice(const OAIUpdatePrice_request_pricing_inner_comparisonPrice &comparison_price) {
    m_comparison_price = comparison_price;
    m_comparison_price_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_comparison_price_Set() const{
    return m_comparison_price_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_comparison_price_Valid() const{
    return m_comparison_price_isValid;
}

QString OAIUpdatePrice_request_pricing_inner::getComparisonPriceType() const {
    return m_comparison_price_type;
}
void OAIUpdatePrice_request_pricing_inner::setComparisonPriceType(const QString &comparison_price_type) {
    m_comparison_price_type = comparison_price_type;
    m_comparison_price_type_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_comparison_price_type_Set() const{
    return m_comparison_price_type_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_comparison_price_type_Valid() const{
    return m_comparison_price_type_isValid;
}

OAIUpdatePrice_request_pricing_inner_currentPrice OAIUpdatePrice_request_pricing_inner::getCurrentPrice() const {
    return m_current_price;
}
void OAIUpdatePrice_request_pricing_inner::setCurrentPrice(const OAIUpdatePrice_request_pricing_inner_currentPrice &current_price) {
    m_current_price = current_price;
    m_current_price_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_current_price_Set() const{
    return m_current_price_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_current_price_Valid() const{
    return m_current_price_isValid;
}

QString OAIUpdatePrice_request_pricing_inner::getCurrentPriceType() const {
    return m_current_price_type;
}
void OAIUpdatePrice_request_pricing_inner::setCurrentPriceType(const QString &current_price_type) {
    m_current_price_type = current_price_type;
    m_current_price_type_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_current_price_type_Set() const{
    return m_current_price_type_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_current_price_type_Valid() const{
    return m_current_price_type_isValid;
}

QDateTime OAIUpdatePrice_request_pricing_inner::getEffectiveDate() const {
    return m_effective_date;
}
void OAIUpdatePrice_request_pricing_inner::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QDateTime OAIUpdatePrice_request_pricing_inner::getExpirationDate() const {
    return m_expiration_date;
}
void OAIUpdatePrice_request_pricing_inner::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIUpdatePrice_request_pricing_inner::getPriceDisplayCodes() const {
    return m_price_display_codes;
}
void OAIUpdatePrice_request_pricing_inner::setPriceDisplayCodes(const QString &price_display_codes) {
    m_price_display_codes = price_display_codes;
    m_price_display_codes_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_price_display_codes_Set() const{
    return m_price_display_codes_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_price_display_codes_Valid() const{
    return m_price_display_codes_isValid;
}

QString OAIUpdatePrice_request_pricing_inner::getProcessMode() const {
    return m_process_mode;
}
void OAIUpdatePrice_request_pricing_inner::setProcessMode(const QString &process_mode) {
    m_process_mode = process_mode;
    m_process_mode_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_process_mode_Set() const{
    return m_process_mode_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_process_mode_Valid() const{
    return m_process_mode_isValid;
}

QString OAIUpdatePrice_request_pricing_inner::getPromoId() const {
    return m_promo_id;
}
void OAIUpdatePrice_request_pricing_inner::setPromoId(const QString &promo_id) {
    m_promo_id = promo_id;
    m_promo_id_isSet = true;
}

bool OAIUpdatePrice_request_pricing_inner::is_promo_id_Set() const{
    return m_promo_id_isSet;
}

bool OAIUpdatePrice_request_pricing_inner::is_promo_id_Valid() const{
    return m_promo_id_isValid;
}

bool OAIUpdatePrice_request_pricing_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_display_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promo_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePrice_request_pricing_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_price_isValid && m_current_price_type_isValid && true;
}

} // namespace OpenAPI
