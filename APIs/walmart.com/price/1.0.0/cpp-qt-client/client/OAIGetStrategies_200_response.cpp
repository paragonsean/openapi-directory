/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStrategies_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStrategies_200_response::OAIGetStrategies_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStrategies_200_response::OAIGetStrategies_200_response() {
    this->initializeModel();
}

OAIGetStrategies_200_response::~OAIGetStrategies_200_response() {}

void OAIGetStrategies_200_response::initializeModel() {

    m_strategy_collections_isSet = false;
    m_strategy_collections_isValid = false;

    m_total_elements_isSet = false;
    m_total_elements_isValid = false;
}

void OAIGetStrategies_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStrategies_200_response::fromJsonObject(QJsonObject json) {

    m_strategy_collections_isValid = ::OpenAPI::fromJsonValue(m_strategy_collections, json[QString("strategyCollections")]);
    m_strategy_collections_isSet = !json[QString("strategyCollections")].isNull() && m_strategy_collections_isValid;

    m_total_elements_isValid = ::OpenAPI::fromJsonValue(m_total_elements, json[QString("totalElements")]);
    m_total_elements_isSet = !json[QString("totalElements")].isNull() && m_total_elements_isValid;
}

QString OAIGetStrategies_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStrategies_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_strategy_collections.size() > 0) {
        obj.insert(QString("strategyCollections"), ::OpenAPI::toJsonValue(m_strategy_collections));
    }
    if (m_total_elements_isSet) {
        obj.insert(QString("totalElements"), ::OpenAPI::toJsonValue(m_total_elements));
    }
    return obj;
}

QList<OAIGetStrategies_200_response_strategyCollections_inner> OAIGetStrategies_200_response::getStrategyCollections() const {
    return m_strategy_collections;
}
void OAIGetStrategies_200_response::setStrategyCollections(const QList<OAIGetStrategies_200_response_strategyCollections_inner> &strategy_collections) {
    m_strategy_collections = strategy_collections;
    m_strategy_collections_isSet = true;
}

bool OAIGetStrategies_200_response::is_strategy_collections_Set() const{
    return m_strategy_collections_isSet;
}

bool OAIGetStrategies_200_response::is_strategy_collections_Valid() const{
    return m_strategy_collections_isValid;
}

qint32 OAIGetStrategies_200_response::getTotalElements() const {
    return m_total_elements;
}
void OAIGetStrategies_200_response::setTotalElements(const qint32 &total_elements) {
    m_total_elements = total_elements;
    m_total_elements_isSet = true;
}

bool OAIGetStrategies_200_response::is_total_elements_Set() const{
    return m_total_elements_isSet;
}

bool OAIGetStrategies_200_response::is_total_elements_Valid() const{
    return m_total_elements_isValid;
}

bool OAIGetStrategies_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_strategy_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_elements_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStrategies_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
