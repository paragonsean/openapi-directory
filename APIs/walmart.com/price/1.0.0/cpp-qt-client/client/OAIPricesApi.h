/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricesApi_H
#define OAI_OAIPricesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateStrategy_200_response.h"
#include "OAICreateStrategy_request.h"
#include "OAIDeleteStrategy_200_response.h"
#include "OAIGetRepricerFeed_200_response.h"
#include "OAIGetRepricerFeed_request.h"
#include "OAIGetStrategies_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAIOptCapProgramInPrice_200_response.h"
#include "OAIOptCapProgramInPrice_request.h"
#include "OAIPriceBulkUploads_200_response.h"
#include "OAIUpdatePrice_200_response.h"
#include "OAIUpdatePrice_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricesApi : public QObject {
    Q_OBJECT

public:
    OAIPricesApi(const int timeOut = 0);
    ~OAIPricesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  oai_create_strategy_request OAICreateStrategy_request [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void createStrategy(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAICreateStrategy_request &oai_create_strategy_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  strategy_collection_id QString [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void deleteStrategy(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const QString &strategy_collection_id, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  oai_get_repricer_feed_request OAIGetRepricerFeed_request [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void getRepricerFeed(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIGetRepricerFeed_request &oai_get_repricer_feed_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void getStrategies(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  oai_opt_cap_program_in_price_request OAIOptCapProgramInPrice_request [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void optCapProgramInPrice(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIOptCapProgramInPrice_request &oai_opt_cap_program_in_price_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feed_type QString [required]
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void priceBulkUploads(const QString &feed_type, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  oai_update_price_request OAIUpdatePrice_request [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void updatePrice(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIUpdatePrice_request &oai_update_price_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wm_sec_access_token QString [required]
    * @param[in]  wm_qos_correlation_id QString [required]
    * @param[in]  wm_svc_name QString [required]
    * @param[in]  strategy_collection_id QString [required]
    * @param[in]  oai_create_strategy_request OAICreateStrategy_request [required]
    * @param[in]  wm_consumer_channel_type QString [optional]
    */
    virtual void updateStrategy(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const QString &strategy_collection_id, const OAICreateStrategy_request &oai_create_strategy_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createStrategyCallback(OAIHttpRequestWorker *worker);
    void deleteStrategyCallback(OAIHttpRequestWorker *worker);
    void getRepricerFeedCallback(OAIHttpRequestWorker *worker);
    void getStrategiesCallback(OAIHttpRequestWorker *worker);
    void optCapProgramInPriceCallback(OAIHttpRequestWorker *worker);
    void priceBulkUploadsCallback(OAIHttpRequestWorker *worker);
    void updatePriceCallback(OAIHttpRequestWorker *worker);
    void updateStrategyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createStrategySignal(OAICreateStrategy_200_response summary);
    void deleteStrategySignal(OAIDeleteStrategy_200_response summary);
    void getRepricerFeedSignal(OAIGetRepricerFeed_200_response summary);
    void getStrategiesSignal(OAIGetStrategies_200_response summary);
    void optCapProgramInPriceSignal(OAIOptCapProgramInPrice_200_response summary);
    void priceBulkUploadsSignal(OAIPriceBulkUploads_200_response summary);
    void updatePriceSignal(OAIUpdatePrice_200_response summary);
    void updateStrategySignal(OAICreateStrategy_200_response summary);


    void createStrategySignalFull(OAIHttpRequestWorker *worker, OAICreateStrategy_200_response summary);
    void deleteStrategySignalFull(OAIHttpRequestWorker *worker, OAIDeleteStrategy_200_response summary);
    void getRepricerFeedSignalFull(OAIHttpRequestWorker *worker, OAIGetRepricerFeed_200_response summary);
    void getStrategiesSignalFull(OAIHttpRequestWorker *worker, OAIGetStrategies_200_response summary);
    void optCapProgramInPriceSignalFull(OAIHttpRequestWorker *worker, OAIOptCapProgramInPrice_200_response summary);
    void priceBulkUploadsSignalFull(OAIHttpRequestWorker *worker, OAIPriceBulkUploads_200_response summary);
    void updatePriceSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePrice_200_response summary);
    void updateStrategySignalFull(OAIHttpRequestWorker *worker, OAICreateStrategy_200_response summary);

    Q_DECL_DEPRECATED_X("Use createStrategySignalError() instead")
    void createStrategySignalE(OAICreateStrategy_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStrategySignalError(OAICreateStrategy_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStrategySignalError() instead")
    void deleteStrategySignalE(OAIDeleteStrategy_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStrategySignalError(OAIDeleteStrategy_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepricerFeedSignalError() instead")
    void getRepricerFeedSignalE(OAIGetRepricerFeed_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepricerFeedSignalError(OAIGetRepricerFeed_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStrategiesSignalError() instead")
    void getStrategiesSignalE(OAIGetStrategies_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStrategiesSignalError(OAIGetStrategies_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use optCapProgramInPriceSignalError() instead")
    void optCapProgramInPriceSignalE(OAIOptCapProgramInPrice_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void optCapProgramInPriceSignalError(OAIOptCapProgramInPrice_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceBulkUploadsSignalError() instead")
    void priceBulkUploadsSignalE(OAIPriceBulkUploads_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceBulkUploadsSignalError(OAIPriceBulkUploads_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePriceSignalError() instead")
    void updatePriceSignalE(OAIUpdatePrice_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePriceSignalError(OAIUpdatePrice_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStrategySignalError() instead")
    void updateStrategySignalE(OAICreateStrategy_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStrategySignalError(OAICreateStrategy_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createStrategySignalErrorFull() instead")
    void createStrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStrategySignalErrorFull() instead")
    void deleteStrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepricerFeedSignalErrorFull() instead")
    void getRepricerFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepricerFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStrategiesSignalErrorFull() instead")
    void getStrategiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStrategiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use optCapProgramInPriceSignalErrorFull() instead")
    void optCapProgramInPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void optCapProgramInPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceBulkUploadsSignalErrorFull() instead")
    void priceBulkUploadsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceBulkUploadsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePriceSignalErrorFull() instead")
    void updatePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStrategySignalErrorFull() instead")
    void updateStrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
