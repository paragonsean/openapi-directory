/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetStrategies_200_response_strategyCollections_inner.h
 *
 * 
 */

#ifndef OAIGetStrategies_200_response_strategyCollections_inner_H
#define OAIGetStrategies_200_response_strategyCollections_inner_H

#include <QJsonObject>

#include "OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner;

class OAIGetStrategies_200_response_strategyCollections_inner : public OAIObject {
public:
    OAIGetStrategies_200_response_strategyCollections_inner();
    OAIGetStrategies_200_response_strategyCollections_inner(QString json);
    ~OAIGetStrategies_200_response_strategyCollections_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAssignedCount() const;
    void setAssignedCount(const qint32 &assigned_count);
    bool is_assigned_count_Set() const;
    bool is_assigned_count_Valid() const;

    bool isEnableRepricerForPromotion() const;
    void setEnableRepricerForPromotion(const bool &enable_repricer_for_promotion);
    bool is_enable_repricer_for_promotion_Set() const;
    bool is_enable_repricer_for_promotion_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getRepricerStrategy() const;
    void setRepricerStrategy(const QString &repricer_strategy);
    bool is_repricer_strategy_Set() const;
    bool is_repricer_strategy_Valid() const;

    QList<OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner> getStrategies() const;
    void setStrategies(const QList<OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner> &strategies);
    bool is_strategies_Set() const;
    bool is_strategies_Valid() const;

    QString getStrategyCollectionId() const;
    void setStrategyCollectionId(const QString &strategy_collection_id);
    bool is_strategy_collection_id_Set() const;
    bool is_strategy_collection_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_assigned_count;
    bool m_assigned_count_isSet;
    bool m_assigned_count_isValid;

    bool m_enable_repricer_for_promotion;
    bool m_enable_repricer_for_promotion_isSet;
    bool m_enable_repricer_for_promotion_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_repricer_strategy;
    bool m_repricer_strategy_isSet;
    bool m_repricer_strategy_isValid;

    QList<OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner> m_strategies;
    bool m_strategies_isSet;
    bool m_strategies_isValid;

    QString m_strategy_collection_id;
    bool m_strategy_collection_id_isSet;
    bool m_strategy_collection_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetStrategies_200_response_strategyCollections_inner)

#endif // OAIGetStrategies_200_response_strategyCollections_inner_H
