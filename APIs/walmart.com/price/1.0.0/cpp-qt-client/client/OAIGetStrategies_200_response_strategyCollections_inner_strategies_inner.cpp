/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner() {
    this->initializeModel();
}

OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::~OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner() {}

void OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::initializeModel() {

    m_adjustment_type_isSet = false;
    m_adjustment_type_isValid = false;

    m_adjustment_value_isSet = false;
    m_adjustment_value_isValid = false;

    m_strategy_type_isSet = false;
    m_strategy_type_isValid = false;
}

void OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::fromJsonObject(QJsonObject json) {

    m_adjustment_type_isValid = ::OpenAPI::fromJsonValue(m_adjustment_type, json[QString("adjustmentType")]);
    m_adjustment_type_isSet = !json[QString("adjustmentType")].isNull() && m_adjustment_type_isValid;

    m_adjustment_value_isValid = ::OpenAPI::fromJsonValue(m_adjustment_value, json[QString("adjustmentValue")]);
    m_adjustment_value_isSet = !json[QString("adjustmentValue")].isNull() && m_adjustment_value_isValid;

    m_strategy_type_isValid = ::OpenAPI::fromJsonValue(m_strategy_type, json[QString("strategyType")]);
    m_strategy_type_isSet = !json[QString("strategyType")].isNull() && m_strategy_type_isValid;
}

QString OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_type_isSet) {
        obj.insert(QString("adjustmentType"), ::OpenAPI::toJsonValue(m_adjustment_type));
    }
    if (m_adjustment_value_isSet) {
        obj.insert(QString("adjustmentValue"), ::OpenAPI::toJsonValue(m_adjustment_value));
    }
    if (m_strategy_type_isSet) {
        obj.insert(QString("strategyType"), ::OpenAPI::toJsonValue(m_strategy_type));
    }
    return obj;
}

QString OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::getAdjustmentType() const {
    return m_adjustment_type;
}
void OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::setAdjustmentType(const QString &adjustment_type) {
    m_adjustment_type = adjustment_type;
    m_adjustment_type_isSet = true;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::is_adjustment_type_Set() const{
    return m_adjustment_type_isSet;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::is_adjustment_type_Valid() const{
    return m_adjustment_type_isValid;
}

double OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::getAdjustmentValue() const {
    return m_adjustment_value;
}
void OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::setAdjustmentValue(const double &adjustment_value) {
    m_adjustment_value = adjustment_value;
    m_adjustment_value_isSet = true;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::is_adjustment_value_Set() const{
    return m_adjustment_value_isSet;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::is_adjustment_value_Valid() const{
    return m_adjustment_value_isValid;
}

QString OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::getStrategyType() const {
    return m_strategy_type;
}
void OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::setStrategyType(const QString &strategy_type) {
    m_strategy_type = strategy_type;
    m_strategy_type_isSet = true;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::is_strategy_type_Set() const{
    return m_strategy_type_isSet;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::is_strategy_type_Valid() const{
    return m_strategy_type_isValid;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjustment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStrategies_200_response_strategyCollections_inner_strategies_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
