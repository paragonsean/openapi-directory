/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePrice_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePrice_request::OAIUpdatePrice_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePrice_request::OAIUpdatePrice_request() {
    this->initializeModel();
}

OAIUpdatePrice_request::~OAIUpdatePrice_request() {}

void OAIUpdatePrice_request::initializeModel() {

    m_definitions_isSet = false;
    m_definitions_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_pricing_isSet = false;
    m_pricing_isValid = false;

    m_replace_all_isSet = false;
    m_replace_all_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIUpdatePrice_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePrice_request::fromJsonObject(QJsonObject json) {

    m_definitions_isValid = ::OpenAPI::fromJsonValue(m_definitions, json[QString("definitions")]);
    m_definitions_isSet = !json[QString("definitions")].isNull() && m_definitions_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_pricing_isValid = ::OpenAPI::fromJsonValue(m_pricing, json[QString("pricing")]);
    m_pricing_isSet = !json[QString("pricing")].isNull() && m_pricing_isValid;

    m_replace_all_isValid = ::OpenAPI::fromJsonValue(m_replace_all, json[QString("replaceAll")]);
    m_replace_all_isSet = !json[QString("replaceAll")].isNull() && m_replace_all_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIUpdatePrice_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePrice_request::asJsonObject() const {
    QJsonObject obj;
    if (m_definitions_isSet) {
        obj.insert(QString("definitions"), ::OpenAPI::toJsonValue(m_definitions));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_pricing.size() > 0) {
        obj.insert(QString("pricing"), ::OpenAPI::toJsonValue(m_pricing));
    }
    if (m_replace_all_isSet) {
        obj.insert(QString("replaceAll"), ::OpenAPI::toJsonValue(m_replace_all));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

OAIObject OAIUpdatePrice_request::getDefinitions() const {
    return m_definitions;
}
void OAIUpdatePrice_request::setDefinitions(const OAIObject &definitions) {
    m_definitions = definitions;
    m_definitions_isSet = true;
}

bool OAIUpdatePrice_request::is_definitions_Set() const{
    return m_definitions_isSet;
}

bool OAIUpdatePrice_request::is_definitions_Valid() const{
    return m_definitions_isValid;
}

QString OAIUpdatePrice_request::getOfferId() const {
    return m_offer_id;
}
void OAIUpdatePrice_request::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIUpdatePrice_request::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIUpdatePrice_request::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QList<OAIUpdatePrice_request_pricing_inner> OAIUpdatePrice_request::getPricing() const {
    return m_pricing;
}
void OAIUpdatePrice_request::setPricing(const QList<OAIUpdatePrice_request_pricing_inner> &pricing) {
    m_pricing = pricing;
    m_pricing_isSet = true;
}

bool OAIUpdatePrice_request::is_pricing_Set() const{
    return m_pricing_isSet;
}

bool OAIUpdatePrice_request::is_pricing_Valid() const{
    return m_pricing_isValid;
}

QString OAIUpdatePrice_request::getReplaceAll() const {
    return m_replace_all;
}
void OAIUpdatePrice_request::setReplaceAll(const QString &replace_all) {
    m_replace_all = replace_all;
    m_replace_all_isSet = true;
}

bool OAIUpdatePrice_request::is_replace_all_Set() const{
    return m_replace_all_isSet;
}

bool OAIUpdatePrice_request::is_replace_all_Valid() const{
    return m_replace_all_isValid;
}

QString OAIUpdatePrice_request::getSku() const {
    return m_sku;
}
void OAIUpdatePrice_request::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIUpdatePrice_request::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIUpdatePrice_request::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIUpdatePrice_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definitions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePrice_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pricing_isValid && m_sku_isValid && true;
}

} // namespace OpenAPI
