/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedItemsRequestDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedItemsRequestDTO::OAIFeedItemsRequestDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedItemsRequestDTO::OAIFeedItemsRequestDTO() {
    this->initializeModel();
}

OAIFeedItemsRequestDTO::~OAIFeedItemsRequestDTO() {}

void OAIFeedItemsRequestDTO::initializeModel() {

    m_maximum_seller_allowed_price_isSet = false;
    m_maximum_seller_allowed_price_isValid = false;

    m_minimum_seller_allowed_price_isSet = false;
    m_minimum_seller_allowed_price_isValid = false;

    m_repricer_strategy_isSet = false;
    m_repricer_strategy_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIFeedItemsRequestDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedItemsRequestDTO::fromJsonObject(QJsonObject json) {

    m_maximum_seller_allowed_price_isValid = ::OpenAPI::fromJsonValue(m_maximum_seller_allowed_price, json[QString("maximumSellerAllowedPrice")]);
    m_maximum_seller_allowed_price_isSet = !json[QString("maximumSellerAllowedPrice")].isNull() && m_maximum_seller_allowed_price_isValid;

    m_minimum_seller_allowed_price_isValid = ::OpenAPI::fromJsonValue(m_minimum_seller_allowed_price, json[QString("minimumSellerAllowedPrice")]);
    m_minimum_seller_allowed_price_isSet = !json[QString("minimumSellerAllowedPrice")].isNull() && m_minimum_seller_allowed_price_isValid;

    m_repricer_strategy_isValid = ::OpenAPI::fromJsonValue(m_repricer_strategy, json[QString("repricerStrategy")]);
    m_repricer_strategy_isSet = !json[QString("repricerStrategy")].isNull() && m_repricer_strategy_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIFeedItemsRequestDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedItemsRequestDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_seller_allowed_price_isSet) {
        obj.insert(QString("maximumSellerAllowedPrice"), ::OpenAPI::toJsonValue(m_maximum_seller_allowed_price));
    }
    if (m_minimum_seller_allowed_price_isSet) {
        obj.insert(QString("minimumSellerAllowedPrice"), ::OpenAPI::toJsonValue(m_minimum_seller_allowed_price));
    }
    if (m_repricer_strategy_isSet) {
        obj.insert(QString("repricerStrategy"), ::OpenAPI::toJsonValue(m_repricer_strategy));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

double OAIFeedItemsRequestDTO::getMaximumSellerAllowedPrice() const {
    return m_maximum_seller_allowed_price;
}
void OAIFeedItemsRequestDTO::setMaximumSellerAllowedPrice(const double &maximum_seller_allowed_price) {
    m_maximum_seller_allowed_price = maximum_seller_allowed_price;
    m_maximum_seller_allowed_price_isSet = true;
}

bool OAIFeedItemsRequestDTO::is_maximum_seller_allowed_price_Set() const{
    return m_maximum_seller_allowed_price_isSet;
}

bool OAIFeedItemsRequestDTO::is_maximum_seller_allowed_price_Valid() const{
    return m_maximum_seller_allowed_price_isValid;
}

double OAIFeedItemsRequestDTO::getMinimumSellerAllowedPrice() const {
    return m_minimum_seller_allowed_price;
}
void OAIFeedItemsRequestDTO::setMinimumSellerAllowedPrice(const double &minimum_seller_allowed_price) {
    m_minimum_seller_allowed_price = minimum_seller_allowed_price;
    m_minimum_seller_allowed_price_isSet = true;
}

bool OAIFeedItemsRequestDTO::is_minimum_seller_allowed_price_Set() const{
    return m_minimum_seller_allowed_price_isSet;
}

bool OAIFeedItemsRequestDTO::is_minimum_seller_allowed_price_Valid() const{
    return m_minimum_seller_allowed_price_isValid;
}

QString OAIFeedItemsRequestDTO::getRepricerStrategy() const {
    return m_repricer_strategy;
}
void OAIFeedItemsRequestDTO::setRepricerStrategy(const QString &repricer_strategy) {
    m_repricer_strategy = repricer_strategy;
    m_repricer_strategy_isSet = true;
}

bool OAIFeedItemsRequestDTO::is_repricer_strategy_Set() const{
    return m_repricer_strategy_isSet;
}

bool OAIFeedItemsRequestDTO::is_repricer_strategy_Valid() const{
    return m_repricer_strategy_isValid;
}

QString OAIFeedItemsRequestDTO::getSku() const {
    return m_sku;
}
void OAIFeedItemsRequestDTO::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIFeedItemsRequestDTO::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIFeedItemsRequestDTO::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIFeedItemsRequestDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_seller_allowed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_seller_allowed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repricer_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedItemsRequestDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
