/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPricesApi::OAIPricesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPricesApi::~OAIPricesApi() {
}

void OAIPricesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://marketplace.walmartapis.com"),
    "Production URL",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://sandbox.walmartapis.com"),
    "Sandbox URL",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createStrategy", defaultConf);
    _serverIndices.insert("createStrategy", 0);
    _serverConfigs.insert("deleteStrategy", defaultConf);
    _serverIndices.insert("deleteStrategy", 0);
    _serverConfigs.insert("getRepricerFeed", defaultConf);
    _serverIndices.insert("getRepricerFeed", 0);
    _serverConfigs.insert("getStrategies", defaultConf);
    _serverIndices.insert("getStrategies", 0);
    _serverConfigs.insert("optCapProgramInPrice", defaultConf);
    _serverIndices.insert("optCapProgramInPrice", 0);
    _serverConfigs.insert("priceBulkUploads", defaultConf);
    _serverIndices.insert("priceBulkUploads", 0);
    _serverConfigs.insert("updatePrice", defaultConf);
    _serverIndices.insert("updatePrice", 0);
    _serverConfigs.insert("updateStrategy", defaultConf);
    _serverIndices.insert("updateStrategy", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPricesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPricesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPricesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPricesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPricesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPricesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPricesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPricesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPricesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPricesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPricesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPricesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPricesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPricesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPricesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPricesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPricesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPricesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPricesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPricesApi::createStrategy(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAICreateStrategy_request &oai_create_strategy_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["createStrategy"][_serverIndices.value("createStrategy")].URL()+"/v3/repricer/strategy");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_strategy_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::createStrategyCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::createStrategyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStrategy_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createStrategySignal(output);
        Q_EMIT createStrategySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createStrategySignalE(output, error_type, error_str);
        Q_EMIT createStrategySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createStrategySignalError(output, error_type, error_str);
        Q_EMIT createStrategySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::deleteStrategy(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const QString &strategy_collection_id, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["deleteStrategy"][_serverIndices.value("deleteStrategy")].URL()+"/v3/repricer/strategy/{strategyCollectionId}");
    
    
    {
        QString strategy_collection_idPathParam("{");
        strategy_collection_idPathParam.append("strategyCollectionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyCollectionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyCollectionId"+pathSuffix : pathPrefix;
        fullPath.replace(strategy_collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategy_collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::deleteStrategyCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::deleteStrategyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeleteStrategy_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteStrategySignal(output);
        Q_EMIT deleteStrategySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteStrategySignalE(output, error_type, error_str);
        Q_EMIT deleteStrategySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteStrategySignalError(output, error_type, error_str);
        Q_EMIT deleteStrategySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::getRepricerFeed(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIGetRepricerFeed_request &oai_get_repricer_feed_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["getRepricerFeed"][_serverIndices.value("getRepricerFeed")].URL()+"/v3/repricerFeeds");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_repricer_feed_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::getRepricerFeedCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::getRepricerFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetRepricerFeed_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRepricerFeedSignal(output);
        Q_EMIT getRepricerFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRepricerFeedSignalE(output, error_type, error_str);
        Q_EMIT getRepricerFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRepricerFeedSignalError(output, error_type, error_str);
        Q_EMIT getRepricerFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::getStrategies(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["getStrategies"][_serverIndices.value("getStrategies")].URL()+"/v3/repricer/strategies");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::getStrategiesCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::getStrategiesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetStrategies_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getStrategiesSignal(output);
        Q_EMIT getStrategiesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getStrategiesSignalE(output, error_type, error_str);
        Q_EMIT getStrategiesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getStrategiesSignalError(output, error_type, error_str);
        Q_EMIT getStrategiesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::optCapProgramInPrice(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIOptCapProgramInPrice_request &oai_opt_cap_program_in_price_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["optCapProgramInPrice"][_serverIndices.value("optCapProgramInPrice")].URL()+"/v3/cppreference");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_opt_cap_program_in_price_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::optCapProgramInPriceCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::optCapProgramInPriceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOptCapProgramInPrice_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT optCapProgramInPriceSignal(output);
        Q_EMIT optCapProgramInPriceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT optCapProgramInPriceSignalE(output, error_type, error_str);
        Q_EMIT optCapProgramInPriceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT optCapProgramInPriceSignalError(output, error_type, error_str);
        Q_EMIT optCapProgramInPriceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::priceBulkUploads(const QString &feed_type, const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["priceBulkUploads"][_serverIndices.value("priceBulkUploads")].URL()+"/v3/feeds");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "feedType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("feedType")).append(querySuffix).append(QUrl::toPercentEncoding(feed_type));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("file", file.local_filename, file.request_filename, file.mime_type);
    }

    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::priceBulkUploadsCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::priceBulkUploadsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPriceBulkUploads_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT priceBulkUploadsSignal(output);
        Q_EMIT priceBulkUploadsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT priceBulkUploadsSignalE(output, error_type, error_str);
        Q_EMIT priceBulkUploadsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT priceBulkUploadsSignalError(output, error_type, error_str);
        Q_EMIT priceBulkUploadsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::updatePrice(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const OAIUpdatePrice_request &oai_update_price_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["updatePrice"][_serverIndices.value("updatePrice")].URL()+"/v3/price");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_price_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::updatePriceCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::updatePriceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdatePrice_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updatePriceSignal(output);
        Q_EMIT updatePriceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updatePriceSignalE(output, error_type, error_str);
        Q_EMIT updatePriceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updatePriceSignalError(output, error_type, error_str);
        Q_EMIT updatePriceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::updateStrategy(const QString &wm_sec_access_token, const QString &wm_qos_correlation_id, const QString &wm_svc_name, const QString &strategy_collection_id, const OAICreateStrategy_request &oai_create_strategy_request, const ::OpenAPI::OptionalParam<QString> &wm_consumer_channel_type) {
    QString fullPath = QString(_serverConfigs["updateStrategy"][_serverIndices.value("updateStrategy")].URL()+"/v3/repricer/strategy/{strategyCollectionId}");
    
    
    {
        QString strategy_collection_idPathParam("{");
        strategy_collection_idPathParam.append("strategyCollectionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyCollectionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyCollectionId"+pathSuffix : pathPrefix;
        fullPath.replace(strategy_collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategy_collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_create_strategy_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(wm_sec_access_token).isEmpty()) {
            input.headers.insert("WM_SEC.ACCESS_TOKEN", ::OpenAPI::toStringValue(wm_sec_access_token));
        }
        }
    if (wm_consumer_channel_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(wm_consumer_channel_type.value()).isEmpty()) {
            input.headers.insert("WM_CONSUMER.CHANNEL.TYPE", ::OpenAPI::toStringValue(wm_consumer_channel_type.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_qos_correlation_id).isEmpty()) {
            input.headers.insert("WM_QOS.CORRELATION_ID", ::OpenAPI::toStringValue(wm_qos_correlation_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(wm_svc_name).isEmpty()) {
            input.headers.insert("WM_SVC.NAME", ::OpenAPI::toStringValue(wm_svc_name));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPricesApi::updateStrategyCallback);
    connect(this, &OAIPricesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPricesApi::updateStrategyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStrategy_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateStrategySignal(output);
        Q_EMIT updateStrategySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateStrategySignalE(output, error_type, error_str);
        Q_EMIT updateStrategySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateStrategySignalError(output, error_type, error_str);
        Q_EMIT updateStrategySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPricesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
