/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePrice_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePrice_200_response::OAIUpdatePrice_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePrice_200_response::OAIUpdatePrice_200_response() {
    this->initializeModel();
}

OAIUpdatePrice_200_response::~OAIUpdatePrice_200_response() {}

void OAIUpdatePrice_200_response::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_mart_isSet = false;
    m_mart_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIUpdatePrice_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePrice_200_response::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_mart_isValid = ::OpenAPI::fromJsonValue(m_mart, json[QString("mart")]);
    m_mart_isSet = !json[QString("mart")].isNull() && m_mart_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIUpdatePrice_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePrice_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_mart_isSet) {
        obj.insert(QString("mart"), ::OpenAPI::toJsonValue(m_mart));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QList<OAIUpdatePrice_200_response_errors_inner> OAIUpdatePrice_200_response::getErrors() const {
    return m_errors;
}
void OAIUpdatePrice_200_response::setErrors(const QList<OAIUpdatePrice_200_response_errors_inner> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIUpdatePrice_200_response::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIUpdatePrice_200_response::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIUpdatePrice_200_response::getMart() const {
    return m_mart;
}
void OAIUpdatePrice_200_response::setMart(const QString &mart) {
    m_mart = mart;
    m_mart_isSet = true;
}

bool OAIUpdatePrice_200_response::is_mart_Set() const{
    return m_mart_isSet;
}

bool OAIUpdatePrice_200_response::is_mart_Valid() const{
    return m_mart_isValid;
}

QString OAIUpdatePrice_200_response::getMessage() const {
    return m_message;
}
void OAIUpdatePrice_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUpdatePrice_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUpdatePrice_200_response::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIUpdatePrice_200_response::getSku() const {
    return m_sku;
}
void OAIUpdatePrice_200_response::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIUpdatePrice_200_response::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIUpdatePrice_200_response::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAIUpdatePrice_200_response::getStatusCode() const {
    return m_status_code;
}
void OAIUpdatePrice_200_response::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIUpdatePrice_200_response::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIUpdatePrice_200_response::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIUpdatePrice_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePrice_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
