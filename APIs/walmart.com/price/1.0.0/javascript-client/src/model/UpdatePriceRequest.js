/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdatePriceRequestPricingInner from './UpdatePriceRequestPricingInner';

/**
 * The UpdatePriceRequest model module.
 * @module model/UpdatePriceRequest
 * @version 1.0.0
 */
class UpdatePriceRequest {
    /**
     * Constructs a new <code>UpdatePriceRequest</code>.
     * @alias module:model/UpdatePriceRequest
     * @param pricing {Array.<module:model/UpdatePriceRequestPricingInner>} 
     * @param sku {String} 
     */
    constructor(pricing, sku) { 
        
        UpdatePriceRequest.initialize(this, pricing, sku);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pricing, sku) { 
        obj['pricing'] = pricing;
        obj['sku'] = sku;
    }

    /**
     * Constructs a <code>UpdatePriceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePriceRequest} obj Optional instance to populate.
     * @return {module:model/UpdatePriceRequest} The populated <code>UpdatePriceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePriceRequest();

            if (data.hasOwnProperty('definitions')) {
                obj['definitions'] = ApiClient.convertToType(data['definitions'], Object);
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('pricing')) {
                obj['pricing'] = ApiClient.convertToType(data['pricing'], [UpdatePriceRequestPricingInner]);
            }
            if (data.hasOwnProperty('replaceAll')) {
                obj['replaceAll'] = ApiClient.convertToType(data['replaceAll'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePriceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePriceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdatePriceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        if (data['pricing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pricing'])) {
                throw new Error("Expected the field `pricing` to be an array in the JSON data but got " + data['pricing']);
            }
            // validate the optional field `pricing` (array)
            for (const item of data['pricing']) {
                UpdatePriceRequestPricingInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['replaceAll'] && !(typeof data['replaceAll'] === 'string' || data['replaceAll'] instanceof String)) {
            throw new Error("Expected the field `replaceAll` to be a primitive type in the JSON string but got " + data['replaceAll']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }

        return true;
    }


}

UpdatePriceRequest.RequiredProperties = ["pricing", "sku"];

/**
 * @member {Object} definitions
 */
UpdatePriceRequest.prototype['definitions'] = undefined;

/**
 * This is applicable only for promotions
 * @member {String} offerId
 */
UpdatePriceRequest.prototype['offerId'] = undefined;

/**
 * @member {Array.<module:model/UpdatePriceRequestPricingInner>} pricing
 */
UpdatePriceRequest.prototype['pricing'] = undefined;

/**
 * This is applicable only for promotions
 * @member {module:model/UpdatePriceRequest.ReplaceAllEnum} replaceAll
 */
UpdatePriceRequest.prototype['replaceAll'] = undefined;

/**
 * @member {String} sku
 */
UpdatePriceRequest.prototype['sku'] = undefined;





/**
 * Allowed values for the <code>replaceAll</code> property.
 * @enum {String}
 * @readonly
 */
UpdatePriceRequest['ReplaceAllEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};



export default UpdatePriceRequest;

