/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdatePriceRequestPricingInnerComparisonPrice from './UpdatePriceRequestPricingInnerComparisonPrice';
import UpdatePriceRequestPricingInnerCurrentPrice from './UpdatePriceRequestPricingInnerCurrentPrice';

/**
 * The Pricing model module.
 * @module model/Pricing
 * @version 1.0.0
 */
class Pricing {
    /**
     * Constructs a new <code>Pricing</code>.
     * @alias module:model/Pricing
     * @param currentPrice {module:model/UpdatePriceRequestPricingInnerCurrentPrice} 
     * @param currentPriceType {module:model/Pricing.CurrentPriceTypeEnum} This is applicable only for both promotions and price
     */
    constructor(currentPrice, currentPriceType) { 
        
        Pricing.initialize(this, currentPrice, currentPriceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentPrice, currentPriceType) { 
        obj['currentPrice'] = currentPrice;
        obj['currentPriceType'] = currentPriceType;
    }

    /**
     * Constructs a <code>Pricing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pricing} obj Optional instance to populate.
     * @return {module:model/Pricing} The populated <code>Pricing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pricing();

            if (data.hasOwnProperty('comparisonPrice')) {
                obj['comparisonPrice'] = UpdatePriceRequestPricingInnerComparisonPrice.constructFromObject(data['comparisonPrice']);
            }
            if (data.hasOwnProperty('comparisonPriceType')) {
                obj['comparisonPriceType'] = ApiClient.convertToType(data['comparisonPriceType'], 'String');
            }
            if (data.hasOwnProperty('currentPrice')) {
                obj['currentPrice'] = UpdatePriceRequestPricingInnerCurrentPrice.constructFromObject(data['currentPrice']);
            }
            if (data.hasOwnProperty('currentPriceType')) {
                obj['currentPriceType'] = ApiClient.convertToType(data['currentPriceType'], 'String');
            }
            if (data.hasOwnProperty('effectiveDate')) {
                obj['effectiveDate'] = ApiClient.convertToType(data['effectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('priceDisplayCodes')) {
                obj['priceDisplayCodes'] = ApiClient.convertToType(data['priceDisplayCodes'], 'String');
            }
            if (data.hasOwnProperty('processMode')) {
                obj['processMode'] = ApiClient.convertToType(data['processMode'], 'String');
            }
            if (data.hasOwnProperty('promoId')) {
                obj['promoId'] = ApiClient.convertToType(data['promoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pricing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pricing</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Pricing.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `comparisonPrice`
        if (data['comparisonPrice']) { // data not null
          UpdatePriceRequestPricingInnerComparisonPrice.validateJSON(data['comparisonPrice']);
        }
        // ensure the json data is a string
        if (data['comparisonPriceType'] && !(typeof data['comparisonPriceType'] === 'string' || data['comparisonPriceType'] instanceof String)) {
            throw new Error("Expected the field `comparisonPriceType` to be a primitive type in the JSON string but got " + data['comparisonPriceType']);
        }
        // validate the optional field `currentPrice`
        if (data['currentPrice']) { // data not null
          UpdatePriceRequestPricingInnerCurrentPrice.validateJSON(data['currentPrice']);
        }
        // ensure the json data is a string
        if (data['currentPriceType'] && !(typeof data['currentPriceType'] === 'string' || data['currentPriceType'] instanceof String)) {
            throw new Error("Expected the field `currentPriceType` to be a primitive type in the JSON string but got " + data['currentPriceType']);
        }
        // ensure the json data is a string
        if (data['priceDisplayCodes'] && !(typeof data['priceDisplayCodes'] === 'string' || data['priceDisplayCodes'] instanceof String)) {
            throw new Error("Expected the field `priceDisplayCodes` to be a primitive type in the JSON string but got " + data['priceDisplayCodes']);
        }
        // ensure the json data is a string
        if (data['processMode'] && !(typeof data['processMode'] === 'string' || data['processMode'] instanceof String)) {
            throw new Error("Expected the field `processMode` to be a primitive type in the JSON string but got " + data['processMode']);
        }
        // ensure the json data is a string
        if (data['promoId'] && !(typeof data['promoId'] === 'string' || data['promoId'] instanceof String)) {
            throw new Error("Expected the field `promoId` to be a primitive type in the JSON string but got " + data['promoId']);
        }

        return true;
    }


}

Pricing.RequiredProperties = ["currentPrice", "currentPriceType"];

/**
 * @member {module:model/UpdatePriceRequestPricingInnerComparisonPrice} comparisonPrice
 */
Pricing.prototype['comparisonPrice'] = undefined;

/**
 * This is applicable only for promotions
 * @member {module:model/Pricing.ComparisonPriceTypeEnum} comparisonPriceType
 */
Pricing.prototype['comparisonPriceType'] = undefined;

/**
 * @member {module:model/UpdatePriceRequestPricingInnerCurrentPrice} currentPrice
 */
Pricing.prototype['currentPrice'] = undefined;

/**
 * This is applicable only for both promotions and price
 * @member {module:model/Pricing.CurrentPriceTypeEnum} currentPriceType
 */
Pricing.prototype['currentPriceType'] = undefined;

/**
 * This is applicable only for promotions
 * @member {Date} effectiveDate
 */
Pricing.prototype['effectiveDate'] = undefined;

/**
 * This is applicable only for promotions
 * @member {Date} expirationDate
 */
Pricing.prototype['expirationDate'] = undefined;

/**
 * Represent promo placement. This is applicable only for promotions
 * @member {module:model/Pricing.PriceDisplayCodesEnum} priceDisplayCodes
 */
Pricing.prototype['priceDisplayCodes'] = undefined;

/**
 * This is applicable only for promotions
 * @member {module:model/Pricing.ProcessModeEnum} processMode
 */
Pricing.prototype['processMode'] = undefined;

/**
 * This is applicable only for promotions
 * @member {String} promoId
 */
Pricing.prototype['promoId'] = undefined;





/**
 * Allowed values for the <code>comparisonPriceType</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['ComparisonPriceTypeEnum'] = {

    /**
     * value: "BASE"
     * @const
     */
    "BASE": "BASE"
};


/**
 * Allowed values for the <code>currentPriceType</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['CurrentPriceTypeEnum'] = {

    /**
     * value: "BASE"
     * @const
     */
    "BASE": "BASE",

    /**
     * value: "REDUCED"
     * @const
     */
    "REDUCED": "REDUCED",

    /**
     * value: "CLEARANCE"
     * @const
     */
    "CLEARANCE": "CLEARANCE"
};


/**
 * Allowed values for the <code>priceDisplayCodes</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['PriceDisplayCodesEnum'] = {

    /**
     * value: "CART"
     * @const
     */
    "CART": "CART",

    /**
     * value: "CHECKOUT"
     * @const
     */
    "CHECKOUT": "CHECKOUT"
};


/**
 * Allowed values for the <code>processMode</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['ProcessModeEnum'] = {

    /**
     * value: "UPSERT"
     * @const
     */
    "UPSERT": "UPSERT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};



export default Pricing;

