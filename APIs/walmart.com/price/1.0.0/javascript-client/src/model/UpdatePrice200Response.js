/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdatePrice200ResponseErrorsInner from './UpdatePrice200ResponseErrorsInner';

/**
 * The UpdatePrice200Response model module.
 * @module model/UpdatePrice200Response
 * @version 1.0.0
 */
class UpdatePrice200Response {
    /**
     * Constructs a new <code>UpdatePrice200Response</code>.
     * @alias module:model/UpdatePrice200Response
     */
    constructor() { 
        
        UpdatePrice200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatePrice200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePrice200Response} obj Optional instance to populate.
     * @return {module:model/UpdatePrice200Response} The populated <code>UpdatePrice200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePrice200Response();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [UpdatePrice200ResponseErrorsInner]);
            }
            if (data.hasOwnProperty('mart')) {
                obj['mart'] = ApiClient.convertToType(data['mart'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePrice200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePrice200Response</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                UpdatePrice200ResponseErrorsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mart'] && !(typeof data['mart'] === 'string' || data['mart'] instanceof String)) {
            throw new Error("Expected the field `mart` to be a primitive type in the JSON string but got " + data['mart']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/UpdatePrice200ResponseErrorsInner>} errors
 */
UpdatePrice200Response.prototype['errors'] = undefined;

/**
 * Marketplace name. Example: Walmart-US
 * @member {String} mart
 */
UpdatePrice200Response.prototype['mart'] = undefined;

/**
 * A message of acknowledgement for a price update
 * @member {String} message
 */
UpdatePrice200Response.prototype['message'] = undefined;

/**
 * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
 * @member {String} sku
 */
UpdatePrice200Response.prototype['sku'] = undefined;

/**
 * @member {Number} statusCode
 */
UpdatePrice200Response.prototype['statusCode'] = undefined;






export default UpdatePrice200Response;

