/**
 * Price Management
 * The price is a fundamental building block for your listing on Walmart.com. You can use the price management APIs to set up and manage the price for a given item
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateStrategy200Response from '../model/CreateStrategy200Response';
import CreateStrategyRequest from '../model/CreateStrategyRequest';
import DeleteStrategy200Response from '../model/DeleteStrategy200Response';
import GetRepricerFeed200Response from '../model/GetRepricerFeed200Response';
import GetRepricerFeedRequest from '../model/GetRepricerFeedRequest';
import GetStrategies200Response from '../model/GetStrategies200Response';
import OptCapProgramInPrice200Response from '../model/OptCapProgramInPrice200Response';
import OptCapProgramInPriceRequest from '../model/OptCapProgramInPriceRequest';
import PriceBulkUploads200Response from '../model/PriceBulkUploads200Response';
import UpdatePrice200Response from '../model/UpdatePrice200Response';
import UpdatePriceRequest from '../model/UpdatePriceRequest';

/**
* Prices service.
* @module api/PricesApi
* @version 1.0.0
*/
export default class PricesApi {

    /**
    * Constructs a new PricesApi. 
    * @alias module:api/PricesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStrategy operation.
     * @callback module:api/PricesApi~createStrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStrategy200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Repricer Strategy
     * Creates a new strategy for the seller
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {module:model/CreateStrategyRequest} createStrategyRequest The request body will have the strategy related information
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~createStrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStrategy200Response}
     */
    createStrategy(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, createStrategyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStrategyRequest;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling createStrategy");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling createStrategy");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling createStrategy");
      }
      // verify the required parameter 'createStrategyRequest' is set
      if (createStrategyRequest === undefined || createStrategyRequest === null) {
        throw new Error("Missing the required parameter 'createStrategyRequest' when calling createStrategy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStrategy200Response;
      return this.apiClient.callApi(
        '/v3/repricer/strategy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStrategy operation.
     * @callback module:api/PricesApi~deleteStrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteStrategy200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Repricer Strategy
     * Deletes the strategy
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {String} strategyCollectionId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~deleteStrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteStrategy200Response}
     */
    deleteStrategy(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling deleteStrategy");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling deleteStrategy");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling deleteStrategy");
      }
      // verify the required parameter 'strategyCollectionId' is set
      if (strategyCollectionId === undefined || strategyCollectionId === null) {
        throw new Error("Missing the required parameter 'strategyCollectionId' when calling deleteStrategy");
      }

      let pathParams = {
        'strategyCollectionId': strategyCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStrategy200Response;
      return this.apiClient.callApi(
        '/v3/repricer/strategy/{strategyCollectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepricerFeed operation.
     * @callback module:api/PricesApi~getRepricerFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRepricerFeed200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign/Unassign items to/from Repricer Strategy
     * Add/Remove one or more items from a strategy
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {module:model/GetRepricerFeedRequest} getRepricerFeedRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~getRepricerFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRepricerFeed200Response}
     */
    getRepricerFeed(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, getRepricerFeedRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRepricerFeedRequest;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getRepricerFeed");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getRepricerFeed");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getRepricerFeed");
      }
      // verify the required parameter 'getRepricerFeedRequest' is set
      if (getRepricerFeedRequest === undefined || getRepricerFeedRequest === null) {
        throw new Error("Missing the required parameter 'getRepricerFeedRequest' when calling getRepricerFeed");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRepricerFeed200Response;
      return this.apiClient.callApi(
        '/v3/repricerFeeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStrategies operation.
     * @callback module:api/PricesApi~getStrategiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStrategies200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Repricer Strategies
     * Get the list of strategies
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~getStrategiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStrategies200Response}
     */
    getStrategies(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling getStrategies");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getStrategies");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling getStrategies");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStrategies200Response;
      return this.apiClient.callApi(
        '/v3/repricer/strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optCapProgramInPrice operation.
     * @callback module:api/PricesApi~optCapProgramInPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptCapProgramInPrice200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set up CAP SKU All
     * This API helps Sellers to completely opt-in or opt-out from CAP program.  If the subsidyEnrolled value = \"true\", the Seller enrolls in the CAP program. All eligible SKUs (current and future) are by default opt-in. Seller should use the SKU opt-in/opt-out API to opt-out individual items.  If the subsidyEnrolled value = \"false\", the Seller stops participating in the CAP program and all eligible SKUs (current and future) are opt-out of the CAP program.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {module:model/OptCapProgramInPriceRequest} optCapProgramInPriceRequest Request fields
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~optCapProgramInPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptCapProgramInPrice200Response}
     */
    optCapProgramInPrice(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, optCapProgramInPriceRequest, opts, callback) {
      opts = opts || {};
      let postBody = optCapProgramInPriceRequest;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling optCapProgramInPrice");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling optCapProgramInPrice");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling optCapProgramInPrice");
      }
      // verify the required parameter 'optCapProgramInPriceRequest' is set
      if (optCapProgramInPriceRequest === undefined || optCapProgramInPriceRequest === null) {
        throw new Error("Missing the required parameter 'optCapProgramInPriceRequest' when calling optCapProgramInPrice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OptCapProgramInPrice200Response;
      return this.apiClient.callApi(
        '/v3/cppreference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceBulkUploads operation.
     * @callback module:api/PricesApi~priceBulkUploadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PriceBulkUploads200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update bulk prices (Multiple)
     * Updates prices in bulk.  In one Feed you can update up to 10,000 items in bulk. To ensure optimal Feed processing time, we recommend sending no more than 1000 items in one Feed and keeping the Feed sizes below 10 MB.  The price sequence guarantee is observed by the bulk price update functionality, subject to the following rules:  The timestamp used to determine precedence is passed in the request headers. All price updates in the feed are considered to have the same timestamp. The timestamp in the XML file is used only for auditing. You can send a single SKU multiple times in one Feed. If a SKU is repeated in a Feed, the price will be set for that SKU on Walmart.com, but there is no guarantee as to which SKU's price within that feed will be used. This API should be used in preference to the update a price. It should be called no sooner than 24 hours after a new item is set up and a wpid (Walmart Part ID) is available. Thereafter, the bulk price update has an service level agreement (SLA) of 15 minutes.  After the update is submitted, wait for at least five minutes before verifying whether the bulk price update was successful. Individual SKU price update success or failure is only available after the entire feed is processed.  If a SKU's price update fails (for example, multiple price updates were sent for the same SKU in a single feed), an error will be returned.
     * @param {module:model/String} feedType The feed Type
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {File} file Feed file to upload
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~priceBulkUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PriceBulkUploads200Response}
     */
    priceBulkUploads(feedType, WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedType' is set
      if (feedType === undefined || feedType === null) {
        throw new Error("Missing the required parameter 'feedType' when calling priceBulkUploads");
      }
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling priceBulkUploads");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling priceBulkUploads");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling priceBulkUploads");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling priceBulkUploads");
      }

      let pathParams = {
      };
      let queryParams = {
        'feedType': feedType
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PriceBulkUploads200Response;
      return this.apiClient.callApi(
        '/v3/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePrice operation.
     * @callback module:api/PricesApi~updatePriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePrice200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a price
     * Updates the regular price for a given item.
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {module:model/UpdatePriceRequest} updatePriceRequest The request body consists of a Feed file attached to the request.
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~updatePriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePrice200Response}
     */
    updatePrice(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, updatePriceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePriceRequest;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updatePrice");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updatePrice");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling updatePrice");
      }
      // verify the required parameter 'updatePriceRequest' is set
      if (updatePriceRequest === undefined || updatePriceRequest === null) {
        throw new Error("Missing the required parameter 'updatePriceRequest' when calling updatePrice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = UpdatePrice200Response;
      return this.apiClient.callApi(
        '/v3/price', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStrategy operation.
     * @callback module:api/PricesApi~updateStrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStrategy200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Repricer Strategy
     * Updates the existing strategy
     * @param {String} WM_SEC_ACCESS_TOKEN The access token retrieved in the Token API call
     * @param {String} WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @param {String} WM_SVC_NAME Walmart Service Name
     * @param {String} strategyCollectionId Automatically added
     * @param {module:model/CreateStrategyRequest} createStrategyRequest The request body will have the strategy related information
     * @param {Object} opts Optional parameters
     * @param {String} [WM_CONSUMER_CHANNEL_TYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @param {module:api/PricesApi~updateStrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStrategy200Response}
     */
    updateStrategy(WM_SEC_ACCESS_TOKEN, WM_QOS_CORRELATION_ID, WM_SVC_NAME, strategyCollectionId, createStrategyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStrategyRequest;
      // verify the required parameter 'WM_SEC_ACCESS_TOKEN' is set
      if (WM_SEC_ACCESS_TOKEN === undefined || WM_SEC_ACCESS_TOKEN === null) {
        throw new Error("Missing the required parameter 'WM_SEC_ACCESS_TOKEN' when calling updateStrategy");
      }
      // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
      if (WM_QOS_CORRELATION_ID === undefined || WM_QOS_CORRELATION_ID === null) {
        throw new Error("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling updateStrategy");
      }
      // verify the required parameter 'WM_SVC_NAME' is set
      if (WM_SVC_NAME === undefined || WM_SVC_NAME === null) {
        throw new Error("Missing the required parameter 'WM_SVC_NAME' when calling updateStrategy");
      }
      // verify the required parameter 'strategyCollectionId' is set
      if (strategyCollectionId === undefined || strategyCollectionId === null) {
        throw new Error("Missing the required parameter 'strategyCollectionId' when calling updateStrategy");
      }
      // verify the required parameter 'createStrategyRequest' is set
      if (createStrategyRequest === undefined || createStrategyRequest === null) {
        throw new Error("Missing the required parameter 'createStrategyRequest' when calling updateStrategy");
      }

      let pathParams = {
        'strategyCollectionId': strategyCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'WM_SEC.ACCESS_TOKEN': WM_SEC_ACCESS_TOKEN,
        'WM_CONSUMER.CHANNEL.TYPE': opts['WM_CONSUMER_CHANNEL_TYPE'],
        'WM_QOS.CORRELATION_ID': WM_QOS_CORRELATION_ID,
        'WM_SVC.NAME': WM_SVC_NAME
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStrategy200Response;
      return this.apiClient.callApi(
        '/v3/repricer/strategy/{strategyCollectionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
