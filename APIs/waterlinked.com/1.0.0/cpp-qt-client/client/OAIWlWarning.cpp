/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWlWarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWlWarning::OAIWlWarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWlWarning::OAIWlWarning() {
    this->initializeModel();
}

OAIWlWarning::~OAIWlWarning() {}

void OAIWlWarning::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIWlWarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWlWarning::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIWlWarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWlWarning::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIWlWarning::getId() const {
    return m_id;
}
void OAIWlWarning::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWlWarning::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWlWarning::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWlWarning::getMessage() const {
    return m_message;
}
void OAIWlWarning::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWlWarning::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWlWarning::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWlWarning::getSeverity() const {
    return m_severity;
}
void OAIWlWarning::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIWlWarning::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIWlWarning::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIWlWarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWlWarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_message_isValid && m_severity_isValid && true;
}

} // namespace OpenAPI
