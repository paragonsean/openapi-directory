/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPoiApi_H
#define OAI_OAIPoiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatePoiPayload.h"
#include "OAIError.h"
#include "OAIUpdatePoiPayload.h"
#include "OAIWaterlinkedPoi.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPoiApi : public QObject {
    Q_OBJECT

public:
    OAIPoiApi(const int timeOut = 0);
    ~OAIPoiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payload OAICreatePoiPayload [required]
    */
    virtual void poiCreate(const OAICreatePoiPayload &payload);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void poiDelete(const qint32 &id);


    virtual void poiList();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void poiShow(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  payload OAIUpdatePoiPayload [required]
    */
    virtual void poiUpdate(const qint32 &id, const OAIUpdatePoiPayload &payload);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void poiCreateCallback(OAIHttpRequestWorker *worker);
    void poiDeleteCallback(OAIHttpRequestWorker *worker);
    void poiListCallback(OAIHttpRequestWorker *worker);
    void poiShowCallback(OAIHttpRequestWorker *worker);
    void poiUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void poiCreateSignal();
    void poiDeleteSignal();
    void poiListSignal(QList<OAIWaterlinkedPoi> summary);
    void poiShowSignal(OAIWaterlinkedPoi summary);
    void poiUpdateSignal();


    void poiCreateSignalFull(OAIHttpRequestWorker *worker);
    void poiDeleteSignalFull(OAIHttpRequestWorker *worker);
    void poiListSignalFull(OAIHttpRequestWorker *worker, QList<OAIWaterlinkedPoi> summary);
    void poiShowSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedPoi summary);
    void poiUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use poiCreateSignalError() instead")
    void poiCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poiCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiDeleteSignalError() instead")
    void poiDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poiDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiListSignalError() instead")
    void poiListSignalE(QList<OAIWaterlinkedPoi> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poiListSignalError(QList<OAIWaterlinkedPoi> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiShowSignalError() instead")
    void poiShowSignalE(OAIWaterlinkedPoi summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poiShowSignalError(OAIWaterlinkedPoi summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiUpdateSignalError() instead")
    void poiUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poiUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use poiCreateSignalErrorFull() instead")
    void poiCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poiCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiDeleteSignalErrorFull() instead")
    void poiDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poiDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiListSignalErrorFull() instead")
    void poiListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poiListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiShowSignalErrorFull() instead")
    void poiShowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poiShowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poiUpdateSignalErrorFull() instead")
    void poiUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poiUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
