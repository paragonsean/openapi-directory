/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetVehicleIMUExternalPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetVehicleIMUExternalPayload::OAISetVehicleIMUExternalPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetVehicleIMUExternalPayload::OAISetVehicleIMUExternalPayload() {
    this->initializeModel();
}

OAISetVehicleIMUExternalPayload::~OAISetVehicleIMUExternalPayload() {}

void OAISetVehicleIMUExternalPayload::initializeModel() {

    m_pitch_isSet = false;
    m_pitch_isValid = false;

    m_roll_isSet = false;
    m_roll_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_yaw_isSet = false;
    m_yaw_isValid = false;

    m_z_isSet = false;
    m_z_isValid = false;
}

void OAISetVehicleIMUExternalPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetVehicleIMUExternalPayload::fromJsonObject(QJsonObject json) {

    m_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitch, json[QString("pitch")]);
    m_pitch_isSet = !json[QString("pitch")].isNull() && m_pitch_isValid;

    m_roll_isValid = ::OpenAPI::fromJsonValue(m_roll, json[QString("roll")]);
    m_roll_isSet = !json[QString("roll")].isNull() && m_roll_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_yaw_isValid = ::OpenAPI::fromJsonValue(m_yaw, json[QString("yaw")]);
    m_yaw_isSet = !json[QString("yaw")].isNull() && m_yaw_isValid;

    m_z_isValid = ::OpenAPI::fromJsonValue(m_z, json[QString("z")]);
    m_z_isSet = !json[QString("z")].isNull() && m_z_isValid;
}

QString OAISetVehicleIMUExternalPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetVehicleIMUExternalPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_pitch_isSet) {
        obj.insert(QString("pitch"), ::OpenAPI::toJsonValue(m_pitch));
    }
    if (m_roll_isSet) {
        obj.insert(QString("roll"), ::OpenAPI::toJsonValue(m_roll));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_yaw_isSet) {
        obj.insert(QString("yaw"), ::OpenAPI::toJsonValue(m_yaw));
    }
    if (m_z_isSet) {
        obj.insert(QString("z"), ::OpenAPI::toJsonValue(m_z));
    }
    return obj;
}

double OAISetVehicleIMUExternalPayload::getPitch() const {
    return m_pitch;
}
void OAISetVehicleIMUExternalPayload::setPitch(const double &pitch) {
    m_pitch = pitch;
    m_pitch_isSet = true;
}

bool OAISetVehicleIMUExternalPayload::is_pitch_Set() const{
    return m_pitch_isSet;
}

bool OAISetVehicleIMUExternalPayload::is_pitch_Valid() const{
    return m_pitch_isValid;
}

double OAISetVehicleIMUExternalPayload::getRoll() const {
    return m_roll;
}
void OAISetVehicleIMUExternalPayload::setRoll(const double &roll) {
    m_roll = roll;
    m_roll_isSet = true;
}

bool OAISetVehicleIMUExternalPayload::is_roll_Set() const{
    return m_roll_isSet;
}

bool OAISetVehicleIMUExternalPayload::is_roll_Valid() const{
    return m_roll_isValid;
}

double OAISetVehicleIMUExternalPayload::getX() const {
    return m_x;
}
void OAISetVehicleIMUExternalPayload::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAISetVehicleIMUExternalPayload::is_x_Set() const{
    return m_x_isSet;
}

bool OAISetVehicleIMUExternalPayload::is_x_Valid() const{
    return m_x_isValid;
}

double OAISetVehicleIMUExternalPayload::getY() const {
    return m_y;
}
void OAISetVehicleIMUExternalPayload::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAISetVehicleIMUExternalPayload::is_y_Set() const{
    return m_y_isSet;
}

bool OAISetVehicleIMUExternalPayload::is_y_Valid() const{
    return m_y_isValid;
}

double OAISetVehicleIMUExternalPayload::getYaw() const {
    return m_yaw;
}
void OAISetVehicleIMUExternalPayload::setYaw(const double &yaw) {
    m_yaw = yaw;
    m_yaw_isSet = true;
}

bool OAISetVehicleIMUExternalPayload::is_yaw_Set() const{
    return m_yaw_isSet;
}

bool OAISetVehicleIMUExternalPayload::is_yaw_Valid() const{
    return m_yaw_isValid;
}

double OAISetVehicleIMUExternalPayload::getZ() const {
    return m_z;
}
void OAISetVehicleIMUExternalPayload::setZ(const double &z) {
    m_z = z;
    m_z_isSet = true;
}

bool OAISetVehicleIMUExternalPayload::is_z_Set() const{
    return m_z_isSet;
}

bool OAISetVehicleIMUExternalPayload::is_z_Valid() const{
    return m_z_isValid;
}

bool OAISetVehicleIMUExternalPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetVehicleIMUExternalPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pitch_isValid && m_roll_isValid && m_x_isValid && m_y_isValid && m_yaw_isValid && m_z_isValid && true;
}

} // namespace OpenAPI
