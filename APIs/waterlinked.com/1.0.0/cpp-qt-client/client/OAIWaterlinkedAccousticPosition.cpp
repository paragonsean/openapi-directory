/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterlinkedAccousticPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterlinkedAccousticPosition::OAIWaterlinkedAccousticPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterlinkedAccousticPosition::OAIWaterlinkedAccousticPosition() {
    this->initializeModel();
}

OAIWaterlinkedAccousticPosition::~OAIWaterlinkedAccousticPosition() {}

void OAIWaterlinkedAccousticPosition::initializeModel() {

    m_position_valid_isSet = false;
    m_position_valid_isValid = false;

    m_receiver_distance_isSet = false;
    m_receiver_distance_isValid = false;

    m_receiver_nsd_isSet = false;
    m_receiver_nsd_isValid = false;

    m_receiver_rssi_isSet = false;
    m_receiver_rssi_isValid = false;

    m_receiver_valid_isSet = false;
    m_receiver_valid_isValid = false;

    m_std_isSet = false;
    m_std_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_z_isSet = false;
    m_z_isValid = false;
}

void OAIWaterlinkedAccousticPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterlinkedAccousticPosition::fromJsonObject(QJsonObject json) {

    m_position_valid_isValid = ::OpenAPI::fromJsonValue(m_position_valid, json[QString("position_valid")]);
    m_position_valid_isSet = !json[QString("position_valid")].isNull() && m_position_valid_isValid;

    m_receiver_distance_isValid = ::OpenAPI::fromJsonValue(m_receiver_distance, json[QString("receiver_distance")]);
    m_receiver_distance_isSet = !json[QString("receiver_distance")].isNull() && m_receiver_distance_isValid;

    m_receiver_nsd_isValid = ::OpenAPI::fromJsonValue(m_receiver_nsd, json[QString("receiver_nsd")]);
    m_receiver_nsd_isSet = !json[QString("receiver_nsd")].isNull() && m_receiver_nsd_isValid;

    m_receiver_rssi_isValid = ::OpenAPI::fromJsonValue(m_receiver_rssi, json[QString("receiver_rssi")]);
    m_receiver_rssi_isSet = !json[QString("receiver_rssi")].isNull() && m_receiver_rssi_isValid;

    m_receiver_valid_isValid = ::OpenAPI::fromJsonValue(m_receiver_valid, json[QString("receiver_valid")]);
    m_receiver_valid_isSet = !json[QString("receiver_valid")].isNull() && m_receiver_valid_isValid;

    m_std_isValid = ::OpenAPI::fromJsonValue(m_std, json[QString("std")]);
    m_std_isSet = !json[QString("std")].isNull() && m_std_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_z_isValid = ::OpenAPI::fromJsonValue(m_z, json[QString("z")]);
    m_z_isSet = !json[QString("z")].isNull() && m_z_isValid;
}

QString OAIWaterlinkedAccousticPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterlinkedAccousticPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_position_valid_isSet) {
        obj.insert(QString("position_valid"), ::OpenAPI::toJsonValue(m_position_valid));
    }
    if (m_receiver_distance.size() > 0) {
        obj.insert(QString("receiver_distance"), ::OpenAPI::toJsonValue(m_receiver_distance));
    }
    if (m_receiver_nsd.size() > 0) {
        obj.insert(QString("receiver_nsd"), ::OpenAPI::toJsonValue(m_receiver_nsd));
    }
    if (m_receiver_rssi.size() > 0) {
        obj.insert(QString("receiver_rssi"), ::OpenAPI::toJsonValue(m_receiver_rssi));
    }
    if (m_receiver_valid.size() > 0) {
        obj.insert(QString("receiver_valid"), ::OpenAPI::toJsonValue(m_receiver_valid));
    }
    if (m_std_isSet) {
        obj.insert(QString("std"), ::OpenAPI::toJsonValue(m_std));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_z_isSet) {
        obj.insert(QString("z"), ::OpenAPI::toJsonValue(m_z));
    }
    return obj;
}

bool OAIWaterlinkedAccousticPosition::isPositionValid() const {
    return m_position_valid;
}
void OAIWaterlinkedAccousticPosition::setPositionValid(const bool &position_valid) {
    m_position_valid = position_valid;
    m_position_valid_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_position_valid_Set() const{
    return m_position_valid_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_position_valid_Valid() const{
    return m_position_valid_isValid;
}

QList<double> OAIWaterlinkedAccousticPosition::getReceiverDistance() const {
    return m_receiver_distance;
}
void OAIWaterlinkedAccousticPosition::setReceiverDistance(const QList<double> &receiver_distance) {
    m_receiver_distance = receiver_distance;
    m_receiver_distance_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_distance_Set() const{
    return m_receiver_distance_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_distance_Valid() const{
    return m_receiver_distance_isValid;
}

QList<double> OAIWaterlinkedAccousticPosition::getReceiverNsd() const {
    return m_receiver_nsd;
}
void OAIWaterlinkedAccousticPosition::setReceiverNsd(const QList<double> &receiver_nsd) {
    m_receiver_nsd = receiver_nsd;
    m_receiver_nsd_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_nsd_Set() const{
    return m_receiver_nsd_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_nsd_Valid() const{
    return m_receiver_nsd_isValid;
}

QList<double> OAIWaterlinkedAccousticPosition::getReceiverRssi() const {
    return m_receiver_rssi;
}
void OAIWaterlinkedAccousticPosition::setReceiverRssi(const QList<double> &receiver_rssi) {
    m_receiver_rssi = receiver_rssi;
    m_receiver_rssi_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_rssi_Set() const{
    return m_receiver_rssi_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_rssi_Valid() const{
    return m_receiver_rssi_isValid;
}

QList<double> OAIWaterlinkedAccousticPosition::getReceiverValid() const {
    return m_receiver_valid;
}
void OAIWaterlinkedAccousticPosition::setReceiverValid(const QList<double> &receiver_valid) {
    m_receiver_valid = receiver_valid;
    m_receiver_valid_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_valid_Set() const{
    return m_receiver_valid_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_receiver_valid_Valid() const{
    return m_receiver_valid_isValid;
}

double OAIWaterlinkedAccousticPosition::getStd() const {
    return m_std;
}
void OAIWaterlinkedAccousticPosition::setStd(const double &std) {
    m_std = std;
    m_std_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_std_Set() const{
    return m_std_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_std_Valid() const{
    return m_std_isValid;
}

double OAIWaterlinkedAccousticPosition::getX() const {
    return m_x;
}
void OAIWaterlinkedAccousticPosition::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_x_Set() const{
    return m_x_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_x_Valid() const{
    return m_x_isValid;
}

double OAIWaterlinkedAccousticPosition::getY() const {
    return m_y;
}
void OAIWaterlinkedAccousticPosition::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_y_Set() const{
    return m_y_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_y_Valid() const{
    return m_y_isValid;
}

double OAIWaterlinkedAccousticPosition::getZ() const {
    return m_z;
}
void OAIWaterlinkedAccousticPosition::setZ(const double &z) {
    m_z = z;
    m_z_isSet = true;
}

bool OAIWaterlinkedAccousticPosition::is_z_Set() const{
    return m_z_isSet;
}

bool OAIWaterlinkedAccousticPosition::is_z_Valid() const{
    return m_z_isValid;
}

bool OAIWaterlinkedAccousticPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_distance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_nsd.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_rssi.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_valid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterlinkedAccousticPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_position_valid_isValid && m_receiver_distance_isValid && m_receiver_nsd_isValid && m_receiver_rssi_isValid && m_receiver_valid_isValid && m_std_isValid && m_x_isValid && m_y_isValid && m_z_isValid && true;
}

} // namespace OpenAPI
