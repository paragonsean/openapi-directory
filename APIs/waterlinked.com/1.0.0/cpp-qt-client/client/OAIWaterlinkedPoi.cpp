/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterlinkedPoi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterlinkedPoi::OAIWaterlinkedPoi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterlinkedPoi::OAIWaterlinkedPoi() {
    this->initializeModel();
}

OAIWaterlinkedPoi::~OAIWaterlinkedPoi() {}

void OAIWaterlinkedPoi::initializeModel() {

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIWaterlinkedPoi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterlinkedPoi::fromJsonObject(QJsonObject json) {

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIWaterlinkedPoi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterlinkedPoi::asJsonObject() const {
    QJsonObject obj;
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

double OAIWaterlinkedPoi::getDepth() const {
    return m_depth;
}
void OAIWaterlinkedPoi::setDepth(const double &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAIWaterlinkedPoi::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAIWaterlinkedPoi::is_depth_Valid() const{
    return m_depth_isValid;
}

QString OAIWaterlinkedPoi::getIcon() const {
    return m_icon;
}
void OAIWaterlinkedPoi::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIWaterlinkedPoi::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIWaterlinkedPoi::is_icon_Valid() const{
    return m_icon_isValid;
}

qint64 OAIWaterlinkedPoi::getId() const {
    return m_id;
}
void OAIWaterlinkedPoi::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWaterlinkedPoi::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWaterlinkedPoi::is_id_Valid() const{
    return m_id_isValid;
}

double OAIWaterlinkedPoi::getLat() const {
    return m_lat;
}
void OAIWaterlinkedPoi::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIWaterlinkedPoi::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIWaterlinkedPoi::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIWaterlinkedPoi::getLng() const {
    return m_lng;
}
void OAIWaterlinkedPoi::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIWaterlinkedPoi::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIWaterlinkedPoi::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIWaterlinkedPoi::getName() const {
    return m_name;
}
void OAIWaterlinkedPoi::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWaterlinkedPoi::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWaterlinkedPoi::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIWaterlinkedPoi::isVisible() const {
    return m_visible;
}
void OAIWaterlinkedPoi::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIWaterlinkedPoi::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIWaterlinkedPoi::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIWaterlinkedPoi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterlinkedPoi::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_depth_isValid && m_icon_isValid && m_lat_isValid && m_lng_isValid && m_name_isValid && m_visible_isValid && true;
}

} // namespace OpenAPI
