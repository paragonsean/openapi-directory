/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetNorthImuPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetNorthImuPayload::OAISetNorthImuPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetNorthImuPayload::OAISetNorthImuPayload() {
    this->initializeModel();
}

OAISetNorthImuPayload::~OAISetNorthImuPayload() {}

void OAISetNorthImuPayload::initializeModel() {

    m_heading_isSet = false;
    m_heading_isValid = false;
}

void OAISetNorthImuPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetNorthImuPayload::fromJsonObject(QJsonObject json) {

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;
}

QString OAISetNorthImuPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetNorthImuPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    return obj;
}

double OAISetNorthImuPayload::getHeading() const {
    return m_heading;
}
void OAISetNorthImuPayload::setHeading(const double &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAISetNorthImuPayload::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAISetNorthImuPayload::is_heading_Valid() const{
    return m_heading_isValid;
}

bool OAISetNorthImuPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetNorthImuPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_heading_isValid && true;
}

} // namespace OpenAPI
