/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterlinkedImu.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterlinkedImu::OAIWaterlinkedImu(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterlinkedImu::OAIWaterlinkedImu() {
    this->initializeModel();
}

OAIWaterlinkedImu::~OAIWaterlinkedImu() {}

void OAIWaterlinkedImu::initializeModel() {

    m_pitch_isSet = false;
    m_pitch_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_roll_isSet = false;
    m_roll_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_yaw_isSet = false;
    m_yaw_isValid = false;
}

void OAIWaterlinkedImu::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterlinkedImu::fromJsonObject(QJsonObject json) {

    m_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitch, json[QString("pitch")]);
    m_pitch_isSet = !json[QString("pitch")].isNull() && m_pitch_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_roll_isValid = ::OpenAPI::fromJsonValue(m_roll, json[QString("roll")]);
    m_roll_isSet = !json[QString("roll")].isNull() && m_roll_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_yaw_isValid = ::OpenAPI::fromJsonValue(m_yaw, json[QString("yaw")]);
    m_yaw_isSet = !json[QString("yaw")].isNull() && m_yaw_isValid;
}

QString OAIWaterlinkedImu::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterlinkedImu::asJsonObject() const {
    QJsonObject obj;
    if (m_pitch_isSet) {
        obj.insert(QString("pitch"), ::OpenAPI::toJsonValue(m_pitch));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_roll_isSet) {
        obj.insert(QString("roll"), ::OpenAPI::toJsonValue(m_roll));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_yaw_isSet) {
        obj.insert(QString("yaw"), ::OpenAPI::toJsonValue(m_yaw));
    }
    return obj;
}

double OAIWaterlinkedImu::getPitch() const {
    return m_pitch;
}
void OAIWaterlinkedImu::setPitch(const double &pitch) {
    m_pitch = pitch;
    m_pitch_isSet = true;
}

bool OAIWaterlinkedImu::is_pitch_Set() const{
    return m_pitch_isSet;
}

bool OAIWaterlinkedImu::is_pitch_Valid() const{
    return m_pitch_isValid;
}

qint32 OAIWaterlinkedImu::getProgress() const {
    return m_progress;
}
void OAIWaterlinkedImu::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIWaterlinkedImu::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIWaterlinkedImu::is_progress_Valid() const{
    return m_progress_isValid;
}

double OAIWaterlinkedImu::getRoll() const {
    return m_roll;
}
void OAIWaterlinkedImu::setRoll(const double &roll) {
    m_roll = roll;
    m_roll_isSet = true;
}

bool OAIWaterlinkedImu::is_roll_Set() const{
    return m_roll_isSet;
}

bool OAIWaterlinkedImu::is_roll_Valid() const{
    return m_roll_isValid;
}

qint32 OAIWaterlinkedImu::getState() const {
    return m_state;
}
void OAIWaterlinkedImu::setState(const qint32 &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWaterlinkedImu::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWaterlinkedImu::is_state_Valid() const{
    return m_state_isValid;
}

double OAIWaterlinkedImu::getYaw() const {
    return m_yaw;
}
void OAIWaterlinkedImu::setYaw(const double &yaw) {
    m_yaw = yaw;
    m_yaw_isSet = true;
}

bool OAIWaterlinkedImu::is_yaw_Set() const{
    return m_yaw_isSet;
}

bool OAIWaterlinkedImu::is_yaw_Valid() const{
    return m_yaw_isValid;
}

bool OAIWaterlinkedImu::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterlinkedImu::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pitch_isValid && m_progress_isValid && m_roll_isValid && m_state_isValid && m_yaw_isValid && true;
}

} // namespace OpenAPI
