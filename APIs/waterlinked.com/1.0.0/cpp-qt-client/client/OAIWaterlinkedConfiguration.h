/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaterlinkedConfiguration.h
 *
 * Configuration parameters (default view)
 */

#ifndef OAIWaterlinkedConfiguration_H
#define OAIWaterlinkedConfiguration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWaterlinkedConfiguration : public OAIObject {
public:
    OAIWaterlinkedConfiguration();
    OAIWaterlinkedConfiguration(QString json);
    ~OAIWaterlinkedConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAntennaEnabled() const;
    void setAntennaEnabled(const bool &antenna_enabled);
    bool is_antenna_enabled_Set() const;
    bool is_antenna_enabled_Valid() const;

    qint32 getChannel() const;
    void setChannel(const qint32 &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getCompass() const;
    void setCompass(const QString &compass);
    bool is_compass_Set() const;
    bool is_compass_Valid() const;

    QString getEnvironment() const;
    void setEnvironment(const QString &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    bool isExternalPpsEnabled() const;
    void setExternalPpsEnabled(const bool &external_pps_enabled);
    bool is_external_pps_enabled_Set() const;
    bool is_external_pps_enabled_Valid() const;

    QString getGps() const;
    void setGps(const QString &gps);
    bool is_gps_Set() const;
    bool is_gps_Valid() const;

    bool isImuVehicleEnabled() const;
    void setImuVehicleEnabled(const bool &imu_vehicle_enabled);
    bool is_imu_vehicle_enabled_Set() const;
    bool is_imu_vehicle_enabled_Valid() const;

    QString getLocatorType() const;
    void setLocatorType(const QString &locator_type);
    bool is_locator_type_Set() const;
    bool is_locator_type_Valid() const;

    double getRangeMaxX() const;
    void setRangeMaxX(const double &range_max_x);
    bool is_range_max_x_Set() const;
    bool is_range_max_x_Valid() const;

    double getRangeMaxY() const;
    void setRangeMaxY(const double &range_max_y);
    bool is_range_max_y_Set() const;
    bool is_range_max_y_Valid() const;

    double getRangeMaxZ() const;
    void setRangeMaxZ(const double &range_max_z);
    bool is_range_max_z_Set() const;
    bool is_range_max_z_Valid() const;

    double getRangeMinX() const;
    void setRangeMinX(const double &range_min_x);
    bool is_range_min_x_Set() const;
    bool is_range_min_x_Valid() const;

    double getRangeMinY() const;
    void setRangeMinY(const double &range_min_y);
    bool is_range_min_y_Set() const;
    bool is_range_min_y_Valid() const;

    double getSearchDirection() const;
    void setSearchDirection(const double &search_direction);
    bool is_search_direction_Set() const;
    bool is_search_direction_Valid() const;

    double getSearchRadius() const;
    void setSearchRadius(const double &search_radius);
    bool is_search_radius_Set() const;
    bool is_search_radius_Valid() const;

    double getSearchSector() const;
    void setSearchSector(const double &search_sector);
    bool is_search_sector_Set() const;
    bool is_search_sector_Valid() const;

    qint32 getSpeedOfSound() const;
    void setSpeedOfSound(const qint32 &speed_of_sound);
    bool is_speed_of_sound_Set() const;
    bool is_speed_of_sound_Valid() const;

    double getStaticLat() const;
    void setStaticLat(const double &static_lat);
    bool is_static_lat_Set() const;
    bool is_static_lat_Valid() const;

    double getStaticLon() const;
    void setStaticLon(const double &static_lon);
    bool is_static_lon_Set() const;
    bool is_static_lon_Valid() const;

    double getStaticOrientation() const;
    void setStaticOrientation(const double &static_orientation);
    bool is_static_orientation_Set() const;
    bool is_static_orientation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_antenna_enabled;
    bool m_antenna_enabled_isSet;
    bool m_antenna_enabled_isValid;

    qint32 m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_compass;
    bool m_compass_isSet;
    bool m_compass_isValid;

    QString m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    bool m_external_pps_enabled;
    bool m_external_pps_enabled_isSet;
    bool m_external_pps_enabled_isValid;

    QString m_gps;
    bool m_gps_isSet;
    bool m_gps_isValid;

    bool m_imu_vehicle_enabled;
    bool m_imu_vehicle_enabled_isSet;
    bool m_imu_vehicle_enabled_isValid;

    QString m_locator_type;
    bool m_locator_type_isSet;
    bool m_locator_type_isValid;

    double m_range_max_x;
    bool m_range_max_x_isSet;
    bool m_range_max_x_isValid;

    double m_range_max_y;
    bool m_range_max_y_isSet;
    bool m_range_max_y_isValid;

    double m_range_max_z;
    bool m_range_max_z_isSet;
    bool m_range_max_z_isValid;

    double m_range_min_x;
    bool m_range_min_x_isSet;
    bool m_range_min_x_isValid;

    double m_range_min_y;
    bool m_range_min_y_isSet;
    bool m_range_min_y_isValid;

    double m_search_direction;
    bool m_search_direction_isSet;
    bool m_search_direction_isValid;

    double m_search_radius;
    bool m_search_radius_isSet;
    bool m_search_radius_isValid;

    double m_search_sector;
    bool m_search_sector_isSet;
    bool m_search_sector_isValid;

    qint32 m_speed_of_sound;
    bool m_speed_of_sound_isSet;
    bool m_speed_of_sound_isValid;

    double m_static_lat;
    bool m_static_lat_isSet;
    bool m_static_lat_isValid;

    double m_static_lon;
    bool m_static_lon_isSet;
    bool m_static_lon_isValid;

    double m_static_orientation;
    bool m_static_orientation_isSet;
    bool m_static_orientation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaterlinkedConfiguration)

#endif // OAIWaterlinkedConfiguration_H
