/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISetMasterExternalPayload.h
 *
 * Global master position from external source
 */

#ifndef OAISetMasterExternalPayload_H
#define OAISetMasterExternalPayload_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISetMasterExternalPayload : public OAIObject {
public:
    OAISetMasterExternalPayload();
    OAISetMasterExternalPayload(QString json);
    ~OAISetMasterExternalPayload() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCog() const;
    void setCog(const double &cog);
    bool is_cog_Set() const;
    bool is_cog_Valid() const;

    double getFixQuality() const;
    void setFixQuality(const double &fix_quality);
    bool is_fix_quality_Set() const;
    bool is_fix_quality_Valid() const;

    double getHdop() const;
    void setHdop(const double &hdop);
    bool is_hdop_Set() const;
    bool is_hdop_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getLon() const;
    void setLon(const double &lon);
    bool is_lon_Set() const;
    bool is_lon_Valid() const;

    double getNumsats() const;
    void setNumsats(const double &numsats);
    bool is_numsats_Set() const;
    bool is_numsats_Valid() const;

    double getOrientation() const;
    void setOrientation(const double &orientation);
    bool is_orientation_Set() const;
    bool is_orientation_Valid() const;

    double getSog() const;
    void setSog(const double &sog);
    bool is_sog_Set() const;
    bool is_sog_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cog;
    bool m_cog_isSet;
    bool m_cog_isValid;

    double m_fix_quality;
    bool m_fix_quality_isSet;
    bool m_fix_quality_isValid;

    double m_hdop;
    bool m_hdop_isSet;
    bool m_hdop_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_lon;
    bool m_lon_isSet;
    bool m_lon_isValid;

    double m_numsats;
    bool m_numsats_isSet;
    bool m_numsats_isValid;

    double m_orientation;
    bool m_orientation_isSet;
    bool m_orientation_isValid;

    double m_sog;
    bool m_sog_isSet;
    bool m_sog_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISetMasterExternalPayload)

#endif // OAISetMasterExternalPayload_H
