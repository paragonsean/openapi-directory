/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPositionApi_H
#define OAI_OAIPositionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWaterlinkedAccousticPosition.h"
#include "OAIWlSatellitePosition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPositionApi : public QObject {
    Q_OBJECT

public:
    OAIPositionApi(const int timeOut = 0);
    ~OAIPositionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void positionAcousticFiltered();


    virtual void positionAcousticRaw();


    virtual void positionGet();


    virtual void positionGetMaster();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void positionAcousticFilteredCallback(OAIHttpRequestWorker *worker);
    void positionAcousticRawCallback(OAIHttpRequestWorker *worker);
    void positionGetCallback(OAIHttpRequestWorker *worker);
    void positionGetMasterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void positionAcousticFilteredSignal(OAIWaterlinkedAccousticPosition summary);
    void positionAcousticRawSignal(OAIWaterlinkedAccousticPosition summary);
    void positionGetSignal(OAIWlSatellitePosition summary);
    void positionGetMasterSignal(OAIWlSatellitePosition summary);


    void positionAcousticFilteredSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedAccousticPosition summary);
    void positionAcousticRawSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedAccousticPosition summary);
    void positionGetSignalFull(OAIHttpRequestWorker *worker, OAIWlSatellitePosition summary);
    void positionGetMasterSignalFull(OAIHttpRequestWorker *worker, OAIWlSatellitePosition summary);

    Q_DECL_DEPRECATED_X("Use positionAcousticFilteredSignalError() instead")
    void positionAcousticFilteredSignalE(OAIWaterlinkedAccousticPosition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void positionAcousticFilteredSignalError(OAIWaterlinkedAccousticPosition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use positionAcousticRawSignalError() instead")
    void positionAcousticRawSignalE(OAIWaterlinkedAccousticPosition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void positionAcousticRawSignalError(OAIWaterlinkedAccousticPosition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use positionGetSignalError() instead")
    void positionGetSignalE(OAIWlSatellitePosition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void positionGetSignalError(OAIWlSatellitePosition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use positionGetMasterSignalError() instead")
    void positionGetMasterSignalE(OAIWlSatellitePosition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void positionGetMasterSignalError(OAIWlSatellitePosition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use positionAcousticFilteredSignalErrorFull() instead")
    void positionAcousticFilteredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void positionAcousticFilteredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use positionAcousticRawSignalErrorFull() instead")
    void positionAcousticRawSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void positionAcousticRawSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use positionGetSignalErrorFull() instead")
    void positionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void positionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use positionGetMasterSignalErrorFull() instead")
    void positionGetMasterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void positionGetMasterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
