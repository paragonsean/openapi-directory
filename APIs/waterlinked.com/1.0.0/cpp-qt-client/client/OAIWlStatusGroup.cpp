/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWlStatusGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWlStatusGroup::OAIWlStatusGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWlStatusGroup::OAIWlStatusGroup() {
    this->initializeModel();
}

OAIWlStatusGroup::~OAIWlStatusGroup() {}

void OAIWlStatusGroup::initializeModel() {

    m_error_ids_isSet = false;
    m_error_ids_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_group_isSet = false;
    m_status_group_isValid = false;

    m_status_group_id_isSet = false;
    m_status_group_id_isValid = false;
}

void OAIWlStatusGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWlStatusGroup::fromJsonObject(QJsonObject json) {

    m_error_ids_isValid = ::OpenAPI::fromJsonValue(m_error_ids, json[QString("error_ids")]);
    m_error_ids_isSet = !json[QString("error_ids")].isNull() && m_error_ids_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_group_isValid = ::OpenAPI::fromJsonValue(m_status_group, json[QString("status_group")]);
    m_status_group_isSet = !json[QString("status_group")].isNull() && m_status_group_isValid;

    m_status_group_id_isValid = ::OpenAPI::fromJsonValue(m_status_group_id, json[QString("status_group_id")]);
    m_status_group_id_isSet = !json[QString("status_group_id")].isNull() && m_status_group_id_isValid;
}

QString OAIWlStatusGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWlStatusGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_error_ids.size() > 0) {
        obj.insert(QString("error_ids"), ::OpenAPI::toJsonValue(m_error_ids));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_group_isSet) {
        obj.insert(QString("status_group"), ::OpenAPI::toJsonValue(m_status_group));
    }
    if (m_status_group_id_isSet) {
        obj.insert(QString("status_group_id"), ::OpenAPI::toJsonValue(m_status_group_id));
    }
    return obj;
}

QList<QString> OAIWlStatusGroup::getErrorIds() const {
    return m_error_ids;
}
void OAIWlStatusGroup::setErrorIds(const QList<QString> &error_ids) {
    m_error_ids = error_ids;
    m_error_ids_isSet = true;
}

bool OAIWlStatusGroup::is_error_ids_Set() const{
    return m_error_ids_isSet;
}

bool OAIWlStatusGroup::is_error_ids_Valid() const{
    return m_error_ids_isValid;
}

QString OAIWlStatusGroup::getMessage() const {
    return m_message;
}
void OAIWlStatusGroup::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWlStatusGroup::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWlStatusGroup::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWlStatusGroup::getStatus() const {
    return m_status;
}
void OAIWlStatusGroup::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWlStatusGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWlStatusGroup::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWlStatusGroup::getStatusGroup() const {
    return m_status_group;
}
void OAIWlStatusGroup::setStatusGroup(const QString &status_group) {
    m_status_group = status_group;
    m_status_group_isSet = true;
}

bool OAIWlStatusGroup::is_status_group_Set() const{
    return m_status_group_isSet;
}

bool OAIWlStatusGroup::is_status_group_Valid() const{
    return m_status_group_isValid;
}

QString OAIWlStatusGroup::getStatusGroupId() const {
    return m_status_group_id;
}
void OAIWlStatusGroup::setStatusGroupId(const QString &status_group_id) {
    m_status_group_id = status_group_id;
    m_status_group_id_isSet = true;
}

bool OAIWlStatusGroup::is_status_group_id_Set() const{
    return m_status_group_id_isSet;
}

bool OAIWlStatusGroup::is_status_group_id_Valid() const{
    return m_status_group_id_isValid;
}

bool OAIWlStatusGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWlStatusGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_ids_isValid && m_message_isValid && m_status_isValid && m_status_group_isValid && m_status_group_id_isValid && true;
}

} // namespace OpenAPI
