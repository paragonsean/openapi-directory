/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigApi_H
#define OAI_OAIConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIModifyAntennaConfigConfigPayload.h"
#include "OAIModifyConfigPayload.h"
#include "OAIModifyIPConfigPayload.h"
#include "OAIModifyReceiverConfigPayload.h"
#include "OAIModifyWIFIConfigPayload.h"
#include "OAIWaterlinkedAntenna_config.h"
#include "OAIWaterlinkedConfiguration.h"
#include "OAIWaterlinkedIp_config.h"
#include "OAIWaterlinkedOperation_response.h"
#include "OAIWaterlinkedReceiver.h"
#include "OAIWaterlinkedWifi_config.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigApi : public QObject {
    Q_OBJECT

public:
    OAIConfigApi(const int timeOut = 0);
    ~OAIConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void configGet();


    virtual void configGetAntennaConfig();


    virtual void configGetIP();


    virtual void configGetWIFI();


    virtual void configListReceiver();

    /**
    * @param[in]  payload OAIModifyConfigPayload [required]
    */
    virtual void configModify(const OAIModifyConfigPayload &payload);

    /**
    * @param[in]  payload OAIModifyAntennaConfigConfigPayload [required]
    */
    virtual void configModifyAntennaConfig(const OAIModifyAntennaConfigConfigPayload &payload);

    /**
    * @param[in]  payload OAIModifyIPConfigPayload [required]
    */
    virtual void configModifyIP(const OAIModifyIPConfigPayload &payload);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  payload OAIModifyReceiverConfigPayload [required]
    */
    virtual void configModifyReceiver(const qint32 &id, const OAIModifyReceiverConfigPayload &payload);

    /**
    * @param[in]  payload OAIModifyWIFIConfigPayload [required]
    */
    virtual void configModifyWIFI(const OAIModifyWIFIConfigPayload &payload);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void configShowReceiver(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void configGetCallback(OAIHttpRequestWorker *worker);
    void configGetAntennaConfigCallback(OAIHttpRequestWorker *worker);
    void configGetIPCallback(OAIHttpRequestWorker *worker);
    void configGetWIFICallback(OAIHttpRequestWorker *worker);
    void configListReceiverCallback(OAIHttpRequestWorker *worker);
    void configModifyCallback(OAIHttpRequestWorker *worker);
    void configModifyAntennaConfigCallback(OAIHttpRequestWorker *worker);
    void configModifyIPCallback(OAIHttpRequestWorker *worker);
    void configModifyReceiverCallback(OAIHttpRequestWorker *worker);
    void configModifyWIFICallback(OAIHttpRequestWorker *worker);
    void configShowReceiverCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void configGetSignal(OAIWaterlinkedConfiguration summary);
    void configGetAntennaConfigSignal(OAIWaterlinkedAntenna_config summary);
    void configGetIPSignal(OAIWaterlinkedIp_config summary);
    void configGetWIFISignal(OAIWaterlinkedWifi_config summary);
    void configListReceiverSignal(QList<OAIWaterlinkedReceiver> summary);
    void configModifySignal(OAIWaterlinkedOperation_response summary);
    void configModifyAntennaConfigSignal(OAIWaterlinkedOperation_response summary);
    void configModifyIPSignal(OAIWaterlinkedOperation_response summary);
    void configModifyReceiverSignal();
    void configModifyWIFISignal(OAIWaterlinkedOperation_response summary);
    void configShowReceiverSignal(OAIWaterlinkedReceiver summary);


    void configGetSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedConfiguration summary);
    void configGetAntennaConfigSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedAntenna_config summary);
    void configGetIPSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedIp_config summary);
    void configGetWIFISignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedWifi_config summary);
    void configListReceiverSignalFull(OAIHttpRequestWorker *worker, QList<OAIWaterlinkedReceiver> summary);
    void configModifySignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void configModifyAntennaConfigSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void configModifyIPSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void configModifyReceiverSignalFull(OAIHttpRequestWorker *worker);
    void configModifyWIFISignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void configShowReceiverSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedReceiver summary);

    Q_DECL_DEPRECATED_X("Use configGetSignalError() instead")
    void configGetSignalE(OAIWaterlinkedConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetSignalError(OAIWaterlinkedConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configGetAntennaConfigSignalError() instead")
    void configGetAntennaConfigSignalE(OAIWaterlinkedAntenna_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetAntennaConfigSignalError(OAIWaterlinkedAntenna_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configGetIPSignalError() instead")
    void configGetIPSignalE(OAIWaterlinkedIp_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetIPSignalError(OAIWaterlinkedIp_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configGetWIFISignalError() instead")
    void configGetWIFISignalE(OAIWaterlinkedWifi_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetWIFISignalError(OAIWaterlinkedWifi_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configListReceiverSignalError() instead")
    void configListReceiverSignalE(QList<OAIWaterlinkedReceiver> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configListReceiverSignalError(QList<OAIWaterlinkedReceiver> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifySignalError() instead")
    void configModifySignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifySignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyAntennaConfigSignalError() instead")
    void configModifyAntennaConfigSignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyAntennaConfigSignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyIPSignalError() instead")
    void configModifyIPSignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyIPSignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyReceiverSignalError() instead")
    void configModifyReceiverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyReceiverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyWIFISignalError() instead")
    void configModifyWIFISignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyWIFISignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configShowReceiverSignalError() instead")
    void configShowReceiverSignalE(OAIWaterlinkedReceiver summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configShowReceiverSignalError(OAIWaterlinkedReceiver summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use configGetSignalErrorFull() instead")
    void configGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configGetAntennaConfigSignalErrorFull() instead")
    void configGetAntennaConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetAntennaConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configGetIPSignalErrorFull() instead")
    void configGetIPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetIPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configGetWIFISignalErrorFull() instead")
    void configGetWIFISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetWIFISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configListReceiverSignalErrorFull() instead")
    void configListReceiverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configListReceiverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifySignalErrorFull() instead")
    void configModifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyAntennaConfigSignalErrorFull() instead")
    void configModifyAntennaConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyAntennaConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyIPSignalErrorFull() instead")
    void configModifyIPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyIPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyReceiverSignalErrorFull() instead")
    void configModifyReceiverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyReceiverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configModifyWIFISignalErrorFull() instead")
    void configModifyWIFISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configModifyWIFISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configShowReceiverSignalErrorFull() instead")
    void configShowReceiverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configShowReceiverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
