/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyWIFIConfigPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyWIFIConfigPayload::OAIModifyWIFIConfigPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyWIFIConfigPayload::OAIModifyWIFIConfigPayload() {
    this->initializeModel();
}

OAIModifyWIFIConfigPayload::~OAIModifyWIFIConfigPayload() {}

void OAIModifyWIFIConfigPayload::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;
}

void OAIModifyWIFIConfigPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyWIFIConfigPayload::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;
}

QString OAIModifyWIFIConfigPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyWIFIConfigPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_ssid_isSet) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    return obj;
}

QString OAIModifyWIFIConfigPayload::getMode() const {
    return m_mode;
}
void OAIModifyWIFIConfigPayload::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIModifyWIFIConfigPayload::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIModifyWIFIConfigPayload::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIModifyWIFIConfigPayload::getPassword() const {
    return m_password;
}
void OAIModifyWIFIConfigPayload::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIModifyWIFIConfigPayload::is_password_Set() const{
    return m_password_isSet;
}

bool OAIModifyWIFIConfigPayload::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIModifyWIFIConfigPayload::getSsid() const {
    return m_ssid;
}
void OAIModifyWIFIConfigPayload::setSsid(const QString &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIModifyWIFIConfigPayload::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIModifyWIFIConfigPayload::is_ssid_Valid() const{
    return m_ssid_isValid;
}

bool OAIModifyWIFIConfigPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyWIFIConfigPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mode_isValid && m_password_isValid && m_ssid_isValid && true;
}

} // namespace OpenAPI
