/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExternalApi_H
#define OAI_OAIExternalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISetDepthExternalPayload.h"
#include "OAISetMasterExternalPayload.h"
#include "OAISetOrientationExternalPayload.h"
#include "OAISetVehicleIMUExternalPayload.h"
#include "OAIWaterlinkedOperation_response.h"
#include "OAIWlExternalLocatorOrientation.h"
#include "OAIWlExternalVehicleImu.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExternalApi : public QObject {
    Q_OBJECT

public:
    OAIExternalApi(const int timeOut = 0);
    ~OAIExternalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void externalGetOrientation();


    virtual void externalGetVehicleIMU();

    /**
    * @param[in]  payload OAISetDepthExternalPayload [required]
    */
    virtual void externalSetDepth(const OAISetDepthExternalPayload &payload);

    /**
    * @param[in]  payload OAISetMasterExternalPayload [required]
    */
    virtual void externalSetMaster(const OAISetMasterExternalPayload &payload);

    /**
    * @param[in]  payload OAISetOrientationExternalPayload [required]
    */
    virtual void externalSetOrientation(const OAISetOrientationExternalPayload &payload);

    /**
    * @param[in]  payload OAISetVehicleIMUExternalPayload [required]
    */
    virtual void externalSetVehicleIMU(const OAISetVehicleIMUExternalPayload &payload);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void externalGetOrientationCallback(OAIHttpRequestWorker *worker);
    void externalGetVehicleIMUCallback(OAIHttpRequestWorker *worker);
    void externalSetDepthCallback(OAIHttpRequestWorker *worker);
    void externalSetMasterCallback(OAIHttpRequestWorker *worker);
    void externalSetOrientationCallback(OAIHttpRequestWorker *worker);
    void externalSetVehicleIMUCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void externalGetOrientationSignal(OAIWlExternalLocatorOrientation summary);
    void externalGetVehicleIMUSignal(OAIWlExternalVehicleImu summary);
    void externalSetDepthSignal(OAIWaterlinkedOperation_response summary);
    void externalSetMasterSignal(OAIWaterlinkedOperation_response summary);
    void externalSetOrientationSignal(OAIWaterlinkedOperation_response summary);
    void externalSetVehicleIMUSignal(OAIWaterlinkedOperation_response summary);


    void externalGetOrientationSignalFull(OAIHttpRequestWorker *worker, OAIWlExternalLocatorOrientation summary);
    void externalGetVehicleIMUSignalFull(OAIHttpRequestWorker *worker, OAIWlExternalVehicleImu summary);
    void externalSetDepthSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void externalSetMasterSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void externalSetOrientationSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);
    void externalSetVehicleIMUSignalFull(OAIHttpRequestWorker *worker, OAIWaterlinkedOperation_response summary);

    Q_DECL_DEPRECATED_X("Use externalGetOrientationSignalError() instead")
    void externalGetOrientationSignalE(OAIWlExternalLocatorOrientation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalGetOrientationSignalError(OAIWlExternalLocatorOrientation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalGetVehicleIMUSignalError() instead")
    void externalGetVehicleIMUSignalE(OAIWlExternalVehicleImu summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalGetVehicleIMUSignalError(OAIWlExternalVehicleImu summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetDepthSignalError() instead")
    void externalSetDepthSignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetDepthSignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetMasterSignalError() instead")
    void externalSetMasterSignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetMasterSignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetOrientationSignalError() instead")
    void externalSetOrientationSignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetOrientationSignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetVehicleIMUSignalError() instead")
    void externalSetVehicleIMUSignalE(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetVehicleIMUSignalError(OAIWaterlinkedOperation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use externalGetOrientationSignalErrorFull() instead")
    void externalGetOrientationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalGetOrientationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalGetVehicleIMUSignalErrorFull() instead")
    void externalGetVehicleIMUSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalGetVehicleIMUSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetDepthSignalErrorFull() instead")
    void externalSetDepthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetDepthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetMasterSignalErrorFull() instead")
    void externalSetMasterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetMasterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetOrientationSignalErrorFull() instead")
    void externalSetOrientationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetOrientationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSetVehicleIMUSignalErrorFull() instead")
    void externalSetVehicleIMUSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSetVehicleIMUSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
