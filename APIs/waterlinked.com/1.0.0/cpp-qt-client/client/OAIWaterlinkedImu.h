/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaterlinkedImu.h
 *
 * IMU status and orientation information (default view)
 */

#ifndef OAIWaterlinkedImu_H
#define OAIWaterlinkedImu_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWaterlinkedImu : public OAIObject {
public:
    OAIWaterlinkedImu();
    OAIWaterlinkedImu(QString json);
    ~OAIWaterlinkedImu() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getPitch() const;
    void setPitch(const double &pitch);
    bool is_pitch_Set() const;
    bool is_pitch_Valid() const;

    qint32 getProgress() const;
    void setProgress(const qint32 &progress);
    bool is_progress_Set() const;
    bool is_progress_Valid() const;

    double getRoll() const;
    void setRoll(const double &roll);
    bool is_roll_Set() const;
    bool is_roll_Valid() const;

    qint32 getState() const;
    void setState(const qint32 &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    double getYaw() const;
    void setYaw(const double &yaw);
    bool is_yaw_Set() const;
    bool is_yaw_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_pitch;
    bool m_pitch_isSet;
    bool m_pitch_isValid;

    qint32 m_progress;
    bool m_progress_isSet;
    bool m_progress_isValid;

    double m_roll;
    bool m_roll_isSet;
    bool m_roll_isValid;

    qint32 m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    double m_yaw;
    bool m_yaw_isSet;
    bool m_yaw_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaterlinkedImu)

#endif // OAIWaterlinkedImu_H
