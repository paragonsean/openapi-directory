/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaterlinkedAbout.h
 *
 * About information (default view)
 */

#ifndef OAIWaterlinkedAbout_H
#define OAIWaterlinkedAbout_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWaterlinkedAbout : public OAIObject {
public:
    OAIWaterlinkedAbout();
    OAIWaterlinkedAbout(QString json);
    ~OAIWaterlinkedAbout() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChipid() const;
    void setChipid(const QString &chipid);
    bool is_chipid_Set() const;
    bool is_chipid_Valid() const;

    qint64 getHardwareRevision() const;
    void setHardwareRevision(const qint64 &hardware_revision);
    bool is_hardware_revision_Set() const;
    bool is_hardware_revision_Valid() const;

    qint64 getProductId() const;
    void setProductId(const qint64 &product_id);
    bool is_product_id_Set() const;
    bool is_product_id_Valid() const;

    QString getProductName() const;
    void setProductName(const QString &product_name);
    bool is_product_name_Set() const;
    bool is_product_name_Valid() const;

    QString getVariant() const;
    void setVariant(const QString &variant);
    bool is_variant_Set() const;
    bool is_variant_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getVersionShort() const;
    void setVersionShort(const QString &version_short);
    bool is_version_short_Set() const;
    bool is_version_short_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chipid;
    bool m_chipid_isSet;
    bool m_chipid_isValid;

    qint64 m_hardware_revision;
    bool m_hardware_revision_isSet;
    bool m_hardware_revision_isValid;

    qint64 m_product_id;
    bool m_product_id_isSet;
    bool m_product_id_isValid;

    QString m_product_name;
    bool m_product_name_isSet;
    bool m_product_name_isValid;

    QString m_variant;
    bool m_variant_isSet;
    bool m_variant_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_version_short;
    bool m_version_short_isSet;
    bool m_version_short_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaterlinkedAbout)

#endif // OAIWaterlinkedAbout_H
