/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterlinkedAbout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterlinkedAbout::OAIWaterlinkedAbout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterlinkedAbout::OAIWaterlinkedAbout() {
    this->initializeModel();
}

OAIWaterlinkedAbout::~OAIWaterlinkedAbout() {}

void OAIWaterlinkedAbout::initializeModel() {

    m_chipid_isSet = false;
    m_chipid_isValid = false;

    m_hardware_revision_isSet = false;
    m_hardware_revision_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_short_isSet = false;
    m_version_short_isValid = false;
}

void OAIWaterlinkedAbout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterlinkedAbout::fromJsonObject(QJsonObject json) {

    m_chipid_isValid = ::OpenAPI::fromJsonValue(m_chipid, json[QString("chipid")]);
    m_chipid_isSet = !json[QString("chipid")].isNull() && m_chipid_isValid;

    m_hardware_revision_isValid = ::OpenAPI::fromJsonValue(m_hardware_revision, json[QString("hardware_revision")]);
    m_hardware_revision_isSet = !json[QString("hardware_revision")].isNull() && m_hardware_revision_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("product_name")]);
    m_product_name_isSet = !json[QString("product_name")].isNull() && m_product_name_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_short_isValid = ::OpenAPI::fromJsonValue(m_version_short, json[QString("version_short")]);
    m_version_short_isSet = !json[QString("version_short")].isNull() && m_version_short_isValid;
}

QString OAIWaterlinkedAbout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterlinkedAbout::asJsonObject() const {
    QJsonObject obj;
    if (m_chipid_isSet) {
        obj.insert(QString("chipid"), ::OpenAPI::toJsonValue(m_chipid));
    }
    if (m_hardware_revision_isSet) {
        obj.insert(QString("hardware_revision"), ::OpenAPI::toJsonValue(m_hardware_revision));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("product_name"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_short_isSet) {
        obj.insert(QString("version_short"), ::OpenAPI::toJsonValue(m_version_short));
    }
    return obj;
}

QString OAIWaterlinkedAbout::getChipid() const {
    return m_chipid;
}
void OAIWaterlinkedAbout::setChipid(const QString &chipid) {
    m_chipid = chipid;
    m_chipid_isSet = true;
}

bool OAIWaterlinkedAbout::is_chipid_Set() const{
    return m_chipid_isSet;
}

bool OAIWaterlinkedAbout::is_chipid_Valid() const{
    return m_chipid_isValid;
}

qint64 OAIWaterlinkedAbout::getHardwareRevision() const {
    return m_hardware_revision;
}
void OAIWaterlinkedAbout::setHardwareRevision(const qint64 &hardware_revision) {
    m_hardware_revision = hardware_revision;
    m_hardware_revision_isSet = true;
}

bool OAIWaterlinkedAbout::is_hardware_revision_Set() const{
    return m_hardware_revision_isSet;
}

bool OAIWaterlinkedAbout::is_hardware_revision_Valid() const{
    return m_hardware_revision_isValid;
}

qint64 OAIWaterlinkedAbout::getProductId() const {
    return m_product_id;
}
void OAIWaterlinkedAbout::setProductId(const qint64 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIWaterlinkedAbout::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIWaterlinkedAbout::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIWaterlinkedAbout::getProductName() const {
    return m_product_name;
}
void OAIWaterlinkedAbout::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIWaterlinkedAbout::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIWaterlinkedAbout::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIWaterlinkedAbout::getVariant() const {
    return m_variant;
}
void OAIWaterlinkedAbout::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIWaterlinkedAbout::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIWaterlinkedAbout::is_variant_Valid() const{
    return m_variant_isValid;
}

QString OAIWaterlinkedAbout::getVersion() const {
    return m_version;
}
void OAIWaterlinkedAbout::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWaterlinkedAbout::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWaterlinkedAbout::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIWaterlinkedAbout::getVersionShort() const {
    return m_version_short;
}
void OAIWaterlinkedAbout::setVersionShort(const QString &version_short) {
    m_version_short = version_short;
    m_version_short_isSet = true;
}

bool OAIWaterlinkedAbout::is_version_short_Set() const{
    return m_version_short_isSet;
}

bool OAIWaterlinkedAbout::is_version_short_Valid() const{
    return m_version_short_isValid;
}

bool OAIWaterlinkedAbout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chipid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_short_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterlinkedAbout::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chipid_isValid && m_hardware_revision_isValid && m_product_id_isValid && m_product_name_isValid && m_variant_isValid && m_version_isValid && m_version_short_isValid && true;
}

} // namespace OpenAPI
