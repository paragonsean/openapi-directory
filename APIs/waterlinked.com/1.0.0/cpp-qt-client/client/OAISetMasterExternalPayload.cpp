/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetMasterExternalPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetMasterExternalPayload::OAISetMasterExternalPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetMasterExternalPayload::OAISetMasterExternalPayload() {
    this->initializeModel();
}

OAISetMasterExternalPayload::~OAISetMasterExternalPayload() {}

void OAISetMasterExternalPayload::initializeModel() {

    m_cog_isSet = false;
    m_cog_isValid = false;

    m_fix_quality_isSet = false;
    m_fix_quality_isValid = false;

    m_hdop_isSet = false;
    m_hdop_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_numsats_isSet = false;
    m_numsats_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_sog_isSet = false;
    m_sog_isValid = false;
}

void OAISetMasterExternalPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetMasterExternalPayload::fromJsonObject(QJsonObject json) {

    m_cog_isValid = ::OpenAPI::fromJsonValue(m_cog, json[QString("cog")]);
    m_cog_isSet = !json[QString("cog")].isNull() && m_cog_isValid;

    m_fix_quality_isValid = ::OpenAPI::fromJsonValue(m_fix_quality, json[QString("fix_quality")]);
    m_fix_quality_isSet = !json[QString("fix_quality")].isNull() && m_fix_quality_isValid;

    m_hdop_isValid = ::OpenAPI::fromJsonValue(m_hdop, json[QString("hdop")]);
    m_hdop_isSet = !json[QString("hdop")].isNull() && m_hdop_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_numsats_isValid = ::OpenAPI::fromJsonValue(m_numsats, json[QString("numsats")]);
    m_numsats_isSet = !json[QString("numsats")].isNull() && m_numsats_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_sog_isValid = ::OpenAPI::fromJsonValue(m_sog, json[QString("sog")]);
    m_sog_isSet = !json[QString("sog")].isNull() && m_sog_isValid;
}

QString OAISetMasterExternalPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetMasterExternalPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_cog_isSet) {
        obj.insert(QString("cog"), ::OpenAPI::toJsonValue(m_cog));
    }
    if (m_fix_quality_isSet) {
        obj.insert(QString("fix_quality"), ::OpenAPI::toJsonValue(m_fix_quality));
    }
    if (m_hdop_isSet) {
        obj.insert(QString("hdop"), ::OpenAPI::toJsonValue(m_hdop));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_numsats_isSet) {
        obj.insert(QString("numsats"), ::OpenAPI::toJsonValue(m_numsats));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_sog_isSet) {
        obj.insert(QString("sog"), ::OpenAPI::toJsonValue(m_sog));
    }
    return obj;
}

double OAISetMasterExternalPayload::getCog() const {
    return m_cog;
}
void OAISetMasterExternalPayload::setCog(const double &cog) {
    m_cog = cog;
    m_cog_isSet = true;
}

bool OAISetMasterExternalPayload::is_cog_Set() const{
    return m_cog_isSet;
}

bool OAISetMasterExternalPayload::is_cog_Valid() const{
    return m_cog_isValid;
}

double OAISetMasterExternalPayload::getFixQuality() const {
    return m_fix_quality;
}
void OAISetMasterExternalPayload::setFixQuality(const double &fix_quality) {
    m_fix_quality = fix_quality;
    m_fix_quality_isSet = true;
}

bool OAISetMasterExternalPayload::is_fix_quality_Set() const{
    return m_fix_quality_isSet;
}

bool OAISetMasterExternalPayload::is_fix_quality_Valid() const{
    return m_fix_quality_isValid;
}

double OAISetMasterExternalPayload::getHdop() const {
    return m_hdop;
}
void OAISetMasterExternalPayload::setHdop(const double &hdop) {
    m_hdop = hdop;
    m_hdop_isSet = true;
}

bool OAISetMasterExternalPayload::is_hdop_Set() const{
    return m_hdop_isSet;
}

bool OAISetMasterExternalPayload::is_hdop_Valid() const{
    return m_hdop_isValid;
}

double OAISetMasterExternalPayload::getLat() const {
    return m_lat;
}
void OAISetMasterExternalPayload::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAISetMasterExternalPayload::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAISetMasterExternalPayload::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAISetMasterExternalPayload::getLon() const {
    return m_lon;
}
void OAISetMasterExternalPayload::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAISetMasterExternalPayload::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAISetMasterExternalPayload::is_lon_Valid() const{
    return m_lon_isValid;
}

double OAISetMasterExternalPayload::getNumsats() const {
    return m_numsats;
}
void OAISetMasterExternalPayload::setNumsats(const double &numsats) {
    m_numsats = numsats;
    m_numsats_isSet = true;
}

bool OAISetMasterExternalPayload::is_numsats_Set() const{
    return m_numsats_isSet;
}

bool OAISetMasterExternalPayload::is_numsats_Valid() const{
    return m_numsats_isValid;
}

double OAISetMasterExternalPayload::getOrientation() const {
    return m_orientation;
}
void OAISetMasterExternalPayload::setOrientation(const double &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAISetMasterExternalPayload::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAISetMasterExternalPayload::is_orientation_Valid() const{
    return m_orientation_isValid;
}

double OAISetMasterExternalPayload::getSog() const {
    return m_sog;
}
void OAISetMasterExternalPayload::setSog(const double &sog) {
    m_sog = sog;
    m_sog_isSet = true;
}

bool OAISetMasterExternalPayload::is_sog_Set() const{
    return m_sog_isSet;
}

bool OAISetMasterExternalPayload::is_sog_Valid() const{
    return m_sog_isValid;
}

bool OAISetMasterExternalPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numsats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sog_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetMasterExternalPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lat_isValid && m_lon_isValid && m_orientation_isValid && true;
}

} // namespace OpenAPI
