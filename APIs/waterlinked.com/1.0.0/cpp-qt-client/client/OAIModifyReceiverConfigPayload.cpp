/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyReceiverConfigPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyReceiverConfigPayload::OAIModifyReceiverConfigPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyReceiverConfigPayload::OAIModifyReceiverConfigPayload() {
    this->initializeModel();
}

OAIModifyReceiverConfigPayload::~OAIModifyReceiverConfigPayload() {}

void OAIModifyReceiverConfigPayload::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_z_isSet = false;
    m_z_isValid = false;
}

void OAIModifyReceiverConfigPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyReceiverConfigPayload::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_z_isValid = ::OpenAPI::fromJsonValue(m_z, json[QString("z")]);
    m_z_isSet = !json[QString("z")].isNull() && m_z_isValid;
}

QString OAIModifyReceiverConfigPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyReceiverConfigPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_z_isSet) {
        obj.insert(QString("z"), ::OpenAPI::toJsonValue(m_z));
    }
    return obj;
}

qint64 OAIModifyReceiverConfigPayload::getId() const {
    return m_id;
}
void OAIModifyReceiverConfigPayload::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIModifyReceiverConfigPayload::is_id_Set() const{
    return m_id_isSet;
}

bool OAIModifyReceiverConfigPayload::is_id_Valid() const{
    return m_id_isValid;
}

double OAIModifyReceiverConfigPayload::getX() const {
    return m_x;
}
void OAIModifyReceiverConfigPayload::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIModifyReceiverConfigPayload::is_x_Set() const{
    return m_x_isSet;
}

bool OAIModifyReceiverConfigPayload::is_x_Valid() const{
    return m_x_isValid;
}

double OAIModifyReceiverConfigPayload::getY() const {
    return m_y;
}
void OAIModifyReceiverConfigPayload::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIModifyReceiverConfigPayload::is_y_Set() const{
    return m_y_isSet;
}

bool OAIModifyReceiverConfigPayload::is_y_Valid() const{
    return m_y_isValid;
}

double OAIModifyReceiverConfigPayload::getZ() const {
    return m_z;
}
void OAIModifyReceiverConfigPayload::setZ(const double &z) {
    m_z = z;
    m_z_isSet = true;
}

bool OAIModifyReceiverConfigPayload::is_z_Set() const{
    return m_z_isSet;
}

bool OAIModifyReceiverConfigPayload::is_z_Valid() const{
    return m_z_isValid;
}

bool OAIModifyReceiverConfigPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyReceiverConfigPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_x_isValid && m_y_isValid && m_z_isValid && true;
}

} // namespace OpenAPI
