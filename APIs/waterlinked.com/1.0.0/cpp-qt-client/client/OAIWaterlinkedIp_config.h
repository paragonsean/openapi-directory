/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaterlinkedIp_config.h
 *
 * Configuration parameters (default view)
 */

#ifndef OAIWaterlinkedIp_config_H
#define OAIWaterlinkedIp_config_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWaterlinkedIp_config : public OAIObject {
public:
    OAIWaterlinkedIp_config();
    OAIWaterlinkedIp_config(QString json);
    ~OAIWaterlinkedIp_config() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    bool isDhcp() const;
    void setDhcp(const bool &dhcp);
    bool is_dhcp_Set() const;
    bool is_dhcp_Valid() const;

    QString getDns() const;
    void setDns(const QString &dns);
    bool is_dns_Set() const;
    bool is_dns_Valid() const;

    QString getGateway() const;
    void setGateway(const QString &gateway);
    bool is_gateway_Set() const;
    bool is_gateway_Valid() const;

    qint32 getPrefix() const;
    void setPrefix(const qint32 &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    bool m_dhcp;
    bool m_dhcp_isSet;
    bool m_dhcp_isValid;

    QString m_dns;
    bool m_dns_isSet;
    bool m_dns_isValid;

    QString m_gateway;
    bool m_gateway_isSet;
    bool m_gateway_isValid;

    qint32 m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaterlinkedIp_config)

#endif // OAIWaterlinkedIp_config_H
