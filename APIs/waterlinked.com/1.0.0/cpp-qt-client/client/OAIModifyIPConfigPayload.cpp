/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyIPConfigPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyIPConfigPayload::OAIModifyIPConfigPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyIPConfigPayload::OAIModifyIPConfigPayload() {
    this->initializeModel();
}

OAIModifyIPConfigPayload::~OAIModifyIPConfigPayload() {}

void OAIModifyIPConfigPayload::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_dhcp_isSet = false;
    m_dhcp_isValid = false;

    m_dns_isSet = false;
    m_dns_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIModifyIPConfigPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyIPConfigPayload::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_dhcp_isValid = ::OpenAPI::fromJsonValue(m_dhcp, json[QString("dhcp")]);
    m_dhcp_isSet = !json[QString("dhcp")].isNull() && m_dhcp_isValid;

    m_dns_isValid = ::OpenAPI::fromJsonValue(m_dns, json[QString("dns")]);
    m_dns_isSet = !json[QString("dns")].isNull() && m_dns_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIModifyIPConfigPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyIPConfigPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_dhcp_isSet) {
        obj.insert(QString("dhcp"), ::OpenAPI::toJsonValue(m_dhcp));
    }
    if (m_dns_isSet) {
        obj.insert(QString("dns"), ::OpenAPI::toJsonValue(m_dns));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIModifyIPConfigPayload::getAddress() const {
    return m_address;
}
void OAIModifyIPConfigPayload::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIModifyIPConfigPayload::is_address_Set() const{
    return m_address_isSet;
}

bool OAIModifyIPConfigPayload::is_address_Valid() const{
    return m_address_isValid;
}

bool OAIModifyIPConfigPayload::isDhcp() const {
    return m_dhcp;
}
void OAIModifyIPConfigPayload::setDhcp(const bool &dhcp) {
    m_dhcp = dhcp;
    m_dhcp_isSet = true;
}

bool OAIModifyIPConfigPayload::is_dhcp_Set() const{
    return m_dhcp_isSet;
}

bool OAIModifyIPConfigPayload::is_dhcp_Valid() const{
    return m_dhcp_isValid;
}

QString OAIModifyIPConfigPayload::getDns() const {
    return m_dns;
}
void OAIModifyIPConfigPayload::setDns(const QString &dns) {
    m_dns = dns;
    m_dns_isSet = true;
}

bool OAIModifyIPConfigPayload::is_dns_Set() const{
    return m_dns_isSet;
}

bool OAIModifyIPConfigPayload::is_dns_Valid() const{
    return m_dns_isValid;
}

QString OAIModifyIPConfigPayload::getGateway() const {
    return m_gateway;
}
void OAIModifyIPConfigPayload::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIModifyIPConfigPayload::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIModifyIPConfigPayload::is_gateway_Valid() const{
    return m_gateway_isValid;
}

qint32 OAIModifyIPConfigPayload::getPrefix() const {
    return m_prefix;
}
void OAIModifyIPConfigPayload::setPrefix(const qint32 &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIModifyIPConfigPayload::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIModifyIPConfigPayload::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIModifyIPConfigPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyIPConfigPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_dhcp_isValid && m_dns_isValid && m_gateway_isValid && m_prefix_isValid && true;
}

} // namespace OpenAPI
