/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterlinkedAntenna_config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterlinkedAntenna_config::OAIWaterlinkedAntenna_config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterlinkedAntenna_config::OAIWaterlinkedAntenna_config() {
    this->initializeModel();
}

OAIWaterlinkedAntenna_config::~OAIWaterlinkedAntenna_config() {}

void OAIWaterlinkedAntenna_config::initializeModel() {

    m_antenna_rotation_isSet = false;
    m_antenna_rotation_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIWaterlinkedAntenna_config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterlinkedAntenna_config::fromJsonObject(QJsonObject json) {

    m_antenna_rotation_isValid = ::OpenAPI::fromJsonValue(m_antenna_rotation, json[QString("antenna_rotation")]);
    m_antenna_rotation_isSet = !json[QString("antenna_rotation")].isNull() && m_antenna_rotation_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIWaterlinkedAntenna_config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterlinkedAntenna_config::asJsonObject() const {
    QJsonObject obj;
    if (m_antenna_rotation_isSet) {
        obj.insert(QString("antenna_rotation"), ::OpenAPI::toJsonValue(m_antenna_rotation));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

qint32 OAIWaterlinkedAntenna_config::getAntennaRotation() const {
    return m_antenna_rotation;
}
void OAIWaterlinkedAntenna_config::setAntennaRotation(const qint32 &antenna_rotation) {
    m_antenna_rotation = antenna_rotation;
    m_antenna_rotation_isSet = true;
}

bool OAIWaterlinkedAntenna_config::is_antenna_rotation_Set() const{
    return m_antenna_rotation_isSet;
}

bool OAIWaterlinkedAntenna_config::is_antenna_rotation_Valid() const{
    return m_antenna_rotation_isValid;
}

double OAIWaterlinkedAntenna_config::getDepth() const {
    return m_depth;
}
void OAIWaterlinkedAntenna_config::setDepth(const double &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAIWaterlinkedAntenna_config::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAIWaterlinkedAntenna_config::is_depth_Valid() const{
    return m_depth_isValid;
}

double OAIWaterlinkedAntenna_config::getX() const {
    return m_x;
}
void OAIWaterlinkedAntenna_config::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIWaterlinkedAntenna_config::is_x_Set() const{
    return m_x_isSet;
}

bool OAIWaterlinkedAntenna_config::is_x_Valid() const{
    return m_x_isValid;
}

double OAIWaterlinkedAntenna_config::getY() const {
    return m_y;
}
void OAIWaterlinkedAntenna_config::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIWaterlinkedAntenna_config::is_y_Set() const{
    return m_y_isSet;
}

bool OAIWaterlinkedAntenna_config::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIWaterlinkedAntenna_config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antenna_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterlinkedAntenna_config::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_antenna_rotation_isValid && m_depth_isValid && m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
