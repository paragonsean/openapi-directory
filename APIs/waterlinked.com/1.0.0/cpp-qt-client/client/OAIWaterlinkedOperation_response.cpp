/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterlinkedOperation_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterlinkedOperation_response::OAIWaterlinkedOperation_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterlinkedOperation_response::OAIWaterlinkedOperation_response() {
    this->initializeModel();
}

OAIWaterlinkedOperation_response::~OAIWaterlinkedOperation_response() {}

void OAIWaterlinkedOperation_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIWaterlinkedOperation_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterlinkedOperation_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIWaterlinkedOperation_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterlinkedOperation_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QString OAIWaterlinkedOperation_response::getError() const {
    return m_error;
}
void OAIWaterlinkedOperation_response::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWaterlinkedOperation_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWaterlinkedOperation_response::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIWaterlinkedOperation_response::isSuccess() const {
    return m_success;
}
void OAIWaterlinkedOperation_response::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIWaterlinkedOperation_response::is_success_Set() const{
    return m_success_isSet;
}

bool OAIWaterlinkedOperation_response::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIWaterlinkedOperation_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterlinkedOperation_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_success_isValid && true;
}

} // namespace OpenAPI
