/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Current status from one specific status group (default view)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:36.739042-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WlStatusGroup {
  public static final String SERIALIZED_NAME_ERROR_IDS = "error_ids";
  @SerializedName(SERIALIZED_NAME_ERROR_IDS)
  private List<String> errorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * Status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OK("ok"),
    
    WARNING("warning"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_GROUP = "status_group";
  @SerializedName(SERIALIZED_NAME_STATUS_GROUP)
  private String statusGroup;

  public static final String SERIALIZED_NAME_STATUS_GROUP_ID = "status_group_id";
  @SerializedName(SERIALIZED_NAME_STATUS_GROUP_ID)
  private String statusGroupId;

  public WlStatusGroup() {
  }

  public WlStatusGroup errorIds(List<String> errorIds) {
    this.errorIds = errorIds;
    return this;
  }

  public WlStatusGroup addErrorIdsItem(String errorIdsItem) {
    if (this.errorIds == null) {
      this.errorIds = new ArrayList<>();
    }
    this.errorIds.add(errorIdsItem);
    return this;
  }

  /**
   * Identifiers for warnings/errors
   * @return errorIds
   */
  @javax.annotation.Nonnull
  public List<String> getErrorIds() {
    return errorIds;
  }

  public void setErrorIds(List<String> errorIds) {
    this.errorIds = errorIds;
  }


  public WlStatusGroup message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public WlStatusGroup status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WlStatusGroup statusGroup(String statusGroup) {
    this.statusGroup = statusGroup;
    return this;
  }

  /**
   * Status group friendly name
   * @return statusGroup
   */
  @javax.annotation.Nonnull
  public String getStatusGroup() {
    return statusGroup;
  }

  public void setStatusGroup(String statusGroup) {
    this.statusGroup = statusGroup;
  }


  public WlStatusGroup statusGroupId(String statusGroupId) {
    this.statusGroupId = statusGroupId;
    return this;
  }

  /**
   * Status group identifier
   * @return statusGroupId
   */
  @javax.annotation.Nonnull
  public String getStatusGroupId() {
    return statusGroupId;
  }

  public void setStatusGroupId(String statusGroupId) {
    this.statusGroupId = statusGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WlStatusGroup wlStatusGroup = (WlStatusGroup) o;
    return Objects.equals(this.errorIds, wlStatusGroup.errorIds) &&
        Objects.equals(this.message, wlStatusGroup.message) &&
        Objects.equals(this.status, wlStatusGroup.status) &&
        Objects.equals(this.statusGroup, wlStatusGroup.statusGroup) &&
        Objects.equals(this.statusGroupId, wlStatusGroup.statusGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorIds, message, status, statusGroup, statusGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WlStatusGroup {\n");
    sb.append("    errorIds: ").append(toIndentedString(errorIds)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusGroup: ").append(toIndentedString(statusGroup)).append("\n");
    sb.append("    statusGroupId: ").append(toIndentedString(statusGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error_ids");
    openapiFields.add("message");
    openapiFields.add("status");
    openapiFields.add("status_group");
    openapiFields.add("status_group_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("error_ids");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("status_group");
    openapiRequiredFields.add("status_group_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WlStatusGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WlStatusGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WlStatusGroup is not found in the empty JSON string", WlStatusGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WlStatusGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WlStatusGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WlStatusGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("error_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("error_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_ids` to be an array in the JSON string but got `%s`", jsonObj.get("error_ids").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("status_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_group").toString()));
      }
      if (!jsonObj.get("status_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_group_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WlStatusGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WlStatusGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WlStatusGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WlStatusGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<WlStatusGroup>() {
           @Override
           public void write(JsonWriter out, WlStatusGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WlStatusGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WlStatusGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WlStatusGroup
   * @throws IOException if the JSON string is invalid with respect to WlStatusGroup
   */
  public static WlStatusGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WlStatusGroup.class);
  }

  /**
   * Convert an instance of WlStatusGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

