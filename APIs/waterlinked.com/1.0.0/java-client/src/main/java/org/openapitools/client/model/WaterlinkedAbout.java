/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * About information (default view)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:36.739042-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterlinkedAbout {
  public static final String SERIALIZED_NAME_CHIPID = "chipid";
  @SerializedName(SERIALIZED_NAME_CHIPID)
  private String chipid;

  public static final String SERIALIZED_NAME_HARDWARE_REVISION = "hardware_revision";
  @SerializedName(SERIALIZED_NAME_HARDWARE_REVISION)
  private Long hardwareRevision;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Long productId;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "product_name";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_SHORT = "version_short";
  @SerializedName(SERIALIZED_NAME_VERSION_SHORT)
  private String versionShort;

  public WaterlinkedAbout() {
  }

  public WaterlinkedAbout chipid(String chipid) {
    this.chipid = chipid;
    return this;
  }

  /**
   * Chip identifier
   * @return chipid
   */
  @javax.annotation.Nonnull
  public String getChipid() {
    return chipid;
  }

  public void setChipid(String chipid) {
    this.chipid = chipid;
  }


  public WaterlinkedAbout hardwareRevision(Long hardwareRevision) {
    this.hardwareRevision = hardwareRevision;
    return this;
  }

  /**
   * Hardware revision
   * @return hardwareRevision
   */
  @javax.annotation.Nonnull
  public Long getHardwareRevision() {
    return hardwareRevision;
  }

  public void setHardwareRevision(Long hardwareRevision) {
    this.hardwareRevision = hardwareRevision;
  }


  public WaterlinkedAbout productId(Long productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID
   * @return productId
   */
  @javax.annotation.Nonnull
  public Long getProductId() {
    return productId;
  }

  public void setProductId(Long productId) {
    this.productId = productId;
  }


  public WaterlinkedAbout productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Product name
   * @return productName
   */
  @javax.annotation.Nonnull
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public WaterlinkedAbout variant(String variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Product variant
   * @return variant
   */
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }


  public WaterlinkedAbout version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Detailed Web Server version string
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public WaterlinkedAbout versionShort(String versionShort) {
    this.versionShort = versionShort;
    return this;
  }

  /**
   * Short Web Server version string
   * @return versionShort
   */
  @javax.annotation.Nonnull
  public String getVersionShort() {
    return versionShort;
  }

  public void setVersionShort(String versionShort) {
    this.versionShort = versionShort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterlinkedAbout waterlinkedAbout = (WaterlinkedAbout) o;
    return Objects.equals(this.chipid, waterlinkedAbout.chipid) &&
        Objects.equals(this.hardwareRevision, waterlinkedAbout.hardwareRevision) &&
        Objects.equals(this.productId, waterlinkedAbout.productId) &&
        Objects.equals(this.productName, waterlinkedAbout.productName) &&
        Objects.equals(this.variant, waterlinkedAbout.variant) &&
        Objects.equals(this.version, waterlinkedAbout.version) &&
        Objects.equals(this.versionShort, waterlinkedAbout.versionShort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chipid, hardwareRevision, productId, productName, variant, version, versionShort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterlinkedAbout {\n");
    sb.append("    chipid: ").append(toIndentedString(chipid)).append("\n");
    sb.append("    hardwareRevision: ").append(toIndentedString(hardwareRevision)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionShort: ").append(toIndentedString(versionShort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chipid");
    openapiFields.add("hardware_revision");
    openapiFields.add("product_id");
    openapiFields.add("product_name");
    openapiFields.add("variant");
    openapiFields.add("version");
    openapiFields.add("version_short");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chipid");
    openapiRequiredFields.add("hardware_revision");
    openapiRequiredFields.add("product_id");
    openapiRequiredFields.add("product_name");
    openapiRequiredFields.add("variant");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("version_short");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterlinkedAbout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterlinkedAbout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterlinkedAbout is not found in the empty JSON string", WaterlinkedAbout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterlinkedAbout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterlinkedAbout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaterlinkedAbout.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("chipid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chipid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chipid").toString()));
      }
      if (!jsonObj.get("product_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name").toString()));
      }
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("version_short").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_short` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_short").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterlinkedAbout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterlinkedAbout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterlinkedAbout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterlinkedAbout.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterlinkedAbout>() {
           @Override
           public void write(JsonWriter out, WaterlinkedAbout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterlinkedAbout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterlinkedAbout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterlinkedAbout
   * @throws IOException if the JSON string is invalid with respect to WaterlinkedAbout
   */
  public static WaterlinkedAbout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterlinkedAbout.class);
  }

  /**
   * Convert an instance of WaterlinkedAbout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

