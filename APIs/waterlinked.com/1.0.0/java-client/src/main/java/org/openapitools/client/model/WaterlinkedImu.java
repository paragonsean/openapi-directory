/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IMU status and orientation information (default view)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:36.739042-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterlinkedImu {
  public static final String SERIALIZED_NAME_PITCH = "pitch";
  @SerializedName(SERIALIZED_NAME_PITCH)
  private BigDecimal pitch;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_ROLL = "roll";
  @SerializedName(SERIALIZED_NAME_ROLL)
  private BigDecimal roll;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state;

  public static final String SERIALIZED_NAME_YAW = "yaw";
  @SerializedName(SERIALIZED_NAME_YAW)
  private BigDecimal yaw;

  public WaterlinkedImu() {
  }

  public WaterlinkedImu pitch(BigDecimal pitch) {
    this.pitch = pitch;
    return this;
  }

  /**
   * Pitch
   * minimum: 0
   * maximum: 3.6E+2
   * @return pitch
   */
  @javax.annotation.Nonnull
  public BigDecimal getPitch() {
    return pitch;
  }

  public void setPitch(BigDecimal pitch) {
    this.pitch = pitch;
  }


  public WaterlinkedImu progress(Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Calibration progress
   * minimum: 0
   * maximum: 100
   * @return progress
   */
  @javax.annotation.Nonnull
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public WaterlinkedImu roll(BigDecimal roll) {
    this.roll = roll;
    return this;
  }

  /**
   * Roll
   * minimum: 0
   * maximum: 3.6E+2
   * @return roll
   */
  @javax.annotation.Nonnull
  public BigDecimal getRoll() {
    return roll;
  }

  public void setRoll(BigDecimal roll) {
    this.roll = roll;
  }


  public WaterlinkedImu state(Integer state) {
    this.state = state;
    return this;
  }

  /**
   * IMU calibration state. 0&#x3D;running, 1&#x3D;calibrating
   * minimum: 0
   * maximum: 3
   * @return state
   */
  @javax.annotation.Nonnull
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }


  public WaterlinkedImu yaw(BigDecimal yaw) {
    this.yaw = yaw;
    return this;
  }

  /**
   * Yaw
   * minimum: 0
   * maximum: 3.6E+2
   * @return yaw
   */
  @javax.annotation.Nonnull
  public BigDecimal getYaw() {
    return yaw;
  }

  public void setYaw(BigDecimal yaw) {
    this.yaw = yaw;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterlinkedImu waterlinkedImu = (WaterlinkedImu) o;
    return Objects.equals(this.pitch, waterlinkedImu.pitch) &&
        Objects.equals(this.progress, waterlinkedImu.progress) &&
        Objects.equals(this.roll, waterlinkedImu.roll) &&
        Objects.equals(this.state, waterlinkedImu.state) &&
        Objects.equals(this.yaw, waterlinkedImu.yaw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pitch, progress, roll, state, yaw);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterlinkedImu {\n");
    sb.append("    pitch: ").append(toIndentedString(pitch)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    roll: ").append(toIndentedString(roll)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    yaw: ").append(toIndentedString(yaw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pitch");
    openapiFields.add("progress");
    openapiFields.add("roll");
    openapiFields.add("state");
    openapiFields.add("yaw");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pitch");
    openapiRequiredFields.add("progress");
    openapiRequiredFields.add("roll");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("yaw");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterlinkedImu
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterlinkedImu.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterlinkedImu is not found in the empty JSON string", WaterlinkedImu.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterlinkedImu.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterlinkedImu` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaterlinkedImu.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterlinkedImu.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterlinkedImu' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterlinkedImu> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterlinkedImu.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterlinkedImu>() {
           @Override
           public void write(JsonWriter out, WaterlinkedImu value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterlinkedImu read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterlinkedImu given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterlinkedImu
   * @throws IOException if the JSON string is invalid with respect to WaterlinkedImu
   */
  public static WaterlinkedImu fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterlinkedImu.class);
  }

  /**
   * Convert an instance of WaterlinkedImu to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

