/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Global master position from external source
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:36.739042-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetMasterExternalPayload {
  public static final String SERIALIZED_NAME_COG = "cog";
  @SerializedName(SERIALIZED_NAME_COG)
  private BigDecimal cog;

  public static final String SERIALIZED_NAME_FIX_QUALITY = "fix_quality";
  @SerializedName(SERIALIZED_NAME_FIX_QUALITY)
  private BigDecimal fixQuality;

  public static final String SERIALIZED_NAME_HDOP = "hdop";
  @SerializedName(SERIALIZED_NAME_HDOP)
  private BigDecimal hdop;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private BigDecimal lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private BigDecimal lon;

  public static final String SERIALIZED_NAME_NUMSATS = "numsats";
  @SerializedName(SERIALIZED_NAME_NUMSATS)
  private BigDecimal numsats;

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private BigDecimal orientation;

  public static final String SERIALIZED_NAME_SOG = "sog";
  @SerializedName(SERIALIZED_NAME_SOG)
  private BigDecimal sog;

  public SetMasterExternalPayload() {
  }

  public SetMasterExternalPayload cog(BigDecimal cog) {
    this.cog = cog;
    return this;
  }

  /**
   * Course over ground (degrees). -1 means no data.
   * minimum: -1
   * maximum: 359.999
   * @return cog
   */
  @javax.annotation.Nullable
  public BigDecimal getCog() {
    return cog;
  }

  public void setCog(BigDecimal cog) {
    this.cog = cog;
  }


  public SetMasterExternalPayload fixQuality(BigDecimal fixQuality) {
    this.fixQuality = fixQuality;
    return this;
  }

  /**
   * Fix quality. 0 if no data.
   * minimum: 0
   * @return fixQuality
   */
  @javax.annotation.Nullable
  public BigDecimal getFixQuality() {
    return fixQuality;
  }

  public void setFixQuality(BigDecimal fixQuality) {
    this.fixQuality = fixQuality;
  }


  public SetMasterExternalPayload hdop(BigDecimal hdop) {
    this.hdop = hdop;
    return this;
  }

  /**
   * Horizontal dilution of precision. -1 means no data.
   * minimum: -1
   * @return hdop
   */
  @javax.annotation.Nullable
  public BigDecimal getHdop() {
    return hdop;
  }

  public void setHdop(BigDecimal hdop) {
    this.hdop = hdop;
  }


  public SetMasterExternalPayload lat(BigDecimal lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Current Latitude
   * minimum: -9E+1
   * maximum: 9E+1
   * @return lat
   */
  @javax.annotation.Nonnull
  public BigDecimal getLat() {
    return lat;
  }

  public void setLat(BigDecimal lat) {
    this.lat = lat;
  }


  public SetMasterExternalPayload lon(BigDecimal lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Current Longitude
   * minimum: -1.8E+2
   * maximum: 1.8E+2
   * @return lon
   */
  @javax.annotation.Nonnull
  public BigDecimal getLon() {
    return lon;
  }

  public void setLon(BigDecimal lon) {
    this.lon = lon;
  }


  public SetMasterExternalPayload numsats(BigDecimal numsats) {
    this.numsats = numsats;
    return this;
  }

  /**
   * Number of satellites. -1 means no data.
   * minimum: -1
   * @return numsats
   */
  @javax.annotation.Nullable
  public BigDecimal getNumsats() {
    return numsats;
  }

  public void setNumsats(BigDecimal numsats) {
    this.numsats = numsats;
  }


  public SetMasterExternalPayload orientation(BigDecimal orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Current orientation/compass heading (degrees)
   * minimum: 0
   * maximum: 359.999
   * @return orientation
   */
  @javax.annotation.Nonnull
  public BigDecimal getOrientation() {
    return orientation;
  }

  public void setOrientation(BigDecimal orientation) {
    this.orientation = orientation;
  }


  public SetMasterExternalPayload sog(BigDecimal sog) {
    this.sog = sog;
    return this;
  }

  /**
   * Speed over ground (km/h). -1 means no data.
   * minimum: -1
   * @return sog
   */
  @javax.annotation.Nullable
  public BigDecimal getSog() {
    return sog;
  }

  public void setSog(BigDecimal sog) {
    this.sog = sog;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetMasterExternalPayload setMasterExternalPayload = (SetMasterExternalPayload) o;
    return Objects.equals(this.cog, setMasterExternalPayload.cog) &&
        Objects.equals(this.fixQuality, setMasterExternalPayload.fixQuality) &&
        Objects.equals(this.hdop, setMasterExternalPayload.hdop) &&
        Objects.equals(this.lat, setMasterExternalPayload.lat) &&
        Objects.equals(this.lon, setMasterExternalPayload.lon) &&
        Objects.equals(this.numsats, setMasterExternalPayload.numsats) &&
        Objects.equals(this.orientation, setMasterExternalPayload.orientation) &&
        Objects.equals(this.sog, setMasterExternalPayload.sog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cog, fixQuality, hdop, lat, lon, numsats, orientation, sog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetMasterExternalPayload {\n");
    sb.append("    cog: ").append(toIndentedString(cog)).append("\n");
    sb.append("    fixQuality: ").append(toIndentedString(fixQuality)).append("\n");
    sb.append("    hdop: ").append(toIndentedString(hdop)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    numsats: ").append(toIndentedString(numsats)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    sog: ").append(toIndentedString(sog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cog");
    openapiFields.add("fix_quality");
    openapiFields.add("hdop");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("numsats");
    openapiFields.add("orientation");
    openapiFields.add("sog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lat");
    openapiRequiredFields.add("lon");
    openapiRequiredFields.add("orientation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetMasterExternalPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetMasterExternalPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetMasterExternalPayload is not found in the empty JSON string", SetMasterExternalPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetMasterExternalPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetMasterExternalPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SetMasterExternalPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetMasterExternalPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetMasterExternalPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetMasterExternalPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetMasterExternalPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<SetMasterExternalPayload>() {
           @Override
           public void write(JsonWriter out, SetMasterExternalPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetMasterExternalPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetMasterExternalPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetMasterExternalPayload
   * @throws IOException if the JSON string is invalid with respect to SetMasterExternalPayload
   */
  public static SetMasterExternalPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetMasterExternalPayload.class);
  }

  /**
   * Convert an instance of SetMasterExternalPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

