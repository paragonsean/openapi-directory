/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Current relative Locator position (default view)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:36.739042-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterlinkedAccousticPosition {
  public static final String SERIALIZED_NAME_POSITION_VALID = "position_valid";
  @SerializedName(SERIALIZED_NAME_POSITION_VALID)
  private Boolean positionValid;

  public static final String SERIALIZED_NAME_RECEIVER_DISTANCE = "receiver_distance";
  @SerializedName(SERIALIZED_NAME_RECEIVER_DISTANCE)
  private List<Double> receiverDistance = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECEIVER_NSD = "receiver_nsd";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NSD)
  private List<Double> receiverNsd = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECEIVER_RSSI = "receiver_rssi";
  @SerializedName(SERIALIZED_NAME_RECEIVER_RSSI)
  private List<Double> receiverRssi = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECEIVER_VALID = "receiver_valid";
  @SerializedName(SERIALIZED_NAME_RECEIVER_VALID)
  private List<Double> receiverValid = new ArrayList<>();

  public static final String SERIALIZED_NAME_STD = "std";
  @SerializedName(SERIALIZED_NAME_STD)
  private BigDecimal std;

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private Double x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private Double y;

  public static final String SERIALIZED_NAME_Z = "z";
  @SerializedName(SERIALIZED_NAME_Z)
  private BigDecimal z;

  public WaterlinkedAccousticPosition() {
  }

  public WaterlinkedAccousticPosition positionValid(Boolean positionValid) {
    this.positionValid = positionValid;
    return this;
  }

  /**
   * Is current position valid or not
   * @return positionValid
   */
  @javax.annotation.Nonnull
  public Boolean getPositionValid() {
    return positionValid;
  }

  public void setPositionValid(Boolean positionValid) {
    this.positionValid = positionValid;
  }


  public WaterlinkedAccousticPosition receiverDistance(List<Double> receiverDistance) {
    this.receiverDistance = receiverDistance;
    return this;
  }

  public WaterlinkedAccousticPosition addReceiverDistanceItem(Double receiverDistanceItem) {
    if (this.receiverDistance == null) {
      this.receiverDistance = new ArrayList<>();
    }
    this.receiverDistance.add(receiverDistanceItem);
    return this;
  }

  /**
   * Measured distance to the locator for each receiver
   * @return receiverDistance
   */
  @javax.annotation.Nonnull
  public List<Double> getReceiverDistance() {
    return receiverDistance;
  }

  public void setReceiverDistance(List<Double> receiverDistance) {
    this.receiverDistance = receiverDistance;
  }


  public WaterlinkedAccousticPosition receiverNsd(List<Double> receiverNsd) {
    this.receiverNsd = receiverNsd;
    return this;
  }

  public WaterlinkedAccousticPosition addReceiverNsdItem(Double receiverNsdItem) {
    if (this.receiverNsd == null) {
      this.receiverNsd = new ArrayList<>();
    }
    this.receiverNsd.add(receiverNsdItem);
    return this;
  }

  /**
   * Measured NSD for each receiver
   * @return receiverNsd
   */
  @javax.annotation.Nonnull
  public List<Double> getReceiverNsd() {
    return receiverNsd;
  }

  public void setReceiverNsd(List<Double> receiverNsd) {
    this.receiverNsd = receiverNsd;
  }


  public WaterlinkedAccousticPosition receiverRssi(List<Double> receiverRssi) {
    this.receiverRssi = receiverRssi;
    return this;
  }

  public WaterlinkedAccousticPosition addReceiverRssiItem(Double receiverRssiItem) {
    if (this.receiverRssi == null) {
      this.receiverRssi = new ArrayList<>();
    }
    this.receiverRssi.add(receiverRssiItem);
    return this;
  }

  /**
   * Measured RSSI for each receiver
   * @return receiverRssi
   */
  @javax.annotation.Nonnull
  public List<Double> getReceiverRssi() {
    return receiverRssi;
  }

  public void setReceiverRssi(List<Double> receiverRssi) {
    this.receiverRssi = receiverRssi;
  }


  public WaterlinkedAccousticPosition receiverValid(List<Double> receiverValid) {
    this.receiverValid = receiverValid;
    return this;
  }

  public WaterlinkedAccousticPosition addReceiverValidItem(Double receiverValidItem) {
    if (this.receiverValid == null) {
      this.receiverValid = new ArrayList<>();
    }
    this.receiverValid.add(receiverValidItem);
    return this;
  }

  /**
   * Is signal valid or not for each receiver
   * @return receiverValid
   */
  @javax.annotation.Nonnull
  public List<Double> getReceiverValid() {
    return receiverValid;
  }

  public void setReceiverValid(List<Double> receiverValid) {
    this.receiverValid = receiverValid;
  }


  public WaterlinkedAccousticPosition std(BigDecimal std) {
    this.std = std;
    return this;
  }

  /**
   * Current acoustic position accuracy (meter)
   * minimum: 0
   * @return std
   */
  @javax.annotation.Nonnull
  public BigDecimal getStd() {
    return std;
  }

  public void setStd(BigDecimal std) {
    this.std = std;
  }


  public WaterlinkedAccousticPosition x(Double x) {
    this.x = x;
    return this;
  }

  /**
   * Current acoustic x position relative to master electronics (meter)
   * @return x
   */
  @javax.annotation.Nonnull
  public Double getX() {
    return x;
  }

  public void setX(Double x) {
    this.x = x;
  }


  public WaterlinkedAccousticPosition y(Double y) {
    this.y = y;
    return this;
  }

  /**
   * Current acoustic y position relative to master electronics (meter)
   * @return y
   */
  @javax.annotation.Nonnull
  public Double getY() {
    return y;
  }

  public void setY(Double y) {
    this.y = y;
  }


  public WaterlinkedAccousticPosition z(BigDecimal z) {
    this.z = z;
    return this;
  }

  /**
   * Current acoustic z position (depth) relative to master electronics (meter)
   * minimum: 0
   * @return z
   */
  @javax.annotation.Nonnull
  public BigDecimal getZ() {
    return z;
  }

  public void setZ(BigDecimal z) {
    this.z = z;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterlinkedAccousticPosition waterlinkedAccousticPosition = (WaterlinkedAccousticPosition) o;
    return Objects.equals(this.positionValid, waterlinkedAccousticPosition.positionValid) &&
        Objects.equals(this.receiverDistance, waterlinkedAccousticPosition.receiverDistance) &&
        Objects.equals(this.receiverNsd, waterlinkedAccousticPosition.receiverNsd) &&
        Objects.equals(this.receiverRssi, waterlinkedAccousticPosition.receiverRssi) &&
        Objects.equals(this.receiverValid, waterlinkedAccousticPosition.receiverValid) &&
        Objects.equals(this.std, waterlinkedAccousticPosition.std) &&
        Objects.equals(this.x, waterlinkedAccousticPosition.x) &&
        Objects.equals(this.y, waterlinkedAccousticPosition.y) &&
        Objects.equals(this.z, waterlinkedAccousticPosition.z);
  }

  @Override
  public int hashCode() {
    return Objects.hash(positionValid, receiverDistance, receiverNsd, receiverRssi, receiverValid, std, x, y, z);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterlinkedAccousticPosition {\n");
    sb.append("    positionValid: ").append(toIndentedString(positionValid)).append("\n");
    sb.append("    receiverDistance: ").append(toIndentedString(receiverDistance)).append("\n");
    sb.append("    receiverNsd: ").append(toIndentedString(receiverNsd)).append("\n");
    sb.append("    receiverRssi: ").append(toIndentedString(receiverRssi)).append("\n");
    sb.append("    receiverValid: ").append(toIndentedString(receiverValid)).append("\n");
    sb.append("    std: ").append(toIndentedString(std)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    z: ").append(toIndentedString(z)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position_valid");
    openapiFields.add("receiver_distance");
    openapiFields.add("receiver_nsd");
    openapiFields.add("receiver_rssi");
    openapiFields.add("receiver_valid");
    openapiFields.add("std");
    openapiFields.add("x");
    openapiFields.add("y");
    openapiFields.add("z");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("position_valid");
    openapiRequiredFields.add("receiver_distance");
    openapiRequiredFields.add("receiver_nsd");
    openapiRequiredFields.add("receiver_rssi");
    openapiRequiredFields.add("receiver_valid");
    openapiRequiredFields.add("std");
    openapiRequiredFields.add("x");
    openapiRequiredFields.add("y");
    openapiRequiredFields.add("z");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterlinkedAccousticPosition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterlinkedAccousticPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterlinkedAccousticPosition is not found in the empty JSON string", WaterlinkedAccousticPosition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterlinkedAccousticPosition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterlinkedAccousticPosition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaterlinkedAccousticPosition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("receiver_distance") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("receiver_distance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_distance` to be an array in the JSON string but got `%s`", jsonObj.get("receiver_distance").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("receiver_nsd") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("receiver_nsd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_nsd` to be an array in the JSON string but got `%s`", jsonObj.get("receiver_nsd").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("receiver_rssi") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("receiver_rssi").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_rssi` to be an array in the JSON string but got `%s`", jsonObj.get("receiver_rssi").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("receiver_valid") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("receiver_valid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_valid` to be an array in the JSON string but got `%s`", jsonObj.get("receiver_valid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterlinkedAccousticPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterlinkedAccousticPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterlinkedAccousticPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterlinkedAccousticPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterlinkedAccousticPosition>() {
           @Override
           public void write(JsonWriter out, WaterlinkedAccousticPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterlinkedAccousticPosition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterlinkedAccousticPosition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterlinkedAccousticPosition
   * @throws IOException if the JSON string is invalid with respect to WaterlinkedAccousticPosition
   */
  public static WaterlinkedAccousticPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterlinkedAccousticPosition.class);
  }

  /**
   * Convert an instance of WaterlinkedAccousticPosition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

