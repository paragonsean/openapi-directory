/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreatePoiPayload;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.UpdatePoiPayload;
import org.openapitools.client.model.WaterlinkedPoi;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoiApi
 */
@Disabled
public class PoiApiTest {

    private final PoiApi api = new PoiApi();

    /**
     * Create poi
     *
     * Create a new POI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poiCreateTest() throws ApiException {
        CreatePoiPayload payload = null;
        api.poiCreate(payload);
        // TODO: test validations
    }

    /**
     * Delete poi
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poiDeleteTest() throws ApiException {
        Integer ID = null;
        api.poiDelete(ID);
        // TODO: test validations
    }

    /**
     * List poi
     *
     * List all points of interest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poiListTest() throws ApiException {
        List<WaterlinkedPoi> response = api.poiList();
        // TODO: test validations
    }

    /**
     * Show poi
     *
     * Get a POI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poiShowTest() throws ApiException {
        Integer ID = null;
        WaterlinkedPoi response = api.poiShow(ID);
        // TODO: test validations
    }

    /**
     * Update poi
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poiUpdateTest() throws ApiException {
        Integer ID = null;
        UpdatePoiPayload payload = null;
        api.poiUpdate(ID, payload);
        // TODO: test validations
    }

}
