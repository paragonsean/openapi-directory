/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SetDepthExternalPayload;
import org.openapitools.client.model.SetMasterExternalPayload;
import org.openapitools.client.model.SetOrientationExternalPayload;
import org.openapitools.client.model.SetVehicleIMUExternalPayload;
import org.openapitools.client.model.WaterlinkedOperationResponse;
import org.openapitools.client.model.WlExternalLocatorOrientation;
import org.openapitools.client.model.WlExternalVehicleImu;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalApi
 */
@Disabled
public class ExternalApiTest {

    private final ExternalApi api = new ExternalApi();

    /**
     * GetOrientation external
     *
     * Get orientation of Vehicle/ROV/Locator set by SetOrientation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalGetOrientationTest() throws ApiException {
        WlExternalLocatorOrientation response = api.externalGetOrientation();
        // TODO: test validations
    }

    /**
     * GetVehicleIMU external
     *
     * [DEPRECATED]Get rotation and acceleration of vehicle Locator is mounted on which was previously set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalGetVehicleIMUTest() throws ApiException {
        WlExternalVehicleImu response = api.externalGetVehicleIMU();
        // TODO: test validations
    }

    /**
     * SetDepth external
     *
     * Set depth from external source. If Locator A1 is used, this is required to get a position
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalSetDepthTest() throws ApiException {
        SetDepthExternalPayload payload = null;
        WaterlinkedOperationResponse response = api.externalSetDepth(payload);
        // TODO: test validations
    }

    /**
     * SetMaster external
     *
     * Set current global position of master electronics from external source. Values are only used if GPS mode is set to use external GPS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalSetMasterTest() throws ApiException {
        SetMasterExternalPayload payload = null;
        WaterlinkedOperationResponse response = api.externalSetMaster(payload);
        // TODO: test validations
    }

    /**
     * SetOrientation external
     *
     * Set orientation/compass heading of Vehicle/ROV/Locator. This is used only for visualization in GUI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalSetOrientationTest() throws ApiException {
        SetOrientationExternalPayload payload = null;
        WaterlinkedOperationResponse response = api.externalSetOrientation(payload);
        // TODO: test validations
    }

    /**
     * SetVehicleIMU external
     *
     * [DEPRECATED]Set rotation and acceleration of vehicle Locator is mounted on. This is used to improve positioning of vehicle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalSetVehicleIMUTest() throws ApiException {
        SetVehicleIMUExternalPayload payload = null;
        WaterlinkedOperationResponse response = api.externalSetVehicleIMU(payload);
        // TODO: test validations
    }

}
