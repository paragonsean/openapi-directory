/*
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for WaterlinkedConfiguration
 */
public class WaterlinkedConfigurationTest {
    private final WaterlinkedConfiguration model = new WaterlinkedConfiguration();

    /**
     * Model tests for WaterlinkedConfiguration
     */
    @Test
    public void testWaterlinkedConfiguration() {
        // TODO: test WaterlinkedConfiguration
    }

    /**
     * Test the property 'antennaEnabled'
     */
    @Test
    public void antennaEnabledTest() {
        // TODO: test antennaEnabled
    }

    /**
     * Test the property 'channel'
     */
    @Test
    public void channelTest() {
        // TODO: test channel
    }

    /**
     * Test the property 'compass'
     */
    @Test
    public void compassTest() {
        // TODO: test compass
    }

    /**
     * Test the property 'environment'
     */
    @Test
    public void environmentTest() {
        // TODO: test environment
    }

    /**
     * Test the property 'externalPpsEnabled'
     */
    @Test
    public void externalPpsEnabledTest() {
        // TODO: test externalPpsEnabled
    }

    /**
     * Test the property 'gps'
     */
    @Test
    public void gpsTest() {
        // TODO: test gps
    }

    /**
     * Test the property 'imuVehicleEnabled'
     */
    @Test
    public void imuVehicleEnabledTest() {
        // TODO: test imuVehicleEnabled
    }

    /**
     * Test the property 'locatorType'
     */
    @Test
    public void locatorTypeTest() {
        // TODO: test locatorType
    }

    /**
     * Test the property 'rangeMaxX'
     */
    @Test
    public void rangeMaxXTest() {
        // TODO: test rangeMaxX
    }

    /**
     * Test the property 'rangeMaxY'
     */
    @Test
    public void rangeMaxYTest() {
        // TODO: test rangeMaxY
    }

    /**
     * Test the property 'rangeMaxZ'
     */
    @Test
    public void rangeMaxZTest() {
        // TODO: test rangeMaxZ
    }

    /**
     * Test the property 'rangeMinX'
     */
    @Test
    public void rangeMinXTest() {
        // TODO: test rangeMinX
    }

    /**
     * Test the property 'rangeMinY'
     */
    @Test
    public void rangeMinYTest() {
        // TODO: test rangeMinY
    }

    /**
     * Test the property 'searchDirection'
     */
    @Test
    public void searchDirectionTest() {
        // TODO: test searchDirection
    }

    /**
     * Test the property 'searchRadius'
     */
    @Test
    public void searchRadiusTest() {
        // TODO: test searchRadius
    }

    /**
     * Test the property 'searchSector'
     */
    @Test
    public void searchSectorTest() {
        // TODO: test searchSector
    }

    /**
     * Test the property 'speedOfSound'
     */
    @Test
    public void speedOfSoundTest() {
        // TODO: test speedOfSound
    }

    /**
     * Test the property 'staticLat'
     */
    @Test
    public void staticLatTest() {
        // TODO: test staticLat
    }

    /**
     * Test the property 'staticLon'
     */
    @Test
    public void staticLonTest() {
        // TODO: test staticLon
    }

    /**
     * Test the property 'staticOrientation'
     */
    @Test
    public void staticOrientationTest() {
        // TODO: test staticOrientation
    }

}
