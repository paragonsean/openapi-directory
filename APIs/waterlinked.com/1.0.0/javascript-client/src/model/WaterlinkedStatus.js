/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WaterlinkedStatus model module.
 * @module model/WaterlinkedStatus
 * @version 1.0.0
 */
class WaterlinkedStatus {
    /**
     * Constructs a new <code>WaterlinkedStatus</code>.
     * Status information (default view)
     * @alias module:model/WaterlinkedStatus
     * @param battery {Number} Locator battery level in percent. -1 if not available or applicable
     * @param gps {Number} GPS lock status
     * @param imu {Number} IMU calibration status
     */
    constructor(battery, gps, imu) { 
        
        WaterlinkedStatus.initialize(this, battery, gps, imu);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, battery, gps, imu) { 
        obj['battery'] = battery;
        obj['gps'] = gps;
        obj['imu'] = imu;
    }

    /**
     * Constructs a <code>WaterlinkedStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterlinkedStatus} obj Optional instance to populate.
     * @return {module:model/WaterlinkedStatus} The populated <code>WaterlinkedStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterlinkedStatus();

            if (data.hasOwnProperty('battery')) {
                obj['battery'] = ApiClient.convertToType(data['battery'], 'Number');
            }
            if (data.hasOwnProperty('gps')) {
                obj['gps'] = ApiClient.convertToType(data['gps'], 'Number');
            }
            if (data.hasOwnProperty('imu')) {
                obj['imu'] = ApiClient.convertToType(data['imu'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterlinkedStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterlinkedStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaterlinkedStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

WaterlinkedStatus.RequiredProperties = ["battery", "gps", "imu"];

/**
 * Locator battery level in percent. -1 if not available or applicable
 * @member {Number} battery
 */
WaterlinkedStatus.prototype['battery'] = undefined;

/**
 * GPS lock status
 * @member {Number} gps
 */
WaterlinkedStatus.prototype['gps'] = undefined;

/**
 * IMU calibration status
 * @member {Number} imu
 */
WaterlinkedStatus.prototype['imu'] = undefined;






export default WaterlinkedStatus;

