/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WaterlinkedIpConfig model module.
 * @module model/WaterlinkedIpConfig
 * @version 1.0.0
 */
class WaterlinkedIpConfig {
    /**
     * Constructs a new <code>WaterlinkedIpConfig</code>.
     * Configuration parameters (default view)
     * @alias module:model/WaterlinkedIpConfig
     * @param address {String} IP address to use
     * @param dhcp {Boolean} DHCP to use
     * @param dns {String} DNS to use
     * @param gateway {String} Gateway to use
     * @param prefix {Number} Prefix to use
     */
    constructor(address, dhcp, dns, gateway, prefix) { 
        
        WaterlinkedIpConfig.initialize(this, address, dhcp, dns, gateway, prefix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, dhcp, dns, gateway, prefix) { 
        obj['address'] = address;
        obj['dhcp'] = dhcp;
        obj['dns'] = dns;
        obj['gateway'] = gateway;
        obj['prefix'] = prefix;
    }

    /**
     * Constructs a <code>WaterlinkedIpConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterlinkedIpConfig} obj Optional instance to populate.
     * @return {module:model/WaterlinkedIpConfig} The populated <code>WaterlinkedIpConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterlinkedIpConfig();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('dhcp')) {
                obj['dhcp'] = ApiClient.convertToType(data['dhcp'], 'Boolean');
            }
            if (data.hasOwnProperty('dns')) {
                obj['dns'] = ApiClient.convertToType(data['dns'], 'String');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterlinkedIpConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterlinkedIpConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaterlinkedIpConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['dns'] && !(typeof data['dns'] === 'string' || data['dns'] instanceof String)) {
            throw new Error("Expected the field `dns` to be a primitive type in the JSON string but got " + data['dns']);
        }
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }

        return true;
    }


}

WaterlinkedIpConfig.RequiredProperties = ["address", "dhcp", "dns", "gateway", "prefix"];

/**
 * IP address to use
 * @member {String} address
 */
WaterlinkedIpConfig.prototype['address'] = undefined;

/**
 * DHCP to use
 * @member {Boolean} dhcp
 */
WaterlinkedIpConfig.prototype['dhcp'] = undefined;

/**
 * DNS to use
 * @member {String} dns
 */
WaterlinkedIpConfig.prototype['dns'] = undefined;

/**
 * Gateway to use
 * @member {String} gateway
 */
WaterlinkedIpConfig.prototype['gateway'] = undefined;

/**
 * Prefix to use
 * @member {Number} prefix
 */
WaterlinkedIpConfig.prototype['prefix'] = undefined;






export default WaterlinkedIpConfig;

