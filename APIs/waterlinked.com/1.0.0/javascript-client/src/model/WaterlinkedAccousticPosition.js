/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WaterlinkedAccousticPosition model module.
 * @module model/WaterlinkedAccousticPosition
 * @version 1.0.0
 */
class WaterlinkedAccousticPosition {
    /**
     * Constructs a new <code>WaterlinkedAccousticPosition</code>.
     * Current relative Locator position (default view)
     * @alias module:model/WaterlinkedAccousticPosition
     * @param positionValid {Boolean} Is current position valid or not
     * @param receiverDistance {Array.<Number>} Measured distance to the locator for each receiver
     * @param receiverNsd {Array.<Number>} Measured NSD for each receiver
     * @param receiverRssi {Array.<Number>} Measured RSSI for each receiver
     * @param receiverValid {Array.<Number>} Is signal valid or not for each receiver
     * @param std {Number} Current acoustic position accuracy (meter)
     * @param x {Number} Current acoustic x position relative to master electronics (meter)
     * @param y {Number} Current acoustic y position relative to master electronics (meter)
     * @param z {Number} Current acoustic z position (depth) relative to master electronics (meter)
     */
    constructor(positionValid, receiverDistance, receiverNsd, receiverRssi, receiverValid, std, x, y, z) { 
        
        WaterlinkedAccousticPosition.initialize(this, positionValid, receiverDistance, receiverNsd, receiverRssi, receiverValid, std, x, y, z);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, positionValid, receiverDistance, receiverNsd, receiverRssi, receiverValid, std, x, y, z) { 
        obj['position_valid'] = positionValid;
        obj['receiver_distance'] = receiverDistance;
        obj['receiver_nsd'] = receiverNsd;
        obj['receiver_rssi'] = receiverRssi;
        obj['receiver_valid'] = receiverValid;
        obj['std'] = std;
        obj['x'] = x;
        obj['y'] = y;
        obj['z'] = z;
    }

    /**
     * Constructs a <code>WaterlinkedAccousticPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterlinkedAccousticPosition} obj Optional instance to populate.
     * @return {module:model/WaterlinkedAccousticPosition} The populated <code>WaterlinkedAccousticPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterlinkedAccousticPosition();

            if (data.hasOwnProperty('position_valid')) {
                obj['position_valid'] = ApiClient.convertToType(data['position_valid'], 'Boolean');
            }
            if (data.hasOwnProperty('receiver_distance')) {
                obj['receiver_distance'] = ApiClient.convertToType(data['receiver_distance'], ['Number']);
            }
            if (data.hasOwnProperty('receiver_nsd')) {
                obj['receiver_nsd'] = ApiClient.convertToType(data['receiver_nsd'], ['Number']);
            }
            if (data.hasOwnProperty('receiver_rssi')) {
                obj['receiver_rssi'] = ApiClient.convertToType(data['receiver_rssi'], ['Number']);
            }
            if (data.hasOwnProperty('receiver_valid')) {
                obj['receiver_valid'] = ApiClient.convertToType(data['receiver_valid'], ['Number']);
            }
            if (data.hasOwnProperty('std')) {
                obj['std'] = ApiClient.convertToType(data['std'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('z')) {
                obj['z'] = ApiClient.convertToType(data['z'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterlinkedAccousticPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterlinkedAccousticPosition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaterlinkedAccousticPosition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['receiver_distance'])) {
            throw new Error("Expected the field `receiver_distance` to be an array in the JSON data but got " + data['receiver_distance']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['receiver_nsd'])) {
            throw new Error("Expected the field `receiver_nsd` to be an array in the JSON data but got " + data['receiver_nsd']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['receiver_rssi'])) {
            throw new Error("Expected the field `receiver_rssi` to be an array in the JSON data but got " + data['receiver_rssi']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['receiver_valid'])) {
            throw new Error("Expected the field `receiver_valid` to be an array in the JSON data but got " + data['receiver_valid']);
        }

        return true;
    }


}

WaterlinkedAccousticPosition.RequiredProperties = ["position_valid", "receiver_distance", "receiver_nsd", "receiver_rssi", "receiver_valid", "std", "x", "y", "z"];

/**
 * Is current position valid or not
 * @member {Boolean} position_valid
 */
WaterlinkedAccousticPosition.prototype['position_valid'] = undefined;

/**
 * Measured distance to the locator for each receiver
 * @member {Array.<Number>} receiver_distance
 */
WaterlinkedAccousticPosition.prototype['receiver_distance'] = undefined;

/**
 * Measured NSD for each receiver
 * @member {Array.<Number>} receiver_nsd
 */
WaterlinkedAccousticPosition.prototype['receiver_nsd'] = undefined;

/**
 * Measured RSSI for each receiver
 * @member {Array.<Number>} receiver_rssi
 */
WaterlinkedAccousticPosition.prototype['receiver_rssi'] = undefined;

/**
 * Is signal valid or not for each receiver
 * @member {Array.<Number>} receiver_valid
 */
WaterlinkedAccousticPosition.prototype['receiver_valid'] = undefined;

/**
 * Current acoustic position accuracy (meter)
 * @member {Number} std
 */
WaterlinkedAccousticPosition.prototype['std'] = undefined;

/**
 * Current acoustic x position relative to master electronics (meter)
 * @member {Number} x
 */
WaterlinkedAccousticPosition.prototype['x'] = undefined;

/**
 * Current acoustic y position relative to master electronics (meter)
 * @member {Number} y
 */
WaterlinkedAccousticPosition.prototype['y'] = undefined;

/**
 * Current acoustic z position (depth) relative to master electronics (meter)
 * @member {Number} z
 */
WaterlinkedAccousticPosition.prototype['z'] = undefined;






export default WaterlinkedAccousticPosition;

