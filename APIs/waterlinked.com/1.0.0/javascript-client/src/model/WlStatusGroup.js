/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WlStatusGroup model module.
 * @module model/WlStatusGroup
 * @version 1.0.0
 */
class WlStatusGroup {
    /**
     * Constructs a new <code>WlStatusGroup</code>.
     * Current status from one specific status group (default view)
     * @alias module:model/WlStatusGroup
     * @param errorIds {Array.<String>} Identifiers for warnings/errors
     * @param message {String} Message
     * @param status {module:model/WlStatusGroup.StatusEnum} Status
     * @param statusGroup {String} Status group friendly name
     * @param statusGroupId {String} Status group identifier
     */
    constructor(errorIds, message, status, statusGroup, statusGroupId) { 
        
        WlStatusGroup.initialize(this, errorIds, message, status, statusGroup, statusGroupId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorIds, message, status, statusGroup, statusGroupId) { 
        obj['error_ids'] = errorIds;
        obj['message'] = message;
        obj['status'] = status;
        obj['status_group'] = statusGroup;
        obj['status_group_id'] = statusGroupId;
    }

    /**
     * Constructs a <code>WlStatusGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WlStatusGroup} obj Optional instance to populate.
     * @return {module:model/WlStatusGroup} The populated <code>WlStatusGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WlStatusGroup();

            if (data.hasOwnProperty('error_ids')) {
                obj['error_ids'] = ApiClient.convertToType(data['error_ids'], ['String']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_group')) {
                obj['status_group'] = ApiClient.convertToType(data['status_group'], 'String');
            }
            if (data.hasOwnProperty('status_group_id')) {
                obj['status_group_id'] = ApiClient.convertToType(data['status_group_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WlStatusGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WlStatusGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WlStatusGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['error_ids'])) {
            throw new Error("Expected the field `error_ids` to be an array in the JSON data but got " + data['error_ids']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_group'] && !(typeof data['status_group'] === 'string' || data['status_group'] instanceof String)) {
            throw new Error("Expected the field `status_group` to be a primitive type in the JSON string but got " + data['status_group']);
        }
        // ensure the json data is a string
        if (data['status_group_id'] && !(typeof data['status_group_id'] === 'string' || data['status_group_id'] instanceof String)) {
            throw new Error("Expected the field `status_group_id` to be a primitive type in the JSON string but got " + data['status_group_id']);
        }

        return true;
    }


}

WlStatusGroup.RequiredProperties = ["error_ids", "message", "status", "status_group", "status_group_id"];

/**
 * Identifiers for warnings/errors
 * @member {Array.<String>} error_ids
 */
WlStatusGroup.prototype['error_ids'] = undefined;

/**
 * Message
 * @member {String} message
 */
WlStatusGroup.prototype['message'] = undefined;

/**
 * Status
 * @member {module:model/WlStatusGroup.StatusEnum} status
 */
WlStatusGroup.prototype['status'] = undefined;

/**
 * Status group friendly name
 * @member {String} status_group
 */
WlStatusGroup.prototype['status_group'] = undefined;

/**
 * Status group identifier
 * @member {String} status_group_id
 */
WlStatusGroup.prototype['status_group_id'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WlStatusGroup['StatusEnum'] = {

    /**
     * value: "ok"
     * @const
     */
    "ok": "ok",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default WlStatusGroup;

