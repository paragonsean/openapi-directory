/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModifyWIFIConfigPayload model module.
 * @module model/ModifyWIFIConfigPayload
 * @version 1.0.0
 */
class ModifyWIFIConfigPayload {
    /**
     * Constructs a new <code>ModifyWIFIConfigPayload</code>.
     * Configuration parameters
     * @alias module:model/ModifyWIFIConfigPayload
     * @param mode {module:model/ModifyWIFIConfigPayload.ModeEnum} Which mode should the WiFi be in?
     * @param password {String} Password to use for WiFi in Client mode
     * @param ssid {String} WIFI SSID to use for WiFi in Client mode
     */
    constructor(mode, password, ssid) { 
        
        ModifyWIFIConfigPayload.initialize(this, mode, password, ssid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode, password, ssid) { 
        obj['mode'] = mode;
        obj['password'] = password;
        obj['ssid'] = ssid;
    }

    /**
     * Constructs a <code>ModifyWIFIConfigPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModifyWIFIConfigPayload} obj Optional instance to populate.
     * @return {module:model/ModifyWIFIConfigPayload} The populated <code>ModifyWIFIConfigPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModifyWIFIConfigPayload();

            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('ssid')) {
                obj['ssid'] = ApiClient.convertToType(data['ssid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModifyWIFIConfigPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModifyWIFIConfigPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModifyWIFIConfigPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['ssid'] && !(typeof data['ssid'] === 'string' || data['ssid'] instanceof String)) {
            throw new Error("Expected the field `ssid` to be a primitive type in the JSON string but got " + data['ssid']);
        }

        return true;
    }


}

ModifyWIFIConfigPayload.RequiredProperties = ["mode", "password", "ssid"];

/**
 * Which mode should the WiFi be in?
 * @member {module:model/ModifyWIFIConfigPayload.ModeEnum} mode
 */
ModifyWIFIConfigPayload.prototype['mode'] = undefined;

/**
 * Password to use for WiFi in Client mode
 * @member {String} password
 */
ModifyWIFIConfigPayload.prototype['password'] = undefined;

/**
 * WIFI SSID to use for WiFi in Client mode
 * @member {String} ssid
 */
ModifyWIFIConfigPayload.prototype['ssid'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
ModifyWIFIConfigPayload['ModeEnum'] = {

    /**
     * value: "ap"
     * @const
     */
    "ap": "ap",

    /**
     * value: "client"
     * @const
     */
    "client": "client"
};



export default ModifyWIFIConfigPayload;

