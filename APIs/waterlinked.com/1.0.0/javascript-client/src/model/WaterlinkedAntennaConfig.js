/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WaterlinkedAntennaConfig model module.
 * @module model/WaterlinkedAntennaConfig
 * @version 1.0.0
 */
class WaterlinkedAntennaConfig {
    /**
     * Constructs a new <code>WaterlinkedAntennaConfig</code>.
     * Configuration parameters for antenna set up (default view)
     * @alias module:model/WaterlinkedAntennaConfig
     * @param antennaRotation {Number} Configured rotation of antenna relative to forward arrow on topside housing. Clockwise is positive direction (degrees)
     * @param depth {Number} Configured depth relative to surface (meter)
     * @param x {Number} Configured f position relative to master electronics (meter)
     * @param y {Number} Configured Y position relative to master electronics (meter)
     */
    constructor(antennaRotation, depth, x, y) { 
        
        WaterlinkedAntennaConfig.initialize(this, antennaRotation, depth, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, antennaRotation, depth, x, y) { 
        obj['antenna_rotation'] = antennaRotation;
        obj['depth'] = depth;
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>WaterlinkedAntennaConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterlinkedAntennaConfig} obj Optional instance to populate.
     * @return {module:model/WaterlinkedAntennaConfig} The populated <code>WaterlinkedAntennaConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterlinkedAntennaConfig();

            if (data.hasOwnProperty('antenna_rotation')) {
                obj['antenna_rotation'] = ApiClient.convertToType(data['antenna_rotation'], 'Number');
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterlinkedAntennaConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterlinkedAntennaConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaterlinkedAntennaConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

WaterlinkedAntennaConfig.RequiredProperties = ["antenna_rotation", "depth", "x", "y"];

/**
 * Configured rotation of antenna relative to forward arrow on topside housing. Clockwise is positive direction (degrees)
 * @member {Number} antenna_rotation
 */
WaterlinkedAntennaConfig.prototype['antenna_rotation'] = undefined;

/**
 * Configured depth relative to surface (meter)
 * @member {Number} depth
 */
WaterlinkedAntennaConfig.prototype['depth'] = undefined;

/**
 * Configured f position relative to master electronics (meter)
 * @member {Number} x
 */
WaterlinkedAntennaConfig.prototype['x'] = undefined;

/**
 * Configured Y position relative to master electronics (meter)
 * @member {Number} y
 */
WaterlinkedAntennaConfig.prototype['y'] = undefined;






export default WaterlinkedAntennaConfig;

