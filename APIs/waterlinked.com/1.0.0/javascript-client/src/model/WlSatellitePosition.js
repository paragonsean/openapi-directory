/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WlSatellitePosition model module.
 * @module model/WlSatellitePosition
 * @version 1.0.0
 */
class WlSatellitePosition {
    /**
     * Constructs a new <code>WlSatellitePosition</code>.
     * GPS and IMU position (default view)
     * @alias module:model/WlSatellitePosition
     * @param cog {Number} Course over ground (degrees). -1 means no data.
     * @param fixQuality {Number} Fix quality. 0 if no data.
     * @param hdop {Number} Horizontal dilution of precision. -1 means no data.
     * @param lat {Number} Current Latitude
     * @param lon {Number} Current Longitude
     * @param numsats {Number} Number of satellites. -1 means no data.
     * @param orientation {Number} Current orientation/compass heading (degrees). -1 means no data.
     * @param sog {Number} Speed over ground (km/h). -1 means no data.
     */
    constructor(cog, fixQuality, hdop, lat, lon, numsats, orientation, sog) { 
        
        WlSatellitePosition.initialize(this, cog, fixQuality, hdop, lat, lon, numsats, orientation, sog);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cog, fixQuality, hdop, lat, lon, numsats, orientation, sog) { 
        obj['cog'] = cog;
        obj['fix_quality'] = fixQuality;
        obj['hdop'] = hdop;
        obj['lat'] = lat;
        obj['lon'] = lon;
        obj['numsats'] = numsats;
        obj['orientation'] = orientation;
        obj['sog'] = sog;
    }

    /**
     * Constructs a <code>WlSatellitePosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WlSatellitePosition} obj Optional instance to populate.
     * @return {module:model/WlSatellitePosition} The populated <code>WlSatellitePosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WlSatellitePosition();

            if (data.hasOwnProperty('cog')) {
                obj['cog'] = ApiClient.convertToType(data['cog'], 'Number');
            }
            if (data.hasOwnProperty('fix_quality')) {
                obj['fix_quality'] = ApiClient.convertToType(data['fix_quality'], 'Number');
            }
            if (data.hasOwnProperty('hdop')) {
                obj['hdop'] = ApiClient.convertToType(data['hdop'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('numsats')) {
                obj['numsats'] = ApiClient.convertToType(data['numsats'], 'Number');
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'Number');
            }
            if (data.hasOwnProperty('sog')) {
                obj['sog'] = ApiClient.convertToType(data['sog'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WlSatellitePosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WlSatellitePosition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WlSatellitePosition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

WlSatellitePosition.RequiredProperties = ["cog", "fix_quality", "hdop", "lat", "lon", "numsats", "orientation", "sog"];

/**
 * Course over ground (degrees). -1 means no data.
 * @member {Number} cog
 */
WlSatellitePosition.prototype['cog'] = undefined;

/**
 * Fix quality. 0 if no data.
 * @member {Number} fix_quality
 */
WlSatellitePosition.prototype['fix_quality'] = undefined;

/**
 * Horizontal dilution of precision. -1 means no data.
 * @member {Number} hdop
 */
WlSatellitePosition.prototype['hdop'] = undefined;

/**
 * Current Latitude
 * @member {Number} lat
 */
WlSatellitePosition.prototype['lat'] = undefined;

/**
 * Current Longitude
 * @member {Number} lon
 */
WlSatellitePosition.prototype['lon'] = undefined;

/**
 * Number of satellites. -1 means no data.
 * @member {Number} numsats
 */
WlSatellitePosition.prototype['numsats'] = undefined;

/**
 * Current orientation/compass heading (degrees). -1 means no data.
 * @member {Number} orientation
 */
WlSatellitePosition.prototype['orientation'] = undefined;

/**
 * Speed over ground (km/h). -1 means no data.
 * @member {Number} sog
 */
WlSatellitePosition.prototype['sog'] = undefined;






export default WlSatellitePosition;

