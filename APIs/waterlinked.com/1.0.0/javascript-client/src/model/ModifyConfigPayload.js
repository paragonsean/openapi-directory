/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModifyConfigPayload model module.
 * @module model/ModifyConfigPayload
 * @version 1.0.0
 */
class ModifyConfigPayload {
    /**
     * Constructs a new <code>ModifyConfigPayload</code>.
     * Configuration parameters
     * @alias module:model/ModifyConfigPayload
     * @param channel {Number} Channel to use
     * @param compass {module:model/ModifyConfigPayload.CompassEnum} Compass provider setting
     * @param gps {module:model/ModifyConfigPayload.GpsEnum} GPS provider setting
     * @param locatorType {module:model/ModifyConfigPayload.LocatorTypeEnum} Locator type in use
     * @param staticLat {Number} Latitude to use in static mode
     * @param staticLon {Number} Longitude to use in static mode
     * @param staticOrientation {Number} Orientation/compass reading to use in static mode (degrees)
     */
    constructor(channel, compass, gps, locatorType, staticLat, staticLon, staticOrientation) { 
        
        ModifyConfigPayload.initialize(this, channel, compass, gps, locatorType, staticLat, staticLon, staticOrientation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, compass, gps, locatorType, staticLat, staticLon, staticOrientation) { 
        obj['channel'] = channel;
        obj['compass'] = compass;
        obj['gps'] = gps;
        obj['locator_type'] = locatorType;
        obj['static_lat'] = staticLat;
        obj['static_lon'] = staticLon;
        obj['static_orientation'] = staticOrientation;
    }

    /**
     * Constructs a <code>ModifyConfigPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModifyConfigPayload} obj Optional instance to populate.
     * @return {module:model/ModifyConfigPayload} The populated <code>ModifyConfigPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModifyConfigPayload();

            if (data.hasOwnProperty('antenna_enabled')) {
                obj['antenna_enabled'] = ApiClient.convertToType(data['antenna_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'Number');
            }
            if (data.hasOwnProperty('compass')) {
                obj['compass'] = ApiClient.convertToType(data['compass'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('external_pps_enabled')) {
                obj['external_pps_enabled'] = ApiClient.convertToType(data['external_pps_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('gps')) {
                obj['gps'] = ApiClient.convertToType(data['gps'], 'String');
            }
            if (data.hasOwnProperty('imu_vehicle_enabled')) {
                obj['imu_vehicle_enabled'] = ApiClient.convertToType(data['imu_vehicle_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('locator_type')) {
                obj['locator_type'] = ApiClient.convertToType(data['locator_type'], 'String');
            }
            if (data.hasOwnProperty('range_max_x')) {
                obj['range_max_x'] = ApiClient.convertToType(data['range_max_x'], 'Number');
            }
            if (data.hasOwnProperty('range_max_y')) {
                obj['range_max_y'] = ApiClient.convertToType(data['range_max_y'], 'Number');
            }
            if (data.hasOwnProperty('range_max_z')) {
                obj['range_max_z'] = ApiClient.convertToType(data['range_max_z'], 'Number');
            }
            if (data.hasOwnProperty('range_min_x')) {
                obj['range_min_x'] = ApiClient.convertToType(data['range_min_x'], 'Number');
            }
            if (data.hasOwnProperty('range_min_y')) {
                obj['range_min_y'] = ApiClient.convertToType(data['range_min_y'], 'Number');
            }
            if (data.hasOwnProperty('search_direction')) {
                obj['search_direction'] = ApiClient.convertToType(data['search_direction'], 'Number');
            }
            if (data.hasOwnProperty('search_radius')) {
                obj['search_radius'] = ApiClient.convertToType(data['search_radius'], 'Number');
            }
            if (data.hasOwnProperty('search_sector')) {
                obj['search_sector'] = ApiClient.convertToType(data['search_sector'], 'Number');
            }
            if (data.hasOwnProperty('speed_of_sound')) {
                obj['speed_of_sound'] = ApiClient.convertToType(data['speed_of_sound'], 'Number');
            }
            if (data.hasOwnProperty('static_lat')) {
                obj['static_lat'] = ApiClient.convertToType(data['static_lat'], 'Number');
            }
            if (data.hasOwnProperty('static_lon')) {
                obj['static_lon'] = ApiClient.convertToType(data['static_lon'], 'Number');
            }
            if (data.hasOwnProperty('static_orientation')) {
                obj['static_orientation'] = ApiClient.convertToType(data['static_orientation'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModifyConfigPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModifyConfigPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModifyConfigPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['compass'] && !(typeof data['compass'] === 'string' || data['compass'] instanceof String)) {
            throw new Error("Expected the field `compass` to be a primitive type in the JSON string but got " + data['compass']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['gps'] && !(typeof data['gps'] === 'string' || data['gps'] instanceof String)) {
            throw new Error("Expected the field `gps` to be a primitive type in the JSON string but got " + data['gps']);
        }
        // ensure the json data is a string
        if (data['locator_type'] && !(typeof data['locator_type'] === 'string' || data['locator_type'] instanceof String)) {
            throw new Error("Expected the field `locator_type` to be a primitive type in the JSON string but got " + data['locator_type']);
        }

        return true;
    }


}

ModifyConfigPayload.RequiredProperties = ["channel", "compass", "gps", "locator_type", "static_lat", "static_lon", "static_orientation"];

/**
 * Enable use of antenna
 * @member {Boolean} antenna_enabled
 */
ModifyConfigPayload.prototype['antenna_enabled'] = undefined;

/**
 * Channel to use
 * @member {Number} channel
 */
ModifyConfigPayload.prototype['channel'] = undefined;

/**
 * Compass provider setting
 * @member {module:model/ModifyConfigPayload.CompassEnum} compass
 */
ModifyConfigPayload.prototype['compass'] = undefined;

/**
 * [Deprecated] Environment setting
 * @member {module:model/ModifyConfigPayload.EnvironmentEnum} environment
 */
ModifyConfigPayload.prototype['environment'] = undefined;

/**
 * Enable external PPS input to master
 * @member {Boolean} external_pps_enabled
 */
ModifyConfigPayload.prototype['external_pps_enabled'] = undefined;

/**
 * GPS provider setting
 * @member {module:model/ModifyConfigPayload.GpsEnum} gps
 */
ModifyConfigPayload.prototype['gps'] = undefined;

/**
 * [Deprecated] Enable IMU input from vehicle
 * @member {Boolean} imu_vehicle_enabled
 */
ModifyConfigPayload.prototype['imu_vehicle_enabled'] = undefined;

/**
 * Locator type in use
 * @member {module:model/ModifyConfigPayload.LocatorTypeEnum} locator_type
 */
ModifyConfigPayload.prototype['locator_type'] = undefined;

/**
 * [Deprecated] Max range (meters)
 * @member {Number} range_max_x
 */
ModifyConfigPayload.prototype['range_max_x'] = undefined;

/**
 * [Deprecated] Max range (meters)
 * @member {Number} range_max_y
 */
ModifyConfigPayload.prototype['range_max_y'] = undefined;

/**
 * [Deprecated] Max range (meters)
 * @member {Number} range_max_z
 */
ModifyConfigPayload.prototype['range_max_z'] = undefined;

/**
 * [Deprecated] Max range (meters)
 * @member {Number} range_min_x
 */
ModifyConfigPayload.prototype['range_min_x'] = undefined;

/**
 * [Deprecated] Max range (meters)
 * @member {Number} range_min_y
 */
ModifyConfigPayload.prototype['range_min_y'] = undefined;

/**
 * Direction of circular search area section
 * @member {Number} search_direction
 */
ModifyConfigPayload.prototype['search_direction'] = undefined;

/**
 * Radius of circular search area
 * @member {Number} search_radius
 */
ModifyConfigPayload.prototype['search_radius'] = undefined;

/**
 * Sector angle of circular search area
 * @member {Number} search_sector
 */
ModifyConfigPayload.prototype['search_sector'] = undefined;

/**
 * Speed of sound use by the system
 * @member {Number} speed_of_sound
 */
ModifyConfigPayload.prototype['speed_of_sound'] = undefined;

/**
 * Latitude to use in static mode
 * @member {Number} static_lat
 */
ModifyConfigPayload.prototype['static_lat'] = undefined;

/**
 * Longitude to use in static mode
 * @member {Number} static_lon
 */
ModifyConfigPayload.prototype['static_lon'] = undefined;

/**
 * Orientation/compass reading to use in static mode (degrees)
 * @member {Number} static_orientation
 */
ModifyConfigPayload.prototype['static_orientation'] = undefined;





/**
 * Allowed values for the <code>compass</code> property.
 * @enum {String}
 * @readonly
 */
ModifyConfigPayload['CompassEnum'] = {

    /**
     * value: "onboard"
     * @const
     */
    "onboard": "onboard",

    /**
     * value: "static"
     * @const
     */
    "static": "static",

    /**
     * value: "external"
     * @const
     */
    "external": "external"
};


/**
 * Allowed values for the <code>environment</code> property.
 * @enum {String}
 * @readonly
 */
ModifyConfigPayload['EnvironmentEnum'] = {

    /**
     * value: "reflective"
     * @const
     */
    "reflective": "reflective",

    /**
     * value: "openwater"
     * @const
     */
    "openwater": "openwater"
};


/**
 * Allowed values for the <code>gps</code> property.
 * @enum {String}
 * @readonly
 */
ModifyConfigPayload['GpsEnum'] = {

    /**
     * value: "onboard"
     * @const
     */
    "onboard": "onboard",

    /**
     * value: "static"
     * @const
     */
    "static": "static",

    /**
     * value: "external"
     * @const
     */
    "external": "external"
};


/**
 * Allowed values for the <code>locator_type</code> property.
 * @enum {String}
 * @readonly
 */
ModifyConfigPayload['LocatorTypeEnum'] = {

    /**
     * value: "d1"
     * @const
     */
    "d1": "d1",

    /**
     * value: "a1"
     * @const
     */
    "a1": "a1",

    /**
     * value: "s2"
     * @const
     */
    "s2": "s2",

    /**
     * value: "p2"
     * @const
     */
    "p2": "p2",

    /**
     * value: "u1"
     * @const
     */
    "u1": "u1"
};



export default ModifyConfigPayload;

