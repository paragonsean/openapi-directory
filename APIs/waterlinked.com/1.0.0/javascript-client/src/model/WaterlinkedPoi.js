/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WaterlinkedPoi model module.
 * @module model/WaterlinkedPoi
 * @version 1.0.0
 */
class WaterlinkedPoi {
    /**
     * Constructs a new <code>WaterlinkedPoi</code>.
     * A list of all POI (default view)
     * @alias module:model/WaterlinkedPoi
     * @param depth {Number} Depth of POI
     * @param icon {String} Icon of POI
     * @param lat {Number} Latitude of POI
     * @param lng {Number} Longitude of POI
     * @param name {String} Name of POI
     * @param visible {Boolean} Visibility of POI
     */
    constructor(depth, icon, lat, lng, name, visible) { 
        
        WaterlinkedPoi.initialize(this, depth, icon, lat, lng, name, visible);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, depth, icon, lat, lng, name, visible) { 
        obj['depth'] = depth;
        obj['icon'] = icon;
        obj['lat'] = lat;
        obj['lng'] = lng;
        obj['name'] = name;
        obj['visible'] = visible;
    }

    /**
     * Constructs a <code>WaterlinkedPoi</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterlinkedPoi} obj Optional instance to populate.
     * @return {module:model/WaterlinkedPoi} The populated <code>WaterlinkedPoi</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterlinkedPoi();

            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterlinkedPoi</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterlinkedPoi</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaterlinkedPoi.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

WaterlinkedPoi.RequiredProperties = ["depth", "icon", "lat", "lng", "name", "visible"];

/**
 * Depth of POI
 * @member {Number} depth
 */
WaterlinkedPoi.prototype['depth'] = undefined;

/**
 * Icon of POI
 * @member {String} icon
 */
WaterlinkedPoi.prototype['icon'] = undefined;

/**
 * Unique POI id
 * @member {Number} id
 */
WaterlinkedPoi.prototype['id'] = undefined;

/**
 * Latitude of POI
 * @member {Number} lat
 */
WaterlinkedPoi.prototype['lat'] = undefined;

/**
 * Longitude of POI
 * @member {Number} lng
 */
WaterlinkedPoi.prototype['lng'] = undefined;

/**
 * Name of POI
 * @member {String} name
 */
WaterlinkedPoi.prototype['name'] = undefined;

/**
 * Visibility of POI
 * @member {Boolean} visible
 */
WaterlinkedPoi.prototype['visible'] = undefined;






export default WaterlinkedPoi;

