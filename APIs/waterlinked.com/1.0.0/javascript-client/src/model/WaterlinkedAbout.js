/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WaterlinkedAbout model module.
 * @module model/WaterlinkedAbout
 * @version 1.0.0
 */
class WaterlinkedAbout {
    /**
     * Constructs a new <code>WaterlinkedAbout</code>.
     * About information (default view)
     * @alias module:model/WaterlinkedAbout
     * @param chipid {String} Chip identifier
     * @param hardwareRevision {Number} Hardware revision
     * @param productId {Number} Product ID
     * @param productName {String} Product name
     * @param variant {String} Product variant
     * @param version {String} Detailed Web Server version string
     * @param versionShort {String} Short Web Server version string
     */
    constructor(chipid, hardwareRevision, productId, productName, variant, version, versionShort) { 
        
        WaterlinkedAbout.initialize(this, chipid, hardwareRevision, productId, productName, variant, version, versionShort);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chipid, hardwareRevision, productId, productName, variant, version, versionShort) { 
        obj['chipid'] = chipid;
        obj['hardware_revision'] = hardwareRevision;
        obj['product_id'] = productId;
        obj['product_name'] = productName;
        obj['variant'] = variant;
        obj['version'] = version;
        obj['version_short'] = versionShort;
    }

    /**
     * Constructs a <code>WaterlinkedAbout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterlinkedAbout} obj Optional instance to populate.
     * @return {module:model/WaterlinkedAbout} The populated <code>WaterlinkedAbout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterlinkedAbout();

            if (data.hasOwnProperty('chipid')) {
                obj['chipid'] = ApiClient.convertToType(data['chipid'], 'String');
            }
            if (data.hasOwnProperty('hardware_revision')) {
                obj['hardware_revision'] = ApiClient.convertToType(data['hardware_revision'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('product_name')) {
                obj['product_name'] = ApiClient.convertToType(data['product_name'], 'String');
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('version_short')) {
                obj['version_short'] = ApiClient.convertToType(data['version_short'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterlinkedAbout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterlinkedAbout</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaterlinkedAbout.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chipid'] && !(typeof data['chipid'] === 'string' || data['chipid'] instanceof String)) {
            throw new Error("Expected the field `chipid` to be a primitive type in the JSON string but got " + data['chipid']);
        }
        // ensure the json data is a string
        if (data['product_name'] && !(typeof data['product_name'] === 'string' || data['product_name'] instanceof String)) {
            throw new Error("Expected the field `product_name` to be a primitive type in the JSON string but got " + data['product_name']);
        }
        // ensure the json data is a string
        if (data['variant'] && !(typeof data['variant'] === 'string' || data['variant'] instanceof String)) {
            throw new Error("Expected the field `variant` to be a primitive type in the JSON string but got " + data['variant']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['version_short'] && !(typeof data['version_short'] === 'string' || data['version_short'] instanceof String)) {
            throw new Error("Expected the field `version_short` to be a primitive type in the JSON string but got " + data['version_short']);
        }

        return true;
    }


}

WaterlinkedAbout.RequiredProperties = ["chipid", "hardware_revision", "product_id", "product_name", "variant", "version", "version_short"];

/**
 * Chip identifier
 * @member {String} chipid
 */
WaterlinkedAbout.prototype['chipid'] = undefined;

/**
 * Hardware revision
 * @member {Number} hardware_revision
 */
WaterlinkedAbout.prototype['hardware_revision'] = undefined;

/**
 * Product ID
 * @member {Number} product_id
 */
WaterlinkedAbout.prototype['product_id'] = undefined;

/**
 * Product name
 * @member {String} product_name
 */
WaterlinkedAbout.prototype['product_name'] = undefined;

/**
 * Product variant
 * @member {String} variant
 */
WaterlinkedAbout.prototype['variant'] = undefined;

/**
 * Detailed Web Server version string
 * @member {String} version
 */
WaterlinkedAbout.prototype['version'] = undefined;

/**
 * Short Web Server version string
 * @member {String} version_short
 */
WaterlinkedAbout.prototype['version_short'] = undefined;






export default WaterlinkedAbout;

