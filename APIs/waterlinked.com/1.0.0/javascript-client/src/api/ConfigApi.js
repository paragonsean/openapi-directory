/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModifyAntennaConfigConfigPayload from '../model/ModifyAntennaConfigConfigPayload';
import ModifyConfigPayload from '../model/ModifyConfigPayload';
import ModifyIPConfigPayload from '../model/ModifyIPConfigPayload';
import ModifyReceiverConfigPayload from '../model/ModifyReceiverConfigPayload';
import ModifyWIFIConfigPayload from '../model/ModifyWIFIConfigPayload';
import WaterlinkedAntennaConfig from '../model/WaterlinkedAntennaConfig';
import WaterlinkedConfiguration from '../model/WaterlinkedConfiguration';
import WaterlinkedIpConfig from '../model/WaterlinkedIpConfig';
import WaterlinkedOperationResponse from '../model/WaterlinkedOperationResponse';
import WaterlinkedReceiver from '../model/WaterlinkedReceiver';
import WaterlinkedWifiConfig from '../model/WaterlinkedWifiConfig';

/**
* Config service.
* @module api/ConfigApi
* @version 1.0.0
*/
export default class ConfigApi {

    /**
    * Constructs a new ConfigApi. 
    * @alias module:api/ConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configGet operation.
     * @callback module:api/ConfigApi~configGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get config
     * Get generic configuration
     * @param {module:api/ConfigApi~configGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedConfiguration}
     */
    configGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.configuration+json', 'application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedConfiguration;
      return this.apiClient.callApi(
        '/api/v1/config/generic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configGetAntennaConfig operation.
     * @callback module:api/ConfigApi~configGetAntennaConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedAntennaConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetAntennaConfig config
     * Get Antenna configuration
     * @param {module:api/ConfigApi~configGetAntennaConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedAntennaConfig}
     */
    configGetAntennaConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.antenna_config+json'];
      let returnType = WaterlinkedAntennaConfig;
      return this.apiClient.callApi(
        '/api/v1/config/antenna', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configGetIP operation.
     * @callback module:api/ConfigApi~configGetIPCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedIpConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetIP config
     * Get IP configuration
     * @param {module:api/ConfigApi~configGetIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedIpConfig}
     */
    configGetIP(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.ip_config+json'];
      let returnType = WaterlinkedIpConfig;
      return this.apiClient.callApi(
        '/api/v1/config/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configGetWIFI operation.
     * @callback module:api/ConfigApi~configGetWIFICallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedWifiConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetWIFI config
     * Get WIFI configuration
     * @param {module:api/ConfigApi~configGetWIFICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedWifiConfig}
     */
    configGetWIFI(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.wifi_config+json'];
      let returnType = WaterlinkedWifiConfig;
      return this.apiClient.callApi(
        '/api/v1/config/wifi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configListReceiver operation.
     * @callback module:api/ConfigApi~configListReceiverCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WaterlinkedReceiver>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListReceiver config
     * (Re)Load current receiver settings and return them
     * @param {module:api/ConfigApi~configListReceiverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WaterlinkedReceiver>}
     */
    configListReceiver(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.receiver+json; type=collection'];
      let returnType = [WaterlinkedReceiver];
      return this.apiClient.callApi(
        '/api/v1/config/receivers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configModify operation.
     * @callback module:api/ConfigApi~configModifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify config
     * Modify generic configuration
     * @param {module:model/ModifyConfigPayload} payload Configuration parameters
     * @param {module:api/ConfigApi~configModifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    configModify(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling configModify");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/config/generic', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configModifyAntennaConfig operation.
     * @callback module:api/ConfigApi~configModifyAntennaConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ModifyAntennaConfig config
     * Modify Antenna configuration
     * @param {module:model/ModifyAntennaConfigConfigPayload} payload Configuration parameters for antenna set up
     * @param {module:api/ConfigApi~configModifyAntennaConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    configModifyAntennaConfig(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling configModifyAntennaConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/config/antenna', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configModifyIP operation.
     * @callback module:api/ConfigApi~configModifyIPCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ModifyIP config
     * Modify IP configuration
     * @param {module:model/ModifyIPConfigPayload} payload Configuration parameters
     * @param {module:api/ConfigApi~configModifyIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    configModifyIP(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling configModifyIP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/config/ip', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configModifyReceiver operation.
     * @callback module:api/ConfigApi~configModifyReceiverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ModifyReceiver config
     * Modify receiver configuration, does not apply the change until generic modify is called. Calling list will discard changes
     * @param {Number} ID Identifier
     * @param {module:model/ModifyReceiverConfigPayload} payload A receiver configuration
     * @param {module:api/ConfigApi~configModifyReceiverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configModifyReceiver(ID, payload, callback) {
      let postBody = payload;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling configModifyReceiver");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling configModifyReceiver");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/config/receivers/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configModifyWIFI operation.
     * @callback module:api/ConfigApi~configModifyWIFICallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ModifyWIFI config
     * Modify WIFI configuration
     * @param {module:model/ModifyWIFIConfigPayload} payload Configuration parameters
     * @param {module:api/ConfigApi~configModifyWIFICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    configModifyWIFI(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling configModifyWIFI");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/config/wifi', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configShowReceiver operation.
     * @callback module:api/ConfigApi~configShowReceiverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedReceiver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ShowReceiver config
     * Get receiver configuration by id
     * @param {Number} ID Identifier
     * @param {module:api/ConfigApi~configShowReceiverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedReceiver}
     */
    configShowReceiver(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling configShowReceiver");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.receiver+json'];
      let returnType = WaterlinkedReceiver;
      return this.apiClient.callApi(
        '/api/v1/config/receivers/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
