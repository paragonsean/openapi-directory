/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePoiPayload from '../model/CreatePoiPayload';
import Error from '../model/Error';
import UpdatePoiPayload from '../model/UpdatePoiPayload';
import WaterlinkedPoi from '../model/WaterlinkedPoi';

/**
* Poi service.
* @module api/PoiApi
* @version 1.0.0
*/
export default class PoiApi {

    /**
    * Constructs a new PoiApi. 
    * @alias module:api/PoiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the poiCreate operation.
     * @callback module:api/PoiApi~poiCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create poi
     * Create a new POI
     * @param {module:model/CreatePoiPayload} payload A list of all POI
     * @param {module:api/PoiApi~poiCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poiCreate(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling poiCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.goa.error'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/poi/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poiDelete operation.
     * @callback module:api/PoiApi~poiDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete poi
     * @param {Number} ID 
     * @param {module:api/PoiApi~poiDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poiDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling poiDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.goa.error'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/poi/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poiList operation.
     * @callback module:api/PoiApi~poiListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WaterlinkedPoi>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List poi
     * List all points of interest
     * @param {module:api/PoiApi~poiListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WaterlinkedPoi>}
     */
    poiList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.poi+json; type=collection'];
      let returnType = [WaterlinkedPoi];
      return this.apiClient.callApi(
        '/api/v1/poi/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poiShow operation.
     * @callback module:api/PoiApi~poiShowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedPoi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show poi
     * Get a POI
     * @param {Number} ID 
     * @param {module:api/PoiApi~poiShowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedPoi}
     */
    poiShow(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling poiShow");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.poi+json'];
      let returnType = WaterlinkedPoi;
      return this.apiClient.callApi(
        '/api/v1/poi/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poiUpdate operation.
     * @callback module:api/PoiApi~poiUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update poi
     * @param {Number} ID 
     * @param {module:model/UpdatePoiPayload} payload A list of all POI
     * @param {module:api/PoiApi~poiUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poiUpdate(ID, payload, callback) {
      let postBody = payload;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling poiUpdate");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling poiUpdate");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.goa.error'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/poi/{ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
