/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SetDepthExternalPayload from '../model/SetDepthExternalPayload';
import SetMasterExternalPayload from '../model/SetMasterExternalPayload';
import SetOrientationExternalPayload from '../model/SetOrientationExternalPayload';
import SetVehicleIMUExternalPayload from '../model/SetVehicleIMUExternalPayload';
import WaterlinkedOperationResponse from '../model/WaterlinkedOperationResponse';
import WlExternalLocatorOrientation from '../model/WlExternalLocatorOrientation';
import WlExternalVehicleImu from '../model/WlExternalVehicleImu';

/**
* External service.
* @module api/ExternalApi
* @version 1.0.0
*/
export default class ExternalApi {

    /**
    * Constructs a new ExternalApi. 
    * @alias module:api/ExternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the externalGetOrientation operation.
     * @callback module:api/ExternalApi~externalGetOrientationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WlExternalLocatorOrientation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetOrientation external
     * Get orientation of Vehicle/ROV/Locator set by SetOrientation
     * @param {module:api/ExternalApi~externalGetOrientationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WlExternalLocatorOrientation}
     */
    externalGetOrientation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.waterlinked.operation_response+json', 'application/vnd.wl.external.locator.orientation+json'];
      let returnType = WlExternalLocatorOrientation;
      return this.apiClient.callApi(
        '/api/v1/external/orientation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the externalGetVehicleIMU operation.
     * @callback module:api/ExternalApi~externalGetVehicleIMUCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WlExternalVehicleImu} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetVehicleIMU external
     * [DEPRECATED]Get rotation and acceleration of vehicle Locator is mounted on which was previously set
     * @param {module:api/ExternalApi~externalGetVehicleIMUCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WlExternalVehicleImu}
     */
    externalGetVehicleIMU(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.wl.external.vehicle.imu+json'];
      let returnType = WlExternalVehicleImu;
      return this.apiClient.callApi(
        '/api/v1/external/imu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the externalSetDepth operation.
     * @callback module:api/ExternalApi~externalSetDepthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SetDepth external
     * Set depth from external source. If Locator A1 is used, this is required to get a position
     * @param {module:model/SetDepthExternalPayload} payload Current locator depth and temperature
     * @param {module:api/ExternalApi~externalSetDepthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    externalSetDepth(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling externalSetDepth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/external/depth', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the externalSetMaster operation.
     * @callback module:api/ExternalApi~externalSetMasterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SetMaster external
     * Set current global position of master electronics from external source. Values are only used if GPS mode is set to use external GPS
     * @param {module:model/SetMasterExternalPayload} payload Global master position from external source
     * @param {module:api/ExternalApi~externalSetMasterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    externalSetMaster(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling externalSetMaster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/external/master', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the externalSetOrientation operation.
     * @callback module:api/ExternalApi~externalSetOrientationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SetOrientation external
     * Set orientation/compass heading of Vehicle/ROV/Locator. This is used only for visualization in GUI
     * @param {module:model/SetOrientationExternalPayload} payload Set current compass heading of ROV/locator
     * @param {module:api/ExternalApi~externalSetOrientationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    externalSetOrientation(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling externalSetOrientation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/external/orientation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the externalSetVehicleIMU operation.
     * @callback module:api/ExternalApi~externalSetVehicleIMUCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaterlinkedOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SetVehicleIMU external
     * [DEPRECATED]Set rotation and acceleration of vehicle Locator is mounted on. This is used to improve positioning of vehicle
     * @param {module:model/SetVehicleIMUExternalPayload} payload Set current rotation and acceleration of vehicle
     * @param {module:api/ExternalApi~externalSetVehicleIMUCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaterlinkedOperationResponse}
     */
    externalSetVehicleIMU(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling externalSetVehicleIMU");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.waterlinked.operation_response+json'];
      let returnType = WaterlinkedOperationResponse;
      return this.apiClient.callApi(
        '/api/v1/external/imu', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
