/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheWaterLinkedUnderwaterGpsApi);
  }
}(this, function(expect, TheWaterLinkedUnderwaterGpsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheWaterLinkedUnderwaterGpsApi.ConfigApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConfigApi', function() {
    describe('configGet', function() {
      it('should call configGet successfully', function(done) {
        //uncomment below and update the code to test configGet
        //instance.configGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configGetAntennaConfig', function() {
      it('should call configGetAntennaConfig successfully', function(done) {
        //uncomment below and update the code to test configGetAntennaConfig
        //instance.configGetAntennaConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configGetIP', function() {
      it('should call configGetIP successfully', function(done) {
        //uncomment below and update the code to test configGetIP
        //instance.configGetIP(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configGetWIFI', function() {
      it('should call configGetWIFI successfully', function(done) {
        //uncomment below and update the code to test configGetWIFI
        //instance.configGetWIFI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configListReceiver', function() {
      it('should call configListReceiver successfully', function(done) {
        //uncomment below and update the code to test configListReceiver
        //instance.configListReceiver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configModify', function() {
      it('should call configModify successfully', function(done) {
        //uncomment below and update the code to test configModify
        //instance.configModify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configModifyAntennaConfig', function() {
      it('should call configModifyAntennaConfig successfully', function(done) {
        //uncomment below and update the code to test configModifyAntennaConfig
        //instance.configModifyAntennaConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configModifyIP', function() {
      it('should call configModifyIP successfully', function(done) {
        //uncomment below and update the code to test configModifyIP
        //instance.configModifyIP(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configModifyReceiver', function() {
      it('should call configModifyReceiver successfully', function(done) {
        //uncomment below and update the code to test configModifyReceiver
        //instance.configModifyReceiver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configModifyWIFI', function() {
      it('should call configModifyWIFI successfully', function(done) {
        //uncomment below and update the code to test configModifyWIFI
        //instance.configModifyWIFI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configShowReceiver', function() {
      it('should call configShowReceiver successfully', function(done) {
        //uncomment below and update the code to test configShowReceiver
        //instance.configShowReceiver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
