/**
 * The Water Linked Underwater GPS API
 * API for the Water Linked Underwater GPS. For more details: http://www.waterlinked.com  Recommended approach for connecting to a Underwater GPS via the API is: - If \"GET /api/\" times out, the Underwater GPS is not running (on this IP address) - If \"GET /api/\" responds with 200 OK check that the api version returrned (eg \"v1\") is supported by the client (eg: also supports \"v1\"). - If the api version returned does not match what the client supports: give an error to the user and recommend upgrading. (Eg: response is \"v2\" while client only supports \"v1\") - If \"GET /api/\" responds with 301 Moved permanently. \"GET /api/v1/version\" to check if the kit has a version earlier than 1.5. - \"GET /api/v1/version\" will always respond with 200 OK on Underwater GPS earlier than 1.5 release.  Configuration API is is not considered stable and will potentially be changed
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheWaterLinkedUnderwaterGpsApi);
  }
}(this, function(expect, TheWaterLinkedUnderwaterGpsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WlStatusGroup', function() {
    it('should create an instance of WlStatusGroup', function() {
      // uncomment below and update the code to test WlStatusGroup
      //var instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
      //expect(instance).to.be.a(TheWaterLinkedUnderwaterGpsApi.WlStatusGroup);
    });

    it('should have the property errorIds (base name: "error_ids")', function() {
      // uncomment below and update the code to test the property errorIds
      //var instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
      //expect(instance).to.be();
    });

    it('should have the property statusGroup (base name: "status_group")', function() {
      // uncomment below and update the code to test the property statusGroup
      //var instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
      //expect(instance).to.be();
    });

    it('should have the property statusGroupId (base name: "status_group_id")', function() {
      // uncomment below and update the code to test the property statusGroupId
      //var instance = new TheWaterLinkedUnderwaterGpsApi.WlStatusGroup();
      //expect(instance).to.be();
    });

  });

}));
