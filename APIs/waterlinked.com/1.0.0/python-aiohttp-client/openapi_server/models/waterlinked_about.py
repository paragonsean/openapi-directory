# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedAbout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chipid: str=None, hardware_revision: int=None, product_id: int=None, product_name: str=None, variant: str=None, version: str=None, version_short: str=None):
        """WaterlinkedAbout - a model defined in OpenAPI

        :param chipid: The chipid of this WaterlinkedAbout.
        :param hardware_revision: The hardware_revision of this WaterlinkedAbout.
        :param product_id: The product_id of this WaterlinkedAbout.
        :param product_name: The product_name of this WaterlinkedAbout.
        :param variant: The variant of this WaterlinkedAbout.
        :param version: The version of this WaterlinkedAbout.
        :param version_short: The version_short of this WaterlinkedAbout.
        """
        self.openapi_types = {
            'chipid': str,
            'hardware_revision': int,
            'product_id': int,
            'product_name': str,
            'variant': str,
            'version': str,
            'version_short': str
        }

        self.attribute_map = {
            'chipid': 'chipid',
            'hardware_revision': 'hardware_revision',
            'product_id': 'product_id',
            'product_name': 'product_name',
            'variant': 'variant',
            'version': 'version',
            'version_short': 'version_short'
        }

        self._chipid = chipid
        self._hardware_revision = hardware_revision
        self._product_id = product_id
        self._product_name = product_name
        self._variant = variant
        self._version = version
        self._version_short = version_short

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedAbout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedAbout of this WaterlinkedAbout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chipid(self):
        """Gets the chipid of this WaterlinkedAbout.

        Chip identifier

        :return: The chipid of this WaterlinkedAbout.
        :rtype: str
        """
        return self._chipid

    @chipid.setter
    def chipid(self, chipid):
        """Sets the chipid of this WaterlinkedAbout.

        Chip identifier

        :param chipid: The chipid of this WaterlinkedAbout.
        :type chipid: str
        """
        if chipid is None:
            raise ValueError("Invalid value for `chipid`, must not be `None`")

        self._chipid = chipid

    @property
    def hardware_revision(self):
        """Gets the hardware_revision of this WaterlinkedAbout.

        Hardware revision

        :return: The hardware_revision of this WaterlinkedAbout.
        :rtype: int
        """
        return self._hardware_revision

    @hardware_revision.setter
    def hardware_revision(self, hardware_revision):
        """Sets the hardware_revision of this WaterlinkedAbout.

        Hardware revision

        :param hardware_revision: The hardware_revision of this WaterlinkedAbout.
        :type hardware_revision: int
        """
        if hardware_revision is None:
            raise ValueError("Invalid value for `hardware_revision`, must not be `None`")

        self._hardware_revision = hardware_revision

    @property
    def product_id(self):
        """Gets the product_id of this WaterlinkedAbout.

        Product ID

        :return: The product_id of this WaterlinkedAbout.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this WaterlinkedAbout.

        Product ID

        :param product_id: The product_id of this WaterlinkedAbout.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this WaterlinkedAbout.

        Product name

        :return: The product_name of this WaterlinkedAbout.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this WaterlinkedAbout.

        Product name

        :param product_name: The product_name of this WaterlinkedAbout.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def variant(self):
        """Gets the variant of this WaterlinkedAbout.

        Product variant

        :return: The variant of this WaterlinkedAbout.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this WaterlinkedAbout.

        Product variant

        :param variant: The variant of this WaterlinkedAbout.
        :type variant: str
        """
        if variant is None:
            raise ValueError("Invalid value for `variant`, must not be `None`")

        self._variant = variant

    @property
    def version(self):
        """Gets the version of this WaterlinkedAbout.

        Detailed Web Server version string

        :return: The version of this WaterlinkedAbout.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WaterlinkedAbout.

        Detailed Web Server version string

        :param version: The version of this WaterlinkedAbout.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def version_short(self):
        """Gets the version_short of this WaterlinkedAbout.

        Short Web Server version string

        :return: The version_short of this WaterlinkedAbout.
        :rtype: str
        """
        return self._version_short

    @version_short.setter
    def version_short(self, version_short):
        """Sets the version_short of this WaterlinkedAbout.

        Short Web Server version string

        :param version_short: The version_short of this WaterlinkedAbout.
        :type version_short: str
        """
        if version_short is None:
            raise ValueError("Invalid value for `version_short`, must not be `None`")

        self._version_short = version_short
