# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetVehicleIMUExternalPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pitch: float=None, roll: float=None, x: float=None, y: float=None, yaw: float=None, z: float=None):
        """SetVehicleIMUExternalPayload - a model defined in OpenAPI

        :param pitch: The pitch of this SetVehicleIMUExternalPayload.
        :param roll: The roll of this SetVehicleIMUExternalPayload.
        :param x: The x of this SetVehicleIMUExternalPayload.
        :param y: The y of this SetVehicleIMUExternalPayload.
        :param yaw: The yaw of this SetVehicleIMUExternalPayload.
        :param z: The z of this SetVehicleIMUExternalPayload.
        """
        self.openapi_types = {
            'pitch': float,
            'roll': float,
            'x': float,
            'y': float,
            'yaw': float,
            'z': float
        }

        self.attribute_map = {
            'pitch': 'pitch',
            'roll': 'roll',
            'x': 'x',
            'y': 'y',
            'yaw': 'yaw',
            'z': 'z'
        }

        self._pitch = pitch
        self._roll = roll
        self._x = x
        self._y = y
        self._yaw = yaw
        self._z = z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetVehicleIMUExternalPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetVehicleIMUExternalPayload of this SetVehicleIMUExternalPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pitch(self):
        """Gets the pitch of this SetVehicleIMUExternalPayload.

        Current pitch of vehicle(degrees).

        :return: The pitch of this SetVehicleIMUExternalPayload.
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this SetVehicleIMUExternalPayload.

        Current pitch of vehicle(degrees).

        :param pitch: The pitch of this SetVehicleIMUExternalPayload.
        :type pitch: float
        """
        if pitch is None:
            raise ValueError("Invalid value for `pitch`, must not be `None`")
        if pitch is not None and pitch > 9E+1:
            raise ValueError("Invalid value for `pitch`, must be a value less than or equal to `9E+1`")
        if pitch is not None and pitch < -9E+1:
            raise ValueError("Invalid value for `pitch`, must be a value greater than or equal to `-9E+1`")

        self._pitch = pitch

    @property
    def roll(self):
        """Gets the roll of this SetVehicleIMUExternalPayload.

        Current roll of vehicle(degrees).

        :return: The roll of this SetVehicleIMUExternalPayload.
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this SetVehicleIMUExternalPayload.

        Current roll of vehicle(degrees).

        :param roll: The roll of this SetVehicleIMUExternalPayload.
        :type roll: float
        """
        if roll is None:
            raise ValueError("Invalid value for `roll`, must not be `None`")
        if roll is not None and roll > 1.8E+2:
            raise ValueError("Invalid value for `roll`, must be a value less than or equal to `1.8E+2`")
        if roll is not None and roll < -1.8E+2:
            raise ValueError("Invalid value for `roll`, must be a value greater than or equal to `-1.8E+2`")

        self._roll = roll

    @property
    def x(self):
        """Gets the x of this SetVehicleIMUExternalPayload.

        Current acceleration in x-axis of vehicle.

        :return: The x of this SetVehicleIMUExternalPayload.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this SetVehicleIMUExternalPayload.

        Current acceleration in x-axis of vehicle.

        :param x: The x of this SetVehicleIMUExternalPayload.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")
        if x is not None and x > 2E+1:
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `2E+1`")
        if x is not None and x < -2E+1:
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `-2E+1`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this SetVehicleIMUExternalPayload.

        Current acceleration in y-axis of vehicle.

        :return: The y of this SetVehicleIMUExternalPayload.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this SetVehicleIMUExternalPayload.

        Current acceleration in y-axis of vehicle.

        :param y: The y of this SetVehicleIMUExternalPayload.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")
        if y is not None and y > 2E+1:
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `2E+1`")
        if y is not None and y < -2E+1:
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `-2E+1`")

        self._y = y

    @property
    def yaw(self):
        """Gets the yaw of this SetVehicleIMUExternalPayload.

        Current yaw of vehicle(degrees).

        :return: The yaw of this SetVehicleIMUExternalPayload.
        :rtype: float
        """
        return self._yaw

    @yaw.setter
    def yaw(self, yaw):
        """Sets the yaw of this SetVehicleIMUExternalPayload.

        Current yaw of vehicle(degrees).

        :param yaw: The yaw of this SetVehicleIMUExternalPayload.
        :type yaw: float
        """
        if yaw is None:
            raise ValueError("Invalid value for `yaw`, must not be `None`")
        if yaw is not None and yaw > 1.8E+2:
            raise ValueError("Invalid value for `yaw`, must be a value less than or equal to `1.8E+2`")
        if yaw is not None and yaw < -1.8E+2:
            raise ValueError("Invalid value for `yaw`, must be a value greater than or equal to `-1.8E+2`")

        self._yaw = yaw

    @property
    def z(self):
        """Gets the z of this SetVehicleIMUExternalPayload.

        Current acceleration in z-axis of vehicle.

        :return: The z of this SetVehicleIMUExternalPayload.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this SetVehicleIMUExternalPayload.

        Current acceleration in z-axis of vehicle.

        :param z: The z of this SetVehicleIMUExternalPayload.
        :type z: float
        """
        if z is None:
            raise ValueError("Invalid value for `z`, must not be `None`")
        if z is not None and z > 2E+1:
            raise ValueError("Invalid value for `z`, must be a value less than or equal to `2E+1`")
        if z is not None and z < -2E+1:
            raise ValueError("Invalid value for `z`, must be a value greater than or equal to `-2E+1`")

        self._z = z
