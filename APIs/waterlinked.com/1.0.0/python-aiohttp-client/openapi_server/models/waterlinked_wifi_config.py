# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedWifiConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: str=None, password: str=None, ssid: str=None):
        """WaterlinkedWifiConfig - a model defined in OpenAPI

        :param mode: The mode of this WaterlinkedWifiConfig.
        :param password: The password of this WaterlinkedWifiConfig.
        :param ssid: The ssid of this WaterlinkedWifiConfig.
        """
        self.openapi_types = {
            'mode': str,
            'password': str,
            'ssid': str
        }

        self.attribute_map = {
            'mode': 'mode',
            'password': 'password',
            'ssid': 'ssid'
        }

        self._mode = mode
        self._password = password
        self._ssid = ssid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedWifiConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedWifi_config of this WaterlinkedWifiConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this WaterlinkedWifiConfig.

        Which mode should the WiFi be in?

        :return: The mode of this WaterlinkedWifiConfig.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this WaterlinkedWifiConfig.

        Which mode should the WiFi be in?

        :param mode: The mode of this WaterlinkedWifiConfig.
        :type mode: str
        """
        allowed_values = ["ap", "client"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def password(self):
        """Gets the password of this WaterlinkedWifiConfig.

        Password to use for WiFi in Client mode

        :return: The password of this WaterlinkedWifiConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WaterlinkedWifiConfig.

        Password to use for WiFi in Client mode

        :param password: The password of this WaterlinkedWifiConfig.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def ssid(self):
        """Gets the ssid of this WaterlinkedWifiConfig.

        WIFI SSID to use for WiFi in Client mode

        :return: The ssid of this WaterlinkedWifiConfig.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this WaterlinkedWifiConfig.

        WIFI SSID to use for WiFi in Client mode

        :param ssid: The ssid of this WaterlinkedWifiConfig.
        :type ssid: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid
