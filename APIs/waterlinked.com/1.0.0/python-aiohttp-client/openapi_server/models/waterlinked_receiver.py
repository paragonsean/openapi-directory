# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, x: float=None, y: float=None, z: float=None):
        """WaterlinkedReceiver - a model defined in OpenAPI

        :param id: The id of this WaterlinkedReceiver.
        :param x: The x of this WaterlinkedReceiver.
        :param y: The y of this WaterlinkedReceiver.
        :param z: The z of this WaterlinkedReceiver.
        """
        self.openapi_types = {
            'id': int,
            'x': float,
            'y': float,
            'z': float
        }

        self.attribute_map = {
            'id': 'id',
            'x': 'x',
            'y': 'y',
            'z': 'z'
        }

        self._id = id
        self._x = x
        self._y = y
        self._z = z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedReceiver of this WaterlinkedReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this WaterlinkedReceiver.

        Unique receiver identifier

        :return: The id of this WaterlinkedReceiver.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WaterlinkedReceiver.

        Unique receiver identifier

        :param id: The id of this WaterlinkedReceiver.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def x(self):
        """Gets the x of this WaterlinkedReceiver.

        Configured X position relative to master electronics (meter)

        :return: The x of this WaterlinkedReceiver.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this WaterlinkedReceiver.

        Configured X position relative to master electronics (meter)

        :param x: The x of this WaterlinkedReceiver.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this WaterlinkedReceiver.

        Configured Y position relative to master electronics (meter)

        :return: The y of this WaterlinkedReceiver.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this WaterlinkedReceiver.

        Configured Y position relative to master electronics (meter)

        :param y: The y of this WaterlinkedReceiver.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def z(self):
        """Gets the z of this WaterlinkedReceiver.

        Configured Z position relative to master electronics (meter)

        :return: The z of this WaterlinkedReceiver.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this WaterlinkedReceiver.

        Configured Z position relative to master electronics (meter)

        :param z: The z of this WaterlinkedReceiver.
        :type z: float
        """
        if z is None:
            raise ValueError("Invalid value for `z`, must not be `None`")

        self._z = z
