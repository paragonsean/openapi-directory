# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePoiPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, depth: float=None, icon: str=None, id: int=None, lat: float=None, lng: float=None, name: str=None, visible: bool=None):
        """UpdatePoiPayload - a model defined in OpenAPI

        :param depth: The depth of this UpdatePoiPayload.
        :param icon: The icon of this UpdatePoiPayload.
        :param id: The id of this UpdatePoiPayload.
        :param lat: The lat of this UpdatePoiPayload.
        :param lng: The lng of this UpdatePoiPayload.
        :param name: The name of this UpdatePoiPayload.
        :param visible: The visible of this UpdatePoiPayload.
        """
        self.openapi_types = {
            'depth': float,
            'icon': str,
            'id': int,
            'lat': float,
            'lng': float,
            'name': str,
            'visible': bool
        }

        self.attribute_map = {
            'depth': 'depth',
            'icon': 'icon',
            'id': 'id',
            'lat': 'lat',
            'lng': 'lng',
            'name': 'name',
            'visible': 'visible'
        }

        self._depth = depth
        self._icon = icon
        self._id = id
        self._lat = lat
        self._lng = lng
        self._name = name
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePoiPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePoiPayload of this UpdatePoiPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def depth(self):
        """Gets the depth of this UpdatePoiPayload.

        Depth of POI

        :return: The depth of this UpdatePoiPayload.
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this UpdatePoiPayload.

        Depth of POI

        :param depth: The depth of this UpdatePoiPayload.
        :type depth: float
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")

        self._depth = depth

    @property
    def icon(self):
        """Gets the icon of this UpdatePoiPayload.

        Icon of POI

        :return: The icon of this UpdatePoiPayload.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this UpdatePoiPayload.

        Icon of POI

        :param icon: The icon of this UpdatePoiPayload.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this UpdatePoiPayload.

        Unique POI id

        :return: The id of this UpdatePoiPayload.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdatePoiPayload.

        Unique POI id

        :param id: The id of this UpdatePoiPayload.
        :type id: int
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this UpdatePoiPayload.

        Latitude of POI

        :return: The lat of this UpdatePoiPayload.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this UpdatePoiPayload.

        Latitude of POI

        :param lat: The lat of this UpdatePoiPayload.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this UpdatePoiPayload.

        Longitude of POI

        :return: The lng of this UpdatePoiPayload.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this UpdatePoiPayload.

        Longitude of POI

        :param lng: The lng of this UpdatePoiPayload.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")

        self._lng = lng

    @property
    def name(self):
        """Gets the name of this UpdatePoiPayload.

        Name of POI

        :return: The name of this UpdatePoiPayload.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatePoiPayload.

        Name of POI

        :param name: The name of this UpdatePoiPayload.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def visible(self):
        """Gets the visible of this UpdatePoiPayload.

        Visibility of POI

        :return: The visible of this UpdatePoiPayload.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this UpdatePoiPayload.

        Visibility of POI

        :param visible: The visible of this UpdatePoiPayload.
        :type visible: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")

        self._visible = visible
