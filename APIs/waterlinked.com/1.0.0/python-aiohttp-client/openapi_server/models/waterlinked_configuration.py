# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antenna_enabled: bool=None, channel: int=None, compass: str=None, environment: str=None, external_pps_enabled: bool=None, gps: str=None, imu_vehicle_enabled: bool=None, locator_type: str=None, range_max_x: float=None, range_max_y: float=None, range_max_z: float=None, range_min_x: float=None, range_min_y: float=None, search_direction: float=None, search_radius: float=None, search_sector: float=None, speed_of_sound: int=None, static_lat: float=None, static_lon: float=None, static_orientation: float=None):
        """WaterlinkedConfiguration - a model defined in OpenAPI

        :param antenna_enabled: The antenna_enabled of this WaterlinkedConfiguration.
        :param channel: The channel of this WaterlinkedConfiguration.
        :param compass: The compass of this WaterlinkedConfiguration.
        :param environment: The environment of this WaterlinkedConfiguration.
        :param external_pps_enabled: The external_pps_enabled of this WaterlinkedConfiguration.
        :param gps: The gps of this WaterlinkedConfiguration.
        :param imu_vehicle_enabled: The imu_vehicle_enabled of this WaterlinkedConfiguration.
        :param locator_type: The locator_type of this WaterlinkedConfiguration.
        :param range_max_x: The range_max_x of this WaterlinkedConfiguration.
        :param range_max_y: The range_max_y of this WaterlinkedConfiguration.
        :param range_max_z: The range_max_z of this WaterlinkedConfiguration.
        :param range_min_x: The range_min_x of this WaterlinkedConfiguration.
        :param range_min_y: The range_min_y of this WaterlinkedConfiguration.
        :param search_direction: The search_direction of this WaterlinkedConfiguration.
        :param search_radius: The search_radius of this WaterlinkedConfiguration.
        :param search_sector: The search_sector of this WaterlinkedConfiguration.
        :param speed_of_sound: The speed_of_sound of this WaterlinkedConfiguration.
        :param static_lat: The static_lat of this WaterlinkedConfiguration.
        :param static_lon: The static_lon of this WaterlinkedConfiguration.
        :param static_orientation: The static_orientation of this WaterlinkedConfiguration.
        """
        self.openapi_types = {
            'antenna_enabled': bool,
            'channel': int,
            'compass': str,
            'environment': str,
            'external_pps_enabled': bool,
            'gps': str,
            'imu_vehicle_enabled': bool,
            'locator_type': str,
            'range_max_x': float,
            'range_max_y': float,
            'range_max_z': float,
            'range_min_x': float,
            'range_min_y': float,
            'search_direction': float,
            'search_radius': float,
            'search_sector': float,
            'speed_of_sound': int,
            'static_lat': float,
            'static_lon': float,
            'static_orientation': float
        }

        self.attribute_map = {
            'antenna_enabled': 'antenna_enabled',
            'channel': 'channel',
            'compass': 'compass',
            'environment': 'environment',
            'external_pps_enabled': 'external_pps_enabled',
            'gps': 'gps',
            'imu_vehicle_enabled': 'imu_vehicle_enabled',
            'locator_type': 'locator_type',
            'range_max_x': 'range_max_x',
            'range_max_y': 'range_max_y',
            'range_max_z': 'range_max_z',
            'range_min_x': 'range_min_x',
            'range_min_y': 'range_min_y',
            'search_direction': 'search_direction',
            'search_radius': 'search_radius',
            'search_sector': 'search_sector',
            'speed_of_sound': 'speed_of_sound',
            'static_lat': 'static_lat',
            'static_lon': 'static_lon',
            'static_orientation': 'static_orientation'
        }

        self._antenna_enabled = antenna_enabled
        self._channel = channel
        self._compass = compass
        self._environment = environment
        self._external_pps_enabled = external_pps_enabled
        self._gps = gps
        self._imu_vehicle_enabled = imu_vehicle_enabled
        self._locator_type = locator_type
        self._range_max_x = range_max_x
        self._range_max_y = range_max_y
        self._range_max_z = range_max_z
        self._range_min_x = range_min_x
        self._range_min_y = range_min_y
        self._search_direction = search_direction
        self._search_radius = search_radius
        self._search_sector = search_sector
        self._speed_of_sound = speed_of_sound
        self._static_lat = static_lat
        self._static_lon = static_lon
        self._static_orientation = static_orientation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedConfiguration of this WaterlinkedConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antenna_enabled(self):
        """Gets the antenna_enabled of this WaterlinkedConfiguration.

        Enable use of antenna

        :return: The antenna_enabled of this WaterlinkedConfiguration.
        :rtype: bool
        """
        return self._antenna_enabled

    @antenna_enabled.setter
    def antenna_enabled(self, antenna_enabled):
        """Sets the antenna_enabled of this WaterlinkedConfiguration.

        Enable use of antenna

        :param antenna_enabled: The antenna_enabled of this WaterlinkedConfiguration.
        :type antenna_enabled: bool
        """

        self._antenna_enabled = antenna_enabled

    @property
    def channel(self):
        """Gets the channel of this WaterlinkedConfiguration.

        Channel to use

        :return: The channel of this WaterlinkedConfiguration.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this WaterlinkedConfiguration.

        Channel to use

        :param channel: The channel of this WaterlinkedConfiguration.
        :type channel: int
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")
        if channel is not None and channel > 6000:
            raise ValueError("Invalid value for `channel`, must be a value less than or equal to `6000`")
        if channel is not None and channel < 0:
            raise ValueError("Invalid value for `channel`, must be a value greater than or equal to `0`")

        self._channel = channel

    @property
    def compass(self):
        """Gets the compass of this WaterlinkedConfiguration.

        Compass provider setting

        :return: The compass of this WaterlinkedConfiguration.
        :rtype: str
        """
        return self._compass

    @compass.setter
    def compass(self, compass):
        """Sets the compass of this WaterlinkedConfiguration.

        Compass provider setting

        :param compass: The compass of this WaterlinkedConfiguration.
        :type compass: str
        """
        allowed_values = ["onboard", "static", "external"]  # noqa: E501
        if compass not in allowed_values:
            raise ValueError(
                "Invalid value for `compass` ({0}), must be one of {1}"
                .format(compass, allowed_values)
            )

        self._compass = compass

    @property
    def environment(self):
        """Gets the environment of this WaterlinkedConfiguration.

        [Deprecated] Environment setting

        :return: The environment of this WaterlinkedConfiguration.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this WaterlinkedConfiguration.

        [Deprecated] Environment setting

        :param environment: The environment of this WaterlinkedConfiguration.
        :type environment: str
        """
        allowed_values = ["reflective", "openwater"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def external_pps_enabled(self):
        """Gets the external_pps_enabled of this WaterlinkedConfiguration.

        Enable external PPS input to master

        :return: The external_pps_enabled of this WaterlinkedConfiguration.
        :rtype: bool
        """
        return self._external_pps_enabled

    @external_pps_enabled.setter
    def external_pps_enabled(self, external_pps_enabled):
        """Sets the external_pps_enabled of this WaterlinkedConfiguration.

        Enable external PPS input to master

        :param external_pps_enabled: The external_pps_enabled of this WaterlinkedConfiguration.
        :type external_pps_enabled: bool
        """

        self._external_pps_enabled = external_pps_enabled

    @property
    def gps(self):
        """Gets the gps of this WaterlinkedConfiguration.

        GPS provider setting

        :return: The gps of this WaterlinkedConfiguration.
        :rtype: str
        """
        return self._gps

    @gps.setter
    def gps(self, gps):
        """Sets the gps of this WaterlinkedConfiguration.

        GPS provider setting

        :param gps: The gps of this WaterlinkedConfiguration.
        :type gps: str
        """
        allowed_values = ["onboard", "static", "external"]  # noqa: E501
        if gps not in allowed_values:
            raise ValueError(
                "Invalid value for `gps` ({0}), must be one of {1}"
                .format(gps, allowed_values)
            )

        self._gps = gps

    @property
    def imu_vehicle_enabled(self):
        """Gets the imu_vehicle_enabled of this WaterlinkedConfiguration.

        [Deprecated] Enable IMU input from vehicle

        :return: The imu_vehicle_enabled of this WaterlinkedConfiguration.
        :rtype: bool
        """
        return self._imu_vehicle_enabled

    @imu_vehicle_enabled.setter
    def imu_vehicle_enabled(self, imu_vehicle_enabled):
        """Sets the imu_vehicle_enabled of this WaterlinkedConfiguration.

        [Deprecated] Enable IMU input from vehicle

        :param imu_vehicle_enabled: The imu_vehicle_enabled of this WaterlinkedConfiguration.
        :type imu_vehicle_enabled: bool
        """

        self._imu_vehicle_enabled = imu_vehicle_enabled

    @property
    def locator_type(self):
        """Gets the locator_type of this WaterlinkedConfiguration.

        Locator type in use

        :return: The locator_type of this WaterlinkedConfiguration.
        :rtype: str
        """
        return self._locator_type

    @locator_type.setter
    def locator_type(self, locator_type):
        """Sets the locator_type of this WaterlinkedConfiguration.

        Locator type in use

        :param locator_type: The locator_type of this WaterlinkedConfiguration.
        :type locator_type: str
        """
        allowed_values = ["d1", "a1", "s2", "p2", "u1"]  # noqa: E501
        if locator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `locator_type` ({0}), must be one of {1}"
                .format(locator_type, allowed_values)
            )

        self._locator_type = locator_type

    @property
    def range_max_x(self):
        """Gets the range_max_x of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :return: The range_max_x of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._range_max_x

    @range_max_x.setter
    def range_max_x(self, range_max_x):
        """Sets the range_max_x of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :param range_max_x: The range_max_x of this WaterlinkedConfiguration.
        :type range_max_x: float
        """
        if range_max_x is not None and range_max_x > 1E+2:
            raise ValueError("Invalid value for `range_max_x`, must be a value less than or equal to `1E+2`")
        if range_max_x is not None and range_max_x < 0:
            raise ValueError("Invalid value for `range_max_x`, must be a value greater than or equal to `0`")

        self._range_max_x = range_max_x

    @property
    def range_max_y(self):
        """Gets the range_max_y of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :return: The range_max_y of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._range_max_y

    @range_max_y.setter
    def range_max_y(self, range_max_y):
        """Sets the range_max_y of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :param range_max_y: The range_max_y of this WaterlinkedConfiguration.
        :type range_max_y: float
        """
        if range_max_y is not None and range_max_y > 1E+2:
            raise ValueError("Invalid value for `range_max_y`, must be a value less than or equal to `1E+2`")
        if range_max_y is not None and range_max_y < 0:
            raise ValueError("Invalid value for `range_max_y`, must be a value greater than or equal to `0`")

        self._range_max_y = range_max_y

    @property
    def range_max_z(self):
        """Gets the range_max_z of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :return: The range_max_z of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._range_max_z

    @range_max_z.setter
    def range_max_z(self, range_max_z):
        """Sets the range_max_z of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :param range_max_z: The range_max_z of this WaterlinkedConfiguration.
        :type range_max_z: float
        """
        if range_max_z is not None and range_max_z > 1E+2:
            raise ValueError("Invalid value for `range_max_z`, must be a value less than or equal to `1E+2`")
        if range_max_z is not None and range_max_z < 0:
            raise ValueError("Invalid value for `range_max_z`, must be a value greater than or equal to `0`")

        self._range_max_z = range_max_z

    @property
    def range_min_x(self):
        """Gets the range_min_x of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :return: The range_min_x of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._range_min_x

    @range_min_x.setter
    def range_min_x(self, range_min_x):
        """Sets the range_min_x of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :param range_min_x: The range_min_x of this WaterlinkedConfiguration.
        :type range_min_x: float
        """
        if range_min_x is not None and range_min_x > 0:
            raise ValueError("Invalid value for `range_min_x`, must be a value less than or equal to `0`")
        if range_min_x is not None and range_min_x < -1E+2:
            raise ValueError("Invalid value for `range_min_x`, must be a value greater than or equal to `-1E+2`")

        self._range_min_x = range_min_x

    @property
    def range_min_y(self):
        """Gets the range_min_y of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :return: The range_min_y of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._range_min_y

    @range_min_y.setter
    def range_min_y(self, range_min_y):
        """Sets the range_min_y of this WaterlinkedConfiguration.

        [Deprecated] Max range (meters)

        :param range_min_y: The range_min_y of this WaterlinkedConfiguration.
        :type range_min_y: float
        """
        if range_min_y is not None and range_min_y > 0:
            raise ValueError("Invalid value for `range_min_y`, must be a value less than or equal to `0`")
        if range_min_y is not None and range_min_y < -1E+2:
            raise ValueError("Invalid value for `range_min_y`, must be a value greater than or equal to `-1E+2`")

        self._range_min_y = range_min_y

    @property
    def search_direction(self):
        """Gets the search_direction of this WaterlinkedConfiguration.

        Direction of circular search area section

        :return: The search_direction of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._search_direction

    @search_direction.setter
    def search_direction(self, search_direction):
        """Sets the search_direction of this WaterlinkedConfiguration.

        Direction of circular search area section

        :param search_direction: The search_direction of this WaterlinkedConfiguration.
        :type search_direction: float
        """
        if search_direction is not None and search_direction > 3.6E+2:
            raise ValueError("Invalid value for `search_direction`, must be a value less than or equal to `3.6E+2`")
        if search_direction is not None and search_direction < 0:
            raise ValueError("Invalid value for `search_direction`, must be a value greater than or equal to `0`")

        self._search_direction = search_direction

    @property
    def search_radius(self):
        """Gets the search_radius of this WaterlinkedConfiguration.

        Radius of circular search area

        :return: The search_radius of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._search_radius

    @search_radius.setter
    def search_radius(self, search_radius):
        """Sets the search_radius of this WaterlinkedConfiguration.

        Radius of circular search area

        :param search_radius: The search_radius of this WaterlinkedConfiguration.
        :type search_radius: float
        """
        if search_radius is not None and search_radius > 3E+2:
            raise ValueError("Invalid value for `search_radius`, must be a value less than or equal to `3E+2`")
        if search_radius is not None and search_radius < 1:
            raise ValueError("Invalid value for `search_radius`, must be a value greater than or equal to `1`")

        self._search_radius = search_radius

    @property
    def search_sector(self):
        """Gets the search_sector of this WaterlinkedConfiguration.

        Sector angle of circular search area

        :return: The search_sector of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._search_sector

    @search_sector.setter
    def search_sector(self, search_sector):
        """Sets the search_sector of this WaterlinkedConfiguration.

        Sector angle of circular search area

        :param search_sector: The search_sector of this WaterlinkedConfiguration.
        :type search_sector: float
        """
        if search_sector is not None and search_sector > 3.6E+2:
            raise ValueError("Invalid value for `search_sector`, must be a value less than or equal to `3.6E+2`")
        if search_sector is not None and search_sector < 1:
            raise ValueError("Invalid value for `search_sector`, must be a value greater than or equal to `1`")

        self._search_sector = search_sector

    @property
    def speed_of_sound(self):
        """Gets the speed_of_sound of this WaterlinkedConfiguration.

        Speed of sound use by the system

        :return: The speed_of_sound of this WaterlinkedConfiguration.
        :rtype: int
        """
        return self._speed_of_sound

    @speed_of_sound.setter
    def speed_of_sound(self, speed_of_sound):
        """Sets the speed_of_sound of this WaterlinkedConfiguration.

        Speed of sound use by the system

        :param speed_of_sound: The speed_of_sound of this WaterlinkedConfiguration.
        :type speed_of_sound: int
        """
        if speed_of_sound is not None and speed_of_sound > 2000:
            raise ValueError("Invalid value for `speed_of_sound`, must be a value less than or equal to `2000`")
        if speed_of_sound is not None and speed_of_sound < 1000:
            raise ValueError("Invalid value for `speed_of_sound`, must be a value greater than or equal to `1000`")

        self._speed_of_sound = speed_of_sound

    @property
    def static_lat(self):
        """Gets the static_lat of this WaterlinkedConfiguration.

        Latitude to use in static mode

        :return: The static_lat of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._static_lat

    @static_lat.setter
    def static_lat(self, static_lat):
        """Sets the static_lat of this WaterlinkedConfiguration.

        Latitude to use in static mode

        :param static_lat: The static_lat of this WaterlinkedConfiguration.
        :type static_lat: float
        """
        if static_lat is None:
            raise ValueError("Invalid value for `static_lat`, must not be `None`")
        if static_lat is not None and static_lat > 9E+1:
            raise ValueError("Invalid value for `static_lat`, must be a value less than or equal to `9E+1`")
        if static_lat is not None and static_lat < -9E+1:
            raise ValueError("Invalid value for `static_lat`, must be a value greater than or equal to `-9E+1`")

        self._static_lat = static_lat

    @property
    def static_lon(self):
        """Gets the static_lon of this WaterlinkedConfiguration.

        Longitude to use in static mode

        :return: The static_lon of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._static_lon

    @static_lon.setter
    def static_lon(self, static_lon):
        """Sets the static_lon of this WaterlinkedConfiguration.

        Longitude to use in static mode

        :param static_lon: The static_lon of this WaterlinkedConfiguration.
        :type static_lon: float
        """
        if static_lon is None:
            raise ValueError("Invalid value for `static_lon`, must not be `None`")
        if static_lon is not None and static_lon > 1.8E+2:
            raise ValueError("Invalid value for `static_lon`, must be a value less than or equal to `1.8E+2`")
        if static_lon is not None and static_lon < -1.8E+2:
            raise ValueError("Invalid value for `static_lon`, must be a value greater than or equal to `-1.8E+2`")

        self._static_lon = static_lon

    @property
    def static_orientation(self):
        """Gets the static_orientation of this WaterlinkedConfiguration.

        Orientation/compass reading to use in static mode (degrees)

        :return: The static_orientation of this WaterlinkedConfiguration.
        :rtype: float
        """
        return self._static_orientation

    @static_orientation.setter
    def static_orientation(self, static_orientation):
        """Sets the static_orientation of this WaterlinkedConfiguration.

        Orientation/compass reading to use in static mode (degrees)

        :param static_orientation: The static_orientation of this WaterlinkedConfiguration.
        :type static_orientation: float
        """
        if static_orientation is None:
            raise ValueError("Invalid value for `static_orientation`, must not be `None`")
        if static_orientation is not None and static_orientation > 359:
            raise ValueError("Invalid value for `static_orientation`, must be a value less than or equal to `359`")
        if static_orientation is not None and static_orientation < 0:
            raise ValueError("Invalid value for `static_orientation`, must be a value greater than or equal to `0`")

        self._static_orientation = static_orientation
