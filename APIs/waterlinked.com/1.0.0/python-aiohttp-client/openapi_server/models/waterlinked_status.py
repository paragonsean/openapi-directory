# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, battery: int=None, gps: int=None, imu: int=None):
        """WaterlinkedStatus - a model defined in OpenAPI

        :param battery: The battery of this WaterlinkedStatus.
        :param gps: The gps of this WaterlinkedStatus.
        :param imu: The imu of this WaterlinkedStatus.
        """
        self.openapi_types = {
            'battery': int,
            'gps': int,
            'imu': int
        }

        self.attribute_map = {
            'battery': 'battery',
            'gps': 'gps',
            'imu': 'imu'
        }

        self._battery = battery
        self._gps = gps
        self._imu = imu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedStatus of this WaterlinkedStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def battery(self):
        """Gets the battery of this WaterlinkedStatus.

        Locator battery level in percent. -1 if not available or applicable

        :return: The battery of this WaterlinkedStatus.
        :rtype: int
        """
        return self._battery

    @battery.setter
    def battery(self, battery):
        """Sets the battery of this WaterlinkedStatus.

        Locator battery level in percent. -1 if not available or applicable

        :param battery: The battery of this WaterlinkedStatus.
        :type battery: int
        """
        if battery is None:
            raise ValueError("Invalid value for `battery`, must not be `None`")
        if battery is not None and battery > 100:
            raise ValueError("Invalid value for `battery`, must be a value less than or equal to `100`")
        if battery is not None and battery < -1:
            raise ValueError("Invalid value for `battery`, must be a value greater than or equal to `-1`")

        self._battery = battery

    @property
    def gps(self):
        """Gets the gps of this WaterlinkedStatus.

        GPS lock status

        :return: The gps of this WaterlinkedStatus.
        :rtype: int
        """
        return self._gps

    @gps.setter
    def gps(self, gps):
        """Sets the gps of this WaterlinkedStatus.

        GPS lock status

        :param gps: The gps of this WaterlinkedStatus.
        :type gps: int
        """
        if gps is None:
            raise ValueError("Invalid value for `gps`, must not be `None`")
        if gps is not None and gps > 3:
            raise ValueError("Invalid value for `gps`, must be a value less than or equal to `3`")
        if gps is not None and gps < 0:
            raise ValueError("Invalid value for `gps`, must be a value greater than or equal to `0`")

        self._gps = gps

    @property
    def imu(self):
        """Gets the imu of this WaterlinkedStatus.

        IMU calibration status

        :return: The imu of this WaterlinkedStatus.
        :rtype: int
        """
        return self._imu

    @imu.setter
    def imu(self, imu):
        """Sets the imu of this WaterlinkedStatus.

        IMU calibration status

        :param imu: The imu of this WaterlinkedStatus.
        :type imu: int
        """
        if imu is None:
            raise ValueError("Invalid value for `imu`, must not be `None`")
        if imu is not None and imu > 3:
            raise ValueError("Invalid value for `imu`, must be a value less than or equal to `3`")
        if imu is not None and imu < 0:
            raise ValueError("Invalid value for `imu`, must be a value greater than or equal to `0`")

        self._imu = imu
