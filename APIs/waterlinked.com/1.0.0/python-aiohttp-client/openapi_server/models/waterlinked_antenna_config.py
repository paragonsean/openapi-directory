# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedAntennaConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antenna_rotation: int=None, depth: float=None, x: float=None, y: float=None):
        """WaterlinkedAntennaConfig - a model defined in OpenAPI

        :param antenna_rotation: The antenna_rotation of this WaterlinkedAntennaConfig.
        :param depth: The depth of this WaterlinkedAntennaConfig.
        :param x: The x of this WaterlinkedAntennaConfig.
        :param y: The y of this WaterlinkedAntennaConfig.
        """
        self.openapi_types = {
            'antenna_rotation': int,
            'depth': float,
            'x': float,
            'y': float
        }

        self.attribute_map = {
            'antenna_rotation': 'antenna_rotation',
            'depth': 'depth',
            'x': 'x',
            'y': 'y'
        }

        self._antenna_rotation = antenna_rotation
        self._depth = depth
        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedAntennaConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedAntenna_config of this WaterlinkedAntennaConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antenna_rotation(self):
        """Gets the antenna_rotation of this WaterlinkedAntennaConfig.

        Configured rotation of antenna relative to forward arrow on topside housing. Clockwise is positive direction (degrees)

        :return: The antenna_rotation of this WaterlinkedAntennaConfig.
        :rtype: int
        """
        return self._antenna_rotation

    @antenna_rotation.setter
    def antenna_rotation(self, antenna_rotation):
        """Sets the antenna_rotation of this WaterlinkedAntennaConfig.

        Configured rotation of antenna relative to forward arrow on topside housing. Clockwise is positive direction (degrees)

        :param antenna_rotation: The antenna_rotation of this WaterlinkedAntennaConfig.
        :type antenna_rotation: int
        """
        if antenna_rotation is None:
            raise ValueError("Invalid value for `antenna_rotation`, must not be `None`")
        if antenna_rotation is not None and antenna_rotation > 360:
            raise ValueError("Invalid value for `antenna_rotation`, must be a value less than or equal to `360`")
        if antenna_rotation is not None and antenna_rotation < 0:
            raise ValueError("Invalid value for `antenna_rotation`, must be a value greater than or equal to `0`")

        self._antenna_rotation = antenna_rotation

    @property
    def depth(self):
        """Gets the depth of this WaterlinkedAntennaConfig.

        Configured depth relative to surface (meter)

        :return: The depth of this WaterlinkedAntennaConfig.
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this WaterlinkedAntennaConfig.

        Configured depth relative to surface (meter)

        :param depth: The depth of this WaterlinkedAntennaConfig.
        :type depth: float
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")
        if depth is not None and depth > 1E+1:
            raise ValueError("Invalid value for `depth`, must be a value less than or equal to `1E+1`")
        if depth is not None and depth < 0.1:
            raise ValueError("Invalid value for `depth`, must be a value greater than or equal to `0.1`")

        self._depth = depth

    @property
    def x(self):
        """Gets the x of this WaterlinkedAntennaConfig.

        Configured f position relative to master electronics (meter)

        :return: The x of this WaterlinkedAntennaConfig.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this WaterlinkedAntennaConfig.

        Configured f position relative to master electronics (meter)

        :param x: The x of this WaterlinkedAntennaConfig.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")
        if x is not None and x > 1E+2:
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `1E+2`")
        if x is not None and x < -1E+2:
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `-1E+2`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this WaterlinkedAntennaConfig.

        Configured Y position relative to master electronics (meter)

        :return: The y of this WaterlinkedAntennaConfig.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this WaterlinkedAntennaConfig.

        Configured Y position relative to master electronics (meter)

        :param y: The y of this WaterlinkedAntennaConfig.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")
        if y is not None and y > 1E+2:
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `1E+2`")
        if y is not None and y < -1E+2:
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `-1E+2`")

        self._y = y
