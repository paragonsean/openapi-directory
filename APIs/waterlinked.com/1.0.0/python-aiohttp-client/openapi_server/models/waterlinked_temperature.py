# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedTemperature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board: float=None, water: float=None):
        """WaterlinkedTemperature - a model defined in OpenAPI

        :param board: The board of this WaterlinkedTemperature.
        :param water: The water of this WaterlinkedTemperature.
        """
        self.openapi_types = {
            'board': float,
            'water': float
        }

        self.attribute_map = {
            'board': 'board',
            'water': 'water'
        }

        self._board = board
        self._water = water

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedTemperature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedTemperature of this WaterlinkedTemperature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board(self):
        """Gets the board of this WaterlinkedTemperature.

        Board temperature (C)

        :return: The board of this WaterlinkedTemperature.
        :rtype: float
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this WaterlinkedTemperature.

        Board temperature (C)

        :param board: The board of this WaterlinkedTemperature.
        :type board: float
        """
        if board is None:
            raise ValueError("Invalid value for `board`, must not be `None`")

        self._board = board

    @property
    def water(self):
        """Gets the water of this WaterlinkedTemperature.

        Water temperature (C)

        :return: The water of this WaterlinkedTemperature.
        :rtype: float
        """
        return self._water

    @water.setter
    def water(self, water):
        """Sets the water of this WaterlinkedTemperature.

        Water temperature (C)

        :param water: The water of this WaterlinkedTemperature.
        :type water: float
        """
        if water is None:
            raise ValueError("Invalid value for `water`, must not be `None`")

        self._water = water
