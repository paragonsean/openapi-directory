# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WlStatusGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_ids: List[str]=None, message: str=None, status: str=None, status_group: str=None, status_group_id: str=None):
        """WlStatusGroup - a model defined in OpenAPI

        :param error_ids: The error_ids of this WlStatusGroup.
        :param message: The message of this WlStatusGroup.
        :param status: The status of this WlStatusGroup.
        :param status_group: The status_group of this WlStatusGroup.
        :param status_group_id: The status_group_id of this WlStatusGroup.
        """
        self.openapi_types = {
            'error_ids': List[str],
            'message': str,
            'status': str,
            'status_group': str,
            'status_group_id': str
        }

        self.attribute_map = {
            'error_ids': 'error_ids',
            'message': 'message',
            'status': 'status',
            'status_group': 'status_group',
            'status_group_id': 'status_group_id'
        }

        self._error_ids = error_ids
        self._message = message
        self._status = status
        self._status_group = status_group
        self._status_group_id = status_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WlStatusGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WlStatusGroup of this WlStatusGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_ids(self):
        """Gets the error_ids of this WlStatusGroup.

        Identifiers for warnings/errors

        :return: The error_ids of this WlStatusGroup.
        :rtype: List[str]
        """
        return self._error_ids

    @error_ids.setter
    def error_ids(self, error_ids):
        """Sets the error_ids of this WlStatusGroup.

        Identifiers for warnings/errors

        :param error_ids: The error_ids of this WlStatusGroup.
        :type error_ids: List[str]
        """
        if error_ids is None:
            raise ValueError("Invalid value for `error_ids`, must not be `None`")

        self._error_ids = error_ids

    @property
    def message(self):
        """Gets the message of this WlStatusGroup.

        Message

        :return: The message of this WlStatusGroup.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WlStatusGroup.

        Message

        :param message: The message of this WlStatusGroup.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def status(self):
        """Gets the status of this WlStatusGroup.

        Status

        :return: The status of this WlStatusGroup.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WlStatusGroup.

        Status

        :param status: The status of this WlStatusGroup.
        :type status: str
        """
        allowed_values = ["ok", "warning", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_group(self):
        """Gets the status_group of this WlStatusGroup.

        Status group friendly name

        :return: The status_group of this WlStatusGroup.
        :rtype: str
        """
        return self._status_group

    @status_group.setter
    def status_group(self, status_group):
        """Sets the status_group of this WlStatusGroup.

        Status group friendly name

        :param status_group: The status_group of this WlStatusGroup.
        :type status_group: str
        """
        if status_group is None:
            raise ValueError("Invalid value for `status_group`, must not be `None`")

        self._status_group = status_group

    @property
    def status_group_id(self):
        """Gets the status_group_id of this WlStatusGroup.

        Status group identifier

        :return: The status_group_id of this WlStatusGroup.
        :rtype: str
        """
        return self._status_group_id

    @status_group_id.setter
    def status_group_id(self, status_group_id):
        """Sets the status_group_id of this WlStatusGroup.

        Status group identifier

        :param status_group_id: The status_group_id of this WlStatusGroup.
        :type status_group_id: str
        """
        if status_group_id is None:
            raise ValueError("Invalid value for `status_group_id`, must not be `None`")

        self._status_group_id = status_group_id
