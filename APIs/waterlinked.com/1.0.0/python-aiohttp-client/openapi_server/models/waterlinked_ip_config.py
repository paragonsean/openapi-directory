# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedIpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, dhcp: bool=None, dns: str=None, gateway: str=None, prefix: int=None):
        """WaterlinkedIpConfig - a model defined in OpenAPI

        :param address: The address of this WaterlinkedIpConfig.
        :param dhcp: The dhcp of this WaterlinkedIpConfig.
        :param dns: The dns of this WaterlinkedIpConfig.
        :param gateway: The gateway of this WaterlinkedIpConfig.
        :param prefix: The prefix of this WaterlinkedIpConfig.
        """
        self.openapi_types = {
            'address': str,
            'dhcp': bool,
            'dns': str,
            'gateway': str,
            'prefix': int
        }

        self.attribute_map = {
            'address': 'address',
            'dhcp': 'dhcp',
            'dns': 'dns',
            'gateway': 'gateway',
            'prefix': 'prefix'
        }

        self._address = address
        self._dhcp = dhcp
        self._dns = dns
        self._gateway = gateway
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedIpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedIp_config of this WaterlinkedIpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this WaterlinkedIpConfig.

        IP address to use

        :return: The address of this WaterlinkedIpConfig.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WaterlinkedIpConfig.

        IP address to use

        :param address: The address of this WaterlinkedIpConfig.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def dhcp(self):
        """Gets the dhcp of this WaterlinkedIpConfig.

        DHCP to use

        :return: The dhcp of this WaterlinkedIpConfig.
        :rtype: bool
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this WaterlinkedIpConfig.

        DHCP to use

        :param dhcp: The dhcp of this WaterlinkedIpConfig.
        :type dhcp: bool
        """
        if dhcp is None:
            raise ValueError("Invalid value for `dhcp`, must not be `None`")

        self._dhcp = dhcp

    @property
    def dns(self):
        """Gets the dns of this WaterlinkedIpConfig.

        DNS to use

        :return: The dns of this WaterlinkedIpConfig.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this WaterlinkedIpConfig.

        DNS to use

        :param dns: The dns of this WaterlinkedIpConfig.
        :type dns: str
        """
        if dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")

        self._dns = dns

    @property
    def gateway(self):
        """Gets the gateway of this WaterlinkedIpConfig.

        Gateway to use

        :return: The gateway of this WaterlinkedIpConfig.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this WaterlinkedIpConfig.

        Gateway to use

        :param gateway: The gateway of this WaterlinkedIpConfig.
        :type gateway: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")

        self._gateway = gateway

    @property
    def prefix(self):
        """Gets the prefix of this WaterlinkedIpConfig.

        Prefix to use

        :return: The prefix of this WaterlinkedIpConfig.
        :rtype: int
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this WaterlinkedIpConfig.

        Prefix to use

        :param prefix: The prefix of this WaterlinkedIpConfig.
        :type prefix: int
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")
        if prefix is not None and prefix > 31:
            raise ValueError("Invalid value for `prefix`, must be a value less than or equal to `31`")
        if prefix is not None and prefix < 1:
            raise ValueError("Invalid value for `prefix`, must be a value greater than or equal to `1`")

        self._prefix = prefix
