# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedImu(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pitch: float=None, progress: int=None, roll: float=None, state: int=None, yaw: float=None):
        """WaterlinkedImu - a model defined in OpenAPI

        :param pitch: The pitch of this WaterlinkedImu.
        :param progress: The progress of this WaterlinkedImu.
        :param roll: The roll of this WaterlinkedImu.
        :param state: The state of this WaterlinkedImu.
        :param yaw: The yaw of this WaterlinkedImu.
        """
        self.openapi_types = {
            'pitch': float,
            'progress': int,
            'roll': float,
            'state': int,
            'yaw': float
        }

        self.attribute_map = {
            'pitch': 'pitch',
            'progress': 'progress',
            'roll': 'roll',
            'state': 'state',
            'yaw': 'yaw'
        }

        self._pitch = pitch
        self._progress = progress
        self._roll = roll
        self._state = state
        self._yaw = yaw

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedImu':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedImu of this WaterlinkedImu.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pitch(self):
        """Gets the pitch of this WaterlinkedImu.

        Pitch

        :return: The pitch of this WaterlinkedImu.
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this WaterlinkedImu.

        Pitch

        :param pitch: The pitch of this WaterlinkedImu.
        :type pitch: float
        """
        if pitch is None:
            raise ValueError("Invalid value for `pitch`, must not be `None`")
        if pitch is not None and pitch > 3.6E+2:
            raise ValueError("Invalid value for `pitch`, must be a value less than or equal to `3.6E+2`")
        if pitch is not None and pitch < 0:
            raise ValueError("Invalid value for `pitch`, must be a value greater than or equal to `0`")

        self._pitch = pitch

    @property
    def progress(self):
        """Gets the progress of this WaterlinkedImu.

        Calibration progress

        :return: The progress of this WaterlinkedImu.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this WaterlinkedImu.

        Calibration progress

        :param progress: The progress of this WaterlinkedImu.
        :type progress: int
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")
        if progress is not None and progress > 100:
            raise ValueError("Invalid value for `progress`, must be a value less than or equal to `100`")
        if progress is not None and progress < 0:
            raise ValueError("Invalid value for `progress`, must be a value greater than or equal to `0`")

        self._progress = progress

    @property
    def roll(self):
        """Gets the roll of this WaterlinkedImu.

        Roll

        :return: The roll of this WaterlinkedImu.
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this WaterlinkedImu.

        Roll

        :param roll: The roll of this WaterlinkedImu.
        :type roll: float
        """
        if roll is None:
            raise ValueError("Invalid value for `roll`, must not be `None`")
        if roll is not None and roll > 3.6E+2:
            raise ValueError("Invalid value for `roll`, must be a value less than or equal to `3.6E+2`")
        if roll is not None and roll < 0:
            raise ValueError("Invalid value for `roll`, must be a value greater than or equal to `0`")

        self._roll = roll

    @property
    def state(self):
        """Gets the state of this WaterlinkedImu.

        IMU calibration state. 0=running, 1=calibrating

        :return: The state of this WaterlinkedImu.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WaterlinkedImu.

        IMU calibration state. 0=running, 1=calibrating

        :param state: The state of this WaterlinkedImu.
        :type state: int
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and state > 3:
            raise ValueError("Invalid value for `state`, must be a value less than or equal to `3`")
        if state is not None and state < 0:
            raise ValueError("Invalid value for `state`, must be a value greater than or equal to `0`")

        self._state = state

    @property
    def yaw(self):
        """Gets the yaw of this WaterlinkedImu.

        Yaw

        :return: The yaw of this WaterlinkedImu.
        :rtype: float
        """
        return self._yaw

    @yaw.setter
    def yaw(self, yaw):
        """Sets the yaw of this WaterlinkedImu.

        Yaw

        :param yaw: The yaw of this WaterlinkedImu.
        :type yaw: float
        """
        if yaw is None:
            raise ValueError("Invalid value for `yaw`, must not be `None`")
        if yaw is not None and yaw > 3.6E+2:
            raise ValueError("Invalid value for `yaw`, must be a value less than or equal to `3.6E+2`")
        if yaw is not None and yaw < 0:
            raise ValueError("Invalid value for `yaw`, must be a value greater than or equal to `0`")

        self._yaw = yaw
