# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetDepthExternalPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, depth: float=None, temp: float=None):
        """SetDepthExternalPayload - a model defined in OpenAPI

        :param depth: The depth of this SetDepthExternalPayload.
        :param temp: The temp of this SetDepthExternalPayload.
        """
        self.openapi_types = {
            'depth': float,
            'temp': float
        }

        self.attribute_map = {
            'depth': 'depth',
            'temp': 'temp'
        }

        self._depth = depth
        self._temp = temp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetDepthExternalPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetDepthExternalPayload of this SetDepthExternalPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def depth(self):
        """Gets the depth of this SetDepthExternalPayload.

        Curent depth (meter)

        :return: The depth of this SetDepthExternalPayload.
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this SetDepthExternalPayload.

        Curent depth (meter)

        :param depth: The depth of this SetDepthExternalPayload.
        :type depth: float
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")
        if depth is not None and depth > 5E+2:
            raise ValueError("Invalid value for `depth`, must be a value less than or equal to `5E+2`")
        if depth is not None and depth < 0:
            raise ValueError("Invalid value for `depth`, must be a value greater than or equal to `0`")

        self._depth = depth

    @property
    def temp(self):
        """Gets the temp of this SetDepthExternalPayload.

        Current water temperature (C)

        :return: The temp of this SetDepthExternalPayload.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this SetDepthExternalPayload.

        Current water temperature (C)

        :param temp: The temp of this SetDepthExternalPayload.
        :type temp: float
        """
        if temp is None:
            raise ValueError("Invalid value for `temp`, must not be `None`")
        if temp is not None and temp > 6E+1:
            raise ValueError("Invalid value for `temp`, must be a value less than or equal to `6E+1`")
        if temp is not None and temp < -1E+1:
            raise ValueError("Invalid value for `temp`, must be a value greater than or equal to `-1E+1`")

        self._temp = temp
