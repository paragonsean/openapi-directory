# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterlinkedAccousticPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position_valid: bool=None, receiver_distance: List[float]=None, receiver_nsd: List[float]=None, receiver_rssi: List[float]=None, receiver_valid: List[float]=None, std: float=None, x: float=None, y: float=None, z: float=None):
        """WaterlinkedAccousticPosition - a model defined in OpenAPI

        :param position_valid: The position_valid of this WaterlinkedAccousticPosition.
        :param receiver_distance: The receiver_distance of this WaterlinkedAccousticPosition.
        :param receiver_nsd: The receiver_nsd of this WaterlinkedAccousticPosition.
        :param receiver_rssi: The receiver_rssi of this WaterlinkedAccousticPosition.
        :param receiver_valid: The receiver_valid of this WaterlinkedAccousticPosition.
        :param std: The std of this WaterlinkedAccousticPosition.
        :param x: The x of this WaterlinkedAccousticPosition.
        :param y: The y of this WaterlinkedAccousticPosition.
        :param z: The z of this WaterlinkedAccousticPosition.
        """
        self.openapi_types = {
            'position_valid': bool,
            'receiver_distance': List[float],
            'receiver_nsd': List[float],
            'receiver_rssi': List[float],
            'receiver_valid': List[float],
            'std': float,
            'x': float,
            'y': float,
            'z': float
        }

        self.attribute_map = {
            'position_valid': 'position_valid',
            'receiver_distance': 'receiver_distance',
            'receiver_nsd': 'receiver_nsd',
            'receiver_rssi': 'receiver_rssi',
            'receiver_valid': 'receiver_valid',
            'std': 'std',
            'x': 'x',
            'y': 'y',
            'z': 'z'
        }

        self._position_valid = position_valid
        self._receiver_distance = receiver_distance
        self._receiver_nsd = receiver_nsd
        self._receiver_rssi = receiver_rssi
        self._receiver_valid = receiver_valid
        self._std = std
        self._x = x
        self._y = y
        self._z = z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterlinkedAccousticPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterlinkedAccousticPosition of this WaterlinkedAccousticPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position_valid(self):
        """Gets the position_valid of this WaterlinkedAccousticPosition.

        Is current position valid or not

        :return: The position_valid of this WaterlinkedAccousticPosition.
        :rtype: bool
        """
        return self._position_valid

    @position_valid.setter
    def position_valid(self, position_valid):
        """Sets the position_valid of this WaterlinkedAccousticPosition.

        Is current position valid or not

        :param position_valid: The position_valid of this WaterlinkedAccousticPosition.
        :type position_valid: bool
        """
        if position_valid is None:
            raise ValueError("Invalid value for `position_valid`, must not be `None`")

        self._position_valid = position_valid

    @property
    def receiver_distance(self):
        """Gets the receiver_distance of this WaterlinkedAccousticPosition.

        Measured distance to the locator for each receiver

        :return: The receiver_distance of this WaterlinkedAccousticPosition.
        :rtype: List[float]
        """
        return self._receiver_distance

    @receiver_distance.setter
    def receiver_distance(self, receiver_distance):
        """Sets the receiver_distance of this WaterlinkedAccousticPosition.

        Measured distance to the locator for each receiver

        :param receiver_distance: The receiver_distance of this WaterlinkedAccousticPosition.
        :type receiver_distance: List[float]
        """
        if receiver_distance is None:
            raise ValueError("Invalid value for `receiver_distance`, must not be `None`")

        self._receiver_distance = receiver_distance

    @property
    def receiver_nsd(self):
        """Gets the receiver_nsd of this WaterlinkedAccousticPosition.

        Measured NSD for each receiver

        :return: The receiver_nsd of this WaterlinkedAccousticPosition.
        :rtype: List[float]
        """
        return self._receiver_nsd

    @receiver_nsd.setter
    def receiver_nsd(self, receiver_nsd):
        """Sets the receiver_nsd of this WaterlinkedAccousticPosition.

        Measured NSD for each receiver

        :param receiver_nsd: The receiver_nsd of this WaterlinkedAccousticPosition.
        :type receiver_nsd: List[float]
        """
        if receiver_nsd is None:
            raise ValueError("Invalid value for `receiver_nsd`, must not be `None`")

        self._receiver_nsd = receiver_nsd

    @property
    def receiver_rssi(self):
        """Gets the receiver_rssi of this WaterlinkedAccousticPosition.

        Measured RSSI for each receiver

        :return: The receiver_rssi of this WaterlinkedAccousticPosition.
        :rtype: List[float]
        """
        return self._receiver_rssi

    @receiver_rssi.setter
    def receiver_rssi(self, receiver_rssi):
        """Sets the receiver_rssi of this WaterlinkedAccousticPosition.

        Measured RSSI for each receiver

        :param receiver_rssi: The receiver_rssi of this WaterlinkedAccousticPosition.
        :type receiver_rssi: List[float]
        """
        if receiver_rssi is None:
            raise ValueError("Invalid value for `receiver_rssi`, must not be `None`")

        self._receiver_rssi = receiver_rssi

    @property
    def receiver_valid(self):
        """Gets the receiver_valid of this WaterlinkedAccousticPosition.

        Is signal valid or not for each receiver

        :return: The receiver_valid of this WaterlinkedAccousticPosition.
        :rtype: List[float]
        """
        return self._receiver_valid

    @receiver_valid.setter
    def receiver_valid(self, receiver_valid):
        """Sets the receiver_valid of this WaterlinkedAccousticPosition.

        Is signal valid or not for each receiver

        :param receiver_valid: The receiver_valid of this WaterlinkedAccousticPosition.
        :type receiver_valid: List[float]
        """
        if receiver_valid is None:
            raise ValueError("Invalid value for `receiver_valid`, must not be `None`")

        self._receiver_valid = receiver_valid

    @property
    def std(self):
        """Gets the std of this WaterlinkedAccousticPosition.

        Current acoustic position accuracy (meter)

        :return: The std of this WaterlinkedAccousticPosition.
        :rtype: float
        """
        return self._std

    @std.setter
    def std(self, std):
        """Sets the std of this WaterlinkedAccousticPosition.

        Current acoustic position accuracy (meter)

        :param std: The std of this WaterlinkedAccousticPosition.
        :type std: float
        """
        if std is None:
            raise ValueError("Invalid value for `std`, must not be `None`")
        if std is not None and std < 0:
            raise ValueError("Invalid value for `std`, must be a value greater than or equal to `0`")

        self._std = std

    @property
    def x(self):
        """Gets the x of this WaterlinkedAccousticPosition.

        Current acoustic x position relative to master electronics (meter)

        :return: The x of this WaterlinkedAccousticPosition.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this WaterlinkedAccousticPosition.

        Current acoustic x position relative to master electronics (meter)

        :param x: The x of this WaterlinkedAccousticPosition.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this WaterlinkedAccousticPosition.

        Current acoustic y position relative to master electronics (meter)

        :return: The y of this WaterlinkedAccousticPosition.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this WaterlinkedAccousticPosition.

        Current acoustic y position relative to master electronics (meter)

        :param y: The y of this WaterlinkedAccousticPosition.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def z(self):
        """Gets the z of this WaterlinkedAccousticPosition.

        Current acoustic z position (depth) relative to master electronics (meter)

        :return: The z of this WaterlinkedAccousticPosition.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this WaterlinkedAccousticPosition.

        Current acoustic z position (depth) relative to master electronics (meter)

        :param z: The z of this WaterlinkedAccousticPosition.
        :type z: float
        """
        if z is None:
            raise ValueError("Invalid value for `z`, must not be `None`")
        if z is not None and z < 0:
            raise ValueError("Invalid value for `z`, must be a value greater than or equal to `0`")

        self._z = z
