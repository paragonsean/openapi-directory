# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, detail: str=None, id: str=None, meta: Dict[str, object]=None, status: str=None):
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.
        :param detail: The detail of this Error.
        :param id: The id of this Error.
        :param meta: The meta of this Error.
        :param status: The status of this Error.
        """
        self.openapi_types = {
            'code': str,
            'detail': str,
            'id': str,
            'meta': Dict[str, object],
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'id': 'id',
            'meta': 'meta',
            'status': 'status'
        }

        self._code = code
        self._detail = detail
        self._id = id
        self._meta = meta
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.

        an application-specific error code, expressed as a string value.

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        an application-specific error code, expressed as a string value.

        :param code: The code of this Error.
        :type code: str
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this Error.

        a human-readable explanation specific to this occurrence of the problem.

        :return: The detail of this Error.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Error.

        a human-readable explanation specific to this occurrence of the problem.

        :param detail: The detail of this Error.
        :type detail: str
        """

        self._detail = detail

    @property
    def id(self):
        """Gets the id of this Error.

        a unique identifier for this particular occurrence of the problem.

        :return: The id of this Error.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Error.

        a unique identifier for this particular occurrence of the problem.

        :param id: The id of this Error.
        :type id: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this Error.

        a meta object containing non-standard meta-information about the error.

        :return: The meta of this Error.
        :rtype: Dict[str, object]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Error.

        a meta object containing non-standard meta-information about the error.

        :param meta: The meta of this Error.
        :type meta: Dict[str, object]
        """

        self._meta = meta

    @property
    def status(self):
        """Gets the status of this Error.

        the HTTP status code applicable to this problem, expressed as a string value.

        :return: The status of this Error.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.

        the HTTP status code applicable to this problem, expressed as a string value.

        :param status: The status of this Error.
        :type status: str
        """

        self._status = status
