# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetMasterExternalPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cog: float=None, fix_quality: float=None, hdop: float=None, lat: float=None, lon: float=None, numsats: float=None, orientation: float=None, sog: float=None):
        """SetMasterExternalPayload - a model defined in OpenAPI

        :param cog: The cog of this SetMasterExternalPayload.
        :param fix_quality: The fix_quality of this SetMasterExternalPayload.
        :param hdop: The hdop of this SetMasterExternalPayload.
        :param lat: The lat of this SetMasterExternalPayload.
        :param lon: The lon of this SetMasterExternalPayload.
        :param numsats: The numsats of this SetMasterExternalPayload.
        :param orientation: The orientation of this SetMasterExternalPayload.
        :param sog: The sog of this SetMasterExternalPayload.
        """
        self.openapi_types = {
            'cog': float,
            'fix_quality': float,
            'hdop': float,
            'lat': float,
            'lon': float,
            'numsats': float,
            'orientation': float,
            'sog': float
        }

        self.attribute_map = {
            'cog': 'cog',
            'fix_quality': 'fix_quality',
            'hdop': 'hdop',
            'lat': 'lat',
            'lon': 'lon',
            'numsats': 'numsats',
            'orientation': 'orientation',
            'sog': 'sog'
        }

        self._cog = cog
        self._fix_quality = fix_quality
        self._hdop = hdop
        self._lat = lat
        self._lon = lon
        self._numsats = numsats
        self._orientation = orientation
        self._sog = sog

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetMasterExternalPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetMasterExternalPayload of this SetMasterExternalPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cog(self):
        """Gets the cog of this SetMasterExternalPayload.

        Course over ground (degrees). -1 means no data.

        :return: The cog of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._cog

    @cog.setter
    def cog(self, cog):
        """Sets the cog of this SetMasterExternalPayload.

        Course over ground (degrees). -1 means no data.

        :param cog: The cog of this SetMasterExternalPayload.
        :type cog: float
        """
        if cog is not None and cog > 359.999:
            raise ValueError("Invalid value for `cog`, must be a value less than or equal to `359.999`")
        if cog is not None and cog < -1:
            raise ValueError("Invalid value for `cog`, must be a value greater than or equal to `-1`")

        self._cog = cog

    @property
    def fix_quality(self):
        """Gets the fix_quality of this SetMasterExternalPayload.

        Fix quality. 0 if no data.

        :return: The fix_quality of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._fix_quality

    @fix_quality.setter
    def fix_quality(self, fix_quality):
        """Sets the fix_quality of this SetMasterExternalPayload.

        Fix quality. 0 if no data.

        :param fix_quality: The fix_quality of this SetMasterExternalPayload.
        :type fix_quality: float
        """
        if fix_quality is not None and fix_quality < 0:
            raise ValueError("Invalid value for `fix_quality`, must be a value greater than or equal to `0`")

        self._fix_quality = fix_quality

    @property
    def hdop(self):
        """Gets the hdop of this SetMasterExternalPayload.

        Horizontal dilution of precision. -1 means no data.

        :return: The hdop of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._hdop

    @hdop.setter
    def hdop(self, hdop):
        """Sets the hdop of this SetMasterExternalPayload.

        Horizontal dilution of precision. -1 means no data.

        :param hdop: The hdop of this SetMasterExternalPayload.
        :type hdop: float
        """
        if hdop is not None and hdop < -1:
            raise ValueError("Invalid value for `hdop`, must be a value greater than or equal to `-1`")

        self._hdop = hdop

    @property
    def lat(self):
        """Gets the lat of this SetMasterExternalPayload.

        Current Latitude

        :return: The lat of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SetMasterExternalPayload.

        Current Latitude

        :param lat: The lat of this SetMasterExternalPayload.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")
        if lat is not None and lat > 9E+1:
            raise ValueError("Invalid value for `lat`, must be a value less than or equal to `9E+1`")
        if lat is not None and lat < -9E+1:
            raise ValueError("Invalid value for `lat`, must be a value greater than or equal to `-9E+1`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this SetMasterExternalPayload.

        Current Longitude

        :return: The lon of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this SetMasterExternalPayload.

        Current Longitude

        :param lon: The lon of this SetMasterExternalPayload.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")
        if lon is not None and lon > 1.8E+2:
            raise ValueError("Invalid value for `lon`, must be a value less than or equal to `1.8E+2`")
        if lon is not None and lon < -1.8E+2:
            raise ValueError("Invalid value for `lon`, must be a value greater than or equal to `-1.8E+2`")

        self._lon = lon

    @property
    def numsats(self):
        """Gets the numsats of this SetMasterExternalPayload.

        Number of satellites. -1 means no data.

        :return: The numsats of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._numsats

    @numsats.setter
    def numsats(self, numsats):
        """Sets the numsats of this SetMasterExternalPayload.

        Number of satellites. -1 means no data.

        :param numsats: The numsats of this SetMasterExternalPayload.
        :type numsats: float
        """
        if numsats is not None and numsats < -1:
            raise ValueError("Invalid value for `numsats`, must be a value greater than or equal to `-1`")

        self._numsats = numsats

    @property
    def orientation(self):
        """Gets the orientation of this SetMasterExternalPayload.

        Current orientation/compass heading (degrees)

        :return: The orientation of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this SetMasterExternalPayload.

        Current orientation/compass heading (degrees)

        :param orientation: The orientation of this SetMasterExternalPayload.
        :type orientation: float
        """
        if orientation is None:
            raise ValueError("Invalid value for `orientation`, must not be `None`")
        if orientation is not None and orientation > 359.999:
            raise ValueError("Invalid value for `orientation`, must be a value less than or equal to `359.999`")
        if orientation is not None and orientation < 0:
            raise ValueError("Invalid value for `orientation`, must be a value greater than or equal to `0`")

        self._orientation = orientation

    @property
    def sog(self):
        """Gets the sog of this SetMasterExternalPayload.

        Speed over ground (km/h). -1 means no data.

        :return: The sog of this SetMasterExternalPayload.
        :rtype: float
        """
        return self._sog

    @sog.setter
    def sog(self, sog):
        """Sets the sog of this SetMasterExternalPayload.

        Speed over ground (km/h). -1 means no data.

        :param sog: The sog of this SetMasterExternalPayload.
        :type sog: float
        """
        if sog is not None and sog < -1:
            raise ValueError("Invalid value for `sog`, must be a value greater than or equal to `-1`")

        self._sog = sog
