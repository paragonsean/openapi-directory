/**
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_render__templateId__post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_render__templateId__post_request::OAI_render__templateId__post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_render__templateId__post_request::OAI_render__templateId__post_request() {
    this->initializeModel();
}

OAI_render__templateId__post_request::~OAI_render__templateId__post_request() {}

void OAI_render__templateId__post_request::initializeModel() {

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_convert_to_isSet = false;
    m_convert_to_isValid = false;

    m_currency_rates_isSet = false;
    m_currency_rates_isValid = false;

    m_currency_source_isSet = false;
    m_currency_source_isValid = false;

    m_currency_target_isSet = false;
    m_currency_target_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_r_enum_isSet = false;
    m_r_enum_isValid = false;

    m_hard_refresh_isSet = false;
    m_hard_refresh_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_report_name_isSet = false;
    m_report_name_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;

    m_variable_str_isSet = false;
    m_variable_str_isValid = false;
}

void OAI_render__templateId__post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_render__templateId__post_request::fromJsonObject(QJsonObject json) {

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_convert_to_isValid = ::OpenAPI::fromJsonValue(m_convert_to, json[QString("convertTo")]);
    m_convert_to_isSet = !json[QString("convertTo")].isNull() && m_convert_to_isValid;

    m_currency_rates_isValid = ::OpenAPI::fromJsonValue(m_currency_rates, json[QString("currencyRates")]);
    m_currency_rates_isSet = !json[QString("currencyRates")].isNull() && m_currency_rates_isValid;

    m_currency_source_isValid = ::OpenAPI::fromJsonValue(m_currency_source, json[QString("currencySource")]);
    m_currency_source_isSet = !json[QString("currencySource")].isNull() && m_currency_source_isValid;

    m_currency_target_isValid = ::OpenAPI::fromJsonValue(m_currency_target, json[QString("currencyTarget")]);
    m_currency_target_isSet = !json[QString("currencyTarget")].isNull() && m_currency_target_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_r_enum_isValid = ::OpenAPI::fromJsonValue(m_r_enum, json[QString("enum")]);
    m_r_enum_isSet = !json[QString("enum")].isNull() && m_r_enum_isValid;

    m_hard_refresh_isValid = ::OpenAPI::fromJsonValue(m_hard_refresh, json[QString("hardRefresh")]);
    m_hard_refresh_isSet = !json[QString("hardRefresh")].isNull() && m_hard_refresh_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_report_name_isValid = ::OpenAPI::fromJsonValue(m_report_name, json[QString("reportName")]);
    m_report_name_isSet = !json[QString("reportName")].isNull() && m_report_name_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("translations")]);
    m_translations_isSet = !json[QString("translations")].isNull() && m_translations_isValid;

    m_variable_str_isValid = ::OpenAPI::fromJsonValue(m_variable_str, json[QString("variableStr")]);
    m_variable_str_isSet = !json[QString("variableStr")].isNull() && m_variable_str_isValid;
}

QString OAI_render__templateId__post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_render__templateId__post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_convert_to_isSet) {
        obj.insert(QString("convertTo"), ::OpenAPI::toJsonValue(m_convert_to));
    }
    if (m_currency_rates_isSet) {
        obj.insert(QString("currencyRates"), ::OpenAPI::toJsonValue(m_currency_rates));
    }
    if (m_currency_source_isSet) {
        obj.insert(QString("currencySource"), ::OpenAPI::toJsonValue(m_currency_source));
    }
    if (m_currency_target_isSet) {
        obj.insert(QString("currencyTarget"), ::OpenAPI::toJsonValue(m_currency_target));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_r_enum_isSet) {
        obj.insert(QString("enum"), ::OpenAPI::toJsonValue(m_r_enum));
    }
    if (m_hard_refresh_isSet) {
        obj.insert(QString("hardRefresh"), ::OpenAPI::toJsonValue(m_hard_refresh));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_report_name_isSet) {
        obj.insert(QString("reportName"), ::OpenAPI::toJsonValue(m_report_name));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_translations_isSet) {
        obj.insert(QString("translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    if (m_variable_str_isSet) {
        obj.insert(QString("variableStr"), ::OpenAPI::toJsonValue(m_variable_str));
    }
    return obj;
}

OAIObject OAI_render__templateId__post_request::getComplement() const {
    return m_complement;
}
void OAI_render__templateId__post_request::setComplement(const OAIObject &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAI_render__templateId__post_request::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAI_render__templateId__post_request::is_complement_Valid() const{
    return m_complement_isValid;
}

QString OAI_render__templateId__post_request::getConvertTo() const {
    return m_convert_to;
}
void OAI_render__templateId__post_request::setConvertTo(const QString &convert_to) {
    m_convert_to = convert_to;
    m_convert_to_isSet = true;
}

bool OAI_render__templateId__post_request::is_convert_to_Set() const{
    return m_convert_to_isSet;
}

bool OAI_render__templateId__post_request::is_convert_to_Valid() const{
    return m_convert_to_isValid;
}

OAIObject OAI_render__templateId__post_request::getCurrencyRates() const {
    return m_currency_rates;
}
void OAI_render__templateId__post_request::setCurrencyRates(const OAIObject &currency_rates) {
    m_currency_rates = currency_rates;
    m_currency_rates_isSet = true;
}

bool OAI_render__templateId__post_request::is_currency_rates_Set() const{
    return m_currency_rates_isSet;
}

bool OAI_render__templateId__post_request::is_currency_rates_Valid() const{
    return m_currency_rates_isValid;
}

QString OAI_render__templateId__post_request::getCurrencySource() const {
    return m_currency_source;
}
void OAI_render__templateId__post_request::setCurrencySource(const QString &currency_source) {
    m_currency_source = currency_source;
    m_currency_source_isSet = true;
}

bool OAI_render__templateId__post_request::is_currency_source_Set() const{
    return m_currency_source_isSet;
}

bool OAI_render__templateId__post_request::is_currency_source_Valid() const{
    return m_currency_source_isValid;
}

QString OAI_render__templateId__post_request::getCurrencyTarget() const {
    return m_currency_target;
}
void OAI_render__templateId__post_request::setCurrencyTarget(const QString &currency_target) {
    m_currency_target = currency_target;
    m_currency_target_isSet = true;
}

bool OAI_render__templateId__post_request::is_currency_target_Set() const{
    return m_currency_target_isSet;
}

bool OAI_render__templateId__post_request::is_currency_target_Valid() const{
    return m_currency_target_isValid;
}

OAIObject OAI_render__templateId__post_request::getData() const {
    return m_data;
}
void OAI_render__templateId__post_request::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAI_render__templateId__post_request::is_data_Set() const{
    return m_data_isSet;
}

bool OAI_render__templateId__post_request::is_data_Valid() const{
    return m_data_isValid;
}

OAIObject OAI_render__templateId__post_request::getREnum() const {
    return m_r_enum;
}
void OAI_render__templateId__post_request::setREnum(const OAIObject &r_enum) {
    m_r_enum = r_enum;
    m_r_enum_isSet = true;
}

bool OAI_render__templateId__post_request::is_r_enum_Set() const{
    return m_r_enum_isSet;
}

bool OAI_render__templateId__post_request::is_r_enum_Valid() const{
    return m_r_enum_isValid;
}

bool OAI_render__templateId__post_request::isHardRefresh() const {
    return m_hard_refresh;
}
void OAI_render__templateId__post_request::setHardRefresh(const bool &hard_refresh) {
    m_hard_refresh = hard_refresh;
    m_hard_refresh_isSet = true;
}

bool OAI_render__templateId__post_request::is_hard_refresh_Set() const{
    return m_hard_refresh_isSet;
}

bool OAI_render__templateId__post_request::is_hard_refresh_Valid() const{
    return m_hard_refresh_isValid;
}

QString OAI_render__templateId__post_request::getLang() const {
    return m_lang;
}
void OAI_render__templateId__post_request::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAI_render__templateId__post_request::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAI_render__templateId__post_request::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAI_render__templateId__post_request::getReportName() const {
    return m_report_name;
}
void OAI_render__templateId__post_request::setReportName(const QString &report_name) {
    m_report_name = report_name;
    m_report_name_isSet = true;
}

bool OAI_render__templateId__post_request::is_report_name_Set() const{
    return m_report_name_isSet;
}

bool OAI_render__templateId__post_request::is_report_name_Valid() const{
    return m_report_name_isValid;
}

QString OAI_render__templateId__post_request::getTimezone() const {
    return m_timezone;
}
void OAI_render__templateId__post_request::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAI_render__templateId__post_request::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAI_render__templateId__post_request::is_timezone_Valid() const{
    return m_timezone_isValid;
}

OAIObject OAI_render__templateId__post_request::getTranslations() const {
    return m_translations;
}
void OAI_render__templateId__post_request::setTranslations(const OAIObject &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAI_render__templateId__post_request::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAI_render__templateId__post_request::is_translations_Valid() const{
    return m_translations_isValid;
}

QString OAI_render__templateId__post_request::getVariableStr() const {
    return m_variable_str;
}
void OAI_render__templateId__post_request::setVariableStr(const QString &variable_str) {
    m_variable_str = variable_str;
    m_variable_str_isSet = true;
}

bool OAI_render__templateId__post_request::is_variable_str_Set() const{
    return m_variable_str_isSet;
}

bool OAI_render__templateId__post_request::is_variable_str_Valid() const{
    return m_variable_str_isValid;
}

bool OAI_render__templateId__post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_enum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_refresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_str_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_render__templateId__post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
