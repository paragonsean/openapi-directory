/**
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_template_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_template_post_request::OAI_template_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_template_post_request::OAI_template_post_request() {
    this->initializeModel();
}

OAI_template_post_request::~OAI_template_post_request() {}

void OAI_template_post_request::initializeModel() {

    m_r_template_isSet = false;
    m_r_template_isValid = false;
}

void OAI_template_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_template_post_request::fromJsonObject(QJsonObject json) {

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;
}

QString OAI_template_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_template_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    return obj;
}

QString OAI_template_post_request::getRTemplate() const {
    return m_r_template;
}
void OAI_template_post_request::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAI_template_post_request::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAI_template_post_request::is_r_template_Valid() const{
    return m_r_template_isValid;
}

bool OAI_template_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_template_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_template_isValid && true;
}

} // namespace OpenAPI
