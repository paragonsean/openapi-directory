/**
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RenderTemplateIdPost200Response from '../model/RenderTemplateIdPost200Response';
import RenderTemplateIdPostRequest from '../model/RenderTemplateIdPostRequest';

/**
* Render service.
* @module api/RenderApi
* @version 1.2.0
*/
export default class RenderApi {

    /**
    * Constructs a new RenderApi. 
    * @alias module:api/RenderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the renderRenderIdGet operation.
     * @callback module:api/RenderApi~renderRenderIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retreive a generated document from a render ID.
     * Documentation: https://carbone.io/api-reference.html#download-rendered-reports
     * @param {String} renderId Unique identifier of the report
     * @param {Number} carboneVersion Carbone version
     * @param {module:api/RenderApi~renderRenderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renderRenderIdGet(renderId, carboneVersion, callback) {
      let postBody = null;
      // verify the required parameter 'renderId' is set
      if (renderId === undefined || renderId === null) {
        throw new Error("Missing the required parameter 'renderId' when calling renderRenderIdGet");
      }
      // verify the required parameter 'carboneVersion' is set
      if (carboneVersion === undefined || carboneVersion === null) {
        throw new Error("Missing the required parameter 'carboneVersion' when calling renderRenderIdGet");
      }

      let pathParams = {
        'renderId': renderId
      };
      let queryParams = {
      };
      let headerParams = {
        'carbone-version': carboneVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/render/{renderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renderTemplateIdPost operation.
     * @callback module:api/RenderApi~renderTemplateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenderTemplateIdPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a document from a template ID, and a JSON data-set
     * Documentation: https://carbone.io/api-reference.html#render-reports
     * @param {String} templateId Unique identifier of the template
     * @param {Number} carboneVersion Carbone version
     * @param {module:model/RenderTemplateIdPostRequest} renderTemplateIdPostRequest 
     * @param {module:api/RenderApi~renderTemplateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenderTemplateIdPost200Response}
     */
    renderTemplateIdPost(templateId, carboneVersion, renderTemplateIdPostRequest, callback) {
      let postBody = renderTemplateIdPostRequest;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling renderTemplateIdPost");
      }
      // verify the required parameter 'carboneVersion' is set
      if (carboneVersion === undefined || carboneVersion === null) {
        throw new Error("Missing the required parameter 'carboneVersion' when calling renderTemplateIdPost");
      }
      // verify the required parameter 'renderTemplateIdPostRequest' is set
      if (renderTemplateIdPostRequest === undefined || renderTemplateIdPostRequest === null) {
        throw new Error("Missing the required parameter 'renderTemplateIdPostRequest' when calling renderTemplateIdPost");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
        'carbone-version': carboneVersion
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RenderTemplateIdPost200Response;
      return this.apiClient.callApi(
        '/render/{templateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
