/**
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RenderTemplateIdPostRequest model module.
 * @module model/RenderTemplateIdPostRequest
 * @version 1.2.0
 */
class RenderTemplateIdPostRequest {
    /**
     * Constructs a new <code>RenderTemplateIdPostRequest</code>.
     * @alias module:model/RenderTemplateIdPostRequest
     * @param data {Object} Required - ️JSON data-set merged into the template to generate a document
     */
    constructor(data) { 
        
        RenderTemplateIdPostRequest.initialize(this, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data) { 
        obj['data'] = data;
    }

    /**
     * Constructs a <code>RenderTemplateIdPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RenderTemplateIdPostRequest} obj Optional instance to populate.
     * @return {module:model/RenderTemplateIdPostRequest} The populated <code>RenderTemplateIdPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RenderTemplateIdPostRequest();

            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], Object);
            }
            if (data.hasOwnProperty('convertTo')) {
                obj['convertTo'] = ApiClient.convertToType(data['convertTo'], 'String');
            }
            if (data.hasOwnProperty('currencyRates')) {
                obj['currencyRates'] = ApiClient.convertToType(data['currencyRates'], Object);
            }
            if (data.hasOwnProperty('currencySource')) {
                obj['currencySource'] = ApiClient.convertToType(data['currencySource'], 'String');
            }
            if (data.hasOwnProperty('currencyTarget')) {
                obj['currencyTarget'] = ApiClient.convertToType(data['currencyTarget'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('enum')) {
                obj['enum'] = ApiClient.convertToType(data['enum'], Object);
            }
            if (data.hasOwnProperty('hardRefresh')) {
                obj['hardRefresh'] = ApiClient.convertToType(data['hardRefresh'], 'Boolean');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('reportName')) {
                obj['reportName'] = ApiClient.convertToType(data['reportName'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], Object);
            }
            if (data.hasOwnProperty('variableStr')) {
                obj['variableStr'] = ApiClient.convertToType(data['variableStr'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RenderTemplateIdPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RenderTemplateIdPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RenderTemplateIdPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['convertTo'] && !(typeof data['convertTo'] === 'string' || data['convertTo'] instanceof String)) {
            throw new Error("Expected the field `convertTo` to be a primitive type in the JSON string but got " + data['convertTo']);
        }
        // ensure the json data is a string
        if (data['currencySource'] && !(typeof data['currencySource'] === 'string' || data['currencySource'] instanceof String)) {
            throw new Error("Expected the field `currencySource` to be a primitive type in the JSON string but got " + data['currencySource']);
        }
        // ensure the json data is a string
        if (data['currencyTarget'] && !(typeof data['currencyTarget'] === 'string' || data['currencyTarget'] instanceof String)) {
            throw new Error("Expected the field `currencyTarget` to be a primitive type in the JSON string but got " + data['currencyTarget']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['reportName'] && !(typeof data['reportName'] === 'string' || data['reportName'] instanceof String)) {
            throw new Error("Expected the field `reportName` to be a primitive type in the JSON string but got " + data['reportName']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['variableStr'] && !(typeof data['variableStr'] === 'string' || data['variableStr'] instanceof String)) {
            throw new Error("Expected the field `variableStr` to be a primitive type in the JSON string but got " + data['variableStr']);
        }

        return true;
    }


}

RenderTemplateIdPostRequest.RequiredProperties = ["data"];

/**
 * Optional - Object|Array, extra data accessible in the template with {c.} instead of {d.}
 * @member {Object} complement
 */
RenderTemplateIdPostRequest.prototype['complement'] = undefined;

/**
 * Optional - Convert the document into another format. Accepted values: ods xlsx xls csv pdf txt odp ppt pptx jpg png odt doc docx txt jpg png epub html xml idml. List of supported formats: https://carbone.io/documentation.html#supported-files-and-features-list
 * @member {String} convertTo
 */
RenderTemplateIdPostRequest.prototype['convertTo'] = undefined;

/**
 * Optional - Currency exchange rates for conversions from `currencySource` to `currencyTarget`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
 * @member {Object} currencyRates
 */
RenderTemplateIdPostRequest.prototype['currencyRates'] = undefined;

/**
 * Optional - Currency source coming from your JSON data. The option is used by `formatC` to convert the currency based on the `currencyTarget` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
 * @member {String} currencySource
 */
RenderTemplateIdPostRequest.prototype['currencySource'] = undefined;

/**
 * Optional - Target currency when the document is generated. The option is used by `formatC` to convert the currency based on the `currencySource` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
 * @member {String} currencyTarget
 */
RenderTemplateIdPostRequest.prototype['currencyTarget'] = undefined;

/**
 * Required - ️JSON data-set merged into the template to generate a document
 * @member {Object} data
 */
RenderTemplateIdPostRequest.prototype['data'] = undefined;

/**
 * Optional - List of enumerations, use it in reports with `convEnum` formatters, documentation: https://carbone.io/documentation.html#convenum-type-
 * @member {Object} enum
 */
RenderTemplateIdPostRequest.prototype['enum'] = undefined;

/**
 * Optional - If true, the report content is refreshed at the end of the rendering process. To use this option, `convertTo` has to be defined. It is mostly used to refresh a table of content.
 * @member {Boolean} hardRefresh
 */
RenderTemplateIdPostRequest.prototype['hardRefresh'] = undefined;

/**
 * Optional - Locale of the generated doocument, it will used for translation `{t()}`, formatting numbers with `:formatN`, and currencies `:formatC`. List of supported locales: https://github.com/carboneio/carbone/blob/master/formatters/_locale.js
 * @member {String} lang
 */
RenderTemplateIdPostRequest.prototype['lang'] = undefined;

/**
 * Optional - Static or dynamic file name returned on the `content-disposition` header when the generated report is fetched with `GET /report/:renderI`. Multiple Carbone tags are accepted, such as `{d.type}-{d.date}.pdf`
 * @member {String} reportName
 */
RenderTemplateIdPostRequest.prototype['reportName'] = undefined;

/**
 * Optional - Convert document dates to a timezone. The default timezone is `Europe/Paris`. The date must be chained with the `:formatD` formatter, for instance `{d.date:formatD(YYYY-MM-DD HH:MM)}`. List of accepted timezones (Column TZ identifier): https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
 * @member {String} timezone
 */
RenderTemplateIdPostRequest.prototype['timezone'] = undefined;

/**
 * Optional - When the report is generated, all text between `{t( )}` is replaced with the corresponding translation. The `lang` option is required to select the correct translation. Learn more: https://carbone.io/documentation.html#translations
 * @member {Object} translations
 */
RenderTemplateIdPostRequest.prototype['translations'] = undefined;

/**
 * Optional - Predefine alias, related documenation: https://carbone.io/documentation.html#alias
 * @member {String} variableStr
 */
RenderTemplateIdPostRequest.prototype['variableStr'] = undefined;






export default RenderTemplateIdPostRequest;

