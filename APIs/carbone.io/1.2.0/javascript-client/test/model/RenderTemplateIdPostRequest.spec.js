/**
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarboneApi);
  }
}(this, function(expect, CarboneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CarboneApi.RenderTemplateIdPostRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RenderTemplateIdPostRequest', function() {
    it('should create an instance of RenderTemplateIdPostRequest', function() {
      // uncomment below and update the code to test RenderTemplateIdPostRequest
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be.a(CarboneApi.RenderTemplateIdPostRequest);
    });

    it('should have the property complement (base name: "complement")', function() {
      // uncomment below and update the code to test the property complement
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property convertTo (base name: "convertTo")', function() {
      // uncomment below and update the code to test the property convertTo
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property currencyRates (base name: "currencyRates")', function() {
      // uncomment below and update the code to test the property currencyRates
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property currencySource (base name: "currencySource")', function() {
      // uncomment below and update the code to test the property currencySource
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property currencyTarget (base name: "currencyTarget")', function() {
      // uncomment below and update the code to test the property currencyTarget
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property _enum (base name: "enum")', function() {
      // uncomment below and update the code to test the property _enum
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property hardRefresh (base name: "hardRefresh")', function() {
      // uncomment below and update the code to test the property hardRefresh
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property lang (base name: "lang")', function() {
      // uncomment below and update the code to test the property lang
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property reportName (base name: "reportName")', function() {
      // uncomment below and update the code to test the property reportName
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property translations (base name: "translations")', function() {
      // uncomment below and update the code to test the property translations
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property variableStr (base name: "variableStr")', function() {
      // uncomment below and update the code to test the property variableStr
      //var instance = new CarboneApi.RenderTemplateIdPostRequest();
      //expect(instance).to.be();
    });

  });

}));
