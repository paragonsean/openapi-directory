# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenderTemplateIdPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complement: object=None, convert_to: str=None, currency_rates: object=None, currency_source: str=None, currency_target: str=None, data: object=None, enum: object=None, hard_refresh: bool=None, lang: str=None, report_name: str=None, timezone: str=None, translations: object=None, variable_str: str=None):
        """RenderTemplateIdPostRequest - a model defined in OpenAPI

        :param complement: The complement of this RenderTemplateIdPostRequest.
        :param convert_to: The convert_to of this RenderTemplateIdPostRequest.
        :param currency_rates: The currency_rates of this RenderTemplateIdPostRequest.
        :param currency_source: The currency_source of this RenderTemplateIdPostRequest.
        :param currency_target: The currency_target of this RenderTemplateIdPostRequest.
        :param data: The data of this RenderTemplateIdPostRequest.
        :param enum: The enum of this RenderTemplateIdPostRequest.
        :param hard_refresh: The hard_refresh of this RenderTemplateIdPostRequest.
        :param lang: The lang of this RenderTemplateIdPostRequest.
        :param report_name: The report_name of this RenderTemplateIdPostRequest.
        :param timezone: The timezone of this RenderTemplateIdPostRequest.
        :param translations: The translations of this RenderTemplateIdPostRequest.
        :param variable_str: The variable_str of this RenderTemplateIdPostRequest.
        """
        self.openapi_types = {
            'complement': object,
            'convert_to': str,
            'currency_rates': object,
            'currency_source': str,
            'currency_target': str,
            'data': object,
            'enum': object,
            'hard_refresh': bool,
            'lang': str,
            'report_name': str,
            'timezone': str,
            'translations': object,
            'variable_str': str
        }

        self.attribute_map = {
            'complement': 'complement',
            'convert_to': 'convertTo',
            'currency_rates': 'currencyRates',
            'currency_source': 'currencySource',
            'currency_target': 'currencyTarget',
            'data': 'data',
            'enum': 'enum',
            'hard_refresh': 'hardRefresh',
            'lang': 'lang',
            'report_name': 'reportName',
            'timezone': 'timezone',
            'translations': 'translations',
            'variable_str': 'variableStr'
        }

        self._complement = complement
        self._convert_to = convert_to
        self._currency_rates = currency_rates
        self._currency_source = currency_source
        self._currency_target = currency_target
        self._data = data
        self._enum = enum
        self._hard_refresh = hard_refresh
        self._lang = lang
        self._report_name = report_name
        self._timezone = timezone
        self._translations = translations
        self._variable_str = variable_str

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenderTemplateIdPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _render__templateId__post_request of this RenderTemplateIdPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complement(self):
        """Gets the complement of this RenderTemplateIdPostRequest.

        Optional - Object|Array, extra data accessible in the template with {c.} instead of {d.}

        :return: The complement of this RenderTemplateIdPostRequest.
        :rtype: object
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this RenderTemplateIdPostRequest.

        Optional - Object|Array, extra data accessible in the template with {c.} instead of {d.}

        :param complement: The complement of this RenderTemplateIdPostRequest.
        :type complement: object
        """

        self._complement = complement

    @property
    def convert_to(self):
        """Gets the convert_to of this RenderTemplateIdPostRequest.

        Optional - Convert the document into another format. Accepted values: ods xlsx xls csv pdf txt odp ppt pptx jpg png odt doc docx txt jpg png epub html xml idml. List of supported formats: https://carbone.io/documentation.html#supported-files-and-features-list

        :return: The convert_to of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._convert_to

    @convert_to.setter
    def convert_to(self, convert_to):
        """Sets the convert_to of this RenderTemplateIdPostRequest.

        Optional - Convert the document into another format. Accepted values: ods xlsx xls csv pdf txt odp ppt pptx jpg png odt doc docx txt jpg png epub html xml idml. List of supported formats: https://carbone.io/documentation.html#supported-files-and-features-list

        :param convert_to: The convert_to of this RenderTemplateIdPostRequest.
        :type convert_to: str
        """

        self._convert_to = convert_to

    @property
    def currency_rates(self):
        """Gets the currency_rates of this RenderTemplateIdPostRequest.

        Optional - Currency exchange rates for conversions from `currencySource` to `currencyTarget`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-

        :return: The currency_rates of this RenderTemplateIdPostRequest.
        :rtype: object
        """
        return self._currency_rates

    @currency_rates.setter
    def currency_rates(self, currency_rates):
        """Sets the currency_rates of this RenderTemplateIdPostRequest.

        Optional - Currency exchange rates for conversions from `currencySource` to `currencyTarget`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-

        :param currency_rates: The currency_rates of this RenderTemplateIdPostRequest.
        :type currency_rates: object
        """

        self._currency_rates = currency_rates

    @property
    def currency_source(self):
        """Gets the currency_source of this RenderTemplateIdPostRequest.

        Optional - Currency source coming from your JSON data. The option is used by `formatC` to convert the currency based on the `currencyTarget` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-

        :return: The currency_source of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._currency_source

    @currency_source.setter
    def currency_source(self, currency_source):
        """Sets the currency_source of this RenderTemplateIdPostRequest.

        Optional - Currency source coming from your JSON data. The option is used by `formatC` to convert the currency based on the `currencyTarget` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-

        :param currency_source: The currency_source of this RenderTemplateIdPostRequest.
        :type currency_source: str
        """

        self._currency_source = currency_source

    @property
    def currency_target(self):
        """Gets the currency_target of this RenderTemplateIdPostRequest.

        Optional - Target currency when the document is generated. The option is used by `formatC` to convert the currency based on the `currencySource` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-

        :return: The currency_target of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._currency_target

    @currency_target.setter
    def currency_target(self, currency_target):
        """Sets the currency_target of this RenderTemplateIdPostRequest.

        Optional - Target currency when the document is generated. The option is used by `formatC` to convert the currency based on the `currencySource` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-

        :param currency_target: The currency_target of this RenderTemplateIdPostRequest.
        :type currency_target: str
        """

        self._currency_target = currency_target

    @property
    def data(self):
        """Gets the data of this RenderTemplateIdPostRequest.

        Required - ️JSON data-set merged into the template to generate a document

        :return: The data of this RenderTemplateIdPostRequest.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RenderTemplateIdPostRequest.

        Required - ️JSON data-set merged into the template to generate a document

        :param data: The data of this RenderTemplateIdPostRequest.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def enum(self):
        """Gets the enum of this RenderTemplateIdPostRequest.

        Optional - List of enumerations, use it in reports with `convEnum` formatters, documentation: https://carbone.io/documentation.html#convenum-type-

        :return: The enum of this RenderTemplateIdPostRequest.
        :rtype: object
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this RenderTemplateIdPostRequest.

        Optional - List of enumerations, use it in reports with `convEnum` formatters, documentation: https://carbone.io/documentation.html#convenum-type-

        :param enum: The enum of this RenderTemplateIdPostRequest.
        :type enum: object
        """

        self._enum = enum

    @property
    def hard_refresh(self):
        """Gets the hard_refresh of this RenderTemplateIdPostRequest.

        Optional - If true, the report content is refreshed at the end of the rendering process. To use this option, `convertTo` has to be defined. It is mostly used to refresh a table of content.

        :return: The hard_refresh of this RenderTemplateIdPostRequest.
        :rtype: bool
        """
        return self._hard_refresh

    @hard_refresh.setter
    def hard_refresh(self, hard_refresh):
        """Sets the hard_refresh of this RenderTemplateIdPostRequest.

        Optional - If true, the report content is refreshed at the end of the rendering process. To use this option, `convertTo` has to be defined. It is mostly used to refresh a table of content.

        :param hard_refresh: The hard_refresh of this RenderTemplateIdPostRequest.
        :type hard_refresh: bool
        """

        self._hard_refresh = hard_refresh

    @property
    def lang(self):
        """Gets the lang of this RenderTemplateIdPostRequest.

        Optional - Locale of the generated doocument, it will used for translation `{t()}`, formatting numbers with `:formatN`, and currencies `:formatC`. List of supported locales: https://github.com/carboneio/carbone/blob/master/formatters/_locale.js

        :return: The lang of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this RenderTemplateIdPostRequest.

        Optional - Locale of the generated doocument, it will used for translation `{t()}`, formatting numbers with `:formatN`, and currencies `:formatC`. List of supported locales: https://github.com/carboneio/carbone/blob/master/formatters/_locale.js

        :param lang: The lang of this RenderTemplateIdPostRequest.
        :type lang: str
        """

        self._lang = lang

    @property
    def report_name(self):
        """Gets the report_name of this RenderTemplateIdPostRequest.

        Optional - Static or dynamic file name returned on the `content-disposition` header when the generated report is fetched with `GET /report/:renderI`. Multiple Carbone tags are accepted, such as `{d.type}-{d.date}.pdf`

        :return: The report_name of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this RenderTemplateIdPostRequest.

        Optional - Static or dynamic file name returned on the `content-disposition` header when the generated report is fetched with `GET /report/:renderI`. Multiple Carbone tags are accepted, such as `{d.type}-{d.date}.pdf`

        :param report_name: The report_name of this RenderTemplateIdPostRequest.
        :type report_name: str
        """

        self._report_name = report_name

    @property
    def timezone(self):
        """Gets the timezone of this RenderTemplateIdPostRequest.

        Optional - Convert document dates to a timezone. The default timezone is `Europe/Paris`. The date must be chained with the `:formatD` formatter, for instance `{d.date:formatD(YYYY-MM-DD HH:MM)}`. List of accepted timezones (Column TZ identifier): https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

        :return: The timezone of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this RenderTemplateIdPostRequest.

        Optional - Convert document dates to a timezone. The default timezone is `Europe/Paris`. The date must be chained with the `:formatD` formatter, for instance `{d.date:formatD(YYYY-MM-DD HH:MM)}`. List of accepted timezones (Column TZ identifier): https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

        :param timezone: The timezone of this RenderTemplateIdPostRequest.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def translations(self):
        """Gets the translations of this RenderTemplateIdPostRequest.

        Optional - When the report is generated, all text between `{t( )}` is replaced with the corresponding translation. The `lang` option is required to select the correct translation. Learn more: https://carbone.io/documentation.html#translations

        :return: The translations of this RenderTemplateIdPostRequest.
        :rtype: object
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this RenderTemplateIdPostRequest.

        Optional - When the report is generated, all text between `{t( )}` is replaced with the corresponding translation. The `lang` option is required to select the correct translation. Learn more: https://carbone.io/documentation.html#translations

        :param translations: The translations of this RenderTemplateIdPostRequest.
        :type translations: object
        """

        self._translations = translations

    @property
    def variable_str(self):
        """Gets the variable_str of this RenderTemplateIdPostRequest.

        Optional - Predefine alias, related documenation: https://carbone.io/documentation.html#alias

        :return: The variable_str of this RenderTemplateIdPostRequest.
        :rtype: str
        """
        return self._variable_str

    @variable_str.setter
    def variable_str(self, variable_str):
        """Sets the variable_str of this RenderTemplateIdPostRequest.

        Optional - Predefine alias, related documenation: https://carbone.io/documentation.html#alias

        :param variable_str: The variable_str of this RenderTemplateIdPostRequest.
        :type variable_str: str
        """

        self._variable_str = variable_str
